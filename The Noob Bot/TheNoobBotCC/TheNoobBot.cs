/*
* CustomClass for TheNoobBot
* Credit : Rival, Geesus, Enelya, Marstor, Vesper, Neo2003, Dreadlocks
* Thanks you !
*/

using System;
using System.IO;
using System.Threading;
using System.Windows.Forms;
using nManager.Helpful;
using nManager.Wow;
using nManager.Wow.Class;
using nManager.Wow.Enums;
using nManager.Wow.Helpers;
using nManager.Wow.ObjectManager;
using Keybindings = nManager.Wow.Helpers.Keybindings;
using Point = System.Drawing.Point;
using Timer = nManager.Helpful.Timer;

public class Main : ICustomClass
{
    internal static float range = 5.0f;
    internal static bool loop = true;

    #region ICustomClass Members

    public float Range
    {
        get { return range; }
        set { range = value; }
    }

    public void Initialize()
    {
        Initialize(false);
    }

    public void Dispose()
    {
        Logging.WriteFight("Combat system stopped.");
        loop = false;
    }

    public void ShowConfiguration()
    {
        Directory.CreateDirectory(Application.StartupPath + "\\CustomClasses\\Settings\\");
        Initialize(true);
    }

    public void ResetConfiguration()
    {
        Directory.CreateDirectory(Application.StartupPath + "\\CustomClasses\\Settings\\");
        Initialize(true, true);
    }

    #endregion

    public void Initialize(bool ConfigOnly, bool ResetSettings = false)
    {
        try
        {
            if (!loop)
                loop = true;
            Logging.WriteFight("Loading combat system.");
            switch (ObjectManager.Me.WowClass)
            {
                    #region DeathKnight Specialisation checking

                case WoWClass.DeathKnight:
                    var Blood_Rites = new Spell("Blood Rites");
                    var Reaping = new Spell("Reaping");
                    var Howling_Blast = new Spell("Howling Blast");

                    if (Blood_Rites.KnownSpell)
                    {
                        if (ConfigOnly)
                        {
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Deathknight_Blood.xml";
                            Deathknight_Blood.DeathknightBloodSettings CurrentSetting;
                            CurrentSetting = new Deathknight_Blood.DeathknightBloodSettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Deathknight_Blood.DeathknightBloodSettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Deathknight Blood class...");
                            range = 5.0f;
                            new Deathknight_Blood();
                        }
                    }
                    else if (Reaping.KnownSpell)
                    {
                        if (ConfigOnly)
                        {
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Deathknight_Unholy.xml";
                            Deathknight_Unholy.DeathknightUnholySettings CurrentSetting;
                            CurrentSetting = new Deathknight_Unholy.DeathknightUnholySettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Deathknight_Unholy.DeathknightUnholySettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Deathknight Unholy class...");
                            range = 5.0f;
                            new Deathknight_Unholy();
                        }
                    }
                    else if (Howling_Blast.KnownSpell)
                    {
                        if (ConfigOnly)
                        {
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Deathknight_Frost.xml";
                            Deathknight_Frost.DeathknightFrostSettings CurrentSetting;
                            CurrentSetting = new Deathknight_Frost.DeathknightFrostSettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Deathknight_Frost.DeathknightFrostSettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Deathknight Frost class...");
                            range = 5.0f;
                            new Deathknight_Frost();
                        }
                    }
                    else
                    {
                        if (ConfigOnly)
                        {
                            MessageBox.Show(
                                "Your specification haven't be found, loading Deathknight Apprentice Settings");
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Deathknight_Apprentice.xml";
                            Deathknight_Apprentice.DeathknightApprenticeSettings CurrentSetting;
                            CurrentSetting = new Deathknight_Apprentice.DeathknightApprenticeSettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Deathknight_Apprentice.DeathknightApprenticeSettings>(
                                        CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("No specialisation detected.");
                            Logging.WriteFight("Loading Deathknight Apprentice class...");
                            range = 5.0f;
                            new Deathknight_Apprentice();
                        }
                    }
                    break;

                    #endregion

                    #region Mage Specialisation checking

                case WoWClass.Mage:
                    var Mage_Arcane_Spell = new Spell("Arcane Blast");
                    var Mage_Fire_Spell = new Spell("Pyroblast");
                    var Mage_Frost_Spell = new Spell("Summon Water Elemental");

                    if (Mage_Arcane_Spell.KnownSpell)
                    {
                        if (ConfigOnly)
                        {
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Mage_Arcane.xml";
                            Mage_Arcane.MageArcaneSettings CurrentSetting;
                            CurrentSetting = new Mage_Arcane.MageArcaneSettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Mage_Arcane.MageArcaneSettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Mage Arcane class...");
                            range = 30.0f;
                            new Mage_Arcane();
                        }
                        break;
                    }
                    else if (Mage_Fire_Spell.KnownSpell)
                    {
                        if (ConfigOnly)
                        {
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Mage_Fire.xml";
                            Mage_Fire.MageFireSettings CurrentSetting;
                            CurrentSetting = new Mage_Fire.MageFireSettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Mage_Fire.MageFireSettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Mage Fire class...");
                            range = 30.0f;
                            new Mage_Fire();
                        }
                        break;
                    }
                    else if (Mage_Frost_Spell.KnownSpell)
                    {
                        if (ConfigOnly)
                        {
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Mage_Frost.xml";
                            Mage_Frost.MageFrostSettings CurrentSetting;
                            CurrentSetting = new Mage_Frost.MageFrostSettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Mage_Frost.MageFrostSettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Mage Frost class...");
                            range = 30.0f;
                            new Mage_Frost();
                        }
                        break;
                    }
                    else
                    {
                        if (ConfigOnly)
                        {
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Mage_Frost.xml";
                            Mage_Frost.MageFrostSettings CurrentSetting;
                            CurrentSetting = new Mage_Frost.MageFrostSettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Mage_Frost.MageFrostSettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Mage without Spec");
                            Logging.WriteFight("Loading Mage Frost class...");
                            range = 30.0f;
                            new Mage_Frost();
                        }
                        break;
                    }

                    #endregion

                    #region Warlock Specialisation checking

                case WoWClass.Warlock:
                    var Warlock_Demonology_Spell = new Spell("Summon Felguard");
                    var Warlock_Affliction_Spell = new Spell("Unstable Affliction");
                    var Warlock_Destruction_Spell = new Spell("Conflagrate");

                    if (Warlock_Demonology_Spell.KnownSpell)
                    {
                        if (ConfigOnly)
                        {
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Warlock_Demonology.xml";
                            Warlock_Demonology.WarlockDemonologySettings CurrentSetting;
                            CurrentSetting = new Warlock_Demonology.WarlockDemonologySettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Warlock_Demonology.WarlockDemonologySettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Warlock Demonology class...");
                            range = 30.0f;
                            new Warlock_Demonology();
                        }
                    }
                    else if (Warlock_Affliction_Spell.KnownSpell)
                    {
                        if (ConfigOnly)
                        {
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Warlock_Affliction.xml";
                            Warlock_Affliction.WarlockAfflictionSettings CurrentSetting;
                            CurrentSetting = new Warlock_Affliction.WarlockAfflictionSettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Warlock_Affliction.WarlockAfflictionSettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Warlock Affliction class...");
                            range = 30.0f;
                            new Warlock_Affliction();
                        }
                    }
                    else if (Warlock_Destruction_Spell.KnownSpell)
                    {
                        if (ConfigOnly)
                        {
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Warlock_Destruction.xml";
                            Warlock_Destruction.WarlockDestructionSettings CurrentSetting;
                            CurrentSetting = new Warlock_Destruction.WarlockDestructionSettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Warlock_Destruction.WarlockDestructionSettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Warlock Destruction class...");
                            range = 30.0f;
                            new Warlock_Destruction();
                        }
                    }
                    else
                    {
                        if (ConfigOnly)
                        {
                            MessageBox.Show(
                                "Your specification haven't be found, loading Warlock Demonology Settings");
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Warlock_Demonology.xml";
                            Warlock_Demonology.WarlockDemonologySettings CurrentSetting;
                            CurrentSetting = new Warlock_Demonology.WarlockDemonologySettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Warlock_Demonology.WarlockDemonologySettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("No specialisation detected.");
                            Logging.WriteFight("Loading Warlock Demonology class...");
                            range = 30.0f;
                            new Warlock_Demonology();
                        }
                    }
                    break;

                    #endregion

                    #region Druid Specialisation checking

                case WoWClass.Druid:
                    var Druid_Feral_Spell = new Spell("Tiger's Fury");
                    var Druid_Guardian_Spell = new Spell("Savage Defense");
                    var Druid_Balance_Spell = new Spell("Eclipse");
                    var Druid_Restoration_Spell = new Spell("Swiftmend");

                    if (Druid_Feral_Spell.KnownSpell)
                    {
                        if (ConfigOnly)
                        {
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Druid_Feral.xml";
                            Druid_Feral.DruidFeralSettings CurrentSetting;
                            CurrentSetting = new Druid_Feral.DruidFeralSettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Druid_Feral.DruidFeralSettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Druid Feral Found");
                            new Druid_Feral();
                        }
                    }
                    else if (Druid_Guardian_Spell.KnownSpell)
                    {
                        if (ConfigOnly)
                        {
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Druid_Guardian.xml";
                            Druid_Guardian.DruidGuardianSettings CurrentSetting;
                            CurrentSetting = new Druid_Guardian.DruidGuardianSettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Druid_Guardian.DruidGuardianSettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Feral Guardian Found");
                            new Druid_Guardian();
                        }
                    }
                    else if (Druid_Balance_Spell.KnownSpell)
                    {
                        if (ConfigOnly)
                        {
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Druid_Balance.xml";
                            Druid_Balance.DruidBalanceSettings CurrentSetting;
                            CurrentSetting = new Druid_Balance.DruidBalanceSettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Druid_Balance.DruidBalanceSettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Druid Balance Found");
                            range = 30.0f;
                            new Druid_Balance();
                        }
                    }
                    else if (Druid_Restoration_Spell.KnownSpell)
                    {
                        if (ConfigOnly)
                        {
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Druid_Restoration.xml";
                            Druid_Restoration.DruidRestorationSettings CurrentSetting;
                            CurrentSetting = new Druid_Restoration.DruidRestorationSettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Druid_Restoration.DruidRestorationSettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Druid Restoration Found");
                            range = 30.0f;
                            new Druid_Restoration();
                        }
                    }
                    else
                    {
                        if (ConfigOnly)
                        {
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Druid_Balance.xml";
                            Druid_Balance.DruidBalanceSettings CurrentSetting;
                            CurrentSetting = new Druid_Balance.DruidBalanceSettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Druid_Balance.DruidBalanceSettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("No specialisation detected.");
                            Logging.WriteFight("Loading Druid Balance class...");
                            range = 30.0f;
                            new Druid_Balance();
                        }
                    }
                    break;

                    #endregion

                    #region Paladin Specialisation checking

                case WoWClass.Paladin:
                    var Paladin_Retribution_Spell = new Spell("Templar's Verdict");
                    var Paladin_Protection_Spell = new Spell("Avenger's Shield");
                    var Paladin_Holy_Spell = new Spell("Holy Shock");
                    if (Paladin_Retribution_Spell.KnownSpell)
                    {
                        if (ConfigOnly)
                        {
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Paladin_Retribution.xml";
                            var CurrentSetting = new Paladin_Retribution.PaladinRetributionSettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Paladin_Retribution.PaladinRetributionSettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Paladin Retribution class...");
                            new Paladin_Retribution();
                        }
                    }
                    else if (Paladin_Protection_Spell.KnownSpell)
                    {
                        if (ConfigOnly)
                        {
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Paladin_Protection.xml";
                            var CurrentSetting = new Paladin_Protection.PaladinProtectionSettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Paladin_Protection.PaladinProtectionSettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Paladin Protection class...");
                            new Paladin_Protection();
                        }
                    }
                    else if (Paladin_Holy_Spell.KnownSpell)
                    {
                        if (ConfigOnly)
                        {
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Paladin_Holy.xml";
                            var CurrentSetting = new Paladin_Holy.PaladinHolySettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting = Settings.Load<Paladin_Holy.PaladinHolySettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Paladin Holy class...");
                            range = 30.0f;
                            new Paladin_Holy();
                        }
                    }
                    else
                    {
                        if (ConfigOnly)
                        {
                            MessageBox.Show(
                                "Your specification haven't be found, loading Paladin Retribution Settings");
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Paladin_Retribution.xml";
                            var CurrentSetting = new Paladin_Retribution.PaladinRetributionSettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Paladin_Retribution.PaladinRetributionSettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("No specialisation detected.");
                            Logging.WriteFight("Loading Paladin Retribution class...");
                            new Paladin_Retribution();
                        }
                    }
                    break;

                    #endregion

                    #region Shaman Specialisation checking

                case WoWClass.Shaman:
                    var Shaman_Enhancement_Spell = new Spell("Lava Lash");
                    var Shaman_Elemental_Spell = new Spell("Thunderstorm");
                    var Shaman_Restoration_Spell = new Spell("Riptide");

                    if (Shaman_Enhancement_Spell.KnownSpell)
                    {
                        if (ConfigOnly)
                        {
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Shaman_Enhancement.xml";
                            Shaman_Enhancement.ShamanEnhancementSettings CurrentSetting;
                            CurrentSetting = new Shaman_Enhancement.ShamanEnhancementSettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Shaman_Enhancement.ShamanEnhancementSettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Shaman Enhancement class...");
                            new Shaman_Enhancement();
                        }
                        break;
                    }
                    else if (Shaman_Elemental_Spell.KnownSpell)
                    {
                        if (ConfigOnly)
                        {
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Shaman_Elemental.xml";
                            Shaman_Elemental.ShamanElementalSettings CurrentSetting;
                            CurrentSetting = new Shaman_Elemental.ShamanElementalSettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Shaman_Elemental.ShamanElementalSettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Shaman Elemental class...");
                            range = 30.0f;
                            new Shaman_Elemental();
                        }
                        break;
                    }
                    else if (Shaman_Restoration_Spell.KnownSpell)
                    {
                        if (ConfigOnly)
                        {
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Shaman_Restoration.xml";
                            Shaman_Restoration.ShamanRestorationSettings CurrentSetting;
                            CurrentSetting = new Shaman_Restoration.ShamanRestorationSettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Shaman_Restoration.ShamanRestorationSettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Shaman Restoration class...");
                            range = 30.0f;
                            new Shaman_Restoration();
                        }
                        break;
                    }
                    else
                    {
                        if (ConfigOnly)
                        {
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Shaman_Restoration.xml";
                            Shaman_Restoration.ShamanRestorationSettings CurrentSetting;
                            CurrentSetting = new Shaman_Restoration.ShamanRestorationSettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Shaman_Restoration.ShamanRestorationSettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Shaman without Spec");
                            range = 30.0f;
                            new Shaman_Restoration();
                        }
                        break;
                    }

                    #endregion

                    #region Priest Specialisation checking

                case WoWClass.Priest:
                    var Priest_Shadow_Spell = new Spell("Mind Flay");
                    var Priest_Discipline_Spell = new Spell("Penance");
                    var Priest_Holy_Spell = new Spell("Holy Word: Chastise");
                    if (Priest_Shadow_Spell.KnownSpell)
                    {
                        if (ConfigOnly)
                        {
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Priest_Shadow.xml";
                            Priest_Shadow.PriestShadowSettings CurrentSetting;
                            CurrentSetting = new Priest_Shadow.PriestShadowSettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Priest_Shadow.PriestShadowSettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Priest Shadow class...");
                            range = 30.0f;
                            new Priest_Shadow();
                        }
                    }
                    else if (Priest_Discipline_Spell.KnownSpell)
                    {
                        if (ConfigOnly)
                        {
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Priest_Discipline.xml";
                            Priest_Discipline.PriestDisciplineSettings CurrentSetting;
                            CurrentSetting = new Priest_Discipline.PriestDisciplineSettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Priest_Discipline.PriestDisciplineSettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Priest Discipline class...");
                            range = 30.0f;
                            new Priest_Discipline();
                        }
                    }
                    else if (Priest_Holy_Spell.KnownSpell)
                    {
                        if (ConfigOnly)
                        {
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Priest_Holy.xml";
                            Priest_Holy.PriestHolySettings CurrentSetting;
                            CurrentSetting = new Priest_Holy.PriestHolySettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Priest_Holy.PriestHolySettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Priest Holy class...");
                            range = 30.0f;
                            new Priest_Holy();
                        }
                    }
                    else
                    {
                        if (ConfigOnly)
                        {
                            MessageBox.Show(
                                "Your specification haven't be found, loading Priest Shadow Settings");
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Priest_Shadow.xml";
                            Priest_Shadow.PriestShadowSettings CurrentSetting;
                            CurrentSetting = new Priest_Shadow.PriestShadowSettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Priest_Shadow.PriestShadowSettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("No specialisation detected.");
                            Logging.WriteFight("Loading Priest Shadow class...");
                            range = 30.0f;
                            new Priest_Shadow();
                        }
                    }
                    break;

                    #endregion

                    #region Rogue Specialisation checking

                case WoWClass.Rogue:
                    var Rogue_Combat_Spell = new Spell("Blade Flurry");
                    var Rogue_Assassination_Spell = new Spell("Mutilate");
                    var Rogue_Subtlety_Spell = new Spell("Master of Subtlety");

                    if (Rogue_Combat_Spell.KnownSpell)
                    {
                        if (ConfigOnly)
                        {
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Rogue_Combat.xml";
                            Rogue_Combat.RogueCombatSettings CurrentSetting;
                            CurrentSetting = new Rogue_Combat.RogueCombatSettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Rogue_Combat.RogueCombatSettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Rogue Combat class...");
                            new Rogue_Combat();
                        }
                        break;
                    }
                    else if (Rogue_Assassination_Spell.KnownSpell)
                    {
                        if (ConfigOnly)
                        {
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Rogue_Assassination.xml";
                            Rogue_Assassination.RogueAssassinationSettings CurrentSetting;
                            CurrentSetting = new Rogue_Assassination.RogueAssassinationSettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Rogue_Assassination.RogueAssassinationSettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Rogue Assassination class...");
                            new Rogue_Assassination();
                        }
                        break;
                    }
                    else if (Rogue_Subtlety_Spell.KnownSpell)
                    {
                        if (ConfigOnly)
                        {
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Rogue_Subtlety.xml";
                            Rogue_Subtlety.RogueSubtletySettings CurrentSetting;
                            CurrentSetting = new Rogue_Subtlety.RogueSubtletySettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Rogue_Subtlety.RogueSubtletySettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Rogue Subtlety class...");
                            new Rogue_Subtlety();
                        }
                        break;
                    }
                    else
                    {
                        if (ConfigOnly)
                        {
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Rogue_Combat.xml";
                            Rogue_Combat.RogueCombatSettings CurrentSetting;
                            CurrentSetting = new Rogue_Combat.RogueCombatSettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Rogue_Combat.RogueCombatSettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Rogue without Spec");
                            new Rogue_Combat();
                        }
                        break;
                    }

                    #endregion

                    #region Warrior Specialisation checking

                case WoWClass.Warrior:
                    var Warrior_Arms_Spell = new Spell("Mortal Strike");
                    var Warrior_Fury_Spell = new Spell("Bloodthirst");
                    var Warrior_Protection_Spell = new Spell("Shield Slam");

                    if (Warrior_Arms_Spell.KnownSpell)
                    {
                        if (ConfigOnly)
                        {
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Warrior_Arms.xml";
                            Warrior_Arms.WarriorArmsSettings CurrentSetting;
                            CurrentSetting = new Warrior_Arms.WarriorArmsSettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Warrior_Arms.WarriorArmsSettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Warrior Arms class...");
                            new Warrior_Arms();
                        }
                    }
                    else if (Warrior_Fury_Spell.KnownSpell)
                    {
                        if (ConfigOnly)
                        {
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Warrior_Fury.xml";
                            Warrior_Fury.WarriorFurySettings CurrentSetting;
                            CurrentSetting = new Warrior_Fury.WarriorFurySettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Warrior_Fury.WarriorFurySettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Warrior Fury class...");
                            new Warrior_Fury();
                        }
                    }
                    else if (Warrior_Protection_Spell.KnownSpell)
                    {
                        if (ConfigOnly)
                        {
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Warrior_Protection.xml";
                            Warrior_Protection.WarriorProtectionSettings CurrentSetting;
                            CurrentSetting = new Warrior_Protection.WarriorProtectionSettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Warrior_Protection.WarriorProtectionSettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Warrior Protection class...");
                            new Warrior_Protection();
                        }
                    }
                    else
                    {
                        if (ConfigOnly)
                        {
                            MessageBox.Show(
                                "Your specification haven't be found, loading Warrior Arms Settings");
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Warrior_Arms.xml";
                            Warrior_Arms.WarriorArmsSettings CurrentSetting;
                            CurrentSetting = new Warrior_Arms.WarriorArmsSettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Warrior_Arms.WarriorArmsSettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("No specialisation detected.");
                            Logging.WriteFight("Loading Warrior Arms class...");
                            new Warrior_Arms();
                        }
                    }
                    break;

                    #endregion

                    #region Hunter Specialisation checking

                case WoWClass.Hunter:
                    var Hunter_Marksmanship_Spell = new Spell("Aimed Shot");
                    var Hunter_Survival_Spell = new Spell("Explosive Shot");
                    var Hunter_BeastMastery_Spell = new Spell("Kill Command");

                    if (Hunter_Marksmanship_Spell.KnownSpell)
                    {
                        if (ConfigOnly)
                        {
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Hunter_Marksmanship.xml";
                            Hunter_Marksmanship.HunterMarksmanshipSettings CurrentSetting;
                            CurrentSetting = new Hunter_Marksmanship.HunterMarksmanshipSettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Hunter_Marksmanship.HunterMarksmanshipSettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Hunter Marksmanship class...");
                            range = 30.0f;
                            new Hunter_Marksmanship();
                        }
                    }
                    else if (Hunter_Survival_Spell.KnownSpell)
                    {
                        if (ConfigOnly)
                        {
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Hunter_Survival.xml";
                            Hunter_Survival.HunterSurvivalSettings CurrentSetting;
                            CurrentSetting = new Hunter_Survival.HunterSurvivalSettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Hunter_Survival.HunterSurvivalSettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Hunter Survival class...");
                            range = 30.0f;
                            new Hunter_Survival();
                        }
                    }
                    else if (Hunter_BeastMastery_Spell.KnownSpell)
                    {
                        if (ConfigOnly)
                        {
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Hunter_BeastMastery.xml";
                            Hunter_BeastMastery.HunterBeastMasterySettings CurrentSetting;
                            CurrentSetting = new Hunter_BeastMastery.HunterBeastMasterySettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Hunter_BeastMastery.HunterBeastMasterySettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Hunter BeastMastery class...");
                            range = 30.0f;
                            new Hunter_BeastMastery();
                        }
                    }
                    else
                    {
                        if (ConfigOnly)
                        {
                            MessageBox.Show(
                                "Your specification haven't be found, loading Hunter Marksmanship Settings");
                            string CurrentSettingsFile = Application.StartupPath +
                                                         "\\CustomClasses\\Settings\\Hunter_Marksmanship.xml";
                            Hunter_Marksmanship.HunterMarksmanshipSettings CurrentSetting;
                            CurrentSetting = new Hunter_Marksmanship.HunterMarksmanshipSettings();
                            if (File.Exists(CurrentSettingsFile) && !ResetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<Hunter_Marksmanship.HunterMarksmanshipSettings>(CurrentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(CurrentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("No specialisation detected.");
                            Logging.WriteFight("Loading Hunter Marksmanship class...");
                            range = 30.0f;
                            new Hunter_Marksmanship();
                        }
                    }
                    break;

                    #endregion

                default:
                    Dispose();
                    break;
            }
        }
        catch
        {
        }
        Logging.WriteFight("Combat system stopped.");
    }
}

#region Deathknight

public class Deathknight_Apprentice
{
    private readonly DeathknightApprenticeSettings MySettings = DeathknightApprenticeSettings.GetSettings();
    private readonly string MoveBackward = nManager.Wow.Helpers.Keybindings.GetKeyByAction(nManager.Wow.Enums.Keybindings.MOVEBACKWARD);

    #region Professions & Racials

    private readonly Spell Arcane_Torrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell Blood_Fury = new Spell("Blood Fury");
    private readonly Spell Gift_of_the_Naaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell War_Stomp = new Spell("War Stomp");

    #endregion

    #region Deathknight Presence & Buffs

    private readonly Spell Blood_Plague = new Spell("Blood Plague");
    private Timer Blood_Plague_Timer = new Timer(0);
    private readonly Spell Blood_Presence = new Spell("Blood Presence");
    private readonly Spell Frost_Fever = new Spell("Frost Fever");
    private Timer Frost_Fever_Timer = new Timer(0);
    private readonly Spell Frost_Presence = new Spell("Frost Presence");

    #endregion

    #region Offensive Spell

    private readonly Spell Blood_Boil = new Spell("Blood Boil");
    private readonly Spell Blood_Strike = new Spell("Blood Strike");
    private readonly Spell Death_Coil = new Spell("Death Coil");
    private readonly Spell Icy_Touch = new Spell("Icy Touch");
    private readonly Spell Plague_Strike = new Spell("Plague Strike");

    #endregion

    #region Offensive Cooldown

    private readonly Spell Death_Grip = new Spell("Death Grip");
    private readonly Spell Pestilence = new Spell("Pestilence");
    private readonly Spell Raise_Dead = new Spell("Raise Dead");
    private Timer Pestilence_Timer = new Timer(0);

    #endregion

    #region Defensive Cooldown

    private readonly Spell Chains_of_Ice = new Spell("Chains of Ice");
    private readonly Spell Mind_Freeze = new Spell("Mind Freeze");

    #endregion

    #region Healing Spell

    private readonly Spell Death_Strike = new Spell("Death Strike");

    #endregion

    public Deathknight_Apprentice()
    {
        Main.range = 5.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (Death_Grip.IsDistanceGood || Icy_Touch.IsDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            Combat();
                        }

                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void Pull()
    {
        if (Death_Grip.IsSpellUsable && Death_Grip.KnownSpell && Death_Grip.IsDistanceGood
            && MySettings.UseDeathGrip && ObjectManager.Target.GetDistance > Main.range)
        {
            Death_Grip.Launch();
            MovementManager.StopMove();
        }
        else
        {
            if (Icy_Touch.IsSpellUsable && Icy_Touch.KnownSpell && Icy_Touch.IsDistanceGood
                && MySettings.UseIcyTouch)
                Icy_Touch.Launch();
        }
    }

    private void Combat()
    {
        Buff();
        AvoidMelee();
        Defense_Cycle();
        Heal();
        Decast();
        DPS_Burst();
        DPS_Cycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (Blood_Presence.IsSpellUsable && Blood_Presence.KnownSpell && !Blood_Presence.HaveBuff
            && MySettings.UseBloodPresence && ObjectManager.GetNumberAttackPlayer() >= 3)
            Blood_Presence.Launch();
        else
        {
            if (Frost_Presence.IsSpellUsable && Frost_Presence.KnownSpell && !Frost_Presence.HaveBuff
                && MySettings.UseFrostPresence)
                Frost_Presence.Launch();
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            Keyboard.DownKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
            while (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
                Thread.Sleep(300);
            Keyboard.UpKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
        }
    }

    private void Defense_Cycle()
    {
        if (Stoneform.IsSpellUsable && Stoneform.KnownSpell && ObjectManager.Me.HealthPercent <= MySettings.UseStoneformAtPercentage
            && MySettings.UseStoneform)
        {
            Stoneform.Launch();
            return;
        }
        else
        {
            if (War_Stomp.IsSpellUsable && War_Stomp.KnownSpell && ObjectManager.Target.GetDistance < 8
                && MySettings.UseWarStomp && ObjectManager.Me.HealthPercent <= MySettings.UseWarStompAtPercentage)
            {
                War_Stomp.Launch();
                return;
            }
        }
    }

    private void Heal()
    {
        if (Gift_of_the_Naaru.IsSpellUsable && Gift_of_the_Naaru.KnownSpell && ObjectManager.Me.HealthPercent <= MySettings.UseGiftoftheNaaruAtPercentage
            && MySettings.UseGiftoftheNaaru)
        {
            Gift_of_the_Naaru.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent <= MySettings.UseDeathStrikeAtPercentage
                && MySettings.UseDeathStrike && Death_Strike.KnownSpell && Death_Strike.IsSpellUsable
                && ObjectManager.Target.IsValid && ObjectManager.Target.IsAlive && Death_Strike.IsDistanceGood)
            {
                Death_Strike.Launch();
                return;
            }
        }
    }

    private void Decast()
    {
        if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell && ObjectManager.Target.GetDistance < 8
            && ObjectManager.Me.HealthPercent <= MySettings.UseArcaneTorrentForDecastAtPercentage
            && MySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else
        {
            if (Mind_Freeze.IsSpellUsable && Mind_Freeze.KnownSpell && Mind_Freeze.IsDistanceGood
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && MySettings.UseMindFreeze && ObjectManager.Me.HealthPercent <= MySettings.UseMindFreezeAtPercentage)
            {
                Mind_Freeze.Launch();
                return;
            }
        }

        if (Chains_of_Ice.IsSpellUsable && Chains_of_Ice.KnownSpell && Chains_of_Ice.IsDistanceGood
            && MySettings.UseChainsofIce && ObjectManager.Target.GetMove && !Chains_of_Ice.TargetHaveBuff)
        {
            Chains_of_Ice.Launch();
            return;
        }
    }

    private void DPS_Burst()
    {
        if (Raise_Dead.KnownSpell && Raise_Dead.IsSpellUsable && ObjectManager.Target.GetDistance < 30
            && MySettings.UseRaiseDead)
            Raise_Dead.Launch();
        else if (Lifeblood.KnownSpell && Lifeblood.IsSpellUsable && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (Berserking.KnownSpell && Berserking.IsSpellUsable && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBerserking)
            Berserking.Launch();
        else
        {
            if (Blood_Fury.KnownSpell && Blood_Fury.IsSpellUsable && ObjectManager.Target.GetDistance < 30
                && MySettings.UseBloodFury)
                Blood_Fury.Launch();
        }
    }

    private void DPS_Cycle()
    {
        if (Icy_Touch.IsSpellUsable && Icy_Touch.KnownSpell && Icy_Touch.IsDistanceGood
            && MySettings.UseIcyTouch && (!Frost_Fever.TargetHaveBuff || Frost_Fever_Timer.IsReady))
        {
            Icy_Touch.Launch();
            Frost_Fever_Timer = new Timer(1000*27);
            return;
        }
        else if (Plague_Strike.IsSpellUsable && Plague_Strike.KnownSpell && Plague_Strike.IsDistanceGood
                 && MySettings.UsePlagueStrike && (!Blood_Plague.TargetHaveBuff || Blood_Plague_Timer.IsReady))
        {
            Plague_Strike.Launch();
            Blood_Plague_Timer = new Timer(1000*27);
            return;
        }
        else if (Pestilence.IsSpellUsable && Pestilence.KnownSpell && Pestilence.IsDistanceGood
                 && Blood_Plague.TargetHaveBuff && Frost_Fever.TargetHaveBuff
                 && MySettings.UsePestilence && ObjectManager.GetNumberAttackPlayer() > 1 && Pestilence_Timer.IsReady)
        {
            Pestilence.Launch();
            Pestilence_Timer = new Timer(1000*30);
            return;
        }
        else if (Blood_Boil.IsSpellUsable && Blood_Boil.KnownSpell && ObjectManager.Target.GetDistance < 10
                 && Blood_Plague.TargetHaveBuff && Frost_Fever.TargetHaveBuff
                 && MySettings.UseBloodBoil && ObjectManager.GetNumberAttackPlayer() > 2)
        {
            Blood_Boil.Launch();
            return;
        }
        else if (Death_Coil.IsSpellUsable && Death_Coil.KnownSpell && Death_Coil.IsDistanceGood
                 && MySettings.UseDeathCoil)
        {
            Death_Coil.Launch();
            return;
        }
        else if (Blood_Strike.IsSpellUsable && Blood_Strike.KnownSpell && Blood_Strike.IsDistanceGood 
                 && MySettings.UseBloodStrike)
        {
            Blood_Strike.Launch();
            return;
        }
        else if (Icy_Touch.IsSpellUsable && Icy_Touch.KnownSpell && Icy_Touch.IsDistanceGood 
                 && MySettings.UseIcyTouch)
        {
            Icy_Touch.Launch();
            return;
        }
        else if (Plague_Strike.IsSpellUsable && Plague_Strike.KnownSpell && Plague_Strike.IsDistanceGood 
                && MySettings.UsePlagueStrike)
        {
            Plague_Strike.Launch();
            return;
        }
        else
        {
            if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell
                && MySettings.UseArcaneTorrentForResource)
            {
                Arcane_Torrent.Launch();
                return;
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: DeathknightApprenticeSettings

    [Serializable]
    public class DeathknightApprenticeSettings : Settings
    {
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public int UseDeathStrikeAtPercentage = 80;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public int UseMindFreezeAtPercentage = 100;
        public int UseStoneformAtPercentage = 80;
        public int UseWarStompAtPercentage = 80;
        public bool UseArcaneTorrentForDecast = true;
        public bool UseArcaneTorrentForResource = true;
        public bool UseBerserking = true;
        public bool UseBloodBoil = true;
        public bool UseBloodFury = true;
        public bool UseBloodPresence = true;
        public bool UseBloodStrike = true;
        public bool UseChainsofIce = false;
        public bool UseDeathCoil = true;
        public bool UseDeathGrip = true;
        public bool UseDeathStrike = true;
        public bool UseFrostPresence = true;
        public bool UseGiftoftheNaaru = true;
        public bool UseIcyTouch = true;
        public bool UseLifeblood = true;
        public bool UseMindFreeze = true;
        public bool UsePestilence = true;
        public bool UsePlagueStrike = true;
        public bool UseRaiseDead = true;
        public bool UseStoneform = true;
        public bool UseWarStomp = true;

        public DeathknightApprenticeSettings()
        {
            ConfigWinForm(new Point(500, 400), "Deathknight Apprentice Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrent", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials", "AtPercentage");
            /* Deathknight Presence & Buffs */
            AddControlInWinForm("Use Frost Presence", "UseFrostPresence", "Deathknight Presence & Buffs");
            AddControlInWinForm("Use Blood Presence", "UseFrostPresence", "Deathknight Presence & Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Blood Boil", "UseBloodBoil", "Offensive Spell");
            AddControlInWinForm("Use Blood Strike", "UseBloodStrike", "Offensive Spell");
            AddControlInWinForm("Use Death Coil", "UseDeathCoil", "Offensive Spell");
            AddControlInWinForm("Use Icy Touch", "UseIcyTouch", "Offensive Spell");
            AddControlInWinForm("Use Plague Strike", "UsePlagueStrike", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Death Grip", "UseDeathGrip", "Offensive Cooldown");
            AddControlInWinForm("Use Pestilence", "UsePestilence", "Offensive Cooldown");
            AddControlInWinForm("Use Raise Dead", "UseRaiseDead", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Chains of Ice", "UseChainsofIce", "Defensive Cooldown");
            AddControlInWinForm("Use Mind Freeze", "UseMindFreeze", "Defensive Cooldown", "AtPercentage");
            /* Healing Spell */
            AddControlInWinForm("Use Death Strike", "UseDeathStrike", "Healing Spell", "AtPercentage");
        }

        public static DeathknightApprenticeSettings CurrentSetting { get; set; }

        public static DeathknightApprenticeSettings GetSettings()
        {
            string CurrentSettingsFile = Application.StartupPath +
                                         "\\CustomClasses\\Settings\\Deathknight_Apprentice.xml";
            if (File.Exists(CurrentSettingsFile))
            {
                return
                    CurrentSetting =
                    Load<DeathknightApprenticeSettings>(CurrentSettingsFile);
            }
            else
            {
                return new DeathknightApprenticeSettings();
            }
        }
    }

    #endregion
}

public class Deathknight_Blood
{
    private readonly DeathknightBloodSettings MySettings = DeathknightBloodSettings.GetSettings();
    private readonly string MoveBackward = nManager.Wow.Helpers.Keybindings.GetKeyByAction(nManager.Wow.Enums.Keybindings.MOVEBACKWARD);

    #region General Timers & Variables

    private Timer AlchFlask_Timer = new Timer(0);
    private Timer Engineering_Timer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer Trinket_Timer = new Timer(0);
    public int DRW = 1;
    public int LC = 0;

    #endregion

    #region Professions & Racials

    private readonly Spell Arcane_Torrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell Blood_Fury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell Gift_of_the_Naaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell War_Stomp = new Spell("War Stomp");

    #endregion

    #region Deathknight Presence & Buffs

    private readonly Spell Blood_Plague = new Spell("Blood Plague");
    private readonly Spell Blood_Presence = new Spell("Blood Presence");
    private readonly Spell Frost_Fever = new Spell("Frost Fever");
    private readonly Spell Frost_Presence = new Spell("Frost Presence");
    private readonly Spell Horn_of_Winter = new Spell("Horn of Winter");
    private readonly Spell Path_of_Frost = new Spell("Path of Frost");
    private readonly Spell Roiling_Blood = new Spell("Roiling Blood");
    private readonly Spell Unholy_Presence = new Spell("Unholy Presence");
    private Timer Blood_Plague_Timer = new Timer(0);
    private Timer Frost_Fever_Timer = new Timer(0);
    private Timer Path_of_Frost_Timer = new Timer(0);

    #endregion

    #region Offensive Spell

    private readonly Spell Blood_Boil = new Spell("Blood Boil");
    private readonly Spell Blood_Strike = new Spell("Blood Strike");
    private readonly Spell Death_Coil = new Spell("Death Coil");
    private readonly Spell Death_Strike = new Spell("Death Strike");
    private readonly Spell Death_and_Decay = new Spell("Death and Decay");
    private readonly Spell Heart_Strike = new Spell("Heart Strike");
    private readonly Spell Icy_Touch = new Spell("Icy Touch");
    private readonly Spell Plague_Strike = new Spell("Plague Strike");
    private readonly Spell Rune_Strike = new Spell("Rune Strike");
    private readonly Spell Soul_Reaper = new Spell("Soul Reaper");
    private readonly Spell Unholy_Blight = new Spell("Unholy Blight");

    #endregion

    #region Offensive Cooldown

    private readonly Spell Blood_Tap = new Spell("Blood Tap");
    private readonly Spell Dancing_Rune_Weapon = new Spell("Dancing Rune Weapon");
    private readonly Spell Death_Grip = new Spell("Death Grip");
    private readonly Spell Empower_Rune_Weapon = new Spell("Empower Rune Weapon");
    private readonly Spell Outbreak = new Spell("Outbreak");
    private readonly Spell Pestilence = new Spell("Pestilence");
    private readonly Spell Raise_Dead = new Spell("Raise Dead");
    private Timer Dancing_Rune_Weapon_Timer = new Timer(0);
    private Timer Pestilence_Timer = new Timer(0);

    #endregion

    #region Defensive Cooldown

    private readonly Spell AntiMagic_Shell = new Spell("Anti-Magic Shell");
    private readonly Spell AntiMagic_Zone = new Spell("Anti-Magic Zone");
    private readonly Spell Army_of_the_Dead = new Spell("Army of the Dead");
    private readonly Spell Asphyxiate = new Spell("Asphyxiate");
    private readonly Spell Bone_Shield = new Spell("Bone Shield");
    private readonly Spell Chains_of_Ice = new Spell("Chains of Ice");
    private readonly Spell Deaths_Advance = new Spell("Death's Advance");
    private readonly Spell Icebound_Fortitude = new Spell("Icebound Fortitude");
    private readonly Spell Mind_Freeze = new Spell("Mind Freeze");
    private readonly Spell Remorseless_Winter = new Spell("Remorseless Winter");
    private readonly Spell Strangulate = new Spell("Strangulate");
    private readonly Spell Vampiric_Blood = new Spell("Vampiric Blood");

    #endregion

    #region Healing Spell

    private readonly Spell Conversion = new Spell("Conversion");
    private readonly Spell Death_Pact = new Spell("Death Pact");
    private readonly Spell Death_Siphon = new Spell("Death Siphon");
    private readonly Spell Lichborne = new Spell("Lichborne");
    private readonly Spell Rune_Tap = new Spell("Rune Tap");

    #endregion

    public Deathknight_Blood()
    {
        Main.range = 5.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    Buff_Path();
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (Death_Grip.IsDistanceGood || Icy_Touch.IsDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && MySettings.UseLowCombat)
                            {
                                LC = 1;
                                LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                Combat();
                            }
                        }

                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void Buff_Path()
    {
        if (Path_of_Frost.IsSpellUsable && Path_of_Frost.KnownSpell && !Fight.InFight
            && MySettings.UsePathofFrost && (!Path_of_Frost.HaveBuff || Path_of_Frost_Timer.IsReady))
        {
            Path_of_Frost.Launch();
            Path_of_Frost_Timer = new Timer(1000*60*9.5);
        }
    }

    private void Pull()
    {
        if (Death_Grip.IsSpellUsable && Death_Grip.KnownSpell && Death_Grip.IsDistanceGood
            && ObjectManager.Target.GetDistance > Main.range && MySettings.UseDeathGrip)
        {
            Death_Grip.Launch();
            MovementManager.StopMove();
        }
        else
        {
            if (Icy_Touch.IsSpellUsable && Icy_Touch.KnownSpell && Icy_Touch.IsDistanceGood
                && MySettings.UseIcyTouch)
            {
                Icy_Touch.Launch();
                Frost_Fever_Timer = new Timer(1000*27);
            }
        }
    }

    private void LowCombat()
    {
        Buff();
        AvoidMelee();
        Defense_Cycle();
        Heal();
        DPS_Burst();

        if (Icy_Touch.IsSpellUsable && Icy_Touch.KnownSpell && Icy_Touch.IsDistanceGood 
            && MySettings.UseIcyTouch)
        {
            Icy_Touch.Launch();
            return;
        }
        else if (Death_Coil.IsSpellUsable && Death_Coil.KnownSpell && Death_Coil.IsDistanceGood
                 && MySettings.UseDeathCoil)
        {
            Death_Coil.Launch();
            return;
        }
        else if (Plague_Strike.IsSpellUsable && Plague_Strike.KnownSpell && Plague_Strike.IsDistanceGood 
                && MySettings.UsePlagueStrike)
        {
            Plague_Strike.Launch();
            return;
        }
        else
        {
            if (Blood_Boil.IsSpellUsable && Blood_Boil.KnownSpell && Blood_Boil.IsDistanceGood 
                && MySettings.UseBloodBoil)
            {
                Blood_Boil.Launch();
                return;
            }
        }
    }

    private void Combat()
    {
        Buff();
        AvoidMelee();
        if (OnCD.IsReady)
            Defense_Cycle();
        Heal();
        Decast();
        DPS_Burst();
        DPS_Cycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (Unholy_Presence.IsSpellUsable && Unholy_Presence.KnownSpell && MySettings.UseLowCombat 
            && MySettings.UseUnholyPresence && LC == 1 && !Unholy_Presence.HaveBuff)
            Unholy_Presence.Launch();
        else if (Blood_Presence.IsSpellUsable && Blood_Presence.KnownSpell && !Blood_Presence.HaveBuff
                 && MySettings.UseBloodPresence)
            Blood_Presence.Launch();
        else
        {
            if (Frost_Presence.IsSpellUsable && Frost_Presence.KnownSpell && !MySettings.UseBloodPresence
                && MySettings.UseFrostPresence && !Frost_Presence.HaveBuff)
                Frost_Presence.Launch();
        }

        if (Horn_of_Winter.IsSpellUsable && Horn_of_Winter.KnownSpell && !Horn_of_Winter.HaveBuff
            && MySettings.UseHornofWinter)
        {
            Horn_of_Winter.Launch();
            return;
        }
        else if (Deaths_Advance.IsSpellUsable && Deaths_Advance.KnownSpell && ObjectManager.GetNumberAttackPlayer() == 0
                 && MySettings.UseDeathsAdvance && ObjectManager.Me.GetMove)
        {
            Deaths_Advance.Launch();
            return;
        }
        else
        {
            if (AlchFlask_Timer.IsReady && ItemsManager.GetItemCountByIdLUA(75525) == 1
                && MySettings.UseAlchFlask)
            {
                Logging.WriteFight("Use Alchi Flask");
                Lua.RunMacroText("/use item:75525");
                AlchFlask_Timer = new Timer(1000*60*60*2);
                return;
            }
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            Keyboard.DownKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
            while (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
                Thread.Sleep(300);
            Keyboard.UpKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
        }
    }

    private void Defense_Cycle()
    {
        if (Bone_Shield.IsSpellUsable && Bone_Shield.KnownSpell && !Bone_Shield.HaveBuff 
            && MySettings.UseBoneShield && ObjectManager.Me.HealthPercent <= MySettings.UseBoneShieldAtPercentage)
        {
            Bone_Shield.Launch();
            return;
        }
        else if (Icebound_Fortitude.IsSpellUsable && Icebound_Fortitude.KnownSpell
                 && MySettings.UseIceboundFortitude && ObjectManager.Me.HealthPercent <= MySettings.UseIceboundFortitudeAtPercentage)
        {
            Icebound_Fortitude.Launch();
            OnCD = new Timer(1000*12);
            return;
        }
        else if (Strangulate.IsSpellUsable && Strangulate.KnownSpell && Strangulate.IsDistanceGood
                 && MySettings.UseAsphyxiate && ObjectManager.Me.HealthPercent <= MySettings.UseAsphyxiateAtPercentage)
        {
            Strangulate.Launch();
            OnCD = new Timer(1000*5);
            return;
        }
        else if (Stoneform.IsSpellUsable && Stoneform.KnownSpell && ObjectManager.Me.HealthPercent <= MySettings.UseStoneformAtPercentage
            && MySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (War_Stomp.IsSpellUsable && War_Stomp.KnownSpell && ObjectManager.Target.GetDistance < 8
                && MySettings.UseWarStomp && ObjectManager.Me.HealthPercent <= MySettings.UseWarStompAtPercentage)
        {
            War_Stomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else
        {
            if (Remorseless_Winter.IsSpellUsable && Remorseless_Winter.KnownSpell && ObjectManager.Target.GetDistance < 8
                && (ObjectManager.Me.HealthPercent <= MySettings.UseRemorselessWinterAtPercentage || ObjectManager.GetNumberAttackPlayer() > 1)
                && MySettings.UseRemorselessWinter)
            {
                Remorseless_Winter.Launch();
                OnCD = new Timer(1000*8);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (Gift_of_the_Naaru.IsSpellUsable && Gift_of_the_Naaru.KnownSpell && ObjectManager.Me.HealthPercent <= MySettings.UseGiftoftheNaaruAtPercentage
            && MySettings.UseGiftoftheNaaru)
        {
            Gift_of_the_Naaru.Launch();
            return;
        }
        else if (Death_Pact.IsSpellUsable && Death_Pact.KnownSpell && Raise_Dead.IsSpellUsable && Raise_Dead.KnownSpell
                 && MySettings.UseDeathPact&& ObjectManager.Me.HealthPercent <= MySettings.UseDeathPactAtPercentage)
        {
            for (int i = 0; i < 3; i++)
            {
                Raise_Dead.Launch();
                Death_Pact.Launch();

                if (!Death_Pact.IsSpellUsable)
                    break;
            }
        }
        else if (Lichborne.IsSpellUsable && Lichborne.KnownSpell && Death_Coil.IsSpellUsable && Death_Coil.KnownSpell
                 && MySettings.UseLichborne && ObjectManager.Me.HealthPercent <= MySettings.UseLichborneAtPercentage)
        {
            if (Lichborne.IsSpellUsable)
            {
                Lichborne.Launch();
                return;
            }
        }
        else if (Conversion.IsSpellUsable && Conversion.KnownSpell && ObjectManager.Me.RunicPower > 10
            && MySettings.UseConversion && ObjectManager.Me.HealthPercent <= MySettings.UseConversionAtPercentage)
        {
            Conversion.Launch();
            while (ObjectManager.Me.RunicPower > 0)
                Thread.Sleep(200);
            return;
        }
        else if (Death_Siphon.IsSpellUsable && Death_Siphon.KnownSpell && Death_Siphon.IsDistanceGood
                 && MySettings.UseDeathSiphon && ObjectManager.Me.HealthPercent <= MySettings.UseDeathSiphonAtPercentage)
        {
            Death_Siphon.Launch();
            return;
        }
        else if (Vampiric_Blood.IsSpellUsable && Vampiric_Blood.KnownSpell 
                && MySettings.UseVampiricBlood && ObjectManager.Me.HealthPercent <= MySettings.UseVampiricBloodAtPercentage)
        {
            Vampiric_Blood.Launch();
            Thread.Sleep(200);
        }
        else
        {
            if (Blood_Tap.IsSpellUsable && Blood_Tap.KnownSpell && !Rune_Tap.IsSpellUsable
                && MySettings.UseBloodTapToHeal && ObjectManager.Me.HealthPercent <= MySettings.UseRuneTapAtPercentage)
            {
                Blood_Tap.Launch();
                Thread.Sleep(200);
            }

            if (Rune_Tap.KnownSpell && Rune_Tap.IsSpellUsable 
                && ObjectManager.Me.HealthPercent <= MySettings.UseRuneTapAtPercentage
                && MySettings.UseRuneTap)
                Rune_Tap.Launch();
        }
    }

    private void Decast()
    {
        if (Mind_Freeze.IsSpellUsable && Mind_Freeze.KnownSpell && Mind_Freeze.IsDistanceGood
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && MySettings.UseMindFreeze && ObjectManager.Me.HealthPercent <= MySettings.UseMindFreezeAtPercentage)
        {
            Mind_Freeze.Launch();
            return;
        }
        else if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell && ObjectManager.Target.GetDistance < 8
            && ObjectManager.Me.HealthPercent <= MySettings.UseArcaneTorrentForDecastAtPercentage
            && MySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else if (AntiMagic_Shell.IsSpellUsable && AntiMagic_Shell.KnownSpell
                 && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                 && MySettings.UseAntiMagicShell && ObjectManager.Me.HealthPercent <= MySettings.UseAntiMagicShellAtPercentage)
        {
            AntiMagic_Shell.Launch();
            return;
        }
        else if (Strangulate.IsSpellUsable && Strangulate.KnownSpell && Strangulate.IsDistanceGood
                 && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                 && (MySettings.UseStrangulate && ObjectManager.Me.HealthPercent <= MySettings.UseStrangulateAtPercentage 
                 || MySettings.UseAsphyxiate && ObjectManager.Me.HealthPercent <= MySettings.UseAsphyxiateAtPercentage))
        {
            Strangulate.Launch();
            return;
        }
        else
        {
            if (AntiMagic_Zone.IsSpellUsable && AntiMagic_Zone.KnownSpell
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && MySettings.UseAntiMagicZone && ObjectManager.Me.HealthPercent <= MySettings.UseAntiMagicZoneAtPercentage)
            {
                SpellManager.CastSpellByIDAndPosition(51052, ObjectManager.Me.Position);
                return;
            }
        }

        if (Chains_of_Ice.IsSpellUsable && Chains_of_Ice.KnownSpell && Chains_of_Ice.IsDistanceGood
            && MySettings.UseChainsofIce && ObjectManager.Target.GetMove && !Chains_of_Ice.TargetHaveBuff)
        {
            Chains_of_Ice.Launch();
            return;
        }
    }

    private void DPS_Burst()
    {
        if (MySettings.UseTrinket && Trinket_Timer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Trinket_Timer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBerserking)
            Berserking.Launch();
        else if (Blood_Fury.IsSpellUsable && Blood_Fury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBloodFury)
            Blood_Fury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (Blood_Tap.IsSpellUsable && Blood_Tap.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBloodTapForDPS)
            Blood_Tap.Launch();
        else
        {
            if (Engineering_Timer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                && MySettings.UseEngGlove)
            {
                Logging.WriteFight("Use Engineering Gloves.");
                Lua.RunMacroText("/use 10");
                Engineering_Timer = new Timer(1000*60);
            }
        }

        if (Dancing_Rune_Weapon_Timer.IsReady && DRW == 0)
            DRW = 1;

        if (Dancing_Rune_Weapon.IsSpellUsable && Dancing_Rune_Weapon.KnownSpell && Dancing_Rune_Weapon.IsDistanceGood 
            && MySettings.UseDancingRuneWeapon && DRW == 1)
        {
            Dancing_Rune_Weapon.Launch();
            Dancing_Rune_Weapon_Timer = new Timer(1000*60*1.5);
            DRW = 0;
            return;
        }
    }

    private void DPS_Cycle()
    {
        if (Death_Coil.IsSpellUsable && Death_Coil.KnownSpell && Lichborne.HaveBuff && ObjectManager.Me.HealthPercent < 85)
        {
            Lua.RunMacroText("/target Player");
            Death_Coil.Launch();
            return;
        }
        else if (Unholy_Blight.IsSpellUsable && Unholy_Blight.KnownSpell && ObjectManager.Target.GetDistance < 9
                 && MySettings.UseUnholyBlight)
        {
            Unholy_Blight.Launch();
            Blood_Plague_Timer = new Timer(1000*27);
            Frost_Fever_Timer = new Timer(1000*27);
            return;
        }
        else if (Outbreak.IsSpellUsable && Outbreak.KnownSpell && Outbreak.IsDistanceGood 
                 && (Blood_Plague_Timer.IsReady || Frost_Fever_Timer.IsReady || !Blood_Plague.TargetHaveBuff || !Frost_Fever.TargetHaveBuff)
                 && MySettings.UseOutbreak)
        {
            Outbreak.Launch();
            Blood_Plague_Timer = new Timer(1000*27);
            Frost_Fever_Timer = new Timer(1000*27);
            return;
        }
        else if (Blood_Boil.IsSpellUsable && Blood_Boil.KnownSpell && ObjectManager.Target.GetDistance < 9
                 && Roiling_Blood.KnownSpell && ((Blood_Plague_Timer.IsReady && Blood_Plague.TargetHaveBuff) 
                 || (Frost_Fever_Timer.IsReady && Frost_Fever.TargetHaveBuff))
                 && MySettings.UseBloodBoil)
        {
            Blood_Boil.Launch();
            Blood_Plague_Timer = new Timer(1000*27);
            Frost_Fever_Timer = new Timer(1000*27);
            return;
        }
        else if (Plague_Strike.IsSpellUsable && Plague_Strike.KnownSpell && Plague_Strike.IsDistanceGood 
                 && !Outbreak.IsSpellUsable && !Unholy_Blight.IsSpellUsable
                 && MySettings.UsePlagueStrike && (Blood_Plague_Timer.IsReady || !Blood_Plague.TargetHaveBuff))
        {
            Plague_Strike.Launch();
            Blood_Plague_Timer = new Timer(1000*27);
            return;
        }
        else if (Icy_Touch.IsSpellUsable && Icy_Touch.KnownSpell && Icy_Touch.IsDistanceGood
                 && !Outbreak.IsSpellUsable && !Unholy_Blight.IsSpellUsable
                 && MySettings.UseIcyTouch && (Frost_Fever_Timer.IsReady || !Frost_Fever.TargetHaveBuff))
        {
            Icy_Touch.Launch();
            Frost_Fever_Timer = new Timer(1000*27);
            return;
        }
        else if (Blood_Boil.IsSpellUsable && Blood_Boil.KnownSpell && Blood_Boil.IsDistanceGood 
                 && MySettings.UseBloodBoil && (ObjectManager.GetNumberAttackPlayer() > 3 || ObjectManager.Me.HaveBuff(81141)))
        {
            Blood_Boil.Launch();
            if (Blood_Plague.TargetHaveBuff && Frost_Fever.TargetHaveBuff && Roiling_Blood.KnownSpell)
            {
                Blood_Plague_Timer = new Timer(1000*27);
                Frost_Fever_Timer = new Timer(1000*27);
            }
            return;
        }
        else if (Pestilence.IsSpellUsable && Pestilence.KnownSpell && Pestilence.IsDistanceGood
                 && Frost_Fever.TargetHaveBuff && Blood_Plague.TargetHaveBuff && !Roiling_Blood.KnownSpell
                 && MySettings.UsePestilence && ObjectManager.GetNumberAttackPlayer() > 2)
        {
            Pestilence.Launch();
            return;
        }
        else if (Death_and_Decay.IsSpellUsable && Death_and_Decay.KnownSpell && Death_and_Decay.IsDistanceGood
                 && MySettings.UseDeathandDecay && ObjectManager.GetNumberAttackPlayer() > 2)
        {
            SpellManager.CastSpellByIDAndPosition(43265, ObjectManager.Target.Position);
            return;
        }
        // Blizzard API Calls for Heart Strike using Blood Strike Function
        else if (Blood_Strike.IsSpellUsable && Blood_Strike.KnownSpell && Blood_Strike.IsDistanceGood
                 && MySettings.UseHeartStrike && ObjectManager.GetNumberAttackPlayer() < 4 && ObjectManager.GetNumberAttackPlayer() > 1)
        {
            Blood_Strike.Launch();
            return;
        }
        else if (Army_of_the_Dead.IsSpellUsable && Army_of_the_Dead.KnownSpell
                 && MySettings.UseArmyoftheDead && ObjectManager.GetNumberAttackPlayer() > 4)
        {
            Army_of_the_Dead.Launch();
            Thread.Sleep(4000);
            return;
        }
        else if (Soul_Reaper.IsSpellUsable && Soul_Reaper.KnownSpell && Soul_Reaper.IsDistanceGood
                 && ObjectManager.Target.HealthPercent < 35 && ObjectManager.Me.HealthPercent > 90
                 && MySettings.UseSoulReaper)
        {
            Soul_Reaper.Launch();
            return;
        }
        else if (Death_Strike.IsSpellUsable && Death_Strike.KnownSpell && Death_Strike.IsDistanceGood
                 && MySettings.UseDeathStrike)
        {
            Death_Strike.Launch();
            return;
        }
        else if (Rune_Strike.IsSpellUsable && Rune_Strike.KnownSpell && Rune_Strike.IsDistanceGood
                 && MySettings.UseRuneStrike && DRW == 0)
        {
            if (ObjectManager.Me.HealthPercent < 80 &&
                ((Lichborne.KnownSpell && MySettings.UseLichborne) || (Conversion.KnownSpell && MySettings.UseConversion)))
                return;
            else
            {
                Rune_Strike.Launch();
                return;
            }
        }
        // Blizzard API Calls for Heart Strike using Blood Strike Function
        else if (Blood_Strike.IsSpellUsable && Blood_Strike.KnownSpell && Blood_Strike.IsDistanceGood
                 && MySettings.UseHeartStrike)
        {
            Blood_Strike.Launch();
            return;
        }
        else if (Empower_Rune_Weapon.IsSpellUsable && Empower_Rune_Weapon.KnownSpell
                 && MySettings.UseEmpowerRuneWeapon)
        {
            Empower_Rune_Weapon.Launch();
            return;
        }
        else if (Horn_of_Winter.IsSpellUsable && Horn_of_Winter.KnownSpell && ObjectManager.Me.RunicPowerPercentage < 90
                 && MySettings.UseHornofWinter && Frost_Fever.TargetHaveBuff && Plague_Strike.TargetHaveBuff)
        {
            Horn_of_Winter.Launch();
            return;
        }
        else
        {
            if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell
                && MySettings.UseArcaneTorrentForResource)
            {
                Arcane_Torrent.Launch();
                return;
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: DeathknightBloodSettings

    [Serializable]
    public class DeathknightBloodSettings : Settings
    {
        public int UseAntiMagicShellAtPercentage = 100;
        public int UseAntiMagicZoneAtPercentage = 100;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public int UseArcaneTorrentForResourceAtPercentage = 100;
        public int UseAsphyxiateAtPercentage = 90;
        public int UseBoneShieldAtPercentage = 100;
        public int UseConversionAtPercentage = 45;
        public int UseDeathPactAtPercentage = 55;
        public int UseDeathSiphonAtPercentage = 80;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public int UseIceboundFortitudeAtPercentage = 80;
        public int UseLichborneAtPercentage = 45;
        public int UseMindFreezeAtPercentage = 100;
        public int UseRemorselessWinterAtPercentage = 70;
        public int UseRuneTapAtPercentage = 70;
        public int UseStoneformAtPercentage = 80;
        public int UseStrangulateAtPercentage = 100;
        public int UseWarStompAtPercentage = 80;
        public int UseVampiricBloodAtPercentage = 70;
        public bool UseAlchFlask = true;
        public bool UseAntiMagicShell = true;
        public bool UseAntiMagicZone = true;
        public bool UseArcaneTorrentForDecast = true;
        public bool UseArcaneTorrentForResource = true;
        public bool UseArmyoftheDead = true;
        public bool UseAsphyxiate = true;
        public bool UseBerserking = true;
        public bool UseBloodBoil = true;
        public bool UseBloodFury = true;
        public bool UseBloodPresence = true;
        public bool UseBloodTapForDPS = true;
        public bool UseBloodTapToHeal = true;
        public bool UseBoneShield = true;
        public bool UseChainsofIce = false;
        public bool UseConversion = true;
        public bool UseDancingRuneWeapon = true;
        public bool UseDeathCoil = true;
        public bool UseDeathGrip = true;
        public bool UseDeathPact = true;
        public bool UseDeathSiphon = true;
        public bool UseDeathStrike = true;
        public bool UseDeathandDecay = true;
        public bool UseDeathsAdvance = true;
        public bool UseEmpowerRuneWeapon = true;
        public bool UseEngGlove = true;
        public bool UseFrostPresence = true;
        public bool UseGiftoftheNaaru = true;
        public bool UseHeartStrike = true;
        public bool UseHornofWinter = true;
        public bool UseIceboundFortitude = true;
        public bool UseIcyTouch = true;
        public bool UseLichborne = true;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMindFreeze = true;
        public bool UseOutbreak = true;
        public bool UsePathofFrost = true;
        public bool UsePestilence = true;
        public bool UsePlagueStrike = true;
        public bool UseRaiseDead = true;
        public bool UseRemorselessWinter = true;
        public bool UseRuneStrike = true;
        public bool UseRuneTap = true;
        public bool UseSoulReaper = true;
        public bool UseStoneform = true;
        public bool UseStrangulate = true;
        public bool UseTrinket = true;
        public bool UseUnholyBlight = true;
        public bool UseUnholyPresence = true;
        public bool UseVampiricBlood = true;
        public bool UseWarStomp = true;

        public DeathknightBloodSettings()
        {
            ConfigWinForm(new Point(500, 400), "Deathknight Blood Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrent", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials", "AtPercentage");
            /* Deathknight Presence & Buffs */
            AddControlInWinForm("Use Frost Presence", "UseFrostPresence", "Deathknight Presence & Buffs");
            AddControlInWinForm("Use Blood Presence", "UseBloodPresence", "Deathknight Presence & Buffs");
            AddControlInWinForm("Use Horn of Winter", "UseHornofWinter", "Deathknight Presence & Buffs");
            AddControlInWinForm("Use Path of Frost", "UsePathofFrost", "Deathknight Presence & Buffs");
            AddControlInWinForm("Use Unholy Presence", "UseUnholyPresence", "Deathknight Presence & Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Blood Boil", "UseBloodBoil", "Offensive Spell");
            AddControlInWinForm("Use Death Coil", "UseDeathCoil", "Offensive Spell");
            AddControlInWinForm("Use Death and Decay", "UseDeathandDecay", "Offensive Spell");
            AddControlInWinForm("Use Death Strike", "UseDeathStrike", "Offensive Spell");
            AddControlInWinForm("Use Heart Strike", "UseHeartStrike", "Offensive Spell");
            AddControlInWinForm("Use Icy Touch", "UseIcyTouch", "Offensive Spell");
            AddControlInWinForm("Use Plague Strike", "UsePlagueStrike", "Offensive Spell");
            AddControlInWinForm("Use Rune Strike", "UseRuneStrike", "Offensive Spell");
            AddControlInWinForm("Use Soul Reaper", "UseSoulReaper", "Offensive Spell");
            AddControlInWinForm("Use Unholy Blight", "UseUnholyBlight", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Blood Tap for Healing", "UseBloodTapForHeal", "Offensive Cooldown");
            AddControlInWinForm("Use Blood Tap for DPS", "UseBloodTapForDPS", "Offensive Cooldown");
            AddControlInWinForm("Use Dancing Rune Weapon", "UseDancingRuneWeapon", "Offensive Cooldown");
            AddControlInWinForm("Use Death Grip", "UseDeathGrip", "Offensive Cooldown");
            AddControlInWinForm("Use Empower Rune Weapon", "UseEmpowerRuneWeapon", "Offensive Cooldown");
            AddControlInWinForm("Use Outbreak", "UseOutbreak", "Offensive Cooldown");
            AddControlInWinForm("Use Pestilence", "UsePestilence", "Offensive Cooldown");
            AddControlInWinForm("Use Raise Dead", "UseRaiseDead", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Anti-Magic Shell", "UseAntiMagicShell", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Anti-Magic Zone", "UseAntiMagicZone", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Army of the Dead", "UseArmyoftheDead", "Defensive Cooldown");
            AddControlInWinForm("Use Asphyxiate", "UseAsphyxiate", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Bone Shield", "UseBoneShield", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Chains of Ice", "UseChainsofIce", "Defensive Cooldown");
            AddControlInWinForm("Use Death's Advance", "UseDeathsAdvance", "Defensive Cooldown");
            AddControlInWinForm("Use Icebound Fortitude", "UseIceboundFortitude", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Mind Freeze", "UseMindFreeze", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Remorseless Winter", "UseRemorseless Winter", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Strangulate", "UseStrangulate", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Vampiric Blood", "UseVampiricBlood", "Defensive Cooldown", "AtPercentage");
            /* Healing Spell */
            AddControlInWinForm("Use Conversion", "UseConversion", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Death Pact", "UseDeathPact", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Death Siphon", "UseDeathSiphon", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Lichborne", "UseLichborne", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Rune Tap", "UseRuneTap", "Healing Spell", "AtPercentage");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket", "UseTrinket", "Game Settings");
            AddControlInWinForm("Use Engineer Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
        }

        public static DeathknightBloodSettings CurrentSetting { get; set; }

        public static DeathknightBloodSettings GetSettings()
        {
            string CurrentSettingsFile = Application.StartupPath + "\\CustomClasses\\Settings\\Deathknight_Blood.xml";
            if (File.Exists(CurrentSettingsFile))
            {
                return
                    CurrentSetting = Load<DeathknightBloodSettings>(CurrentSettingsFile);
            }
            else
            {
                return new DeathknightBloodSettings();
            }
        }
    }

    #endregion
}

public class Deathknight_Unholy
{
    private readonly DeathknightUnholySettings MySettings = DeathknightUnholySettings.GetSettings();
    private readonly string MoveBackward = nManager.Wow.Helpers.Keybindings.GetKeyByAction(nManager.Wow.Enums.Keybindings.MOVEBACKWARD);

    #region General Timers & Variables

    private Timer AlchFlask_Timer = new Timer(0);
    private Timer Engineering_Timer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer Trinket_Timer = new Timer(0);
    public int DT = 1;
    public int LC = 0;
    public int SG = 1;

    #endregion

    #region Professions & Racials

    private readonly Spell Arcane_Torrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell Blood_Fury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell Gift_of_the_Naaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell War_Stomp = new Spell("War Stomp");

    #endregion

    #region Deathknight Presence & Buffs

    private readonly Spell Blood_Plague = new Spell("Blood Plague");
    private readonly Spell Blood_Presence = new Spell("Blood Presence");
    private readonly Spell Frost_Fever = new Spell("Frost Fever");
    private readonly Spell Frost_Presence = new Spell("Frost Presence");
    private readonly Spell Horn_of_Winter = new Spell("Horn of Winter");
    private readonly Spell Path_of_Frost = new Spell("Path of Frost");
    private readonly Spell Roiling_Blood = new Spell("Roiling Blood");
    private readonly Spell Unholy_Presence = new Spell("Unholy Presence");
    private Timer Blood_Plague_Timer = new Timer(0);
    private Timer Frost_Fever_Timer = new Timer(0);
    private Timer Path_of_Frost_Timer = new Timer(0);

    #endregion

    #region Offensive Spell

    private readonly Spell Blood_Boil = new Spell("Blood Boil");
    private readonly Spell Blood_Strike = new Spell("Blood Strike");
    private readonly Spell Dark_Transformation = new Spell("Dark Transformation");
    private readonly Spell Death_Coil = new Spell("Death Coil");
    private readonly Spell Death_and_Decay = new Spell("Death and Decay");
    private readonly Spell Festering_Strike = new Spell("Festering Strike");
    private readonly Spell Icy_Touch = new Spell("Icy Touch");
    private readonly Spell Plague_Strike = new Spell("Plague Strike");
    private readonly Spell Scourge_Strike = new Spell("Scourge Strike");
    private readonly Spell Soul_Reaper = new Spell("Soul Reaper");
    private readonly Spell Unholy_Blight = new Spell("Unholy Blight");
    private Timer Dark_Transformation_Timer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell Blood_Tap = new Spell("Blood Tap");
    private readonly Spell Death_Grip = new Spell("Death Grip");
    private readonly Spell Empower_Rune_Weapon = new Spell("Empower Rune Weapon");
    private readonly Spell Outbreak = new Spell("Outbreak");
    private readonly Spell Pestilence = new Spell("Pestilence");
    private readonly Spell Raise_Dead = new Spell("Raise Dead");
    private readonly Spell Summon_Gargoyle = new Spell("Summon Gargoyle");
    private readonly Spell Unholy_Frenzy = new Spell("Unholy Frenzy");
    private Timer Pestilence_Timer = new Timer(0);
    private Timer Summon_Gargoyle_Timer = new Timer(0);

    #endregion

    #region Defensive Cooldown

    private readonly Spell AntiMagic_Shell = new Spell("Anti-Magic Shell");
    private readonly Spell AntiMagic_Zone = new Spell("Anti-Magic Zone");
    private readonly Spell Army_of_the_Dead = new Spell("Army of the Dead");
    private readonly Spell Asphyxiate = new Spell("Asphyxiate");
    private readonly Spell Chains_of_Ice = new Spell("Chains of Ice");
    private readonly Spell Deaths_Advance = new Spell("Death's Advance");
    private readonly Spell Icebound_Fortitude = new Spell("Icebound Fortitude");
    private readonly Spell Mind_Freeze = new Spell("Mind Freeze");
    private readonly Spell Remorseless_Winter = new Spell("Remorseless Winter");
    private readonly Spell Strangulate = new Spell("Strangulate");

    #endregion

    #region Healing Spell

    private readonly Spell Conversion = new Spell("Conversion");
    private readonly Spell Death_Pact = new Spell("Death Pact");
    private readonly Spell Death_Siphon = new Spell("Death Siphon");
    private readonly Spell Death_Strike = new Spell("Death Strike");
    private readonly Spell Lichborne = new Spell("Lichborne");

    #endregion

    public Deathknight_Unholy()
    {
        Main.range = 5.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    Buff_Path();
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (Death_Grip.IsDistanceGood || Icy_Touch.IsDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && MySettings.UseLowCombat)
                            {
                                LC = 1;
                                LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                Combat();
                            }
                        }

                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void Buff_Path()
    {
        if (Path_of_Frost.IsSpellUsable && Path_of_Frost.KnownSpell && !Fight.InFight
            && MySettings.UsePathofFrost && (!Path_of_Frost.HaveBuff || Path_of_Frost_Timer.IsReady))
        {
            Path_of_Frost.Launch();
            Path_of_Frost_Timer = new Timer(1000*60*9.5);
        }
    }

    private void Pull()
    {
        if (Death_Grip.IsSpellUsable && Death_Grip.KnownSpell && Death_Grip.IsDistanceGood
                && MySettings.UseDeathGrip && ObjectManager.Target.GetDistance > Main.range)
        {
            Death_Grip.Launch();
            MovementManager.StopMove();
        }
        else
        {
            if (Icy_Touch.IsSpellUsable && Icy_Touch.KnownSpell && Icy_Touch.IsDistanceGood
                && MySettings.UseIcyTouch)
            {
                Icy_Touch.Launch();
                Frost_Fever_Timer = new Timer(1000*27);
            }
        }
    }

    private void LowCombat()
    {
        Buff();
        AvoidMelee();
        Defense_Cycle();
        Heal();

        if (Icy_Touch.IsSpellUsable && Icy_Touch.KnownSpell && Icy_Touch.IsDistanceGood 
            && MySettings.UseIcyTouch)
        {
            Icy_Touch.Launch();
            return;
        }
        else if (Death_Coil.IsSpellUsable && Death_Coil.KnownSpell && Death_Coil.IsDistanceGood
                 && MySettings.UseDeathCoil)
        {
            Death_Coil.Launch();
            return;
        }
        else if (Scourge_Strike.IsSpellUsable && Scourge_Strike.KnownSpell && Scourge_Strike.IsDistanceGood 
                && MySettings.UseScourgeStrike)
        {
            Scourge_Strike.Launch();
            return;
        }
        else
        {
            if (Blood_Boil.IsSpellUsable && Blood_Boil.KnownSpell && Blood_Boil.IsDistanceGood 
                && MySettings.UseBloodBoil)
            {
                Blood_Boil.Launch();
                return;
            }
        }
    }

    private void Combat()
    {
        Buff();
        AvoidMelee();
        if (OnCD.IsReady)
            Defense_Cycle();
        Heal();
        Decast();
        DPS_Burst();
        DPS_Cycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (Raise_Dead.IsSpellUsable && Raise_Dead.KnownSpell && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
            && MySettings.UseRaiseDead)
        {
            Logging.WriteFight(" - PET DEAD - ");
            Logging.WriteFight(" - SUMMONING PET - ");
            Raise_Dead.Launch();
        }

        if (Unholy_Presence.IsSpellUsable && Unholy_Presence.KnownSpell && !Unholy_Presence.HaveBuff
            && MySettings.UseUnholyPresence && ObjectManager.Me.HealthPercent > 50)
            Unholy_Presence.Launch();
        else if (Frost_Presence.IsSpellUsable && Frost_Presence.KnownSpell && !Frost_Presence.HaveBuff
                && MySettings.UseFrostPresence && !MySettings.UseUnholyPresence)
            Frost_Presence.Launch();
        else if (Blood_Presence.IsSpellUsable && Blood_Presence.KnownSpell && !Blood_Presence.HaveBuff
                 && (ObjectManager.Me.HealthPercent < 30 || (!MySettings.UseUnholyPresence && !MySettings.UseFrostPresence))
                 && MySettings.UseBloodPresence)
            Blood_Presence.Launch();

        if (Horn_of_Winter.IsSpellUsable && Horn_of_Winter.KnownSpell && !Horn_of_Winter.HaveBuff
            && MySettings.UseHornofWinter)
        {
            Horn_of_Winter.Launch();
            return;
        }
        else if (Deaths_Advance.IsSpellUsable && Deaths_Advance.KnownSpell && ObjectManager.GetNumberAttackPlayer() == 0
                 && MySettings.UseDeathsAdvance && ObjectManager.Me.GetMove)
        {
            Deaths_Advance.Launch();
            return;
        }
        else
        {
            if (AlchFlask_Timer.IsReady && ItemsManager.GetItemCountByIdLUA(75525) == 1
                && MySettings.UseAlchFlask)
            {
                Logging.WriteFight("Use Alchi Flask");
                Lua.RunMacroText("/use item:75525");
                AlchFlask_Timer = new Timer(1000*60*60*2);
                return;
            }
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            Keyboard.DownKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
            while (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
                Thread.Sleep(300);
            Keyboard.UpKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
        }
    }

    private void Defense_Cycle()
    {
        if (Icebound_Fortitude.IsSpellUsable && Icebound_Fortitude.KnownSpell
                 && MySettings.UseIceboundFortitude && ObjectManager.Me.HealthPercent <= MySettings.UseIceboundFortitudeAtPercentage)
        {
            Icebound_Fortitude.Launch();
            OnCD = new Timer(1000*12);
            return;
        }
        else if (Strangulate.IsSpellUsable && Strangulate.KnownSpell && Strangulate.IsDistanceGood
                 && MySettings.UseAsphyxiate && ObjectManager.Me.HealthPercent <= MySettings.UseAsphyxiateAtPercentage)
        {
            Strangulate.Launch();
            OnCD = new Timer(1000*5);
            return;
        }
        else if (Stoneform.IsSpellUsable && Stoneform.KnownSpell && ObjectManager.Me.HealthPercent <= MySettings.UseStoneformAtPercentage
            && MySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (War_Stomp.IsSpellUsable && War_Stomp.KnownSpell && ObjectManager.Target.GetDistance < 8
                && MySettings.UseWarStomp && ObjectManager.Me.HealthPercent <= MySettings.UseWarStompAtPercentage)
        {
            War_Stomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else
        {
            if (Remorseless_Winter.IsSpellUsable && Remorseless_Winter.KnownSpell && ObjectManager.Target.GetDistance < 8
                && (ObjectManager.Me.HealthPercent <= MySettings.UseRemorselessWinterAtPercentage || ObjectManager.GetNumberAttackPlayer() > 1)
                && MySettings.UseRemorselessWinter)
            {
                Remorseless_Winter.Launch();
                OnCD = new Timer(1000*8);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (Gift_of_the_Naaru.IsSpellUsable && Gift_of_the_Naaru.KnownSpell && ObjectManager.Me.HealthPercent <= MySettings.UseGiftoftheNaaruAtPercentage
            && MySettings.UseGiftoftheNaaru)
        {
            Gift_of_the_Naaru.Launch();
            return;
        }
        else if (Death_Pact.IsSpellUsable && Death_Pact.KnownSpell && Raise_Dead.IsSpellUsable && Raise_Dead.KnownSpell
                 && MySettings.UseDeathPact&& ObjectManager.Me.HealthPercent <= MySettings.UseDeathPactAtPercentage)
        {
            for (int i = 0; i < 3; i++)
            {
                Raise_Dead.Launch();
                Death_Pact.Launch();

                if (!Death_Pact.IsSpellUsable)
                    break;
            }
        }
        else if (Lichborne.IsSpellUsable && Lichborne.KnownSpell && Death_Coil.IsSpellUsable && Death_Coil.KnownSpell
                 && MySettings.UseLichborne && ObjectManager.Me.HealthPercent <= MySettings.UseLichborneAtPercentage)
        {
            if (Lichborne.IsSpellUsable)
            {
                Lichborne.Launch();
                return;
            }
        }
        else if (Conversion.IsSpellUsable && Conversion.KnownSpell && ObjectManager.Me.RunicPower > 10
            && MySettings.UseConversion && ObjectManager.Me.HealthPercent <= MySettings.UseConversionAtPercentage)
        {
            Conversion.Launch();
            while (ObjectManager.Me.RunicPower > 0)
                Thread.Sleep(200);
            return;
        }
        else if (Death_Siphon.IsSpellUsable && Death_Siphon.KnownSpell && Death_Siphon.IsDistanceGood
                 && MySettings.UseDeathSiphon && ObjectManager.Me.HealthPercent <= MySettings.UseDeathSiphonAtPercentage)
        {
            Death_Siphon.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.IsValid && ObjectManager.Target.IsAlive
                 && Death_Strike.IsSpellUsable && Death_Strike.KnownSpell && Death_Strike.IsDistanceGood
                 && MySettings.UseDeathStrike && ObjectManager.Me.HealthPercent <= MySettings.UseDeathStrikeAtPercentage)
            {
                Death_Strike.Launch();
                return;
            }
        }
    }

    private void Decast()
    {
        if (Mind_Freeze.IsSpellUsable && Mind_Freeze.KnownSpell && Mind_Freeze.IsDistanceGood
            && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
            && MySettings.UseMindFreeze && ObjectManager.Me.HealthPercent <= MySettings.UseMindFreezeAtPercentage)
        {
            Mind_Freeze.Launch();
            return;
        }
        else if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell && ObjectManager.Target.GetDistance < 8
            && ObjectManager.Me.HealthPercent <= MySettings.UseArcaneTorrentForDecastAtPercentage
            && MySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else if (AntiMagic_Shell.IsSpellUsable && AntiMagic_Shell.KnownSpell
                 && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                 && MySettings.UseAntiMagicShell && ObjectManager.Me.HealthPercent <= MySettings.UseAntiMagicShellAtPercentage)
        {
            AntiMagic_Shell.Launch();
            return;
        }
        else if (Strangulate.IsSpellUsable && Strangulate.KnownSpell && Strangulate.IsDistanceGood
                 && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                 && (MySettings.UseStrangulate && ObjectManager.Me.HealthPercent <= MySettings.UseStrangulateAtPercentage 
                 || MySettings.UseAsphyxiate && ObjectManager.Me.HealthPercent <= MySettings.UseAsphyxiateAtPercentage))
        {
            Strangulate.Launch();
            return;
        }
        else
        {
            if (AntiMagic_Zone.IsSpellUsable && AntiMagic_Zone.KnownSpell
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && MySettings.UseAntiMagicZone && ObjectManager.Me.HealthPercent <= MySettings.UseAntiMagicZoneAtPercentage)
            {
                SpellManager.CastSpellByIDAndPosition(51052, ObjectManager.Me.Position);
                return;
            }
        }

        if (Chains_of_Ice.IsSpellUsable && Chains_of_Ice.KnownSpell && Chains_of_Ice.IsDistanceGood
            && MySettings.UseChainsofIce && ObjectManager.Target.GetMove && !Chains_of_Ice.TargetHaveBuff)
        {
            Chains_of_Ice.Launch();
            return;
        }
    }

    private void DPS_Burst()
    {
        if (MySettings.UseTrinket && Trinket_Timer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Trinket_Timer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBerserking)
            Berserking.Launch();
        else if (Blood_Fury.IsSpellUsable && Blood_Fury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBloodFury)
            Blood_Fury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (Blood_Tap.IsSpellUsable && Blood_Tap.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBloodTap)
            Blood_Tap.Launch();
        else if (Engineering_Timer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                && MySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            Engineering_Timer = new Timer(1000*60);
        }
        else if (Blood_Tap.IsSpellUsable && Blood_Tap.KnownSpell && ObjectManager.Target.GetDistance < 30
            && MySettings.UseBloodTap)
        {
            Blood_Tap.Launch();
            Thread.Sleep(200);
        }
        else
        {
            if (Unholy_Frenzy.IsSpellUsable && Unholy_Frenzy.KnownSpell && ObjectManager.Target.GetDistance < 30
                && MySettings.UseUnholyFrenzy)
            {
                Unholy_Frenzy.Launch();
                return;
            }
        }

        if (Summon_Gargoyle_Timer.IsReady && SG == 0)
            SG++;

        if (Summon_Gargoyle.IsSpellUsable && Summon_Gargoyle.KnownSpell && Summon_Gargoyle.IsDistanceGood
            && MySettings.UseSummonGargoyle && SG == 1)
        {
            Summon_Gargoyle.Launch();
            Summon_Gargoyle_Timer = new Timer(1000*60*3);
            SG--;
            return;
        }

        if (Dark_Transformation_Timer.IsReady && DT == 0)
            DT++;

        if (Dark_Transformation.IsSpellUsable && Dark_Transformation.KnownSpell && DT == 1
            && MySettings.UseDarkTransformation)
        {
            Dark_Transformation.Launch();
            Dark_Transformation_Timer = new Timer(1000*30);
            DT--;
            return;
        }
    }

    private void DPS_Cycle()
    {
        if (Death_Coil.IsSpellUsable && Death_Coil.KnownSpell && Lichborne.HaveBuff && ObjectManager.Me.HealthPercent < 85)
        {
            Lua.RunMacroText("/target Player");
            Death_Coil.Launch();
            return;
        }
        else if (Unholy_Blight.IsSpellUsable && Unholy_Blight.KnownSpell && ObjectManager.Target.GetDistance < 9
                 && MySettings.UseUnholyBlight)
        {
            Unholy_Blight.Launch();
            Blood_Plague_Timer = new Timer(1000*27);
            Frost_Fever_Timer = new Timer(1000*27);
            return;
        }
        else if (Outbreak.IsSpellUsable && Outbreak.KnownSpell && Outbreak.IsDistanceGood 
                 && (Blood_Plague_Timer.IsReady || Frost_Fever_Timer.IsReady || !Blood_Plague.TargetHaveBuff || !Frost_Fever.TargetHaveBuff)
                 && MySettings.UseOutbreak)
        {
            Outbreak.Launch();
            Blood_Plague_Timer = new Timer(1000*27);
            Frost_Fever_Timer = new Timer(1000*27);
            return;
        }
        else if (Blood_Boil.IsSpellUsable && Blood_Boil.KnownSpell && ObjectManager.Target.GetDistance < 9
                 && Roiling_Blood.KnownSpell && ((Blood_Plague_Timer.IsReady && Blood_Plague.TargetHaveBuff) 
                 || (Frost_Fever_Timer.IsReady && Frost_Fever.TargetHaveBuff))
                 && MySettings.UseBloodBoil)
        {
            Blood_Boil.Launch();
            Blood_Plague_Timer = new Timer(1000*27);
            Frost_Fever_Timer = new Timer(1000*27);
            return;
        }
        else if (Plague_Strike.IsSpellUsable && Plague_Strike.KnownSpell && Plague_Strike.IsDistanceGood 
                 && !Outbreak.IsSpellUsable && !Unholy_Blight.IsSpellUsable
                 && MySettings.UsePlagueStrike && (Blood_Plague_Timer.IsReady || !Blood_Plague.TargetHaveBuff))
        {
            Plague_Strike.Launch();
            Blood_Plague_Timer = new Timer(1000*27);
            return;
        }
        else if (Icy_Touch.IsSpellUsable && Icy_Touch.KnownSpell && Icy_Touch.IsDistanceGood
                 && !Outbreak.IsSpellUsable && !Unholy_Blight.IsSpellUsable
                 && MySettings.UseIcyTouch && (Frost_Fever_Timer.IsReady || !Frost_Fever.TargetHaveBuff))
        {
            Icy_Touch.Launch();
            Frost_Fever_Timer = new Timer(1000*27);
            return;
        }
        else if (Pestilence.IsSpellUsable && Pestilence.KnownSpell && Pestilence.IsDistanceGood
                 && Frost_Fever.TargetHaveBuff && Blood_Plague.TargetHaveBuff && !Roiling_Blood.KnownSpell
                 && MySettings.UsePestilence && ObjectManager.GetNumberAttackPlayer() > 2)
        {
            Pestilence.Launch();
            return;
        }
        else if (Dark_Transformation_Timer.IsReady && DT == 1 && SG == 0 
            && MySettings.UseDarkTransformation)
        {
            if (Death_Coil.KnownSpell && Death_Coil.IsSpellUsable && Death_Coil.IsDistanceGood
                && MySettings.UseDeathCoil)
            {
                if (((Lichborne.KnownSpell && MySettings.UseLichborne) || (Conversion.KnownSpell && MySettings.UseConversion))
                    && ObjectManager.Me.HealthPercent < 80)
                    return;
                else
                {
                    Death_Coil.Launch();
                    return;
                }
            }
        }
        else if (Death_and_Decay.KnownSpell && Death_and_Decay.IsSpellUsable && Death_and_Decay.IsDistanceGood 
            && MySettings.UseDeathandDecay && ObjectManager.GetNumberAttackPlayer() > 2)
        {
            SpellManager.CastSpellByIDAndPosition(43265, ObjectManager.Target.Position);
            return;
        }
        else if (Army_of_the_Dead.IsSpellUsable && Army_of_the_Dead.KnownSpell
                 && MySettings.UseArmyoftheDead && ObjectManager.GetNumberAttackPlayer() > 4)
        {
            Army_of_the_Dead.Launch();
            Thread.Sleep(4000);
            return;
        }
        else if (Blood_Boil.IsSpellUsable && Blood_Boil.KnownSpell && ObjectManager.Target.GetDistance < 9
                 && MySettings.UseBloodBoil && ObjectManager.GetNumberAttackPlayer() > 2)
        {
            Blood_Boil.Launch();
            if (Blood_Plague.TargetHaveBuff && Frost_Fever.TargetHaveBuff && Roiling_Blood.KnownSpell)
            {
                Blood_Plague_Timer = new Timer(1000*27);
                Frost_Fever_Timer = new Timer(1000*27);
            }
            return;
        }
        else if (Soul_Reaper.IsSpellUsable && Soul_Reaper.KnownSpell && Soul_Reaper.IsDistanceGood
                 && ObjectManager.Target.HealthPercent < 35 && ObjectManager.Me.HealthPercent > MySettings.UseDeathStrikeAtPercentage
                 && MySettings.UseSoulReaper)
        {
            Soul_Reaper.Launch();
            return;
        }
        else if (Scourge_Strike.KnownSpell && Scourge_Strike.IsSpellUsable && Scourge_Strike.IsDistanceGood 
                 && MySettings.UseScourgeStrike && ObjectManager.Me.RunicPowerPercentage < 90)
        {
            Scourge_Strike.Launch();
            return;
        }
        else if (Festering_Strike.IsSpellUsable && Festering_Strike.KnownSpell && Festering_Strike.IsDistanceGood
                 && MySettings.UseFesteringStrike && ObjectManager.Me.RunicPowerPercentage < 90)
        {
            Festering_Strike.Launch();
            return;
        }
        else if (Death_Coil.IsSpellUsable && Death_Coil.KnownSpell && Death_Coil.IsDistanceGood
                 && (ObjectManager.Me.RunicPowerPercentage > 89 || ObjectManager.Me.HaveBuff(81340))
                 && MySettings.UseDeathCoil)
        {
            Death_Coil.Launch();
            return;
        }
        else if (Horn_of_Winter.IsSpellUsable && Horn_of_Winter.KnownSpell && ObjectManager.Me.RunicPowerPercentage < 90
                 && MySettings.UseHornofWinter && Frost_Fever.TargetHaveBuff && Plague_Strike.TargetHaveBuff)
        {
            Horn_of_Winter.Launch();
            return;
        }
        else if (Empower_Rune_Weapon.IsSpellUsable && Empower_Rune_Weapon.KnownSpell
                 && MySettings.UseEmpowerRuneWeapon)
        {
            Empower_Rune_Weapon.Launch();
            return;
        }
        else
        {
            if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell
                && MySettings.UseArcaneTorrentForResource)
            {
                Arcane_Torrent.Launch();
                return;
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: DeathknightUnholySettings

    [Serializable]
    public class DeathknightUnholySettings : Settings
    {
        public int UseAntiMagicShellAtPercentage = 100;
        public int UseAntiMagicZoneAtPercentage = 100;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public int UseArcaneTorrentForResourceAtPercentage = 100;
        public int UseAsphyxiateAtPercentage = 90;
        public int UseConversionAtPercentage = 45;
        public int UseDeathPactAtPercentage = 55;
        public int UseDeathSiphonAtPercentage = 80;
        public int UseDeathStrikeAtPercentage = 80;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public int UseIceboundFortitudeAtPercentage = 80;
        public int UseLichborneAtPercentage = 45;
        public int UseMindFreezeAtPercentage = 100;
        public int UseRemorselessWinterAtPercentage = 70;
        public int UseStoneformAtPercentage = 80;
        public int UseStrangulateAtPercentage = 100;
        public int UseWarStompAtPercentage = 80;
        public bool UseAlchFlask = true;
        public bool UseAntiMagicShell = true;
        public bool UseAntiMagicZone = true;
        public bool UseArcaneTorrentForDecast = true;
        public bool UseArcaneTorrentForResource = true;
        public bool UseArmyoftheDead = true;
        public bool UseAsphyxiate = true;
        public bool UseBerserking = true;
        public bool UseBloodBoil = true;
        public bool UseBloodFury = true;
        public bool UseBloodPresence = true;
        public bool UseBloodTap = true;
        public bool UseChainsofIce = false;
        public bool UseConversion = true;
        public bool UseDarkTransformation = true;
        public bool UseDeathCoil = true;
        public bool UseDeathGrip = true;
        public bool UseDeathPact = true;
        public bool UseDeathSiphon = true;
        public bool UseDeathStrike = true;
        public bool UseDeathandDecay = true;
        public bool UseDeathsAdvance = true;
        public bool UseEmpowerRuneWeapon = true;
        public bool UseEngGlove = true;
        public bool UseFesteringStrike = true;
        public bool UseFrostPresence = true;
        public bool UseGiftoftheNaaru = true;
        public bool UseHornofWinter = true;
        public bool UseIceboundFortitude = true;
        public bool UseIcyTouch = true;
        public bool UseLichborne = true;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMindFreeze = true;
        public bool UseOutbreak = true;
        public bool UsePathofFrost = true;
        public bool UsePestilence = true;
        public bool UsePlagueStrike = true;
        public bool UseRaiseDead = true;
        public bool UseRemorselessWinter = true;
        public bool UseScourgeStrike = true;
        public bool UseSoulReaper = true;
        public bool UseStoneform = true;
        public bool UseStrangulate = true;
        public bool UseSummonGargoyle = true;
        public bool UseTrinket = true;
        public bool UseUnholyBlight = true;
        public bool UseUnholyFrenzy = true;
        public bool UseUnholyPresence = true;
        public bool UseWarStomp = true;

        public DeathknightUnholySettings()
        {
            ConfigWinForm(new Point(500, 400), "Deathknight Unholy Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrent", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials", "AtPercentage");
            /* Deathknight Presence & Buffs */
            AddControlInWinForm("Use Frost Presence", "UseFrostPresence", "Deathknight Presence & Buffs");
            AddControlInWinForm("Use Blood Presence", "UseBloodPresence", "Deathknight Presence & Buffs");
            AddControlInWinForm("Use Horn of Winter", "UseHornofWinter", "Deathknight Presence & Buffs");
            AddControlInWinForm("Use Path of Frost", "UsePathofFrost", "Deathknight Presence & Buffs");
            AddControlInWinForm("Use Unholy Presence", "UseUnholyPresence", "Deathknight Presence & Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Blood Boil", "UseBloodBoil", "Offensive Spell");
            AddControlInWinForm("Use Dark Transformation", "UseDarkTransformation", "Offensive Spell");
            AddControlInWinForm("Use Death Coil", "UseDeathCoil", "Offensive Spell");
            AddControlInWinForm("Use Death and Decay", "UseDeathandDecay", "Offensive Spell");
            AddControlInWinForm("Use Festering Strike", "UseFesteringStrike", "Offensive Spell");
            AddControlInWinForm("Use Icy Touch", "UseIcyTouch", "Offensive Spell");
            AddControlInWinForm("Use Plague Strike", "UsePlagueStrike", "Offensive Spell");
            AddControlInWinForm("Use Soul Reaper", "UseSoulReaper", "Offensive Spell");
            AddControlInWinForm("Use Scourge Strike", "UseScourgeStrike", "Offensive Spell");
            AddControlInWinForm("Use Unholy Blight", "UseUnholyBlight", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Blood Tap", "UseBloodTap", "Offensive Cooldown");
            AddControlInWinForm("Use Death Grip", "UseDeathGrip", "Offensive Cooldown");
            AddControlInWinForm("Use Empower Rune Weapon", "UseEmpowerRuneWeapon", "Offensive Cooldown");
            AddControlInWinForm("Use Outbreak", "UseOutbreak", "Offensive Cooldown");
            AddControlInWinForm("Use Pestilence", "UsePestilence", "Offensive Cooldown");
            AddControlInWinForm("Use Raise Dead", "UseRaiseDead", "Offensive Cooldown");
            AddControlInWinForm("Use Summon Gargoyle", "UseSummonGargoyle", "Offensive Cooldown");
            AddControlInWinForm("Use Unholy Frenzy", "UseUnholyFrenzy", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Anti-Magic Shell", "UseAntiMagicShell", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Anti-Magic Zone", "UseAntiMagicZone", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Army of the Dead", "UseArmyoftheDead", "Defensive Cooldown");
            AddControlInWinForm("Use Asphyxiate", "UseAsphyxiate", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Chains of Ice", "UseChainsofIce", "Defensive Cooldown");
            AddControlInWinForm("Use Death's Advance", "UseDeathsAdvance", "Defensive Cooldown");
            AddControlInWinForm("Use Icebound Fortitude", "UseIceboundFortitude", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Mind Freeze", "UseMindFreeze", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Remorseless Winter", "UseRemorseless Winter", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Strangulate", "UseStrangulate", "Defensive Cooldown", "AtPercentage");
            /* Healing Spell */
            AddControlInWinForm("Use Conversion", "UseConversion", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Death Pact", "UseDeathPact", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Death Siphon", "UseDeathSiphon", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Death Strike", "UseDeathStrike", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Lichborne", "UseLichborne", "Healing Spell", "AtPercentage");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket", "UseTrinket", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
        }

        public static DeathknightUnholySettings CurrentSetting { get; set; }

        public static DeathknightUnholySettings GetSettings()
        {
            string CurrentSettingsFile = Application.StartupPath + "\\CustomClasses\\Settings\\Deathknight_Unholy.xml";
            if (File.Exists(CurrentSettingsFile))
            {
                return
                    CurrentSetting = Load<DeathknightUnholySettings>(CurrentSettingsFile);
            }
            else
            {
                return new DeathknightUnholySettings();
            }
        }
    }

    #endregion
}

public class Deathknight_Frost
{
    private readonly DeathknightFrostSettings MySettings = DeathknightFrostSettings.GetSettings();
    private readonly string MoveBackward = nManager.Wow.Helpers.Keybindings.GetKeyByAction(nManager.Wow.Enums.Keybindings.MOVEBACKWARD);

    #region General Timers & Variables

    private Timer AlchFlask_Timer = new Timer(0);
    private Timer Engineering_Timer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer Trinket_Timer = new Timer(0);
    public int LC = 0;

    #endregion

    #region Professions & Racials

    private readonly Spell Arcane_Torrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell Blood_Fury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell Gift_of_the_Naaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell War_Stomp = new Spell("War Stomp");

    #endregion

    #region Deathknight Presence & Buffs

    private readonly Spell Blood_Plague = new Spell("Blood Plague");
    private readonly Spell Blood_Presence = new Spell("Blood Presence");
    private readonly Spell Freezing_Fog = new Spell(59052);
    private readonly Spell Frost_Fever = new Spell("Frost Fever");
    private readonly Spell Frost_Presence = new Spell("Frost Presence");
    private readonly Spell Horn_of_Winter = new Spell("Horn of Winter");
    private readonly Spell Path_of_Frost = new Spell("Path of Frost");
    private readonly Spell Roiling_Blood = new Spell("Roiling Blood");
    private readonly Spell Unholy_Presence = new Spell("Unholy Presence");
    private Timer Blood_Plague_Timer = new Timer(0);
    private Timer Frost_Fever_Timer = new Timer(0);
    private Timer Path_of_Frost_Timer = new Timer(0);

    #endregion

    #region Offensive Spell

    private readonly Spell Blood_Boil = new Spell("Blood Boil");
    private readonly Spell Blood_Strike = new Spell("Blood Strike");
    private readonly Spell Death_Coil = new Spell("Death Coil");
    private readonly Spell Death_and_Decay = new Spell("Death and Decay");
    private readonly Spell Frost_Strike = new Spell("Frost Strike");
    private readonly Spell Howling_Blast = new Spell("Howling Blast");
    private readonly Spell Icy_Touch = new Spell("Icy Touch");
    private readonly Spell Obliterate = new Spell("Obliterate");
    private readonly Spell Plague_Strike = new Spell("Plague Strike");
    private readonly Spell Soul_Reaper = new Spell("Soul Reaper");
    private readonly Spell Unholy_Blight = new Spell("Unholy Blight");

    #endregion

    #region Offensive Cooldown

    private readonly Spell Blood_Tap = new Spell("Blood Tap");
    private readonly Spell Death_Grip = new Spell("Death Grip");
    private readonly Spell Empower_Rune_Weapon = new Spell("Empower Rune Weapon");
    private readonly Spell Outbreak = new Spell("Outbreak");
    private readonly Spell Pestilence = new Spell("Pestilence");
    private readonly Spell Pillar_of_Frost = new Spell("Pillar of Frost");
    private readonly Spell Raise_Dead = new Spell("Raise Dead");
    private Timer Pestilence_Timer = new Timer(0);

    #endregion

    #region Defensive Cooldown

    private readonly Spell AntiMagic_Shell = new Spell("Anti-Magic Shell");
    private readonly Spell AntiMagic_Zone = new Spell("Anti-Magic Zone");
    private readonly Spell Army_of_the_Dead = new Spell("Army of the Dead");
    private readonly Spell Asphyxiate = new Spell("Asphyxiate");
    private readonly Spell Chains_of_Ice = new Spell("Chains of Ice");
    private readonly Spell Deaths_Advance = new Spell("Death's Advance");
    private readonly Spell Icebound_Fortitude = new Spell("Icebound Fortitude");
    private readonly Spell Mind_Freeze = new Spell("Mind Freeze");
    private readonly Spell Remorseless_Winter = new Spell("Remorseless Winter");
    private readonly Spell Strangulate = new Spell("Strangulate");

    #endregion

    #region Healing Spell

    private readonly Spell Conversion = new Spell("Conversion");
    private readonly Spell Death_Pact = new Spell("Death Pact");
    private readonly Spell Death_Siphon = new Spell("Death Siphon");
    private readonly Spell Death_Strike = new Spell("Death Strike");
    private readonly Spell Lichborne = new Spell("Lichborne");

    #endregion

    public Deathknight_Frost()
    {
        Main.range = 5.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    Buff_Path();
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (Death_Grip.IsDistanceGood || Icy_Touch.IsDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && MySettings.UseLowCombat)
                            {
                                LC = 1;
                                LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                Combat();
                            }
                        }

                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(250);
        }
    }

    private void Buff_Path()
    {
        if (Path_of_Frost.IsSpellUsable && Path_of_Frost.KnownSpell && !Fight.InFight
            && MySettings.UsePathofFrost && (!Path_of_Frost.HaveBuff || Path_of_Frost_Timer.IsReady))
        {
            Path_of_Frost.Launch();
            Path_of_Frost_Timer = new Timer(1000*60*9.5);
        }
    }

    private void Pull()
    {
        if (Death_Grip.IsSpellUsable && Death_Grip.KnownSpell && Death_Grip.IsDistanceGood
                && MySettings.UseDeathGrip && ObjectManager.Target.GetDistance > Main.range)
        {
            Death_Grip.Launch();
            MovementManager.StopMove();
        }
        else
        {
            if (Icy_Touch.IsSpellUsable && Icy_Touch.KnownSpell && Icy_Touch.IsDistanceGood
                && MySettings.UseIcyTouch)
            {
                Icy_Touch.Launch();
                Frost_Fever_Timer = new Timer(1000*27);
            }
        }
    }

    private void LowCombat()
    {
        Buff();
        AvoidMelee();
        Defense_Cycle();
        Heal();

        if (Howling_Blast.IsSpellUsable && Howling_Blast.KnownSpell && Howling_Blast.IsDistanceGood
            && MySettings.UseHowlingBlast)
        {
            Howling_Blast.Launch();
            return;
        }
        // Blizzard API Calls for Frost Strike using Blood Strike Function
        else if (Blood_Strike.IsSpellUsable && Blood_Strike.KnownSpell && Blood_Strike.IsDistanceGood
                 && MySettings.UseFrostStrike)
        {
            Blood_Strike.Launch();
            return;
        }
        else if (Death_Coil.IsSpellUsable && Death_Coil.KnownSpell && Death_Coil.IsDistanceGood
                 && MySettings.UseDeathCoil)
        {
            Death_Coil.Launch();
            return;
        }
        else if (Plague_Strike.IsSpellUsable && Plague_Strike.KnownSpell && Plague_Strike.IsDistanceGood
                 && MySettings.UsePlagueStrike)
        {
            Plague_Strike.Launch();
            return;
        }
        else
        {
            if (Blood_Boil.KnownSpell && Blood_Boil.IsSpellUsable && Blood_Boil.IsDistanceGood
                && MySettings.UseBloodBoil)
            {
                Blood_Boil.Launch();
                return;
            }
        }
    }

    private void Combat()
    {
        Buff();
        AvoidMelee();
        if (OnCD.IsReady)
            Defense_Cycle();
        Heal();
        Decast();
        DPS_Burst();
        DPS_Cycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (Unholy_Presence.IsSpellUsable && Unholy_Presence.KnownSpell && MySettings.UseLowCombat
            && MySettings.UseUnholyPresence && !Unholy_Presence.HaveBuff && LC == 1)
            Unholy_Presence.Launch();
        else if (Blood_Presence.IsSpellUsable && Blood_Presence.KnownSpell && ObjectManager.Me.HealthPercent < 30
                 && MySettings.UseBloodPresence && !Blood_Presence.HaveBuff)
            Blood_Presence.Launch();
        else
        {
            if (Frost_Presence.IsSpellUsable && Frost_Presence.KnownSpell && ObjectManager.Me.HealthPercent > 50
                && MySettings.UseFrostPresence && !Frost_Presence.HaveBuff)
                Frost_Presence.Launch();
        }

        if (Horn_of_Winter.IsSpellUsable && Horn_of_Winter.KnownSpell && !Horn_of_Winter.HaveBuff
            && MySettings.UseHornofWinter)
        {
            Horn_of_Winter.Launch();
            return;
        }
        else if (Deaths_Advance.IsSpellUsable && Deaths_Advance.KnownSpell && ObjectManager.GetNumberAttackPlayer() == 0
                 && MySettings.UseDeathsAdvance && ObjectManager.Me.GetMove)
        {
            Deaths_Advance.Launch();
            return;
        }
        else
        {
            if (AlchFlask_Timer.IsReady && ItemsManager.GetItemCountByIdLUA(75525) == 1
                && MySettings.UseAlchFlask)
            {
                Logging.WriteFight("Use Alchi Flask");
                Lua.RunMacroText("/use item:75525");
                AlchFlask_Timer = new Timer(1000*60*60*2);
                return;
            }
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            Keyboard.DownKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
            while (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
                Thread.Sleep(300);
            Keyboard.UpKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
        }
    }

    private void Defense_Cycle()
    {
        if (War_Stomp.IsSpellUsable && War_Stomp.KnownSpell && ObjectManager.Target.GetDistance < 8
                && MySettings.UseWarStomp && ObjectManager.Me.HealthPercent <= MySettings.UseWarStompAtPercentage)
        {
            War_Stomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        if (Stoneform.IsSpellUsable && Stoneform.KnownSpell && ObjectManager.Me.HealthPercent <= MySettings.UseStoneformAtPercentage
            && MySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (Icebound_Fortitude.IsSpellUsable && Icebound_Fortitude.KnownSpell
                 && ObjectManager.Me.HealthPercent <= MySettings.UseIceboundFortitudeAtPercentage
                 && MySettings.UseIceboundFortitude)
        {
            Icebound_Fortitude.Launch();
            OnCD = new Timer(1000*12);
            return;
        }
        else
        {
            if (Remorseless_Winter.IsSpellUsable && Remorseless_Winter.KnownSpell && ObjectManager.Target.GetDistance < 8
                && (ObjectManager.Me.HealthPercent <= MySettings.UseRemorselessWinterAtPercentage || ObjectManager.GetNumberAttackPlayer() > 1)
                && MySettings.UseRemorselessWinter)
            {
                Remorseless_Winter.Launch();
                OnCD = new Timer(1000*8);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (Gift_of_the_Naaru.IsSpellUsable && Gift_of_the_Naaru.KnownSpell && ObjectManager.Me.HealthPercent <= MySettings.UseGiftoftheNaaruAtPercentage
            && MySettings.UseGiftoftheNaaru)
        {
            Gift_of_the_Naaru.Launch();
            return;
        }
        else if (Death_Pact.IsSpellUsable && Death_Pact.KnownSpell && Raise_Dead.IsSpellUsable && Raise_Dead.KnownSpell
                 && MySettings.UseDeathPact&& ObjectManager.Me.HealthPercent <= MySettings.UseDeathPactAtPercentage)
        {
            for (int i = 0; i < 3; i++)
            {
                Raise_Dead.Launch();
                Death_Pact.Launch();

                if (!Death_Pact.IsSpellUsable)
                    break;
            }
        }
        else if (Lichborne.IsSpellUsable && Lichborne.KnownSpell && Death_Coil.IsSpellUsable && Death_Coil.KnownSpell
                 && MySettings.UseLichborne && ObjectManager.Me.HealthPercent <= MySettings.UseLichborneAtPercentage)
        {
            if (Lichborne.IsSpellUsable)
            {
                Lichborne.Launch();
                return;
            }
        }
        else if (Conversion.IsSpellUsable && Conversion.KnownSpell && ObjectManager.Me.RunicPower > 10
            && MySettings.UseConversion && ObjectManager.Me.HealthPercent <= MySettings.UseConversionAtPercentage)
        {
            Conversion.Launch();
            while (ObjectManager.Me.RunicPower > 0)
                Thread.Sleep(200);
            return;
        }
        else
        {
            if (Death_Siphon.IsSpellUsable && Death_Siphon.KnownSpell && Death_Siphon.IsDistanceGood
                 && MySettings.UseDeathSiphon && ObjectManager.Me.HealthPercent <= MySettings.UseDeathSiphonAtPercentage)
            {
                Death_Siphon.Launch();
                return;
            }
        }
    }

    private void Decast()
    {
        if (Mind_Freeze.IsSpellUsable && Mind_Freeze.KnownSpell && Mind_Freeze.IsDistanceGood
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && MySettings.UseMindFreeze && ObjectManager.Me.HealthPercent <= MySettings.UseMindFreezeAtPercentage)
        {
            Mind_Freeze.Launch();
            return;
        }
        if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell && ObjectManager.Target.GetDistance < 8
            && ObjectManager.Me.HealthPercent <= MySettings.UseArcaneTorrentForDecastAtPercentage
            && MySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else if (AntiMagic_Shell.IsSpellUsable && AntiMagic_Shell.KnownSpell
                 && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                 && MySettings.UseAntiMagicShell && ObjectManager.Me.HealthPercent <= MySettings.UseAntiMagicShellAtPercentage)
        {
            AntiMagic_Shell.Launch();
            return;
        }
        else if (Strangulate.IsSpellUsable && Strangulate.KnownSpell && Strangulate.IsDistanceGood
                 && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                 && (MySettings.UseStrangulate && ObjectManager.Me.HealthPercent <= MySettings.UseStrangulateAtPercentage 
                 || MySettings.UseAsphyxiate && ObjectManager.Me.HealthPercent <= MySettings.UseAsphyxiateAtPercentage))
        {
            Strangulate.Launch();
            return;
        }
        else
        {
            if (AntiMagic_Zone.IsSpellUsable && AntiMagic_Zone.KnownSpell
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && MySettings.UseAntiMagicZone && ObjectManager.Me.HealthPercent <= MySettings.UseAntiMagicZoneAtPercentage)
            {
                SpellManager.CastSpellByIDAndPosition(51052, ObjectManager.Me.Position);
                return;
            }
        }

        if (Chains_of_Ice.IsSpellUsable && Chains_of_Ice.KnownSpell && Chains_of_Ice.IsDistanceGood
            && MySettings.UseChainsofIce && ObjectManager.Target.GetMove && !Chains_of_Ice.TargetHaveBuff)
        {
            Chains_of_Ice.Launch();
            return;
        }
    }

    private void DPS_Burst()
    {
        if (MySettings.UseTrinket && Trinket_Timer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Trinket_Timer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBerserking)
            Berserking.Launch();
        else if (Blood_Fury.IsSpellUsable && Blood_Fury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBloodFury)
            Blood_Fury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (Blood_Tap.IsSpellUsable && Blood_Tap.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBloodTap)
            Blood_Tap.Launch();
        else if (Engineering_Timer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                && MySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            Engineering_Timer = new Timer(1000*60);
        }
        else if (Blood_Tap.IsSpellUsable && Blood_Tap.KnownSpell && ObjectManager.Target.GetDistance < 30
            && MySettings.UseBloodTap)
        {
            Blood_Tap.Launch();
            Thread.Sleep(200);
        }
        else
        {
            if (Pillar_of_Frost.IsSpellUsable && Pillar_of_Frost.KnownSpell && ObjectManager.Target.GetDistance < 30 
                && MySettings.UsePillarofFrost)
            {
                Pillar_of_Frost.Launch();
                return;
            }
        }
    }

    private void DPS_Cycle()
    {
        if (Death_Coil.IsSpellUsable && Death_Coil.KnownSpell && Lichborne.HaveBuff && ObjectManager.Me.HealthPercent < 85)
        {
            Lua.RunMacroText("/target Player");
            Death_Coil.Launch();
            return;
        }
        else if (Unholy_Blight.IsSpellUsable && Unholy_Blight.KnownSpell && ObjectManager.Target.GetDistance < 9
                 && MySettings.UseUnholyBlight)
        {
            Unholy_Blight.Launch();
            Blood_Plague_Timer = new Timer(1000*27);
            Frost_Fever_Timer = new Timer(1000*27);
            return;
        }
        else if (Outbreak.IsSpellUsable && Outbreak.KnownSpell && Outbreak.IsDistanceGood 
                 && (Blood_Plague_Timer.IsReady || Frost_Fever_Timer.IsReady || !Blood_Plague.TargetHaveBuff || !Frost_Fever.TargetHaveBuff)
                 && MySettings.UseOutbreak)
        {
            Outbreak.Launch();
            Blood_Plague_Timer = new Timer(1000*27);
            Frost_Fever_Timer = new Timer(1000*27);
            return;
        }
        else if (Blood_Boil.IsSpellUsable && Blood_Boil.KnownSpell && ObjectManager.Target.GetDistance < 9
                 && Roiling_Blood.KnownSpell && ((Blood_Plague_Timer.IsReady && Blood_Plague.TargetHaveBuff) 
                 || (Frost_Fever_Timer.IsReady && Frost_Fever.TargetHaveBuff))
                 && MySettings.UseBloodBoil)
        {
            Blood_Boil.Launch();
            Blood_Plague_Timer = new Timer(1000*27);
            Frost_Fever_Timer = new Timer(1000*27);
            return;
        }
        else if (Plague_Strike.IsSpellUsable && Plague_Strike.KnownSpell && Plague_Strike.IsDistanceGood 
                 && !Outbreak.IsSpellUsable && !Unholy_Blight.IsSpellUsable
                 && MySettings.UsePlagueStrike && (Blood_Plague_Timer.IsReady || !Blood_Plague.TargetHaveBuff))
        {
            Plague_Strike.Launch();
            Blood_Plague_Timer = new Timer(1000*27);
            return;
        }
        if (Howling_Blast.IsSpellUsable && Howling_Blast.KnownSpell && Howling_Blast.IsDistanceGood
                 && !Outbreak.IsSpellUsable && !Unholy_Blight.IsSpellUsable
                 && MySettings.UseHowlingBlast && (Frost_Fever_Timer.IsReady || !Frost_Fever.TargetHaveBuff))
        {
            Howling_Blast.Launch();
            Frost_Fever_Timer = new Timer(1000*27);
            return;
        }
        else if (Icy_Touch.IsSpellUsable && Icy_Touch.KnownSpell && Icy_Touch.IsDistanceGood
                 && !Outbreak.IsSpellUsable && !Unholy_Blight.IsSpellUsable && !MySettings.UseHowlingBlast
                 && MySettings.UseIcyTouch && (Frost_Fever_Timer.IsReady || !Frost_Fever.TargetHaveBuff))
        {
            Icy_Touch.Launch();
            Frost_Fever_Timer = new Timer(1000*27);
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 2 && Pestilence.IsSpellUsable && Pestilence.IsDistanceGood
                 && Pestilence.KnownSpell && MySettings.UsePestilence && !Roiling_Blood.KnownSpell)
        {
            Pestilence.Launch();
            return;
        }
        else if (Freezing_Fog.HaveBuff && Howling_Blast.KnownSpell && Howling_Blast.IsDistanceGood
                 && MySettings.UseHowlingBlast)
        {
            Howling_Blast.Launch();
            Frost_Fever_Timer = new Timer(1000*27);
            return;
        }
        else if (Death_and_Decay.IsSpellUsable && Death_and_Decay.KnownSpell && Death_and_Decay.IsDistanceGood
            && MySettings.UseDeathandDecay && ObjectManager.GetNumberAttackPlayer() > 2)
        {
            SpellManager.CastSpellByIDAndPosition(43265, ObjectManager.Target.Position);
            return;
        }
        else if (Army_of_the_Dead.IsSpellUsable && Army_of_the_Dead.KnownSpell
                 && MySettings.UseArmyoftheDead && ObjectManager.GetNumberAttackPlayer() > 4)
        {
            Army_of_the_Dead.Launch();
            Thread.Sleep(4000);
            return;
        }
        // Blizzard API Calls for Frost Strike using Blood Strike Function
        else if (Blood_Strike.IsSpellUsable && Blood_Strike.KnownSpell && Blood_Strike.IsDistanceGood
            && MySettings.UseFrostStrike && ObjectManager.Me.RunicPowerPercentage >= 90)
        {
            Blood_Strike.Launch();
            return;
        }
        else
        {
            if (Soul_Reaper.IsSpellUsable && Soul_Reaper.KnownSpell && Soul_Reaper.IsDistanceGood
                 && ObjectManager.Target.HealthPercent < 35 && ObjectManager.Me.HealthPercent > MySettings.UseDeathStrikeAtPercentage
                 && MySettings.UseSoulReaper)
            {
                Soul_Reaper.Launch();
                return;
            }
        }

        if (MySettings.UseDuelWield)
        {
            if (Blood_Strike.IsSpellUsable && Blood_Strike.KnownSpell && Blood_Strike.IsDistanceGood
                && MySettings.UseFrostStrike && ObjectManager.Me.HaveBuff(51124))
            {
                if (((Lichborne.KnownSpell && MySettings.UseLichborne) || (Conversion.KnownSpell && MySettings.UseConversion))
                    && ObjectManager.Me.HealthPercent < 80)
                    return;
                else
                {
                    Blood_Strike.Launch();
                    return;
                }
            }

            else
            {
                if (Obliterate.IsSpellUsable && Obliterate.KnownSpell && Obliterate.IsDistanceGood
                    && MySettings.UseObliterate && ObjectManager.Me.HaveBuff(51124))
                {
                    if (Death_Strike.IsSpellUsable && Death_Strike.KnownSpell && Death_Strike.IsDistanceGood
                        && MySettings.UseDeathStrike && ObjectManager.Me.HealthPercent <= MySettings.UseDeathStrikeAtPercentage)
                    {
                        Death_Strike.Launch();
                        return;
                    }
                    Obliterate.Launch();
                    return;
                }
            }
        }
        else
        {
            if (MySettings.UseTwoHander)
            {
                if (Obliterate.IsSpellUsable && Obliterate.KnownSpell && Obliterate.IsDistanceGood
                    && MySettings.UseObliterate && ObjectManager.Me.HaveBuff(51124))
                {
                    if (Death_Strike.IsSpellUsable && Death_Strike.KnownSpell && Death_Strike.IsDistanceGood
                        && MySettings.UseDeathStrike && ObjectManager.Me.HealthPercent <= MySettings.UseDeathStrikeAtPercentage)
                    {
                        Death_Strike.Launch();
                        return;
                    }
                    Obliterate.Launch();
                    return;
                }

                else
                {
                    if (Blood_Strike.IsSpellUsable && Blood_Strike.KnownSpell && Blood_Strike.IsDistanceGood
                        && MySettings.UseFrostStrike && ObjectManager.Me.HaveBuff(51124))
                    {
                        if (((Lichborne.KnownSpell && MySettings.UseLichborne) || (Conversion.KnownSpell && MySettings.UseConversion))
                            && ObjectManager.Me.HealthPercent < 80)
                            return;
                        else
                        {
                            Blood_Strike.Launch();
                            return;
                        }
                    }
                }
            }
        }

        if (Obliterate.IsSpellUsable && Obliterate.KnownSpell && Obliterate.IsDistanceGood
            && MySettings.UseObliterate)
        {
            if (Death_Strike.IsSpellUsable && Death_Strike.KnownSpell && Death_Strike.IsDistanceGood
                && MySettings.UseDeathStrike && ObjectManager.Me.HealthPercent <= MySettings.UseDeathStrikeAtPercentage)
            {
                Death_Strike.Launch();
                return;
            }
            Obliterate.Launch();
            return;
        }
        else if (Blood_Strike.KnownSpell && Blood_Strike.IsSpellUsable && Blood_Strike.IsDistanceGood
                 && MySettings.UseFrostStrike)
        {
            if (((Lichborne.KnownSpell && MySettings.UseLichborne) || (Conversion.KnownSpell && MySettings.UseConversion))
                && ObjectManager.Me.HealthPercent < 80)
                return;
            else
            {
                Blood_Strike.Launch();
                return;
            }
        }
        else if (Horn_of_Winter.IsSpellUsable && Horn_of_Winter.KnownSpell && ObjectManager.Me.RunicPowerPercentage < 90
                 && MySettings.UseHornofWinter && Frost_Fever.TargetHaveBuff && Plague_Strike.TargetHaveBuff)
        {
            Horn_of_Winter.Launch();
            return;
        }
        else if (Empower_Rune_Weapon.IsSpellUsable && Empower_Rune_Weapon.KnownSpell
                 && MySettings.UseEmpowerRuneWeapon)
        {
            Empower_Rune_Weapon.Launch();
            return;
        }
        else
        {
            if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell
                && MySettings.UseArcaneTorrentForResource)
            {
                Arcane_Torrent.Launch();
                return;
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: DeathknightFrostSettings

    [Serializable]
    public class DeathknightFrostSettings : Settings
    {
        public int UseAntiMagicShellAtPercentage = 100;
        public int UseAntiMagicZoneAtPercentage = 100;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public int UseArcaneTorrentForResourceAtPercentage = 100;
        public int UseAsphyxiateAtPercentage = 90;
        public int UseConversionAtPercentage = 45;
        public int UseDeathPactAtPercentage = 55;
        public int UseDeathSiphonAtPercentage = 80;
        public int UseDeathStrikeAtPercentage = 80;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public int UseIceboundFortitudeAtPercentage = 80;
        public int UseLichborneAtPercentage = 45;
        public int UseMindFreezeAtPercentage = 100;
        public int UseRemorselessWinterAtPercentage = 70;
        public int UseStoneformAtPercentage = 80;
        public int UseStrangulateAtPercentage = 100;
        public int UseWarStompAtPercentage = 80;
        public bool UseAlchFlask = true;
        public bool UseAntiMagicShell = true;
        public bool UseAntiMagicZone = true;
        public bool UseArcaneTorrentForDecast = true;
        public bool UseArcaneTorrentForResource = true;
        public bool UseArmyoftheDead = true;
        public bool UseAsphyxiate = true;
        public bool UseBerserking = true;
        public bool UseBloodBoil = true;
        public bool UseBloodFury = true;
        public bool UseBloodPresence = true;
        public bool UseBloodTap = true;
        public bool UseChainsofIce = false;
        public bool UseConversion = true;
        public bool UseDeathCoil = true;
        public bool UseDeathGrip = true;
        public bool UseDeathPact = true;
        public bool UseDeathSiphon = true;
        public bool UseDeathStrike = true;
        public bool UseDeathandDecay = true;
        public bool UseDeathsAdvance = true;
        public bool UseDuelWield = false;
        public bool UseEmpowerRuneWeapon = true;
        public bool UseEngGlove = true;
        public bool UseFrostPresence = true;
        public bool UseFrostStrike = true;
        public bool UseGiftoftheNaaru = true;
        public bool UseHornofWinter = true;
        public bool UseHowlingBlast = true;
        public bool UseIceboundFortitude = true;
        public bool UseIcyTouch = true;
        public bool UseLichborne = true;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMindFreeze = true;
        public bool UseObliterate = true;
        public bool UseOutbreak = true;
        public bool UsePathofFrost = true;
        public bool UsePestilence = true;
        public bool UsePillarofFrost = true;
        public bool UsePlagueStrike = true;
        public bool UseRaiseDead = true;
        public bool UseRemorselessWinter = true;
        public bool UseSoulReaper = true;
        public bool UseStoneform = true;
        public bool UseStrangulate = true;
        public bool UseTrinket = true;
        public bool UseTwoHander = true;
        public bool UseUnholyBlight = true;
        public bool UseUnholyPresence = true;
        public bool UseWarStomp = true;

        public DeathknightFrostSettings()
        {
            ConfigWinForm(new Point(500, 400), "Deathknight Frost Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrent", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials", "AtPercentage");
            /* Deathknight Presence & Buffs */
            AddControlInWinForm("Use Frost Presence", "UseFrostPresence", "Deathknight Presence & Buffs");
            AddControlInWinForm("Use Blood Presence", "UseBloodPresence", "Deathknight Presence & Buffs");
            AddControlInWinForm("Use Horn of Winter", "UseHornofWinter", "Deathknight Presence & Buffs");
            AddControlInWinForm("Use Path of Frost", "UsePathofFrost", "Deathknight Presence & Buffs");
            AddControlInWinForm("Use Unholy Presence", "UseUnholyPresence", "Deathknight Presence & Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Blood Boil", "UseBloodBoil", "Offensive Spell");
            AddControlInWinForm("Use Dark Transformation", "UseDarkTransformation", "Offensive Spell");
            AddControlInWinForm("Use Death Coil", "UseDeathCoil", "Offensive Spell");
            AddControlInWinForm("Use Death and Decay", "UseDeathandDecay", "Offensive Spell");
            AddControlInWinForm("Use Frost Strike", "UseFrostStrike", "Offensive Spell");
            AddControlInWinForm("Use Howling Blast", "UseHowlingBlast", "Offensive Spell");
            AddControlInWinForm("Use Icy Touch", "UseIcyTouch", "Offensive Spell");
            AddControlInWinForm("Use Plague Strike", "UsePlagueStrike", "Offensive Spell");
            AddControlInWinForm("Use Obliterate", "UseObliterate", "Offensive Spell");
            AddControlInWinForm("Use Soul Reaper", "UseSoulReaper", "Offensive Spell");
            AddControlInWinForm("Use Unholy Blight", "UseUnholyBlight", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Blood Tap", "UseBloodTap", "Offensive Cooldown");
            AddControlInWinForm("Use Death Grip", "UseDeathGrip", "Offensive Cooldown");
            AddControlInWinForm("Use Empower Rune Weapon", "UseEmpowerRuneWeapon", "Offensive Cooldown");
            AddControlInWinForm("Use Outbreak", "UseOutbreak", "Offensive Cooldown");
            AddControlInWinForm("Use Pestilence", "UsePestilence", "Offensive Cooldown");
            AddControlInWinForm("Use Pillar of Frost", "UsePillarofFrost", "Offensive Cooldown");
            AddControlInWinForm("Use Raise Dead", "UseRaiseDead", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Anti-Magic Shell", "UseAntiMagicShell", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Anti-Magic Zone", "UseAntiMagicZone", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Army of the Dead", "UseArmyoftheDead", "Defensive Cooldown");
            AddControlInWinForm("Use Asphyxiate", "UseAsphyxiate", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Chains of Ice", "UseChainsofIce", "Defensive Cooldown");
            AddControlInWinForm("Use Death's Advance", "UseDeathsAdvance", "Defensive Cooldown");
            AddControlInWinForm("Use Icebound Fortitude", "UseIceboundFortitude", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Mind Freeze", "UseMindFreeze", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Remorseless Winter", "UseRemorseless Winter", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Strangulate", "UseStrangulate", "Defensive Cooldown", "AtPercentage");
            /* Healing Spell */
            AddControlInWinForm("Use Conversion", "UseConversion", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Death Pact", "UseDeathPact", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Death Siphon", "UseDeathSiphon", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Death Strike", "UseDeathStrike", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Lichborne", "UseLichborne", "Healing Spell", "AtPercentage");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket", "UseTrinket", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Use Duel Wield", "UseDuelWield", "Game Settings");
            AddControlInWinForm("Use Two Hander", "UseTwoHander", "Game Settings");
        }

        public static DeathknightFrostSettings CurrentSetting { get; set; }

        public static DeathknightFrostSettings GetSettings()
        {
            string CurrentSettingsFile = Application.StartupPath + "\\CustomClasses\\Settings\\Deathknight_Frost.xml";
            if (File.Exists(CurrentSettingsFile))
            {
                return
                    CurrentSetting = Load<DeathknightFrostSettings>(CurrentSettingsFile);
            }
            else
            {
                return new DeathknightFrostSettings();
            }
        }
    }

    #endregion
}

#endregion

#region Mage

public class Mage_Arcane
{
    private readonly MageArcaneSettings MySettings = MageArcaneSettings.GetSettings();
    private readonly string MoveBackward = nManager.Wow.Helpers.Keybindings.GetKeyByAction(nManager.Wow.Enums.Keybindings.MOVEBACKWARD);

    #region General Timers & Variables

    private Timer AlchFlask_Timer = new Timer(0);
    private Timer Engineering_Timer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer Steady_Focus_Timer = new Timer(0);
    private Timer Trinket_Timer = new Timer(0);
    public int LC = 0;

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell Arcane_Torrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell Blood_Fury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell Gift_of_the_Naaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell War_Stomp = new Spell("War Stomp");

    #endregion

    #region Mage Buffs

    private readonly Spell Arcane_Brilliance = new Spell("Arcane Brilliance");
    private readonly Spell Blazing_Speed = new Spell("Blazing Speed");
    private readonly Spell Frost_Armor = new Spell("Frost Armor");
    private readonly Spell Ice_Floes = new Spell("Ice Floes");
    private readonly Spell Mage_Armor = new Spell("Mage Armor");
    private readonly Spell Molten_Armor = new Spell("Molten Armor");

    #endregion

    #region Offensive Spell

    private readonly Spell Arcane_Barrage = new Spell("Arcane Barrage");
    private readonly Spell Arcane_Blast = new Spell("Arcane Blast");
    private readonly Spell Arcane_Explosion = new Spell("Arcane Explosion");
    private readonly Spell Arcane_Missiles = new Spell("Arcane Missiles");
    private readonly Spell Flamestrike = new Spell("Flamestrike");
    private readonly Spell Scorch = new Spell("Scorch");
    private Timer Flamestrike_Timer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell Alter_Time = new Spell("Alter Time");
    private readonly Spell Arcane_Power = new Spell("Arcane Power");
    private readonly Spell Frozen_Orb = new Spell("Frozen Orb");
    private readonly Spell Mage_Bomb = new Spell("Mage Bomb");
    private readonly Spell Mirror_Image = new Spell("Mirror Image");
    private readonly Spell Presence_of_Mind = new Spell("Presence of Mind");
    private readonly Spell Time_Warp = new Spell("Time Warp");

    #endregion

    #region Defensive Cooldown

    private readonly Spell Blink = new Spell("Blink");
    private readonly Spell Cold_Snap = new Spell("Cold Snap");
    private readonly Spell Cone_of_Cold = new Spell("Cone of Cold");
    private readonly Spell Counterspell = new Spell("Counterspell");
    private readonly Spell Deep_Freeze = new Spell("Deep Freeze");
    private readonly Spell Frostjaw = new Spell("Frostjaw");
    private readonly Spell Frost_Nova = new Spell("Frost Nova");
    private readonly Spell Ice_Barrier = new Spell("Ice Barrier");
    private readonly Spell Ice_Block = new Spell("Ice Block");
    private readonly Spell Ice_Ward = new Spell("Ice Ward");
    private readonly Spell Incanters_Ward = new Spell("Incanter's Ward");
    private readonly Spell Invisibility = new Spell("Invisibility");
    private readonly Spell Ring_of_Frost = new Spell("Ring of Frost");
    private readonly Spell Slow = new Spell("Slow");
    private readonly Spell Temporal_Shield = new Spell("Temporal Shield");

    #endregion

    #region Healing Spell

    private readonly Spell Conjure_Mana_Gem = new Spell("Conjure Mana Gem");
    private readonly Spell Conjure_Refreshment = new Spell("Conjure Refreshment");
    private readonly Spell Evocation = new Spell("Evocation");

    #endregion

    public Mage_Arcane()
    {
        Main.range = 30.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (Arcane_Barrage.IsDistanceGood || Scorch.IsDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && MySettings.UseLowCombat)
                            {
                                LC = 1;
                                LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(250);
        }
    }

    private void Pull()
    {
        if (Scorch.IsSpellUsable && Scorch.KnownSpell && Scorch.IsDistanceGood 
            && MySettings.UseScorch)
            Scorch.Launch();
        else
        {
            if (Arcane_Barrage.IsSpellUsable && Arcane_Barrage.KnownSpell && Arcane_Barrage.IsDistanceGood
                && MySettings.UseArcaneBarrage)
                Arcane_Barrage.Launch();
        }
    }

    private void LowCombat()
    {
        Buff();
        AvoidMelee();
        Defense_Cycle();
        Heal();

        if (Arcane_Barrage.IsDistanceGood && Arcane_Barrage.KnownSpell && Arcane_Barrage.IsSpellUsable
            && MySettings.UseArcaneBarrage)
        {
            Arcane_Barrage.Launch();
            return;
        }
        else
        {
            if (Arcane_Blast.KnownSpell && Arcane_Blast.IsSpellUsable && Arcane_Blast.IsDistanceGood
                && MySettings.UseArcaneBlast)
            {
                Arcane_Blast.Launch();
                return;
            }
        }

        if (Arcane_Explosion.KnownSpell && Arcane_Explosion.IsSpellUsable && Arcane_Explosion.IsDistanceGood
            && MySettings.UseArcaneExplosion)
        {
            Arcane_Explosion.Launch();
            return;
        }
    }

    private void Combat()
    {
        Buff();
        AvoidMelee();
        if (OnCD.IsReady)
            Defense_Cycle();
        Heal();
        Decast();
        DPS_Burst();
        DPS_Cycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (Ice_Block.KnownSpell && ObjectManager.Me.HaveBuff(87023) && !ObjectManager.Me.HaveBuff(41425)
            && MySettings.UseIceBlock)
        {
            if (Cold_Snap.IsSpellUsable && Cold_Snap.KnownSpell && !Ice_Block.IsSpellUsable
                && MySettings.UseColdSnap)
            {
                Cold_Snap.Launch();
                Thread.Sleep(400);
            }

            if (Ice_Block.IsSpellUsable)
            {
                Ice_Block.Launch();
                OnCD = new Timer(1000*10);
                return;
            }
        }

        if (Arcane_Brilliance.IsSpellUsable && Arcane_Brilliance.KnownSpell && !Arcane_Brilliance.HaveBuff
            && MySettings.UseArcaneBrilliance && !ObjectManager.Me.HaveBuff(61316))
        {
            Arcane_Brilliance.Launch();
            return;
        }
        else if (Mage_Armor.IsSpellUsable && Mage_Armor.KnownSpell && !Mage_Armor.HaveBuff
                 && MySettings.UseMageArmor)
        {
            Mage_Armor.Launch();
            return;
        }
        else if (Frost_Armor.IsSpellUsable && Frost_Armor.KnownSpell && !Frost_Armor.HaveBuff
                 && MySettings.UseFrostArmor && !MySettings.UseMageArmor)
        {
            Frost_Armor.Launch();
            return;
        }
        else if (Molten_Armor.IsSpellUsable && Molten_Armor.KnownSpell && !Molten_Armor.HaveBuff
                 && MySettings.UseMoltenArmor && !MySettings.UseFrostArmor && !MySettings.UseMageArmor)
        {
            Molten_Armor.Launch();
            return;
        }
        else if (Ice_Floes.IsSpellUsable && Ice_Floes.KnownSpell && ObjectManager.GetNumberAttackPlayer() > 0
                 && MySettings.UseIceFloes && ObjectManager.Me.GetMove)
        {
            Ice_Floes.Launch();
            return;
        }
        else
        {
            if (Blazing_Speed.IsSpellUsable && Blazing_Speed.KnownSpell && ObjectManager.GetNumberAttackPlayer() == 0
                && MySettings.UseBlazingSpeed && ObjectManager.Me.GetMove)
            {
                Blazing_Speed.Launch();
                return;
            }
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            Keyboard.DownKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
            while (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
                Thread.Sleep(300);
            Keyboard.UpKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
        }
    }

    private void Defense_Cycle()
    {
        if (Incanters_Ward.IsSpellUsable && Incanters_Ward.KnownSpell && ObjectManager.Me.HealthPercent <= MySettings.UseIncantersWardAtPercentage
            && MySettings.UseIncantersWard && !Incanters_Ward.HaveBuff && ObjectManager.GetNumberAttackPlayer() > 0)
        {
            Incanters_Ward.Launch();
            return;
        }

        if (Ring_of_Frost.IsSpellUsable && Ring_of_Frost.KnownSpell && ObjectManager.GetNumberAttackPlayer() > 2
            && MySettings.UseRingofFrost && ObjectManager.Target.GetDistance < 10)
        {
            SpellManager.CastSpellByIDAndPosition(113724, ObjectManager.Target.Position);
            return;
        }
        else if (Frost_Nova.KnownSpell && ObjectManager.Target.GetDistance < 12 
            && MySettings.UseFrostNova && ObjectManager.Me.HealthPercent <= MySettings.UseFrostNovaAtPercentage)
        {
            if (Cold_Snap.IsSpellUsable && Cold_Snap.KnownSpell && !Frost_Nova.IsSpellUsable
                && MySettings.UseColdSnap)
            {
                Cold_Snap.Launch();
                Thread.Sleep(200);
            }

            if (Frost_Nova.IsSpellUsable)
            {
                Frost_Nova.Launch();
                return;
            }
        }
        else if (Ice_Ward.IsSpellUsable && Ice_Ward.KnownSpell && ObjectManager.Target.GetDistance < 10 && !Frost_Nova.IsSpellUsable
                 && MySettings.UseIceWard && ObjectManager.Me.HealthPercent <= MySettings.UseIceWardAtPercentage)
        {
            Ice_Ward.Launch();
            return;
        }
        else if (Cone_of_Cold.IsSpellUsable && Cone_of_Cold.KnownSpell && ObjectManager.Target.GetDistance < 10
                 && ObjectManager.Me.HealthPercent <= MySettings.UseConeofColdAtPercentage && !Frost_Nova.IsSpellUsable
                 && MySettings.UseConeofCold && !Ice_Ward.IsSpellUsable)
        {
            Cone_of_Cold.Launch();
            return;
        }
        else if (Blink.IsSpellUsable && Blink.KnownSpell && ObjectManager.Target.GetDistance < 11
                 && (Frost_Nova.TargetHaveBuff || Cone_of_Cold.TargetHaveBuff || Ice_Ward.TargetHaveBuff)
                 && MySettings.UseBlink)
        {
            Blink.Launch();
            return;
        }
        else if (Deep_Freeze.IsSpellUsable && Deep_Freeze.KnownSpell && Deep_Freeze.IsDistanceGood
                 && MySettings.UseDeepFreeze && ObjectManager.Me.HealthPercent <= MySettings.UseDeepFreezeAtPercentage)
        {
            Deep_Freeze.Launch();
            OnCD = new Timer(1000*5);
            return;
        }
        else if (Ice_Barrier.IsSpellUsable && Ice_Barrier.KnownSpell && ObjectManager.Me.HealthPercent <= MySettings.UseIceBarrierAtPercentage
                 && MySettings.UseIceBarrier && !Ice_Barrier.HaveBuff && !Incanters_Ward.HaveBuff)
        {
            Ice_Barrier.Launch();
            return;
        }
        else if (Temporal_Shield.IsSpellUsable && Temporal_Shield.KnownSpell && ObjectManager.Me.HealthPercent <= MySettings.UseTemporalShieldAtPercentage
                 && MySettings.UseTemporalShield && !Temporal_Shield.HaveBuff && ObjectManager.GetNumberAttackPlayer() > 0)
        {
            Temporal_Shield.Launch();
            OnCD = new Timer(1000*4);
            return;
        }
        else if (Frostjaw.KnownSpell && Frostjaw.IsSpellUsable && Frostjaw.IsDistanceGood
                 && MySettings.UseFrostjaw && ObjectManager.Me.HealthPercent <= MySettings.UseFrostjawAtPercentage)
        {
            Frostjaw.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (War_Stomp.IsSpellUsable && War_Stomp.KnownSpell && War_Stomp.IsDistanceGood
                 && MySettings.UseWarStomp && ObjectManager.Me.HealthPercent <= MySettings.UseWarStompAtPercentage)
        {
            War_Stomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else if (Stoneform.IsSpellUsable && Stoneform.KnownSpell && ObjectManager.Me.HealthPercent <= MySettings.UseStoneformAtPercentage
                 && MySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else
        {
            if (Invisibility.KnownSpell && Invisibility.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 3 
                && MySettings.UseInvisibility)
            {
                Invisibility.Launch();
                Thread.Sleep(5000);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell && ObjectManager.Me.HealthPercent <= MySettings.UseArcaneTorrentForResourceAtPercentage
                && MySettings.UseArcaneTorrentForResource)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else if (Gift_of_the_Naaru.IsSpellUsable && Gift_of_the_Naaru.KnownSpell && ObjectManager.Me.HealthPercent <= MySettings.UseGiftoftheNaaruAtPercentage 
                 && MySettings.UseGiftoftheNaaru)
        {
            Gift_of_the_Naaru.Launch();
            return;
        }
        else if (ObjectManager.Me.ManaPercentage <= MySettings.UseConjureManaGemAtPercentage && ItemsManager.GetItemCountByIdLUA(36799) > 0
                 && MySettings.UseConjureManaGem)
        {
            Logging.WriteFight("Use Mana Gem.");
            Lua.RunMacroText("/use item:36799");
            return;
        }
        else if (Evocation.IsSpellUsable && ObjectManager.Me.HealthPercent <= MySettings.UseEvocationForHPAtPercentage
                 && !MySettings.UseRuneofPowerTalent && MySettings.UseEvocationGlyph
                 && MySettings.UseEvocationForHP && !MySettings.UseInvocationTalent)
        {
            Evocation.Launch();
            return;
        }
        else if (Evocation.IsSpellUsable && ObjectManager.Me.ManaPercentage <= MySettings.UseEvocationForManaAtPercentage
                 && MySettings.UseEvocationForMana && !MySettings.UseInvocationTalent && !MySettings.UseRuneofPowerTalent
                 && ObjectManager.GetNumberAttackPlayer() == 0)
        {
            Evocation.Launch();
            return;
        }
        else if (Conjure_Mana_Gem.KnownSpell && ItemsManager.GetItemCountByIdLUA(36799) == 0
                 && MySettings.UseConjureManaGem)
        {
            Conjure_Mana_Gem.Launch();
            return;
        }
        else
        {
            if (Conjure_Refreshment.KnownSpell && ItemsManager.GetItemCountByIdLUA(80610) == 0 // 90
                && Conjure_Refreshment.KnownSpell && ItemsManager.GetItemCountByIdLUA(65499) == 0 // 85-89
                && Conjure_Refreshment.KnownSpell && ItemsManager.GetItemCountByIdLUA(43523) == 0 // 84-80
                && Conjure_Refreshment.KnownSpell && ItemsManager.GetItemCountByIdLUA(43518) == 0 // 79-74
                && Conjure_Refreshment.KnownSpell && ItemsManager.GetItemCountByIdLUA(65517) == 0 // 73-64
                && Conjure_Refreshment.KnownSpell && ItemsManager.GetItemCountByIdLUA(65516) == 0 // 63-54
                && Conjure_Refreshment.KnownSpell && ItemsManager.GetItemCountByIdLUA(65515) == 0 // 53-44
                && Conjure_Refreshment.KnownSpell && ItemsManager.GetItemCountByIdLUA(65500) == 0 // 43-38
                && MySettings.UseConjureRefreshment)
            {
                Conjure_Refreshment.Launch();
                return;
            }
        }
    }

    private void Decast()
    {
        if (Counterspell.KnownSpell && Counterspell.IsSpellUsable && Counterspell.IsDistanceGood
            && MySettings.UseCounterspell && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
            && ObjectManager.Me.HealthPercent <= MySettings.UseCounterspellAtPercentage)
        {
            Counterspell.Launch();
            return;
        }
        else if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell && ObjectManager.Target.GetDistance < 8
                 && ObjectManager.Me.HealthPercent <= MySettings.UseArcaneTorrentForDecastAtPercentage
                 && MySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else
        {
            if (Frostjaw.KnownSpell && Frostjaw.IsSpellUsable && Frostjaw.IsDistanceGood
                 && MySettings.UseFrostjaw && ObjectManager.Me.HealthPercent <= MySettings.UseFrostjawAtPercentage)
            {
                Frostjaw.Launch();
                OnCD = new Timer(1000*8);
                return;
            }
        }

        if (Slow.IsSpellUsable && Slow.KnownSpell && Slow.IsDistanceGood
            && MySettings.UseSlow && ObjectManager.Target.GetMove && !Slow.TargetHaveBuff)
        {
            Slow.Launch();
            return;
        }
    }

    private void DPS_Burst()
    {
        if (Alter_Time.IsSpellUsable && Alter_Time.KnownSpell && ObjectManager.Target.GetDistance < 30
            && MySettings.UseAlterTime && ObjectManager.Target.InCombat)
            Alter_Time.Launch();

        if (MySettings.UseTrinket && Trinket_Timer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Trinket_Timer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBerserking)
            Berserking.Launch();
        else if (Blood_Fury.IsSpellUsable && Blood_Fury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBloodFury)
            Blood_Fury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (Engineering_Timer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                && MySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            Engineering_Timer = new Timer(1000*60);
        }
        else if (Mage_Bomb.IsSpellUsable && Mage_Bomb.KnownSpell && Mage_Bomb.IsDistanceGood
                 && MySettings.UseTierFive)
        {
            Mage_Bomb.Launch();
            return;
        }
        else if (Evocation.IsSpellUsable && Evocation.KnownSpell && ObjectManager.Target.GetDistance < 40
                 && MySettings.UseInvocationTalent && !ObjectManager.Me.HaveBuff(114003))
        {
            Evocation.Launch();
            return;
        }
        else if (Evocation.IsSpellUsable && Evocation.KnownSpell && ObjectManager.Target.GetDistance < 40
                 && MySettings.UseRuneofPowerTalent && !ObjectManager.Me.HaveBuff(116011))
        {
            SpellManager.CastSpellByIDAndPosition(116011, ObjectManager.Target.Position);
            return;
        }
        else if (Arcane_Power.IsSpellUsable && Arcane_Power.KnownSpell && ObjectManager.Target.GetDistance < 40
                 && MySettings.UseArcanePower)
        {
            Arcane_Power.Launch();
            return;
        }
        else if (Mirror_Image.IsSpellUsable && Mirror_Image.KnownSpell && ObjectManager.Target.GetDistance < 40
                 && MySettings.UseMirrorImage)
        {
            Mirror_Image.Launch();
            return;
        }
        else
        {
            if (Time_Warp.IsSpellUsable && Time_Warp.KnownSpell && ObjectManager.Target.GetDistance < 40
                && MySettings.UseTimeWarp && !ObjectManager.Me.HaveBuff(80354))
            {
                Time_Warp.Launch();
                return;
            }
        }
    }

    private void DPS_Cycle()
    {
        if (Flamestrike.IsSpellUsable && Flamestrike.KnownSpell && Flamestrike.IsDistanceGood
            && MySettings.UseFlamestrike && ObjectManager.GetNumberAttackPlayer() > 1 && Flamestrike_Timer.IsReady)
        {
            SpellManager.CastSpellByIDAndPosition(2120, ObjectManager.Target.Position);
            Flamestrike_Timer = new Timer(1000*8);
            return;
        }
        else if (Arcane_Explosion.IsSpellUsable && Arcane_Explosion.KnownSpell && Arcane_Explosion.IsDistanceGood 
                 && MySettings.UseArcaneExplosion && ObjectManager.GetNumberAttackPlayer() > 4)
        {
            Arcane_Explosion.Launch();
            return;
        }
        else if (Arcane_Missiles.IsSpellUsable && Arcane_Missiles.KnownSpell && Arcane_Missiles.IsDistanceGood
                 && MySettings.UseArcaneMissiles)
        {
            Arcane_Missiles.Launch();
            return;
        }
        else if (Arcane_Barrage.IsSpellUsable && Arcane_Barrage.KnownSpell && Arcane_Barrage.IsDistanceGood
                 && MySettings.UseArcaneBarrage && ObjectManager.Me.BuffStack(114664) > 3)
        {
            Arcane_Barrage.Launch();
            return;
        }
        else if (Arcane_Blast.IsSpellUsable && Arcane_Blast.KnownSpell && Arcane_Blast.IsDistanceGood
                 && Presence_of_Mind.KnownSpell && Presence_of_Mind.IsSpellUsable
                 && MySettings.UsePresenceofMind && ObjectManager.Me.BuffStack(114664) < 6)
        {
            Presence_of_Mind.Launch();
            Thread.Sleep(400);
            if (MySettings.UseArcaneBlast)
                Arcane_Blast.Launch();
            return;
        }
        else if (Scorch.IsSpellUsable && Scorch.KnownSpell && Scorch.IsDistanceGood
                 && MySettings.UseScorch && ObjectManager.Me.GetMove && !Ice_Floes.HaveBuff)
        {
            Scorch.Launch();
            return;
        }
        else
        {
            if (Arcane_Blast.IsSpellUsable && Arcane_Blast.KnownSpell && Arcane_Blast.IsDistanceGood
                && MySettings.UseArcaneBlast && ObjectManager.Me.BuffStack(114664) < 6)
            {
                Arcane_Blast.Launch();
                return;
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: MageArcaneSettings

    [Serializable]
    public class MageArcaneSettings : Settings
    {
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public int UseConeofColdAtPercentage = 45;
        public int UseCounterspellAtPercentage = 100;
        public int UseDeepFreezeAtPercentage = 50;
        public int UseEvocationForHPAtPercentage = 40;
        public int UseEvocationForManaAtPercentage = 60;
        public int UseFrostjawAtPercentage = 40;
        public int UseFrostNovaAtPercentage = 50;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public int UseIceBarrierAtPercentage = 95;
        public int UseIceWardAtPercentage = 45;
        public int UseIncantersWardAtPercentage = 95;
        public int UseConjureManaGemAtPercentage = 40;
        public int UseTemporalShieldAtPercentage = 95;
        public int UseStoneformAtPercentage = 80;
        public int UseWarStompAtPercentage = 80;
        public bool UseAlchFlask = true;
        public bool UseAlterTime = true;
        public bool UseArcaneBarrage = true;
        public bool UseArcaneBlast = true;
        public bool UseArcaneBrilliance = true;
        public bool UseArcaneExplosion = true;
        public bool UseArcaneMissiles = true;
        public bool UseArcanePower = true;
        public bool UseArcaneTorrentForDecast = true;
        public bool UseArcaneTorrentForResource = true;
        public bool UseBerserking = true;
        public bool UseBlazingSpeed = true;
        public bool UseBlink = true;
        public bool UseBloodFury = true;
        public bool UseColdSnap = true;
        public bool UseConeofCold = true;
        public bool UseConjureManaGem = true;
        public bool UseConjureRefreshment = true;
        public bool UseCounterspell = true;
        public bool UseDeepFreeze = true;
        public bool UseEngGlove = true;
        public bool UseEvocationForHP = true;
        public bool UseEvocationForMana = true;
        public bool UseEvocationGlyph = false;
        public bool UseFlamestrike = true;
        public bool UseFrostArmor = false;
        public bool UseFrostjaw = true;
        public bool UseFrostNova = true;
        public bool UseGiftoftheNaaru = true;
        public bool UseIceBarrier = true;
        public bool UseIceBlock = true;
        public bool UseIceFloes = true;
        public bool UseIceWard = true;
        public bool UseIncantersWard = true;
        public bool UseInvisibility = true;
        public bool UseInvocationTalent = false;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMageArmor = true;
        public bool UseMirrorImage = true;
        public bool UseMoltenArmor = false;
        public bool UsePresenceofMind = true;
        public bool UseRingofFrost = true;
        public bool UseRuneofPowerTalent = false;
        public bool UseScorch = true;
        public bool UseSlow = false;
        public bool UseStoneform = true;
        public bool UseTemporalShield = true;
        public bool UseTierFive = true;
        public bool UseTimeWarp = true;
        public bool UseTrinket = true;
        public bool UseWarStomp = true;

        public MageArcaneSettings()
        {
            ConfigWinForm(new Point(500, 400), "Mage Arcane Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrent", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials", "AtPercentage");
            /* Mage Buffs */
            AddControlInWinForm("Use Arcane Brilliance", "UseArcaneBrilliance", "Mage Buffs");
            AddControlInWinForm("Use Blazing Speed", "UseBlazingSpeed", "Mage Buffs");
            AddControlInWinForm("Use Frost Armor", "UseFrostArmor", "Mage Buffs");
            AddControlInWinForm("Use Ice Floes", "UseIceFloes", "Mage Buffs");
            AddControlInWinForm("Use Mage Armor", "UseMageArmor", "Mage Buffs");
            AddControlInWinForm("Use Molten Armor", "UseMoltenArmor", "Mage Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Arcane Barrage", "UseArcaneBarrage", "Offensive Spell");
            AddControlInWinForm("Use Arcane Blast", "UseArcaneBlast", "Offensive Spell");
            AddControlInWinForm("Use Arcane Explosion", "UseArcaneExplosion", "Offensive Spell");
            AddControlInWinForm("Use Arcane Missiles", "UseArcaneMissiles", "Offensive Spell");
            AddControlInWinForm("Use Flamestrike", "UseFlamestrike", "Offensive Spell");
            AddControlInWinForm("Use Scorch", "UseScorch", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Alter Time", "UseAlterTime", "Offensive Cooldown");
            AddControlInWinForm("Use Arcane Power", "UseArcanePower", "Offensive Cooldown");
            AddControlInWinForm("Use Mirror Image", "UseMirrorImage", "Offensive Cooldown");
            AddControlInWinForm("Use Presence of Mind", "UsePresenceofMind", "Offensive Cooldown");
            AddControlInWinForm("Use Tier Five Talent", "UseTierFive", "Offensive Cooldown");
            AddControlInWinForm("Use Time Warp", "UseTimeWarp", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Blink", "UseBlink", "Defensive Cooldown");
            AddControlInWinForm("Use Cold Snap", "UseColdSnap", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Cone of Cold", "UseConeofCold", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Counterspell", "UseCounterspell", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Deep Freeze", "UseDeepFreeze", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Frostjaw", "UseFrostjaw", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Frost Nova", "UseFrostNova", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Ice Barrier", "UseIceBarrier", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Ice Block", "UseIceBlock", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Ice Ward", "UseIceWard", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Incanter's Ward", "UseIncantersWard", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Invisibility", "UseInvisibility", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Ring of Frost", "UseRingofFrost", "Defensive Cooldown");
            AddControlInWinForm("Use Slow", "UseSlow", "Defensive Cooldown");
            AddControlInWinForm("Use Temporal Shield", "UseTemporalShield", "Defensive Cooldown", "AtPercentage");
            /* Healing Spell */
            AddControlInWinForm("Use Conjure Mana Gem", "UseConjureManaGem", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Conjure Refreshment", "UseConjureRefreshment", "Healing Spell");
            AddControlInWinForm("Use Evocation to regen Health", "UseEvocationForHP", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Evocation to regen Mana", "UseEvocationForMana", "Healing Spell", "AtPercentage");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket", "UseTrinket", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Use Evocation Glyph", "UseEvocationGlyph", "Game Settings");
            AddControlInWinForm("Use Invocation Talent", "UseInvocationTalent", "Game Settings");
            AddControlInWinForm("Use Rune of Power Talent", "UseRuneofPowerTalent", "Game Settings");
        }

        public static MageArcaneSettings CurrentSetting { get; set; }

        public static MageArcaneSettings GetSettings()
        {
            string CurrentSettingsFile = Application.StartupPath + "\\CustomClasses\\Settings\\Mage_Arcane.xml";
            if (File.Exists(CurrentSettingsFile))
            {
                return
                    CurrentSetting = Load<MageArcaneSettings>(CurrentSettingsFile);
            }
            else
            {
                return new MageArcaneSettings();
            }
        }
    }

    #endregion
}

public class Mage_Frost
{
    private readonly MageFrostSettings MySettings = MageFrostSettings.GetSettings();
    private readonly string MoveBackward = nManager.Wow.Helpers.Keybindings.GetKeyByAction(nManager.Wow.Enums.Keybindings.MOVEBACKWARD);

    #region General Timers & Variables

    private Timer AlchFlask_Timer = new Timer(0);
    private Timer Engineering_Timer = new Timer(0);
    private Timer Freeze_Timer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer Trinket_Timer = new Timer(0);
    public int LC = 0;

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell Arcane_Torrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell Blood_Fury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell Gift_of_the_Naaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell War_Stomp = new Spell("War Stomp");

    #endregion

    #region Mage Buffs

    private readonly Spell Arcane_Brilliance = new Spell("Arcane Brilliance");
    private readonly Spell Blazing_Speed = new Spell("Blazing Speed");
    private readonly Spell Frost_Armor = new Spell("Frost Armor");
    private readonly Spell Ice_Floes = new Spell("Ice Floes");
    private readonly Spell Mage_Armor = new Spell("Mage Armor");
    private readonly Spell Molten_Armor = new Spell("Molten Armor");

    #endregion

    #region Offensive Spell

    private readonly Spell Arcane_Explosion = new Spell("Arcane Explosion");
    private readonly Spell Blizzard = new Spell("Blizzard");
    private readonly Spell Cone_of_Cold = new Spell("Cone of Cold");
    private readonly Spell Fire_Blast = new Spell("Fire Blast");
    private readonly Spell Flamestrike = new Spell("Flamestrike");
    private readonly Spell Frostbolt = new Spell("Frostbolt");
    private readonly Spell Frostfire_Bolt = new Spell("Frostfire Bolt");
    private readonly Spell Ice_Lance = new Spell("Ice Lance");
    private readonly Spell Scorch = new Spell("Scorch");
    private readonly Spell Summon_Water_Elemental = new Spell("Summon Water Elemental");
    private Timer Flamestrike_Timer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell Alter_Time = new Spell("Alter Time");
    private readonly Spell Frozen_Orb = new Spell("Frozen Orb");
    private readonly Spell Icy_Veins = new Spell("Icy Veins");
    private readonly Spell Mage_Bomb = new Spell("Mage Bomb");
    private readonly Spell Mirror_Image = new Spell("Mirror Image");
    private readonly Spell Presence_of_Mind = new Spell("Presence of Mind");
    private readonly Spell Time_Warp = new Spell("Time Warp");

    #endregion

    #region Defensive Cooldown

    private readonly Spell Blink = new Spell("Blink");
    private readonly Spell Cold_Snap = new Spell("Cold Snap");
    private readonly Spell Counterspell = new Spell("Counterspell");
    private readonly Spell Deep_Freeze = new Spell("Deep Freeze");
    private readonly Spell Frostjaw = new Spell("Frostjaw");
    private readonly Spell Frost_Nova = new Spell("Frost Nova");
    private readonly Spell Ice_Barrier = new Spell("Ice Barrier");
    private readonly Spell Ice_Block = new Spell("Ice Block");
    private readonly Spell Ice_Ward = new Spell("Ice Ward");
    private readonly Spell Incanters_Ward = new Spell("Incanter's Ward");
    private readonly Spell Invisibility = new Spell("Invisibility");
    private readonly Spell Ring_of_Frost = new Spell("Ring of Frost");
    private readonly Spell Temporal_Shield = new Spell("Temporal Shield");

    #endregion

    #region Healing Spell

    private readonly Spell Conjure_Mana_Gem = new Spell("Conjure Mana Gem");
    private readonly Spell Conjure_Refreshment = new Spell("Conjure Refreshment");
    private readonly Spell Evocation = new Spell("Evocation");

    #endregion

    public Mage_Frost()
    {
        Main.range = 30.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (Frostbolt.IsDistanceGood || Ice_Lance.IsDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && MySettings.UseLowCombat)
                            {
                                LC = 1;
                                LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void Pull()
    {
        if (ObjectManager.Pet.IsAlive)
        {
            Lua.RunMacroText("/petattack");
            Logging.WriteFight("Launch Pet Attack");
        }

        if (Scorch.IsDistanceGood && Scorch.KnownSpell && Scorch.IsSpellUsable && MySettings.UseScorch)
            Scorch.Launch();
        else
        {
            if (Ice_Lance.IsDistanceGood && Ice_Lance.KnownSpell && Ice_Lance.IsSpellUsable && MySettings.UseIceLance)
                Ice_Lance.Launch();
        }

        if (ObjectManager.Me.Level > 9 && Freeze_Timer.IsReady && MySettings.UseFreeze
            && (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0))
        {
            SpellManager.CastSpellByIDAndPosition(33395, ObjectManager.Target.Position);
            Freeze_Timer = new Timer(1000*25);
            Thread.Sleep(400);
            if (Deep_Freeze.IsSpellUsable && Deep_Freeze.KnownSpell && Deep_Freeze.IsDistanceGood)
            {
                Deep_Freeze.Launch();
                return;
            }
        }
    }

    private void LowCombat()
    {
        Buff();
        AvoidMelee();
        Defense_Cycle();
        Heal();

        if (Ice_Lance.IsDistanceGood && Ice_Lance.KnownSpell && Ice_Lance.IsSpellUsable
            && ObjectManager.Me.HaveBuff(44544) && MySettings.UseIceLance)
        {
            Ice_Lance.Launch();
            return;
        }
        else
        {
            if (Frostbolt.KnownSpell && Frostbolt.IsSpellUsable && Frostbolt.IsDistanceGood
                && MySettings.UseFrostbolt)
            {
                Frostbolt.Launch();
                return;
            }
        }

        if (ObjectManager.Target.HealthPercent > 90)
        {
            if (Arcane_Explosion.KnownSpell && Arcane_Explosion.IsSpellUsable && Arcane_Explosion.IsDistanceGood
                && MySettings.UseArcaneExplosion)
            {
                Arcane_Explosion.Launch();
                return;
            }
        }
    }

    private void Combat()
    {
        Buff();
        AvoidMelee();
        if (OnCD.IsReady)
            Defense_Cycle();
        Heal();
        Decast();
        DPS_Burst();
        DPS_Cycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (Summon_Water_Elemental.IsSpellUsable && Summon_Water_Elemental.KnownSpell
            && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
            && MySettings.UseSummonWaterElemental)
        {
            Logging.WriteFight(" - PET DEAD - ");
            Summon_Water_Elemental.Launch();
            return;
        }

        if (ObjectManager.Me.HaveBuff(87023) && Ice_Block.KnownSpell && MySettings.UseIceBlock
            && !ObjectManager.Me.HaveBuff(41425))
        {
            if (!Ice_Block.IsSpellUsable && Cold_Snap.KnownSpell && Cold_Snap.IsSpellUsable
                && MySettings.UseColdSnap)
            {
                Cold_Snap.Launch();
                Thread.Sleep(400);
            }
            Ice_Block.Launch();
            OnCD = new Timer(1000*10);
            return;
        }

        if (MySettings.UseArcaneBrilliance && Arcane_Brilliance.KnownSpell && Arcane_Brilliance.IsSpellUsable
            && !Arcane_Brilliance.HaveBuff && !ObjectManager.Me.HaveBuff(61316))
        {
            Arcane_Brilliance.Launch();
            return;
        }
        else if (MySettings.UseFrostArmor && Frost_Armor.KnownSpell && Frost_Armor.IsSpellUsable
                 && !Frost_Armor.HaveBuff)
        {
            Frost_Armor.Launch();
            return;
        }
        else if (MySettings.UseMoltenArmor && Molten_Armor.KnownSpell && Molten_Armor.IsSpellUsable
                 && !Molten_Armor.HaveBuff && !MySettings.UseFrostArmor)
        {
            Molten_Armor.Launch();
            return;
        }
        else if (MySettings.UseMageArmor && Mage_Armor.KnownSpell && Mage_Armor.IsSpellUsable
                 && !Mage_Armor.HaveBuff && !MySettings.UseFrostArmor && !MySettings.UseMoltenArmor)
        {
            Mage_Armor.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 0 && Ice_Floes.IsSpellUsable
                 && Ice_Floes.KnownSpell && MySettings.UseIceFloes && ObjectManager.Me.GetMove)
        {
            Ice_Floes.Launch();
            return;
        }
        else
        {
            if (ObjectManager.GetNumberAttackPlayer() == 0 && Blazing_Speed.IsSpellUsable && Blazing_Speed.KnownSpell
                && MySettings.UseBlazingSpeed && ObjectManager.Me.GetMove)
            {
                Blazing_Speed.Launch();
                return;
            }
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            Keyboard.DownKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
            while (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
                Thread.Sleep(300);
            Keyboard.UpKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
        }
    }

    private void Defense_Cycle()
    {
        if (ObjectManager.Me.HealthPercent <= MySettings.UseIncantersWardAtPercentage && Incanters_Ward.IsSpellUsable && Incanters_Ward.KnownSpell
            && MySettings.UseIncantersWard && !Incanters_Ward.HaveBuff && ObjectManager.GetNumberAttackPlayer() > 0)
        {
            Incanters_Ward.Launch();
            return;
        }

        if (Ring_of_Frost.KnownSpell && Ring_of_Frost.IsSpellUsable
            && ObjectManager.GetNumberAttackPlayer() > 2
            && ObjectManager.Target.GetDistance < 10 && MySettings.UseRingofFrost)
        {
            SpellManager.CastSpellByIDAndPosition(113724, ObjectManager.Target.Position);
            return;
        }
        else if (Frost_Nova.KnownSpell && ObjectManager.Target.GetDistance < 12
                 && ObjectManager.Me.HealthPercent <= MySettings.UseFrostNovaAtPercentage && MySettings.UseFrostNova)
        {
            if (!Frost_Nova.IsSpellUsable && Cold_Snap.KnownSpell && Cold_Snap.IsSpellUsable
                && MySettings.UseColdSnap)
            {
                Cold_Snap.Launch();
                Thread.Sleep(200);
            }

            if (Frost_Nova.IsSpellUsable)
            {
                Frost_Nova.Launch();
                return;
            }
        }
        else if (Ice_Ward.KnownSpell && Ice_Ward.IsSpellUsable && ObjectManager.Target.GetDistance < 10
                 && ObjectManager.Me.HealthPercent <= MySettings.UseIceWardAtPercentage && MySettings.UseIceWard && !Frost_Nova.IsSpellUsable)
        {
            Ice_Ward.Launch();
            return;
        }
        else if (Cone_of_Cold.KnownSpell && Cone_of_Cold.IsSpellUsable && ObjectManager.Target.GetDistance < 10
                 && ObjectManager.Me.HealthPercent <= MySettings.UseConeofColdAtPercentage && MySettings.UseConeofCold && !Frost_Nova.IsSpellUsable
                 && !Ice_Ward.IsSpellUsable)
        {
            Cone_of_Cold.Launch();
            return;
        }
        else if (Blink.KnownSpell && Blink.IsSpellUsable && ObjectManager.Target.GetDistance < 11
                 && (Frost_Nova.TargetHaveBuff || Cone_of_Cold.TargetHaveBuff || Ice_Ward.TargetHaveBuff))
        {
            Blink.Launch();
            return;
        }
        else if (Deep_Freeze.KnownSpell && Deep_Freeze.IsSpellUsable && Deep_Freeze.IsDistanceGood
                 && MySettings.UseDeepFreeze && ObjectManager.Me.HealthPercent <= MySettings.UseDeepFreezeAtPercentage)
        {
            Deep_Freeze.Launch();
            OnCD = new Timer(1000*5);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseIceBarrierAtPercentage && Ice_Barrier.IsSpellUsable && Ice_Barrier.KnownSpell
                 && MySettings.UseIceBarrier && !Ice_Barrier.HaveBuff && !Incanters_Ward.HaveBuff)
        {
            Ice_Barrier.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseTemporalShieldAtPercentage && Temporal_Shield.IsSpellUsable && Temporal_Shield.KnownSpell
                 && MySettings.UseTemporalShield && !Temporal_Shield.HaveBuff &&
                 ObjectManager.GetNumberAttackPlayer() > 0)
        {
            Temporal_Shield.Launch();
            OnCD = new Timer(1000*4);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 40 && Frostjaw.KnownSpell && Frostjaw.IsSpellUsable
                 && MySettings.UseFrostjaw && Frostjaw.IsDistanceGood)
        {
            Frostjaw.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseWarStompAtPercentage && War_Stomp.IsSpellUsable && War_Stomp.KnownSpell
                 && MySettings.UseWarStomp)
        {
            War_Stomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable && Stoneform.KnownSpell
                 && MySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else
        {
            if (ObjectManager.GetNumberAttackPlayer() > 3 && Invisibility.KnownSpell && Invisibility.IsSpellUsable
                && MySettings.UseInvisibility)
            {
                Invisibility.Launch();
                Thread.Sleep(5000);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell && ObjectManager.Me.HealthPercent <= MySettings.UseArcaneTorrentForResourceAtPercentage
                && MySettings.UseArcaneTorrentForResource)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseGiftoftheNaaruAtPercentage && Gift_of_the_Naaru.KnownSpell && Gift_of_the_Naaru.IsSpellUsable
                 && MySettings.UseGiftoftheNaaru)
        {
            Gift_of_the_Naaru.Launch();
            return;
        }
        else if (ObjectManager.Me.ManaPercentage < 40 && ItemsManager.GetItemCountByIdLUA(36799) > 0
                 && MySettings.UseConjureManaGem)
        {
            Logging.WriteFight("Use Mana Gem.");
            Lua.RunMacroText("/use item:36799");
            return;
        }
        else if ((ObjectManager.Me.HealthPercent < 40 || ObjectManager.Me.ManaPercentage < 60)
                 && MySettings.UseEvocation && Evocation.IsSpellUsable && !MySettings.UseInvocationTalent
                 && !MySettings.UseRuneofPowerTalent && MySettings.UseEvocationGlyph)
        {
            Evocation.Launch();
            return;
        }
        else if (Conjure_Mana_Gem.KnownSpell && ItemsManager.GetItemCountByIdLUA(36799) == 0
                 && MySettings.UseConjureManaGem)
        {
            Conjure_Mana_Gem.Launch();
            return;
        }
        else
        {
            if (Conjure_Refreshment.KnownSpell && ItemsManager.GetItemCountByIdLUA(80610) == 0 // 90
                && Conjure_Refreshment.KnownSpell && ItemsManager.GetItemCountByIdLUA(65499) == 0 // 85-89
                && Conjure_Refreshment.KnownSpell && ItemsManager.GetItemCountByIdLUA(43523) == 0 // 84-80
                && Conjure_Refreshment.KnownSpell && ItemsManager.GetItemCountByIdLUA(43518) == 0 // 79-74
                && Conjure_Refreshment.KnownSpell && ItemsManager.GetItemCountByIdLUA(65517) == 0 // 73-64
                && Conjure_Refreshment.KnownSpell && ItemsManager.GetItemCountByIdLUA(65516) == 0 // 63-54
                && Conjure_Refreshment.KnownSpell && ItemsManager.GetItemCountByIdLUA(65515) == 0 // 53-44
                && Conjure_Refreshment.KnownSpell && ItemsManager.GetItemCountByIdLUA(65500) == 0 // 43-38
                && MySettings.UseConjureRefreshment)
            {
                Conjure_Refreshment.Launch();
                return;
            }
        }
    }

    private void Decast()
    {
        if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
            && Counterspell.KnownSpell && Counterspell.IsSpellUsable && Counterspell.IsDistanceGood)
        {
            Counterspell.Launch();
            return;
        }
        else if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell && ObjectManager.Target.GetDistance < 8
            && ObjectManager.Me.HealthPercent <= MySettings.UseArcaneTorrentForDecastAtPercentage
            && MySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && Frostjaw.KnownSpell && Frostjaw.IsSpellUsable && Frostjaw.IsDistanceGood)
            {
                Frostjaw.Launch();
                OnCD = new Timer(1000*8);
                return;
            }
        }
    }

    private void DPS_Burst()
    {
        if (Alter_Time.IsSpellUsable && Alter_Time.KnownSpell && MySettings.UseAlterTime
            && ObjectManager.Target.GetDistance < 30 && ObjectManager.Target.InCombat)
            Alter_Time.Launch();

        if (MySettings.UseTrinket && Trinket_Timer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Trinket_Timer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBerserking)
            Berserking.Launch();
        else if (Blood_Fury.IsSpellUsable && Blood_Fury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBloodFury)
            Blood_Fury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (Engineering_Timer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                && MySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            Engineering_Timer = new Timer(1000*60);
        }
        else if (Mage_Bomb.KnownSpell && Mage_Bomb.IsSpellUsable && Mage_Bomb.IsDistanceGood
                 && MySettings.UseTierFive)
        {
            Mage_Bomb.Launch();
            return;
        }
        else if (Frozen_Orb.KnownSpell && Frozen_Orb.IsSpellUsable && Frozen_Orb.IsDistanceGood
                 && MySettings.UseFrozenOrb)
        {
            Frozen_Orb.Launch();
            return;
        }
        else if (Evocation.KnownSpell && Evocation.IsSpellUsable && ObjectManager.Target.GetDistance < 40
                 && MySettings.UseInvocationTalent && !ObjectManager.Me.HaveBuff(114003))
        {
            Evocation.Launch();
            return;
        }
        else if (Evocation.KnownSpell && Evocation.IsSpellUsable && ObjectManager.Target.GetDistance < 40
                 && MySettings.UseRuneofPowerTalent && !ObjectManager.Me.HaveBuff(116011))
        {
            SpellManager.CastSpellByIDAndPosition(116011, ObjectManager.Target.Position);
            return;
        }
        else if (Icy_Veins.KnownSpell && Icy_Veins.IsSpellUsable && ObjectManager.Target.GetDistance < 40
                 && MySettings.UseIcyVeins && !Time_Warp.HaveBuff)
        {
            Icy_Veins.Launch();
            return;
        }
        else if (Mirror_Image.KnownSpell && Mirror_Image.IsSpellUsable && ObjectManager.Target.GetDistance < 40
                 && MySettings.UseMirrorImage)
        {
            Mirror_Image.Launch();
            return;
        }
        else
        {
            if (Time_Warp.KnownSpell && Time_Warp.IsSpellUsable && MySettings.UseTimeWarp
                && !ObjectManager.Me.HaveBuff(80354) && ObjectManager.Target.GetDistance < 40
                && !Icy_Veins.HaveBuff)
            {
                Time_Warp.Launch();
                return;
            }
        }
    }

    private void DPS_Cycle()
    {
        if (ObjectManager.GetNumberAttackPlayer() > 4 && Flamestrike.IsSpellUsable && Flamestrike.KnownSpell
            && Flamestrike.IsDistanceGood && Flamestrike_Timer.IsReady && MySettings.UseFlamestrike)
        {
            SpellManager.CastSpellByIDAndPosition(2120, ObjectManager.Target.Position);
            Flamestrike_Timer = new Timer(1000*8);
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 4 && Arcane_Explosion.IsSpellUsable &&
                 Arcane_Explosion.KnownSpell
                 && Arcane_Explosion.IsDistanceGood && MySettings.UseArcaneExplosion)
        {
            Arcane_Explosion.Launch();
            return;
        }
        else if (Frozen_Orb.KnownSpell && Frozen_Orb.IsSpellUsable && Frozen_Orb.IsDistanceGood
                 && MySettings.UseFrozenOrb)
        {
            Frozen_Orb.Launch();
            return;
        }
        else if (ObjectManager.Me.Level > 9 && Freeze_Timer.IsReady && MySettings.UseFreeze
                 && (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0) &&
                 ObjectManager.Target.GetDistance < 35)
        {
            SpellManager.CastSpellByIDAndPosition(33395, ObjectManager.Target.Position);
            Freeze_Timer = new Timer(1000*25);
            return;
        }
        else if (Frostfire_Bolt.IsDistanceGood && Frostfire_Bolt.KnownSpell && Frostfire_Bolt.IsSpellUsable
                 && ObjectManager.Me.HaveBuff(57761) && MySettings.UseFrostfireBolt)
        {
            Frostfire_Bolt.Launch();
            return;
        }
        else if (Ice_Lance.IsDistanceGood && Ice_Lance.KnownSpell && Ice_Lance.IsSpellUsable
                 && ObjectManager.Me.HaveBuff(44544) && MySettings.UseIceLance)
        {
            Ice_Lance.Launch();
            return;
        }
        else if (Frostbolt.KnownSpell && Frostbolt.IsSpellUsable && Frostbolt.IsDistanceGood
                 && Presence_of_Mind.KnownSpell && Presence_of_Mind.IsSpellUsable)
        {
            Presence_of_Mind.Launch();
            Thread.Sleep(400);
            Frostbolt.Launch();
            return;
        }
        else if (Scorch.IsSpellUsable && MySettings.UseScorch && Scorch.IsDistanceGood
                 && Scorch.KnownSpell && ObjectManager.Me.GetMove && !Ice_Floes.HaveBuff)
        {
            Scorch.Launch();
            return;
        }
        else
        {
            if (Frostbolt.KnownSpell && Frostbolt.IsSpellUsable && Frostbolt.IsDistanceGood)
            {
                Frostbolt.Launch();
                return;
            }
        }

        if (ObjectManager.Me.Level < 10 && Frostfire_Bolt.KnownSpell && Frostfire_Bolt.IsSpellUsable
            && Frostfire_Bolt.IsDistanceGood)
        {
            Frostfire_Bolt.Launch();
            return;
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: MageFrostSettings

    [Serializable]
    public class MageFrostSettings : Settings
    {
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public int UseConeofColdAtPercentage = 45;
        public int UseCounterspellAtPercentage = 100;
        public int UseDeepFreezeAtPercentage = 50;
        public int UseEvocationForHPAtPercentage = 40;
        public int UseEvocationForManaAtPercentage = 60;
        public int UseFrostjawAtPercentage = 40;
        public int UseFrostNovaAtPercentage = 50;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public int UseIceBarrierAtPercentage = 95;
        public int UseIceWardAtPercentage = 45;
        public int UseIncantersWardAtPercentage = 95;
        public int UseConjureManaGemAtPercentage = 40;
        public int UseTemporalShieldAtPercentage = 95;
        public int UseStoneformAtPercentage = 80;
        public int UseWarStompAtPercentage = 80;
        public bool UseAlchFlask = true;
        public bool UseAlterTime = true;
        public bool UseArcaneBrilliance = true;
        public bool UseArcaneExplosion = true;
        public bool UseArcaneTorrentForDecast = true;
        public bool UseArcaneTorrentForResource = true;
        public bool UseBerserking = true;
        public bool UseBlazingSpeed = true;
        public bool UseBlink = true;
        public bool UseBlizzard = true;
        public bool UseBloodFury = true;
        public bool UseColdSnap = true;
        public bool UseConeofCold = true;
        public bool UseConjureManaGem = true;
        public bool UseConjureRefreshment = true;
        public bool UseCounterspell = true;
        public bool UseDeepFreeze = true;
        public bool UseEngGlove = true;
        public bool UseEvocation = true;
        public bool UseEvocationGlyph = false;
        public bool UseFlamestrike = true;
        public bool UseFreeze = true;
        public bool UseFrostArmor = true;
        public bool UseFrostjaw = true;
        public bool UseFrostNova = true;
        public bool UseFrostbolt = true;
        public bool UseFrostfireBolt = true;
        public bool UseFrozenOrb = true;
        public bool UseGiftoftheNaaru = true;
        public bool UseIceBarrier = true;
        public bool UseIceBlock = true;
        public bool UseIceFloes = true;
        public bool UseIceLance = true;
        public bool UseIceWard = true;
        public bool UseIcyVeins = true;
        public bool UseIncantersWard = true;
        public bool UseInvisibility = true;
        public bool UseInvocationTalent = false;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMageArmor = false;
        public bool UseMirrorImage = true;
        public bool UseMoltenArmor = false;
        public bool UsePresenceofMind = true;
        public bool UseRingofFrost = true;
        public bool UseRuneofPowerTalent = false;
        public bool UseScorch = true;
        public bool UseStoneform = true;
        public bool UseSummonWaterElemental = true;
        public bool UseTemporalShield = true;
        public bool UseTierFive = true;
        public bool UseTimeWarp = true;
        public bool UseTrinket = true;
        public bool UseWarStomp = true;

        public MageFrostSettings()
        {
            ConfigWinForm(new Point(500, 400), "Mage Frost Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrent", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Mage Buffs */
            AddControlInWinForm("Use Arcane Brilliance", "UseArcaneBrilliance", "Mage Buffs");
            AddControlInWinForm("Use Blazing Speed", "UseBlazingSpeed", "Mage Buffs");
            AddControlInWinForm("Use Frost Armor", "UseFrostArmor", "Mage Buffs");
            AddControlInWinForm("Use Ice Floes", "UseIceFloes", "Mage Buffs");
            AddControlInWinForm("Use Mage Armor", "UseMageArmor", "Mage Buffs");
            AddControlInWinForm("Use Molten Armor", "UseMoltenArmor", "Mage Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Arcane Explosion", "UseArcaneExplosion", "Offensive Spell");
            AddControlInWinForm("Use Blizzard", "UseBlizzard", "Offensive Spell");
            AddControlInWinForm("Use Flamestrike", "UseFlamestrike", "Offensive Spell");
            AddControlInWinForm("Use Pet Freeze Ability", "UseFreeze", "Offensive Spell");
            AddControlInWinForm("Use Frostbolt", "UseFrostbolt", "Offensive Spell");
            AddControlInWinForm("Use Frostfire Bolt", "UseFrostfireBolt", "Offensive Spell");
            AddControlInWinForm("Use Ice Lance", "UseIceLance", "Offensive Spell");
            AddControlInWinForm("Use Scorch", "UseScorch", "Offensive Spell");
            AddControlInWinForm("Use Summon Water Elemental", "UseSummonWaterElemental", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Alter Time", "UseAlterTime", "Offensive Cooldown");
            AddControlInWinForm("Use Frozen Orb", "UseFrozenOrb", "Offensive Cooldown");
            AddControlInWinForm("Use Icy Veins", "UseIcyVeins", "Offensive Cooldown");
            AddControlInWinForm("Use Mirror Image", "UseMirrorImage", "Offensive Cooldown");
            AddControlInWinForm("Use Presence of Mind", "UsePresenceofMind", "Offensive Cooldown");
            AddControlInWinForm("Use Tier Five Ability", "UseTierFive", "Offensive Cooldown");
            AddControlInWinForm("Use Time Warp", "UseTimeWarp", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Blink", "UseBlink", "Defensive Cooldown");
            AddControlInWinForm("Use Cold Snap", "UseColdSnap", "Defensive Cooldown");
            AddControlInWinForm("Use Cone of Cold", "UseConeofCold", "Defensive Cooldown");
            AddControlInWinForm("Use Counterspell", "UseCounterspell", "Defensive Cooldown");
            AddControlInWinForm("Use Deep Freeze", "UseDeepFreeze", "Defensive Cooldown");
            AddControlInWinForm("Use Frostjaw", "UseFrostjaw", "Defensive Cooldown");
            AddControlInWinForm("Use Frost Nova", "UseFrostNova", "Defensive Cooldown");
            AddControlInWinForm("Use Ice Barrier", "UseIceBarrier", "Defensive Cooldown");
            AddControlInWinForm("Use Ice Block", "UseIceBlock", "Defensive Cooldown");
            AddControlInWinForm("Use Ice Ward", "UseIceWard", "Defensive Cooldown");
            AddControlInWinForm("Use Incanter's Ward", "UseIncantersWard", "Defensive Cooldown");
            AddControlInWinForm("Use Invisibility", "UseInvisibility", "Defensive Cooldown");
            AddControlInWinForm("Use Ring of Frost", "UseRingofFrost", "Defensive Cooldown");
            AddControlInWinForm("Use Temporal Shield", "UseTemporalShield", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Conjure Mana Gem", "UseConjureManaGem", "Healing Spell");
            AddControlInWinForm("Use Conjure Refreshment", "UseConjureRefreshment", "Healing Spell");
            AddControlInWinForm("Use Evocation", "UseEvocation", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket", "UseTrinket", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Use Evocation Glyph", "UseEvocationGlyph", "Game Settings");
            AddControlInWinForm("Use Invocation Talent", "UseInvocationTalent", "Game Settings");
            AddControlInWinForm("Use Rune of Power Talent", "UseRuneofPowerTalent", "Game Settings");
        }

        public static MageFrostSettings CurrentSetting { get; set; }

        public static MageFrostSettings GetSettings()
        {
            string CurrentSettingsFile = Application.StartupPath + "\\CustomClasses\\Settings\\Mage_Frost.xml";
            if (File.Exists(CurrentSettingsFile))
            {
                return
                    CurrentSetting = Load<MageFrostSettings>(CurrentSettingsFile);
            }
            else
            {
                return new MageFrostSettings();
            }
        }
    }

    #endregion
}

public class Mage_Fire
{
    private readonly MageFireSettings MySettings = MageFireSettings.GetSettings();
    private readonly string MoveBackward = nManager.Wow.Helpers.Keybindings.GetKeyByAction(nManager.Wow.Enums.Keybindings.MOVEBACKWARD);

    #region General Timers & Variables

    private Timer AlchFlask_Timer = new Timer(0);
    private Timer Engineering_Timer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer Trinket_Timer = new Timer(0);
    public int LC = 0;

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell Arcane_Torrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell Blood_Fury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell Gift_of_the_Naaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell War_Stomp = new Spell("War Stomp");

    #endregion

    #region Mage Buffs

    private readonly Spell Arcane_Brilliance = new Spell("Arcane Brilliance");
    private readonly Spell Blazing_Speed = new Spell("Blazing Speed");
    private readonly Spell Frost_Armor = new Spell("Frost Armor");
    private readonly Spell Ice_Floes = new Spell("Ice Floes");
    private readonly Spell Mage_Armor = new Spell("Mage Armor");
    private readonly Spell Molten_Armor = new Spell("Molten Armor");

    #endregion

    #region Offensive Spell

    private readonly Spell Arcane_Explosion = new Spell("Arcane Explosion");
    private readonly Spell DragonsBreath = new Spell("Dragon's Breath");
    private readonly Spell Fire_Blast = new Spell("Fire Blast");
    private readonly Spell Fireball = new Spell("Fireball");
    private readonly Spell Flamestrike = new Spell("Flamestrike");
    private readonly Spell InfernoBlast = new Spell("Inferno Blast");
    private readonly Spell Pyroblast = new Spell("Pyroblast");
    private readonly Spell Scorch = new Spell("Scorch");
    private Timer Flamestrike_Timer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell Alter_Time = new Spell("Alter Time");
    private readonly Spell Combustion = new Spell("Combustion");
    private readonly Spell Frost_Bomb = new Spell("Frost Bomb");
    private readonly Spell Mage_Bomb = new Spell("Mage Bomb");
    private readonly Spell Mirror_Image = new Spell("Mirror Image");
    private readonly Spell Presence_of_Mind = new Spell("Presence of Mind");
    private readonly Spell Time_Warp = new Spell("Time Warp");

    #endregion

    #region Defensive Cooldown

    private readonly Spell Blink = new Spell("Blink");
    private readonly Spell Cold_Snap = new Spell("Cold Snap");
    private readonly Spell Cone_of_Cold = new Spell("Cone of Cold");
    private readonly Spell Counterspell = new Spell("Counterspell");
    private readonly Spell Deep_Freeze = new Spell("Deep Freeze");
    private readonly Spell Frostjaw = new Spell("Frostjaw");
    private readonly Spell Frost_Nova = new Spell("Frost Nova");
    private readonly Spell Ice_Barrier = new Spell("Ice Barrier");
    private readonly Spell Ice_Block = new Spell("Ice Block");
    private readonly Spell Ice_Ward = new Spell("Ice Ward");
    private readonly Spell Incanters_Ward = new Spell("Incanter's Ward");
    private readonly Spell Invisibility = new Spell("Invisibility");
    private readonly Spell Ring_of_Frost = new Spell("Ring of Frost");
    private readonly Spell Temporal_Shield = new Spell("Temporal Shield");

    #endregion

    #region Healing Spell

    private readonly Spell Conjure_Mana_Gem = new Spell("Conjure Mana Gem");
    private readonly Spell Conjure_Refreshment = new Spell("Conjure Refreshment");
    private readonly Spell Evocation = new Spell("Evocation");

    #endregion

    public Mage_Fire()
    {
        Main.range = 30.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (Scorch.IsDistanceGood || Fireball.IsDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && MySettings.UseLowCombat)
                            {
                                LC = 1;
                                LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                Combat();
                            }
                        }
                        else
                        {
                            if (!ObjectManager.Me.IsCast)
                                Patrolling();
                        }
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void Pull()
    {
        if (Pyroblast.KnownSpell && Pyroblast.IsSpellUsable && Pyroblast.IsDistanceGood
            && ObjectManager.Me.HaveBuff(48108) && MySettings.UsePyroblast)
        {
            Pyroblast.Launch();
            return;
        }
        else if (Scorch.IsDistanceGood && Scorch.KnownSpell && Scorch.IsSpellUsable && MySettings.UseScorch)
        {
            Scorch.Launch();
            return;
        }
        else
        {
            if (Fireball.IsDistanceGood && Fireball.KnownSpell && Fireball.IsSpellUsable && MySettings.UseFireball)
            {
                Fireball.Launch();
                return;
            }
        }
    }

    private void LowCombat()
    {
        Buff();
        AvoidMelee();
        Defense_Cycle();
        Heal();

        if (Pyroblast.KnownSpell && Pyroblast.IsSpellUsable && Pyroblast.IsDistanceGood
            && ObjectManager.Me.HaveBuff(48108))
        {
            Pyroblast.Launch();
            return;
        }
        //Blizzard API calls for Inferno Blast using the Fire Blast function.
        else if (Fire_Blast.IsDistanceGood && Fire_Blast.IsSpellUsable && Fire_Blast.KnownSpell
                 && MySettings.UseInfernoBlast)
        {
            Fire_Blast.Launch();
            return;
        }
        else
        {
            if (Fireball.KnownSpell && Fireball.IsSpellUsable && Fireball.IsDistanceGood
                && MySettings.UseFireball)
            {
                Fireball.Launch();
                return;
            }
        }

        if (Arcane_Explosion.KnownSpell && Arcane_Explosion.IsSpellUsable && Arcane_Explosion.IsDistanceGood
            && MySettings.UseArcaneExplosion)
        {
            Arcane_Explosion.Launch();
            return;
        }
    }

    private void Combat()
    {
        Buff();
        AvoidMelee();
        if (OnCD.IsReady)
            Defense_Cycle();
        Heal();
        Decast();
        DPS_Burst();
        DPS_Cycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (ObjectManager.Me.HaveBuff(87023) && Ice_Block.KnownSpell && MySettings.UseIceBlock
            && !ObjectManager.Me.HaveBuff(41425))
        {
            if (!Ice_Block.IsSpellUsable && Cold_Snap.KnownSpell && Cold_Snap.IsSpellUsable
                && MySettings.UseColdSnap)
            {
                Cold_Snap.Launch();
                Thread.Sleep(400);
            }
            Ice_Block.Launch();
            OnCD = new Timer(1000*10);
            return;
        }

        if (MySettings.UseArcaneBrilliance && Arcane_Brilliance.KnownSpell && Arcane_Brilliance.IsSpellUsable
            && !Arcane_Brilliance.HaveBuff && !ObjectManager.Me.HaveBuff(61316))
        {
            Arcane_Brilliance.Launch();
            return;
        }
        else if (MySettings.UseMoltenArmor && Molten_Armor.KnownSpell && Molten_Armor.IsSpellUsable
                 && !Molten_Armor.HaveBuff)
        {
            Molten_Armor.Launch();
            return;
        }
        else if (MySettings.UseFrostArmor && Frost_Armor.KnownSpell && Frost_Armor.IsSpellUsable
                 && !Frost_Armor.HaveBuff && !MySettings.UseMoltenArmor)
        {
            Frost_Armor.Launch();
            return;
        }
        else if (MySettings.UseMageArmor && Mage_Armor.KnownSpell && Mage_Armor.IsSpellUsable
                 && !Mage_Armor.HaveBuff && !MySettings.UseFrostArmor && !MySettings.UseMoltenArmor)
        {
            Mage_Armor.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 0 && Ice_Floes.IsSpellUsable
                 && Ice_Floes.KnownSpell && MySettings.UseIceFloes && ObjectManager.Me.GetMove)
        {
            Ice_Floes.Launch();
            return;
        }
        else
        {
            if (ObjectManager.GetNumberAttackPlayer() == 0 && Blazing_Speed.IsSpellUsable && Blazing_Speed.KnownSpell
                && MySettings.UseBlazingSpeed && ObjectManager.Me.GetMove)
            {
                Blazing_Speed.Launch();
                return;
            }
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            Keyboard.DownKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
            while (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
                Thread.Sleep(300);
            Keyboard.UpKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
        }
    }

    private void Defense_Cycle()
    {
        if (ObjectManager.Me.HealthPercent <= MySettings.UseIncantersWardAtPercentage && Incanters_Ward.IsSpellUsable && Incanters_Ward.KnownSpell
            && MySettings.UseIncantersWard && !Incanters_Ward.HaveBuff && ObjectManager.GetNumberAttackPlayer() > 0)
        {
            Incanters_Ward.Launch();
            return;
        }

        if (Ring_of_Frost.KnownSpell && Ring_of_Frost.IsSpellUsable
            && ObjectManager.GetNumberAttackPlayer() > 2
            && ObjectManager.Target.GetDistance < 10 && MySettings.UseRingofFrost)
        {
            SpellManager.CastSpellByIDAndPosition(113724, ObjectManager.Target.Position);
            return;
        }
        else if (Frost_Nova.KnownSpell && ObjectManager.Target.GetDistance < 12
                 && ObjectManager.Me.HealthPercent <= MySettings.UseFrostNovaAtPercentage && MySettings.UseFrostNova)
        {
            if (!Frost_Nova.IsSpellUsable && Cold_Snap.KnownSpell && Cold_Snap.IsSpellUsable
                && MySettings.UseColdSnap)
            {
                Cold_Snap.Launch();
                Thread.Sleep(200);
            }

            if (Frost_Nova.IsSpellUsable)
            {
                Frost_Nova.Launch();
                return;
            }
        }
        else if (Ice_Ward.KnownSpell && Ice_Ward.IsSpellUsable && ObjectManager.Target.GetDistance < 10
                 && ObjectManager.Me.HealthPercent <= MySettings.UseIceWardAtPercentage && MySettings.UseIceWard && !Frost_Nova.IsSpellUsable)
        {
            Ice_Ward.Launch();
            return;
        }
        else if (Cone_of_Cold.KnownSpell && Cone_of_Cold.IsSpellUsable && ObjectManager.Target.GetDistance < 10
                 && ObjectManager.Me.HealthPercent <= MySettings.UseConeofColdAtPercentage && MySettings.UseConeofCold && !Frost_Nova.IsSpellUsable
                 && !Ice_Ward.IsSpellUsable)
        {
            Cone_of_Cold.Launch();
            return;
        }
        else if (Blink.KnownSpell && Blink.IsSpellUsable && ObjectManager.Target.GetDistance < 11
                 && (Frost_Nova.TargetHaveBuff || Cone_of_Cold.TargetHaveBuff || Ice_Ward.TargetHaveBuff))
        {
            Blink.Launch();
            return;
        }
        else if (Deep_Freeze.KnownSpell && Deep_Freeze.IsSpellUsable && Deep_Freeze.IsDistanceGood
                 && MySettings.UseDeepFreeze && ObjectManager.Me.HealthPercent <= MySettings.UseDeepFreezeAtPercentage)
        {
            Deep_Freeze.Launch();
            OnCD = new Timer(1000*5);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseIceBarrierAtPercentage && Ice_Barrier.IsSpellUsable && Ice_Barrier.KnownSpell
                 && MySettings.UseIceBarrier && !Ice_Barrier.HaveBuff && !Incanters_Ward.HaveBuff)
        {
            Ice_Barrier.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseTemporalShieldAtPercentage && Temporal_Shield.IsSpellUsable && Temporal_Shield.KnownSpell
                 && MySettings.UseTemporalShield && !Temporal_Shield.HaveBuff &&
                 ObjectManager.GetNumberAttackPlayer() > 0)
        {
            Temporal_Shield.Launch();
            OnCD = new Timer(1000*4);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 40 && Frostjaw.KnownSpell && Frostjaw.IsSpellUsable
                 && MySettings.UseFrostjaw && Frostjaw.IsDistanceGood)
        {
            Frostjaw.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseWarStompAtPercentage && War_Stomp.IsSpellUsable && War_Stomp.KnownSpell
                 && MySettings.UseWarStomp)
        {
            War_Stomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable && Stoneform.KnownSpell
                 && MySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else
        {
            if (ObjectManager.GetNumberAttackPlayer() > 3 && Invisibility.KnownSpell && Invisibility.IsSpellUsable
                && MySettings.UseInvisibility)
            {
                Invisibility.Launch();
                Thread.Sleep(5000);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell && ObjectManager.Me.HealthPercent <= MySettings.UseArcaneTorrentForResourceAtPercentage
                && MySettings.UseArcaneTorrentForResource)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseGiftoftheNaaruAtPercentage && Gift_of_the_Naaru.KnownSpell && Gift_of_the_Naaru.IsSpellUsable
                 && MySettings.UseGiftoftheNaaru)
        {
            Gift_of_the_Naaru.Launch();
            return;
        }
        else if (ObjectManager.Me.ManaPercentage < 40 && ItemsManager.GetItemCountByIdLUA(36799) > 0
                 && MySettings.UseConjureManaGem)
        {
            Logging.WriteFight("Use Mana Gem.");
            Lua.RunMacroText("/use item:36799");
            return;
        }
        else if ((ObjectManager.Me.HealthPercent < 40 || ObjectManager.Me.ManaPercentage < 60)
                 && MySettings.UseEvocation && Evocation.IsSpellUsable && !MySettings.UseInvocationTalent
                 && !MySettings.UseRuneofPowerTalent && MySettings.UseEvocationGlyph)
        {
            Evocation.Launch();
            return;
        }
        else if (Conjure_Mana_Gem.KnownSpell && ItemsManager.GetItemCountByIdLUA(36799) == 0
                 && MySettings.UseConjureManaGem)
        {
            Conjure_Mana_Gem.Launch();
            return;
        }
        else
        {
            if (Conjure_Refreshment.KnownSpell && ItemsManager.GetItemCountByIdLUA(80610) == 0 // 90
                && Conjure_Refreshment.KnownSpell && ItemsManager.GetItemCountByIdLUA(65499) == 0 // 85-89
                && Conjure_Refreshment.KnownSpell && ItemsManager.GetItemCountByIdLUA(43523) == 0 // 84-80
                && Conjure_Refreshment.KnownSpell && ItemsManager.GetItemCountByIdLUA(43518) == 0 // 79-74
                && Conjure_Refreshment.KnownSpell && ItemsManager.GetItemCountByIdLUA(65517) == 0 // 73-64
                && Conjure_Refreshment.KnownSpell && ItemsManager.GetItemCountByIdLUA(65516) == 0 // 63-54
                && Conjure_Refreshment.KnownSpell && ItemsManager.GetItemCountByIdLUA(65515) == 0 // 53-44
                && Conjure_Refreshment.KnownSpell && ItemsManager.GetItemCountByIdLUA(65500) == 0 // 43-38
                && MySettings.UseConjureRefreshment)
            {
                Conjure_Refreshment.Launch();
                return;
            }
        }
    }

    private void Decast()
    {
        if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
            && Counterspell.KnownSpell && Counterspell.IsSpellUsable && Counterspell.IsDistanceGood)
        {
            Counterspell.Launch();
            return;
        }
        else if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell && ObjectManager.Target.GetDistance < 8
            && ObjectManager.Me.HealthPercent <= MySettings.UseArcaneTorrentForDecastAtPercentage
            && MySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && Frostjaw.KnownSpell && Frostjaw.IsSpellUsable && Frostjaw.IsDistanceGood)
            {
                Frostjaw.Launch();
                OnCD = new Timer(1000*8);
                return;
            }
        }
    }

    private void DPS_Burst()
    {
        if (Alter_Time.IsSpellUsable && Alter_Time.KnownSpell && MySettings.UseAlterTime
            && ObjectManager.Target.GetDistance < 30 && ObjectManager.Target.InCombat)
            Alter_Time.Launch();

        if (MySettings.UseTrinket && Trinket_Timer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Trinket_Timer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBerserking)
            Berserking.Launch();
        else if (Blood_Fury.IsSpellUsable && Blood_Fury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBloodFury)
            Blood_Fury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (Engineering_Timer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                && MySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            Engineering_Timer = new Timer(1000*60);
        }
        else if (Mage_Bomb.KnownSpell && Mage_Bomb.IsSpellUsable && Mage_Bomb.IsDistanceGood
                 && MySettings.UseTierFive)
        {
            Mage_Bomb.Launch();
            return;
        }
        else if (Evocation.KnownSpell && Evocation.IsSpellUsable && ObjectManager.Target.GetDistance < 40
                 && MySettings.UseInvocationTalent && !ObjectManager.Me.HaveBuff(114003))
        {
            Evocation.Launch();
            return;
        }
        else if (Evocation.KnownSpell && Evocation.IsSpellUsable && ObjectManager.Target.GetDistance < 40
                 && MySettings.UseRuneofPowerTalent && !ObjectManager.Me.HaveBuff(116011))
        {
            SpellManager.CastSpellByIDAndPosition(116011, ObjectManager.Target.Position);
            return;
        }
        else if (Combustion.KnownSpell && Combustion.IsSpellUsable && Combustion.IsDistanceGood
                 && MySettings.UseCombustion && ObjectManager.Target.HaveBuff(12654)
                 && ObjectManager.Target.HaveBuff(11366))
        {
            Combustion.Launch();
            return;
        }
        else if (Mirror_Image.KnownSpell && Mirror_Image.IsSpellUsable && ObjectManager.Target.GetDistance < 40
                 && MySettings.UseMirrorImage)
        {
            Mirror_Image.Launch();
            return;
        }
        else
        {
            if (Time_Warp.KnownSpell && Time_Warp.IsSpellUsable && MySettings.UseTimeWarp
                && !ObjectManager.Me.HaveBuff(80354) && ObjectManager.Target.GetDistance < 40)
            {
                Time_Warp.Launch();
                return;
            }
        }
    }

    private void DPS_Cycle()
    {
        if (ObjectManager.GetNumberAttackPlayer() > 4 && Flamestrike.IsSpellUsable && Flamestrike.KnownSpell
            && Flamestrike.IsDistanceGood && Flamestrike_Timer.IsReady && MySettings.UseFlamestrike)
        {
            SpellManager.CastSpellByIDAndPosition(2120, ObjectManager.Target.Position);
            Flamestrike_Timer = new Timer(1000*8);
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 4 && Arcane_Explosion.IsSpellUsable &&
                 Arcane_Explosion.KnownSpell
                 && Arcane_Explosion.IsDistanceGood && MySettings.UseArcaneExplosion)
        {
            Arcane_Explosion.Launch();
            return;
        }
        else if (Pyroblast.KnownSpell && Pyroblast.IsSpellUsable && Pyroblast.IsDistanceGood
                 && ObjectManager.Me.HaveBuff(48108) && MySettings.UsePyroblast)
        {
            Pyroblast.Launch();
            return;
        }
        else if (Pyroblast.KnownSpell && Pyroblast.IsSpellUsable && Pyroblast.IsDistanceGood
                 && Presence_of_Mind.KnownSpell && Presence_of_Mind.IsSpellUsable
                 && !ObjectManager.Me.HaveBuff(48108) && MySettings.UsePyroblast
                 && MySettings.UsePresenceofMind)
        {
            Presence_of_Mind.Launch();
            Thread.Sleep(400);
            Pyroblast.Launch();
            return;
        }
        //Blizzard API calls for Inferno Blast using the Frostfire Bolt function.
        else if (Fire_Blast.IsDistanceGood && Fire_Blast.IsSpellUsable && Fire_Blast.KnownSpell
                 && MySettings.UseInfernoBlast && ObjectManager.Me.HaveBuff(48107))
        {
            Fire_Blast.Launch();
            return;
        }
        else if (Scorch.IsSpellUsable && MySettings.UseScorch && Scorch.IsDistanceGood
                 && Scorch.KnownSpell && ObjectManager.Me.GetMove && !Ice_Floes.HaveBuff)
        {
            Scorch.Launch();
            return;
        }
        else
        {
            if (Fireball.KnownSpell && Fireball.IsSpellUsable && Fireball.IsDistanceGood
                && MySettings.UseFireball && !ObjectManager.Me.HaveBuff(48107)
                && !ObjectManager.Me.HaveBuff(48108))
            {
                Fireball.Launch();
                return;
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: MageFireSettings

    [Serializable]
    public class MageFireSettings : Settings
    {
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public int UseConeofColdAtPercentage = 45;
        public int UseCounterspellAtPercentage = 100;
        public int UseDeepFreezeAtPercentage = 50;
        public int UseEvocationForHPAtPercentage = 40;
        public int UseEvocationForManaAtPercentage = 60;
        public int UseFrostjawAtPercentage = 40;
        public int UseFrostNovaAtPercentage = 50;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public int UseIceBarrierAtPercentage = 95;
        public int UseIceWardAtPercentage = 45;
        public int UseIncantersWardAtPercentage = 95;
        public int UseConjureManaGemAtPercentage = 40;
        public int UseTemporalShieldAtPercentage = 95;
        public int UseStoneformAtPercentage = 80;
        public int UseWarStompAtPercentage = 80;
        public bool UseAlchFlask = true;
        public bool UseAlterTime = true;
        public bool UseArcaneBrilliance = true;
        public bool UseArcaneExplosion = true;
        public bool UseArcaneTorrentForDecast = true;
        public bool UseArcaneTorrentForResource = true;
        public bool UseBerserking = true;
        public bool UseBlazingSpeed = true;
        public bool UseBlink = true;
        public bool UseBloodFury = true;
        public bool UseColdSnap = true;
        public bool UseCombustion = true;
        public bool UseConeofCold = true;
        public bool UseConjureManaGem = true;
        public bool UseConjureRefreshment = true;
        public bool UseCounterspell = true;
        public bool UseDeepFreeze = true;
        public bool UseDragonsBreath = true;
        public bool UseEngGlove = true;
        public bool UseEvocation = true;
        public bool UseEvocationGlyph = false;
        public bool UseFireball = true;
        public bool UseFlamestrike = true;
        public bool UseFrostArmor = true;
        public bool UseFrostjaw = true;
        public bool UseFrostNova = true;
        public bool UseFrozenOrb = true;
        public bool UseGiftoftheNaaru = true;
        public bool UseIceBarrier = true;
        public bool UseIceBlock = true;
        public bool UseIceFloes = false;
        public bool UseIceWard = true;
        public bool UseIncantersWard = true;
        public bool UseInfernoBlast = true;
        public bool UseInvisibility = true;
        public bool UseInvocationTalent = false;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMageArmor = true;
        public bool UseMirrorImage = true;
        public bool UseMoltenArmor = false;
        public bool UsePresenceofMind = true;
        public bool UsePyroblast = true;
        public bool UseRingofFrost = true;
        public bool UseRuneofPowerTalent = false;
        public bool UseScorch = true;
        public bool UseStoneform = true;
        public bool UseTemporalShield = true;
        public bool UseTierFive = true;
        public bool UseTimeWarp = true;
        public bool UseTrinket = true;
        public bool UseWarStomp = true;

        public MageFireSettings()
        {
            ConfigWinForm(new Point(500, 400), "Mage Fire Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrent", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Mage Buffs */
            AddControlInWinForm("Use Arcane Brilliance", "UseArcaneBrilliance", "Mage Buffs");
            AddControlInWinForm("Use Blazing Speed", "UseBlazingSpeed", "Mage Buffs");
            AddControlInWinForm("Use Frost Armor", "UseFrostArmor", "Mage Buffs");
            AddControlInWinForm("Use Ice Floes", "UseIceFloes", "Mage Buffs");
            AddControlInWinForm("Use Mage Armor", "UseMageArmor", "Mage Buffs");
            AddControlInWinForm("Use Molten Armor", "UseMoltenArmor", "Mage Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Arcane Explosion", "UseArcaneExplosion", "Offensive Spell");
            AddControlInWinForm("Use Dragon's Breath", "UseDragonsBreath", "Offensive Spell");
            AddControlInWinForm("Use Fireball", "UseFireball", "Offensive Spell");
            AddControlInWinForm("Use Flamestrike", "UseFlamestrike", "Offensive Spell");
            AddControlInWinForm("Use Inferno Blast", "UseInfernoBlast", "Offensive Spell");
            AddControlInWinForm("Use Pyroblast", "UsePyroblast", "Offensive Spell");
            AddControlInWinForm("Use Scorch", "UseScorch", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Alter Time", "UseAlterTime", "Offensive Cooldown");
            AddControlInWinForm("Use Combustion", "UseCombustion", "Offensive Cooldown");
            AddControlInWinForm("Use Frozen Orb", "UseFrozenOrb", "Offensive Cooldown");
            AddControlInWinForm("Use Mirror Image", "UseMirrorImage", "Offensive Cooldown");
            AddControlInWinForm("Use Presence of Mind", "UsePresenceofMind", "Offensive Cooldown");
            AddControlInWinForm("Use Tier Five Talent", "UseTierFive", "Offensive Cooldown");
            AddControlInWinForm("Use Time Warp", "UseTimeWarp", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Blink", "UseBlink", "Defensive Cooldown");
            AddControlInWinForm("Use Cold Snap", "UseColdSnap", "Defensive Cooldown");
            AddControlInWinForm("Use Cone of Cold", "UseConeofCold", "Defensive Cooldown");
            AddControlInWinForm("Use Counterspell", "UseCounterspell", "Defensive Cooldown");
            AddControlInWinForm("Use DeepFreeze", "UseDeepFreeze", "Defensive Cooldown");
            AddControlInWinForm("Use Frostjaw", "UseFrostjaw", "Defensive Cooldown");
            AddControlInWinForm("Use Fros Nova", "UseFrostNova", "Defensive Cooldown");
            AddControlInWinForm("Use Ice Barrier", "UseIceBarrier", "Defensive Cooldown");
            AddControlInWinForm("Use Ice Block", "UseIceBlock", "Defensive Cooldown");
            AddControlInWinForm("Use Ice Ward", "UseIceWard", "Defensive Cooldown");
            AddControlInWinForm("Use Incanter's Ward", "UseIncantersWard", "Defensive Cooldown");
            AddControlInWinForm("Use Invisibility", "UseInvisibility", "Defensive Cooldown");
            AddControlInWinForm("Use Ring of Frost", "UseRingofFrost", "Defensive Cooldown");
            AddControlInWinForm("Use Temporal Shield", "UseTemporalShield", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Conjure Mana Gem", "UseConjureManaGem", "Healing Spell");
            AddControlInWinForm("Use Conjure Refreshment", "UseConjureRefreshment", "Healing Spell");
            AddControlInWinForm("Use Evocation", "UseEvocation", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket", "UseTrinket", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Use Evocation Glyph", "UseEvocationGlyph", "Game Settings");
            AddControlInWinForm("Use Invocation Talent", "UseInvocationTalent", "Game Settings");
            AddControlInWinForm("Use Rune of Power Talent", "UseRuneofPowerTalent", "Game Settings");
        }

        public static MageFireSettings CurrentSetting { get; set; }

        public static MageFireSettings GetSettings()
        {
            string CurrentSettingsFile = Application.StartupPath + "\\CustomClasses\\Settings\\Mage_Fire.xml";
            if (File.Exists(CurrentSettingsFile))
            {
                return
                    CurrentSetting = Load<MageFireSettings>(CurrentSettingsFile);
            }
            else
            {
                return new MageFireSettings();
            }
        }
    }

    #endregion
}

#endregion

#region Warlock

public class Warlock_Demonology
{
    private readonly WarlockDemonologySettings MySettings = WarlockDemonologySettings.GetSettings();
    private readonly string MoveBackward = nManager.Wow.Helpers.Keybindings.GetKeyByAction(nManager.Wow.Enums.Keybindings.MOVEBACKWARD);

    #region General Timers & Variables

    private Timer AlchFlask_Timer = new Timer(0);
    private Timer Engineering_Timer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer Trinket_Timer = new Timer(0);
    public int LC = 0;

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell Arcane_Torrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell Blood_Fury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell Gift_of_the_Naaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell War_Stomp = new Spell("War Stomp");

    #endregion

    #region Warlock Buffs

    private readonly Spell Curse_of_Enfeeblement = new Spell("Curse of Enfeeblement");
    private readonly Spell Curse_of_the_Elements = new Spell("Curse of the Elements");
    private readonly Spell Dark_Intent = new Spell("Dark Intent");
    private readonly Spell Grimoire_of_Sacrifice = new Spell("Grimoire of Sacrifice");
    private readonly Spell Metamorphosis = new Spell("Metamorphosis");
    private readonly Spell Soul_Link = new Spell("Soul Link");
    private readonly Spell Soulstone = new Spell("Soulstone");

    #endregion

    #region Offensive Spell

    private readonly Spell Carrion_Swarm = new Spell("Carrion Swarm");
    private readonly Spell Command_Demon = new Spell("Command Demon");
    private readonly Spell Corruption = new Spell("Corruption");
    private readonly Spell Doom = new Spell("Doom");
    private readonly Spell Fel_Flame = new Spell("Fel Flame");
    private readonly Spell Hand_of_Guldan = new Spell("Hand of Gul'dan");
    private readonly Spell Harvest_Life = new Spell("Harvest Life");
    private readonly Spell Hellfire = new Spell("Hellfire");
    private readonly Spell Immolation_Aura = new Spell("Immolation Aura");
    private readonly Spell Shadow_Bolt = new Spell("Shadow Bolt");
    private readonly Spell Soul_Fire = new Spell("Soul Fire");
    private readonly Spell Summon_Felguard = new Spell("Summon Felguard");
    private readonly Spell Summon_Felhunter = new Spell("Summon Felhunter");
    private readonly Spell Summon_Imp = new Spell("Summon Imp");
    private readonly Spell Summon_Succubus = new Spell("Summon Succubus");
    private readonly Spell Summon_Voidwalker = new Spell("Summon Voidwalker");
    private readonly Spell Touch_of_Chaos = new Spell("Touch of Chaos");
    private readonly Spell Void_Ray = new Spell("Void Ray");
    private Timer Corruption_Timer = new Timer(0);
    private Timer Doom_Timer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell Archimondes_Vengeance = new Spell("Archimonde's Vengeance");
    private readonly Spell Dark_Soul = new Spell("Dark Soul");
    private readonly Spell Grimoire_of_Service = new Spell("Grimoire of Service");
    private readonly Spell Summon_Doomguard = new Spell("Summon Doomguard");
    private readonly Spell Summon_Infernal = new Spell("Summon Infernal");

    #endregion

    #region Defensive Cooldown

    private readonly Spell Dark_Bargain = new Spell("Dark Bargain");
    private readonly Spell Howl_of_Terror = new Spell("Howl_of_Terror");
    private readonly Spell Sacrificial_Pact = new Spell("Sacrificial Pact");
    private readonly Spell Shadowfury = new Spell("Shadowfury");
    private readonly Spell Twilight_Ward = new Spell("Twilight Ward");
    private readonly Spell Unbound_Will = new Spell("Unbound Will");
    private readonly Spell Unending_Resolve = new Spell("Unending Resolve");

    #endregion

    #region Healing Spell

    private readonly Spell Create_Healthstone = new Spell("Create Healthstone");
    private readonly Spell Dark_Regeneration = new Spell("Dark Regeneration");
    private readonly Spell Drain_Life = new Spell("Drain Life");
    private readonly Spell Health_Funnel = new Spell("Health Funnel");
    private readonly Spell Life_Tap = new Spell("Life Tap");
    private readonly Spell Mortal_Coil = new Spell("Mortal Coil");
    private Timer Healthstone_Timer = new Timer(0);

    #endregion

    public Warlock_Demonology()
    {
        Main.range = 30.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (Doom.IsDistanceGood || Corruption.IsDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && MySettings.UseLowCombat)
                            {
                                LC = 1;
                                LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(250);
        }
    }

    private void Pull()
    {
        if (Corruption.IsSpellUsable && Corruption.IsDistanceGood && Corruption.KnownSpell
            && MySettings.UseDoom && ObjectManager.Me.DemonicFury > 199)
        {
            if (Metamorphosis.KnownSpell && Metamorphosis.IsSpellUsable
                && MySettings.UseMetamorphosis && !Metamorphosis.HaveBuff)
            {
                Metamorphosis.Launch();
                Thread.Sleep(400);
                Corruption.Launch();
                Doom_Timer = new Timer(1000*60);
            }

            if (Metamorphosis.HaveBuff)
            {
                Thread.Sleep(2500);
                Metamorphosis.Launch();
            }
            return;
        }
    }

    private void LowCombat()
    {
        Buff();
        AvoidMelee();
        Defense_Cycle();
        Heal();

        if (ObjectManager.Me.BarTwoPercentage < 75 && Life_Tap.KnownSpell && Life_Tap.IsSpellUsable
            && MySettings.UseLifeTap)
        {
            Life_Tap.Launch();
            return;
        }
        else
        {
            if (Fel_Flame.IsDistanceGood && Fel_Flame.IsSpellUsable && Fel_Flame.KnownSpell
                && MySettings.UseFelFlame)
            {
                Fel_Flame.Launch();
                if (ObjectManager.Target.HealthPercent < 50 && ObjectManager.Target.HealthPercent > 0)
                {
                    Fel_Flame.Launch();
                    return;
                }
            }
        }

        if (Hellfire.IsSpellUsable && Hellfire.KnownSpell && Hellfire.IsDistanceGood
            && MySettings.UseHellfire)
        {
            Hellfire.Launch();
            Thread.Sleep(200);
            while (ObjectManager.Me.IsCast && ObjectManager.Target.HealthPercent > 0)
            {
                Thread.Sleep(200);
            }
            return;
        }
    }

    private void Combat()
    {
        Buff();
        AvoidMelee();
        if (OnCD.IsReady)
            Defense_Cycle();
        Heal();
        Decast();
        DPS_Burst();
        DPS_Cycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        Pet();

        if (!Dark_Intent.HaveBuff && Dark_Intent.KnownSpell && Dark_Intent.IsSpellUsable
            && MySettings.UseDarkIntent)
        {
            Dark_Intent.Launch();
            return;
        }
        else if (!Soul_Link.HaveBuff && Soul_Link.KnownSpell && Soul_Link.IsSpellUsable
                 && MySettings.UseSoulLink && (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0))
        {
            Soul_Link.Launch();
            return;
        }
        if (!Soulstone.HaveBuff && Soulstone.KnownSpell && Soulstone.IsSpellUsable
            && MySettings.UseSoulstone)
        {
            Soulstone.Launch();
            return;
        }
        else
        {
            if (ItemsManager.GetItemCountByIdLUA(5512) == 0 && Create_Healthstone.KnownSpell
                && Create_Healthstone.IsSpellUsable && MySettings.UseCreateHealthstone)
            {
                Logging.WriteFight(" - Create Healthstone - ");
                Thread.Sleep(200);
                Create_Healthstone.Launch();
                Thread.Sleep(200);
                while (ObjectManager.Me.IsCast)
                {
                    Thread.Sleep(200);
                }
            }
        }
    }

    private void Pet()
    {
        if (Health_Funnel.KnownSpell)
        {
            if (ObjectManager.Pet.HealthPercent > 0 && ObjectManager.Pet.HealthPercent < 50
                && Health_Funnel.IsSpellUsable && Health_Funnel.KnownSpell && MySettings.UseHealthFunnel)
            {
                Health_Funnel.Launch();
                while (ObjectManager.Me.IsCast)
                {
                    if (ObjectManager.Pet.HealthPercent > 85 || ObjectManager.Pet.IsDead)
                        break;
                    Thread.Sleep(100);
                }
            }
        }

        if (MySettings.UseSummonFelhunter && Summon_Felhunter.KnownSpell && Summon_Felhunter.IsSpellUsable &&
            (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0) && !Grimoire_of_Sacrifice.HaveBuff)
        {
            Summon_Felhunter.Launch();
            Logging.WriteFight(" - PET DEAD - ");
        }
        else if (MySettings.UseSummonFelguard && Summon_Felguard.KnownSpell && Summon_Felguard.IsSpellUsable &&
                 (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0) && !Grimoire_of_Sacrifice.HaveBuff)
        {
            Summon_Felguard.Launch();
            Logging.WriteFight(" - PET DEAD - ");
        }
        else if (MySettings.UseSummonImp && Summon_Imp.KnownSpell && Summon_Imp.IsSpellUsable &&
                 (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0) && !Grimoire_of_Sacrifice.HaveBuff)
        {
            Summon_Imp.Launch();
            Logging.WriteFight(" - PET DEAD - ");
        }
        else if (MySettings.UseSummonVoidwalker && Summon_Voidwalker.KnownSpell &&
                 Summon_Voidwalker.IsSpellUsable &&
                 (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0) && !Grimoire_of_Sacrifice.HaveBuff)
        {
            Summon_Voidwalker.Launch();
            Logging.WriteFight(" - PET DEAD - ");
        }
        else if (MySettings.UseSummonSuccubus && Summon_Succubus.KnownSpell &&
                 Summon_Succubus.IsSpellUsable &&
                 (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0) && !Grimoire_of_Sacrifice.HaveBuff)
        {
            Summon_Succubus.Launch();
            Logging.WriteFight(" - PET DEAD - ");
        }
        Thread.Sleep(200);
        if (Grimoire_of_Sacrifice.KnownSpell && !Grimoire_of_Sacrifice.HaveBuff && Grimoire_of_Sacrifice.IsSpellUsable
            && MySettings.UseGrimoireofSacrifice && (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0))
        {
            Grimoire_of_Sacrifice.Launch();
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            Keyboard.DownKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
            while (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
                Thread.Sleep(300);
            Keyboard.UpKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
        }
    }

    private void Defense_Cycle()
    {
        if (ObjectManager.Me.HealthPercent < 70 && MySettings.UseUnendingResolve
            && Unending_Resolve.KnownSpell && Unending_Resolve.IsSpellUsable)
        {
            Unending_Resolve.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 20 && MySettings.UseHowlofTerror
                 && Howl_of_Terror.KnownSpell && Howl_of_Terror.IsSpellUsable && ObjectManager.Target.GetDistance < 8)
        {
            Howl_of_Terror.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 40 && MySettings.UseDarkBargain
                 && Dark_Bargain.KnownSpell && Dark_Bargain.IsSpellUsable)
        {
            Dark_Bargain.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 95 && MySettings.UseSacrificialPact
                 && Sacrificial_Pact.KnownSpell && Sacrificial_Pact.IsSpellUsable
                 && (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0))
        {
            Sacrificial_Pact.Launch();
            OnCD = new Timer(1000*10);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 90 && MySettings.UseShadowfury
                 && Shadowfury.KnownSpell && Shadowfury.IsSpellUsable && ObjectManager.Target.GetDistance < 8)
        {
            Shadowfury.Launch();
            OnCD = new Timer(1000*3);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseWarStompAtPercentage && War_Stomp.IsSpellUsable && War_Stomp.KnownSpell
                 && MySettings.UseWarStomp)
        {
            War_Stomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent <= MySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable && Stoneform.KnownSpell
                && MySettings.UseStoneform)
            {
                Stoneform.Launch();
                OnCD = new Timer(1000*8);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell && ObjectManager.Me.HealthPercent <= MySettings.UseArcaneTorrentForResourceAtPercentage
                && MySettings.UseArcaneTorrentForResource)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseGiftoftheNaaruAtPercentage && Gift_of_the_Naaru.IsSpellUsable && Gift_of_the_Naaru.KnownSpell
            && MySettings.UseGiftoftheNaaru)
        {
            Gift_of_the_Naaru.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 65 && Dark_Regeneration.IsSpellUsable && Dark_Regeneration.KnownSpell
                 && MySettings.UseDarkRegeneration)
        {
            Dark_Regeneration.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 75 && ItemsManager.GetItemCountByIdLUA(5512) > 0
                 && MySettings.UseCreateHealthstone && Healthstone_Timer.IsReady)
        {
            Logging.WriteFight("Use Healthstone.");
            ItemsManager.UseItem("Healthstone");
            Healthstone_Timer = new Timer(1000*60*2);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 85 && Mortal_Coil.IsSpellUsable && Mortal_Coil.KnownSpell
                 && MySettings.UseMortalCoil && Mortal_Coil.IsDistanceGood)
        {
            Mortal_Coil.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent < 70 && Drain_Life.KnownSpell
                && MySettings.UseDrainLife && Drain_Life.IsDistanceGood && Drain_Life.IsSpellUsable)
            {
                Drain_Life.Launch();
                while (ObjectManager.Me.IsCast)
                {
                    Thread.Sleep(200);
                }
                return;
            }
        }
    }

    private void Decast()
    {
        if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell && ObjectManager.Target.GetDistance < 8
            && ObjectManager.Me.HealthPercent <= MySettings.UseArcaneTorrentForDecastAtPercentage
            && MySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                 && MySettings.UseTwilightWard && Twilight_Ward.KnownSpell && Twilight_Ward.IsSpellUsable)
        {
            Twilight_Ward.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && MySettings.UseSummonFelhunter
                && Command_Demon.IsSpellUsable && Command_Demon.KnownSpell && ObjectManager.Target.GetDistance < 40)
            {
                Command_Demon.Launch();
                return;
            }
        }
    }

    private void DPS_Burst()
    {
        if (MySettings.UseTrinket && Trinket_Timer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Trinket_Timer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBerserking)
            Berserking.Launch();
        else if (Blood_Fury.IsSpellUsable && Blood_Fury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBloodFury)
            Blood_Fury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (Engineering_Timer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                && MySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            Engineering_Timer = new Timer(1000*60);
        }
        else if (Dark_Soul.KnownSpell && Dark_Soul.IsSpellUsable
                 && MySettings.UseDarkSoul && ObjectManager.Target.GetDistance < 40)
        {
            Dark_Soul.Launch();
            return;
        }
        else if (Summon_Doomguard.KnownSpell && Summon_Doomguard.IsSpellUsable
                 && MySettings.UseSummonDoomguard && Summon_Doomguard.IsDistanceGood)
        {
            Summon_Doomguard.Launch();
            return;
        }
        else if (Summon_Infernal.KnownSpell && Summon_Infernal.IsSpellUsable
                 && MySettings.UseSummonInfernal && Summon_Infernal.IsDistanceGood)
        {
            SpellManager.CastSpellByIDAndPosition(1122, ObjectManager.Target.Position);
            return;
        }
        else if (Archimondes_Vengeance.KnownSpell && Archimondes_Vengeance.IsSpellUsable
                 && MySettings.UseArchimondesVengeance)
        {
            Archimondes_Vengeance.Launch();
            return;
        }
        else
        {
            if (Grimoire_of_Service.KnownSpell && Grimoire_of_Service.IsSpellUsable
                && MySettings.UseGrimoireofService && ObjectManager.Target.GetDistance < 40)
            {
                Grimoire_of_Service.Launch();
                return;
            }
        }
    }

    private void DPS_Cycle()
    {
        if (ObjectManager.Me.DemonicFury > 899 || (Doom_Timer.IsReady || !ObjectManager.Target.HaveBuff(603)))
        {
            if (ObjectManager.Me.DemonicFury > 199)
            {
                if (Corruption.KnownSpell && Corruption.IsSpellUsable && Corruption.IsDistanceGood
                    && MySettings.UseCorruption)
                {
                    Corruption.Launch();
                    Corruption_Timer = new Timer(1000*20);
                }

                if (MySettings.UseMetamorphosis)
                    MetamorphosisCombat();
                return;
            }
        }

        if (Metamorphosis.HaveBuff)
            MetamorphosisCombat();

        if (Curse_of_the_Elements.KnownSpell && Curse_of_the_Elements.IsSpellUsable && MySettings.UseCurseoftheElements
            && Curse_of_the_Elements.IsDistanceGood && !Curse_of_the_Elements.TargetHaveBuff)
        {
            Curse_of_the_Elements.Launch();
            return;
        }
        else if (Curse_of_Enfeeblement.KnownSpell && Curse_of_Enfeeblement.IsSpellUsable &&
                 MySettings.UseCurseofEnfeeblement
                 && Curse_of_Enfeeblement.IsDistanceGood && !Curse_of_Enfeeblement.TargetHaveBuff &&
                 !MySettings.UseCurseoftheElements)
        {
            Curse_of_Enfeeblement.Launch();
            return;
        }
        else if (ObjectManager.Me.BarTwoPercentage < 75 && Life_Tap.KnownSpell && Life_Tap.IsSpellUsable
                 && MySettings.UseLifeTap)
        {
            Life_Tap.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 4 && Harvest_Life.IsSpellUsable && Harvest_Life.KnownSpell
                 && MySettings.UseHarvestLife && Harvest_Life.IsDistanceGood)
        {
            Harvest_Life.Launch();
            while (ObjectManager.Me.IsCast)
            {
                Thread.Sleep(200);
            }
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 2 && Command_Demon.IsSpellUsable && Command_Demon.KnownSpell
                 && Command_Demon.IsDistanceGood && ObjectManager.Pet.Guid == 207 && ObjectManager.Pet.Health > 0
                 && MySettings.UseCommandDemon)
        {
            Command_Demon.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 4 && Hellfire.IsSpellUsable && Hellfire.KnownSpell
                 && MySettings.UseHellfire && ObjectManager.Target.GetDistance < 20
                 && (!Harvest_Life.KnownSpell || !MySettings.UseHarvestLife))
        {
            Hellfire.Launch();
            Thread.Sleep(200);
            while (ObjectManager.Me.IsCast && ObjectManager.Target.HealthPercent > 0)
            {
                Thread.Sleep(200);
            }
            return;
        }
        else if (Corruption.KnownSpell && Corruption.IsSpellUsable && Corruption.IsDistanceGood
                 && MySettings.UseCorruption && (!Corruption.TargetHaveBuff || Corruption_Timer.IsReady))
        {
            Corruption.Launch();
            Corruption_Timer = new Timer(1000*20);
            return;
        }
        else if (Hand_of_Guldan.KnownSpell && Hand_of_Guldan.IsSpellUsable && Hand_of_Guldan.IsDistanceGood
                 && MySettings.UseHandofGuldan && !ObjectManager.Target.HaveBuff(47960))
        {
            Hand_of_Guldan.Launch();
            return;
        }
        else if (Soul_Fire.KnownSpell && Soul_Fire.IsSpellUsable && Soul_Fire.IsDistanceGood
                 && MySettings.UseSoulFire && ObjectManager.Me.HaveBuff(122355))
        {
            Soul_Fire.Launch();
            return;
        }
        else
        {
            if (Shadow_Bolt.KnownSpell && Shadow_Bolt.IsSpellUsable && Shadow_Bolt.IsDistanceGood
                && MySettings.UseShadowBolt)
            {
                Shadow_Bolt.Launch();
                return;
            }
        }
    }

    private void MetamorphosisCombat()
    {
        while (ObjectManager.Me.DemonicFury > 100)
        {
            if (Metamorphosis.KnownSpell && Metamorphosis.IsSpellUsable && !Metamorphosis.HaveBuff)
            {
                Metamorphosis.Launch();
                Thread.Sleep(700);
            }

            if (ObjectManager.GetNumberAttackPlayer() > 2)
            {
                if (Hellfire.KnownSpell && Hellfire.IsSpellUsable && Metamorphosis.HaveBuff
                    && MySettings.UseImmolationAura && ObjectManager.Target.GetDistance < 20)
                {
                    Hellfire.Launch();
                    Thread.Sleep(200);
                }
                else if (Carrion_Swarm.IsSpellUsable && Carrion_Swarm.KnownSpell
                         && Metamorphosis.HaveBuff && ObjectManager.Target.GetDistance < 20)
                {
                    Carrion_Swarm.Launch();
                    Thread.Sleep(200);
                }
                else
                {
                    if (Fel_Flame.IsSpellUsable && Fel_Flame.KnownSpell && Fel_Flame.IsDistanceGood
                        && MySettings.UseVoidRay && Metamorphosis.HaveBuff)
                    {
                        Fel_Flame.Launch();
                        Thread.Sleep(200);
                    }
                }
            }

            else
            {
                if (Corruption.IsDistanceGood && Metamorphosis.HaveBuff
                    && Corruption.KnownSpell && Corruption.IsSpellUsable && MySettings.UseDoom
                    && (Doom_Timer.IsReady || !ObjectManager.Target.HaveBuff(603)))
                {
                    Corruption.Launch();
                    Doom_Timer = new Timer(1000*60);
                    Thread.Sleep(200);
                }

                if (Shadow_Bolt.KnownSpell && Shadow_Bolt.IsSpellUsable && Shadow_Bolt.IsDistanceGood
                    && MySettings.UseTouchofChaos && Metamorphosis.HaveBuff)
                {
                    Shadow_Bolt.Launch();
                    Thread.Sleep(200);
                }
            }
        }

        Thread.Sleep(700);
        if (Metamorphosis.HaveBuff)
        {
            Metamorphosis.Launch();
            return;
        }
        return;
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: WarlockDemonologySettings

    [Serializable]
    public class WarlockDemonologySettings : Settings
    {
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public int UseStoneformAtPercentage = 80;
        public int UseWarStompAtPercentage = 80;
        public bool UseAlchFlask = true;
        public bool UseArcaneTorrentForDecast = true;
        public bool UseArcaneTorrentForResource = true;
        public bool UseArchimondesVengeance = true;
        public bool UseBerserking = true;
        public bool UseBloodFury = true;
        public bool UseCarrionSwarm = true;
        public bool UseCommandDemon = true;
        public bool UseCorruption = true;
        public bool UseCreateHealthstone = true;
        public bool UseCurseofEnfeeblement = false;
        public bool UseCurseoftheElements = true;
        public bool UseDarkBargain = true;
        public bool UseDarkIntent = true;
        public bool UseDarkRegeneration = true;
        public bool UseDarkSoul = true;
        public bool UseDoom = true;
        public bool UseDrainLife = true;
        public bool UseEngGlove = true;
        public bool UseFelFlame = true;
        public bool UseGiftoftheNaaru = true;
        public bool UseGrimoireofSacrifice = true;
        public bool UseGrimoireofService = true;
        public bool UseHandofGuldan = true;
        public bool UseHarvestLife = true;
        public bool UseHealthFunnel = true;
        public bool UseHellfire = true;
        public bool UseHowlofTerror = true;
        public bool UseImmolationAura = true;
        public bool UseLifeTap = true;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMetamorphosis = true;
        public bool UseMortalCoil = true;
        public bool UseSacrificialPact = true;
        public bool UseShadowBolt = true;
        public bool UseShadowfury = true;
        public bool UseSoulFire = true;
        public bool UseSoulLink = true;
        public bool UseSoulstone = true;
        public bool UseStoneform = true;
        public bool UseSummonDoomguard = true;
        public bool UseSummonFelguard = true;
        public bool UseSummonFelhunter = false;
        public bool UseSummonImp = false;
        public bool UseSummonInfernal = false;
        public bool UseSummonSuccubus = false;
        public bool UseSummonVoidwalker = false;
        public bool UseTouchofChaos = true;
        public bool UseTrinket = true;
        public bool UseTwilightWard = true;
        public bool UseUnboundWill = true;
        public bool UseUnendingResolve = true;
        public bool UseVoidRay = true;
        public bool UseWarStomp = true;

        public WarlockDemonologySettings()
        {
            ConfigWinForm(new Point(500, 400), "Warlock Demonology Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrent", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Warlock Buffs */
            AddControlInWinForm("Use Curse of Enfeeblement", "UseCurseofEnfeeblement", "Warlock Buffs");
            AddControlInWinForm("Use Curse of the Elements", "UseCurseoftheElements", "Warlock Buffs");
            AddControlInWinForm("Use Dark Intent", "UseDarkIntent", "Warlock Buffs");
            AddControlInWinForm("Use Grimoire of Sacrifice", "UseGrimoireofSacrifice", "Warlock Buffs");
            AddControlInWinForm("Use Metamorphosis", "UseMetamorphosis", "Warlock Buffs");
            AddControlInWinForm("Use Soul Link ", "UseSoulLink ", "Warlock Buffs");
            AddControlInWinForm("Use Soulstone", "UseSoulstone", "Warlock Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Carrion Swarm", "UseCarrionSwarm", "Offensive Spell");
            AddControlInWinForm("Use Command Demon", "UseCommandDemon", "Offensive Spell");
            AddControlInWinForm("Use Corruption", "UseCorruption", "Offensive Spell");
            AddControlInWinForm("Use Doom", "UseDoom", "Offensive Spell");
            AddControlInWinForm("Use Fel Flame", "UseFelFlame", "Offensive Spell");
            AddControlInWinForm("Use Hand of Guldan", "UseHandofGuldan", "Offensive Spell");
            AddControlInWinForm("Use Harvest Life", "UseHarvestLife", "Offensive Spell");
            AddControlInWinForm("Use Hellfire", "UseHellfire", "Offensive Spell");
            AddControlInWinForm("Use Immolation Aura", "UseImmolationAura", "Offensive Spell");
            AddControlInWinForm("Use Shadow Bolt", "UseShadowBolt", "Offensive Spell");
            AddControlInWinForm("Use Soul Fire", "UseSoulFire", "Offensive Spell");
            AddControlInWinForm("Use Summon Imp", "UseSummonImp", "Offensive Spell");
            AddControlInWinForm("Use Summon Voidwalker", "UseSummonVoidwalker", "Offensive Spell");
            AddControlInWinForm("Use Summon Felhunter", "UseSummonFelhunter", "Offensive Spell");
            AddControlInWinForm("Use Summon Succubus", "UseSummonSuccubus", "Offensive Spell");
            AddControlInWinForm("Use Summon Felguard", "UseSummonFelguard", "Offensive Spell");
            AddControlInWinForm("Use Touch of Chaos", "UseTouchofChaos", "Offensive Spell");
            AddControlInWinForm("Use Void Ray", "UseVoidRay", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Archimonde's Vengeance", "UseArchimondesVengeance", "Offensive Cooldown");
            AddControlInWinForm("Use Dark Soul", "UseDarkSoul", "Offensive Cooldown");
            AddControlInWinForm("Use Grimoire of Service", "UseGrimoireofService", "Offensive Cooldown");
            AddControlInWinForm("Use Summon Doomguard", "UseSummonDoomguard", "Offensive Cooldown");
            AddControlInWinForm("Use Summon Infernal", "UseSummonInfernal", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Dark Bargain", "UseDarkBargain", "Defensive Cooldown");
            AddControlInWinForm("Use Howl of Terror", "UseHowlofTerror", "Defensive Cooldown");
            AddControlInWinForm("Use Sacrificial Pact", "UseSacrificialPact", "Defensive Cooldown");
            AddControlInWinForm("Use Shadowfury", "UseShadowfury", "Defensive Cooldown");
            AddControlInWinForm("Use Twilight Ward", "UseTwilightWard", "Defensive Cooldown");
            AddControlInWinForm("Use Unbound Will", "UseUnboundWill", "Defensive Cooldown");
            AddControlInWinForm("Use Unending Resolve", "UseUnendingResolve", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Create Healthstone", "UseCreateHealthstone", "Healing Spell");
            AddControlInWinForm("Use Dark Regeneration", "UseDarkRegeneration", "Healing Spell");
            AddControlInWinForm("Use Drain Life", "UseDrainLife", "Healing Spell");
            AddControlInWinForm("Use Health Funnel", "UseHealthFunnel", "Healing Spell");
            AddControlInWinForm("Use Life Tap", "UseLifeTap", "Healing Spell");
            AddControlInWinForm("Use Mortal Coil", "UseMortalCoil", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket", "UseTrinket", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
        }

        public static WarlockDemonologySettings CurrentSetting { get; set; }

        public static WarlockDemonologySettings GetSettings()
        {
            string CurrentSettingsFile = Application.StartupPath + "\\CustomClasses\\Settings\\Warlock_Demonology.xml";
            if (File.Exists(CurrentSettingsFile))
            {
                return
                    CurrentSetting = Load<WarlockDemonologySettings>(CurrentSettingsFile);
            }
            else
            {
                return new WarlockDemonologySettings();
            }
        }
    }

    #endregion
}

public class Warlock_Destruction
{
    private readonly WarlockDestructionSettings MySettings = WarlockDestructionSettings.GetSettings();
    private readonly string MoveBackward = nManager.Wow.Helpers.Keybindings.GetKeyByAction(nManager.Wow.Enums.Keybindings.MOVEBACKWARD);

    #region General Timers & Variables

    private Timer AlchFlask_Timer = new Timer(0);
    private Timer Engineering_Timer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer Trinket_Timer = new Timer(0);
    public int LC = 0;

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell Arcane_Torrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell Blood_Fury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell Gift_of_the_Naaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell War_Stomp = new Spell("War Stomp");

    #endregion

    #region Warlock Buffs

    private readonly Spell Curse_of_Enfeeblement = new Spell("Curse of Enfeeblement");
    private readonly Spell Curse_of_the_Elements = new Spell("Curse of the Elements");
    private readonly Spell Dark_Intent = new Spell("Dark Intent");
    private readonly Spell Grimoire_of_Sacrifice = new Spell("Grimoire of Sacrifice");
    private readonly Spell Soul_Link = new Spell("Soul Link");
    private readonly Spell Soulstone = new Spell("Soulstone");

    #endregion

    #region Offensive Spell

    private readonly Spell Chaos_Bolt = new Spell("Chaos Bolt");
    private readonly Spell Command_Demon = new Spell("Command Demon");
    private readonly Spell Conflagrate = new Spell("Conflagrate");
    private readonly Spell Corruption = new Spell("Corruption");
    private readonly Spell Fel_Flame = new Spell("Fel Flame");
    private readonly Spell Fire_and_Brimstone = new Spell("Fire and Brimstone");
    private readonly Spell Harvest_Life = new Spell("Harvest Life");
    private readonly Spell Immolate = new Spell("Immolate");
    private readonly Spell Incinerate = new Spell("Incinerate");
    private readonly Spell Rain_of_Fire = new Spell("Rain of Fire");
    private readonly Spell Shadow_Bolt = new Spell("Shadow Bolt");
    private readonly Spell Shadowburn = new Spell("Shadowburn");
    private readonly Spell Summon_Felhunter = new Spell("Summon Felhunter");
    private readonly Spell Summon_Imp = new Spell("Summon Imp");
    private readonly Spell Summon_Succubus = new Spell("Summon Succubus");
    private readonly Spell Summon_Voidwalker = new Spell("Summon Voidwalker");
    private Timer Immolate_Timer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell Archimondes_Vengeance = new Spell("Archimonde's Vengeance");
    private readonly Spell Dark_Soul = new Spell("Dark Soul");
    private readonly Spell Grimoire_of_Service = new Spell("Grimoire of Service");
    private readonly Spell Summon_Doomguard = new Spell("Summon Doomguard");
    private readonly Spell Summon_Infernal = new Spell("Summon Infernal");

    #endregion

    #region Defensive Cooldown

    private readonly Spell Dark_Bargain = new Spell("Dark Bargain");
    private readonly Spell Howl_of_Terror = new Spell("Howl_of_Terror");
    private readonly Spell Sacrificial_Pact = new Spell("Sacrificial Pact");
    private readonly Spell Shadowfury = new Spell("Shadowfury");
    private readonly Spell Twilight_Ward = new Spell("Twilight Ward");
    private readonly Spell Unbound_Will = new Spell("Unbound Will");
    private readonly Spell Unending_Resolve = new Spell("Unending Resolve");

    #endregion

    #region Healing Spell

    private readonly Spell Create_Healthstone = new Spell("Create Healthstone");
    private readonly Spell Dark_Regeneration = new Spell("Dark Regeneration");
    private readonly Spell Drain_Life = new Spell("Drain Life");
    private readonly Spell Ember_Tap = new Spell("Ember Tap");
    private readonly Spell Flames_of_Xoroth = new Spell("Flames of Xoroth");
    private readonly Spell Health_Funnel = new Spell("Health Funnel");
    private readonly Spell Life_Tap = new Spell("Life Tap");
    private readonly Spell Mortal_Coil = new Spell("Mortal Coil");
    private Timer Healthstone_Timer = new Timer(0);

    #endregion

    public Warlock_Destruction()
    {
        Main.range = 30.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (Curse_of_the_Elements.IsDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && MySettings.UseLowCombat)
                            {
                                LC = 1;
                                LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(250);
        }
    }

    private void Pull()
    {
        if (Curse_of_the_Elements.KnownSpell && Curse_of_the_Elements.IsSpellUsable
            && Curse_of_the_Elements.IsDistanceGood && !Curse_of_the_Elements.TargetHaveBuff
            && MySettings.UseCurseoftheElements)
        {
            Curse_of_the_Elements.Launch();
            return;
        }
    }

    private void LowCombat()
    {
        Buff();
        AvoidMelee();
        Defense_Cycle();
        Heal();

        // Blizzard API Calls for Incinerate using Shadow Bolt Function
        if (Shadow_Bolt.KnownSpell && Shadow_Bolt.IsSpellUsable && Shadow_Bolt.IsDistanceGood
            && MySettings.UseIncinerate)
        {
            Shadow_Bolt.Launch();
            return;
        }

        if (ObjectManager.Target.HealthPercent < 50 && ObjectManager.Target.HealthPercent > 0)
        {
            if (Shadow_Bolt.KnownSpell && Shadow_Bolt.IsSpellUsable && Shadow_Bolt.IsDistanceGood
                && MySettings.UseIncinerate)
            {
                Shadow_Bolt.Launch();
                return;
            }
        }

        if (Rain_of_Fire.IsSpellUsable && Rain_of_Fire.KnownSpell && Rain_of_Fire.IsDistanceGood
            && MySettings.UseRainofFire)
        {
            SpellManager.CastSpellByIDAndPosition(5740, ObjectManager.Target.Position);
            while (ObjectManager.Me.IsCast)
            {
                Thread.Sleep(200);
            }
            return;
        }
    }

    private void Combat()
    {
        Buff();
        AvoidMelee();
        if (OnCD.IsReady)
            Defense_Cycle();
        Heal();
        Decast();
        DPS_Burst();
        DPS_Cycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        Pet();

        if (!Dark_Intent.HaveBuff && Dark_Intent.KnownSpell && Dark_Intent.IsSpellUsable
            && MySettings.UseDarkIntent)
        {
            Dark_Intent.Launch();
            return;
        }
        else if (!Soul_Link.HaveBuff && Soul_Link.KnownSpell && Soul_Link.IsSpellUsable
                 && MySettings.UseSoulLink && (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0))
        {
            Soul_Link.Launch();
            return;
        }
        if (!Soulstone.HaveBuff && Soulstone.KnownSpell && Soulstone.IsSpellUsable
            && MySettings.UseSoulstone)
        {
            Soulstone.Launch();
            return;
        }
        else
        {
            if (ItemsManager.GetItemCountByIdLUA(5512) == 0 && Create_Healthstone.KnownSpell
                && Create_Healthstone.IsSpellUsable && MySettings.UseCreateHealthstone)
            {
                Logging.WriteFight(" - Create Healthstone - ");
                Thread.Sleep(200);
                Create_Healthstone.Launch();
                Thread.Sleep(200);
                while (ObjectManager.Me.IsCast)
                {
                    Thread.Sleep(200);
                }
            }
        }
    }

    private void Pet()
    {
        if (Health_Funnel.KnownSpell)
        {
            if (ObjectManager.Pet.HealthPercent > 0 && ObjectManager.Pet.HealthPercent < 50
                && Health_Funnel.IsSpellUsable && Health_Funnel.KnownSpell && MySettings.UseHealthFunnel)
            {
                Health_Funnel.Launch();
                while (ObjectManager.Me.IsCast)
                {
                    if (ObjectManager.Pet.HealthPercent > 85 || ObjectManager.Pet.IsDead)
                        break;
                    Thread.Sleep(100);
                }
            }
        }

        if (MySettings.UseFlamesofXoroth && Flames_of_Xoroth.KnownSpell && Flames_of_Xoroth.IsSpellUsable &&
            (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0) && !Grimoire_of_Sacrifice.HaveBuff)
        {
            Flames_of_Xoroth.Launch();
            Logging.WriteFight(" - PET DEAD - ");
        }
        else if (MySettings.UseSummonFelhunter && Summon_Felhunter.KnownSpell && Summon_Felhunter.IsSpellUsable &&
                 (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0) && !Grimoire_of_Sacrifice.HaveBuff)
        {
            Summon_Felhunter.Launch();
            Logging.WriteFight(" - PET DEAD - ");
        }
        else if (MySettings.UseSummonImp && Summon_Imp.KnownSpell && Summon_Imp.IsSpellUsable &&
                 (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0) && !Grimoire_of_Sacrifice.HaveBuff)
        {
            Summon_Imp.Launch();
            Logging.WriteFight(" - PET DEAD - ");
        }
        else if (MySettings.UseSummonVoidwalker && Summon_Voidwalker.KnownSpell &&
                 Summon_Voidwalker.IsSpellUsable &&
                 (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0) && !Grimoire_of_Sacrifice.HaveBuff)
        {
            Summon_Voidwalker.Launch();
            Logging.WriteFight(" - PET DEAD - ");
        }
        else if (MySettings.UseSummonSuccubus && Summon_Succubus.KnownSpell &&
                 Summon_Succubus.IsSpellUsable &&
                 (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0) && !Grimoire_of_Sacrifice.HaveBuff)
        {
            Summon_Succubus.Launch();
            Logging.WriteFight(" - PET DEAD - ");
        }
        Thread.Sleep(200);
        if (Grimoire_of_Sacrifice.KnownSpell && !Grimoire_of_Sacrifice.HaveBuff && Grimoire_of_Sacrifice.IsSpellUsable
            && MySettings.UseGrimoireofSacrifice && (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0))
        {
            Grimoire_of_Sacrifice.Launch();
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            Keyboard.DownKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
            while (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
                Thread.Sleep(300);
            Keyboard.UpKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
        }
    }

    private void Defense_Cycle()
    {
        if (ObjectManager.Me.HealthPercent < 70 && MySettings.UseUnendingResolve
            && Unending_Resolve.KnownSpell && Unending_Resolve.IsSpellUsable)
        {
            Unending_Resolve.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 20 && MySettings.UseHowlofTerror
                 && Howl_of_Terror.KnownSpell && Howl_of_Terror.IsSpellUsable && ObjectManager.Target.GetDistance < 8)
        {
            Howl_of_Terror.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 40 && MySettings.UseDarkBargain
                 && Dark_Bargain.KnownSpell && Dark_Bargain.IsSpellUsable)
        {
            Dark_Bargain.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 95 && MySettings.UseSacrificialPact
                 && Sacrificial_Pact.KnownSpell && Sacrificial_Pact.IsSpellUsable
                 && (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0))
        {
            Sacrificial_Pact.Launch();
            OnCD = new Timer(1000*10);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 90 && MySettings.UseShadowfury
                 && Shadowfury.KnownSpell && Shadowfury.IsSpellUsable && ObjectManager.Target.GetDistance < 8)
        {
            Shadowfury.Launch();
            OnCD = new Timer(1000*3);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseWarStompAtPercentage && War_Stomp.IsSpellUsable && War_Stomp.KnownSpell
                 && MySettings.UseWarStomp)
        {
            War_Stomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent <= MySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable && Stoneform.KnownSpell
                && MySettings.UseStoneform)
            {
                Stoneform.Launch();
                OnCD = new Timer(1000*8);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell && ObjectManager.Me.HealthPercent <= MySettings.UseArcaneTorrentForResourceAtPercentage
                && MySettings.UseArcaneTorrentForResource)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseGiftoftheNaaruAtPercentage && Gift_of_the_Naaru.IsSpellUsable && Gift_of_the_Naaru.KnownSpell
            && MySettings.UseGiftoftheNaaru)
        {
            Gift_of_the_Naaru.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 60 && Ember_Tap.IsSpellUsable && Ember_Tap.KnownSpell
                 && MySettings.UseEmberTap)
        {
            Ember_Tap.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 65 && Dark_Regeneration.IsSpellUsable && Dark_Regeneration.KnownSpell
                 && MySettings.UseDarkRegeneration)
        {
            Dark_Regeneration.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 75 && ItemsManager.GetItemCountByIdLUA(5512) > 0
                 && MySettings.UseCreateHealthstone && Healthstone_Timer.IsReady)
        {
            Logging.WriteFight("Use Healthstone.");
            ItemsManager.UseItem("Healthstone");
            Healthstone_Timer = new Timer(1000*60*2);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 85 && Mortal_Coil.IsSpellUsable && Mortal_Coil.KnownSpell
                 && MySettings.UseMortalCoil && Mortal_Coil.IsDistanceGood)
        {
            Mortal_Coil.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent < 70 && Drain_Life.KnownSpell
                && MySettings.UseDrainLife && Drain_Life.IsDistanceGood && Drain_Life.IsSpellUsable)
            {
                Drain_Life.Launch();
                while (ObjectManager.Me.IsCast)
                {
                    Thread.Sleep(200);
                }
                return;
            }
        }
    }

    private void Decast()
    {
        if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell && ObjectManager.Target.GetDistance < 8
            && ObjectManager.Me.HealthPercent <= MySettings.UseArcaneTorrentForDecastAtPercentage
            && MySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                 && MySettings.UseTwilightWard && Twilight_Ward.KnownSpell && Twilight_Ward.IsSpellUsable)
        {
            Twilight_Ward.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && MySettings.UseSummonFelhunter
                && Command_Demon.IsSpellUsable && Command_Demon.KnownSpell && ObjectManager.Target.GetDistance < 40)
            {
                Command_Demon.Launch();
                return;
            }
        }
    }

    private void DPS_Burst()
    {
        if (MySettings.UseTrinket && Trinket_Timer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Trinket_Timer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBerserking)
            Berserking.Launch();
        else if (Blood_Fury.IsSpellUsable && Blood_Fury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBloodFury)
            Blood_Fury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (Engineering_Timer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                && MySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            Engineering_Timer = new Timer(1000*60);
        }
        else if (Dark_Soul.KnownSpell && Dark_Soul.IsSpellUsable
                 && MySettings.UseDarkSoul && ObjectManager.Target.GetDistance < 40)
        {
            Dark_Soul.Launch();
            return;
        }
        else if (Summon_Doomguard.KnownSpell && Summon_Doomguard.IsSpellUsable
                 && MySettings.UseSummonDoomguard && Summon_Doomguard.IsDistanceGood)
        {
            Summon_Doomguard.Launch();
            return;
        }
        else if (Summon_Infernal.KnownSpell && Summon_Infernal.IsSpellUsable
                 && MySettings.UseSummonInfernal && Summon_Infernal.IsDistanceGood)
        {
            SpellManager.CastSpellByIDAndPosition(1122, ObjectManager.Target.Position);
            return;
        }
        else if (Archimondes_Vengeance.KnownSpell && Archimondes_Vengeance.IsSpellUsable
                 && MySettings.UseArchimondesVengeance)
        {
            Archimondes_Vengeance.Launch();
            return;
        }
        else
        {
            if (Grimoire_of_Service.KnownSpell && Grimoire_of_Service.IsSpellUsable
                && MySettings.UseGrimoireofService && ObjectManager.Target.GetDistance < 40)
            {
                Grimoire_of_Service.Launch();
                return;
            }
        }
    }

    private void DPS_Cycle()
    {
        if (Curse_of_the_Elements.KnownSpell && Curse_of_the_Elements.IsSpellUsable && MySettings.UseCurseoftheElements
            && Curse_of_the_Elements.IsDistanceGood && !Curse_of_the_Elements.TargetHaveBuff)
        {
            Curse_of_the_Elements.Launch();
            return;
        }
        else if (Curse_of_Enfeeblement.KnownSpell && Curse_of_Enfeeblement.IsSpellUsable &&
                 MySettings.UseCurseofEnfeeblement
                 && Curse_of_Enfeeblement.IsDistanceGood && !Curse_of_Enfeeblement.TargetHaveBuff &&
                 !MySettings.UseCurseoftheElements)
        {
            Curse_of_Enfeeblement.Launch();
            return;
        }
        // Blizzard API Calls for Immolate using Corruption Function
        else if (ObjectManager.GetNumberAttackPlayer() > 4 && Fire_and_Brimstone.IsSpellUsable &&
                 Fire_and_Brimstone.KnownSpell
                 && !ObjectManager.Target.HaveBuff(348) && Corruption.IsSpellUsable && Corruption.KnownSpell &&
                 Corruption.IsDistanceGood
                 && MySettings.UseFireandBrimstone && MySettings.UseImmolate)
        {
            Fire_and_Brimstone.Launch();
            Thread.Sleep(200);
            Corruption.Launch();
            Immolate_Timer = new Timer(1000*12);
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 4 && ObjectManager.Target.HaveBuff(348)
                 && MySettings.UseHarvestLife && Harvest_Life.KnownSpell && Harvest_Life.IsSpellUsable
                 && Harvest_Life.IsDistanceGood)
        {
            Harvest_Life.Launch();
            while (ObjectManager.Me.IsCast)
            {
                Thread.Sleep(200);
            }
            return;
        }
        // Blizzard API Calls for Incinerate using Shadow Bolt Function
        else if (ObjectManager.GetNumberAttackPlayer() > 4 && Fire_and_Brimstone.IsSpellUsable &&
                 Fire_and_Brimstone.KnownSpell
                 && Shadow_Bolt.KnownSpell && Shadow_Bolt.IsSpellUsable && Shadow_Bolt.IsDistanceGood
                 && MySettings.UseFireandBrimstone && MySettings.UseIncinerate)
        {
            Fire_and_Brimstone.Launch();
            Thread.Sleep(200);
            Shadow_Bolt.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 4 && Rain_of_Fire.IsSpellUsable &&
                 Rain_of_Fire.KnownSpell
                 && Rain_of_Fire.IsDistanceGood && MySettings.UseRainofFire)
        {
            SpellManager.CastSpellByIDAndPosition(5740, ObjectManager.Target.Position);
            while (ObjectManager.Me.IsCast)
            {
                Thread.Sleep(200);
            }
            return;
        }
        else if (Conflagrate.KnownSpell && Conflagrate.IsSpellUsable && Conflagrate.IsDistanceGood
                 && MySettings.UseConflagrate)
        {
            Conflagrate.Launch();
            return;
        }
        else
        {
            if (Corruption.IsSpellUsable && Corruption.KnownSpell && Corruption.IsDistanceGood
                && MySettings.UseImmolate && !ObjectManager.Target.HaveBuff(348) ||
                Immolate_Timer.IsReady)
            {
                Corruption.Launch();
                Immolate_Timer = new Timer(1000*12);
                return;
            }
        }

        if (ObjectManager.Target.HealthPercent < 20)
        {
            if (Shadowburn.KnownSpell && Shadowburn.IsSpellUsable && Shadowburn.IsDistanceGood
                && !ObjectManager.Me.HaveBuff(117828) && MySettings.UseShadowburn)
            {
                Shadowburn.Launch();
                return;
            }
        }
        else
        {
            if (Chaos_Bolt.KnownSpell && Chaos_Bolt.IsSpellUsable && Chaos_Bolt.IsDistanceGood
                && !ObjectManager.Me.HaveBuff(117828) && MySettings.UseChaosBolt)
            {
                Chaos_Bolt.Launch();
                return;
            }
        }

        if (Shadow_Bolt.KnownSpell && Shadow_Bolt.IsSpellUsable && Shadow_Bolt.IsDistanceGood
            && MySettings.UseIncinerate)
        {
            Shadow_Bolt.Launch();
            return;
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: WarlockDestructionSettings

    [Serializable]
    public class WarlockDestructionSettings : Settings
    {
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public int UseStoneformAtPercentage = 80;
        public int UseWarStompAtPercentage = 80;
        public bool UseAlchFlask = true;
        public bool UseArcaneTorrentForDecast = true;
        public bool UseArcaneTorrentForResource = true;
        public bool UseArchimondesVengeance = true;
        public bool UseBerserking = true;
        public bool UseBloodFury = true;
        public bool UseChaosBolt = true;
        public bool UseCommandDemon = true;
        public bool UseConflagrate = true;
        public bool UseCreateHealthstone = true;
        public bool UseCurseofEnfeeblement = false;
        public bool UseCurseoftheElements = true;
        public bool UseDarkBargain = true;
        public bool UseDarkIntent = true;
        public bool UseDarkRegeneration = true;
        public bool UseDarkSoul = true;
        public bool UseDrainLife = true;
        public bool UseEmberTap = true;
        public bool UseEngGlove = true;
        public bool UseFelFlame = true;
        public bool UseFireandBrimstone = true;
        public bool UseFlamesofXoroth = true;
        public bool UseGiftoftheNaaru = true;
        public bool UseGrimoireofSacrifice = true;
        public bool UseGrimoireofService = true;
        public bool UseHarvestLife = true;
        public bool UseHealthFunnel = true;
        public bool UseHowlofTerror = true;
        public bool UseImmolate = true;
        public bool UseIncinerate = true;
        public bool UseLifeTap = true;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMortalCoil = true;
        public bool UseRainofFire = true;
        public bool UseSacrificialPact = true;
        public bool UseShadowburn = true;
        public bool UseShadowfury = true;
        public bool UseSoulLink = true;
        public bool UseSoulstone = true;
        public bool UseStoneform = true;
        public bool UseSummonDoomguard = true;
        public bool UseSummonFelhunter = true;
        public bool UseSummonImp = false;
        public bool UseSummonInfernal = false;
        public bool UseSummonSuccubus = false;
        public bool UseSummonVoidwalker = false;
        public bool UseTrinket = true;
        public bool UseTwilightWard = true;
        public bool UseUnboundWill = true;
        public bool UseUnendingResolve = true;
        public bool UseWarStomp = true;

        public WarlockDestructionSettings()
        {
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrent", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Warlock Buffs */
            AddControlInWinForm("Use Curse of Enfeeblement", "UseCurseofEnfeeblement", "Warlock Buffs");
            AddControlInWinForm("Use Curse of the Elements", "UseCurseoftheElements", "Warlock Buffs");
            AddControlInWinForm("Use Dark Intent", "UseDarkIntent", "Warlock Buffs");
            AddControlInWinForm("Use Grimoire of Sacrifice", "UseGrimoireofSacrifice", "Warlock Buffs");
            AddControlInWinForm("Use Soul Link ", "UseSoulLink ", "Warlock Buffs");
            AddControlInWinForm("Use Soulstone", "UseSoulstone", "Warlock Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Chaos Bolt", "UseChaosBolt", "Offensive Spell");
            AddControlInWinForm("Use Command Demon", "UseCommandDemon", "Offensive Spell");
            AddControlInWinForm("Use Conflagrate", "UseConflagrate", "Offensive Spell");
            AddControlInWinForm("Use Fel Flame", "UseFelFlame", "Offensive Spell");
            AddControlInWinForm("Use Fire and Brimstone", "UseFireandBrimstone", "Offensive Spell");
            AddControlInWinForm("Use Harvest Life", "UseHarvestLife", "Offensive Spell");
            AddControlInWinForm("Use Immolate", "UseImmolate", "Offensive Spell");
            AddControlInWinForm("Use Incinerate", "UseIncinerate", "Offensive Spell");
            AddControlInWinForm("Use Rain of Fire", "UseRainofFire", "Offensive Spell");
            AddControlInWinForm("Use Shadowburn", "UseShadowburn", "Offensive Spell");
            AddControlInWinForm("Use Summon Imp", "UseSummonImp", "Offensive Spell");
            AddControlInWinForm("Use Summon Voidwalker", "UseSummonVoidwalker", "Offensive Spell");
            AddControlInWinForm("Use Summon Felhunter", "UseSummonFelhunter", "Offensive Spell");
            AddControlInWinForm("Use Summon Succubus", "UseSummonSuccubus", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Archimonde's Vengeance", "UseArchimondesVengeance", "Offensive Cooldown");
            AddControlInWinForm("Use Dark Soul", "UseDarkSoul", "Offensive Cooldown");
            AddControlInWinForm("Use Grimoire of Service", "UseGrimoireofService", "Offensive Cooldown");
            AddControlInWinForm("Use Summon Doomguard", "UseSummonDoomguard", "Offensive Cooldown");
            AddControlInWinForm("Use Summon Infernal", "UseSummonInfernal", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Dark Bargain", "UseDarkBargain", "Defensive Cooldown");
            AddControlInWinForm("Use Howl of Terror", "UseHowlofTerror", "Defensive Cooldown");
            AddControlInWinForm("Use Sacrificial Pact", "UseSacrificialPact", "Defensive Cooldown");
            AddControlInWinForm("Use Shadowfury", "UseShadowfury", "Defensive Cooldown");
            AddControlInWinForm("Use Twilight Ward", "UseTwilightWard", "Defensive Cooldown");
            AddControlInWinForm("Use Unbound Will", "UseUnboundWill", "Defensive Cooldown");
            AddControlInWinForm("Use Unending Resolve", "UseUnendingResolve", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Create Healthstone", "UseCreateHealthstone", "Healing Spell");
            AddControlInWinForm("Use Dark Regeneration", "UseDarkRegeneration", "Healing Spell");
            AddControlInWinForm("Use Drain Life", "UseDrainLife", "Healing Spell");
            AddControlInWinForm("Use Ember Tap", "UseEmberTap", "Healing Spell");
            AddControlInWinForm("Use Flames of Xoroth", "UseFlamesofXoroth", "Healing Spell");
            AddControlInWinForm("Use Health Funnel", "UseHealthFunnel", "Healing Spell");
            AddControlInWinForm("Use Life Tap", "UseLifeTap", "Healing Spell");
            AddControlInWinForm("Use Mortal Coil", "UseMortalCoil", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket", "UseTrinket", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
        }

        public static WarlockDestructionSettings CurrentSetting { get; set; }

        public static WarlockDestructionSettings GetSettings()
        {
            string CurrentSettingsFile = Application.StartupPath + "\\CustomClasses\\Settings\\Warlock_Destruction.xml";
            if (File.Exists(CurrentSettingsFile))
            {
                return
                    CurrentSetting = Load<WarlockDestructionSettings>(CurrentSettingsFile);
            }
            else
            {
                return new WarlockDestructionSettings();
            }
        }
    }

    #endregion
}

public class Warlock_Affliction
{
    private readonly WarlockAfflictionSettings MySettings = WarlockAfflictionSettings.GetSettings();
    private readonly string MoveBackward = nManager.Wow.Helpers.Keybindings.GetKeyByAction(nManager.Wow.Enums.Keybindings.MOVEBACKWARD);

    #region General Timers & Variables

    private Timer AlchFlask_Timer = new Timer(0);
    private Timer Engineering_Timer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer Trinket_Timer = new Timer(0);
    public int LC = 0;

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell Arcane_Torrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell Blood_Fury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell Gift_of_the_Naaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell War_Stomp = new Spell("War Stomp");

    #endregion

    #region Warlock Buffs

    private readonly Spell Curse_of_Enfeeblement = new Spell("Curse of Enfeeblement");
    private readonly Spell Curse_of_Exhaustion = new Spell("Curse of Exhaustion");
    private readonly Spell Curse_of_the_Elements = new Spell("Curse of the Elements");
    private readonly Spell Dark_Intent = new Spell("Dark Intent");
    private readonly Spell Grimoire_of_Sacrifice = new Spell("Grimoire of Sacrifice");
    private readonly Spell Soul_Link = new Spell("Soul Link");
    private readonly Spell Soulstone = new Spell("Soulstone");

    #endregion

    #region Offensive Spell

    private readonly Spell Agony = new Spell("Agony");
    private readonly Spell Command_Demon = new Spell("Command Demon");
    private readonly Spell Corruption = new Spell("Corruption");
    private readonly Spell Drain_Soul = new Spell("Drain Soul");
    private readonly Spell Fel_Flame = new Spell("Fel Flame");
    private readonly Spell Harvest_Life = new Spell("Harvest Life");
    private readonly Spell Haunt = new Spell("Haunt");
    private readonly Spell Malefic_Grasp = new Spell("Malefic Grasp");
    private readonly Spell Rain_of_Fire = new Spell("Rain of Fire");
    private readonly Spell Seed_of_Corruption = new Spell("Seed of Corruption");
    private readonly Spell Shadow_Bolt = new Spell("Shadow Bolt");
    private readonly Spell Soul_Swap = new Spell("Soul Swap");
    private readonly Spell Soulburn = new Spell("Soulburn");
    private readonly Spell Summon_Felguard = new Spell("Summon Felguard");
    private readonly Spell Summon_Felhunter = new Spell("Summon Felhunter");
    private readonly Spell Summon_Imp = new Spell("Summon Imp");
    private readonly Spell Summon_Succubus = new Spell("Summon Succubus");
    private readonly Spell Summon_Voidwalker = new Spell("Summon Voidwalker");
    private readonly Spell Unstable_Affliction = new Spell("Unstable Affliction");
    private Timer Agony_Timer = new Timer(0);
    private Timer Corruption_Timer = new Timer(0);
    private Timer Unstable_Affliction_Timer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell Archimondes_Vengeance = new Spell("Archimonde's Vengeance");
    private readonly Spell Dark_Soul = new Spell("Dark Soul");
    private readonly Spell Grimoire_of_Service = new Spell("Grimoire of Service");
    private readonly Spell Summon_Doomguard = new Spell("Summon Doomguard");
    private readonly Spell Summon_Infernal = new Spell("Summon Infernal");

    #endregion

    #region Defensive Cooldown

    private readonly Spell Dark_Bargain = new Spell("Dark Bargain");
    private readonly Spell Howl_of_Terror = new Spell("Howl_of_Terror");
    private readonly Spell Sacrificial_Pact = new Spell("Sacrificial Pact");
    private readonly Spell Shadowfury = new Spell("Shadowfury");
    private readonly Spell Twilight_Ward = new Spell("Twilight Ward");
    private readonly Spell Unbound_Will = new Spell("Unbound Will");
    private readonly Spell Unending_Resolve = new Spell("Unending Resolve");

    #endregion

    #region Healing Spell

    private readonly Spell Create_Healthstone = new Spell("Create Healthstone");
    private readonly Spell Dark_Regeneration = new Spell("Dark Regeneration");
    private readonly Spell Drain_Life = new Spell("Drain Life");
    private readonly Spell Health_Funnel = new Spell("Health Funnel");
    private readonly Spell Life_Tap = new Spell("Life Tap");
    private readonly Spell Mortal_Coil = new Spell("Mortal Coil");
    private Timer Healthstone_Timer = new Timer(0);

    #endregion

    public Warlock_Affliction()
    {
        Main.range = 30.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (Soul_Swap.IsDistanceGood || Agony.IsDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && MySettings.UseLowCombat)
                            {
                                LC = 1;
                                LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(250);
        }
    }

    private void Pull()
    {
        if (!Agony.TargetHaveBuff && !Corruption.TargetHaveBuff && !Unstable_Affliction.TargetHaveBuff)
        {
            if (Soulburn.IsSpellUsable && Soulburn.KnownSpell && Soul_Swap.IsSpellUsable && Soul_Swap.KnownSpell
                && Soul_Swap.IsDistanceGood && MySettings.UseSoulSwap && MySettings.UseSoulburn)
            {
                if (!Soulburn.HaveBuff)
                {
                    Soulburn.Launch();
                    Thread.Sleep(200);
                }
                Soul_Swap.Launch();
                Agony_Timer = new Timer(1000*20);
                Corruption_Timer = new Timer(1000*15);
                Unstable_Affliction_Timer = new Timer(1000*10);
            }
        }
        return;
    }

    private void LowCombat()
    {
        Buff();
        AvoidMelee();
        Defense_Cycle();
        Heal();

        if (ObjectManager.Me.BarTwoPercentage < 75 && Life_Tap.KnownSpell && Life_Tap.IsSpellUsable
            && MySettings.UseLifeTap)
        {
            Life_Tap.Launch();
            return;
        }

        if (Malefic_Grasp.KnownSpell && Malefic_Grasp.IsSpellUsable && Malefic_Grasp.IsDistanceGood
            && MySettings.UseMaleficGrasp)
        {
            Malefic_Grasp.Launch();
            Thread.Sleep(200);
            while (ObjectManager.Me.IsCast)
            {
                Thread.Sleep(200);
            }
        }

        if (ObjectManager.Target.HealthPercent < 50 && ObjectManager.Target.HealthPercent > 0)
        {
            if (Malefic_Grasp.KnownSpell && Malefic_Grasp.IsSpellUsable && Malefic_Grasp.IsDistanceGood
                && MySettings.UseMaleficGrasp)
            {
                Malefic_Grasp.Launch();
                Thread.Sleep(200);
                while (ObjectManager.Me.IsCast)
                {
                    Thread.Sleep(200);
                }
            }
        }

        if (ObjectManager.Target.HealthPercent > 90)
        {
            if (Rain_of_Fire.IsSpellUsable && Rain_of_Fire.KnownSpell && Rain_of_Fire.IsDistanceGood
                && MySettings.UseRainofFire)
            {
                SpellManager.CastSpellByIDAndPosition(5740, ObjectManager.Target.Position);
                while (ObjectManager.Me.IsCast)
                {
                    Thread.Sleep(200);
                }
                return;
            }
        }
        return;
    }

    private void Combat()
    {
        Buff();
        AvoidMelee();
        if (OnCD.IsReady)
            Defense_Cycle();
        Heal();
        Decast();
        DPS_Burst();
        DPS_Cycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        Pet();

        if (!Dark_Intent.HaveBuff && Dark_Intent.KnownSpell && Dark_Intent.IsSpellUsable
            && MySettings.UseDarkIntent)
        {
            Dark_Intent.Launch();
            return;
        }
        else if (!Soul_Link.HaveBuff && Soul_Link.KnownSpell && Soul_Link.IsSpellUsable
                 && MySettings.UseSoulLink && (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0))
        {
            Soul_Link.Launch();
            return;
        }
        if (!Soulstone.HaveBuff && Soulstone.KnownSpell && Soulstone.IsSpellUsable
            && MySettings.UseSoulstone)
        {
            Soulstone.Launch();
            return;
        }
        else
        {
            if (ItemsManager.GetItemCountByIdLUA(5512) == 0 && Create_Healthstone.KnownSpell
                && Create_Healthstone.IsSpellUsable && MySettings.UseCreateHealthstone)
            {
                Logging.WriteFight(" - Create Healthstone - ");
                Thread.Sleep(200);
                Create_Healthstone.Launch();
                Thread.Sleep(200);
                while (ObjectManager.Me.IsCast)
                {
                    Thread.Sleep(200);
                }
            }
        }
    }

    private void Pet()
    {
        if (Health_Funnel.KnownSpell)
        {
            if (ObjectManager.Pet.HealthPercent > 0 && ObjectManager.Pet.HealthPercent < 50
                && Health_Funnel.IsSpellUsable && Health_Funnel.KnownSpell && MySettings.UseHealthFunnel)
            {
                Health_Funnel.Launch();
                while (ObjectManager.Me.IsCast)
                {
                    if (ObjectManager.Pet.HealthPercent > 85 || ObjectManager.Pet.IsDead)
                        break;
                    Thread.Sleep(100);
                }
            }
        }

        if (MySettings.UseSummonFelhunter && Summon_Felhunter.KnownSpell && Summon_Felhunter.IsSpellUsable &&
            (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0) && !Grimoire_of_Sacrifice.HaveBuff)
        {
            Summon_Felhunter.Launch();
            Logging.WriteFight(" - PET DEAD - ");
        }
        else if (MySettings.UseSummonImp && Summon_Imp.KnownSpell && Summon_Imp.IsSpellUsable &&
                 (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0) && !Grimoire_of_Sacrifice.HaveBuff)
        {
            Summon_Imp.Launch();
            Logging.WriteFight(" - PET DEAD - ");
        }
        else if (MySettings.UseSummonVoidwalker && Summon_Voidwalker.KnownSpell &&
                 Summon_Voidwalker.IsSpellUsable &&
                 (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0) && !Grimoire_of_Sacrifice.HaveBuff)
        {
            Summon_Voidwalker.Launch();
            Logging.WriteFight(" - PET DEAD - ");
        }
        else if (MySettings.UseSummonSuccubus && Summon_Succubus.KnownSpell &&
                 Summon_Succubus.IsSpellUsable &&
                 (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0) && !Grimoire_of_Sacrifice.HaveBuff)
        {
            Summon_Succubus.Launch();
            Logging.WriteFight(" - PET DEAD - ");
        }
        Thread.Sleep(200);
        if (Grimoire_of_Sacrifice.KnownSpell && !Grimoire_of_Sacrifice.HaveBuff && Grimoire_of_Sacrifice.IsSpellUsable
            && MySettings.UseGrimoireofSacrifice && (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0))
        {
            Grimoire_of_Sacrifice.Launch();
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            Keyboard.DownKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
            while (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
                Thread.Sleep(300);
            Keyboard.UpKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
        }
    }

    private void Defense_Cycle()
    {
        if (ObjectManager.Me.HealthPercent < 70 && MySettings.UseUnendingResolve
            && Unending_Resolve.KnownSpell && Unending_Resolve.IsSpellUsable)
        {
            Unending_Resolve.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 20 && MySettings.UseHowlofTerror
                 && Howl_of_Terror.KnownSpell && Howl_of_Terror.IsSpellUsable && ObjectManager.Target.GetDistance < 8)
        {
            Howl_of_Terror.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 40 && MySettings.UseDarkBargain
                 && Dark_Bargain.KnownSpell && Dark_Bargain.IsSpellUsable)
        {
            Dark_Bargain.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 95 && MySettings.UseSacrificialPact
                 && Sacrificial_Pact.KnownSpell && Sacrificial_Pact.IsSpellUsable
                 && (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0))
        {
            Sacrificial_Pact.Launch();
            OnCD = new Timer(1000*10);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 90 && MySettings.UseShadowfury
                 && Shadowfury.KnownSpell && Shadowfury.IsSpellUsable && ObjectManager.Target.GetDistance < 8)
        {
            Shadowfury.Launch();
            OnCD = new Timer(1000*3);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseWarStompAtPercentage && War_Stomp.IsSpellUsable && War_Stomp.KnownSpell
                 && MySettings.UseWarStomp)
        {
            War_Stomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent <= MySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable && Stoneform.KnownSpell
                && MySettings.UseStoneform)
            {
                Stoneform.Launch();
                OnCD = new Timer(1000*8);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell && ObjectManager.Me.HealthPercent <= MySettings.UseArcaneTorrentForResourceAtPercentage
                && MySettings.UseArcaneTorrentForResource)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseGiftoftheNaaruAtPercentage && Gift_of_the_Naaru.IsSpellUsable && Gift_of_the_Naaru.KnownSpell
            && MySettings.UseGiftoftheNaaru)
        {
            Gift_of_the_Naaru.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 65 && Dark_Regeneration.IsSpellUsable && Dark_Regeneration.KnownSpell
                 && MySettings.UseDarkRegeneration)
        {
            Dark_Regeneration.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 75 && ItemsManager.GetItemCountByIdLUA(5512) > 0
                 && MySettings.UseCreateHealthstone && Healthstone_Timer.IsReady)
        {
            Logging.WriteFight("Use Healthstone.");
            ItemsManager.UseItem("Healthstone");
            Healthstone_Timer = new Timer(1000*60*2);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 85 && Mortal_Coil.IsSpellUsable && Mortal_Coil.KnownSpell
                 && MySettings.UseMortalCoil && Mortal_Coil.IsDistanceGood)
        {
            Mortal_Coil.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent < 70 && Drain_Life.KnownSpell
                && MySettings.UseDrainLife && Drain_Life.IsDistanceGood && Drain_Life.IsSpellUsable)
            {
                Drain_Life.Launch();
                while (ObjectManager.Me.IsCast)
                {
                    Thread.Sleep(200);
                }
                return;
            }
        }
    }

    private void Decast()
    {
        if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell && ObjectManager.Target.GetDistance < 8
            && ObjectManager.Me.HealthPercent <= MySettings.UseArcaneTorrentForDecastAtPercentage
            && MySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                 && MySettings.UseTwilightWard && Twilight_Ward.KnownSpell && Twilight_Ward.IsSpellUsable)
        {
            Twilight_Ward.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && MySettings.UseSummonFelhunter
                && Command_Demon.IsSpellUsable && Command_Demon.KnownSpell && ObjectManager.Target.GetDistance < 40)
            {
                Command_Demon.Launch();
                return;
            }
        }
    }

    private void DPS_Burst()
    {
        if (MySettings.UseTrinket && Trinket_Timer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Trinket_Timer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBerserking)
            Berserking.Launch();
        else if (Blood_Fury.IsSpellUsable && Blood_Fury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBloodFury)
            Blood_Fury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (Engineering_Timer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                && MySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            Engineering_Timer = new Timer(1000*60);
        }
        else if (Dark_Soul.KnownSpell && Dark_Soul.IsSpellUsable
                 && MySettings.UseDarkSoul && ObjectManager.Target.GetDistance < 40)
        {
            Dark_Soul.Launch();
            return;
        }
        else if (Summon_Doomguard.KnownSpell && Summon_Doomguard.IsSpellUsable
                 && MySettings.UseSummonDoomguard && Summon_Doomguard.IsDistanceGood)
        {
            Summon_Doomguard.Launch();
            return;
        }
        else if (Summon_Infernal.KnownSpell && Summon_Infernal.IsSpellUsable
                 && MySettings.UseSummonInfernal && Summon_Infernal.IsDistanceGood)
        {
            SpellManager.CastSpellByIDAndPosition(1122, ObjectManager.Target.Position);
            return;
        }
        else if (Archimondes_Vengeance.KnownSpell && Archimondes_Vengeance.IsSpellUsable
                 && MySettings.UseArchimondesVengeance)
        {
            Archimondes_Vengeance.Launch();
            return;
        }
        else
        {
            if (Grimoire_of_Service.KnownSpell && Grimoire_of_Service.IsSpellUsable
                && MySettings.UseGrimoireofService && ObjectManager.Target.GetDistance < 40)
            {
                Grimoire_of_Service.Launch();
                return;
            }
        }
    }

    private void DPS_Cycle()
    {
        if (Curse_of_the_Elements.KnownSpell && Curse_of_the_Elements.IsSpellUsable && MySettings.UseCurseoftheElements
            && Curse_of_the_Elements.IsDistanceGood && !Curse_of_the_Elements.TargetHaveBuff)
        {
            Curse_of_the_Elements.Launch();
            return;
        }
        else if (Curse_of_Enfeeblement.KnownSpell && Curse_of_Enfeeblement.IsSpellUsable &&
                 MySettings.UseCurseofEnfeeblement
                 && Curse_of_Enfeeblement.IsDistanceGood && !Curse_of_Enfeeblement.TargetHaveBuff &&
                 !MySettings.UseCurseoftheElements)
        {
            Curse_of_Enfeeblement.Launch();
            return;
        }
        else if (Curse_of_Exhaustion.KnownSpell && Curse_of_Exhaustion.IsSpellUsable &&
                 MySettings.UseCurseofExhaustion
                 && Curse_of_Exhaustion.IsDistanceGood && !Curse_of_Exhaustion.TargetHaveBuff &&
                 !MySettings.UseCurseoftheElements
                 && !MySettings.UseCurseofEnfeeblement)
        {
            Curse_of_Exhaustion.Launch();
            return;
        }
        else if (ObjectManager.Me.BarTwoPercentage < 75 && Life_Tap.KnownSpell && Life_Tap.IsSpellUsable
                 && MySettings.UseLifeTap)
        {
            Life_Tap.Launch();
            return;
        }
        else if (ObjectManager.Target.HealthPercent < 20)
        {
            if (Drain_Soul.KnownSpell && Drain_Soul.IsSpellUsable && MySettings.UseDrainSoul &&
                Drain_Soul.IsDistanceGood)
            {
                Drain_Soul.Launch();
                while (ObjectManager.Me.IsCast && !Agony_Timer.IsReady && !Corruption_Timer.IsReady
                       && !Unstable_Affliction_Timer.IsReady)
                {
                    Thread.Sleep(200);
                }
            }

            if (Agony_Timer.IsReady || Corruption_Timer.IsReady || Unstable_Affliction_Timer.IsReady)
            {
                if (Soulburn.IsSpellUsable && Soulburn.KnownSpell && Soul_Swap.IsSpellUsable &&
                    Soul_Swap.KnownSpell
                    && Soul_Swap.IsDistanceGood && MySettings.UseSoulburn && MySettings.UseSoulSwap)
                {
                    Soulburn.Launch();
                    Thread.Sleep(200);
                    Soul_Swap.Launch();
                    Agony_Timer = new Timer(1000*20);
                    Corruption_Timer = new Timer(1000*15);
                    Unstable_Affliction_Timer = new Timer(1000*10);
                }
            }
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 4 && Soulburn.IsSpellUsable && Soulburn.KnownSpell &&
                 !Corruption.TargetHaveBuff
                 && Seed_of_Corruption.IsSpellUsable && Seed_of_Corruption.KnownSpell &&
                 Seed_of_Corruption.IsDistanceGood
                 && MySettings.UseSoulburn && MySettings.UseSeedofCorruption)
        {
            Soulburn.Launch();
            Thread.Sleep(200);
            Seed_of_Corruption.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 4 && Harvest_Life.IsSpellUsable &&
                 Harvest_Life.KnownSpell
                 && Harvest_Life.IsDistanceGood && MySettings.UseHarvestLife)
        {
            Harvest_Life.Launch();
            while (ObjectManager.Me.IsCast)
            {
                Thread.Sleep(200);
            }
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 4 && Rain_of_Fire.IsSpellUsable &&
                 Rain_of_Fire.KnownSpell
                 && Rain_of_Fire.IsDistanceGood && MySettings.UseRainofFire)
        {
            SpellManager.CastSpellByIDAndPosition(5740, ObjectManager.Target.Position);
            while (ObjectManager.Me.IsCast)
            {
                Thread.Sleep(200);
            }
            return;
        }
        else if (Agony.KnownSpell && Agony.IsSpellUsable && Agony.IsDistanceGood &&
                 MySettings.UseAgony
                 && (!Agony.TargetHaveBuff || Agony_Timer.IsReady))
        {
            Agony.Launch();
            Agony_Timer = new Timer(1000*20);
            return;
        }
        else if (Corruption.KnownSpell && Corruption.IsSpellUsable && Corruption.IsDistanceGood
                 && MySettings.UseCorruption &&
                 (!Corruption.TargetHaveBuff || Corruption_Timer.IsReady))
        {
            Corruption.Launch();
            Corruption_Timer = new Timer(1000*15);
            return;
        }
        else if (Unstable_Affliction.KnownSpell && Unstable_Affliction.IsSpellUsable &&
                 Unstable_Affliction.IsDistanceGood
                 && MySettings.UseUnstableAffliction &&
                 (!Unstable_Affliction.TargetHaveBuff || Unstable_Affliction_Timer.IsReady))
        {
            Unstable_Affliction.Launch();
            Unstable_Affliction_Timer = new Timer(1000*10);
            return;
        }
        else if (Haunt.KnownSpell && Haunt.IsSpellUsable && Haunt.IsDistanceGood &&
                 !Haunt.TargetHaveBuff
                 && MySettings.UseHaunt)
        {
            Haunt.Launch();
            return;
        }
        // Blizzard API Calls for Malefic Grasp using Shadow Bolt Function
        else
        {
            if (!ObjectManager.Me.IsCast && Shadow_Bolt.KnownSpell &&
                Shadow_Bolt.IsSpellUsable
                && !Agony_Timer.IsReady && !Corruption_Timer.IsReady &&
                !Unstable_Affliction_Timer.IsReady
                && Shadow_Bolt.IsDistanceGood && MySettings.UseMaleficGrasp)
            {
                Shadow_Bolt.Launch();
                return;
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: WarlockAfflictionSettings

    [Serializable]
    public class WarlockAfflictionSettings : Settings
    {
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public int UseStoneformAtPercentage = 80;
        public int UseWarStompAtPercentage = 80;
        public bool UseAgony = true;
        public bool UseAlchFlask = true;
        public bool UseArcaneTorrentForDecast = true;
        public bool UseArcaneTorrentForResource = true;
        public bool UseArchimondesVengeance = true;
        public bool UseBerserking = true;
        public bool UseBloodFury = true;
        public bool UseCommandDemon = true;
        public bool UseCorruption = true;
        public bool UseCreateHealthstone = true;
        public bool UseCurseofEnfeeblement = false;
        public bool UseCurseofExhaustion = false;
        public bool UseCurseoftheElements = true;
        public bool UseDarkBargain = true;
        public bool UseDarkIntent = true;
        public bool UseDarkRegeneration = true;
        public bool UseDarkSoul = true;
        public bool UseDrainLife = true;
        public bool UseDrainSoul = true;
        public bool UseEngGlove = true;
        public bool UseFelFlame = true;
        public bool UseGiftoftheNaaru = true;
        public bool UseGrimoireofSacrifice = true;
        public bool UseGrimoireofService = true;
        public bool UseHarvestLife = true;
        public bool UseHaunt = true;
        public bool UseHealthFunnel = true;
        public bool UseHowlofTerror = true;
        public bool UseLifeTap = true;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMaleficGrasp = true;
        public bool UseMortalCoil = true;
        public bool UseRainofFire = true;
        public bool UseSacrificialPact = true;
        public bool UseSeedofCorruption = true;
        public bool UseShadowBolt = true;
        public bool UseShadowfury = true;
        public bool UseSoulLink = true;
        public bool UseSoulSwap = true;
        public bool UseSoulburn = true;
        public bool UseSoulstone = true;
        public bool UseStoneform = true;
        public bool UseSummonDoomguard = true;
        public bool UseSummonFelhunter = true;
        public bool UseSummonImp = false;
        public bool UseSummonInfernal = false;
        public bool UseSummonSuccubus = false;
        public bool UseSummonVoidwalker = false;
        public bool UseTrinket = true;
        public bool UseTwilightWard = true;
        public bool UseUnboundWill = true;
        public bool UseUnendingResolve = true;
        public bool UseUnstableAffliction = true;
        public bool UseWarStomp = true;

        public WarlockAfflictionSettings()
        {
            ConfigWinForm(new Point(500, 400), "Warlock Affliction Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrent", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Warlock Buffs */
            AddControlInWinForm("Use Curse of Enfeeblement", "UseCurseofEnfeeblement", "Warlock Buffs");
            AddControlInWinForm("Use Curse of Exhaustion", "UseCurseofExhaustion", "Warlock Buffs");
            AddControlInWinForm("Use Curse of the Elements", "UseCurseoftheElements", "Warlock Buffs");
            AddControlInWinForm("Use Dark Intent", "UseDarkIntent", "Warlock Buffs");
            AddControlInWinForm("Use Grimoire of Sacrifice", "UseGrimoireofSacrifice", "Warlock Buffs");
            AddControlInWinForm("Use Soul Link ", "UseSoulLink ", "Warlock Buffs");
            AddControlInWinForm("Use Soulstone", "UseSoulstone", "Warlock Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Agony", "UseAgony", "Offensive Spell");
            AddControlInWinForm("Use Command Demon", "UseCommandDemon", "Offensive Spell");
            AddControlInWinForm("Use Corruption", "UseCorruption", "Offensive Spell");
            AddControlInWinForm("Use Drain Soul", "UseDrainSoul", "Offensive Spell");
            AddControlInWinForm("Use Fel Flame", "UseFelFlame", "Offensive Spell");
            AddControlInWinForm("Use Harvest Life", "UseHarvestLife", "Offensive Spell");
            AddControlInWinForm("Use Haunt", "UseHaunt", "Offensive Spell");
            AddControlInWinForm("Use Malefic Grasp", "UseMaleficGrasp", "Offensive Spell");
            AddControlInWinForm("Use Rain of Fire", "UseRainofFire", "Offensive Spell");
            AddControlInWinForm("Use Seed of Corruption", "UseSeedofCorruption", "Offensive Spell");
            AddControlInWinForm("Use Shadow Bolt", "UseShadowBolt", "Offensive Spell");
            AddControlInWinForm("Use Soul Swap", "UseSoulSwap", "Offensive Spell");
            AddControlInWinForm("Use Soulburn", "UseSoulburn", "Offensive Spell");
            AddControlInWinForm("Use Summon Imp", "UseSummonImp", "Offensive Spell");
            AddControlInWinForm("Use Summon Voidwalker", "UseSummonVoidwalker", "Offensive Spell");
            AddControlInWinForm("Use Summon Felhunter", "UseSummonFelhunter", "Offensive Spell");
            AddControlInWinForm("Use Summon Succubus", "UseSummonSuccubus", "Offensive Spell");
            AddControlInWinForm("Use Unstable Affliction", "UseUnstableAffliction", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Archimonde's Vengeance", "UseArchimondesVengeance", "Offensive Cooldown");
            AddControlInWinForm("Use Dark Soul", "UseDarkSoul", "Offensive Cooldown");
            AddControlInWinForm("Use Grimoire of Service", "UseGrimoireofService", "Offensive Cooldown");
            AddControlInWinForm("Use Summon Doomguard", "UseSummonDoomguard", "Offensive Cooldown");
            AddControlInWinForm("Use Summon Infernal", "UseSummonInfernal", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Dark Bargain", "UseDarkBargain", "Defensive Cooldown");
            AddControlInWinForm("Use Howl of Terror", "UseHowlofTerror", "Defensive Cooldown");
            AddControlInWinForm("Use Sacrificial Pact", "UseSacrificialPact", "Defensive Cooldown");
            AddControlInWinForm("Use Shadowfury", "UseShadowfury", "Defensive Cooldown");
            AddControlInWinForm("Use Twilight Ward", "UseTwilightWard", "Defensive Cooldown");
            AddControlInWinForm("Use Unbound Will", "UseUnboundWill", "Defensive Cooldown");
            AddControlInWinForm("Use Unending Resolve", "UseUnendingResolve", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Create Healthstone", "UseCreateHealthstone", "Healing Spell");
            AddControlInWinForm("Use Dark Regeneration", "UseDarkRegeneration", "Healing Spell");
            AddControlInWinForm("Use Drain Life", "UseDrainLife", "Healing Spell");
            AddControlInWinForm("Use Health Funnel", "UseHealthFunnel", "Healing Spell");
            AddControlInWinForm("Use Life Tap", "UseLifeTap", "Healing Spell");
            AddControlInWinForm("Use Mortal Coil", "UseMortalCoil", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket", "UseTrinket", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
        }

        public static WarlockAfflictionSettings CurrentSetting { get; set; }

        public static WarlockAfflictionSettings GetSettings()
        {
            string CurrentSettingsFile = Application.StartupPath + "\\CustomClasses\\Settings\\Warlock_Affliction.xml";
            if (File.Exists(CurrentSettingsFile))
            {
                return
                    CurrentSetting = Load<WarlockAfflictionSettings>(CurrentSettingsFile);
            }
            else
            {
                return new WarlockAfflictionSettings();
            }
        }
    }

    #endregion
}

#endregion

#region Druid

public class Druid_Balance
{
    private readonly DruidBalanceSettings MySettings = DruidBalanceSettings.GetSettings();
    private readonly string MoveBackward = nManager.Wow.Helpers.Keybindings.GetKeyByAction(nManager.Wow.Enums.Keybindings.MOVEBACKWARD);

    #region General Timers & Variables

    private Timer AlchFlask_Timer = new Timer(0);
    private Timer Engineering_Timer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer Trinket_Timer = new Timer(0);

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell Arcane_Torrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell Blood_Fury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell Gift_of_the_Naaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell War_Stomp = new Spell("War Stomp");

    #endregion

    #region Druid Buffs

    private readonly Spell Dash = new Spell("Dash");
    private readonly Spell Faerie_Fire = new Spell("Faerie Fire");
    private readonly Spell Mark_of_the_Wild = new Spell("Mark of the Wild");
    private readonly Spell Moonkin_Form = new Spell("Moonkin Form");
    private readonly Spell Stampeding_Roar = new Spell("Stampeding Roar");

    #endregion

    #region Offensive Spell

    private readonly Spell Hurricane = new Spell("Hurricane");
    private readonly Spell Moonfire = new Spell("Moonfire");
    private readonly Spell Starfall = new Spell("Starfall");
    private readonly Spell Starfire = new Spell("Starfire");
    private readonly Spell Starsurge = new Spell("Starsurge");
    private readonly Spell Sunfire = new Spell("Sunfire");
    private readonly Spell Wild_Mushroom = new Spell("Wild Mushroom");
    private readonly Spell Wild_Mushroom_Detonate = new Spell("Wild Mushroom: Detonate");
    private readonly Spell Wrath = new Spell("Wrath");
    private Timer Moonfire_Timer = new Timer(0);
    private bool StarfireUse;
    private Timer Sunfire_Timer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell Astral_Communion = new Spell("Astral Communion");
    private readonly Spell Celestial_Alignment = new Spell("Celestial Alignment");
    private readonly Spell Force_of_Nature = new Spell("Force of Nature");
    private readonly Spell Heart_of_the_Wild = new Spell("Heart of the Wild");
    private readonly Spell Incarnation = new Spell("Incarnation");
    private readonly Spell Natures_Vigil = new Spell("Nature's Vigil");

    #endregion

    #region Defensive Cooldown

    private readonly Spell Barkskin = new Spell("Barkskin");
    private readonly Spell Disorienting_Roar = new Spell("Disorienting Roar");
    private readonly Spell Entangling_Roots = new Spell("Entangling Roots");
    private readonly Spell Mass_Entanglement = new Spell("Mass Entanglement");
    private readonly Spell Mighty_Bash = new Spell("Mighty Bash");
    private readonly Spell Natures_Grasp = new Spell("Nature's Grasp");
    private readonly Spell Solar_Beam = new Spell("Solar Beam");
    private readonly Spell Typhoon = new Spell("Typhoon");
    private readonly Spell Ursols_Vortex = new Spell("Ursol's Vortex");
    private readonly Spell Wild_Charge = new Spell("Wild Charge");

    #endregion

    #region Healing Spell

    private readonly Spell Cenarion_Ward = new Spell("Cenarion Ward");
    private readonly Spell Healing_Touch = new Spell("Healing Touch");
    private readonly Spell Innervate = new Spell("Innervate");
    private readonly Spell Might_of_Ursoc = new Spell("Might of Ursoc");
    private readonly Spell Natures_Swiftness = new Spell("Nature's Swiftness");
    private readonly Spell Rejuvenation = new Spell("Rejuvenation");
    private readonly Spell Renewal = new Spell("Renewal");
    private readonly Spell Tranquility = new Spell("Tranquility");
    private Timer Healing_Touch_Timer = new Timer(0);

    #endregion

    public Druid_Balance()
    {
        Main.range = 30.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsMounted)
                {
                    if (Fight.InFight && ObjectManager.Me.Target > 0)
                    {
                        if (ObjectManager.Me.Target != lastTarget
                            && (Moonfire.IsDistanceGood || Sunfire.IsDistanceGood))
                        {
                            Pull();
                            lastTarget = ObjectManager.Me.Target;
                        }

                        if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                            && MySettings.UseLowCombat)
                            LowCombat();
                        else
                            Combat();
                    }
                    else if (!ObjectManager.Me.IsCast)
                        Patrolling();
                }
            }
            catch
            {
            }
            Thread.Sleep(250);
        }
    }

    private void Pull()
    {
        if (!ObjectManager.Me.HaveBuff(24858) && MySettings.UseMoonkinForm)
        {
            Moonkin_Form.Launch();
        }

        if (Moonfire.KnownSpell && Moonfire.IsDistanceGood && Moonfire.IsSpellUsable
            && MySettings.UseMoonfire)
        {
            Moonfire.Launch();
            Moonfire_Timer = new Timer(1000*11);
            return;
        }
        else
        {
            if (Sunfire.KnownSpell && Sunfire.IsDistanceGood && Sunfire.IsSpellUsable
                && MySettings.UseSunfire)
            {
                Sunfire.Launch();
                Sunfire_Timer = new Timer(1000*11);
                return;
            }
        }
    }

    private void LowCombat()
    {
        Buff();
        AvoidMelee();
        Defense_Cycle();
        Heal();

        if (ObjectManager.Me.HaveBuff(48518))
            StarfireUse = true;

        if (ObjectManager.Me.HaveBuff(48517))
            StarfireUse = false;

        if (!ObjectManager.Me.HaveBuff(24858) && MySettings.UseMoonkinForm)
        {
            Moonkin_Form.Launch();
            return;
        }

        if (Starsurge.KnownSpell && Starsurge.IsDistanceGood && Starsurge.IsSpellUsable
            && ObjectManager.Me.HaveBuff(93400) && MySettings.UseStarsurge)
        {
            Starsurge.Launch();
            return;
        }
        else if (Moonfire.KnownSpell && Moonfire.IsDistanceGood && Moonfire.IsSpellUsable
                 && !Moonfire.TargetHaveBuff && MySettings.UseMoonfire)
        {
            Moonfire.Launch();
            return;
        }
        else if (Sunfire.KnownSpell && Sunfire.IsDistanceGood && Sunfire.IsSpellUsable
                 && !Sunfire.TargetHaveBuff && MySettings.UseSunfire)
        {
            Sunfire.Launch();
            return;
        }
        else if (Starsurge.KnownSpell && Starsurge.IsDistanceGood && Starsurge.IsSpellUsable
                 && MySettings.UseStarsurge)
        {
            Starsurge.Launch();
            return;
        }
        else if (Starfire.KnownSpell && Starfire.IsDistanceGood && Starfire.IsSpellUsable
                 && StarfireUse && MySettings.UseStarfire)
        {
            Starfire.Launch();
            return;
        }
        else
        {
            if (Wrath.KnownSpell && Wrath.IsDistanceGood && Wrath.IsSpellUsable
                && MySettings.UseWrath)
            {
                Wrath.Launch();
                return;
            }
        }

        if (Hurricane.KnownSpell && Hurricane.IsDistanceGood && Hurricane.IsSpellUsable
            && MySettings.UseHurricane)
        {
            Hurricane.Launch();
            return;
        }
    }

    private void Combat()
    {
        Buff();
        AvoidMelee();
        if (OnCD.IsReady)
            Defense_Cycle();
        Heal();
        Decast();
        DPS_Burst();
        DPS_Cycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (Astral_Communion.KnownSpell && Astral_Communion.IsSpellUsable && MySettings.UseAstralCommunion
            && !ObjectManager.Me.HaveBuff(48518) && !ObjectManager.Me.HaveBuff(48517)
            && !Fight.InFight && ObjectManager.GetNumberAttackPlayer() == 0)
        {
            Astral_Communion.Launch();
            while (ObjectManager.Me.IsCast)
            {
                Thread.Sleep(200);
            }
            return;
        }
        else if (AlchFlask_Timer.IsReady && MySettings.UseAlchFlask && Alchemy.KnownSpell
                 && ItemsManager.GetItemCountByIdLUA(75525) == 1)
        {
            Logging.WriteFight("Use Alchi Flask");
            Lua.RunMacroText("/use item:75525");
            AlchFlask_Timer = new Timer(1000*60*60*2);
            return;
        }
        else if (Mark_of_the_Wild.KnownSpell && Mark_of_the_Wild.IsSpellUsable && !Mark_of_the_Wild.HaveBuff
                 && MySettings.UseMarkoftheWild)
        {
            Mark_of_the_Wild.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() == 0 && MySettings.UseDash
                 && Dash.KnownSpell && Dash.IsSpellUsable && !Dash.HaveBuff && !Stampeding_Roar.HaveBuff
                 && ObjectManager.Me.GetMove)
        {
            Dash.Launch();
            return;
        }
        else
        {
            if (ObjectManager.GetNumberAttackPlayer() == 0 && MySettings.UseStampedingRoar
                && Stampeding_Roar.KnownSpell && Stampeding_Roar.IsSpellUsable && !Dash.HaveBuff
                && !Stampeding_Roar.HaveBuff && ObjectManager.Me.GetMove)
            {
                Stampeding_Roar.Launch();
                return;
            }
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            Keyboard.DownKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
            while (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
                Thread.Sleep(300);
            Keyboard.UpKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
        }
    }

    private void Defense_Cycle()
    {
        if (!ObjectManager.Me.HaveBuff(24858) && MySettings.UseMoonkinForm)
        {
            Moonkin_Form.Launch();
        }

        if (ObjectManager.Me.HealthPercent <= MySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable && Stoneform.KnownSpell
            && MySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && Barkskin.KnownSpell && Barkskin.IsSpellUsable
                 && MySettings.UseBarkskin)
        {
            Barkskin.Launch();
            OnCD = new Timer(1000*12);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && Mighty_Bash.KnownSpell && Mighty_Bash.IsSpellUsable
                 && MySettings.UseMightyBash && Mighty_Bash.IsDistanceGood)
        {
            Mighty_Bash.Launch();
            OnCD = new Timer(1000*5);
            return;
        }
        else if (Mass_Entanglement.KnownSpell && Mass_Entanglement.IsSpellUsable && Mass_Entanglement.IsDistanceGood
                 && MySettings.UseMassEntanglement && ObjectManager.Me.HealthPercent < 80)
        {
            Mass_Entanglement.Launch();

            if (Wild_Charge.KnownSpell && Wild_Charge.IsDistanceGood && Wild_Charge.IsSpellUsable
                && MySettings.UseWildCharge)
            {
                Thread.Sleep(200);
                Wild_Charge.Launch();
            }
            return;
        }
        else if (Ursols_Vortex.KnownSpell && Ursols_Vortex.IsSpellUsable && Ursols_Vortex.IsDistanceGood
                 && MySettings.UseUrsolsVortex && ObjectManager.Me.HealthPercent < 80)
        {
            Ursols_Vortex.Launch();

            if (Wild_Charge.KnownSpell && Wild_Charge.IsDistanceGood && Wild_Charge.IsSpellUsable
                && MySettings.UseWildCharge)
            {
                Thread.Sleep(200);
                Wild_Charge.Launch();
            }
            return;
        }
        else if (Natures_Grasp.KnownSpell && Natures_Grasp.IsSpellUsable
                 && ObjectManager.Target.IsCast && MySettings.UseNaturesGrasp && ObjectManager.Me.HealthPercent < 80)
        {
            Natures_Grasp.Launch();

            if (Wild_Charge.KnownSpell && Wild_Charge.IsDistanceGood && Wild_Charge.IsSpellUsable
                && MySettings.UseWildCharge)
            {
                Thread.Sleep(200);
                Wild_Charge.Launch();
            }
            return;
        }
        else if (Typhoon.KnownSpell && Typhoon.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 2
                 && ObjectManager.Target.GetDistance < 40 && ObjectManager.Me.HealthPercent < 70
                 && MySettings.UseTyphoon)
        {
            Typhoon.Launch();
            return;
        }
        else if (Disorienting_Roar.KnownSpell && Disorienting_Roar.IsSpellUsable &&
                 ObjectManager.GetNumberAttackPlayer() > 2
                 && ObjectManager.Target.GetDistance < 10 && ObjectManager.Me.HealthPercent < 70
                 && MySettings.UseDisorientingRoar)
        {
            Disorienting_Roar.Launch();
            OnCD = new Timer(1000*3);
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent <= MySettings.UseWarStompAtPercentage && War_Stomp.IsSpellUsable && War_Stomp.KnownSpell
                && MySettings.UseWarStomp)
            {
                War_Stomp.Launch();
                OnCD = new Timer(1000*2);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell && ObjectManager.Me.HealthPercent <= MySettings.UseArcaneTorrentForResourceAtPercentage
                && MySettings.UseArcaneTorrentForResource)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && Natures_Swiftness.IsSpellUsable && Natures_Swiftness.KnownSpell
            && MySettings.UseNaturesSwiftness && MySettings.UseHealingTouch)
        {
            Natures_Swiftness.Launch();
            Thread.Sleep(400);
            Healing_Touch.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 70 && Renewal.IsSpellUsable && Renewal.KnownSpell
                 && MySettings.UseRenewal)
        {
            Renewal.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 95 && !Fight.InFight && ObjectManager.GetNumberAttackPlayer() == 0
                 && Healing_Touch.IsSpellUsable && Healing_Touch.KnownSpell && MySettings.UseHealingTouch)
        {
            Healing_Touch.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 90 && Cenarion_Ward.IsSpellUsable && Cenarion_Ward.KnownSpell
                 && MySettings.UseCenarionWard)
        {
            Cenarion_Ward.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseGiftoftheNaaruAtPercentage && Gift_of_the_Naaru.IsSpellUsable && Gift_of_the_Naaru.KnownSpell
                 && MySettings.UseGiftoftheNaaru)
        {
            Gift_of_the_Naaru.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 70 && Rejuvenation.IsSpellUsable && Rejuvenation.KnownSpell
                 && !Rejuvenation.HaveBuff && MySettings.UseRejuvenation)
        {
            Rejuvenation.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 40 && Healing_Touch.IsSpellUsable && Healing_Touch.KnownSpell
                 && Healing_Touch_Timer.IsReady && MySettings.UseHealingTouch)
        {
            Healing_Touch.Launch();
            Healing_Touch_Timer = new Timer(1000*15);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 35 && Might_of_Ursoc.IsSpellUsable && Might_of_Ursoc.KnownSpell
                 && MySettings.UseMightofUrsoc)
        {
            Might_of_Ursoc.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent < 30 && Tranquility.IsSpellUsable && Tranquility.KnownSpell
                && MySettings.UseTranquility)
            {
                Tranquility.Launch();
                while (ObjectManager.Me.IsCast)
                {
                    Thread.Sleep(100);
                    Thread.Sleep(100);
                }
                return;
            }
        }

        if (ObjectManager.Me.ManaPercentage < 50 && MySettings.UseInnervate)
        {
            Innervate.Launch();
            return;
        }
    }

    private void Decast()
    {
        if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
            && Solar_Beam.KnownSpell && Solar_Beam.IsSpellUsable && Solar_Beam.IsDistanceGood
            && MySettings.UseSolarBeam)
        {
            if (Entangling_Roots.KnownSpell && Entangling_Roots.IsDistanceGood && Entangling_Roots.IsSpellUsable
                && MySettings.UseEntanglingRoots)
            {
                Entangling_Roots.Launch();
                Thread.Sleep(200);
            }

            Solar_Beam.Launch();
            return;
        }
        else
        {
            if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell && ObjectManager.Target.GetDistance < 8
                && ObjectManager.Me.HealthPercent <= MySettings.UseArcaneTorrentForDecastAtPercentage
                && MySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
            {
                Arcane_Torrent.Launch();
                return;
            }
        }
    }

    private void DPS_Burst()
    {
        if (MySettings.UseTrinket && Trinket_Timer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Trinket_Timer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBerserking)
            Berserking.Launch();
        else if (Blood_Fury.IsSpellUsable && Blood_Fury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBloodFury)
            Blood_Fury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (Engineering_Timer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                && MySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            Engineering_Timer = new Timer(1000*60);
        }
        else if (Force_of_Nature.IsSpellUsable && Force_of_Nature.KnownSpell && Force_of_Nature.IsDistanceGood
                 && MySettings.UseForceofNature)
        {
            Force_of_Nature.Launch();
            return;
        }
        else if (Incarnation.IsSpellUsable && Incarnation.KnownSpell && MySettings.UseIncarnation
                 && ObjectManager.Target.GetDistance < 30)
        {
            Incarnation.Launch();
            return;
        }
        else if (Heart_of_the_Wild.IsSpellUsable && Heart_of_the_Wild.KnownSpell && MySettings.UseHeartoftheWild
                 && ObjectManager.Target.GetDistance < 30)
        {
            Heart_of_the_Wild.Launch();
            return;
        }
        else if (Natures_Vigil.IsSpellUsable && Natures_Vigil.KnownSpell && MySettings.UseNaturesVigil
                 && ObjectManager.Target.GetDistance < 30)
        {
            Natures_Vigil.Launch();
            return;
        }
        else
        {
            if (Celestial_Alignment.KnownSpell && MySettings.UseCelestialAlignment &&
                ObjectManager.Target.GetDistance < 30
                && (Celestial_Alignment.IsSpellUsable || ObjectManager.Me.HaveBuff(112071)))
            {
                if (!ObjectManager.Me.HaveBuff(112071))
                    Celestial_Alignment.Launch();
                Celestial_Alignment_Combat();
            }
        }
    }

    private void DPS_Cycle()
    {
        if (ObjectManager.Me.HaveBuff(48518))
            StarfireUse = true;

        if (ObjectManager.Me.HaveBuff(48517))
            StarfireUse = false;

        if (!ObjectManager.Me.HaveBuff(24858) && MySettings.UseMoonkinForm)
        {
            Moonkin_Form.Launch();
            return;
        }

        if (Moonfire.KnownSpell && Moonfire.IsDistanceGood && Moonfire.IsSpellUsable
                 && MySettings.UseMoonfire && (!Moonfire.TargetHaveBuff || Moonfire_Timer.IsReady))
        {
            Moonfire.Launch();
            Moonfire_Timer = new Timer(1000*11);
            return;
        }
        else if (Sunfire.KnownSpell && Sunfire.IsDistanceGood && Sunfire.IsSpellUsable
                 && MySettings.UseSunfire && (!Sunfire.TargetHaveBuff || Sunfire_Timer.IsReady))
        {
            Sunfire.Launch();
            Sunfire_Timer = new Timer(1000*11);
            return;
        }
        else if (Starsurge.IsDistanceGood && Starsurge.IsSpellUsable
                 && Starsurge.KnownSpell && MySettings.UseStarsurge)
        {
            Starsurge.Launch();
            return;
        }
        else if (Starfall.KnownSpell && Starfall.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 2 &&
                 ObjectManager.Target.GetDistance < 40 && MySettings.UseStarfall)
        {
            Starfall.Launch();
            return;
        }
        else if (Wild_Mushroom.KnownSpell && Wild_Mushroom.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 3
                 && ObjectManager.Target.GetDistance < 40 && Wild_Mushroom_Detonate.KnownSpell &&
                 Wild_Mushroom.IsSpellUsable
                 && MySettings.UseWildMushroom)
        {
            for (int i = 0; i < 3; i++)
            {
                SpellManager.CastSpellByIDAndPosition(88747, ObjectManager.Target.Position);
                Thread.Sleep(200);
            }

            Wild_Mushroom_Detonate.Launch();
            return;
        }
        else if (Hurricane.KnownSpell && Hurricane.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 2 &&
                 ObjectManager.Target.GetDistance < 30 && MySettings.UseHurricane)
        {
            SpellManager.CastSpellByIDAndPosition(16914, ObjectManager.Target.Position);
            return;
        }
        else if (Starfire.KnownSpell && Starfire.IsSpellUsable && Starfire.IsDistanceGood
                 && StarfireUse && MySettings.UseStarfire)
        {
            Starfire.Launch();
            return;
        }
        else
        {
            if (Wrath.KnownSpell && Wrath.IsSpellUsable && Wrath.IsDistanceGood
                && MySettings.UseWrath)
            {
                Wrath.Launch();
                return;
            }
        }
    }

    public void Celestial_Alignment_Combat()
    {
        while (ObjectManager.Me.HaveBuff(112071))
        {
            if (!Moonfire.TargetHaveBuff || Moonfire_Timer.IsReady || !Sunfire.TargetHaveBuff || Sunfire_Timer.IsReady)
            {
                Moonfire.Launch();
                Moonfire_Timer = new Timer(1000*11);
                Sunfire_Timer = new Timer(1000*11);
            }

            if (Wrath.KnownSpell && Wrath.IsDistanceGood && Wrath.IsSpellUsable)
                Wrath.Launch();
        }
        return;
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: DruidBalanceSettings

    [Serializable]
    public class DruidBalanceSettings : Settings
    {
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public int UseStoneformAtPercentage = 80;
        public int UseWarStompAtPercentage = 80;
        public bool UseAlchFlask = true;
        public bool UseArcaneTorrentForDecast = true;
        public bool UseArcaneTorrentForResource = true;
        public bool UseAstralCommunion = true;
        public bool UseBarkskin = true;
        public bool UseBerserking = true;
        public bool UseBloodFury = true;
        public bool UseCelestialAlignment = true;
        public bool UseCenarionWard = true;
        public bool UseDash = true;
        public bool UseDisorientingRoar = true;
        public bool UseEngGlove = true;
        public bool UseEntanglingRoots = true;
        public bool UseFaerieFire = true;
        public bool UseForceofNature = true;
        public bool UseGiftoftheNaaru = true;
        public bool UseHealingTouch = true;
        public bool UseHeartoftheWild = true;
        public bool UseHurricane = true;
        public bool UseIncarnation = true;
        public bool UseInnervate = true;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMarkoftheWild = true;
        public bool UseMassEntanglement = true;
        public bool UseMightofUrsoc = true;
        public bool UseMightyBash = true;
        public bool UseMoonfire = true;
        public bool UseMoonkinForm = true;
        public bool UseNaturesGrasp = true;
        public bool UseNaturesSwiftness = true;
        public bool UseNaturesVigil = true;
        public bool UseRejuvenation = true;
        public bool UseRenewal = true;
        public bool UseSolarBeam = true;
        public bool UseStampedingRoar = true;
        public bool UseStarfall = true;
        public bool UseStarfire = true;
        public bool UseStarsurge = true;
        public bool UseStoneform = true;
        public bool UseSunfire = true;
        public bool UseTranquility = true;
        public bool UseTrinket = true;
        public bool UseTyphoon = true;
        public bool UseUrsolsVortex = true;
        public bool UseWarStomp = true;
        public bool UseWildCharge = true;
        public bool UseWildMushroom = true;
        public bool UseWrath = true;

        public DruidBalanceSettings()
        {
            ConfigWinForm(new Point(500, 400), "Druid Balance Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrent", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Druid Buffs */
            AddControlInWinForm("Use Dash", "UseDash", "Druid Buffs");
            AddControlInWinForm("Use Faerie Fire", "UseFaerieFire", "Druid Buffs");
            AddControlInWinForm("Use Mark of the Wild", "UseMarkoftheWild", "Druid Buffs");
            AddControlInWinForm("Use Moonkin Form", "UseMoonkinForm", "Druid Buffs");
            AddControlInWinForm("Use Stampeding Roar", "UseStampedingRoar", "Druid Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Hurricane", "UseHurricane", "Offensive Spell");
            AddControlInWinForm("Use Moonfire", "UseMoonfire", "Offensive Spell");
            AddControlInWinForm("Use Starfall", "UseStarfall", "Offensive Spell");
            AddControlInWinForm("Use Starfire", "UseStarfire", "Offensive Spell");
            AddControlInWinForm("Use Starsurge", "UseStarsurge", "Offensive Spell");
            AddControlInWinForm("Use Sunfire", "UseSunfire", "Offensive Spell");
            AddControlInWinForm("Use WildMushroom", "UseWildMushroom", "Offensive Spell");
            AddControlInWinForm("Use Wrath", "UseWrath", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Astral Communion", "UseAstralCommunion", "Offensive Cooldown");
            AddControlInWinForm("Use Celestial Alignment", "UseCelestialAlignment", "Offensive Cooldown");
            AddControlInWinForm("Use Force of Nature", "UseForceofNature", "Offensive Cooldown");
            AddControlInWinForm("Use Heart of the Wild", "UseHeartoftheWild", "Offensive Cooldown");
            AddControlInWinForm("Use Incarnation", "UseIncarnation", "Offensive Cooldown");
            AddControlInWinForm("Use Nature's Vigil", "UseNaturesVigil", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Barkskin", "UseBarkskin", "Defensive Cooldown");
            AddControlInWinForm("Use Disorienting Roar", "UseDisorientingRoar", "Defensive Cooldown");
            AddControlInWinForm("Use Entangling Roots", "UseEntanglingRoots", "Defensive Cooldown");
            AddControlInWinForm("Use Mass Entanglement", "UseMassEntanglement", "Defensive Cooldown");
            AddControlInWinForm("Use Mighty Bash", "UseMightyBash", "Defensive Cooldown");
            AddControlInWinForm("Use Nature's Grasp", "UseNaturesGrasp", "Defensive Cooldown");
            AddControlInWinForm("Use Solar Beam", "UseSolarBeam", "Defensive Cooldown");
            AddControlInWinForm("Use Typhoon", "UseTyphoon", "Defensive Cooldown");
            AddControlInWinForm("Use Ursol's Vortex", "UseUrsolsVortex", "Defensive Cooldown");
            AddControlInWinForm("Use Wild Charge", "UseWildCharge", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Cenarion Ward", "UseCenarionWard", "Healing Spell");
            AddControlInWinForm("Use Healing Touch", "UseHealingTouch", "Healing Spell");
            AddControlInWinForm("Use Innervate", "UseInnervate", "Healing Spell");
            AddControlInWinForm("Use Might of Ursoc", "UseMightofUrsoc", "Healing Spell");
            AddControlInWinForm("Use Nature's Swiftness", "UseNaturesSwiftness", "Healing Spell");
            AddControlInWinForm("Use Rejuvenation", "UseRejuvenation", "Healing Spell");
            AddControlInWinForm("Use Renewal", "UseRenewal", "Healing Spell");
            AddControlInWinForm("Use Tranquility", "UseTranquility", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket", "UseTrinket", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
        }

        public static DruidBalanceSettings CurrentSetting { get; set; }

        public static DruidBalanceSettings GetSettings()
        {
            string CurrentSettingsFile = Application.StartupPath + "\\CustomClasses\\Settings\\Druid_Balance.xml";
            if (File.Exists(CurrentSettingsFile))
            {
                return
                    CurrentSetting = Load<DruidBalanceSettings>(CurrentSettingsFile);
            }
            else
            {
                return new DruidBalanceSettings();
            }
        }
    }

    #endregion
}

public class Druid_Feral
{
    private readonly DruidFeralSettings MySettings = DruidFeralSettings.GetSettings();
    private readonly string MoveBackward = nManager.Wow.Helpers.Keybindings.GetKeyByAction(nManager.Wow.Enums.Keybindings.MOVEBACKWARD);

    #region General Timers & Variables

    private Timer AlchFlask_Timer = new Timer(0);
    private Timer Engineering_Timer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer Trinket_Timer = new Timer(0);
    private int CP;

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell Arcane_Torrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell Blood_Fury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell Gift_of_the_Naaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell War_Stomp = new Spell("War Stomp");

    #endregion

    #region Druid Buffs

    private readonly Spell Cat_Form = new Spell("Cat Form");
    private readonly Spell Dash = new Spell("Dash");
    private readonly Spell Displacer_Beast = new Spell("Displacer Beast");
    private readonly Spell Faerie_Fire = new Spell("Faerie Fire");
    private readonly Spell Mark_of_the_Wild = new Spell("Mark of the Wild");
    private readonly Spell Prowl = new Spell("Prowl");
    private readonly Spell Savage_Roar = new Spell("Savage Roar");
    private readonly Spell Stampeding_Roar = new Spell("Stampeding Roar");
    private bool FivePtSav;
    private Timer Savage_Roar_Timer = new Timer(0);

    #endregion

    #region Offensive Spell

    private readonly Spell Ferocious_Bite = new Spell("Ferocious Bite");
    private readonly Spell Maim = new Spell("Maim");
    private readonly Spell Mangle = new Spell("Mangle");
    private readonly Spell Pounce = new Spell("Pounce");
    private readonly Spell Rake = new Spell("Rake");
    private readonly Spell Ravage = new Spell("Ravage");
    private readonly Spell Rip = new Spell("Rip");
    private readonly Spell Shred = new Spell("Shred");
    private readonly Spell Swipe = new Spell("Swipe");
    private readonly Spell Thrash = new Spell("Thrash");
    private bool FivePtFer;
    private bool FivePtRip;
    private Timer Rake_Timer = new Timer(0);
    private Timer Rip_Timer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell Berserk = new Spell("Berserk");
    private readonly Spell Force_of_Nature = new Spell("Force of Nature");
    private readonly Spell Heart_of_the_Wild = new Spell("Heart of the Wild");
    private readonly Spell Incarnation = new Spell("Incarnation");
    private readonly Spell Natures_Vigil = new Spell("Nature's Vigil");
    private readonly Spell Tigers_Fury = new Spell("Tiger's Fury");

    #endregion

    #region Defensive Cooldown

    private readonly Spell Barkskin = new Spell("Barkskin");
    private readonly Spell Disorienting_Roar = new Spell("Disorienting Roar");
    private readonly Spell Mass_Entanglement = new Spell("Mass Entanglement");
    private readonly Spell Mighty_Bash = new Spell("Mighty Bash");
    private readonly Spell Natures_Grasp = new Spell("Nature's Grasp");
    private readonly Spell Skull_Bash = new Spell("Skull Bash");
    private readonly Spell Survival_Instincts = new Spell("Survival Instincts");
    private readonly Spell Typhoon = new Spell("Typhoon");
    private readonly Spell Ursols_Vortex = new Spell("Ursol's Vortex");
    private readonly Spell Wild_Charge = new Spell("Wild Charge");

    #endregion

    #region Healing Spell

    private readonly Spell Cenarion_Ward = new Spell("Cenarion Ward");
    private readonly Spell Healing_Touch = new Spell("Healing Touch");
    private readonly Spell Innervate = new Spell("Innervate");
    private readonly Spell Might_of_Ursoc = new Spell("Might of Ursoc");
    private readonly Spell Natures_Swiftness = new Spell("Nature's Swiftness");
    private readonly Spell Rejuvenation = new Spell("Rejuvenation");
    private readonly Spell Renewal = new Spell("Renewal");
    private readonly Spell Tranquility = new Spell("Tranquility");
    private Timer Healing_Touch_Timer = new Timer(0);

    #endregion

    public Druid_Feral()
    {
        Main.range = 5.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (Faerie_Fire.IsDistanceGood || Wild_Charge.IsDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && MySettings.UseLowCombat)
                                LowCombat();
                            else
                                Combat();
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void Pull()
    {
        if (!ObjectManager.Me.HaveBuff(768) && MySettings.UseCatForm)
            Cat_Form.Launch();

        if (!Savage_Roar.HaveBuff && MySettings.UseSavageRoar && Savage_Roar.IsSpellUsable && Savage_Roar.KnownSpell
            && ObjectManager.Target.GetDistance < 30)
        {
            Savage_Roar.Launch();
            Savage_Roar_Timer = new Timer(1000*12);
        }

        if (Prowl.IsSpellUsable && Prowl.KnownSpell && Prowl.IsDistanceGood
            && MySettings.UseProwl && !ObjectManager.Me.InCombat)
        {
            if (Displacer_Beast.IsSpellUsable && Displacer_Beast.KnownSpell && Displacer_Beast.IsDistanceGood
                && MySettings.UseDisplacerBeast)
            {
                Displacer_Beast.Launch();
                Thread.Sleep(200);
            }

            if (Pounce.IsSpellUsable && Pounce.KnownSpell && Pounce.IsDistanceGood
                && MySettings.UsePounce)
            {
                Pounce.Launch();
                return;
            }
        }
        else
        {
            if (Wild_Charge.KnownSpell && Wild_Charge.IsSpellUsable && Wild_Charge.IsDistanceGood
                && MySettings.UseWildCharge)
            {
                Wild_Charge.Launch();
                return;
            }

            else
            {
                if (Faerie_Fire.KnownSpell && Faerie_Fire.IsSpellUsable && Faerie_Fire.IsDistanceGood
                    && MySettings.UseFaerieFire)
                {
                    Faerie_Fire.Launch();
                    return;
                }
            }
        }
    }

    private void LowCombat()
    {
        Buff();
        AvoidMelee();
        Defense_Cycle();
        Heal();

        if (!ObjectManager.Me.HaveBuff(768) && MySettings.UseCatForm)
        {
            Cat_Form.Launch();
            return;
        }

        if (Mangle.IsSpellUsable && Mangle.KnownSpell && Mangle.IsDistanceGood
            && MySettings.UseMangle)
        {
            Mangle.Launch();
            if (ObjectManager.Target.HealthPercent < 50 && ObjectManager.Target.HealthPercent > 0)
            {
                Mangle.Launch();
                return;
            }
        }
        else
        {
            if (Swipe.IsSpellUsable && Swipe.KnownSpell && Swipe.IsDistanceGood
                && MySettings.UseSwipe)
            {
                Swipe.Launch();
                return;
            }
        }
    }

    private void Combat()
    {
        Buff();
        AvoidMelee();
        if (OnCD.IsReady)
            Defense_Cycle();
        Heal();
        Decast();
        DPS_Burst();
        DPS_Cycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (Mark_of_the_Wild.KnownSpell && Mark_of_the_Wild.IsSpellUsable && !Mark_of_the_Wild.HaveBuff)
        {
            Mark_of_the_Wild.Launch();
            return;
        }
        else if (AlchFlask_Timer.IsReady && MySettings.UseAlchFlask && Alchemy.KnownSpell
                 && ItemsManager.GetItemCountByIdLUA(75525) == 1)
        {
            Logging.WriteFight("Use Alchi Flask");
            Lua.RunMacroText("/use item:75525");
            AlchFlask_Timer = new Timer(1000*60*60*2);
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() == 0 && MySettings.UseDash
                 && Dash.KnownSpell && Dash.IsSpellUsable && !Dash.HaveBuff && !Stampeding_Roar.HaveBuff
                 && ObjectManager.Me.GetMove)
        {
            Dash.Launch();
            return;
        }
        else
        {
            if (ObjectManager.GetNumberAttackPlayer() == 0 && MySettings.UseStampedingRoar
                && Stampeding_Roar.KnownSpell && Stampeding_Roar.IsSpellUsable && !Dash.HaveBuff
                && !Stampeding_Roar.HaveBuff && ObjectManager.Me.GetMove)
            {
                Stampeding_Roar.Launch();
                return;
            }
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            Keyboard.DownKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
            while (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
                Thread.Sleep(300);
            Keyboard.UpKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
        }
    }

    private void Defense_Cycle()
    {
        if (ObjectManager.Me.HealthPercent < 80 && MySettings.UseBarkskin
            && Barkskin.KnownSpell && Barkskin.IsSpellUsable)
        {
            Barkskin.Launch();
            OnCD = new Timer(1000*12);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 90 && Mighty_Bash.IsDistanceGood
                 && Mighty_Bash.KnownSpell && Mighty_Bash.IsSpellUsable && MySettings.UseMightyBash)
        {
            Mighty_Bash.Launch();
            OnCD = new Timer(1000*5);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 70 && ObjectManager.Me.ComboPoint > 2
                 && Maim.KnownSpell && Maim.IsSpellUsable && MySettings.UseMaim && Maim.IsDistanceGood)
        {
            CP = ObjectManager.Me.ComboPoint;
            Maim.Launch();
            OnCD = new Timer(1000*CP);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 70 && MySettings.UseSurvivalInstincts
                 && Survival_Instincts.KnownSpell && Survival_Instincts.IsSpellUsable)
        {
            Survival_Instincts.Launch();
            OnCD = new Timer(1000*12);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable && Stoneform.KnownSpell
                 && MySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (Mass_Entanglement.KnownSpell && Mass_Entanglement.IsSpellUsable && Mass_Entanglement.IsDistanceGood
                 && ObjectManager.Target.IsCast && MySettings.UseMassEntanglement &&
                 ObjectManager.GetNumberAttackPlayer() > 2
                 && ObjectManager.Me.HealthPercent < 70)
        {
            if (Typhoon.KnownSpell && Typhoon.IsSpellUsable && MySettings.UseTyphoon
                && ObjectManager.Target.GetDistance < 40 && MySettings.UseTyphoon)
            {
                Typhoon.Launch();
                Thread.Sleep(200);
            }

            Mass_Entanglement.Launch();
            return;
        }
        else if (Ursols_Vortex.KnownSpell && Ursols_Vortex.IsSpellUsable && Ursols_Vortex.IsDistanceGood
                 && MySettings.UseUrsolsVortex && ObjectManager.Me.HealthPercent < 80
                 && ObjectManager.GetNumberAttackPlayer() > 2)
        {
            Ursols_Vortex.Launch();

            if (Wild_Charge.KnownSpell && Wild_Charge.IsDistanceGood && Wild_Charge.IsSpellUsable
                && MySettings.UseWildCharge)
            {
                Thread.Sleep(200);
                Wild_Charge.Launch();
            }
            return;
        }
        else if (Natures_Grasp.KnownSpell && Natures_Grasp.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 2
                 && ObjectManager.Target.IsCast && MySettings.UseNaturesGrasp && ObjectManager.Me.HealthPercent < 80)
        {
            Natures_Grasp.Launch();
            return;
        }
        else if (Typhoon.KnownSpell && Typhoon.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 2
                 && ObjectManager.Target.GetDistance < 40 && ObjectManager.Me.HealthPercent < 70
                 && MySettings.UseTyphoon)
        {
            Typhoon.Launch();
            return;
        }
        else if (Disorienting_Roar.KnownSpell && Disorienting_Roar.IsSpellUsable &&
                 ObjectManager.GetNumberAttackPlayer() > 2
                 && ObjectManager.Target.GetDistance < 10 && ObjectManager.Me.HealthPercent < 70
                 && MySettings.UseDisorientingRoar)
        {
            Disorienting_Roar.Launch();
            OnCD = new Timer(1000*3);
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent <= MySettings.UseWarStompAtPercentage && War_Stomp.IsSpellUsable && War_Stomp.KnownSpell
                && MySettings.UseWarStomp)
            {
                War_Stomp.Launch();
                OnCD = new Timer(1000*2);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (ObjectManager.Me.HealthPercent < 80 && Natures_Swiftness.IsSpellUsable && Natures_Swiftness.KnownSpell
            && MySettings.UseNaturesSwiftness && MySettings.UseHealingTouch)
        {
            Natures_Swiftness.Launch();
            Thread.Sleep(400);
            Healing_Touch.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 70 && Renewal.IsSpellUsable && Renewal.KnownSpell
                 && MySettings.UseRenewal)
        {
            Renewal.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 90 && Cenarion_Ward.IsSpellUsable && Cenarion_Ward.KnownSpell
                 && MySettings.UseCenarionWard)
        {
            Cenarion_Ward.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 50 && !Fight.InFight && ObjectManager.GetNumberAttackPlayer() == 0
                 && Healing_Touch.IsSpellUsable && Healing_Touch.KnownSpell && MySettings.UseHealingTouch)
        {
            while (ObjectManager.Me.HealthPercent < 95 && Healing_Touch.IsSpellUsable)
            {
                Healing_Touch.Launch();
                Thread.Sleep(1500);
            }
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseGiftoftheNaaruAtPercentage && Gift_of_the_Naaru.IsSpellUsable && Gift_of_the_Naaru.KnownSpell)
        {
            Gift_of_the_Naaru.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 70 && Healing_Touch.IsSpellUsable && Healing_Touch.KnownSpell
                 && ObjectManager.Me.HaveBuff(69369) && MySettings.UseHealingTouch)
        {
            Healing_Touch.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 50 && Rejuvenation.IsSpellUsable && Rejuvenation.KnownSpell
                 && !Rejuvenation.HaveBuff && MySettings.UseRejuvenation)
        {
            Rejuvenation.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 40 && Healing_Touch.IsSpellUsable && Healing_Touch.KnownSpell
                 && Healing_Touch_Timer.IsReady && MySettings.UseHealingTouch)
        {
            Healing_Touch.Launch();
            Healing_Touch_Timer = new Timer(1000*15);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 35 && Might_of_Ursoc.IsSpellUsable && Might_of_Ursoc.KnownSpell
                 && MySettings.UseMightofUrsoc)
        {
            Might_of_Ursoc.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 30 && Tranquility.IsSpellUsable && Tranquility.KnownSpell
                 && MySettings.UseTranquility)
        {
            Tranquility.Launch();
            while (ObjectManager.Me.IsCast)
            {
                Thread.Sleep(100);
                Thread.Sleep(100);
            }
            return;
        }
        else
        {
            if (ObjectManager.Me.ManaPercentage < 10 && MySettings.UseInnervate)
            {
                Innervate.Launch();
                return;
            }
        }
    }

    private void Decast()
    {
        if (ObjectManager.Target.IsCast && MySettings.UseSkullBash
            && ObjectManager.Target.IsTargetingMe
            && Skull_Bash.KnownSpell && Skull_Bash.IsSpellUsable && Skull_Bash.IsDistanceGood)
        {
            Skull_Bash.Launch();
            return;
        }
        else
        {
            if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell && ObjectManager.Target.GetDistance < 8
                && ObjectManager.Me.HealthPercent <= MySettings.UseArcaneTorrentForDecastAtPercentage
                && MySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
            {
                Arcane_Torrent.Launch();
                return;
            }
        }
    }

    private void DPS_Burst()
    {
        if (MySettings.UseTrinket && Trinket_Timer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Trinket_Timer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBerserking)
            Berserking.Launch();
        else if (Blood_Fury.IsSpellUsable && Blood_Fury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBloodFury)
            Blood_Fury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (Engineering_Timer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                && MySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            Engineering_Timer = new Timer(1000*60);
        }
        else if (Force_of_Nature.IsSpellUsable && Force_of_Nature.KnownSpell && Force_of_Nature.IsDistanceGood
                 && MySettings.UseForceofNature)
        {
            Force_of_Nature.Launch();
            return;
        }
        else if (Incarnation.IsSpellUsable && Incarnation.KnownSpell && MySettings.UseIncarnation
                 && ObjectManager.Target.GetDistance < 30)
        {
            Incarnation.Launch();
            return;
        }
        else if (Heart_of_the_Wild.IsSpellUsable && Heart_of_the_Wild.KnownSpell && MySettings.UseHeartoftheWild
                 && ObjectManager.Target.GetDistance < 30)
        {
            Heart_of_the_Wild.Launch();
            return;
        }
        else if (Natures_Vigil.IsSpellUsable && Natures_Vigil.KnownSpell && MySettings.UseNaturesVigil
                 && ObjectManager.Target.GetDistance < 30)
        {
            Natures_Vigil.Launch();
            return;
        }
        else if (Tigers_Fury.KnownSpell && Tigers_Fury.IsSpellUsable && ObjectManager.Me.Energy < 35
                 && !Berserk.HaveBuff && MySettings.UseTigersFury && ObjectManager.Target.GetDistance < 30)
        {
            Tigers_Fury.Launch();
            return;
        }
        else
        {
            if (Berserk.KnownSpell && Berserk.IsSpellUsable && MySettings.UseBerserk
                && ObjectManager.Target.GetDistance < 30)
            {
                Berserk.Launch();
                return;
            }
        }
    }

    private void DPS_Cycle()
    {
        if (!ObjectManager.Me.HaveBuff(768) && MySettings.UseCatForm)
        {
            Cat_Form.Launch();
            return;
        }

        if (Faerie_Fire.KnownSpell && Faerie_Fire.IsSpellUsable && Faerie_Fire.IsDistanceGood
            && MySettings.UseFaerieFire && (!Faerie_Fire.TargetHaveBuff || !ObjectManager.Target.HaveBuff(113746)))
        {
            Faerie_Fire.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 2 && Thrash.IsSpellUsable && Thrash.KnownSpell
                 && Thrash.IsDistanceGood && !Thrash.TargetHaveBuff && MySettings.UseThrash)
        {
            Thrash.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 2 && Swipe.IsSpellUsable && Swipe.KnownSpell
                 && Swipe.IsDistanceGood && MySettings.UseSwipe)
        {
            Swipe.Launch();
            return;
        }
        else if (Ferocious_Bite.IsSpellUsable && Ferocious_Bite.KnownSpell && Ferocious_Bite.IsDistanceGood
                 && MySettings.UseFerociousBite && !Rip_Timer.IsReady && ObjectManager.Me.ComboPoint > 4
                 && ObjectManager.Target.HealthPercent > 24 && !Savage_Roar_Timer.IsReady
                 && ObjectManager.Me.Energy > 49 && FivePtRip)
        {
            Ferocious_Bite.Launch();
            return;
        }
        else if (Savage_Roar.IsSpellUsable && Savage_Roar.KnownSpell && Savage_Roar.IsDistanceGood && !FivePtSav
                 && ObjectManager.Me.ComboPoint > 4 && MySettings.UseSavageRoar)
        {
            CP = ObjectManager.Me.ComboPoint;
            Savage_Roar.Launch();
            Savage_Roar_Timer = new Timer(1000*(12 + (6*CP)));
            FivePtSav = true;
            return;
        }
        else if (Savage_Roar.IsSpellUsable && Savage_Roar.KnownSpell && Savage_Roar.IsDistanceGood
                 && (!Savage_Roar.HaveBuff || Savage_Roar_Timer.IsReady) && MySettings.UseSavageRoar
                 && ObjectManager.Me.ComboPoint < 5)
        {
            CP = ObjectManager.Me.ComboPoint;
            Savage_Roar.Launch();
            Savage_Roar_Timer = new Timer(1000*(12 + (6*CP)));
            FivePtSav = false;
            return;
        }
        else
        {
            if (Rake.IsSpellUsable && Rake.KnownSpell && Rake.IsDistanceGood && !Rake.TargetHaveBuff
                && MySettings.UseRake)
            {
                Rake.Launch();
                return;
            }
        }

        if (ObjectManager.Target.HealthPercent > 24)
        {
            if (Rip.IsSpellUsable && Rip.KnownSpell && Rip.IsDistanceGood && !FivePtRip
                && ObjectManager.Me.ComboPoint > 4 && MySettings.UseRip)
            {
                Rip.Launch();
                Rip_Timer = new Timer(1000*13);
                FivePtRip = true;
                return;
            }

            if (Rip.IsSpellUsable && Rip.KnownSpell && Rip.IsDistanceGood && MySettings.UseRip
                && (!Rip.TargetHaveBuff || Rip_Timer.IsReady))
            {
                Rip.Launch();
                Rip_Timer = new Timer(1000*19);
                FivePtRip = false;
                return;
            }
        }
        else
        {
            if (Rip.IsSpellUsable && Rip.KnownSpell && Rip.IsDistanceGood && !Rip.TargetHaveBuff
                && MySettings.UseRip)
            {
                CP = ObjectManager.Me.ComboPoint;
                Rip.Launch();
                Rip_Timer = new Timer(1000*19);
                if (CP == 5)
                    FivePtFer = true;
                else
                    FivePtFer = false;
                return;
            }

            if (Ferocious_Bite.IsSpellUsable && Ferocious_Bite.KnownSpell && Ferocious_Bite.IsDistanceGood
                && !FivePtFer && ObjectManager.Me.ComboPoint > 4 && MySettings.UseFerociousBite)
            {
                Ferocious_Bite.Launch();
                Rip_Timer = new Timer(1000*19);
                FivePtFer = true;
                return;
            }

            if (Ferocious_Bite.IsSpellUsable && Ferocious_Bite.KnownSpell && Ferocious_Bite.IsDistanceGood
                && MySettings.UseFerociousBite && Rip_Timer.IsReady && ObjectManager.Me.ComboPoint < 5)
            {
                Ferocious_Bite.Launch();
                Rip_Timer = new Timer(1000*19);
                FivePtFer = false;
                return;
            }
        }

        if (ObjectManager.Me.HaveBuff(102543))
        {
            if (Ravage.KnownSpell && Ravage.IsSpellUsable && Ravage.IsDistanceGood
                && MySettings.UseRavage)
            {
                Ravage.Launch();
                return;
            }
        }
        else if (Shred.KnownSpell && Shred.IsSpellUsable && Shred.IsDistanceGood
                 && MySettings.UseShred && MySettings.UseGlyphofShred
                 && (Tigers_Fury.HaveBuff || Berserk.HaveBuff))
        {
            Shred.Launch();
            return;
        }
        else
        {
            if (Mangle.KnownSpell && Mangle.IsSpellUsable && Mangle.IsDistanceGood
                && MySettings.UseMangle)
            {
                Mangle.Launch();
                return;
            }
        }

        if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell
                && MySettings.UseArcaneTorrentForResource)
        {
            Arcane_Torrent.Launch();
            return;
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: DruidFeralSettings

    [Serializable]
    public class DruidFeralSettings : Settings
    {
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public int UseStoneformAtPercentage = 80;
        public int UseWarStompAtPercentage = 80;
        public bool UseAlchFlask = true;
        public bool UseArcaneTorrentForDecast = true;
        public bool UseArcaneTorrentForResource = true;
        public bool UseBarkskin = true;
        public bool UseBerserk = true;
        public bool UseBerserking = true;
        public bool UseBloodFury = true;
        public bool UseCatForm = true;
        public bool UseCenarionWard = true;
        public bool UseDash = true;
        public bool UseDisorientingRoar = true;
        public bool UseDisplacerBeast = false;
        public bool UseEngGlove = true;
        public bool UseFaerieFire = true;
        public bool UseFerociousBite = true;
        public bool UseForceofNature = true;
        public bool UseGiftoftheNaaru = true;
        public bool UseGlyphofShred = false;
        public bool UseHealingTouch = true;
        public bool UseHeartoftheWild = true;
        public bool UseIncarnation = true;
        public bool UseInnervate = true;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMaim = true;
        public bool UseMangle = true;
        public bool UseMarkoftheWild = true;
        public bool UseMassEntanglement = true;
        public bool UseMightofUrsoc = true;
        public bool UseMightyBash = true;
        public bool UseNaturesGrasp = true;
        public bool UseNaturesSwiftness = true;
        public bool UseNaturesVigil = true;
        public bool UsePounce = true;
        public bool UseProwl = false;
        public bool UseRake = true;
        public bool UseRavage = true;
        public bool UseRejuvenation = true;
        public bool UseRenewal = true;
        public bool UseRip = true;
        public bool UseSavageRoar = true;
        public bool UseShred = true;
        public bool UseSkullBash = true;
        public bool UseStampedingRoar = true;
        public bool UseStoneform = true;
        public bool UseSurvivalInstincts = true;
        public bool UseSwipe = true;
        public bool UseThrash = true;
        public bool UseTigersFury = true;
        public bool UseTranquility = true;
        public bool UseTrinket = true;
        public bool UseTyphoon = true;
        public bool UseUrsolsVortex = true;
        public bool UseWarStomp = true;
        public bool UseWildCharge = true;

        public DruidFeralSettings()
        {
            ConfigWinForm(new Point(500, 400), "Druid Feral Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrent", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Druid Buffs */
            AddControlInWinForm("Use Cat Form", "UseCatForm", "Druid Buffs");
            AddControlInWinForm("Use Dash", "UseDash", "Druid Buffs");
            AddControlInWinForm("Use Displacer Beast", "UseDisplacerBeast", "Druid Buffs");
            AddControlInWinForm("Use Faerie Fire", "UseFaerieFire", "Druid Buffs");
            AddControlInWinForm("Use Mark of the Wild", "UseMarkoftheWild", "Druid Buffs");
            AddControlInWinForm("Use Prowl", "UseProwl", "Druid Buffs");
            AddControlInWinForm("Use Savage Roar", "UseSavageRoar", "Druid Buffs");
            AddControlInWinForm("Use Stampeding Roar", "UseStampedingRoar", "Druid Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Ferocious Bite", "UseFerociousBite", "Offensive Spell");
            AddControlInWinForm("Use Maim ", "UseMaim ", "Offensive Spell");
            AddControlInWinForm("Use Mangle", "UseMangle", "Offensive Spell");
            AddControlInWinForm("Use Pounce", "UsePounce", "Offensive Spell");
            AddControlInWinForm("Use Rake", "UseRake", "Offensive Spell");
            AddControlInWinForm("Use Ravage", "UseRavage", "Offensive Spell");
            AddControlInWinForm("Use Rip", "UseRip", "Offensive Spell");
            AddControlInWinForm("Use Shred", "UseShred", "Offensive Spell");
            AddControlInWinForm("Use Swipe", "UseSwipe", "Offensive Spell");
            AddControlInWinForm("Use Thrash", "UseThrash", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Berserk", "UseBerserk", "Offensive Cooldown");
            AddControlInWinForm("Use Force of Nature", "UseForceofNature", "Offensive Cooldown");
            AddControlInWinForm("Use Heart of the Wild", "UseHeartoftheWild", "Offensive Cooldown");
            AddControlInWinForm("Use Incarnation", "UseIncarnation", "Offensive Cooldown");
            AddControlInWinForm("Use Nature's Vigil", "UseNaturesVigil", "Offensive Cooldown");
            AddControlInWinForm("Use Tiger's Fury", "UseTigersFury", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Barkskin", "UseBarkskin", "Defensive Cooldown");
            AddControlInWinForm("Use Disorienting Roar", "UseDisorientingRoar", "Defensive Cooldown");
            AddControlInWinForm("Use Mass Entanglement", "UseMassEntanglement", "Defensive Cooldown");
            AddControlInWinForm("Use Mighty Bash", "UseMightyBash", "Defensive Cooldown");
            AddControlInWinForm("Use Nature's Grasp", "UseNaturesGrasp", "Defensive Cooldown");
            AddControlInWinForm("Use Skull Bash", "UseSkullBash", "Defensive Cooldown");
            AddControlInWinForm("Use Survival Instincts", "UseSurvivalInstincts", "Defensive Cooldown");
            AddControlInWinForm("Use Typhoon", "UseTyphoon", "Defensive Cooldown");
            AddControlInWinForm("Use Ursol's Vortex", "UseUrsolsVortex", "Defensive Cooldown");
            AddControlInWinForm("Use Wild Charge", "UseWildCharge", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Cenarion Ward", "UseCenarionWard", "Healing Spell");
            AddControlInWinForm("Use Healing Touch", "UseHealingTouch", "Healing Spell");
            AddControlInWinForm("Use Innervate", "UseInnervate", "Healing Spell");
            AddControlInWinForm("Use Might of Ursoc", "UseMightofUrsoc", "Healing Spell");
            AddControlInWinForm("Use Nature's Swiftness", "UseNaturesSwiftness", "Healing Spell");
            AddControlInWinForm("Use Rejuvenation", "UseRejuvenation", "Healing Spell");
            AddControlInWinForm("Use Renewal", "UseRenewal", "Healing Spell");
            AddControlInWinForm("Use Tranquility", "UseTranquility", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Using Glyph of Shred?", "UseGlyphofShred", "Game Settings");
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket", "UseTrinket", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
        }

        public static DruidFeralSettings CurrentSetting { get; set; }

        public static DruidFeralSettings GetSettings()
        {
            string CurrentSettingsFile = Application.StartupPath + "\\CustomClasses\\Settings\\Druid_Feral.xml";
            if (File.Exists(CurrentSettingsFile))
            {
                return
                    CurrentSetting = Load<DruidFeralSettings>(CurrentSettingsFile);
            }
            else
            {
                return new DruidFeralSettings();
            }
        }
    }

    #endregion
}

public class Druid_Restoration
{
    private readonly DruidRestorationSettings MySettings = DruidRestorationSettings.GetSettings();
    private readonly string MoveBackward = nManager.Wow.Helpers.Keybindings.GetKeyByAction(nManager.Wow.Enums.Keybindings.MOVEBACKWARD);

    #region General Timers & Variables

    private Timer AlchFlask_Timer = new Timer(0);
    private Timer Engineering_Timer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer Trinket_Timer = new Timer(0);

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell Arcane_Torrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell Blood_Fury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell Gift_of_the_Naaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell War_Stomp = new Spell("War Stomp");

    #endregion

    #region Druid Buffs

    private readonly Spell Dash = new Spell("Dash");
    private readonly Spell Faerie_Fire = new Spell("Faerie Fire");
    private readonly Spell Mark_of_the_Wild = new Spell("Mark of the Wild");
    private readonly Spell Stampeding_Roar = new Spell("Stampeding Roar");

    #endregion

    #region Offensive Spell

    private readonly Spell Hurricane = new Spell("Hurricane");
    private readonly Spell Moonfire = new Spell("Moonfire");
    private readonly Spell Wrath = new Spell("Wrath");
    private Timer Moonfire_Timer = new Timer(0);

    #endregion

    #region Healing Cooldown

    private readonly Spell Force_of_Nature = new Spell("Force of Nature");
    private readonly Spell Incarnation = new Spell("Incarnation");

    #endregion

    #region Defensive Cooldown

    private readonly Spell Barkskin = new Spell("Barkskin");
    private readonly Spell Disorienting_Roar = new Spell("Disorienting Roar");
    private readonly Spell Entangling_Roots = new Spell("Entangling Roots");
    private readonly Spell Ironbark = new Spell("Ironbark");
    private readonly Spell Mass_Entanglement = new Spell("Mass Entanglement");
    private readonly Spell Mighty_Bash = new Spell("Mighty Bash");
    private readonly Spell Natures_Grasp = new Spell("Nature's Grasp");
    private readonly Spell Solar_Beam = new Spell("Solar Beam");
    private readonly Spell Typhoon = new Spell("Typhoon");
    private readonly Spell Ursols_Vortex = new Spell("Ursol's Vortex");
    private readonly Spell Wild_Charge = new Spell("Wild Charge");

    #endregion

    #region Healing Spell

    private readonly Spell Cenarion_Ward = new Spell("Cenarion Ward");
    private readonly Spell Healing_Touch = new Spell("Healing Touch");
    private readonly Spell Innervate = new Spell("Innervate");
    private readonly Spell Lifebloom = new Spell("Lifebloom");
    private readonly Spell Might_of_Ursoc = new Spell("Might of Ursoc");
    private readonly Spell Natures_Swiftness = new Spell("Nature's Swiftness");
    private readonly Spell Nourish = new Spell("Nourish");
    private readonly Spell Regrowth = new Spell("Regrowth");
    private readonly Spell Rejuvenation = new Spell("Rejuvenation");
    private readonly Spell Renewal = new Spell("Renewal");
    private readonly Spell Swiftmend = new Spell("Swiftmend");
    private readonly Spell Tranquility = new Spell("Tranquility");
    private readonly Spell Wild_Growth = new Spell("Wild Growth");
    private readonly Spell Wild_Mushroom = new Spell("Wild Mushroom");
    private readonly Spell Wild_Mushroom_Bloom = new Spell("Wild Mushroom: Bloom");
    private Timer Healing_Touch_Timer = new Timer(0);
    private Timer Nourish_Timer = new Timer(0);

    #endregion

    public Druid_Restoration()
    {
        Main.range = 30.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (Moonfire.IsDistanceGood || Wrath.IsDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            Combat();
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(250);
        }
    }

    private void Pull()
    {
        if (Moonfire.KnownSpell && Moonfire.IsDistanceGood && Moonfire.IsSpellUsable
            && MySettings.UseMoonfire)
        {
            Moonfire.Launch();
            Moonfire_Timer = new Timer(1000*11);
            return;
        }
        else
        {
            if (Wrath.KnownSpell && Wrath.IsDistanceGood && Wrath.IsSpellUsable
                && MySettings.UseWrath)
            {
                Wrath.Launch();
                return;
            }
        }
    }

    private void Combat()
    {
        Buff();
        AvoidMelee();
        if (OnCD.IsReady)
            Defense_Cycle();
        Heal();
        Decast();
        Healing_Burst();
        DPS_Cycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (AlchFlask_Timer.IsReady && MySettings.UseAlchFlask && Alchemy.KnownSpell
            && ItemsManager.GetItemCountByIdLUA(75525) == 1)
        {
            Logging.WriteFight("Use Alchi Flask");
            Lua.RunMacroText("/use item:75525");
            AlchFlask_Timer = new Timer(1000*60*60*2);
            return;
        }
        else if (Mark_of_the_Wild.KnownSpell && Mark_of_the_Wild.IsSpellUsable && !Mark_of_the_Wild.HaveBuff
                 && MySettings.UseMarkoftheWild)
        {
            Mark_of_the_Wild.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() == 0 && MySettings.UseDash
                 && Dash.KnownSpell && Dash.IsSpellUsable && !Dash.HaveBuff && !Stampeding_Roar.HaveBuff
                 && ObjectManager.Me.GetMove)
        {
            Dash.Launch();
            return;
        }
        else
        {
            if (ObjectManager.GetNumberAttackPlayer() == 0 && MySettings.UseStampedingRoar
                && Stampeding_Roar.KnownSpell && Stampeding_Roar.IsSpellUsable && !Dash.HaveBuff
                && !Stampeding_Roar.HaveBuff && ObjectManager.Me.GetMove)
            {
                Stampeding_Roar.Launch();
                return;
            }
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            Keyboard.DownKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
            while (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
                Thread.Sleep(300);
            Keyboard.UpKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
        }
    }

    private void Defense_Cycle()
    {
        if (ObjectManager.Me.HealthPercent <= MySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable && Stoneform.KnownSpell
            && MySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && Barkskin.KnownSpell && Barkskin.IsSpellUsable
                 && MySettings.UseBarkskin)
        {
            Barkskin.Launch();
            OnCD = new Timer(1000*12);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && Ironbark.KnownSpell && Ironbark.IsSpellUsable
                 && MySettings.UseIronbark)
        {
            Ironbark.Launch();
            OnCD = new Timer(1000*12);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && Mighty_Bash.KnownSpell && Mighty_Bash.IsSpellUsable
                 && MySettings.UseMightyBash && Mighty_Bash.IsDistanceGood)
        {
            Mighty_Bash.Launch();
            OnCD = new Timer(1000*5);
            return;
        }
        else if (Mass_Entanglement.KnownSpell && Mass_Entanglement.IsSpellUsable && Mass_Entanglement.IsDistanceGood
                 && MySettings.UseMassEntanglement && ObjectManager.Me.HealthPercent < 80)
        {
            Mass_Entanglement.Launch();

            if (Wild_Charge.KnownSpell && Wild_Charge.IsDistanceGood && Wild_Charge.IsSpellUsable
                && MySettings.UseWildCharge)
            {
                Thread.Sleep(200);
                Wild_Charge.Launch();
            }
            return;
        }
        else if (Ursols_Vortex.KnownSpell && Ursols_Vortex.IsSpellUsable && Ursols_Vortex.IsDistanceGood
                 && MySettings.UseUrsolsVortex && ObjectManager.Me.HealthPercent < 80)
        {
            Ursols_Vortex.Launch();

            if (Wild_Charge.KnownSpell && Wild_Charge.IsDistanceGood && Wild_Charge.IsSpellUsable
                && MySettings.UseWildCharge)
            {
                Thread.Sleep(200);
                Wild_Charge.Launch();
            }
            return;
        }
        else if (Natures_Grasp.KnownSpell && Natures_Grasp.IsSpellUsable
                 && ObjectManager.Target.IsCast && MySettings.UseNaturesGrasp && ObjectManager.Me.HealthPercent < 80)
        {
            Natures_Grasp.Launch();

            if (Wild_Charge.KnownSpell && Wild_Charge.IsDistanceGood && Wild_Charge.IsSpellUsable
                && MySettings.UseWildCharge)
            {
                Thread.Sleep(200);
                Wild_Charge.Launch();
            }
            return;
        }
        else if (Typhoon.KnownSpell && Typhoon.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 2
                 && ObjectManager.Target.GetDistance < 40 && ObjectManager.Me.HealthPercent < 70
                 && MySettings.UseTyphoon)
        {
            Typhoon.Launch();
            return;
        }
        else if (Disorienting_Roar.KnownSpell && Disorienting_Roar.IsSpellUsable &&
                 ObjectManager.GetNumberAttackPlayer() > 2
                 && ObjectManager.Target.GetDistance < 10 && ObjectManager.Me.HealthPercent < 70
                 && MySettings.UseDisorientingRoar)
        {
            Disorienting_Roar.Launch();
            OnCD = new Timer(1000*3);
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent <= MySettings.UseWarStompAtPercentage && War_Stomp.IsSpellUsable && War_Stomp.KnownSpell
                && MySettings.UseWarStomp)
            {
                War_Stomp.Launch();
                OnCD = new Timer(1000*2);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell && ObjectManager.Me.HealthPercent <= MySettings.UseArcaneTorrentForResourceAtPercentage
                && MySettings.UseArcaneTorrentForResource)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && Natures_Swiftness.IsSpellUsable && Natures_Swiftness.KnownSpell
            && MySettings.UseNaturesSwiftness && MySettings.UseHealingTouch)
        {
            Natures_Swiftness.Launch();
            Thread.Sleep(400);
            Healing_Touch.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 70 && Renewal.IsSpellUsable && Renewal.KnownSpell
                 && MySettings.UseRenewal)
        {
            Renewal.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 95 && !Fight.InFight && ObjectManager.GetNumberAttackPlayer() == 0
                 && Healing_Touch.IsSpellUsable && Healing_Touch.KnownSpell && MySettings.UseHealingTouch)
        {
            Healing_Touch.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 90 && Cenarion_Ward.IsSpellUsable && Cenarion_Ward.KnownSpell
                 && MySettings.UseCenarionWard)
        {
            Cenarion_Ward.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseGiftoftheNaaruAtPercentage && Gift_of_the_Naaru.IsSpellUsable && Gift_of_the_Naaru.KnownSpell
                 && MySettings.UseGiftoftheNaaru)
        {
            Gift_of_the_Naaru.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 90 && Rejuvenation.IsSpellUsable && Rejuvenation.KnownSpell
                 && !Rejuvenation.HaveBuff && MySettings.UseRejuvenation)
        {
            Rejuvenation.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 60 && Regrowth.IsSpellUsable && Regrowth.KnownSpell
                 && !Regrowth.HaveBuff && MySettings.UseRegrowth)
        {
            Regrowth.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && Swiftmend.IsSpellUsable && Swiftmend.KnownSpell
                 && MySettings.UseSwiftmend)
        {
            Swiftmend.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 50 && Wild_Growth.IsSpellUsable && Wild_Growth.KnownSpell
                 && MySettings.UseWildGrowth)
        {
            Wild_Growth.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 40 && Healing_Touch.IsSpellUsable && Healing_Touch.KnownSpell
                 && Healing_Touch_Timer.IsReady && MySettings.UseHealingTouch)
        {
            Healing_Touch.Launch();
            Healing_Touch_Timer = new Timer(1000*15);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 40 && Nourish.IsSpellUsable && Nourish.KnownSpell
                 && Nourish_Timer.IsReady && MySettings.UseNourish && !MySettings.UseHealingTouch)
        {
            Nourish.Launch();
            Nourish_Timer = new Timer(1000*15);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 35 && Might_of_Ursoc.IsSpellUsable && Might_of_Ursoc.KnownSpell
                 && MySettings.UseMightofUrsoc)
        {
            Might_of_Ursoc.Launch();
            return;
        }
        else if (Wild_Mushroom.KnownSpell && Wild_Mushroom.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 3
                 && Wild_Mushroom_Bloom.KnownSpell && Wild_Mushroom.IsSpellUsable && MySettings.UseWildMushroom
                 && ObjectManager.Me.HealthPercent < 80)
        {
            for (int i = 0; i < 3; i++)
            {
                SpellManager.CastSpellByIDAndPosition(88747, ObjectManager.Target.Position);
                Thread.Sleep(200);
            }

            Wild_Mushroom_Bloom.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent < 30 && Tranquility.IsSpellUsable && Tranquility.KnownSpell
                && MySettings.UseTranquility)
            {
                Tranquility.Launch();
                while (ObjectManager.Me.IsCast)
                {
                    Thread.Sleep(100);
                    Thread.Sleep(100);
                }
                return;
            }
        }

        if (ObjectManager.Me.ManaPercentage < 50 && MySettings.UseInnervate)
        {
            Innervate.Launch();
            return;
        }
    }

    private void Decast()
    {
        if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell && ObjectManager.Target.GetDistance < 8
            && ObjectManager.Me.HealthPercent <= MySettings.UseArcaneTorrentForDecastAtPercentage
            && MySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
        {
            Arcane_Torrent.Launch();
            return;
        }
    }

    public void Healing_Burst()
    {
        if (MySettings.UseTrinket && Trinket_Timer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Trinket_Timer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBerserking)
            Berserking.Launch();
        else if (Blood_Fury.IsSpellUsable && Blood_Fury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBloodFury)
            Blood_Fury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (Engineering_Timer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                && MySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            Engineering_Timer = new Timer(1000*60);
        }
        else if (Force_of_Nature.IsSpellUsable && Force_of_Nature.KnownSpell && Force_of_Nature.IsDistanceGood
                 && MySettings.UseForceofNature)
        {
            Force_of_Nature.Launch();
            return;
        }
        else
        {
            if (Incarnation.IsSpellUsable && Incarnation.KnownSpell && MySettings.UseIncarnation
                && ObjectManager.Target.GetDistance < 30)
            {
                Incarnation.Launch();
                return;
            }
        }
    }

    private void DPS_Cycle()
    {
        if (Moonfire.KnownSpell && Moonfire.IsDistanceGood && Moonfire.IsSpellUsable
                 && MySettings.UseMoonfire && (!Moonfire.TargetHaveBuff || Moonfire_Timer.IsReady))
        {
            Moonfire.Launch();
            Moonfire_Timer = new Timer(1000*11);
            return;
        }
        else if (Hurricane.KnownSpell && Hurricane.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 2 &&
                 ObjectManager.Target.GetDistance < 30 && MySettings.UseHurricane)
        {
            SpellManager.CastSpellByIDAndPosition(16914, ObjectManager.Target.Position);
            return;
        }
        else
        {
            if (Wrath.KnownSpell && Wrath.IsSpellUsable && Wrath.IsDistanceGood
                && MySettings.UseWrath)
            {
                Wrath.Launch();
                return;
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: DruidRestorationSettings

    [Serializable]
    public class DruidRestorationSettings : Settings
    {
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public int UseStoneformAtPercentage = 80;
        public int UseWarStompAtPercentage = 80;
        public bool UseAlchFlask = true;
        public bool UseArcaneTorrentForDecast = true;
        public bool UseArcaneTorrentForResource = true;
        public bool UseBarkskin = true;
        public bool UseBerserking = true;
        public bool UseBloodFury = true;
        public bool UseCenarionWard = true;
        public bool UseDash = true;
        public bool UseDisorientingRoar = true;
        public bool UseEngGlove = true;
        public bool UseEntanglingRoots = true;
        public bool UseFaerieFire = true;
        public bool UseForceofNature = true;
        public bool UseGiftoftheNaaru = true;
        public bool UseHealingTouch = true;
        public bool UseHurricane = true;
        public bool UseIncarnation = true;
        public bool UseInnervate = true;
        public bool UseIronbark = true;
        public bool UseLifeblood = true;
        public bool UseLifebloom = true;
        public bool UseLowCombat = true;
        public bool UseMarkoftheWild = true;
        public bool UseMassEntanglement = true;
        public bool UseMightofUrsoc = true;
        public bool UseMightyBash = true;
        public bool UseMoonfire = true;
        public bool UseNaturesGrasp = true;
        public bool UseNaturesSwiftness = true;
        public bool UseNourish = false;
        public bool UseRegrowth = true;
        public bool UseRejuvenation = true;
        public bool UseRenewal = true;
        public bool UseSolarBeam = true;
        public bool UseStampedingRoar = true;
        public bool UseStoneform = true;
        public bool UseSwiftmend = true;
        public bool UseTranquility = true;
        public bool UseTrinket = true;
        public bool UseTyphoon = true;
        public bool UseUrsolsVortex = true;
        public bool UseWarStomp = true;
        public bool UseWildCharge = true;
        public bool UseWildGrowth = true;
        public bool UseWildMushroom = false;
        public bool UseWrath = true;

        public DruidRestorationSettings()
        {
            ConfigWinForm(new Point(500, 400), "Druid Restoration Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrent", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Druid Buffs */
            AddControlInWinForm("Use Dash", "UseDash", "Druid Buffs");
            AddControlInWinForm("Use Faerie Fire", "UseFaerieFire", "Druid Buffs");
            AddControlInWinForm("Use Mark of the Wild", "UseMarkoftheWild", "Druid Buffs");
            AddControlInWinForm("Use Stampeding Roar", "UseStampedingRoar", "Druid Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Hurricane", "UseHurricane", "Offensive Spell");
            AddControlInWinForm("Use Moonfire", "UseMoonfire", "Offensive Spell");
            AddControlInWinForm("Use Wrath", "UseWrath", "Offensive Spell");
            /* Healing Cooldown */
            AddControlInWinForm("Use Force of Nature", "UseForceofNature", "Offensive Cooldown");
            AddControlInWinForm("Use Incarnation", "UseIncarnation", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Barkskin", "UseBarkskin", "Defensive Cooldown");
            AddControlInWinForm("Use Disorienting Roar", "UseDisorientingRoar", "Defensive Cooldown");
            AddControlInWinForm("Use Entangling Roots", "UseEntanglingRoots", "Defensive Cooldown");
            AddControlInWinForm("Use Ironbark", "UseIronbark", "Defensive Cooldown");
            AddControlInWinForm("Use Mass Entanglement", "UseMassEntanglement", "Defensive Cooldown");
            AddControlInWinForm("Use Mighty Bash", "UseMightyBash", "Defensive Cooldown");
            AddControlInWinForm("Use Nature's Grasp", "UseNaturesGrasp", "Defensive Cooldown");
            AddControlInWinForm("Use Solar Beam", "UseSolarBeam", "Defensive Cooldown");
            AddControlInWinForm("Use Typhoon", "UseTyphoon", "Defensive Cooldown");
            AddControlInWinForm("Use Ursol's Vortex", "UseUrsolsVortex", "Defensive Cooldown");
            AddControlInWinForm("Use Wild Charge", "UseWildCharge", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Cenarion Ward", "UseCenarionWard", "Healing Spell");
            AddControlInWinForm("Use Healing Touch", "UseHealingTouch", "Healing Spell");
            AddControlInWinForm("Use Innervate", "UseInnervate", "Healing Spell");
            AddControlInWinForm("Use Lifebloom", "UseLifebloom", "Offensive Spell");
            AddControlInWinForm("Use Might of Ursoc", "UseMightofUrsoc", "Healing Spell");
            AddControlInWinForm("Use Nature's Swiftness", "UseNaturesSwiftness", "Healing Spell");
            AddControlInWinForm("Use Nourish", "UseNourish", "Offensive Spell");
            AddControlInWinForm("Use Regrowth", "UseRegrowth", "Offensive Spell");
            AddControlInWinForm("Use Rejuvenation", "UseRejuvenation", "Healing Spell");
            AddControlInWinForm("Use Renewal", "UseRenewal", "Healing Spell");
            AddControlInWinForm("Use Swiftmend", "UseSwiftmend", "Offensive Spell");
            AddControlInWinForm("Use Tranquility", "UseTranquility", "Healing Spell");
            AddControlInWinForm("Use Wild Growth", "UseWildGrowth", "Offensive Spell");
            AddControlInWinForm("Use WildMushroom", "UseWildMushroom", "Offensive Spell");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket", "UseTrinket", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
        }

        public static DruidRestorationSettings CurrentSetting { get; set; }

        public static DruidRestorationSettings GetSettings()
        {
            string CurrentSettingsFile = Application.StartupPath + "\\CustomClasses\\Settings\\Druid_Restoration.xml";
            if (File.Exists(CurrentSettingsFile))
            {
                return
                    CurrentSetting = Load<DruidRestorationSettings>(CurrentSettingsFile);
            }
            else
            {
                return new DruidRestorationSettings();
            }
        }
    }

    #endregion
}

public class Druid_Guardian
{
    private readonly DruidGuardianSettings MySettings = DruidGuardianSettings.GetSettings();
    private readonly string MoveBackward = nManager.Wow.Helpers.Keybindings.GetKeyByAction(nManager.Wow.Enums.Keybindings.MOVEBACKWARD);

    #region General Timers & Variables

    private Timer AlchFlask_Timer = new Timer(0);
    private Timer Engineering_Timer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer Trinket_Timer = new Timer(0);

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell Arcane_Torrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell Blood_Fury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell Gift_of_the_Naaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell War_Stomp = new Spell("War Stomp");

    #endregion

    #region Druid Buffs

    private readonly Spell Bear_Form = new Spell("Bear Form");
    private readonly Spell Dash = new Spell("Dash");
    private readonly Spell Faerie_Fire = new Spell("Faerie Fire");
    private readonly Spell Mark_of_the_Wild = new Spell("Mark of the Wild");
    private readonly Spell Stampeding_Roar = new Spell("Stampeding Roar");

    #endregion

    #region Offensive Spell

    private readonly Spell Growl = new Spell("Growl");
    private readonly Spell Lacerate = new Spell("Lacerate");
    private readonly Spell Mangle = new Spell("Mangle");
    private readonly Spell Maul = new Spell("Maul");
    private readonly Spell Swipe = new Spell("Swipe");
    private readonly Spell Thrash = new Spell("Thrash");

    #endregion

    #region Offensive Cooldown

    private readonly Spell Berserk = new Spell("Berserk");
    private readonly Spell Enrage = new Spell("Enrage");
    private readonly Spell Force_of_Nature = new Spell("Force of Nature");
    private readonly Spell Heart_of_the_Wild = new Spell("Heart of the Wild");
    private readonly Spell Incarnation = new Spell("Incarnation");
    private readonly Spell Natures_Vigil = new Spell("Nature's Vigil");

    #endregion

    #region Defensive Cooldown

    private readonly Spell Barkskin = new Spell("Barkskin");
    private readonly Spell Bear_Hug = new Spell("Bear Hug");
    private readonly Spell Disorienting_Roar = new Spell("Disorienting Roar");
    private readonly Spell Mass_Entanglement = new Spell("Mass Entanglement");
    private readonly Spell Mighty_Bash = new Spell("Mighty Bash");
    private readonly Spell Natures_Grasp = new Spell("Nature's Grasp");
    private readonly Spell Savage_Defense = new Spell("Savage Defense");
    private readonly Spell Skull_Bash = new Spell("Skull Bash");
    private readonly Spell Survival_Instincts = new Spell("Survival Instincts");
    private readonly Spell Typhoon = new Spell("Typhoon");
    private readonly Spell Ursols_Vortex = new Spell("Ursol's Vortex");
    private readonly Spell Wild_Charge = new Spell("Wild Charge");

    #endregion

    #region Healing Spell

    private readonly Spell Cenarion_Ward = new Spell("Cenarion Ward");
    private readonly Spell Frenzied_Regeneration = new Spell("Frenzied_Regeneration");
    private readonly Spell Healing_Touch = new Spell("Healing Touch");
    private readonly Spell Innervate = new Spell("Innervate");
    private readonly Spell Might_of_Ursoc = new Spell("Might of Ursoc");
    private readonly Spell Natures_Swiftness = new Spell("Nature's Swiftness");
    private readonly Spell Rejuvenation = new Spell("Rejuvenation");
    private readonly Spell Renewal = new Spell("Renewal");
    private readonly Spell Tranquility = new Spell("Tranquility");
    private Timer Healing_Touch_Timer = new Timer(0);

    #endregion

    public Druid_Guardian()
    {
        Main.range = 5.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (Faerie_Fire.IsDistanceGood || Wild_Charge.IsDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && MySettings.UseLowCombat)
                                LowCombat();
                            else
                                Combat();
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void Pull()
    {
        if (!ObjectManager.Me.HaveBuff(5487) && MySettings.UseBearForm)
            Bear_Form.Launch();

        if (Wild_Charge.KnownSpell && Wild_Charge.IsSpellUsable && Wild_Charge.IsDistanceGood
            && MySettings.UseWildCharge)
        {
            Wild_Charge.Launch();
            return;
        }
        else
        {
            if (Faerie_Fire.KnownSpell && Faerie_Fire.IsSpellUsable && Faerie_Fire.IsDistanceGood
                && MySettings.UseFaerieFire)
            {
                Faerie_Fire.Launch();
                return;
            }
        }
    }

    private void LowCombat()
    {
        Buff();
        AvoidMelee();
        Defense_Cycle();
        Heal();

        if (!ObjectManager.Me.HaveBuff(5487) && MySettings.UseBearForm)
        {
            Bear_Form.Launch();
            return;
        }

        if (Mangle.IsSpellUsable && Mangle.KnownSpell && Mangle.IsDistanceGood
            && MySettings.UseMangle)
        {
            Mangle.Launch();
            if (ObjectManager.Target.HealthPercent < 50 && ObjectManager.Target.HealthPercent > 0)
            {
                Mangle.Launch();
                return;
            }
        }
        else if (Maul.IsSpellUsable && Maul.KnownSpell && Maul.IsDistanceGood
                 && MySettings.UseMaul)
        {
            Maul.Launch();
            return;
        }
        else
        {
            if (Swipe.IsSpellUsable && Swipe.KnownSpell && Swipe.IsDistanceGood
                && MySettings.UseSwipe)
            {
                Swipe.Launch();
                return;
            }
        }
    }

    private void Combat()
    {
        Buff();
        AvoidMelee();
        if (OnCD.IsReady)
            Defense_Cycle();
        Heal();
        Decast();
        DPS_Burst();
        DPS_Cycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (Mark_of_the_Wild.KnownSpell && Mark_of_the_Wild.IsSpellUsable && !Mark_of_the_Wild.HaveBuff)
        {
            Mark_of_the_Wild.Launch();
            return;
        }
        else if (AlchFlask_Timer.IsReady && MySettings.UseAlchFlask && Alchemy.KnownSpell
                 && ItemsManager.GetItemCountByIdLUA(75525) == 1)
        {
            Logging.WriteFight("Use Alchi Flask");
            Lua.RunMacroText("/use item:75525");
            AlchFlask_Timer = new Timer(1000*60*60*2);
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() == 0 && MySettings.UseDash
                 && Dash.KnownSpell && Dash.IsSpellUsable && !Dash.HaveBuff && !Stampeding_Roar.HaveBuff
                 && ObjectManager.Me.GetMove)
        {
            Dash.Launch();
            return;
        }
        else
        {
            if (ObjectManager.GetNumberAttackPlayer() == 0 && MySettings.UseStampedingRoar
                && Stampeding_Roar.KnownSpell && Stampeding_Roar.IsSpellUsable && !Dash.HaveBuff
                && !Stampeding_Roar.HaveBuff && ObjectManager.Me.GetMove)
            {
                Stampeding_Roar.Launch();
                return;
            }
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            Keyboard.DownKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
            while (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
                Thread.Sleep(300);
            Keyboard.UpKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (ObjectManager.Me.HealthPercent < 80 && Natures_Swiftness.IsSpellUsable && Natures_Swiftness.KnownSpell
            && MySettings.UseNaturesSwiftness && MySettings.UseHealingTouch)
        {
            Natures_Swiftness.Launch();
            Thread.Sleep(400);
            Healing_Touch.Launch();
            return;
        }
        if (ObjectManager.Me.HealthPercent < 75 && Frenzied_Regeneration.IsSpellUsable &&
            Frenzied_Regeneration.KnownSpell
            && MySettings.UseFrenziedRegeneration)
        {
            Frenzied_Regeneration.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 70 && Renewal.IsSpellUsable && Renewal.KnownSpell
                 && MySettings.UseRenewal)
        {
            Renewal.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 90 && Cenarion_Ward.IsSpellUsable && Cenarion_Ward.KnownSpell
                 && MySettings.UseCenarionWard)
        {
            Cenarion_Ward.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 50 && !Fight.InFight && ObjectManager.GetNumberAttackPlayer() == 0
                 && Healing_Touch.IsSpellUsable && Healing_Touch.KnownSpell && MySettings.UseHealingTouch)
        {
            while (ObjectManager.Me.HealthPercent < 95 && Healing_Touch.IsSpellUsable)
            {
                Healing_Touch.Launch();
                Thread.Sleep(1500);
            }
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseGiftoftheNaaruAtPercentage && Gift_of_the_Naaru.IsSpellUsable && Gift_of_the_Naaru.KnownSpell)
        {
            Gift_of_the_Naaru.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 50 && Rejuvenation.IsSpellUsable && Rejuvenation.KnownSpell
                 && !Rejuvenation.HaveBuff && MySettings.UseRejuvenation)
        {
            Rejuvenation.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 40 && Healing_Touch.IsSpellUsable && Healing_Touch.KnownSpell
                 && Healing_Touch_Timer.IsReady && MySettings.UseHealingTouch)
        {
            Healing_Touch.Launch();
            Healing_Touch_Timer = new Timer(1000*15);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 35 && Might_of_Ursoc.IsSpellUsable && Might_of_Ursoc.KnownSpell
                 && MySettings.UseMightofUrsoc)
        {
            Might_of_Ursoc.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 30 && Tranquility.IsSpellUsable && Tranquility.KnownSpell
                 && MySettings.UseTranquility)
        {
            Tranquility.Launch();
            while (ObjectManager.Me.IsCast)
            {
                Thread.Sleep(100);
                Thread.Sleep(100);
            }
            return;
        }
        else
        {
            if (ObjectManager.Me.ManaPercentage < 10 && MySettings.UseInnervate)
            {
                Innervate.Launch();
                return;
            }
        }
    }

    private void Defense_Cycle()
    {
        if (ObjectManager.Me.HealthPercent < 80 && MySettings.UseBarkskin
            && Barkskin.KnownSpell && Barkskin.IsSpellUsable)
        {
            Barkskin.Launch();
            OnCD = new Timer(1000*12);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 90 && MySettings.UseSavageDefense
                 && Savage_Defense.KnownSpell && Savage_Defense.IsSpellUsable)
        {
            Savage_Defense.Launch();
            OnCD = new Timer(1000*6);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 90 && Mighty_Bash.IsDistanceGood
                 && Mighty_Bash.KnownSpell && Mighty_Bash.IsSpellUsable && MySettings.UseMightyBash)
        {
            Mighty_Bash.Launch();
            OnCD = new Timer(1000*5);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 70 && Bear_Hug.KnownSpell && Bear_Hug.IsSpellUsable
                 && MySettings.UseBearHug && Bear_Hug.IsDistanceGood)
        {
            Bear_Hug.Launch();
            OnCD = new Timer(1000*3);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 70 && MySettings.UseSurvivalInstincts
                 && Survival_Instincts.KnownSpell && Survival_Instincts.IsSpellUsable)
        {
            Survival_Instincts.Launch();
            OnCD = new Timer(1000*12);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable && Stoneform.KnownSpell
                 && MySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (Mass_Entanglement.KnownSpell && Mass_Entanglement.IsSpellUsable && Mass_Entanglement.IsDistanceGood
                 && ObjectManager.Target.IsCast && MySettings.UseMassEntanglement &&
                 ObjectManager.GetNumberAttackPlayer() > 2
                 && ObjectManager.Me.HealthPercent < 70)
        {
            if (Typhoon.KnownSpell && Typhoon.IsSpellUsable && MySettings.UseTyphoon
                && ObjectManager.Target.GetDistance < 40 && MySettings.UseTyphoon)
            {
                Typhoon.Launch();
                Thread.Sleep(200);
            }

            Mass_Entanglement.Launch();
            return;
        }
        else if (Ursols_Vortex.KnownSpell && Ursols_Vortex.IsSpellUsable && Ursols_Vortex.IsDistanceGood
                 && MySettings.UseUrsolsVortex && ObjectManager.Me.HealthPercent < 80
                 && ObjectManager.GetNumberAttackPlayer() > 2)
        {
            Ursols_Vortex.Launch();

            if (Wild_Charge.KnownSpell && Wild_Charge.IsDistanceGood && Wild_Charge.IsSpellUsable
                && MySettings.UseWildCharge)
            {
                Thread.Sleep(200);
                Wild_Charge.Launch();
            }
            return;
        }
        else if (Natures_Grasp.KnownSpell && Natures_Grasp.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 2
                 && ObjectManager.Target.IsCast && MySettings.UseNaturesGrasp && ObjectManager.Me.HealthPercent < 80)
        {
            Natures_Grasp.Launch();
            return;
        }
        else if (Typhoon.KnownSpell && Typhoon.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 2
                 && ObjectManager.Target.GetDistance < 40 && ObjectManager.Me.HealthPercent < 70
                 && MySettings.UseTyphoon)
        {
            Typhoon.Launch();
            return;
        }
        else if (Disorienting_Roar.KnownSpell && Disorienting_Roar.IsSpellUsable &&
                 ObjectManager.GetNumberAttackPlayer() > 2
                 && ObjectManager.Target.GetDistance < 10 && ObjectManager.Me.HealthPercent < 70
                 && MySettings.UseDisorientingRoar)
        {
            Disorienting_Roar.Launch();
            OnCD = new Timer(1000*3);
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent <= MySettings.UseWarStompAtPercentage && War_Stomp.IsSpellUsable && War_Stomp.KnownSpell
                && MySettings.UseWarStomp)
            {
                War_Stomp.Launch();
                OnCD = new Timer(1000*2);
                return;
            }
        }
    }

    private void Decast()
    {
        if (ObjectManager.Target.IsCast && MySettings.UseSkullBash
            && ObjectManager.Target.IsTargetingMe
            && Skull_Bash.KnownSpell && Skull_Bash.IsSpellUsable && Skull_Bash.IsDistanceGood)
        {
            Skull_Bash.Launch();
            return;
        }
        else
        {
            if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell && ObjectManager.Target.GetDistance < 8
                && ObjectManager.Me.HealthPercent <= MySettings.UseArcaneTorrentForDecastAtPercentage
                && MySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
            {
                Arcane_Torrent.Launch();
                return;
            }
        }
    }

    private void DPS_Burst()
    {
        if (MySettings.UseTrinket && Trinket_Timer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Trinket_Timer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBerserking)
            Berserking.Launch();
        else if (Blood_Fury.IsSpellUsable && Blood_Fury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBloodFury)
            Blood_Fury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (Engineering_Timer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                && MySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            Engineering_Timer = new Timer(1000*60);
        }
        else if (Enrage.IsSpellUsable && Enrage.KnownSpell && Enrage.IsDistanceGood
                 && MySettings.UseEnrage && ObjectManager.Me.RagePercentage < 70)
        {
            Enrage.Launch();
            return;
        }
        else if (Force_of_Nature.IsSpellUsable && Force_of_Nature.KnownSpell && Force_of_Nature.IsDistanceGood
                 && MySettings.UseForceofNature)
        {
            Force_of_Nature.Launch();
            return;
        }
        else if (Incarnation.IsSpellUsable && Incarnation.KnownSpell && MySettings.UseIncarnation
                 && ObjectManager.Target.GetDistance < 30)
        {
            Incarnation.Launch();
            return;
        }
        else if (Heart_of_the_Wild.IsSpellUsable && Heart_of_the_Wild.KnownSpell && MySettings.UseHeartoftheWild
                 && ObjectManager.Target.GetDistance < 30)
        {
            Heart_of_the_Wild.Launch();
            return;
        }
        else if (Natures_Vigil.IsSpellUsable && Natures_Vigil.KnownSpell && MySettings.UseNaturesVigil
                 && ObjectManager.Target.GetDistance < 30)
        {
            Natures_Vigil.Launch();
            return;
        }
        else
        {
            if (Berserk.KnownSpell && Berserk.IsSpellUsable && MySettings.UseBerserk
                && ObjectManager.Target.GetDistance < 30)
            {
                Berserk.Launch();
                return;
            }
        }
    }

    private void DPS_Cycle()
    {
        if (!ObjectManager.Me.HaveBuff(5487) && MySettings.UseBearForm)
        {
            Bear_Form.Launch();
            return;
        }

        if (Faerie_Fire.KnownSpell && Faerie_Fire.IsSpellUsable && Faerie_Fire.IsDistanceGood
            && MySettings.UseFaerieFire && (!Faerie_Fire.TargetHaveBuff || !ObjectManager.Target.HaveBuff(113746)))
        {
            Faerie_Fire.Launch();
            return;
        }
        else if (Growl.KnownSpell && Growl.IsSpellUsable && Growl.IsDistanceGood
                 && MySettings.UseGrowl && !ObjectManager.Target.InCombat)
        {
            Growl.Launch();
            return;
        }
        else if (Mangle.KnownSpell && Mangle.IsSpellUsable && Mangle.IsDistanceGood
                 && MySettings.UseMangle)
        {
            Mangle.Launch();
            return;
        }
        else if (Thrash.IsSpellUsable && Thrash.KnownSpell
                 && Thrash.IsDistanceGood && !Thrash.TargetHaveBuff && MySettings.UseThrash)
        {
            Thrash.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 1 && Swipe.IsSpellUsable && Swipe.KnownSpell
                 && Swipe.IsDistanceGood && MySettings.UseSwipe)
        {
            Swipe.Launch();
            return;
        }
        else if (Lacerate.KnownSpell && Lacerate.IsSpellUsable && Lacerate.IsDistanceGood
                 && MySettings.UseLacerate)
        {
            Lacerate.Launch();
            return;
        }
        else if (Maul.KnownSpell && Maul.IsSpellUsable && Maul.IsDistanceGood
                && MySettings.UseMaul && ObjectManager.Me.RagePercentage > 90
                && ObjectManager.Me.HealthPercent > 90)
        {
            Maul.Launch();
            return;
        }
        else
        {
            if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell
                && MySettings.UseArcaneTorrentForResource)
            {
                Arcane_Torrent.Launch();
                return;
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: DruidGuardianSettings

    [Serializable]
    public class DruidGuardianSettings : Settings
    {
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public int UseStoneformAtPercentage = 80;
        public int UseWarStompAtPercentage = 80;
        public bool UseAlchFlask = true;
        public bool UseArcaneTorrentForDecast = true;
        public bool UseArcaneTorrentForResource = true;
        public bool UseBarkskin = true;
        public bool UseBearForm = true;
        public bool UseBearHug = true;
        public bool UseBerserk = true;
        public bool UseBerserking = true;
        public bool UseBloodFury = true;
        public bool UseCenarionWard = true;
        public bool UseDash = true;
        public bool UseDisorientingRoar = true;
        public bool UseEngGlove = true;
        public bool UseEnrage = true;
        public bool UseFaerieFire = true;
        public bool UseForceofNature = true;
        public bool UseFrenziedRegeneration = true;
        public bool UseGiftoftheNaaru = true;
        public bool UseGrowl = true;
        public bool UseHealingTouch = true;
        public bool UseHeartoftheWild = true;
        public bool UseIncarnation = true;
        public bool UseInnervate = true;
        public bool UseLacerate = true;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMangle = true;
        public bool UseMarkoftheWild = true;
        public bool UseMassEntanglement = true;
        public bool UseMaul = true;
        public bool UseMightofUrsoc = true;
        public bool UseMightyBash = true;
        public bool UseNaturesGrasp = true;
        public bool UseNaturesSwiftness = true;
        public bool UseNaturesVigil = true;
        public bool UseRejuvenation = true;
        public bool UseRenewal = true;
        public bool UseSavageDefense = true;
        public bool UseSkullBash = true;
        public bool UseStampedingRoar = true;
        public bool UseStoneform = true;
        public bool UseSurvivalInstincts = true;
        public bool UseSwipe = true;
        public bool UseThrash = true;
        public bool UseTranquility = true;
        public bool UseTrinket = true;
        public bool UseTyphoon = true;
        public bool UseUrsolsVortex = true;
        public bool UseWarStomp = true;
        public bool UseWildCharge = true;

        public DruidGuardianSettings()
        {
            ConfigWinForm(new Point(500, 400), "Druid Guardian Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrent", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Druid Buffs */
            AddControlInWinForm("Use Bear Form", "UseBearForm", "Druid Buffs");
            AddControlInWinForm("Use Dash", "UseDash", "Druid Buffs");
            AddControlInWinForm("Use Faerie Fire", "UseFaerieFire", "Druid Buffs");
            AddControlInWinForm("Use Mark of the Wild", "UseMarkoftheWild", "Druid Buffs");
            AddControlInWinForm("Use Stampeding Roar", "UseStampedingRoar", "Druid Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Growl", "UseGrowl", "Offensive Spell");
            AddControlInWinForm("Use Lacerate", "UseLacerate", "Offensive Spell");
            AddControlInWinForm("Use Mangle", "UseMangle", "Offensive Spell");
            AddControlInWinForm("Use Maul", "UseMaul", "Offensive Spell");
            AddControlInWinForm("Use Swipe", "UseSwipe", "Offensive Spell");
            AddControlInWinForm("Use Thrash", "UseThrash", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Berserk", "UseBerserk", "Offensive Cooldown");
            AddControlInWinForm("Use Enrage", "UseEnrage", "Offensive Cooldown");
            AddControlInWinForm("Use Force of Nature", "UseForceofNature", "Offensive Cooldown");
            AddControlInWinForm("Use Heart of the Wild", "UseHeartoftheWild", "Offensive Cooldown");
            AddControlInWinForm("Use Incarnation", "UseIncarnation", "Offensive Cooldown");
            AddControlInWinForm("Use Nature's Vigil", "UseNaturesVigil", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Bear Hug", "UseBearHug", "Defensive Cooldown");
            AddControlInWinForm("Use Barkskin", "UseBarkskin", "Defensive Cooldown");
            AddControlInWinForm("Use Disorienting Roar", "UseDisorientingRoar", "Defensive Cooldown");
            AddControlInWinForm("Use Mass Entanglement", "UseMassEntanglement", "Defensive Cooldown");
            AddControlInWinForm("Use Mighty Bash", "UseMightyBash", "Defensive Cooldown");
            AddControlInWinForm("Use Nature's Grasp", "UseNaturesGrasp", "Defensive Cooldown");
            AddControlInWinForm("Use Savage Defense", "UseSavageDefense", "Defensive Cooldown");
            AddControlInWinForm("Use Skull Bash", "UseSkullBash", "Defensive Cooldown");
            AddControlInWinForm("Use Survival Instincts", "UseSurvivalInstincts", "Defensive Cooldown");
            AddControlInWinForm("Use Typhoon", "UseTyphoon", "Defensive Cooldown");
            AddControlInWinForm("Use Ursol's Vortex", "UseUrsolsVortex", "Defensive Cooldown");
            AddControlInWinForm("Use Wild Charge", "UseWildCharge", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Cenarion Ward", "UseCenarionWard", "Healing Spell");
            AddControlInWinForm("Use Frenzied Regeneration", "UseFrenziedRegeneration", "Healing Spell");
            AddControlInWinForm("Use Healing Touch", "UseHealingTouch", "Healing Spell");
            AddControlInWinForm("Use Innervate", "UseInnervate", "Healing Spell");
            AddControlInWinForm("Use Might of Ursoc", "UseMightofUrsoc", "Healing Spell");
            AddControlInWinForm("Use Nature's Swiftness", "UseNaturesSwiftness", "Healing Spell");
            AddControlInWinForm("Use Rejuvenation", "UseRejuvenation", "Healing Spell");
            AddControlInWinForm("Use Renewal", "UseRenewal", "Healing Spell");
            AddControlInWinForm("Use Tranquility", "UseTranquility", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Using Glyph of Shred?", "UseGlyphofShred", "Game Settings");
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket", "UseTrinket", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
        }

        public static DruidGuardianSettings CurrentSetting { get; set; }

        public static DruidGuardianSettings GetSettings()
        {
            string CurrentSettingsFile = Application.StartupPath + "\\CustomClasses\\Settings\\Druid_Guardian.xml";
            if (File.Exists(CurrentSettingsFile))
            {
                return
                    CurrentSetting = Load<DruidGuardianSettings>(CurrentSettingsFile);
            }
            else
            {
                return new DruidGuardianSettings();
            }
        }
    }

    #endregion
}

#endregion

#region Paladin

public class Paladin_Holy
{
    private readonly PaladinHolySettings MySettings = PaladinHolySettings.GetSettings();
    private readonly string MoveBackward = nManager.Wow.Helpers.Keybindings.GetKeyByAction(nManager.Wow.Enums.Keybindings.MOVEBACKWARD);

    #region Professions & Racial

    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell Gift_of_the_Naaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell War_Stomp = new Spell("War Stomp");

    #endregion

    #region Paladin Seals & Buffs

    private readonly Spell BlessingOfKings = new Spell("Blessing of Kings");
    private readonly Spell BlessingOfMight = new Spell("Blessing of Might");
    private readonly Spell SealOfInsight = new Spell("Seal of Insight");
    private readonly Spell SealOfTheRighteousness = new Spell("Seal of Righteousness");
    private readonly Spell SealOfTruth = new Spell("Seal of Truth");

    #endregion

    #region Offensive Spell

    private readonly Spell Denounce = new Spell("Denounce");
    private readonly Spell HammerOfJustice = new Spell("Hammer of Justice");
    private readonly Spell HammerOfWrath = new Spell("Hammer of Wrath");
    private readonly Spell HolyShock = new Spell("Holy Shock");

    #endregion

    #region Offensive Cooldown

    private readonly Spell AvengingWrath = new Spell("Avenging Wrath");
    private readonly Spell DivineFavor = new Spell("Divine Favor");
    private readonly Spell HolyAvenger = new Spell("HolyAvenger");

    #endregion

    #region Defensive Cooldown

    private readonly Spell DevotionAura = new Spell("Devotion Aura");
    private readonly Spell DivineProtection = new Spell("Divine Protection");
    private readonly Spell DivineShield = new Spell("Divine Shield");
    private readonly Spell HandOfProtection = new Spell("Hand of Protection");
    private readonly Spell HandOfPurity = new Spell("Hand of Purity");
    private readonly Spell SacredShield = new Spell("Sacred Shield");

    #endregion

    #region Healing Spell

    private readonly Spell BeaconOfLight = new Spell("Beacon of Light");
    private readonly Spell DivineLight = new Spell("Divine Light");
    private readonly Spell DivinePlea = new Spell("Divine Plea");
    private readonly Spell FlashOfLight = new Spell("Flash of Light");
    private readonly Spell GlyphOfHarshWords = new Spell("Glyph of Harsh Words");
    private readonly Spell HolyLight = new Spell("Holy Light");
    private readonly Spell HolyRadiance = new Spell("Holy Radiance");
    private readonly Spell LayOnHands = new Spell("Lay on Hands");
    private readonly Spell WordOfGlory = new Spell("Word of Glory");

    #endregion

    public Paladin_Holy()
    {
        Main.range = 30f;

        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget && HolyShock.IsDistanceGood)
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }
                            Combat();
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void Pull()
    {
        if (HolyShock.KnownSpell && HolyShock.IsDistanceGood && HolyShock.IsSpellUsable && MySettings.UseHolyShock)
        {
            HolyShock.Launch();
            return;
        }
    }

    private void Combat()
    {
        AvoidMelee();

        DPS_Cycle();

        DPS_Burst();

        DPS_Cycle();

        Heal();

        DPS_Cycle();

        Buffs();
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Blessing();
            Heal();
        }

        Seal();
    }

    private void Buffs()
    {
        if (!ObjectManager.Me.IsMounted)
            Blessing();
        Seal();
    }

    private void Seal()
    {
        if (SealOfInsight.KnownSpell && MySettings.UseSealOfInsight)
        {
            if (!SealOfInsight.HaveBuff && SealOfInsight.IsSpellUsable)
                SealOfInsight.Launch();
        }
        else if (SealOfTruth.KnownSpell && MySettings.UseSealOfTruth)
        {
            if (!SealOfTruth.HaveBuff && SealOfTruth.IsSpellUsable)
                SealOfTruth.Launch();
        }
        else if (SealOfTheRighteousness.KnownSpell && MySettings.UseSealOfTheRighteousness)
        {
            if (!SealOfTheRighteousness.HaveBuff && SealOfTheRighteousness.IsSpellUsable)
                SealOfTheRighteousness.Launch();
        }
    }

    private void Blessing()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (BlessingOfKings.KnownSpell && MySettings.UseBlessingOfKings)
        {
            if (!BlessingOfKings.HaveBuff && BlessingOfKings.IsSpellUsable)
                BlessingOfKings.Launch();
        }
        else if (BlessingOfMight.KnownSpell && MySettings.UseBlessingOfMight)
        {
            if (!BlessingOfMight.HaveBuff && BlessingOfMight.IsSpellUsable)
                BlessingOfMight.Launch();
        }
        if (BeaconOfLight.KnownSpell && MySettings.UseBeaconOfLight)
        {
            if (!BeaconOfLight.HaveBuff && BeaconOfLight.IsSpellUsable)
                BeaconOfLight.Launch();
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.HealthPercent < 95 && !Fight.InFight && ObjectManager.GetNumberAttackPlayer() == 0)
        {
            if (DivineLight.KnownSpell && DivineLight.IsSpellUsable && MySettings.UseDivineLight)
            {
                DivineLight.Launch(true, true, true);
                return;
            }
            if (FlashOfLight.KnownSpell && FlashOfLight.IsSpellUsable && MySettings.UseFlashOfLight)
            {
                FlashOfLight.Launch(true, true, true);
                return;
            }
            if (HolyLight.KnownSpell && HolyLight.IsSpellUsable && MySettings.UseHolyLight)
            {
                HolyLight.Launch(true, true, true);
                return;
            }
        }
        if (!ObjectManager.Me.HaveBuff(25771))
        {
            if (DivineShield.KnownSpell && ObjectManager.Me.HealthPercent > 0 && ObjectManager.Me.HealthPercent <= 20 &&
                DivineShield.IsSpellUsable && MySettings.UseDivineShield)
            {
                DivineShield.Launch();
                return;
            }
            if (LayOnHands.KnownSpell && ObjectManager.Me.HealthPercent > 0 && ObjectManager.Me.HealthPercent <= 20 &&
                LayOnHands.IsSpellUsable && MySettings.UseLayOnHands)
            {
                LayOnHands.Launch();
                return;
            }
            if (HandOfProtection.KnownSpell && ObjectManager.Me.HealthPercent > 0 &&
                ObjectManager.Me.HealthPercent <= 20 &&
                HandOfProtection.IsSpellUsable && MySettings.UseHandOfProtection)
            {
                HandOfProtection.Launch();
                return;
            }
        }
        if (ObjectManager.Me.ManaPercentage < 30)
        {
            if (ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable && MySettings.UseArcaneTorrentForResource)
                ArcaneTorrent.Launch();
            if (DivinePlea.KnownSpell && DivinePlea.IsSpellUsable && MySettings.UseHandOfProtection)
            {
                DivinePlea.Launch();
                return;
            }
        }
        if (ObjectManager.Me.HealthPercent > 0 && ObjectManager.Me.HealthPercent < 50)
        {
            if (WordOfGlory.KnownSpell && WordOfGlory.IsSpellUsable &&
                (!GlyphOfHarshWords.KnownSpell /* || cast on me */) && MySettings.UseWordOfGlory)
                WordOfGlory.Launch();
            if (DivineLight.KnownSpell && DivineLight.IsSpellUsable && MySettings.UseDivineLight)
            {
                DivineLight.Launch();
                return;
            }
            if (FlashOfLight.KnownSpell && FlashOfLight.IsSpellUsable && MySettings.UseFlashOfLight)
            {
                FlashOfLight.Launch();
                return;
            }
            if (HolyLight.KnownSpell && HolyLight.IsSpellUsable && MySettings.UseHolyLight)
            {
                HolyLight.Launch();
                return;
            }
        }
        if (ObjectManager.Me.HealthPercent >= 0 && ObjectManager.Me.HealthPercent < 30)
        {
            if (WordOfGlory.KnownSpell && WordOfGlory.IsSpellUsable &&
                (!GlyphOfHarshWords.KnownSpell /* || cast on me */) && MySettings.UseWordOfGlory)
                WordOfGlory.Launch();
            if (DivineProtection.KnownSpell && DivineProtection.IsSpellUsable && MySettings.UseDivineProtection)
                DivineProtection.Launch();
            if (FlashOfLight.KnownSpell && FlashOfLight.IsSpellUsable && MySettings.UseFlashOfLight)
            {
                FlashOfLight.Launch();
                return;
            }
            if (HolyLight.KnownSpell && HolyLight.IsSpellUsable && MySettings.UseHolyLight)
            {
                HolyLight.Launch();
                return;
            }
            if (DivineLight.KnownSpell && DivineLight.IsSpellUsable && MySettings.UseDivineLight)
            {
                DivineLight.Launch();
                return;
            }
        }
    }

    private void DPS_Burst()
    {
        if (DivineFavor.KnownSpell && DivineFavor.IsSpellUsable)
        {
            if (AvengingWrath.KnownSpell && AvengingWrath.IsSpellUsable && MySettings.UseAvengingWrath)
            {
                AvengingWrath.Launch();
            }
            if (Lifeblood.KnownSpell && Lifeblood.IsSpellUsable && MySettings.UseLifeblood)
            {
                Lifeblood.Launch();
            }
            if (HolyAvenger.KnownSpell && HolyAvenger.IsSpellUsable && MySettings.UseHolyAvenger)
            {
                HolyAvenger.Launch();
            }
            if (MySettings.UseDivineFavor)
                DivineFavor.Launch();
            return;
        }
        else if (Lifeblood.KnownSpell && Lifeblood.IsSpellUsable && MySettings.UseLifeblood)
        {
            Lifeblood.Launch();
            return;
        }
    }

    private void DPS_Cycle()
    {
        if (HolyShock.KnownSpell && HolyShock.IsDistanceGood && HolyShock.IsSpellUsable && MySettings.UseHolyShock)
        {
            HolyShock.Launch();
            return;
        }
        if (HammerOfWrath.KnownSpell && HammerOfWrath.IsDistanceGood && HammerOfWrath.IsSpellUsable &&
            MySettings.UseHammerOfWrath)
        {
            HammerOfWrath.Launch();
            return;
        }
        if (HammerOfJustice.KnownSpell && HammerOfJustice.IsDistanceGood && HammerOfJustice.IsSpellUsable &&
            MySettings.UseHammerOfJustice)
        {
            HammerOfJustice.Launch();
            return;
        }
        if (Denounce.KnownSpell && Denounce.IsDistanceGood && Denounce.IsSpellUsable && MySettings.UseDenounce)
        {
            Denounce.Launch();
            return;
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            Keyboard.DownKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
            while (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
                Thread.Sleep(300);
            Keyboard.UpKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
        }
    }

    #region Nested type: PaladinHolySettings

    [Serializable]
    public class PaladinHolySettings : Settings
    {
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public int UseStoneformAtPercentage = 80;
        public int UseWarStompAtPercentage = 80;
        public bool UseArcaneTorrentForDecast = true;
        public bool UseArcaneTorrentForResource = true;
        public bool UseAvengingWrath = true;
        public bool UseBeaconOfLight = true;
        public bool UseBerserking = true;
        public bool UseBlessingOfKings = true;
        public bool UseBlessingOfMight = true;
        public bool UseDenounce = true;
        public bool UseDevotionAura = true;
        public bool UseDivineFavor = true;
        public bool UseDivineLight = true;
        public bool UseDivinePlea = true;
        public bool UseDivineProtection = true;
        public bool UseDivineShield = true;
        public bool UseFlashOfLight = true;
        public bool UseGiftoftheNaaru = true;
        public bool UseHammerOfJustice = true;
        public bool UseHammerOfWrath = true;
        public bool UseHandOfProtection = true;
        public bool UseHandOfPurity = true;
        public bool UseHolyAvenger = true;
        public bool UseHolyLight = true;
        public bool UseHolyRadiance = true;
        public bool UseHolyShock = true;
        public bool UseLayOnHands = true;
        public bool UseLifeblood = true;
        public bool UseSacredShield = true;
        public bool UseSealOfInsight = true;
        public bool UseSealOfTheRighteousness = true;
        public bool UseSealOfTruth = true;
        public bool UseStoneform = true;
        public bool UseWarStomp = true;
        public bool UseWordOfGlory = true;

        public PaladinHolySettings()
        {
            ConfigWinForm(new Point(500, 400), "Paladin Protection Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrent", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            /* Paladin Seals & Buffs */
            AddControlInWinForm("Use Seal of the Righteousness", "UseSealOfTheRighteousness", "Paladin Seals & Buffs");
            AddControlInWinForm("Use Seal of Truth", "UseSealOfTruth", "Paladin Seals & Buffs");
            AddControlInWinForm("Use Seal of Insight", "UseSealOfInsight", "Paladin Seals & Buffs");
            AddControlInWinForm("Use Blessing of Might", "UseBlessingOfMight", "Paladin Seals & Buffs");
            AddControlInWinForm("Use Blessing of Kings", "UseBlessingOfKings", "Paladin Seals & Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Holy Shock", "UseHolyShock", "Offensive Spell");
            AddControlInWinForm("Use Denounce", "UseDenounce", "Offensive Spell");
            AddControlInWinForm("Use Hammer of Justice", "UseHammerOfJustice", "Offensive Spell");
            AddControlInWinForm("Use Hammer of Wrath", "UseHammerOfWrath", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Divine Favor", "UseDivineFavor", "Offensive Cooldown");
            AddControlInWinForm("Use Holy Avenger", "UseHolyAvenger", "Offensive Cooldown");
            AddControlInWinForm("Use Avenging Wrath", "UseAvengingWrath", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Sacred Shield", "UseSacredShield", "Defensive Cooldown");
            AddControlInWinForm("Use Hand of Purity", "UseHandOfPurity", "Defensive Cooldown");
            AddControlInWinForm("Use Devotion Aura", "UseDevotionAura", "Defensive Cooldown");
            AddControlInWinForm("Use Divine Protection", "UseDivineProtection", "Defensive Cooldown");
            AddControlInWinForm("Use Divine Shield", "UseDivineShield", "Defensive Cooldown");
            AddControlInWinForm("Use Hand of Protection", "UseHandOfProtection", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Divine Plea", "UseDivinePlea", "Healing Spell");
            AddControlInWinForm("Use Divine Light", "UseDivineLight", "Healing Spell");
            AddControlInWinForm("Use Holy Radiance", "UseHolyRadiance", "Healing Spell");
            AddControlInWinForm("Use Flash of Light", "UseFlashOfLight", "Healing Spell");
            AddControlInWinForm("Use Holy Light", "UseHolyLight", "Healing Spell");
            AddControlInWinForm("Use Lay on Hands", "UseLayOnHands", "Healing Spell");
            AddControlInWinForm("Use Word of Glory", "UseWordOfGlory", "Healing Spell");
            AddControlInWinForm("Use Beacon of Light", "UseBeaconOfLight", "Healing Spell");
        }

        public static PaladinHolySettings CurrentSetting { get; set; }

        public static PaladinHolySettings GetSettings()
        {
            string CurrentSettingsFile = Application.StartupPath + "\\CustomClasses\\Settings\\Paladin_Holy.xml";
            if (File.Exists(CurrentSettingsFile))
            {
                return CurrentSetting = Load<PaladinHolySettings>(CurrentSettingsFile);
            }
            return new PaladinHolySettings();
        }
    }

    #endregion
}

public class Paladin_Protection
{
    private readonly PaladinProtectionSettings MySettings = PaladinProtectionSettings.GetSettings();
    private readonly string MoveBackward = nManager.Wow.Helpers.Keybindings.GetKeyByAction(nManager.Wow.Enums.Keybindings.MOVEBACKWARD);

    #region Professions & Racial

    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell Gift_of_the_Naaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell War_Stomp = new Spell("War Stomp");

    #endregion

    #region Paladin Seals & Buffs

    private readonly Spell BlessingOfKings = new Spell("Blessing of Kings");
    private readonly Spell BlessingOfMight = new Spell("Blessing of Might");
    private readonly Spell SealOfInsight = new Spell("Seal of Insight");
    private readonly Spell SealOfTheRighteousness = new Spell("Seal of Righteousness");
    private readonly Spell SealOfTruth = new Spell("Seal of Truth");

    #endregion

    #region Offensive Spell

    private readonly Spell AvengersShield = new Spell("Avenger's Shield");
    private readonly Spell Consecration = new Spell("Consecration");
    private readonly Spell CrusaderStrike = new Spell("Crusader Strike");
    private readonly Spell HammerOfJustice = new Spell("Hammer of Justice");
    private readonly Spell HammerOfTheRighteous = new Spell("Hammer of the Righteous"); // 115798 = Weakened Blows
    private readonly Spell HammerOfWrath = new Spell("Hammer of Wrath");
    private readonly Spell HolyWrath = new Spell("Holy Wrath");
    private readonly Spell Judgment = new Spell("Judgment");
    private readonly Spell ShieldOfTheRighteous = new Spell("Shield of the Righteous");

    #endregion

    #region Offensive Cooldown

    private readonly Spell AvengingWrath = new Spell("Avenging Wrath");
    private readonly Spell HolyAvenger = new Spell("Holy Avenger");

    #endregion

    #region Defensive Cooldown

    private readonly Spell ArdentDefender = new Spell("Ardent Defender");
    private readonly Spell DevotionAura = new Spell("Devotion Aura");
    private readonly Spell DivineProtection = new Spell("Divine Protection");
    private readonly Spell DivineShield = new Spell("Divine Shield");
    private readonly Spell GuardianOfAncientKings = new Spell("Guardian of Ancient Kings");
    private readonly Spell HandOfProtection = new Spell("Hand of Protection");
    private readonly Spell HandOfPurity = new Spell("Hand Of Purity");
    private readonly Spell SacredShield = new Spell("Sacred Shield");
    private Timer OnCD = new Timer(0);

    #endregion

    #region Healing Spell

    private readonly Spell FlashOfLight = new Spell("Flash of Light");
    private readonly Spell LayOnHands = new Spell("Lay on Hands");
    private readonly Spell WordOfGlory = new Spell("Word of Glory");

    #endregion

    public Paladin_Protection()
    {
        Main.range = 5.0f;

        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget && Judgment.IsDistanceGood)
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }
                            Combat();
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void Pull()
    {
        if (AvengersShield.KnownSpell && MySettings.UseAvengersShield && AvengersShield.IsDistanceGood &&
            AvengersShield.IsSpellUsable)
        {
            AvengersShield.Launch();
        }
        if (Judgment.KnownSpell && MySettings.UseJudgment && Judgment.IsDistanceGood && Judgment.IsSpellUsable)
        {
            Judgment.Launch();
            Thread.Sleep(1000);
        }
        DPS_Burst();
    }

    private void Combat()
    {
        AvoidMelee();

        if (OnCD.IsReady)
            Defense_Cycle();

        DPS_Cycle();

        DPS_Burst();

        DPS_Cycle();

        Heal();

        DPS_Cycle();

        Buffs();
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Blessing();
            Heal();
        }
        Seal();
    }

    private void Buffs()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Blessing();
        }
        Seal();
    }

    private void Seal()
    {
        if (ObjectManager.Me.IsMounted)
            return;
        else if (SealOfTruth.KnownSpell && MySettings.UseSealOfTruth &&
                 (ObjectManager.GetNumberAttackPlayer() <= 7 || !MySettings.UseSealOfTheRighteousness))
        {
            if (!SealOfTruth.HaveBuff && SealOfTruth.IsSpellUsable)
                SealOfTruth.Launch();
        }
        else if (SealOfTheRighteousness.KnownSpell && MySettings.UseSealOfTheRighteousness)
        {
            if (!SealOfTheRighteousness.HaveBuff && SealOfTheRighteousness.IsSpellUsable)
                SealOfTheRighteousness.Launch();
        }
        else if (SealOfInsight.KnownSpell && MySettings.UseSealOfInsight)
        {
            if (!SealOfInsight.HaveBuff && SealOfInsight.IsSpellUsable)
                SealOfInsight.Launch();
        }
    }

    private void Blessing()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (BlessingOfMight.KnownSpell && MySettings.UseBlessingOfMight)
        {
            if (!BlessingOfMight.HaveBuff && BlessingOfMight.IsSpellUsable)
                BlessingOfMight.Launch();
        }
        else if (BlessingOfKings.KnownSpell && MySettings.UseBlessingOfKings)
        {
            if (!BlessingOfKings.HaveBuff && BlessingOfKings.IsSpellUsable)
                BlessingOfKings.Launch();
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.HealthPercent < 95 && !Fight.InFight && ObjectManager.GetNumberAttackPlayer() == 0)
        {
            if (FlashOfLight.KnownSpell && FlashOfLight.IsSpellUsable && MySettings.UseFlashOfLight)
            {
                FlashOfLight.Launch(true, true, true);
                return;
            }
        }
        if (DivineShield.KnownSpell && MySettings.UseDivineShield && ObjectManager.Me.HealthPercent > 0 &&
            ObjectManager.Me.HealthPercent <= 20 && !ObjectManager.Me.HaveBuff(25771) && DivineShield.IsSpellUsable)
        {
            DivineShield.Launch();
            return;
        }
        if (LayOnHands.KnownSpell && MySettings.UseLayOnHands && ObjectManager.Me.HealthPercent > 0 &&
            ObjectManager.Me.HealthPercent <= 20 && !ObjectManager.Me.HaveBuff(25771) && LayOnHands.IsSpellUsable)
        {
            LayOnHands.Launch();
            return;
        }
        if (HandOfProtection.KnownSpell && MySettings.UseHandOfProtection && ObjectManager.Me.HealthPercent > 0 &&
            ObjectManager.Me.HealthPercent <= 20 && !ObjectManager.Me.HaveBuff(25771) && HandOfProtection.IsSpellUsable)
        {
            HandOfProtection.Launch();
            return;
        }
        if (ObjectManager.Me.ManaPercentage < 10)
        {
            if (ArcaneTorrent.KnownSpell && MySettings.UseArcaneTorrentForResource && ArcaneTorrent.IsSpellUsable)
            {
                ArcaneTorrent.Launch();
                return;
            }
        }
        if (ObjectManager.Me.HealthPercent > 0 && ObjectManager.Me.HealthPercent < 50)
        {
            if (WordOfGlory.KnownSpell && MySettings.UseWordOfGlory && WordOfGlory.IsSpellUsable)
                WordOfGlory.Launch();
            if (FlashOfLight.KnownSpell && MySettings.UseFlashOfLight && FlashOfLight.IsSpellUsable)
            {
                FlashOfLight.Launch();
                return;
            }
        }
        if (ObjectManager.Me.HealthPercent >= 0 && ObjectManager.Me.HealthPercent < 30)
        {
            if (WordOfGlory.KnownSpell && MySettings.UseWordOfGlory && WordOfGlory.IsSpellUsable)
                WordOfGlory.Launch();
            if (DivineProtection.KnownSpell && MySettings.UseDivineProtection && DivineProtection.IsSpellUsable)
                DivineProtection.Launch();
            if (FlashOfLight.KnownSpell && MySettings.UseFlashOfLight && FlashOfLight.IsSpellUsable)
            {
                FlashOfLight.Launch();
                return;
            }
        }
    }

    private void DPS_Burst()
    {
        if (HolyAvenger.KnownSpell && MySettings.UseHolyAvenger && HolyAvenger.IsSpellUsable)
        {
            HolyAvenger.Launch();
            if (AvengingWrath.KnownSpell && MySettings.UseAvengingWrath && AvengingWrath.IsSpellUsable)
            {
                AvengingWrath.Launch();
                return;
            }
        }
        else if (AvengingWrath.KnownSpell && MySettings.UseAvengingWrath && AvengingWrath.IsSpellUsable)
        {
            AvengingWrath.Launch();
            return;
        }
    }

    private void Defense_Cycle()
    {
        if (HandOfPurity.KnownSpell && MySettings.UseHandOfPurity && HandOfPurity.IsSpellUsable &&
            !HandOfPurity.HaveBuff)
        {
            HandOfPurity.Launch();
            OnCD = new Timer(1000*6);
        }
        else if (HammerOfJustice.KnownSpell && MySettings.UseHammerOfJustice && HammerOfJustice.IsSpellUsable)
        {
            HammerOfJustice.Launch();
            OnCD = new Timer(1000*6);
            return;
        }
        else if (DivineProtection.KnownSpell && MySettings.UseDivineProtection && DivineProtection.IsSpellUsable)
        {
            DivineProtection.Launch();
            OnCD = new Timer(1000*10);
            return;
        }
        else if (DevotionAura.KnownSpell && MySettings.UseDevotionAura && DevotionAura.IsSpellUsable)
        {
            DevotionAura.Launch();
            OnCD = new Timer(1000*6);
            return;
        }
        else if (GuardianOfAncientKings.KnownSpell && MySettings.UseGuardianOfAncientKings &&
                 GuardianOfAncientKings.IsSpellUsable)
        {
            GuardianOfAncientKings.Launch();
            OnCD = new Timer(1000*12);
            return;
        }
        else if (ArdentDefender.KnownSpell && MySettings.UseArdentDefender &&
                 ArdentDefender.IsSpellUsable)
        {
            ArdentDefender.Launch();
            OnCD = new Timer(1000*10);
            return;
        }
        else if (WordOfGlory.KnownSpell && MySettings.UseWordOfGlory && WordOfGlory.IsSpellUsable)
        {
            WordOfGlory.Launch();
            OnCD = new Timer(1000*5);
            return;
        }
    }

    private void DPS_Cycle()
    {
        if (ShieldOfTheRighteous.KnownSpell && MySettings.UseShieldOfTheRighteous && ShieldOfTheRighteous.IsSpellUsable &&
            ShieldOfTheRighteous.IsDistanceGood && (ObjectManager.Me.HaveBuff(90174) || ObjectManager.Me.HolyPower >= 3))
        {
            ShieldOfTheRighteous.Launch();
            return;
        }
        if ((ObjectManager.GetNumberAttackPlayer() >= 2 || !ObjectManager.Target.HaveBuff(115798)) &&
            !ObjectManager.Me.HaveBuff(90174) && ObjectManager.Me.HolyPower < 3)
        {
            if (HammerOfTheRighteous.KnownSpell && MySettings.UseHammerOfTheRighteous &&
                HammerOfTheRighteous.IsDistanceGood && HammerOfTheRighteous.IsSpellUsable)
            {
                HammerOfTheRighteous.Launch();
                return;
            }
        }
        else
        {
            if (CrusaderStrike.KnownSpell && MySettings.UseCrusaderStrike && CrusaderStrike.IsDistanceGood &&
                CrusaderStrike.IsSpellUsable && !ObjectManager.Me.HaveBuff(90174) && ObjectManager.Me.HolyPower < 3)
            {
                CrusaderStrike.Launch();
                return;
            }
        }
        if (AvengersShield.KnownSpell && MySettings.UseAvengersShield && AvengersShield.IsDistanceGood &&
            AvengersShield.IsSpellUsable && !ObjectManager.Me.HaveBuff(90174) && ObjectManager.Me.HolyPower < 3)
        {
            AvengersShield.Launch();
            return;
        }
        if (HammerOfWrath.KnownSpell && MySettings.UseHammerOfWrath && HammerOfWrath.IsDistanceGood &&
            HammerOfWrath.IsSpellUsable && !ObjectManager.Me.HaveBuff(90174) && ObjectManager.Me.HolyPower < 3)
        {
            HammerOfWrath.Launch();
            return;
        }
        if (Judgment.KnownSpell && MySettings.UseJudgment && Judgment.IsDistanceGood && Judgment.IsSpellUsable &&
            !ObjectManager.Me.HaveBuff(90174) && ObjectManager.Me.HolyPower < 3)
        {
            Judgment.Launch();
            return;
        }
        if (Consecration.KnownSpell && MySettings.UseConsecration && Consecration.IsSpellUsable &&
            !ObjectManager.Me.HaveBuff(90174) && ObjectManager.Me.HolyPower < 3)
        {
            // Consecration.Launch(); // TODO: Check if Glyph of Consecration is used.
            SpellManager.CastSpellByIDAndPosition(26573, ObjectManager.Target.Position);
            return;
        }
        if (HolyWrath.KnownSpell && MySettings.UseHolyWrath && HolyWrath.IsSpellUsable &&
            !ObjectManager.Me.HaveBuff(90174) && ObjectManager.Me.HolyPower < 3 && !Judgment.IsSpellUsable &&
            !CrusaderStrike.IsSpellUsable && !Consecration.IsSpellUsable)
        {
            HolyWrath.Launch();
            return;
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            Keyboard.DownKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
            while (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
                Thread.Sleep(300);
            Keyboard.UpKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
        }
    }

    #region Nested type: PaladinProtectionSettings

    [Serializable]
    public class PaladinProtectionSettings : Settings
    {
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public int UseStoneformAtPercentage = 80;
        public int UseWarStompAtPercentage = 80;
        public bool UseArcaneTorrentForDecast = true;
        public bool UseArcaneTorrentForResource = true;
        public bool UseArdentDefender = true;
        public bool UseAvengersShield = true;
        public bool UseAvengingWrath = true;
        public bool UseBerserking = true;
        public bool UseBlessingOfKings = true;
        public bool UseBlessingOfMight = true;
        public bool UseConsecration = true;
        public bool UseCrusaderStrike = true;
        public bool UseDevotionAura = true;
        public bool UseDivineProtection = true;
        public bool UseDivineShield = true;
        public bool UseFlashOfLight = true;
        public bool UseGiftoftheNaaru = true;
        public bool UseGuardianOfAncientKings = true;
        public bool UseHammerOfJustice = true;
        public bool UseHammerOfTheRighteous = true;
        public bool UseHammerOfWrath = true;
        public bool UseHandOfProtection = true;
        public bool UseHandOfPurity = true;
        public bool UseHolyAvenger = true;
        public bool UseHolyWrath = true;
        public bool UseJudgment = true;
        public bool UseLayOnHands = true;
        public bool UseLifeblood = true;
        public bool UseSacredShield = true;
        public bool UseSealOfInsight = false;
        public bool UseSealOfTheRighteousness = true;
        public bool UseSealOfTruth = true;
        public bool UseShieldOfTheRighteous = true;
        public bool UseStoneform = true;
        public bool UseWarStomp = true;
        public bool UseWordOfGlory = true;

        public PaladinProtectionSettings()
        {
            ConfigWinForm(new Point(500, 400), "Paladin Protection Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrent", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            /* Paladin Seals & Buffs */
            AddControlInWinForm("Use Seal of the Righteousness", "UseSealOfTheRighteousness", "Paladin Seals & Buffs");
            AddControlInWinForm("Use Seal of Truth", "UseSealOfTruth", "Paladin Seals & Buffs");
            AddControlInWinForm("Use Seal of Insight", "UseSealOfInsight", "Paladin Seals & Buffs");
            AddControlInWinForm("Use Blessing of Might", "UseBlessingOfMight", "Paladin Seals & Buffs");
            AddControlInWinForm("Use Blessing of Kings", "UseBlessingOfKings", "Paladin Seals & Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Shield of the Righteous", "UseShieldOfTheRighteous", "Offensive Spell");
            AddControlInWinForm("Use Consecration", "UseConsecration", "Offensive Spell");
            AddControlInWinForm("Use Avenger's Shield", "UseAvengersShield", "Offensive Spell");
            AddControlInWinForm("Use Hammer of Wrath", "UseHammerOfWrath", "Offensive Spell");
            AddControlInWinForm("Use Crusader Strike", "UseCrusaderStrike", "Offensive Spell");
            AddControlInWinForm("Use Hammer of the Righteous", "UseHammerOfTheRighteous", "Offensive Spell");
            AddControlInWinForm("Use Judgment", "UseJudgment", "Offensive Spell");
            AddControlInWinForm("Use Hammer of Justice", "UseHammerOfJustice", "Offensive Spell");
            AddControlInWinForm("Use Holy Wrath", "UseHolyWrath", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Holy Avenger", "UseHolyAvenger", "Offensive Cooldown");
            AddControlInWinForm("Use Avenging Wrath", "UseAvengingWrath", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Guardian of Ancient Kings", "UseGuardianOfAncientKings", "Defensive Cooldown");
            AddControlInWinForm("Use Ardent Defender", "UseArdentDefender", "Defensive Cooldown");
            AddControlInWinForm("Use Sacred Shield", "UseSacredShield", "Defensive Cooldown");
            AddControlInWinForm("Use Hand of Purity", "UseHandOfPurity", "Defensive Cooldown");
            AddControlInWinForm("Use Devotion Aura", "UseDevotionAura", "Defensive Cooldown");
            AddControlInWinForm("Use Divine Protection", "UseDivineProtection", "Defensive Cooldown");
            AddControlInWinForm("Use Divine Shield", "UseDivineShield", "Defensive Cooldown");
            AddControlInWinForm("Use Hand of Protection", "UseHandOfProtection", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Flash of Light", "UseFlashOfLight", "Healing Spell");
            AddControlInWinForm("Use Lay on Hands", "UseLayOnHands", "Healing Spell");
            AddControlInWinForm("Use Word of Glory", "UseWordOfGlory", "Healing Spell");
        }

        public static PaladinProtectionSettings CurrentSetting { get; set; }

        public static PaladinProtectionSettings GetSettings()
        {
            string CurrentSettingsFile = Application.StartupPath + "\\CustomClasses\\Settings\\Paladin_Protection.xml";
            if (File.Exists(CurrentSettingsFile))
            {
                return CurrentSetting = Load<PaladinProtectionSettings>(CurrentSettingsFile);
            }
            else
            {
                return new PaladinProtectionSettings();
            }
        }
    }

    #endregion
}

public class Paladin_Retribution
{
    private static readonly PaladinRetributionSettings MySettings = PaladinRetributionSettings.GetSettings();
    private readonly string MoveBackward = nManager.Wow.Helpers.Keybindings.GetKeyByAction(nManager.Wow.Enums.Keybindings.MOVEBACKWARD);

    #region Professions & Racials

    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell Gift_of_the_Naaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell War_Stomp = new Spell("War Stomp");

    #endregion

    #region Paladin Seals & Buffs

    private readonly Spell BlessingOfKings = new Spell("Blessing of Kings");
    private readonly Spell BlessingOfMight = new Spell("Blessing of Might");
    private readonly Spell SealOfInsight = new Spell("Seal of Insight");
    private readonly Spell SealOfJustice = new Spell("Seal of Justice");
    private readonly Spell SealOfTheRighteousness = new Spell("Seal of Righteousness");
    private readonly Spell SealOfTruth = new Spell("Seal of Truth");

    #endregion

    #region Offensive Spell

    private readonly Spell BoundlessConviction = new Spell("Boundless Conviction");
    private readonly Spell CrusaderStrike = new Spell("Crusader Strike");
    private readonly Spell DivineStorm = new Spell("Divine Storm");
    private readonly Spell Exorcism = new Spell("Exorcism");
    private readonly Spell HammerOfJustice = new Spell("Hammer of Justice");
    private readonly Spell HammerOfTheRighteous = new Spell("Hammer of the Righteous");
    private readonly Spell HammerOfWrath = new Spell("Hammer of Wrath");
    private readonly Spell Judgment = new Spell("Judgment");
    private readonly Spell TemplarsVerdict = new Spell("Templar's Verdict");

    #endregion

    #region Offensive Cooldown

    private readonly Spell AvengingWrath = new Spell("Avenging Wrath");
    private readonly Spell GuardianOfAncientKings = new Spell("Guardian of Ancient Kings");
    private readonly Spell HolyAvenger = new Spell("Holy Avenger");
    private readonly Spell Inquisition = new Spell("Inquisition");
    private Timer BurstTime = new Timer(0);
    private Timer InquisitionToUseInPriotiy = new Timer(0);

    #endregion

    #region Defensive Cooldown

    private readonly Spell DevotionAura = new Spell("Devotion Aura");
    private readonly Spell DivineProtection = new Spell("Divine Protection");
    private readonly Spell DivineShield = new Spell("Divine Shield");
    private readonly Spell HandOfProtection = new Spell("Hand of Protection");
    private readonly Spell SacredShield = new Spell("Sacred Shield");

    #endregion

    #region Healing Spell

    private readonly Spell FlashOfLight = new Spell("Flash of Light");
    private readonly Spell LayOnHands = new Spell("Lay on Hands");
    private readonly Spell WordOfGlory = new Spell("Word of Glory");

    #endregion

    #region Flask & Potion Management

    private readonly uint CombatPotion = (uint)ItemsManager.GetIdByName(MySettings.CombatPotion);
    private readonly WoWItem FirstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
    private readonly uint FlaskOrBattleElixir = (uint)ItemsManager.GetIdByName(MySettings.FlaskOrBattleElixir);
    private readonly uint GuardianElixir = (uint)ItemsManager.GetIdByName(MySettings.GuardianElixir);

    private readonly WoWItem Hands = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_HAND);
    private readonly WoWItem SecondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);
    private readonly uint TeasureFindingPotion = (uint)ItemsManager.GetIdByName(MySettings.TeasureFindingPotion);
    private readonly uint WellFedBuff = (uint)ItemsManager.GetIdByName(MySettings.WellFedBuff);

    #endregion

    public Paladin_Retribution()
    {
        Main.range = 5.0f;

        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (Judgment.IsDistanceGood || Exorcism.IsDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }
                            Combat();
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void Pull()
    {
        if (Exorcism.KnownSpell && Exorcism.IsDistanceGood && Exorcism.IsSpellUsable && MySettings.UseExorcism)
        {
            Exorcism.Launch();
        }
        else if (Judgment.KnownSpell && Judgment.IsDistanceGood && Judgment.IsSpellUsable && MySettings.UseJudgment)
        {
            Judgment.Launch();
        }
    }

    private void Combat()
    {
        AvoidMelee();

        DPS_Cycle();

        DPS_Burst();

        DPS_Cycle();

        Heal();

        DPS_Cycle();

        Buffs();
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            if (MySettings.UseFlaskOrBattleElixir && MySettings.FlaskOrBattleElixir != string.Empty)
                if (!SpellManager.HaveBuffLua(ItemsManager.GetItemSpellByItemName(MySettings.FlaskOrBattleElixir)) &&
                    !ItemsManager.IsItemOnCooldown(FlaskOrBattleElixir) &&
                    ItemsManager.IsUsableItemById(FlaskOrBattleElixir))
                    ItemsManager.UseItem(MySettings.FlaskOrBattleElixir);
            if (MySettings.UseGuardianElixir && MySettings.GuardianElixir != string.Empty)
                if (!SpellManager.HaveBuffLua(ItemsManager.GetItemSpellByItemName(MySettings.GuardianElixir)) &&
                    !ItemsManager.IsItemOnCooldown(GuardianElixir) && ItemsManager.IsUsableItemById(GuardianElixir))
                    ItemsManager.UseItem(MySettings.GuardianElixir);
            Blessing();
            Heal();
        }
        Seal();
    }

    private void Buffs()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            if (MySettings.UseFlaskOrBattleElixir && MySettings.FlaskOrBattleElixir != string.Empty)
                if (!SpellManager.HaveBuffLua(ItemsManager.GetItemSpellByItemName(MySettings.FlaskOrBattleElixir)) &&
                    !ItemsManager.IsItemOnCooldown(FlaskOrBattleElixir) &&
                    ItemsManager.IsUsableItemById(FlaskOrBattleElixir))
                    ItemsManager.UseItem(MySettings.FlaskOrBattleElixir);
            if (MySettings.UseGuardianElixir && MySettings.GuardianElixir != string.Empty)
                if (!SpellManager.HaveBuffLua(ItemsManager.GetItemSpellByItemName(MySettings.GuardianElixir)) &&
                    !ItemsManager.IsItemOnCooldown(GuardianElixir) && ItemsManager.IsUsableItemById(GuardianElixir))
                    ItemsManager.UseItem(MySettings.GuardianElixir);
            Blessing();
        }
        Seal();
    }

    private void Seal()
    {
        if (SealOfTruth.KnownSpell &&
            (ObjectManager.GetNumberAttackPlayer() <= 7 || !MySettings.UseSealOfTheRighteousness) &&
            MySettings.UseSealOfTruth)
        {
            if (!SealOfTruth.HaveBuff && SealOfTruth.IsSpellUsable)
                SealOfTruth.Launch();
        }
        else if (SealOfTheRighteousness.KnownSpell && MySettings.UseSealOfTheRighteousness)
        {
            if (!SealOfTheRighteousness.HaveBuff && SealOfTheRighteousness.IsSpellUsable)
                SealOfTheRighteousness.Launch();
        }
        else if (SealOfJustice.KnownSpell && MySettings.UseSealOfJustice)
        {
            if (!SealOfJustice.HaveBuff && SealOfJustice.IsSpellUsable)
                SealOfJustice.Launch();
        }
        else if (SealOfInsight.KnownSpell && MySettings.UseSealOfInsight)
        {
            if (!SealOfInsight.HaveBuff && SealOfInsight.IsSpellUsable)
                SealOfInsight.Launch();
        }
    }

    private void Blessing()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (BlessingOfKings.KnownSpell && MySettings.UseBlessingOfKings)
        {
            if (!BlessingOfKings.HaveBuff && BlessingOfKings.IsSpellUsable)
                BlessingOfKings.Launch();
        }
        else if (BlessingOfMight.KnownSpell && MySettings.UseBlessingOfMight)
        {
            if (!BlessingOfMight.HaveBuff && BlessingOfMight.IsSpellUsable)
                BlessingOfMight.Launch();
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.HealthPercent < 95 && !Fight.InFight && ObjectManager.GetNumberAttackPlayer() == 0)
        {
            if (FlashOfLight.KnownSpell && FlashOfLight.IsSpellUsable && MySettings.UseFlashOfLight)
            {
                FlashOfLight.Launch(true, true, true);
                return;
            }
        }
        if (DivineShield.KnownSpell && ObjectManager.Me.HealthPercent > 0 && ObjectManager.Me.HealthPercent <= 5 &&
            DivineShield.IsSpellUsable && MySettings.UseDivineShield)
        {
            DivineShield.Launch();
            return;
        }
        if (LayOnHands.KnownSpell && ObjectManager.Me.HealthPercent > 0 && ObjectManager.Me.HealthPercent <= 20 &&
            !ObjectManager.Me.HaveBuff(25771) && LayOnHands.IsSpellUsable && MySettings.UseLayOnHands)
        {
            LayOnHands.Launch();
            return;
        }
        if (ObjectManager.Me.ManaPercentage < 10)
        {
            if (ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable && MySettings.UseArcaneTorrentForResource)
            {
                ArcaneTorrent.Launch();
                return;
            }
        }
        if (ObjectManager.Me.HealthPercent > 0 && ObjectManager.Me.HealthPercent < 50)
        {
            if (WordOfGlory.KnownSpell && WordOfGlory.IsSpellUsable && MySettings.UseWordOfGlory)
                WordOfGlory.Launch();
            if (DevotionAura.KnownSpell && DevotionAura.IsSpellUsable && MySettings.UseDevotionAura)
                DevotionAura.Launch();
            if (FlashOfLight.KnownSpell && FlashOfLight.IsSpellUsable && MySettings.UseFlashOfLight)
            {
                FlashOfLight.Launch();
                return;
            }
        }
        if (ObjectManager.Me.HealthPercent >= 0 && ObjectManager.Me.HealthPercent < 30)
        {
            if (WordOfGlory.KnownSpell && WordOfGlory.IsSpellUsable && MySettings.UseWordOfGlory)
                WordOfGlory.Launch();
            if (DivineProtection.KnownSpell && DivineProtection.IsSpellUsable && MySettings.UseDivineProtection)
                DivineProtection.Launch();
            else if (HandOfProtection.KnownSpell && HandOfProtection.IsSpellUsable && !ObjectManager.Me.HaveBuff(25771) &&
                     MySettings.UseHandOfProtection)
                HandOfProtection.Launch();
            if (FlashOfLight.KnownSpell && FlashOfLight.IsSpellUsable && MySettings.UseFlashOfLight)
            {
                FlashOfLight.Launch();
            }
        }
    }

    private void DPS_Burst()
    {
        if (!GuardianOfAncientKings.KnownSpell || GuardianOfAncientKings.HaveBuff ||
            !GuardianOfAncientKings.IsSpellUsable)
        {
            if ((!GuardianOfAncientKings.KnownSpell || BurstTime.IsReady) && AvengingWrath.KnownSpell &&
                AvengingWrath.IsSpellUsable && (!HolyAvenger.KnownSpell || HolyAvenger.IsSpellUsable))
            {
                if (MySettings.UseAvengingWrath)
                    AvengingWrath.Launch();
                if ((!Inquisition.HaveBuff || InquisitionToUseInPriotiy.IsReady) && Inquisition.KnownSpell &&
                    MySettings.UseInquisition && Inquisition.IsSpellUsable &&
                    (ObjectManager.Me.HaveBuff(90174) || ObjectManager.Me.HolyPower >= 3))
                {
                    Inquisition.Launch();
                    InquisitionToUseInPriotiy = new Timer(1000*(10*3 - 6));
                }
                if (HolyAvenger.KnownSpell && HolyAvenger.IsSpellUsable && MySettings.UseHolyAvenger)
                    HolyAvenger.Launch();
            }
            else if ((!GuardianOfAncientKings.KnownSpell || BurstTime.IsReady) && HolyAvenger.KnownSpell &&
                     HolyAvenger.IsSpellUsable && MySettings.UseHolyAvenger)
            {
                HolyAvenger.Launch();
                if ((!Inquisition.HaveBuff || InquisitionToUseInPriotiy.IsReady) && Inquisition.KnownSpell &&
                    MySettings.UseInquisition && Inquisition.IsSpellUsable &&
                    (ObjectManager.Me.HaveBuff(90174) || ObjectManager.Me.HolyPower >= 3))
                {
                    Inquisition.Launch();
                    InquisitionToUseInPriotiy = new Timer(1000*(10*3 - 6));
                }
                if (AvengingWrath.KnownSpell && AvengingWrath.IsSpellUsable && MySettings.UseAvengingWrath)
                    AvengingWrath.Launch();
            }
        }
        else if (GuardianOfAncientKings.KnownSpell && GuardianOfAncientKings.IsSpellUsable &&
                 MySettings.UseGuardianOfAncientKings && AvengingWrath.IsSpellUsable &&
                 (!HolyAvenger.KnownSpell || HolyAvenger.IsSpellUsable))
        {
            GuardianOfAncientKings.Launch();
            BurstTime = new Timer(1000*6.5);
        }
    }

    private void DPS_Cycle()
    {
        if (HammerOfJustice.KnownSpell && HammerOfJustice.IsDistanceGood && HammerOfJustice.IsSpellUsable &&
            MySettings.UseHammerOfJustice)
        {
            // TODO : If target can be stun, if not, it will be a pure loss of DPS.
            HammerOfJustice.Launch();
            return;
        }
        if (Inquisition.KnownSpell && (!Inquisition.HaveBuff || InquisitionToUseInPriotiy.IsReady) &&
            Inquisition.IsSpellUsable && MySettings.UseInquisition &&
            (ObjectManager.Me.HaveBuff(90174) || ObjectManager.Me.HolyPower >= 3))
        {
            Inquisition.Launch();
            InquisitionToUseInPriotiy = new Timer(1000*(10*3 - 6));
        }
        else if ((ObjectManager.GetNumberAttackPlayer() <= 1 ||
                  (!MySettings.UseDivineStorm && MySettings.UseTemplarsVerdict)) && TemplarsVerdict.KnownSpell &&
                 (!Inquisition.KnownSpell || Inquisition.HaveBuff) && TemplarsVerdict.IsSpellUsable &&
                 TemplarsVerdict.IsDistanceGood &&
                 (ObjectManager.Me.HaveBuff(90174) || ObjectManager.Me.HolyPower == 5 ||
                  (ObjectManager.Me.HolyPower >= 3 && (!BoundlessConviction.KnownSpell || HolyAvenger.HaveBuff))))
        {
            TemplarsVerdict.Launch();
        }
        else if ((ObjectManager.GetNumberAttackPlayer() >= 2 ||
                  (MySettings.UseDivineStorm && !MySettings.UseTemplarsVerdict)) && DivineStorm.KnownSpell &&
                 MySettings.UseDivineStorm && (!Inquisition.KnownSpell || Inquisition.HaveBuff) &&
                 DivineStorm.IsSpellUsable && DivineStorm.IsDistanceGood &&
                 (ObjectManager.Me.HaveBuff(90174) || ObjectManager.Me.HolyPower == 5 ||
                  (ObjectManager.Me.HolyPower >= 3 && (!BoundlessConviction.KnownSpell || HolyAvenger.HaveBuff))))
        {
            DivineStorm.Launch();
        }
        else if (HammerOfWrath.KnownSpell && HammerOfWrath.IsDistanceGood && HammerOfWrath.IsSpellUsable &&
                 MySettings.UseHammerOfWrath)
        {
            HammerOfWrath.Launch();
        }
        else if (Exorcism.KnownSpell && Exorcism.IsDistanceGood && Exorcism.IsSpellUsable &&
                 MySettings.UseExorcism)
        {
            Exorcism.Launch();
        }
        else if ((ObjectManager.GetNumberAttackPlayer() <= 3 || !MySettings.UseHammerOfTheRighteous ||
                  ObjectManager.Target.HaveBuff(115798) || !MySettings.RefreshWeakenedBlows) &&
                 MySettings.UseCrusaderStrike &&
                 CrusaderStrike.KnownSpell && CrusaderStrike.IsDistanceGood &&
                 CrusaderStrike.IsSpellUsable)
        {
            CrusaderStrike.Launch();
        }
        else if ((ObjectManager.GetNumberAttackPlayer() >= 4 ||
                  (!ObjectManager.Target.HaveBuff(115798) && MySettings.RefreshWeakenedBlows) ||
                  (!MySettings.UseCrusaderStrike && !MySettings.UseHammerOfTheRighteous)) &&
                 HammerOfTheRighteous.KnownSpell && HammerOfTheRighteous.IsDistanceGood &&
                 HammerOfTheRighteous.IsSpellUsable && !ObjectManager.Me.HaveBuff(90174))
        {
            HammerOfTheRighteous.Launch();
        }
        else if (Judgment.KnownSpell && Judgment.IsDistanceGood && Judgment.IsSpellUsable &&
                 MySettings.UseJudgment)
        {
            Judgment.Launch();
        }
        else if ((ObjectManager.GetNumberAttackPlayer() <= 1 ||
                  (!MySettings.UseDivineStorm && MySettings.UseTemplarsVerdict)) &&
                 TemplarsVerdict.KnownSpell &&
                 (!Inquisition.KnownSpell || Inquisition.HaveBuff) &&
                 TemplarsVerdict.IsSpellUsable && TemplarsVerdict.IsDistanceGood &&
                 (ObjectManager.Me.HaveBuff(90174) || ObjectManager.Me.HolyPower >= 3))
        {
            TemplarsVerdict.Launch();
        }
        else if ((ObjectManager.GetNumberAttackPlayer() >= 2 ||
                  (MySettings.UseDivineStorm && !MySettings.UseTemplarsVerdict)) &&
                 DivineStorm.KnownSpell &&
                 (!Inquisition.KnownSpell || Inquisition.HaveBuff) &&
                 DivineStorm.IsSpellUsable && DivineStorm.IsDistanceGood &&
                 (ObjectManager.Me.HaveBuff(90174) || ObjectManager.Me.HolyPower >= 3))
        {
            DivineStorm.Launch();
        }
        else if (MySettings.UseSacredShield && SacredShield.KnownSpell &&
                 SacredShield.IsDistanceGood && SacredShield.IsSpellUsable
                 && (!Inquisition.KnownSpell || Inquisition.HaveBuff)
                 && (!TemplarsVerdict.KnownSpell || TemplarsVerdict.IsSpellUsable)
                 && (!Judgment.KnownSpell || Judgment.IsSpellUsable)
                 && (!Judgment.KnownSpell || Judgment.IsSpellUsable)
                 && (!CrusaderStrike.KnownSpell || CrusaderStrike.IsSpellUsable)
                 && (!HammerOfWrath.KnownSpell || HammerOfWrath.IsSpellUsable)
                 && (!Exorcism.KnownSpell || Exorcism.IsSpellUsable))
        {
            // Since we have a GCD available and spell to cast, we can use the Sacred Shield. (Loss of DPS if not placed here.)
            SacredShield.Launch();
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            Keyboard.DownKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
            while (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
                Thread.Sleep(300);
            Keyboard.UpKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
        }
    }

    #region Nested type: PaladinRetributionSettings

    [Serializable]
    public class PaladinRetributionSettings : Settings
    {
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public int UseStoneformAtPercentage = 80;
        public int UseWarStompAtPercentage = 80;
        public string CombatPotion = "Potion of Mogu Power";
        public string FlaskOrBattleElixir = "Flask of Winter's Bite";
        public string GuardianElixir = "";
        public bool RefreshWeakenedBlows = true;
        public string TeasureFindingPotion = "Potion of Luck";
        public bool UseArcaneTorrentForDecast = true;
        public bool UseArcaneTorrentForResource = true;
        public bool UseAvengingWrath = true;
        public bool UseBerserking = true;
        public bool UseBlessingOfKings = true;
        public bool UseBlessingOfMight = true;
        public bool UseCombatPotion = false;
        public bool UseCrusaderStrike = true;
        public bool UseDevotionAura = true;
        public bool UseDivineProtection = true;
        public bool UseDivineShield = true;
        public bool UseDivineStorm = true;
        public bool UseExorcism = true;
        public bool UseFlashOfLight = true;
        public bool UseFlaskOrBattleElixir = false;
        public bool UseGiftoftheNaaru = true;
        public bool UseGuardianElixir = false;
        public bool UseGuardianOfAncientKings = true;
        public bool UseHammerOfJustice = true;
        public bool UseHammerOfTheRighteous = true;
        public bool UseHammerOfWrath = true;
        public bool UseHandOfProtection = false;
        public bool UseHolyAvenger = true;
        public bool UseInquisition = true;
        public bool UseJudgment = true;
        public bool UseLayOnHands = true;
        public bool UseLifeblood = true;
        public bool UseSacredShield = true;
        public bool UseSealOfInsight = false;
        public bool UseSealOfJustice = false;
        public bool UseSealOfTheRighteousness = true;
        public bool UseSealOfTruth = true;
        public bool UseStoneform = true;
        public bool UseTeasureFindingPotion = false;
        public bool UseTemplarsVerdict = true;
        public bool UseWarStomp = true;
        public bool UseWellFedBuff = false;
        public bool UseWordOfGlory = true;
        public string WellFedBuff = "Black Pepper Ribs and Shrimp";

        public PaladinRetributionSettings()
        {
            ConfigWinForm(new Point(500, 400), "Paladin Retribution Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrent", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            /* Paladin Seals & Buffs */
            AddControlInWinForm("Use Seal of the Righteousness", "UseSealOfTheRighteousness", "Paladin Seals & Buffs");
            AddControlInWinForm("Use Seal of Truth", "UseSealOfTruth", "Paladin Seals & Buffs");
            AddControlInWinForm("Use Seal of Justice", "UseSealOfJustice", "Paladin Seals & Buffs");
            AddControlInWinForm("Use Seal of Insight", "UseSealOfInsight", "Paladin Seals & Buffs");
            AddControlInWinForm("Use Blessing of Might", "UseBlessingOfMight", "Paladin Seals & Buffs");
            AddControlInWinForm("Use Blessing of Kings", "UseBlessingOfKings", "Paladin Seals & Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Templar's Verdict", "UseTemplarsVerdict", "Offensive Spell");
            AddControlInWinForm("Use Divine Storm", "UseDivineStorm", "Offensive Spell");
            AddControlInWinForm("Use Exorcism", "UseExorcism", "Offensive Spell");
            AddControlInWinForm("Use Hammer of Wrath", "UseHammerOfWrath", "Offensive Spell");
            AddControlInWinForm("Use Crusader Strike", "UseCrusaderStrike", "Offensive Spell");
            AddControlInWinForm("Use Hammer of the Righteous", "UseHammerOfTheRighteous", "Offensive Spell");
            AddControlInWinForm("Use Judgment", "UseJudgment", "Offensive Spell");
            AddControlInWinForm("Use Hammer of Justice", "UseHammerOfJustice", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Inquisition", "UseInquisition", "Offensive Cooldown");
            AddControlInWinForm("Use Guardian of Ancient Kings", "UseGuardianOfAncientKings", "Offensive Cooldown");
            AddControlInWinForm("Use Holy Avenger", "UseHolyAvenger", "Offensive Cooldown");
            AddControlInWinForm("Use Avenging Wrath", "UseAvengingWrath", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Refresh Weakened Blows", "RefreshWeakenedBlows", "Defensive Cooldown");
            AddControlInWinForm("Use Divine Protection", "UseDivineProtection", "Defensive Cooldown");
            AddControlInWinForm("Use Devotion Aura", "UseDevotionAura", "Defensive Cooldown");
            AddControlInWinForm("Use Sacred Shield", "UseSacredShield", "Defensive Cooldown");
            AddControlInWinForm("Use Divine Shield", "UseDivineShield", "Defensive Cooldown");
            AddControlInWinForm("Use Hand of Protection", "UseHandOfProtection", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Flash of Light", "UseFlashOfLight", "Healing Spell");
            AddControlInWinForm("Use Lay on Hands", "UseLayOnHands", "Healing Spell");
            AddControlInWinForm("Use Word of Glory", "UseWordOfGlory", "Healing Spell");
            /* Flask & Potion Management */
            AddControlInWinForm("Use Flask or Battle Elixir", "UseFlaskOrBattleElixir", "Flask & Potion Management");
            AddControlInWinForm("Flask or Battle Elixir Name", "FlaskOrBattleElixir", "Flask & Potion Management");
            AddControlInWinForm("Use Guardian Elixir", "UseGuardianElixir", "Flask & Potion Management");
            AddControlInWinForm("Guardian Elixir Name", "GuardianElixir", "Flask & Potion Management");
            AddControlInWinForm("Use Combat Potion", "UseCombatPotion", "Flask & Potion Management");
            AddControlInWinForm("Combat Potion Name", "CombatPotion", "Flask & Potion Management");
            AddControlInWinForm("Use Teasure Finding Potion", "UseTeasureFindingPotion", "Flask & Potion Management");
            AddControlInWinForm("Teasure Finding Potion Name", "TeasureFindingPotion", "Flask & Potion Management");
            AddControlInWinForm("Use Well Fed Buff", "UseWellFedBuff", "Flask & Potion Management");
            AddControlInWinForm("Well Fed Buff Name", "WellFedBuff", "Flask & Potion Management");
        }

        public static PaladinRetributionSettings CurrentSetting { get; set; }

        public static PaladinRetributionSettings GetSettings()
        {
            string CurrentSettingsFile = Application.StartupPath + "\\CustomClasses\\Settings\\Paladin_Retribution.xml";
            if (File.Exists(CurrentSettingsFile))
            {
                return
                    CurrentSetting = Load<PaladinRetributionSettings>(CurrentSettingsFile);
            }
            return new PaladinRetributionSettings();
        }
    }

    #endregion
}

#endregion

#region Shaman

public class Shaman_Enhancement
{
    private readonly ShamanEnhancementSettings MySettings = ShamanEnhancementSettings.GetSettings();
    private readonly string MoveBackward = nManager.Wow.Helpers.Keybindings.GetKeyByAction(nManager.Wow.Enums.Keybindings.MOVEBACKWARD);

    #region General Timers & Variables

    private Timer AlchFlask_Timer = new Timer(0);
    private Timer Engineering_Timer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer Trinket_Timer = new Timer(0);
    public int LC = 0;

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell Arcane_Torrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell Blood_Fury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell Gift_of_the_Naaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell War_Stomp = new Spell("War Stomp");

    #endregion

    #region Shaman Buffs

    private readonly Spell Flametongue_Weapon = new Spell("Flametongue Weapon");
    private readonly Spell Frostbrand_Weapon = new Spell("Frostbrand Weapon");
    private readonly Spell Ghost_Wolf = new Spell("Ghost Wolf");
    private readonly Spell Lightning_Shield = new Spell("Lightning Shield");
    private readonly Spell Rockbiter_Weapon = new Spell("Rockbiter Weapon");
    private readonly Spell Spiritwalkers_Grace = new Spell("Spiritwalker's Grace");
    private readonly Spell Water_Shield = new Spell("Water Shield");
    private readonly Spell Water_Walking = new Spell("Water Walking");
    private readonly Spell Windfury_Weapon = new Spell("Windfury Weapon");
    private Timer Water_Walking_Timer = new Timer(0);

    #endregion

    #region Offensive Spell

    private readonly Spell Chain_Lightning = new Spell("Chain Lightning");
    private readonly Spell Earth_Shock = new Spell("Earth Shock");
    private readonly Spell Fire_Nova = new Spell("Fire Nova");
    private readonly Spell Flame_Shock = new Spell("Flame Shock");
    private readonly Spell Frost_Shock = new Spell("Frost Shock");
    private readonly Spell Lava_Lash = new Spell("Lava Lash");
    private readonly Spell Lightning_Bolt = new Spell("Lightning Bolt");
    private readonly Spell Magma_Totem = new Spell("Magma Totem");
    private readonly Spell Primal_Strike = new Spell("Primal Strike");
    private readonly Spell Searing_Totem = new Spell("Searing Totem");
    private readonly Spell Stormstrike = new Spell("Stormstrike");
    private Timer Flame_Shock_Timer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell Ancestral_Swiftness = new Spell("Ancestral Swiftness");
    private readonly Spell Ascendance = new Spell("Ascendance");
    private readonly Spell Bloodlust = new Spell("Bloodlust");
    private readonly Spell Call_of_the_Elements = new Spell("Call of the Elements");
    private readonly Spell Earth_Elemental_Totem = new Spell("Earth Elemental Totem");
    private readonly Spell Elemental_Blast = new Spell("Elemental Blast");
    private readonly Spell Elemental_Mastery = new Spell("Elemental Mastery");
    private readonly Spell Feral_Spirit = new Spell("Feral Spirit");
    private readonly Spell Fire_Elemental_Totem = new Spell("Fire Elemental Totem");
    private readonly Spell Heroism = new Spell("Heroism");
    private readonly Spell Stormlash_Totem = new Spell("Stormlash Totem");
    private readonly Spell Totemic_Projection = new Spell("Totemic Projection");
    private readonly Spell Unleash_Elements = new Spell("Unleash Elements");
    private readonly Spell Unleashed_Fury = new Spell("Unleashed Fury");

    #endregion

    #region Defensive Cooldown

    private readonly Spell Astral_Shift = new Spell("Astral Shift");
    private readonly Spell Capacitor_Totem = new Spell("Capacitor Totem");
    private readonly Spell Earthbind_Totem = new Spell("Earthbind Totem");
    private readonly Spell Grounding_Totem = new Spell("Grounding Totem");
    private readonly Spell Shamanistic_Rage = new Spell("Shamanistic Rage");
    private readonly Spell Stone_Bulwark_Totem = new Spell("Stone Bulwark Totem");
    private readonly Spell Wind_Shear = new Spell("Wind Shear");

    #endregion

    #region Healing Spell

    private readonly Spell Ancestral_Guidance = new Spell("Ancestral Guidance");
    private readonly Spell Chain_Heal = new Spell("Chain Heal");
    private readonly Spell Healing_Rain = new Spell("Healing Rain");
    private readonly Spell Healing_Stream_Totem = new Spell("Healing Stream Totem");
    private readonly Spell Healing_Surge = new Spell("Healing Surge");
    private readonly Spell Healing_Tide_Totem = new Spell("Healing Tide Totem");
    private readonly Spell Totemic_Recall = new Spell("Totemic Recall");

    #endregion

    public Shaman_Enhancement()
    {
        Main.range = 5.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (Flame_Shock.IsDistanceGood || Earth_Shock.IsDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && MySettings.UseLowCombat)
                            {
                                LC = 1;
                                LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void Pull()
    {
        if (Totemic_Projection.KnownSpell && Totemic_Projection.IsSpellUsable && MySettings.UseTotemicProjection)
            Totemic_Projection.Launch();

        if (Flame_Shock.KnownSpell && Flame_Shock.IsSpellUsable && Flame_Shock.IsDistanceGood
            && MySettings.UseFlameShock && LC != 1)
        {
            Flame_Shock.Launch();
            return;
        }
        else
        {
            if (Earth_Shock.KnownSpell && Earth_Shock.IsSpellUsable && Earth_Shock.IsDistanceGood
                && MySettings.UseEarthShock)
            {
                Earth_Shock.Launch();
                return;
            }
        }
    }

    private void LowCombat()
    {
        Buff();
        AvoidMelee();
        Defense_Cycle();
        Heal();

        if (Earth_Shock.KnownSpell && Earth_Shock.IsSpellUsable && Earth_Shock.IsDistanceGood
            && MySettings.UseEarthShock)
        {
            Earth_Shock.Launch();
            return;
        }
        // Blizzard API Calls for Stormstrike using Primal Strike Function
        else if (Primal_Strike.KnownSpell && Primal_Strike.IsSpellUsable && Primal_Strike.IsDistanceGood
                 && MySettings.UseStormstrike)
        {
            Primal_Strike.Launch();
            return;
        }
        else if (Chain_Lightning.KnownSpell && Chain_Lightning.IsSpellUsable && Chain_Lightning.IsDistanceGood
                 && MySettings.UseChainLightning)
        {
            Chain_Lightning.Launch();
            return;
        }
        else
        {
            if (Searing_Totem.KnownSpell && Searing_Totem.IsSpellUsable && MySettings.UseSearingTotem
                && FireTotemReady() && !Searing_Totem.CreatedBySpellInRange(25) && ObjectManager.Target.GetDistance < 31)
            {
                Searing_Totem.Launch();
                return;
            }
        }

        if (Magma_Totem.KnownSpell && Magma_Totem.IsSpellUsable && ObjectManager.Target.GetDistance < 8
            && MySettings.UseMagmaTotem && FireTotemReady())
        {
            Magma_Totem.Launch();
            return;
        }
    }

    private void Combat()
    {
        Buff();
        AvoidMelee();
        if (OnCD.IsReady)
            Defense_Cycle();
        Heal();
        Decast();
        DPS_Burst();
        DPS_Cycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (Water_Walking.IsSpellUsable && Water_Walking.KnownSpell &&
            (!Water_Walking.HaveBuff || Water_Walking_Timer.IsReady)
            && ObjectManager.GetNumberAttackPlayer() == 0 && !Fight.InFight && MySettings.UseWaterWalking)
        {
            Water_Walking.Launch();
            Water_Walking_Timer = new Timer(1000*60*9);
            return;
        }
        else if ((ObjectManager.Me.ManaPercentage < 5 && Water_Shield.KnownSpell && Water_Shield.IsSpellUsable
                  && MySettings.UseWaterShield && !Water_Shield.HaveBuff) || !MySettings.UseLightningShield)
        {
            Water_Shield.Launch();
            return;
        }
        else if (Lightning_Shield.KnownSpell && Lightning_Shield.IsSpellUsable && !Lightning_Shield.HaveBuff
                 && MySettings.UseLightningShield && ObjectManager.Me.ManaPercentage > 15)
        {
            Lightning_Shield.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 0 && Spiritwalkers_Grace.IsSpellUsable
                 && Spiritwalkers_Grace.KnownSpell && MySettings.UseSpiritwalkersGrace && ObjectManager.Me.GetMove)
        {
            Spiritwalkers_Grace.Launch();
            return;
        }
        else
        {
            if (Windfury_Weapon.KnownSpell && Windfury_Weapon.IsSpellUsable && !ObjectManager.Me.HaveBuff(33757)
                && MySettings.UseWindfuryWeapon)
            {
                Windfury_Weapon.Launch();
                return;
            }
            else if (Frostbrand_Weapon.KnownSpell && Frostbrand_Weapon.IsSpellUsable && !ObjectManager.Me.HaveBuff(8034)
                     && MySettings.UseFrostbrandWeapon && !MySettings.UseWindfuryWeapon)
            {
                Frostbrand_Weapon.Launch();
                return;
            }
            else
            {
                if (Rockbiter_Weapon.KnownSpell && Rockbiter_Weapon.IsSpellUsable && !ObjectManager.Me.HaveBuff(36494)
                    && MySettings.UseRockbiterWeapon && !MySettings.UseWindfuryWeapon
                    && !MySettings.UseFrostbrandWeapon)
                {
                    Rockbiter_Weapon.Launch();
                    return;
                }
            }

            if (Flametongue_Weapon.KnownSpell && Flametongue_Weapon.IsSpellUsable && !ObjectManager.Me.HaveBuff(10400)
                && MySettings.UseFlametongueWeapon && (ObjectManager.Me.HaveBuff(33757)
                                                       || ObjectManager.Me.HaveBuff(8034) ||
                                                       ObjectManager.Me.HaveBuff(36494)))
            {
                Flametongue_Weapon.Launch();
                return;
            }
        }

        if (ObjectManager.GetNumberAttackPlayer() == 0 && Ghost_Wolf.IsSpellUsable && Ghost_Wolf.KnownSpell
            && MySettings.UseGhostWolf && ObjectManager.Me.GetMove && !Ghost_Wolf.HaveBuff
            && ObjectManager.Target.GetDistance > 10)
        {
            Ghost_Wolf.Launch();
            return;
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            Keyboard.DownKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
            while (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
                Thread.Sleep(300);
            Keyboard.UpKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
        }
    }

    private void Defense_Cycle()
    {
        if (ObjectManager.Me.HealthPercent < 50 && Capacitor_Totem.KnownSpell && Capacitor_Totem.IsSpellUsable
            && AirTotemReady() && MySettings.UseCapacitorTotem)
        {
            Capacitor_Totem.Launch();
            OnCD = new Timer(1000*5);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 50 && Stone_Bulwark_Totem.KnownSpell &&
                 Stone_Bulwark_Totem.IsSpellUsable
                 && EarthTotemReady() && MySettings.UseStoneBulwarkTotem)
        {
            Stone_Bulwark_Totem.Launch();
            OnCD = new Timer(1000*10);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseWarStompAtPercentage && War_Stomp.IsSpellUsable && War_Stomp.KnownSpell
                 && MySettings.UseWarStomp)
        {
            War_Stomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable && Stoneform.KnownSpell
                 && MySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 90 && Shamanistic_Rage.IsSpellUsable
                 && Shamanistic_Rage.KnownSpell && MySettings.UseShamanisticRage)
        {
            Shamanistic_Rage.Launch();
            OnCD = new Timer(1000*15);
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent < 70 && Astral_Shift.KnownSpell && Astral_Shift.IsSpellUsable
                && MySettings.UseAstralShift)
            {
                Astral_Shift.Launch();
                OnCD = new Timer(1000*6);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (ObjectManager.Me.ManaPercentage < 50 && Totemic_Recall.KnownSpell && Totemic_Recall.IsSpellUsable
            && MySettings.UseTotemicRecall && ObjectManager.GetNumberAttackPlayer() == 0 && !Fight.InFight
            && TotemicRecallReady())
        {
            Totemic_Recall.Launch();
            return;
        }

        if (ObjectManager.Me.HealthPercent < 95 && Healing_Surge.KnownSpell && Healing_Surge.IsSpellUsable
            && ObjectManager.GetNumberAttackPlayer() == 0 && !Fight.InFight && MySettings.UseHealingSurge)
        {
            Healing_Surge.Launch();
            while (ObjectManager.Me.IsCast)
            {
                Thread.Sleep(200);
            }
            return;
        }
        else if (Healing_Surge.KnownSpell && Healing_Surge.IsSpellUsable && ObjectManager.Me.HealthPercent < 50
                 && MySettings.UseHealingSurge)
        {
            Healing_Surge.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseGiftoftheNaaruAtPercentage && Gift_of_the_Naaru.KnownSpell && Gift_of_the_Naaru.IsSpellUsable
                 && MySettings.UseGiftoftheNaaru)
        {
            Gift_of_the_Naaru.Launch();
            return;
        }
        else if (Healing_Tide_Totem.KnownSpell && Healing_Tide_Totem.IsSpellUsable && ObjectManager.Me.HealthPercent < 70
                 && WaterTotemReady() && MySettings.UseHealingTideTotem)
        {
            Healing_Tide_Totem.Launch();
            return;
        }
        else if (Ancestral_Guidance.KnownSpell && Ancestral_Guidance.IsSpellUsable &&
                 ObjectManager.Me.HealthPercent < 70
                 && MySettings.UseAncestralGuidance)
        {
            Ancestral_Guidance.Launch();
            return;
        }
        else if (Chain_Heal.KnownSpell && Chain_Heal.IsSpellUsable && ObjectManager.Me.HealthPercent < 80
                 && MySettings.UseChainHeal)
        {
            Chain_Heal.Launch();
            return;
        }
        else
        {
            if (Healing_Stream_Totem.KnownSpell && Healing_Stream_Totem.IsSpellUsable &&
                ObjectManager.Me.HealthPercent < 90
                && WaterTotemReady() && MySettings.UseHealingStreamTotem)
            {
                Healing_Stream_Totem.Launch();
                return;
            }
        }
    }

    private void Decast()
    {
        if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && MySettings.UseWindShear
            && Wind_Shear.KnownSpell && Wind_Shear.IsSpellUsable && Wind_Shear.IsDistanceGood)
        {
            Wind_Shear.Launch();
            return;
        }
        else if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell && ObjectManager.Target.GetDistance < 8
                 && ObjectManager.Me.HealthPercent <= MySettings.UseArcaneTorrentForDecastAtPercentage
                 && MySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && MySettings.UseGroundingTotem
                && Grounding_Totem.KnownSpell && Grounding_Totem.IsSpellUsable && AirTotemReady())
            {
                Grounding_Totem.Launch();
                return;
            }
        }

        if (ObjectManager.Target.GetMove && !Frost_Shock.TargetHaveBuff && MySettings.UseFrostShock
            && Frost_Shock.KnownSpell && Frost_Shock.IsSpellUsable && Frost_Shock.IsDistanceGood)
        {
            Frost_Shock.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.GetMove && MySettings.UseEarthbindTotem && EarthTotemReady()
                && Earthbind_Totem.KnownSpell && Earthbind_Totem.IsSpellUsable && Earthbind_Totem.IsDistanceGood)
            {
                Earthbind_Totem.Launch();
                return;
            }
        }
    }

    private void DPS_Burst()
    {
        if (MySettings.UseTrinket && Trinket_Timer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Trinket_Timer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBerserking)
            Berserking.Launch();
        else if (Blood_Fury.IsSpellUsable && Blood_Fury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBloodFury)
            Blood_Fury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (Engineering_Timer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                && MySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            Engineering_Timer = new Timer(1000*60);
        }
        else if (Unleash_Elements.KnownSpell && Unleash_Elements.IsSpellUsable && Unleashed_Fury.KnownSpell
                 && MySettings.UseUnleashElements && Unleash_Elements.IsDistanceGood)
        {
            Unleash_Elements.Launch();
            return;
        }
        else if (Elemental_Blast.KnownSpell && Elemental_Blast.IsSpellUsable
                 && MySettings.UseElementalBlast && Elemental_Blast.IsDistanceGood)
        {
            Elemental_Blast.Launch();
            return;
        }
        else if (Ascendance.KnownSpell && Ascendance.IsSpellUsable
                 && MySettings.UseAscendance && ObjectManager.Target.GetDistance < 30)
        {
            Ascendance.Launch();
            return;
        }
        else if (Fire_Elemental_Totem.KnownSpell && Fire_Elemental_Totem.IsSpellUsable
                 && MySettings.UseFireElementalTotem && ObjectManager.Target.GetDistance < 30)
        {
            Fire_Elemental_Totem.Launch();
            return;
        }
        else if (Stormlash_Totem.KnownSpell && AirTotemReady()
                 && MySettings.UseStormlashTotem && ObjectManager.Target.GetDistance < 30)
        {
            if (!Stormlash_Totem.IsSpellUsable && MySettings.UseCalloftheElements
                && Call_of_the_Elements.KnownSpell && Call_of_the_Elements.IsSpellUsable)
            {
                Call_of_the_Elements.Launch();
                Thread.Sleep(200);
            }

            if (Stormlash_Totem.IsSpellUsable)
                Stormlash_Totem.Launch();
            return;
        }
        else if (Feral_Spirit.KnownSpell && Feral_Spirit.IsSpellUsable
                 && MySettings.UseFeralSpirit && ObjectManager.Target.GetDistance < 30)
        {
            Feral_Spirit.Launch();
            return;
        }
        else if (Bloodlust.KnownSpell && Bloodlust.IsSpellUsable && MySettings.UseBloodlustHeroism
                 && ObjectManager.Target.GetDistance < 30 && !ObjectManager.Me.HaveBuff(57724))
        {
            Bloodlust.Launch();
            return;
        }

        else if (Heroism.KnownSpell && Heroism.IsSpellUsable && MySettings.UseBloodlustHeroism
                 && ObjectManager.Target.GetDistance < 30 && !ObjectManager.Me.HaveBuff(57723))
        {
            Heroism.Launch();
            return;
        }
        else
        {
            if (Elemental_Mastery.KnownSpell && Elemental_Mastery.IsSpellUsable
                && !ObjectManager.Me.HaveBuff(2825) && MySettings.UseElementalMastery
                && !ObjectManager.Me.HaveBuff(32182))
            {
                Elemental_Mastery.Launch();
                return;
            }
        }
    }

    private void DPS_Cycle()
    {
        if (Earth_Elemental_Totem.KnownSpell && Earth_Elemental_Totem.IsSpellUsable
            && ObjectManager.GetNumberAttackPlayer() > 3 && MySettings.UseEarthElementalTotem)
        {
            Earth_Elemental_Totem.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 5 && Magma_Totem.KnownSpell
                 && Magma_Totem.IsSpellUsable && MySettings.UseMagmaTotem
                 && !Fire_Elemental_Totem.CreatedBySpell)
        {
            Magma_Totem.Launch();
            return;
        }
        if (Searing_Totem.KnownSpell && Searing_Totem.IsSpellUsable && MySettings.UseSearingTotem
            && FireTotemReady() && !Searing_Totem.CreatedBySpellInRange(25) && ObjectManager.Target.GetDistance < 31)
        {
            Searing_Totem.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 2 && Chain_Lightning.KnownSpell
                 && Chain_Lightning.IsSpellUsable && Chain_Lightning.IsDistanceGood
                 && MySettings.UseChainLightning && ObjectManager.Me.BuffStack(53817) == 5)
        {
            Chain_Lightning.Launch();
            return;
        }
        else if (Lightning_Bolt.IsDistanceGood && Lightning_Bolt.KnownSpell && Lightning_Bolt.IsSpellUsable
                 && MySettings.UseLightningBolt && ObjectManager.Me.BuffStack(53817) == 5)
        {
            Lightning_Bolt.Launch();
            return;
        }
        else if (Flame_Shock.IsSpellUsable && Flame_Shock.IsDistanceGood && Flame_Shock.KnownSpell
                 && MySettings.UseFlameShock && (!Flame_Shock.TargetHaveBuff || Flame_Shock_Timer.IsReady))
        {
            if (Unleash_Elements.KnownSpell && Unleash_Elements.IsSpellUsable && Unleash_Elements.IsDistanceGood
                && MySettings.UseUnleashElements)
            {
                Unleash_Elements.Launch();
                Thread.Sleep(200);
            }
            Flame_Shock.Launch();
            Flame_Shock_Timer = new Timer(1000*27);
            return;
        }
        else if (Fire_Nova.KnownSpell && Fire_Nova.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 2
                 && MySettings.UseFireNova)
        {
            Fire_Nova.Launch();
            return;
        }
        // Blizzard API Calls for Stormstrike using Primal Strike Function
        else if (Primal_Strike.KnownSpell && Primal_Strike.IsSpellUsable && Primal_Strike.IsDistanceGood
                 && MySettings.UseStormstrike)
        {
            Primal_Strike.Launch();
            return;
        }
        else if (Lava_Lash.KnownSpell && Lava_Lash.IsSpellUsable && Lava_Lash.IsDistanceGood
                 && MySettings.UseLavaLash)
        {
            Lava_Lash.Launch();
            return;
        }
        else if (Unleash_Elements.KnownSpell && Unleash_Elements.IsSpellUsable && Unleash_Elements.IsDistanceGood
                 && MySettings.UseUnleashElements)
        {
            Unleash_Elements.Launch();
            return;
        }
        else if (Earth_Shock.IsSpellUsable && Earth_Shock.KnownSpell && Earth_Shock.IsDistanceGood
                 && Flame_Shock.TargetHaveBuff && MySettings.UseEarthShock)
        {
            Earth_Shock.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 2 && Chain_Lightning.KnownSpell
                 && Chain_Lightning.IsSpellUsable && Chain_Lightning.IsDistanceGood
                 && MySettings.UseChainLightning && ObjectManager.Me.BuffStack(53817) > 0)
        {
            if (Ancestral_Swiftness.KnownSpell && Ancestral_Swiftness.IsSpellUsable
                && MySettings.UseAncestralSwiftness)
            {
                Ancestral_Swiftness.Launch();
                Thread.Sleep(200);
            }
            Chain_Lightning.Launch();
            return;
        }
        else if (Lightning_Bolt.IsDistanceGood && Lightning_Bolt.KnownSpell && Lightning_Bolt.IsSpellUsable
                && MySettings.UseLightningBolt && ObjectManager.Me.BuffStack(53817) > 0)
        {
            if (Ancestral_Swiftness.KnownSpell && Ancestral_Swiftness.IsSpellUsable
                    && MySettings.UseAncestralSwiftness)
            {
                Ancestral_Swiftness.Launch();
                Thread.Sleep(200);
            }
            Lightning_Bolt.Launch();
            return;
        }
        else
        {
            if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell
                && MySettings.UseArcaneTorrentForResource)
            {
                Arcane_Torrent.Launch();
                return;
            }
        }
    }

    private bool FireTotemReady()
    {
        if (Fire_Elemental_Totem.CreatedBySpell || Magma_Totem.CreatedBySpell)
            return false;
        return true;
    }

    private bool EarthTotemReady()
    {
        if (Earthbind_Totem.CreatedBySpell || Earth_Elemental_Totem.CreatedBySpell
            || Stone_Bulwark_Totem.CreatedBySpell)
            return false;
        return true;
    }

    private bool WaterTotemReady()
    {
        if (Healing_Stream_Totem.CreatedBySpell || Healing_Tide_Totem.CreatedBySpell)
            return false;
        return true;
    }

    private bool AirTotemReady()
    {
        if (Capacitor_Totem.CreatedBySpell || Grounding_Totem.CreatedBySpell
            || Stormlash_Totem.CreatedBySpell)
            return false;
        return true;
    }

    private bool TotemicRecallReady()
    {
        if (Fire_Elemental_Totem.CreatedBySpell)
            return false;
        else if (Earth_Elemental_Totem.CreatedBySpell)
            return false;
        else if (Searing_Totem.CreatedBySpell)
            return true;
        else if (FireTotemReady() && EarthTotemReady() && WaterTotemReady() && AirTotemReady())
            return false;
        else
            return true;
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: ShamanEnhancementSettings

    [Serializable]
    public class ShamanEnhancementSettings : Settings
    {
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public int UseStoneformAtPercentage = 80;
        public int UseWarStompAtPercentage = 80;
        public bool UseAlchFlask = true;
        public bool UseAncestralGuidance = true;
        public bool UseAncestralSwiftness = true;
        public bool UseArcaneTorrentForDecast = true;
        public bool UseArcaneTorrentForResource = true;
        public bool UseAscendance = true;
        public bool UseAstralShift = true;
        public bool UseBerserking = true;
        public bool UseBloodFury = true;
        public bool UseBloodlustHeroism = true;
        public bool UseCalloftheElements = true;
        public bool UseCapacitorTotem = true;
        public bool UseChainHeal = false;
        public bool UseChainLightning = true;
        public bool UseEarthElementalTotem = true;
        public bool UseEarthShock = true;
        public bool UseEarthbindTotem = false;
        public bool UseElementalBlast = true;
        public bool UseElementalMastery = true;
        public bool UseEngGlove = true;
        public bool UseFeralSpirit = true;
        public bool UseFireElementalTotem = true;
        public bool UseFireNova = true;
        public bool UseFlameShock = true;
        public bool UseFlametongueWeapon = true;
        public bool UseFrostShock = false;
        public bool UseFrostbrandWeapon = false;
        public bool UseGhostWolf = true;
        public bool UseGiftoftheNaaru = true;
        public bool UseGroundingTotem = true;
        public bool UseHealingRain = true;
        public bool UseHealingStreamTotem = true;
        public bool UseHealingSurge = true;
        public bool UseHealingTideTotem = true;
        public bool UseLavaLash = true;
        public bool UseLifeblood = true;
        public bool UseLightningBolt = true;
        public bool UseLightningShield = true;
        public bool UseLowCombat = true;
        public bool UseMagmaTotem = true;
        public bool UseRockbiterWeapon = false;
        public bool UseSearingTotem = true;
        public bool UseShamanisticRage = true;
        public bool UseSpiritwalkersGrace = true;
        public bool UseStoneBulwarkTotem = true;
        public bool UseStoneform = true;
        public bool UseStormlashTotem = true;
        public bool UseStormstrike = true;
        public bool UseTotemicProjection = true;
        public bool UseTotemicRecall = true;
        public bool UseTrinket = true;
        public bool UseUnleashElements = true;
        public bool UseWarStomp = true;
        public bool UseWaterShield = true;
        public bool UseWaterWalking = true;
        public bool UseWindShear = true;
        public bool UseWindfuryWeapon = true;

        public ShamanEnhancementSettings()
        {
            ConfigWinForm(new Point(500, 400), "Shaman Enhancement Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrent", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Shaman Buffs */
            AddControlInWinForm("Use Flametongue Weapon", "UseFlametongueWeapon", "Shaman Buffs");
            AddControlInWinForm("Use Frostbrand Weapon", "UseFrostbrandWeapon", "Shaman Buffs");
            AddControlInWinForm("Use Ghost Wolf", "UseGhostWolf", "Shaman Buffs");
            AddControlInWinForm("Use Lightning Shield", "UseLightningShield", "Shaman Buffs");
            AddControlInWinForm("Use Rockbiter Weapon", "UseRockbiterWeapon", "Shaman Buffs");
            AddControlInWinForm("Use Spiritwalker's Grace", "UseSpiritwalkersGrace", "Shaman Buffs");
            AddControlInWinForm("Use Water Shield", "UseWaterShield", "Shaman Buffs");
            AddControlInWinForm("Use Water Walking", "UseWaterWalking", "Shaman Buffs");
            AddControlInWinForm("Use Windfury Weapon", "UseWindfuryWeapon", "Shaman Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Chain Lightning", "UseChainLightning", "Offensive Spell");
            AddControlInWinForm("Use Earth Shock", "UseEarthShock", "Offensive Spell");
            AddControlInWinForm("Use Fire Nova", "UseFireNova", "Offensive Spell");
            AddControlInWinForm("Use Flame Shock", "UseFlameShock", "Offensive Spell");
            AddControlInWinForm("Use Frost Shock", "UseFrostShock", "Offensive Spell");
            AddControlInWinForm("Use Lava Lash", "UseLavaLash", "Offensive Spell");
            AddControlInWinForm("Use Lightning Bolt", "UseLightningBolt", "Offensive Spell");
            AddControlInWinForm("Use Magma Totem", "UseMagmaTotem", "Offensive Spell");
            AddControlInWinForm("Use Searing Totem", "UseSearingTotem", "Offensive Spell");
            AddControlInWinForm("Use Stormstrike", "UseStormstrike", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Ancestral Swiftness", "UseAncestralSwiftness", "Offensive Cooldown");
            AddControlInWinForm("Use Ascendance", "UseAscendance", "Offensive Cooldown");
            AddControlInWinForm("Use Bloodlust / Heroism", "UseBloodlustHeroism", "Offensive Cooldown");
            AddControlInWinForm("Use Call of the Elements", "UseCalloftheElements", "Offensive Cooldown");
            AddControlInWinForm("Use Earth Elemental Totem", "UseEarthElementalTotem", "Offensive Cooldown");
            AddControlInWinForm("Use Elemental Blast", "UseElementalBlast", "Offensive Cooldown");
            AddControlInWinForm("Use Elemental Mastery", "UseElementalMastery", "Offensive Cooldown");
            AddControlInWinForm("Use Feral Spirit", "UseFeralSpirit", "Offensive Cooldown");
            AddControlInWinForm("Use Fire Elemental Totem", "UseFireElementalTotem", "Offensive Cooldown");
            AddControlInWinForm("Use Stormlash Totem", "UseStormlashTotem", "Offensive Cooldown");
            AddControlInWinForm("Use Totemic Projection", "UseTotemicProjection", "Offensive Cooldown");
            AddControlInWinForm("Use Unleash Elements", "UseUnleashElements", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Astral Shift", "UseAstralShift", "Defensive Cooldown");
            AddControlInWinForm("Use Capacitor Totem", "UseCapacitorTotem", "Defensive Cooldown");
            AddControlInWinForm("Use Earthbind Totem", "UseEarthbindTotem", "Defensive Cooldown");
            AddControlInWinForm("Use Grounding Totem", "UseGroundingTotem", "Defensive Cooldown");
            AddControlInWinForm("Use Shamanistic Rage", "UseShamanisticRage", "Defensive Cooldown");
            AddControlInWinForm("Use StoneBulwark Totem", "UseStoneBulwarkTotem", "Defensive Cooldown");
            AddControlInWinForm("Use Wind Shear", "UseWindShear", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Ancestral Guidance", "UseAncestralGuidance", "Healing Spell");
            AddControlInWinForm("Use Chain Heal", "UseChainHeal", "Healing Spell");
            AddControlInWinForm("Use Healing Rain", "UseHealingRain", "Healing Spell");
            AddControlInWinForm("Use Healing Surge", "UseHealingSurge", "Healing Spell");
            AddControlInWinForm("Use Healing Stream Totem", "UseHealingStream_Totem", "Healing Spell");
            AddControlInWinForm("Use Healing Tide Totem", "UsHealingTide_Totem", "Healing Spell");
            AddControlInWinForm("Use Totemic Recall", "UseTotemicRecall", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket", "UseTrinket", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
        }

        public static ShamanEnhancementSettings CurrentSetting { get; set; }

        public static ShamanEnhancementSettings GetSettings()
        {
            string CurrentSettingsFile = Application.StartupPath + "\\CustomClasses\\Settings\\Shaman_Enhancement.xml";
            if (File.Exists(CurrentSettingsFile))
            {
                return
                    CurrentSetting = Load<ShamanEnhancementSettings>(CurrentSettingsFile);
            }
            else
            {
                return new ShamanEnhancementSettings();
            }
        }
    }

    #endregion
}

public class Shaman_Restoration
{
    private readonly ShamanRestorationSettings MySettings = ShamanRestorationSettings.GetSettings();
    private readonly string MoveBackward = nManager.Wow.Helpers.Keybindings.GetKeyByAction(nManager.Wow.Enums.Keybindings.MOVEBACKWARD);

    #region General Timers & Variables

    private Timer AlchFlask_Timer = new Timer(0);
    private Timer Engineering_Timer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer Trinket_Timer = new Timer(0);
    public int LC = 0;

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell Arcane_Torrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell Blood_Fury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell Gift_of_the_Naaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell War_Stomp = new Spell("War Stomp");

    #endregion

    #region Shaman Buffs

    private readonly Spell Earth_Shield = new Spell("Earth Shield");
    private readonly Spell Earthliving_Weapon = new Spell("Earthliving Weapon");
    private readonly Spell Flametongue_Weapon = new Spell("Flametongue Weapon");
    private readonly Spell Frostbrand_Weapon = new Spell("Frostbrand Weapon");
    private readonly Spell Ghost_Wolf = new Spell("Ghost Wolf");
    private readonly Spell Lightning_Shield = new Spell("Lightning Shield");
    private readonly Spell Rockbiter_Weapon = new Spell("Rockbiter Weapon");
    private readonly Spell Spiritwalkers_Grace = new Spell("Spiritwalker's Grace");
    private readonly Spell Water_Shield = new Spell("Water Shield");
    private readonly Spell Water_Walking = new Spell("Water Walking");
    private Timer Water_Walking_Timer = new Timer(0);

    #endregion

    #region Offensive Spell

    private readonly Spell Chain_Lightning = new Spell("Chain Lightning");
    private readonly Spell Earth_Shock = new Spell("Earth Shock");
    private readonly Spell Flame_Shock = new Spell("Flame Shock");
    private readonly Spell Frost_Shock = new Spell("Frost Shock");
    private readonly Spell Lava_Burst = new Spell("Lava Burst");
    private readonly Spell Lightning_Bolt = new Spell("Lightning Bolt");
    private readonly Spell Magma_Totem = new Spell("Magma Totem");
    private readonly Spell Primal_Strike = new Spell("Primal Strike");
    private readonly Spell Searing_Totem = new Spell("Searing Totem");
    private Timer Flame_Shock_Timer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell Ancestral_Swiftness = new Spell("Ancestral Swiftness");
    private readonly Spell Ascendance = new Spell("Ascendance");
    private readonly Spell Bloodlust = new Spell("Bloodlust");
    private readonly Spell Call_of_the_Elements = new Spell("Call of the Elements");
    private readonly Spell Earth_Elemental_Totem = new Spell("Earth Elemental Totem");
    private readonly Spell Elemental_Blast = new Spell("Elemental Blast");
    private readonly Spell Elemental_Mastery = new Spell("Elemental Mastery");
    private readonly Spell Fire_Elemental_Totem = new Spell("Fire Elemental Totem");
    private readonly Spell Heroism = new Spell("Heroism");
    private readonly Spell Stormlash_Totem = new Spell("Stormlash Totem");
    private readonly Spell Totemic_Projection = new Spell("Totemic Projection");
    private readonly Spell Unleash_Elements = new Spell("Unleash Elements");
    private readonly Spell Unleashed_Fury = new Spell("Unleashed Fury");

    #endregion

    #region Defensive Cooldown

    private readonly Spell Astral_Shift = new Spell("Astral Shift");
    private readonly Spell Capacitor_Totem = new Spell("Capacitor Totem");
    private readonly Spell Earthbind_Totem = new Spell("Earthbind Totem");
    private readonly Spell Grounding_Totem = new Spell("Grounding Totem");
    private readonly Spell Stone_Bulwark_Totem = new Spell("Stone Bulwark Totem");
    private readonly Spell Wind_Shear = new Spell("Wind Shear");

    #endregion

    #region Healing Spell

    private readonly Spell Ancestral_Guidance = new Spell("Ancestral Guidance");
    private readonly Spell Chain_Heal = new Spell("Chain Heal");
    private readonly Spell Greater_Healing_Wave = new Spell("Greater Healing Wave");
    private readonly Spell Healing_Rain = new Spell("Healing Rain");
    private readonly Spell Healing_Stream_Totem = new Spell("Healing Stream Totem");
    private readonly Spell Healing_Surge = new Spell("Healing Surge");
    private readonly Spell Healing_Tide_Totem = new Spell("Healing Tide Totem");
    private readonly Spell Healing_Wave = new Spell("Healing_Wave");
    private readonly Spell Mana_Tide_Totem = new Spell("Mana Tide Totem");
    private readonly Spell Riptide = new Spell("Riptide");
    private readonly Spell Spirit_Link_Totem = new Spell("Spirit Link Totem");
    private readonly Spell Totemic_Recall = new Spell("Totemic Recall");

    #endregion

    public Shaman_Restoration()
    {
        Main.range = 30.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (Flame_Shock.IsDistanceGood || Earth_Shock.IsDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && MySettings.UseLowCombat)
                            {
                                LC = 1;
                                LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void Pull()
    {
        if (Totemic_Projection.KnownSpell && Totemic_Projection.IsSpellUsable && MySettings.UseTotemicProjection)
            Totemic_Projection.Launch();

        if (Flame_Shock.KnownSpell && Flame_Shock.IsSpellUsable && Flame_Shock.IsDistanceGood
            && MySettings.UseFlameShock && LC != 1)
        {
            Flame_Shock.Launch();
            return;
        }
        else
        {
            if (Earth_Shock.KnownSpell && Earth_Shock.IsSpellUsable && Earth_Shock.IsDistanceGood
                && MySettings.UseEarthShock)
            {
                Earth_Shock.Launch();
                return;
            }
        }
    }

    private void LowCombat()
    {
        Buff();
        AvoidMelee();
        Defense_Cycle();
        Heal();

        if (Earth_Shock.KnownSpell && Earth_Shock.IsSpellUsable && Earth_Shock.IsDistanceGood
            && MySettings.UseEarthShock)
        {
            Earth_Shock.Launch();
            return;
        }
        else if (Lava_Burst.KnownSpell && Lava_Burst.IsSpellUsable && Lava_Burst.IsDistanceGood
                 && MySettings.UseLavaBurst)
        {
            Lava_Burst.Launch();
            return;
        }
        else if (Chain_Lightning.KnownSpell && Chain_Lightning.IsSpellUsable && Chain_Lightning.IsDistanceGood
                 && MySettings.UseChainLightning)
        {
            Chain_Lightning.Launch();
            return;
        }
        else
        {
            if (Searing_Totem.KnownSpell && Searing_Totem.IsSpellUsable && MySettings.UseSearingTotem
                && FireTotemReady() && !Searing_Totem.CreatedBySpellInRange(25) && ObjectManager.Target.GetDistance < 31)
            {
                Searing_Totem.Launch();
                return;
            }
        }

        if (Magma_Totem.KnownSpell && Magma_Totem.IsSpellUsable && ObjectManager.Target.GetDistance < 8
            && MySettings.UseMagmaTotem && FireTotemReady())
        {
            Magma_Totem.Launch();
            return;
        }
    }

    private void Combat()
    {
        Buff();
        AvoidMelee();
        if (OnCD.IsReady)
            Defense_Cycle();
        Heal();
        Decast();
        DPS_Burst();
        DPS_Cycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (Water_Walking.IsSpellUsable && Water_Walking.KnownSpell &&
            (!Water_Walking.HaveBuff || Water_Walking_Timer.IsReady)
            && ObjectManager.GetNumberAttackPlayer() == 0 && !Fight.InFight && MySettings.UseWaterWalking)
        {
            Water_Walking.Launch();
            Water_Walking_Timer = new Timer(1000*60*9);
            return;
        }
        else if ((ObjectManager.Me.ManaPercentage < 5 && Water_Shield.KnownSpell && Water_Shield.IsSpellUsable
                  && MySettings.UseWaterShield && !Water_Shield.HaveBuff)
                 || (!MySettings.UseLightningShield && !MySettings.UseEarthShield))
        {
            Water_Shield.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 50 && Earth_Shield.KnownSpell && Earth_Shield.IsSpellUsable
                 && MySettings.UseEarthShield && !Earth_Shield.HaveBuff && ObjectManager.Me.ManaPercentage > 15
                 || !MySettings.UseLightningShield)
        {
            Earth_Shield.Launch();
            return;
        }
        else if (Lightning_Shield.KnownSpell && Lightning_Shield.IsSpellUsable && !Lightning_Shield.HaveBuff
                 && MySettings.UseLightningShield && ObjectManager.Me.ManaPercentage > 15
                 && ObjectManager.Me.HealthPercent > 70)
        {
            Lightning_Shield.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 0 && Spiritwalkers_Grace.IsSpellUsable
                 && Spiritwalkers_Grace.KnownSpell && MySettings.UseSpiritwalkersGrace && ObjectManager.Me.GetMove)
        {
            Spiritwalkers_Grace.Launch();
            return;
        }
        else
        {
            if (Flametongue_Weapon.KnownSpell && Flametongue_Weapon.IsSpellUsable && !ObjectManager.Me.HaveBuff(10400)
                && MySettings.UseFlametongueWeapon)
            {
                Flametongue_Weapon.Launch();
                return;
            }
            else if (Earthliving_Weapon.KnownSpell && Earthliving_Weapon.IsSpellUsable &&
                     !ObjectManager.Me.HaveBuff(52007)
                     && MySettings.UseEarthlivingWeapon && !MySettings.UseFlametongueWeapon)
            {
                Earthliving_Weapon.Launch();
                return;
            }
            else if (Frostbrand_Weapon.KnownSpell && Frostbrand_Weapon.IsSpellUsable &&
                     !ObjectManager.Me.HaveBuff(8034)
                     && MySettings.UseFrostbrandWeapon && !MySettings.UseFlametongueWeapon &&
                     !MySettings.UseEarthlivingWeapon)
            {
                Frostbrand_Weapon.Launch();
                return;
            }
            else
            {
                if (Rockbiter_Weapon.KnownSpell && Rockbiter_Weapon.IsSpellUsable &&
                    !ObjectManager.Me.HaveBuff(36494)
                    && MySettings.UseRockbiterWeapon && !MySettings.UseFlametongueWeapon
                    && !MySettings.UseFrostbrandWeapon && !MySettings.UseEarthlivingWeapon)
                {
                    Rockbiter_Weapon.Launch();
                    return;
                }
            }
        }

        if (ObjectManager.GetNumberAttackPlayer() == 0 && Ghost_Wolf.IsSpellUsable && Ghost_Wolf.KnownSpell
            && MySettings.UseGhostWolf && ObjectManager.Me.GetMove && !Ghost_Wolf.HaveBuff
            && ObjectManager.Target.GetDistance > 50)
        {
            Ghost_Wolf.Launch();
            return;
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            Keyboard.DownKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
            while (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
                Thread.Sleep(300);
            Keyboard.UpKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
        }
    }

    private void Defense_Cycle()
    {
        if (ObjectManager.Me.HealthPercent < 50 && Capacitor_Totem.KnownSpell && Capacitor_Totem.IsSpellUsable
            && AirTotemReady() && MySettings.UseCapacitorTotem)
        {
            Capacitor_Totem.Launch();
            OnCD = new Timer(1000*5);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 50 && Stone_Bulwark_Totem.KnownSpell &&
                 Stone_Bulwark_Totem.IsSpellUsable
                 && EarthTotemReady() && MySettings.UseStoneBulwarkTotem)
        {
            Stone_Bulwark_Totem.Launch();
            OnCD = new Timer(1000*10);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 70 && Spirit_Link_Totem.KnownSpell &&
                 Spirit_Link_Totem.IsSpellUsable
                 && AirTotemReady() && MySettings.UseSpiritLinkTotem)
        {
            Spirit_Link_Totem.Launch();
            OnCD = new Timer(1000*6);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseWarStompAtPercentage && War_Stomp.IsSpellUsable && War_Stomp.KnownSpell
                 && MySettings.UseWarStomp)
        {
            War_Stomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable && Stoneform.KnownSpell
                 && MySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent < 70 && Astral_Shift.KnownSpell && Astral_Shift.IsSpellUsable
                && MySettings.UseAstralShift)
            {
                Astral_Shift.Launch();
                OnCD = new Timer(1000*6);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell && ObjectManager.Me.HealthPercent <= MySettings.UseArcaneTorrentForResourceAtPercentage
                && MySettings.UseArcaneTorrentForResource)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else if (ObjectManager.Me.ManaPercentage < 50 && Totemic_Recall.KnownSpell && Totemic_Recall.IsSpellUsable
            && MySettings.UseTotemicRecall && ObjectManager.GetNumberAttackPlayer() == 0 && !Fight.InFight
            && TotemicRecallReady())
        {
            Totemic_Recall.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Me.ManaPercentage < 80 && Mana_Tide_Totem.KnownSpell && Mana_Tide_Totem.IsSpellUsable
                && MySettings.UseManaTideTotem && WaterTotemReady())
            {
                Mana_Tide_Totem.Launch();
                return;
            }
        }

        if (ObjectManager.Me.HealthPercent < 95 && Healing_Surge.KnownSpell && Healing_Surge.IsSpellUsable
            && ObjectManager.GetNumberAttackPlayer() == 0 && !Fight.InFight && MySettings.UseHealingSurge)
        {
            Healing_Surge.Launch();
            while (ObjectManager.Me.IsCast)
            {
                Thread.Sleep(200);
            }
            return;
        }
        else if (Healing_Surge.KnownSpell && Healing_Surge.IsSpellUsable && ObjectManager.Me.HealthPercent < 50
                 && MySettings.UseHealingSurge)
        {
            Healing_Surge.Launch();
            return;
        }
        else if (Greater_Healing_Wave.KnownSpell && Greater_Healing_Wave.IsSpellUsable
                 && ObjectManager.Me.HealthPercent < 60 && MySettings.UseGreaterHealingWave)
        {
            Greater_Healing_Wave.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseGiftoftheNaaruAtPercentage && Gift_of_the_Naaru.KnownSpell && Gift_of_the_Naaru.IsSpellUsable
                 && MySettings.UseGiftoftheNaaru)
        {
            Gift_of_the_Naaru.Launch();
            return;
        }
        else if (Healing_Tide_Totem.KnownSpell && Healing_Tide_Totem.IsSpellUsable && ObjectManager.Me.HealthPercent < 70
                 && WaterTotemReady() && MySettings.UseHealingTideTotem)
        {
            Healing_Tide_Totem.Launch();
            return;
        }
        else if (Ancestral_Guidance.KnownSpell && Ancestral_Guidance.IsSpellUsable &&
                 ObjectManager.Me.HealthPercent < 70
                 && MySettings.UseAncestralGuidance)
        {
            Ancestral_Guidance.Launch();
            return;
        }
        else if (Chain_Heal.KnownSpell && Chain_Heal.IsSpellUsable && ObjectManager.Me.HealthPercent < 80
                 && MySettings.UseChainHeal)
        {
            Chain_Heal.Launch();
            return;
        }
        else if (Healing_Stream_Totem.KnownSpell && Healing_Stream_Totem.IsSpellUsable &&
                 ObjectManager.Me.HealthPercent < 90
                 && WaterTotemReady() && MySettings.UseHealingStreamTotem)
        {
            Healing_Stream_Totem.Launch();
            return;
        }
        else if (Riptide.KnownSpell && Riptide.IsSpellUsable && ObjectManager.Me.HealthPercent < 90
                 && MySettings.UseRiptide && !Riptide.HaveBuff)
        {
            Riptide.Launch();
            return;
        }
        else
        {
            if (Healing_Wave.KnownSpell && Healing_Wave.IsSpellUsable && ObjectManager.Me.HealthPercent < 80
                && MySettings.UseHealingWave)
            {
                Healing_Wave.Launch();
                return;
            }
        }
    }

    private void Decast()
    {
        if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && MySettings.UseWindShear
            && Wind_Shear.KnownSpell && Wind_Shear.IsSpellUsable && Wind_Shear.IsDistanceGood)
        {
            Wind_Shear.Launch();
            return;
        }
        else if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell && ObjectManager.Target.GetDistance < 8
                && ObjectManager.Me.HealthPercent <= MySettings.UseArcaneTorrentForDecastAtPercentage
                && MySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && MySettings.UseGroundingTotem
                && Grounding_Totem.KnownSpell && Grounding_Totem.IsSpellUsable && AirTotemReady())
            {
                Grounding_Totem.Launch();
                return;
            }
        }

        if (ObjectManager.Target.GetMove && !Frost_Shock.TargetHaveBuff && MySettings.UseFrostShock
            && Frost_Shock.KnownSpell && Frost_Shock.IsSpellUsable && Frost_Shock.IsDistanceGood)
        {
            Frost_Shock.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.GetMove && MySettings.UseEarthbindTotem && EarthTotemReady()
                && Earthbind_Totem.KnownSpell && Earthbind_Totem.IsSpellUsable && Earthbind_Totem.IsDistanceGood)
            {
                Earthbind_Totem.Launch();
                return;
            }
        }
    }

    private void DPS_Burst()
    {
        if (MySettings.UseTrinket && Trinket_Timer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Trinket_Timer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBerserking)
            Berserking.Launch();
        else if (Blood_Fury.IsSpellUsable && Blood_Fury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBloodFury)
            Blood_Fury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (Engineering_Timer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                && MySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            Engineering_Timer = new Timer(1000*60);
        }
        else if (Unleash_Elements.KnownSpell && Unleash_Elements.IsSpellUsable && Unleashed_Fury.KnownSpell
                 && MySettings.UseUnleashElements && Unleash_Elements.IsDistanceGood)
        {
            Unleash_Elements.Launch();
            return;
        }
        else if (Elemental_Blast.KnownSpell && Elemental_Blast.IsSpellUsable
                 && MySettings.UseElementalBlast && Elemental_Blast.IsDistanceGood)
        {
            Elemental_Blast.Launch();
            return;
        }
        else if (Ascendance.KnownSpell && Ascendance.IsSpellUsable && ObjectManager.Me.HealthPercent < 80
                 && MySettings.UseAscendance && ObjectManager.Target.GetDistance < 40)
        {
            Ascendance.Launch();
            return;
        }
        else if (Fire_Elemental_Totem.KnownSpell && Fire_Elemental_Totem.IsSpellUsable
                 && MySettings.UseFireElementalTotem && ObjectManager.Target.GetDistance < 40)
        {
            Fire_Elemental_Totem.Launch();
            return;
        }
        else if (Stormlash_Totem.KnownSpell && AirTotemReady()
                 && MySettings.UseStormlashTotem && ObjectManager.Target.GetDistance < 40)
        {
            if (!Stormlash_Totem.IsSpellUsable && MySettings.UseCalloftheElements
                && Call_of_the_Elements.KnownSpell && Call_of_the_Elements.IsSpellUsable)
            {
                Call_of_the_Elements.Launch();
                Thread.Sleep(200);
            }

            if (Stormlash_Totem.IsSpellUsable)
                Stormlash_Totem.Launch();
            return;
        }
        else if (Bloodlust.KnownSpell && Bloodlust.IsSpellUsable && MySettings.UseBloodlustHeroism
                 && ObjectManager.Target.GetDistance < 40 && !ObjectManager.Me.HaveBuff(57724))
        {
            Bloodlust.Launch();
            return;
        }

        else if (Heroism.KnownSpell && Heroism.IsSpellUsable && MySettings.UseBloodlustHeroism
                 && ObjectManager.Target.GetDistance < 40 && !ObjectManager.Me.HaveBuff(57723))
        {
            Heroism.Launch();
            return;
        }
        else
        {
            if (Elemental_Mastery.KnownSpell && Elemental_Mastery.IsSpellUsable
                && !ObjectManager.Me.HaveBuff(2825) && MySettings.UseElementalMastery
                && !ObjectManager.Me.HaveBuff(32182))
            {
                Elemental_Mastery.Launch();
                return;
            }
        }
    }

    private void DPS_Cycle()
    {
        if (Primal_Strike.KnownSpell && Primal_Strike.IsSpellUsable && Primal_Strike.IsDistanceGood
            && MySettings.UsePrimalStrike && ObjectManager.Me.Level < 11)
        {
            Primal_Strike.Launch();
            return;
        }

        if (Earth_Elemental_Totem.KnownSpell && Earth_Elemental_Totem.IsSpellUsable
                 && ObjectManager.GetNumberAttackPlayer() > 3 && MySettings.UseEarthElementalTotem)
        {
            Earth_Elemental_Totem.Launch();
            return;
        }
        else if (Flame_Shock.IsSpellUsable && Flame_Shock.IsDistanceGood && Flame_Shock.KnownSpell
                 && MySettings.UseFlameShock && (!Flame_Shock.TargetHaveBuff || Flame_Shock_Timer.IsReady))
        {
            Flame_Shock.Launch();
            Flame_Shock_Timer = new Timer(1000*27);
            return;
        }
        else if (Lava_Burst.KnownSpell && Lava_Burst.IsSpellUsable && Lava_Burst.IsDistanceGood
                 && MySettings.UseLavaBurst && Flame_Shock.TargetHaveBuff)
        {
            Lava_Burst.Launch();
            return;
        }
        else if (Earth_Shock.IsSpellUsable && Earth_Shock.KnownSpell && Earth_Shock.IsDistanceGood
                 && MySettings.UseEarthShock && Flame_Shock.TargetHaveBuff)
        {
            Earth_Shock.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 1 && Magma_Totem.KnownSpell
                 && Magma_Totem.IsSpellUsable && MySettings.UseMagmaTotem
                 && !Fire_Elemental_Totem.CreatedBySpell)
        {
            Magma_Totem.Launch();
            return;
        }
        if (Searing_Totem.KnownSpell && Searing_Totem.IsSpellUsable && MySettings.UseSearingTotem
            && FireTotemReady() && !Searing_Totem.CreatedBySpellInRange(25) && ObjectManager.Target.GetDistance < 31)
        {
            Searing_Totem.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 1 && Chain_Lightning.KnownSpell
                 && Chain_Lightning.IsSpellUsable && Chain_Lightning.IsDistanceGood
                 && MySettings.UseChainLightning && !ObjectManager.Me.HaveBuff(77762))
        {
            if (Ancestral_Swiftness.KnownSpell && Ancestral_Swiftness.IsSpellUsable
                && MySettings.UseAncestralSwiftness)
            {
                Ancestral_Swiftness.Launch();
                Thread.Sleep(200);
            }
            Chain_Lightning.Launch();
            return;
        }
        else
        {
            if (Lightning_Bolt.IsDistanceGood && Lightning_Bolt.KnownSpell && Lightning_Bolt.IsSpellUsable
                && MySettings.UseLightningBolt && !ObjectManager.Me.HaveBuff(77762))
            {
                if (Ancestral_Swiftness.KnownSpell && Ancestral_Swiftness.IsSpellUsable
                    && MySettings.UseAncestralSwiftness)
                {
                    Ancestral_Swiftness.Launch();
                    Thread.Sleep(200);
                }
                Lightning_Bolt.Launch();
                return;
            }
        }
    }

    private bool FireTotemReady()
    {
        if (Fire_Elemental_Totem.CreatedBySpell || Magma_Totem.CreatedBySpell)
            return false;
        return true;
    }

    private bool EarthTotemReady()
    {
        if (Earthbind_Totem.CreatedBySpell || Earth_Elemental_Totem.CreatedBySpell
            || Stone_Bulwark_Totem.CreatedBySpell)
            return false;
        return true;
    }

    private bool WaterTotemReady()
    {
        if (Healing_Stream_Totem.CreatedBySpell || Healing_Tide_Totem.CreatedBySpell
            || Mana_Tide_Totem.CreatedBySpell)
            return false;
        return true;
    }

    private bool AirTotemReady()
    {
        if (Capacitor_Totem.CreatedBySpell || Grounding_Totem.CreatedBySpell
            || Stormlash_Totem.CreatedBySpell || Spirit_Link_Totem.CreatedBySpell)
            return false;
        return true;
    }

    private bool TotemicRecallReady()
    {
        if (Fire_Elemental_Totem.CreatedBySpell)
            return false;
        else if (Earth_Elemental_Totem.CreatedBySpell)
            return false;
        else if (Searing_Totem.CreatedBySpell)
            return true;
        else if (FireTotemReady() && EarthTotemReady() && WaterTotemReady() && AirTotemReady())
            return false;
        else
            return true;
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: ShamanRestorationSettings

    [Serializable]
    public class ShamanRestorationSettings : Settings
    {
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public int UseStoneformAtPercentage = 80;
        public int UseWarStompAtPercentage = 80;
        public bool UseAlchFlask = true;
        public bool UseAncestralGuidance = true;
        public bool UseAncestralSwiftness = true;
        public bool UseArcaneTorrentForDecast = true;
        public bool UseArcaneTorrentForResource = true;
        public bool UseAscendance = true;
        public bool UseAstralShift = true;
        public bool UseBerserking = true;
        public bool UseBloodFury = true;
        public bool UseBloodlustHeroism = true;
        public bool UseCalloftheElements = true;
        public bool UseCapacitorTotem = true;
        public bool UseChainHeal = false;
        public bool UseChainLightning = true;
        public bool UseEarthElementalTotem = true;
        public bool UseEarthShield = true;
        public bool UseEarthShock = true;
        public bool UseEarthbindTotem = false;
        public bool UseEarthlivingWeapon = true;
        public bool UseElementalBlast = true;
        public bool UseElementalMastery = true;
        public bool UseEngGlove = true;
        public bool UseFireElementalTotem = true;
        public bool UseFlameShock = true;
        public bool UseFlametongueWeapon = true;
        public bool UseFrostShock = false;
        public bool UseFrostbrandWeapon = false;
        public bool UseGhostWolf = true;
        public bool UseGiftoftheNaaru = true;
        public bool UseGreaterHealingWave = true;
        public bool UseGroundingTotem = true;
        public bool UseHealingRain = true;
        public bool UseHealingStreamTotem = true;
        public bool UseHealingSurge = true;
        public bool UseHealingTideTotem = true;
        public bool UseHealingWave = false;
        public bool UseLavaBurst = true;
        public bool UseLifeblood = true;
        public bool UseLightningBolt = true;
        public bool UseLightningShield = true;
        public bool UseLowCombat = true;
        public bool UseMagmaTotem = true;
        public bool UseManaTideTotem = true;
        public bool UsePrimalStrike = true;
        public bool UseRiptide = true;
        public bool UseRockbiterWeapon = false;
        public bool UseSearingTotem = true;
        public bool UseSpiritLinkTotem = true;
        public bool UseSpiritwalkersGrace = true;
        public bool UseStoneBulwarkTotem = true;
        public bool UseStoneform = true;
        public bool UseStormlashTotem = true;
        public bool UseTotemicProjection = true;
        public bool UseTotemicRecall = true;
        public bool UseTrinket = true;
        public bool UseUnleashElements = true;
        public bool UseWarStomp = true;
        public bool UseWaterShield = true;
        public bool UseWaterWalking = true;
        public bool UseWindShear = true;

        public ShamanRestorationSettings()
        {
            ConfigWinForm(new Point(500, 400), "Shaman Restoration Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrent", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Shaman Buffs */
            AddControlInWinForm("Use Earth Shield", "UseEarthShield", "Shaman Buffs");
            AddControlInWinForm("Use Earthliving Weapon", "UseEarthlivingWeapon", "Shaman Buffs");
            AddControlInWinForm("Use Flametongue Weapon", "UseFlametongueWeapon", "Shaman Buffs");
            AddControlInWinForm("Use Frostbrand Weapon", "UseFrostbrandWeapon", "Shaman Buffs");
            AddControlInWinForm("Use Ghost Wolf", "UseGhostWolf", "Shaman Buffs");
            AddControlInWinForm("Use Lightning Shield", "UseLightningShield", "Shaman Buffs");
            AddControlInWinForm("Use Rockbiter Weapon", "UseRockbiterWeapon", "Shaman Buffs");
            AddControlInWinForm("Use Spiritwalker's Grace", "UseSpiritwalkersGrace", "Shaman Buffs");
            AddControlInWinForm("Use Water Shield", "UseWaterShield", "Shaman Buffs");
            AddControlInWinForm("Use Water Walking", "UseWaterWalking", "Shaman Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Chain Lightning", "UseChainLightning", "Offensive Spell");
            AddControlInWinForm("Use Earth Shock", "UseEarthShock", "Offensive Spell");
            AddControlInWinForm("Use Flame Shock", "UseFlameShock", "Offensive Spell");
            AddControlInWinForm("Use Frost Shock", "UseFrostShock", "Offensive Spell");
            AddControlInWinForm("Use Lava Burst", "UseLavaBurst", "Offensive Spell");
            AddControlInWinForm("Use Lightning Bolt", "UseLightningBolt", "Offensive Spell");
            AddControlInWinForm("Use Magma Totem", "UseMagmaTotem", "Offensive Spell");
            AddControlInWinForm("Use Searing Totem", "UseSearingTotem", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Ancestral Swiftness", "UseAncestralSwiftness", "Offensive Cooldown");
            AddControlInWinForm("Use Ascendance", "UseAscendance", "Offensive Cooldown");
            AddControlInWinForm("Use Bloodlust / Heroism", "UseBloodlustHeroism", "Offensive Cooldown");
            AddControlInWinForm("Use Call of the Elements", "UseCalloftheElements", "Offensive Cooldown");
            AddControlInWinForm("Use Earth Elemental Totem", "UseEarthElementalTotem", "Offensive Cooldown");
            AddControlInWinForm("Use Elemental Blast", "UseElementalBlast", "Offensive Cooldown");
            AddControlInWinForm("Use Elemental Mastery", "UseElementalMastery", "Offensive Cooldown");
            AddControlInWinForm("Use Fire Elemental Totem", "UseFireElementalTotem", "Offensive Cooldown");
            AddControlInWinForm("Use Stormlash Totem", "UseStormlashTotem", "Offensive Cooldown");
            AddControlInWinForm("Use Totemic Projection", "UseTotemicProjection", "Offensive Cooldown");
            AddControlInWinForm("Use Unleash Elements", "UseUnleashElements", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Astral Shift", "UseAstralShift", "Defensive Cooldown");
            AddControlInWinForm("Use Capacitor Totem", "UseCapacitorTotem", "Defensive Cooldown");
            AddControlInWinForm("Use Earthbind Totem", "UseEarthbindTotem", "Defensive Cooldown");
            AddControlInWinForm("Use Grounding Totem", "UseGroundingTotem", "Defensive Cooldown");
            AddControlInWinForm("Use StoneBulwark Totem", "UseStoneBulwarkTotem", "Defensive Cooldown");
            AddControlInWinForm("Use Wind Shear", "UseWindShear", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Ancestral Guidance", "UseAncestralGuidance", "Healing Spell");
            AddControlInWinForm("Use Chain Heal", "UseChainHeal", "Healing Spell");
            AddControlInWinForm("Use Greater Healing Wave", "UseGreaterHealingWave", "Healing Spell");
            AddControlInWinForm("Use Healing Rain", "UseHealingRain", "Healing Spell");
            AddControlInWinForm("Use Healing Surge", "UseHealingSurge", "Healing Spell");
            AddControlInWinForm("Use Healing Stream Totem", "UseHealingStream_Totem", "Healing Spell");
            AddControlInWinForm("Use Healing Tide Totem", "UsHealingTideTotem", "Healing Spell");
            AddControlInWinForm("Use Healing Wave", "UseHealingWave", "Healing Spell");
            AddControlInWinForm("Use Mana Tide Totem", "UseManaTideTotem", "Healing Spell");
            AddControlInWinForm("Use Riptide", "UseRiptide", "Healing Spell");
            AddControlInWinForm("Use Spirit Link Totem", "UseSpiritLinkTotem", "Healing Spell");
            AddControlInWinForm("Use Totemic Recall", "UseTotemicRecall", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket", "UseTrinket", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
        }

        public static ShamanRestorationSettings CurrentSetting { get; set; }

        public static ShamanRestorationSettings GetSettings()
        {
            string CurrentSettingsFile = Application.StartupPath + "\\CustomClasses\\Settings\\Shaman_Restoration.xml";
            if (File.Exists(CurrentSettingsFile))
            {
                return
                    CurrentSetting = Load<ShamanRestorationSettings>(CurrentSettingsFile);
            }
            else
            {
                return new ShamanRestorationSettings();
            }
        }
    }

    #endregion
}

public class Shaman_Elemental
{
    private readonly ShamanElementalSettings MySettings = ShamanElementalSettings.GetSettings();
    private readonly string MoveBackward = nManager.Wow.Helpers.Keybindings.GetKeyByAction(nManager.Wow.Enums.Keybindings.MOVEBACKWARD);

    #region General Timers & Variables

    private Timer AlchFlask_Timer = new Timer(0);
    private Timer Engineering_Timer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer Trinket_Timer = new Timer(0);
    public int LC = 0;

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell Arcane_Torrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell Blood_Fury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell Gift_of_the_Naaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell War_Stomp = new Spell("War Stomp");

    #endregion

    #region Shaman Buffs

    private readonly Spell Flametongue_Weapon = new Spell("Flametongue Weapon");
    private readonly Spell Frostbrand_Weapon = new Spell("Frostbrand Weapon");
    private readonly Spell Ghost_Wolf = new Spell("Ghost Wolf");
    private readonly Spell Lightning_Shield = new Spell("Lightning Shield");
    private readonly Spell Rockbiter_Weapon = new Spell("Rockbiter Weapon");
    private readonly Spell Spiritwalkers_Grace = new Spell("Spiritwalker's Grace");
    private readonly Spell Water_Shield = new Spell("Water Shield");
    private readonly Spell Water_Walking = new Spell("Water Walking");
    private Timer Water_Walking_Timer = new Timer(0);

    #endregion

    #region Offensive Spell

    private readonly Spell Chain_Lightning = new Spell("Chain Lightning");
    private readonly Spell Earth_Shock = new Spell("Earth Shock");
    private readonly Spell Earthquake = new Spell("Earthquake");
    private readonly Spell Flame_Shock = new Spell("Flame Shock");
    private readonly Spell Frost_Shock = new Spell("Frost Shock");
    private readonly Spell Lava_Burst = new Spell("Lava Burst");
    private readonly Spell Lightning_Bolt = new Spell("Lightning Bolt");
    private readonly Spell Magma_Totem = new Spell("Magma Totem");
    private readonly Spell Searing_Totem = new Spell("Searing Totem");
    private readonly Spell Thunderstorm = new Spell("Thunderstorm");
    private Timer Flame_Shock_Timer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell Ancestral_Swiftness = new Spell("Ancestral Swiftness");
    private readonly Spell Ascendance = new Spell("Ascendance");
    private readonly Spell Bloodlust = new Spell("Bloodlust");
    private readonly Spell Call_of_the_Elements = new Spell("Call of the Elements");
    private readonly Spell Earth_Elemental_Totem = new Spell("Earth Elemental Totem");
    private readonly Spell Elemental_Blast = new Spell("Elemental Blast");
    private readonly Spell Elemental_Mastery = new Spell("Elemental Mastery");
    private readonly Spell Fire_Elemental_Totem = new Spell("Fire Elemental Totem");
    private readonly Spell Heroism = new Spell("Heroism");
    private readonly Spell Stormlash_Totem = new Spell("Stormlash Totem");
    private readonly Spell Totemic_Projection = new Spell("Totemic Projection");
    private readonly Spell Unleash_Elements = new Spell("Unleash Elements");
    private readonly Spell Unleashed_Fury = new Spell("Unleashed Fury");

    #endregion

    #region Defensive Cooldown

    private readonly Spell Astral_Shift = new Spell("Astral Shift");
    private readonly Spell Capacitor_Totem = new Spell("Capacitor Totem");
    private readonly Spell Earthbind_Totem = new Spell("Earthbind Totem");
    private readonly Spell Grounding_Totem = new Spell("Grounding Totem");
    private readonly Spell Stone_Bulwark_Totem = new Spell("Stone Bulwark Totem");
    private readonly Spell Wind_Shear = new Spell("Wind Shear");

    #endregion

    #region Healing Spell

    private readonly Spell Ancestral_Guidance = new Spell("Ancestral Guidance");
    private readonly Spell Chain_Heal = new Spell("Chain Heal");
    private readonly Spell Healing_Rain = new Spell("Healing Rain");
    private readonly Spell Healing_Stream_Totem = new Spell("Healing Stream Totem");
    private readonly Spell Healing_Surge = new Spell("Healing Surge");
    private readonly Spell Healing_Tide_Totem = new Spell("Healing Tide Totem");
    private readonly Spell Totemic_Recall = new Spell("Totemic Recall");

    #endregion

    public Shaman_Elemental()
    {
        Main.range = 30.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget && Flame_Shock.IsDistanceGood)
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && MySettings.UseLowCombat)
                            {
                                LC = 1;
                                LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void Pull()
    {
        if (Totemic_Projection.KnownSpell && Totemic_Projection.IsSpellUsable && MySettings.UseTotemicProjection)
            Totemic_Projection.Launch();

        if (Flame_Shock.KnownSpell && Flame_Shock.IsSpellUsable && Flame_Shock.IsDistanceGood
            && MySettings.UseFlameShock && LC != 1)
        {
            Flame_Shock.Launch();
            return;
        }
        else
        {
            if (Earth_Shock.KnownSpell && Earth_Shock.IsSpellUsable && Earth_Shock.IsDistanceGood
                && MySettings.UseEarthShock)
            {
                Earth_Shock.Launch();
                return;
            }
        }
    }

    private void LowCombat()
    {
        Buff();
        AvoidMelee();
        Defense_Cycle();
        Heal();

        if (Earth_Shock.KnownSpell && Earth_Shock.IsSpellUsable && Earth_Shock.IsDistanceGood
            && MySettings.UseEarthShock)
        {
            Earth_Shock.Launch();
            return;
        }
        else if (Lava_Burst.KnownSpell && Lava_Burst.IsSpellUsable && Lava_Burst.IsDistanceGood
                 && MySettings.UseLavaBurst)
        {
            Lava_Burst.Launch();
            return;
        }
        else if (Chain_Lightning.KnownSpell && Chain_Lightning.IsSpellUsable && Chain_Lightning.IsDistanceGood
                 && MySettings.UseChainLightning)
        {
            Chain_Lightning.Launch();
            return;
        }
        else
        {
            if (Searing_Totem.KnownSpell && Searing_Totem.IsSpellUsable && MySettings.UseSearingTotem
                && FireTotemReady() && !Searing_Totem.CreatedBySpellInRange(25) && ObjectManager.Target.GetDistance < 31)
            {
                Searing_Totem.Launch();
                return;
            }
        }

        if (Magma_Totem.KnownSpell && Magma_Totem.IsSpellUsable && ObjectManager.Target.GetDistance < 8
            && MySettings.UseMagmaTotem && FireTotemReady())
        {
            Magma_Totem.Launch();
            return;
        }
    }

    private void Combat()
    {
        Buff();
        AvoidMelee();
        if (OnCD.IsReady)
            Defense_Cycle();
        Heal();
        Decast();
        DPS_Burst();
        DPS_Cycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (Water_Walking.IsSpellUsable && Water_Walking.KnownSpell &&
            (!Water_Walking.HaveBuff || Water_Walking_Timer.IsReady)
            && ObjectManager.GetNumberAttackPlayer() == 0 && !Fight.InFight && MySettings.UseWaterWalking)
        {
            Water_Walking.Launch();
            Water_Walking_Timer = new Timer(1000*60*9);
            return;
        }
        else if ((ObjectManager.Me.ManaPercentage < 5 && Water_Shield.KnownSpell && Water_Shield.IsSpellUsable
                  && MySettings.UseWaterShield && !Water_Shield.HaveBuff) || !MySettings.UseLightningShield)
        {
            Water_Shield.Launch();
            return;
        }
        else if (Lightning_Shield.KnownSpell && Lightning_Shield.IsSpellUsable && !Lightning_Shield.HaveBuff
                 && MySettings.UseLightningShield && ObjectManager.Me.ManaPercentage > 15)
        {
            Lightning_Shield.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 0 && Spiritwalkers_Grace.IsSpellUsable
                 && Spiritwalkers_Grace.KnownSpell && MySettings.UseSpiritwalkersGrace && ObjectManager.Me.GetMove)
        {
            Spiritwalkers_Grace.Launch();
            return;
        }
        else
        {
            if (Flametongue_Weapon.KnownSpell && Flametongue_Weapon.IsSpellUsable && !ObjectManager.Me.HaveBuff(10400)
                && MySettings.UseFlametongueWeapon)
            {
                Flametongue_Weapon.Launch();
                return;
            }
            else if (Frostbrand_Weapon.KnownSpell && Frostbrand_Weapon.IsSpellUsable && !ObjectManager.Me.HaveBuff(8034)
                     && MySettings.UseFrostbrandWeapon && !MySettings.UseFlametongueWeapon)
            {
                Frostbrand_Weapon.Launch();
                return;
            }
            else
            {
                if (Rockbiter_Weapon.KnownSpell && Rockbiter_Weapon.IsSpellUsable && !ObjectManager.Me.HaveBuff(36494)
                    && MySettings.UseRockbiterWeapon && !MySettings.UseFlametongueWeapon
                    && !MySettings.UseFrostbrandWeapon)
                {
                    Rockbiter_Weapon.Launch();
                    return;
                }
            }
        }

        if (ObjectManager.GetNumberAttackPlayer() == 0 && Ghost_Wolf.IsSpellUsable && Ghost_Wolf.KnownSpell
            && MySettings.UseGhostWolf && ObjectManager.Me.GetMove && !Ghost_Wolf.HaveBuff
            && ObjectManager.Target.GetDistance > 50)
        {
            Ghost_Wolf.Launch();
            return;
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            Keyboard.DownKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
            while (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
                Thread.Sleep(300);
            Keyboard.UpKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
        }
    }

    private void Defense_Cycle()
    {
        if (ObjectManager.Me.HealthPercent < 50 && Capacitor_Totem.KnownSpell && Capacitor_Totem.IsSpellUsable
            && AirTotemReady() && MySettings.UseCapacitorTotem)
        {
            Capacitor_Totem.Launch();
            OnCD = new Timer(1000*5);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 50 && Stone_Bulwark_Totem.KnownSpell &&
                 Stone_Bulwark_Totem.IsSpellUsable
                 && EarthTotemReady() && MySettings.UseStoneBulwarkTotem)
        {
            Stone_Bulwark_Totem.Launch();
            OnCD = new Timer(1000*10);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseWarStompAtPercentage && War_Stomp.IsSpellUsable && War_Stomp.KnownSpell
                 && MySettings.UseWarStomp)
        {
            War_Stomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable && Stoneform.KnownSpell
                 && MySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent < 70 && Astral_Shift.KnownSpell && Astral_Shift.IsSpellUsable
                && MySettings.UseAstralShift)
            {
                Astral_Shift.Launch();
                OnCD = new Timer(1000*6);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell && ObjectManager.Me.HealthPercent <= MySettings.UseArcaneTorrentForResourceAtPercentage
                && MySettings.UseArcaneTorrentForResource)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Me.ManaPercentage < 50 && Totemic_Recall.KnownSpell && Totemic_Recall.IsSpellUsable
                && MySettings.UseTotemicRecall && ObjectManager.GetNumberAttackPlayer() == 0 && !Fight.InFight
                && TotemicRecallReady())
            {
                Totemic_Recall.Launch();
                return;
            }
        }

        if (ObjectManager.Me.HealthPercent < 95 && Healing_Surge.KnownSpell && Healing_Surge.IsSpellUsable
            && ObjectManager.GetNumberAttackPlayer() == 0 && !Fight.InFight && MySettings.UseHealingSurge)
        {
            Healing_Surge.Launch();
            while (ObjectManager.Me.IsCast)
            {
                Thread.Sleep(200);
            }
            return;
        }
        else if (Healing_Surge.KnownSpell && Healing_Surge.IsSpellUsable && ObjectManager.Me.HealthPercent < 50
                 && MySettings.UseHealingSurge)
        {
            Healing_Surge.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseGiftoftheNaaruAtPercentage && Gift_of_the_Naaru.KnownSpell && Gift_of_the_Naaru.IsSpellUsable
                 && MySettings.UseGiftoftheNaaru)
        {
            Gift_of_the_Naaru.Launch();
            return;
        }
        else if (Healing_Tide_Totem.KnownSpell && Healing_Tide_Totem.IsSpellUsable && ObjectManager.Me.HealthPercent < 70
                 && WaterTotemReady() && MySettings.UseHealingTideTotem)
        {
            Healing_Tide_Totem.Launch();
            return;
        }
        else if (Ancestral_Guidance.KnownSpell && Ancestral_Guidance.IsSpellUsable &&
                 ObjectManager.Me.HealthPercent < 70
                 && MySettings.UseAncestralGuidance)
        {
            Ancestral_Guidance.Launch();
            return;
        }
        else if (Chain_Heal.KnownSpell && Chain_Heal.IsSpellUsable && ObjectManager.Me.HealthPercent < 80
                 && MySettings.UseChainHeal)
        {
            Chain_Heal.Launch();
            return;
        }
        else
        {
            if (Healing_Stream_Totem.KnownSpell && Healing_Stream_Totem.IsSpellUsable &&
                ObjectManager.Me.HealthPercent < 90
                && WaterTotemReady() && MySettings.UseHealingStreamTotem)
            {
                Healing_Stream_Totem.Launch();
                return;
            }
        }
    }

    private void Decast()
    {
        if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && MySettings.UseWindShear
            && Wind_Shear.KnownSpell && Wind_Shear.IsSpellUsable && Wind_Shear.IsDistanceGood)
        {
            Wind_Shear.Launch();
            return;
        }
        else if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell && ObjectManager.Target.GetDistance < 8
                 && ObjectManager.Me.HealthPercent <= MySettings.UseArcaneTorrentForDecastAtPercentage
                 && MySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && MySettings.UseGroundingTotem
                && Grounding_Totem.KnownSpell && Grounding_Totem.IsSpellUsable && AirTotemReady())
            {
                Grounding_Totem.Launch();
                return;
            }
        }

        if (ObjectManager.Target.GetMove && !Frost_Shock.TargetHaveBuff && MySettings.UseFrostShock
            && Frost_Shock.KnownSpell && Frost_Shock.IsSpellUsable && Frost_Shock.IsDistanceGood)
        {
            Frost_Shock.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.GetMove && MySettings.UseEarthbindTotem && EarthTotemReady()
                && Earthbind_Totem.KnownSpell && Earthbind_Totem.IsSpellUsable && Earthbind_Totem.IsDistanceGood)
            {
                Earthbind_Totem.Launch();
                return;
            }
        }
    }

    private void DPS_Burst()
    {
        if (MySettings.UseTrinket && Trinket_Timer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Trinket_Timer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBerserking)
            Berserking.Launch();
        else if (Blood_Fury.IsSpellUsable && Blood_Fury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBloodFury)
            Blood_Fury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (Engineering_Timer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                && MySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            Engineering_Timer = new Timer(1000*60);
        }
        else if (Unleash_Elements.KnownSpell && Unleash_Elements.IsSpellUsable && Unleashed_Fury.KnownSpell
                 && MySettings.UseUnleashElements && Unleash_Elements.IsDistanceGood)
        {
            Unleash_Elements.Launch();
            return;
        }
        else if (Elemental_Blast.KnownSpell && Elemental_Blast.IsSpellUsable
                 && MySettings.UseElementalBlast && Elemental_Blast.IsDistanceGood)
        {
            Elemental_Blast.Launch();
            return;
        }
        else if (Ascendance.KnownSpell && Ascendance.IsSpellUsable
                 && MySettings.UseAscendance && ObjectManager.Target.GetDistance < 40)
        {
            Ascendance.Launch();
            return;
        }
        else if (Fire_Elemental_Totem.KnownSpell && Fire_Elemental_Totem.IsSpellUsable
                 && MySettings.UseFireElementalTotem && ObjectManager.Target.GetDistance < 40)
        {
            Fire_Elemental_Totem.Launch();
            return;
        }
        else if (Stormlash_Totem.KnownSpell && AirTotemReady()
                 && MySettings.UseStormlashTotem && ObjectManager.Target.GetDistance < 40)
        {
            if (!Stormlash_Totem.IsSpellUsable && MySettings.UseCalloftheElements
                && Call_of_the_Elements.KnownSpell && Call_of_the_Elements.IsSpellUsable)
            {
                Call_of_the_Elements.Launch();
                Thread.Sleep(200);
            }

            if (Stormlash_Totem.IsSpellUsable)
                Stormlash_Totem.Launch();
            return;
        }
        else if (Bloodlust.KnownSpell && Bloodlust.IsSpellUsable && MySettings.UseBloodlustHeroism
                 && ObjectManager.Target.GetDistance < 40 && !ObjectManager.Me.HaveBuff(57724))
        {
            Bloodlust.Launch();
            return;
        }

        else if (Heroism.KnownSpell && Heroism.IsSpellUsable && MySettings.UseBloodlustHeroism
                 && ObjectManager.Target.GetDistance < 40 && !ObjectManager.Me.HaveBuff(57723))
        {
            Heroism.Launch();
            return;
        }
        else
        {
            if (Elemental_Mastery.KnownSpell && Elemental_Mastery.IsSpellUsable
                && !ObjectManager.Me.HaveBuff(2825) && MySettings.UseElementalMastery
                && !ObjectManager.Me.HaveBuff(32182))
            {
                Elemental_Mastery.Launch();
                return;
            }
        }
    }

    private void DPS_Cycle()
    {
        if (ObjectManager.Me.ManaPercentage < 80 && Thunderstorm.KnownSpell && Thunderstorm.IsSpellUsable
                 && MySettings.UseThunderstorm)
        {
            Thunderstorm.Launch();
            return;
        }
        else if (Earth_Elemental_Totem.KnownSpell && Earth_Elemental_Totem.IsSpellUsable
                 && ObjectManager.GetNumberAttackPlayer() > 3 && MySettings.UseEarthElementalTotem)
        {
            Earth_Elemental_Totem.Launch();
            return;
        }
        else if (Thunderstorm.KnownSpell && Thunderstorm.IsSpellUsable && ObjectManager.Target.GetDistance < 10
                 && ObjectManager.GetNumberAttackPlayer() > 5 && MySettings.UseThunderstorm)
        {
            Thunderstorm.Launch();
            return;
        }
        else if (Earthquake.KnownSpell && Earthquake.IsSpellUsable && Earthquake.IsDistanceGood
                 && ObjectManager.GetNumberAttackPlayer() > 5 && MySettings.UseEarthquake)
        {
            SpellManager.CastSpellByIDAndPosition(61882, ObjectManager.Target.Position);
            return;
        }
        else if (Flame_Shock.IsSpellUsable && Flame_Shock.IsDistanceGood && Flame_Shock.KnownSpell
                 && MySettings.UseFlameShock && (!Flame_Shock.TargetHaveBuff || Flame_Shock_Timer.IsReady))
        {
            Flame_Shock.Launch();
            Flame_Shock_Timer = new Timer(1000*27);
            return;
        }
        else if (Lava_Burst.KnownSpell && Lava_Burst.IsSpellUsable && Lava_Burst.IsDistanceGood
                 && MySettings.UseLavaBurst && Flame_Shock.TargetHaveBuff)
        {
            Lava_Burst.Launch();
            return;
        }
        else if (Earth_Shock.IsSpellUsable && Earth_Shock.KnownSpell && Earth_Shock.IsDistanceGood
                 && MySettings.UseEarthShock && Lightning_Shield.BuffStack > 4)
        {
            Earth_Shock.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 1 && Magma_Totem.KnownSpell
                 && Magma_Totem.IsSpellUsable && MySettings.UseMagmaTotem
                 && !Fire_Elemental_Totem.CreatedBySpell)
        {
            Magma_Totem.Launch();
            return;
        }
        else if (Searing_Totem.KnownSpell && Searing_Totem.IsSpellUsable && MySettings.UseSearingTotem
                 && FireTotemReady() && !Searing_Totem.CreatedBySpellInRange(25) &&
                 ObjectManager.Target.GetDistance < 31)
        {
            Searing_Totem.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 1 && Chain_Lightning.KnownSpell
                 && Chain_Lightning.IsSpellUsable && Chain_Lightning.IsDistanceGood && MySettings.UseChainLightning
                 && Lightning_Shield.BuffStack < 6)
        {
            if (Ancestral_Swiftness.KnownSpell && Ancestral_Swiftness.IsSpellUsable
                && MySettings.UseAncestralSwiftness)
            {
                Ancestral_Swiftness.Launch();
                Thread.Sleep(200);
            }
            Chain_Lightning.Launch();
            return;
        }
        else
        {
            if (Lightning_Bolt.IsDistanceGood && Lightning_Bolt.KnownSpell && Lightning_Bolt.IsSpellUsable
                && MySettings.UseLightningBolt && Lightning_Shield.BuffStack < 6)
            {
                if (Ancestral_Swiftness.KnownSpell && Ancestral_Swiftness.IsSpellUsable
                    && MySettings.UseAncestralSwiftness)
                {
                    Ancestral_Swiftness.Launch();
                    Thread.Sleep(200);
                }
                Lightning_Bolt.Launch();
                return;
            }
        }
    }

    private bool FireTotemReady()
    {
        if (Fire_Elemental_Totem.CreatedBySpell || Magma_Totem.CreatedBySpell)
            return false;
        return true;
    }

    private bool EarthTotemReady()
    {
        if (Earthbind_Totem.CreatedBySpell || Earth_Elemental_Totem.CreatedBySpell
            || Stone_Bulwark_Totem.CreatedBySpell)
            return false;
        return true;
    }

    private bool WaterTotemReady()
    {
        if (Healing_Stream_Totem.CreatedBySpell || Healing_Tide_Totem.CreatedBySpell)
            return false;
        return true;
    }

    private bool AirTotemReady()
    {
        if (Capacitor_Totem.CreatedBySpell || Grounding_Totem.CreatedBySpell
            || Stormlash_Totem.CreatedBySpell)
            return false;
        return true;
    }

    private bool TotemicRecallReady()
    {
        if (Fire_Elemental_Totem.CreatedBySpell)
            return false;
        else if (Earth_Elemental_Totem.CreatedBySpell)
            return false;
        else if (Searing_Totem.CreatedBySpell)
            return true;
        else if (FireTotemReady() && EarthTotemReady() && WaterTotemReady() && AirTotemReady())
            return false;
        else
            return true;
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: ShamanElementalSettings

    [Serializable]
    public class ShamanElementalSettings : Settings
    {
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public int UseStoneformAtPercentage = 80;
        public int UseWarStompAtPercentage = 80;
        public bool UseAlchFlask = true;
        public bool UseAncestralGuidance = true;
        public bool UseAncestralSwiftness = true;
        public bool UseArcaneTorrentForDecast = true;
        public bool UseArcaneTorrentForResource = true;
        public bool UseAscendance = true;
        public bool UseAstralShift = true;
        public bool UseBerserking = true;
        public bool UseBloodFury = true;
        public bool UseBloodlustHeroism = true;
        public bool UseCalloftheElements = true;
        public bool UseCapacitorTotem = true;
        public bool UseChainHeal = false;
        public bool UseChainLightning = true;
        public bool UseEarthElementalTotem = true;
        public bool UseEarthShock = true;
        public bool UseEarthbindTotem = false;
        public bool UseEarthquake = true;
        public bool UseElementalBlast = true;
        public bool UseElementalMastery = true;
        public bool UseEngGlove = true;
        public bool UseFireElementalTotem = true;
        public bool UseFlameShock = true;
        public bool UseFlametongueWeapon = true;
        public bool UseFrostShock = false;
        public bool UseFrostbrandWeapon = false;
        public bool UseGhostWolf = true;
        public bool UseGiftoftheNaaru = true;
        public bool UseGroundingTotem = true;
        public bool UseHealingRain = true;
        public bool UseHealingStreamTotem = true;
        public bool UseHealingSurge = true;
        public bool UseHealingTideTotem = true;
        public bool UseLavaBurst = true;
        public bool UseLifeblood = true;
        public bool UseLightningBolt = true;
        public bool UseLightningShield = true;
        public bool UseLowCombat = true;
        public bool UseMagmaTotem = true;
        public bool UseRockbiterWeapon = false;
        public bool UseSearingTotem = true;
        public bool UseSpiritwalkersGrace = true;
        public bool UseStoneBulwarkTotem = true;
        public bool UseStoneform = true;
        public bool UseStormlashTotem = true;
        public bool UseThunderstorm = true;
        public bool UseTotemicProjection = true;
        public bool UseTotemicRecall = true;
        public bool UseTrinket = true;
        public bool UseUnleashElements = true;
        public bool UseWarStomp = true;
        public bool UseWaterShield = true;
        public bool UseWaterWalking = true;
        public bool UseWindShear = true;

        public ShamanElementalSettings()
        {
            ConfigWinForm(new Point(500, 400), "Shaman Elemental Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrent", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Shaman Buffs */
            AddControlInWinForm("Use Flametongue Weapon", "UseFlametongueWeapon", "Shaman Buffs");
            AddControlInWinForm("Use Frostbrand Weapon", "UseFrostbrandWeapon", "Shaman Buffs");
            AddControlInWinForm("Use Ghost Wolf", "UseGhostWolf", "Shaman Buffs");
            AddControlInWinForm("Use Lightning Shield", "UseLightningShield", "Shaman Buffs");
            AddControlInWinForm("Use Rockbiter Weapon", "UseRockbiterWeapon", "Shaman Buffs");
            AddControlInWinForm("Use Spiritwalker's Grace", "UseSpiritwalkersGrace", "Shaman Buffs");
            AddControlInWinForm("Use Water Shield", "UseWaterShield", "Shaman Buffs");
            AddControlInWinForm("Use Water Walking", "UseWaterWalking", "Shaman Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Chain Lightning", "UseChainLightning", "Offensive Spell");
            AddControlInWinForm("Use Earthquake", "UseEarthquake", "Offensive Spell");
            AddControlInWinForm("Use Earth Shock", "UseEarthShock", "Offensive Spell");
            AddControlInWinForm("Use Flame Shock", "UseFlameShock", "Offensive Spell");
            AddControlInWinForm("Use Frost Shock", "UseFrostShock", "Offensive Spell");
            AddControlInWinForm("Use Lava Burst", "UseLavaBurst", "Offensive Spell");
            AddControlInWinForm("Use Lightning Bolt", "UseLightningBolt", "Offensive Spell");
            AddControlInWinForm("Use Magma Totem", "UseMagmaTotem", "Offensive Spell");
            AddControlInWinForm("Use Searing Totem", "UseSearingTotem", "Offensive Spell");
            AddControlInWinForm("Use Thunderstorm", "UseThunderstorm", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Ancestral Swiftness", "UseAncestralSwiftness", "Offensive Cooldown");
            AddControlInWinForm("Use Ascendance", "UseAscendance", "Offensive Cooldown");
            AddControlInWinForm("Use Bloodlust / Heroism", "UseBloodlustHeroism", "Offensive Cooldown");
            AddControlInWinForm("Use Call of the Elements", "UseCalloftheElements", "Offensive Cooldown");
            AddControlInWinForm("Use Earth Elemental Totem", "UseEarthElementalTotem", "Offensive Cooldown");
            AddControlInWinForm("Use Elemental Blast", "UseElementalBlast", "Offensive Cooldown");
            AddControlInWinForm("Use Elemental Mastery", "UseElementalMastery", "Offensive Cooldown");
            AddControlInWinForm("Use Fire Elemental Totem", "UseFireElementalTotem", "Offensive Cooldown");
            AddControlInWinForm("Use Stormlash Totem", "UseStormlashTotem", "Offensive Cooldown");
            AddControlInWinForm("Use Totemic Projection", "UseTotemicProjection", "Offensive Cooldown");
            AddControlInWinForm("Use Unleash Elements", "UseUnleashElements", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Astral Shift", "UseAstralShift", "Defensive Cooldown");
            AddControlInWinForm("Use Capacitor Totem", "UseCapacitorTotem", "Defensive Cooldown");
            AddControlInWinForm("Use Earthbind Totem", "UseEarthbindTotem", "Defensive Cooldown");
            AddControlInWinForm("Use Grounding Totem", "UseGroundingTotem", "Defensive Cooldown");
            AddControlInWinForm("Use StoneBulwark Totem", "UseStoneBulwarkTotem", "Defensive Cooldown");
            AddControlInWinForm("Use Wind Shear", "UseWindShear", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Ancestral Guidance", "UseAncestralGuidance", "Healing Spell");
            AddControlInWinForm("Use Chain Heal", "UseChainHeal", "Healing Spell");
            AddControlInWinForm("Use Healing Rain", "UseHealingRain", "Healing Spell");
            AddControlInWinForm("Use Healing Surge", "UseHealingSurge", "Healing Spell");
            AddControlInWinForm("Use Healing Stream Totem", "UseHealingStream_Totem", "Healing Spell");
            AddControlInWinForm("Use Healing Tide Totem", "UsHealingTide_Totem", "Healing Spell");
            AddControlInWinForm("Use Totemic Recall", "UseTotemicRecall", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket", "UseTrinket", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
        }

        public static ShamanElementalSettings CurrentSetting { get; set; }

        public static ShamanElementalSettings GetSettings()
        {
            string CurrentSettingsFile = Application.StartupPath + "\\CustomClasses\\Settings\\Shaman_Elemental.xml";
            if (File.Exists(CurrentSettingsFile))
            {
                return
                    CurrentSetting = Load<ShamanElementalSettings>(CurrentSettingsFile);
            }
            else
            {
                return new ShamanElementalSettings();
            }
        }
    }

    #endregion
}

#endregion

#region Priest

public class Priest_Shadow
{
    private readonly PriestShadowSettings MySettings = PriestShadowSettings.GetSettings();
    private readonly string MoveBackward = nManager.Wow.Helpers.Keybindings.GetKeyByAction(nManager.Wow.Enums.Keybindings.MOVEBACKWARD);

    #region General Timers & Variables

    private Timer AlchFlask_Timer = new Timer(0);
    private Timer Engineering_Timer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer Trinket_Timer = new Timer(0);
    public int LC = 0;

    #endregion

    #region Professions and Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell Arcane_Torrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell Blood_Fury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell Gift_of_the_Naaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell War_Stomp = new Spell("War Stomp");

    #endregion

    #region Priest Buffs

    private readonly Spell Inner_Fire = new Spell("Inner Fire");
    private readonly Spell Inner_Will = new Spell("Inner Will");
    private readonly Spell Levitate = new Spell("Levitate");
    private readonly Spell Power_Word_Fortitude = new Spell("Power Word: Fortitude");
    private readonly Spell Shadowform = new Spell("Shadowform");
    private Timer Levitate_Timer = new Timer(0);

    #endregion

    #region Offensive Spell

    private readonly Spell Cascade = new Spell("Cascade");
    private readonly Spell Devouring_Plague = new Spell("Devouring Plague");
    private readonly Spell Divine_Star = new Spell("Divine Star");
    private readonly Spell Halo = new Spell("Halo");
    private readonly Spell Mind_Blast = new Spell("Mind Blast");
    private readonly Spell Mind_Flay = new Spell("Mind Flay");
    private readonly Spell Mind_Sear = new Spell("Mind Sear");
    private readonly Spell Mind_Spike = new Spell("Mind Spike");
    private readonly Spell Shadow_Word_Death = new Spell("Shadow Word: Death");
    private readonly Spell Shadow_Word_Insanity = new Spell("Shadow Word: Insanity");
    private readonly Spell Shadow_Word_Pain = new Spell("Shadow Word: Pain");
    private readonly Spell Smite = new Spell("Smite");
    private readonly Spell Vampiric_Touch = new Spell("Vampiric Touch");
    private Timer Devouring_Plague_Timer = new Timer(0);
    private Timer Shadow_Word_Pain_Timer = new Timer(0);
    private Timer Vampiric_Touch_Timer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell Power_Infusion = new Spell("Power Infusion");
    private readonly Spell Shadowfiend = new Spell("Shadowfiend");

    #endregion

    #region Defensive Cooldown

    private readonly Spell Dispersion = new Spell("Dispersion");
    private readonly Spell Power_Word_Shield = new Spell("Power Word: Shield");
    private readonly Spell Psychic_Horror = new Spell("Psychic Horror");
    private readonly Spell Psychic_Scream = new Spell("Psychic Scream");
    private readonly Spell Psyfiend = new Spell("Psyfiend");
    private readonly Spell Silence = new Spell("Silence");
    private readonly Spell Spectral_Guise = new Spell("Spectral Guise");
    private readonly Spell Void_Tendrils = new Spell("Void Tendrils");

    #endregion

    #region Healing Spell

    private readonly Spell Desperate_Prayer = new Spell("Desperate Prayer");
    private readonly Spell Flash_Heal = new Spell("Flash Heal");
    private readonly Spell Hymn_of_Hope = new Spell("Hymn of Hope");
    private readonly Spell Prayer_of_Mending = new Spell("Prayer of Mending");
    private readonly Spell Renew = new Spell("Renew");
    private readonly Spell Vampiric_Embrace = new Spell("Vampiric Embrace");
    private Timer Renew_Timer = new Timer(0);

    #endregion

    public Priest_Shadow()
    {
        Main.range = 30.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDead)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        Buff_Levitate();
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget &&
                            (Mind_Spike.IsDistanceGood || Shadow_Word_Pain.IsDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                            && MySettings.UseLowCombat)
                            {
                                LC = 1;
                                LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void Buff_Levitate()
    {
        if (!Fight.InFight && Levitate.KnownSpell && Levitate.IsSpellUsable && MySettings.UseLevitate
            && (!Levitate.HaveBuff || Levitate_Timer.IsReady))
        {
            Levitate.Launch();
            Levitate_Timer = new Timer(1000*60*9);
        }
    }

    private void Pull()
    {
        if (Devouring_Plague.IsSpellUsable && Devouring_Plague.KnownSpell && Devouring_Plague.IsDistanceGood
            && ObjectManager.Me.ShadowOrbs == 3 && MySettings.UseDevouringPlague)
        {
            Devouring_Plague.Launch();
            return;
        }
        else
        {
            if (Shadow_Word_Pain.IsSpellUsable && Shadow_Word_Pain.KnownSpell && Shadow_Word_Pain.IsDistanceGood
                && MySettings.UseShadowWordPain)
            {
                Shadow_Word_Pain.Launch();
                Shadow_Word_Pain_Timer = new Timer(1000*14);
                return;
            }
        }
    }

    private void LowCombat()
    {
        AvoidMelee();
        Heal();
        Defense_Cycle();
        Buff();

        if (Devouring_Plague.IsSpellUsable && Devouring_Plague.KnownSpell && Devouring_Plague.IsDistanceGood
            && ObjectManager.Me.ShadowOrbs == 3 && MySettings.UseDevouringPlague)
        {
            Devouring_Plague.Launch();
            return;
        }
        else if (Mind_Spike.KnownSpell && Mind_Spike.IsSpellUsable && Mind_Spike.IsDistanceGood
                 && MySettings.UseMindSpike)
        {
            Mind_Spike.Launch();
            if (ObjectManager.Target.HealthPercent < 50 && ObjectManager.Target.HealthPercent > 0)
            {
                Mind_Spike.Launch();
                return;
            }
            return;
        }
        else
        {
            if (Mind_Sear.KnownSpell && Mind_Sear.IsSpellUsable && Mind_Sear.IsDistanceGood
                && MySettings.UseMindSear)
            {
                Mind_Sear.Launch();
                return;
            }
        }
    }

    private void Combat()
    {
        AvoidMelee();
        if (OnCD.IsReady)
            Defense_Cycle();
        Heal();
        Decast();
        Buff();
        DPS_Burst();
        DPS_Cycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (Power_Word_Fortitude.KnownSpell && Power_Word_Fortitude.IsSpellUsable &&
            !Power_Word_Fortitude.HaveBuff && MySettings.UsePowerWordFortitude)
        {
            Power_Word_Fortitude.Launch();
            return;
        }
        else if (Inner_Fire.KnownSpell && Inner_Fire.IsSpellUsable && !Inner_Fire.HaveBuff
                 && MySettings.UseInnerFire)
        {
            Inner_Fire.Launch();
            return;
        }
        else if (Inner_Will.KnownSpell && Inner_Will.IsSpellUsable && !Inner_Will.HaveBuff
                 && !MySettings.UseInnerFire && MySettings.UseInnerWill)
        {
            Inner_Will.Launch();
            return;
        }
        else if (AlchFlask_Timer.IsReady && MySettings.UseAlchFlask
                 && ItemsManager.GetItemCountByIdLUA(75525) == 1)
        {
            Logging.WriteFight("Use Alchi Flask");
            Lua.RunMacroText("/use item:75525");
            AlchFlask_Timer = new Timer(1000*60*60*2);
        }
        else
        {
            if (!Shadowform.HaveBuff && Shadowform.KnownSpell && Shadowform.IsSpellUsable
                && MySettings.UseShadowform)
            {
                Shadowform.Launch();
                return;
            }
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            Keyboard.DownKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
            while (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
                Thread.Sleep(300);
            Keyboard.UpKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
        }
    }

    private void Defense_Cycle()
    {
        if (ObjectManager.Me.HealthPercent <= MySettings.UsePsychicScreamAtPercentage && Psychic_Scream.IsSpellUsable && Psychic_Scream.KnownSpell
            && MySettings.UsePsychicScream)
        {
            Psychic_Scream.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseDispersionHealthAtPercentage && Dispersion.KnownSpell && Dispersion.IsSpellUsable
                 && MySettings.UseDispersionHealth)
        {
            if (Renew.KnownSpell && Renew.IsSpellUsable && MySettings.UseRenew)
            {
                Renew.Launch();
                Thread.Sleep(1500);
            }
            Dispersion.Launch();
            OnCD = new Timer(1000*6);
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() >= 2 && ObjectManager.Me.HealthPercent <= MySettings.UseVoidTendrilsAtPercentage &&
                 Void_Tendrils.IsSpellUsable && Void_Tendrils.KnownSpell && MySettings.UseVoidTendrils)
        {
            Void_Tendrils.Launch();
            OnCD = new Timer(1000*10);
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() >= 2 && ObjectManager.Me.HealthPercent <= MySettings.UsePsyfiendAtPercentage &&
                 Psyfiend.IsSpellUsable && Psyfiend.KnownSpell && MySettings.UsePsyfiend)
        {
            Psyfiend.Launch();
            OnCD = new Timer(1000*10);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseSpectralGuiseAtPercentage && Spectral_Guise.IsSpellUsable && Spectral_Guise.KnownSpell
                 && MySettings.UseSpectralGuise)
        {
            if (Renew.KnownSpell && Renew.IsSpellUsable && MySettings.UseRenew)
            {
                Renew.Launch();
                Thread.Sleep(1500);
            }
            Spectral_Guise.Launch();
            OnCD = new Timer(1000*3);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable && Stoneform.KnownSpell
                 && MySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent <= MySettings.UseWarStompAtPercentage && War_Stomp.IsSpellUsable && War_Stomp.KnownSpell
                && MySettings.UseWarStomp)
            {
                War_Stomp.Launch();
                OnCD = new Timer(1000*2);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.HealthPercent <= MySettings.UseFlashHealNonCombatAtPercentage && !Fight.InFight && ObjectManager.GetNumberAttackPlayer() == 0
            && Flash_Heal.KnownSpell && Flash_Heal.IsSpellUsable && MySettings.UseFlashHealNonCombat)
        {
            Flash_Heal.Launch(false);
            return;
        }
        else if (!Fight.InFight && ObjectManager.Me.ManaPercentage <= MySettings.UseHymnofHopeAtPercentage && Hymn_of_Hope.KnownSpell
                 && Hymn_of_Hope.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() == 0 && MySettings.UseHymnofHope)
        {
            Hymn_of_Hope.Launch(false);
            return;
        }
        else if (!Fight.InFight && ObjectManager.Me.ManaPercentage <= MySettings.UseDispersionManaAtPercentage && ObjectManager.GetNumberAttackPlayer() == 0
                 && Dispersion.KnownSpell && Dispersion.IsSpellUsable && MySettings.UseDispersionMana)
        {
            Dispersion.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseDesperatePrayerAtPercentage && Desperate_Prayer.KnownSpell && Desperate_Prayer.IsSpellUsable
                 && MySettings.UseDesperatePrayer)
        {
            Desperate_Prayer.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseFlashHealInCombatAtPercentage && Flash_Heal.KnownSpell && Flash_Heal.IsSpellUsable
                 && MySettings.UseFlashHealInCombat)
        {
            Flash_Heal.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseGiftoftheNaaruAtPercentage && Gift_of_the_Naaru.IsSpellUsable && Gift_of_the_Naaru.KnownSpell
                 && MySettings.UseGiftoftheNaaru)
        {
            Gift_of_the_Naaru.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseVampiricEmbraceAtPercentage && Vampiric_Embrace.IsSpellUsable && Vampiric_Embrace.KnownSpell
                 && MySettings.UseVampiricEmbrace)
        {
            Vampiric_Embrace.Launch();
            return;
        }
        else if (Power_Word_Shield.KnownSpell && Power_Word_Shield.IsSpellUsable
                 && !Power_Word_Shield.HaveBuff && MySettings.UsePowerWordShield
                 && !ObjectManager.Me.HaveBuff(6788) && ObjectManager.Me.HealthPercent <= MySettings.UsePowerWordShieldAtPercentage
                 && (ObjectManager.GetNumberAttackPlayer() > 0 || ObjectManager.Me.GetMove))
        {
            Power_Word_Shield.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UsePrayerofMendingAtPercentage && Prayer_of_Mending.KnownSpell && Prayer_of_Mending.IsSpellUsable
                 && MySettings.UsePrayerofMending)
        {
            Prayer_of_Mending.Launch();
            return;
        }
        else
        {
            if (Renew.KnownSpell && Renew.IsSpellUsable && !Renew.HaveBuff &&
                ObjectManager.Me.HealthPercent <= MySettings.UseRenewAtPercentage && MySettings.UseRenew)
            {
                Renew.Launch();
                return;
            }
        }
    }

    private void Decast()
    {
        if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && MySettings.UseSilence
            && Silence.KnownSpell && Silence.IsSpellUsable && Silence.IsDistanceGood
            && ObjectManager.Target.HealthPercent <= MySettings.UseSilenceAtPercentage)
        {
            Silence.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && MySettings.UsePsychicHorror
                && Psychic_Horror.KnownSpell && Psychic_Horror.IsSpellUsable && Psychic_Horror.IsDistanceGood
                && ObjectManager.Target.HealthPercent <= MySettings.UsePsychicHorrorAtPercentage)
            {
                Psychic_Horror.Launch();
                return;
            }
        }
    }

    private void DPS_Burst()
    {
        if (MySettings.UseTrinket && Trinket_Timer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Trinket_Timer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBerserking)
            Berserking.Launch();
        else if (Blood_Fury.IsSpellUsable && Blood_Fury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBloodFury)
            Blood_Fury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (Engineering_Timer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                && MySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            Engineering_Timer = new Timer(1000*60);
        }
        else if (Power_Infusion.IsSpellUsable && Power_Infusion.KnownSpell
                 && MySettings.UsePowerInfusion && ObjectManager.Target.GetDistance < 40)
        {
            Power_Infusion.Launch();
            return;
        }
        else
        {
            if (Shadowfiend.IsSpellUsable && Shadowfiend.KnownSpell && Shadowfiend.IsDistanceGood
                && MySettings.UseShadowfiend)
            {
                Shadowfiend.Launch();
                return;
            }
        }
    }

    private void DPS_Cycle()
    {
        if (ObjectManager.Me.ManaPercentage < 80 && Arcane_Torrent.KnownSpell && Arcane_Torrent.IsSpellUsable
            && MySettings.UseArcaneTorrent)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 2 && Cascade.IsSpellUsable && Cascade.KnownSpell
                 && Cascade.IsDistanceGood && MySettings.UseCascade)
        {
            Cascade.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 2 && Divine_Star.IsSpellUsable && Divine_Star.KnownSpell
                 && Divine_Star.IsDistanceGood && MySettings.UseDivineStar)
        {
            Divine_Star.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 2 && Halo.IsSpellUsable && Halo.KnownSpell
                 && Halo.IsDistanceGood && MySettings.UseHalo)
        {
            Halo.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 4 && Mind_Sear.IsSpellUsable && Mind_Sear.KnownSpell
                 && Mind_Sear.IsDistanceGood && !ObjectManager.Me.IsCast && MySettings.UseMindSear)
        {
            Mind_Sear.Launch();
            return;
        }
        else if (Shadow_Word_Death.IsSpellUsable && Shadow_Word_Death.IsDistanceGood && Shadow_Word_Death.KnownSpell
                 && ObjectManager.Target.HealthPercent < 20 && MySettings.UseShadowWordDeath)
        {
            Shadow_Word_Death.Launch();
            return;
        }
        else if (Shadow_Word_Pain.KnownSpell && Shadow_Word_Pain.IsSpellUsable
                 && Shadow_Word_Pain.IsDistanceGood && MySettings.UseShadowWordPain
                 && (!Shadow_Word_Pain.TargetHaveBuff || Shadow_Word_Pain_Timer.IsReady))
        {
            Shadow_Word_Pain.Launch();
            Shadow_Word_Pain_Timer = new Timer(1000*14);
            return;
        }
        else if (Shadow_Word_Insanity.KnownSpell && Shadow_Word_Insanity.IsDistanceGood
                 && Shadow_Word_Insanity.IsSpellUsable && MySettings.UseShadowWordInsanity)
        {
            Shadow_Word_Insanity.Launch();
            Shadow_Word_Pain_Timer = new Timer(0);
            return;
        }
        else if (Vampiric_Touch.KnownSpell && Vampiric_Touch.IsSpellUsable
                 && Vampiric_Touch.IsDistanceGood && MySettings.UseVampiricTouch
                 && (!Vampiric_Touch.TargetHaveBuff || Vampiric_Touch_Timer.IsReady))
        {
            Vampiric_Touch.Launch();
            Vampiric_Touch_Timer = new Timer(1000*11);
            return;
        }
        else if (Mind_Spike.IsSpellUsable && Mind_Spike.IsDistanceGood && Mind_Spike.KnownSpell &&
                 ObjectManager.Me.HaveBuff(87160) && MySettings.UseMindSpike)
        {
            Mind_Spike.Launch();
            return;
        }
        else if (Devouring_Plague.KnownSpell && Devouring_Plague.IsSpellUsable && Devouring_Plague.IsDistanceGood &&
                 ObjectManager.Me.ShadowOrbs == 3 && MySettings.UseDevouringPlague
                 && (!Devouring_Plague.TargetHaveBuff || Devouring_Plague_Timer.IsReady))
        {
            Devouring_Plague.Launch();
            Devouring_Plague_Timer = new Timer(1000*3);
            return;
        }
        else if (Mind_Blast.KnownSpell && Mind_Blast.IsSpellUsable && Mind_Blast.IsDistanceGood
                 && ObjectManager.Me.ShadowOrbs < 3 && MySettings.UseMindBlast)
        {
            Mind_Blast.Launch();
            return;
        }
        else if (!ObjectManager.Me.IsCast && Mind_Flay.IsSpellUsable && Mind_Flay.KnownSpell && Mind_Flay.IsDistanceGood
                 && MySettings.UseMindFlay && Shadow_Word_Pain.TargetHaveBuff && Vampiric_Touch.TargetHaveBuff
                 && !ObjectManager.Me.HaveBuff(87160) && ObjectManager.GetNumberAttackPlayer() < 5
                 && ObjectManager.Me.ShadowOrbs != 3)
        {
            Mind_Flay.Launch();
            return;
        }
        // Blizzard API Calls for Mind Flay using Smite Function
        else if (!ObjectManager.Me.IsCast && Smite.IsSpellUsable && Smite.KnownSpell && Smite.IsDistanceGood
                 && MySettings.UseMindFlay && Shadow_Word_Pain.TargetHaveBuff && Vampiric_Touch.TargetHaveBuff
                 && !ObjectManager.Me.HaveBuff(87160) && ObjectManager.GetNumberAttackPlayer() < 5
                 && ObjectManager.Me.ShadowOrbs != 3)
        {
            Smite.Launch();
            return;
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: PriestShadowSettings

    [Serializable]
    public class PriestShadowSettings : Settings
    {
        public int UseDesperatePrayerAtPercentage = 65;
        public int UseDispersionHealthAtPercentage = 20;
        public int UseDispersionManaAtPercentage = 60;
        public int UseFlashHealNonCombatAtPercentage = 95;
        public int UseFlashHealInCombatAtPercentage = 60;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public int UseHymnofHopeAtPercentage = 40;
        public int UsePowerWordShieldAtPercentage = 100;
        public int UsePrayerofMendingAtPercentage = 50;
        public int UsePsychicHorrorAtPercentage = 100;
        public int UsePsychicScreamAtPercentage = 20;
        public int UsePsyfiendAtPercentage = 35;
        public int UseRenewAtPercentage = 90;
        public int UseSilenceAtPercentage = 100;
        public int UseSpectralGuiseAtPercentage = 70;
        public int UseStoneformAtPercentage = 80;
        public int UseWarStompAtPercentage = 80;
        public int UseVampiricEmbraceAtPercentage = 80;
        public int UseVoidTendrilsAtPercentage = 35;
        public bool UseAlchFlask = true;
        public bool UseArcaneTorrent = true;
        public bool UseBerserking = true;
        public bool UseBloodFury = true;
        public bool UseCascade = true;
        public bool UseDesperatePrayer = true;
        public bool UseDevouringPlague = true;
        public bool UseDispersionHealth = true;
        public bool UseDispersionMana = true;
        public bool UseDivineStar = true;
        public bool UseEngGlove = true;
        public bool UseFlashHealInCombat = true;
        public bool UseFlashHealNonCombat = true;
        public bool UseGiftoftheNaaru = true;
        public bool UseHalo = true;
        public bool UseHymnofHope = true;
        public bool UseInnerFire = true;
        public bool UseInnerWill = false;
        public bool UseLevitate = false;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMindBlast = true;
        public bool UseMindFlay = true;
        public bool UseMindSear = true;
        public bool UseMindSpike = true;
        public bool UsePowerInfusion = true;
        public bool UsePowerWordFortitude = true;
        public bool UsePowerWordShield = true;
        public bool UsePrayerofMending = true;
        public bool UsePsychicHorror = true;
        public bool UsePsychicScream = true;
        public bool UsePsyfiend = true;
        public bool UseRenew = true;
        public bool UseShadowWordDeath = true;
        public bool UseShadowWordInsanity = true;
        public bool UseShadowWordPain = true;
        public bool UseShadowfiend = true;
        public bool UseShadowform = true;
        public bool UseSilence = true;
        public bool UseSpectralGuise = true;
        public bool UseStoneform = true;
        public bool UseTrinket = true;
        public bool UseVampiricEmbrace = true;
        public bool UseVampiricTouch = true;
        public bool UseVoidTendrils = true;
        public bool UseWarStomp = true;

        public PriestShadowSettings()
        {
            ConfigWinForm(new Point(500, 400), "Shadow Priest Settings");
            /* Professions and Racials */
            AddControlInWinForm("Use Arcane Torrent", "UseArcaneTorrent", "Professions and Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions and Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions and Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions and Racials", "AtPercentage");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions and Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions and Racials", "AtPercentage");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions and Racials", "AtPercentage");
            /* Priest Buffs */
            AddControlInWinForm("Use Inner Fire", "UseInnerFire", "Priest Buffs");
            AddControlInWinForm("Use Inner Will", "UseInnerWill", "Priest Buffs");
            AddControlInWinForm("Use Levitate", "UseLevitate", "Priest Buffs");
            AddControlInWinForm("Use Power Word: Fortitude", "UsePowerWordFortitude", "Priest Buffs");
            AddControlInWinForm("Use Shadowform", "UseShadowform", "Priest Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Cascade", "UseCascade", "Offensive Spell");
            AddControlInWinForm("Use Devouring Plague", "UseDevoringPlague", "Offensive Spell");
            AddControlInWinForm("Use DivineStar", "UseDivineStar", "Offensive Spell");
            AddControlInWinForm("Use Halo", "UseHalo", "Offensive Spell");
            AddControlInWinForm("Use Mind Blast", "UseMindBlast", "Offensive Spell");
            AddControlInWinForm("Use Mind Flay", "UseMindFlay", "Offensive Spell");
            AddControlInWinForm("Use Mind Sear", "UseMindSear", "Offensive Spell");
            AddControlInWinForm("Use Mind Spike", "UseMindSpike", "Offensive Spell");
            AddControlInWinForm("Use Shadow Word: Death", "UseShadowWordDeath", "Offensive Spell");
            AddControlInWinForm("Use Shadow Word: Insanity", "UseShadowWordInsanity", "Offensive Spell");
            AddControlInWinForm("Use Shadow Word: Pain", "UseShadowWordPain", "Offensive Spell");
            AddControlInWinForm("Use Vampiric Touch", "UseVampiricTouch", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Power Infusion", "UsePowerInfusion", "Offensive Cooldown");
            AddControlInWinForm("Use Shadowfiend", "UseShadowfiend", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Dispersion when health low", "UseDispersionHealth", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Dispersion when mana low", "UseDispersionMana", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Power Word: Shield", "UsePowerWordShield", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Psychic Horror", "UsePsychicHorror", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Psychic Scream", "UsePsychicScream", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Psyfiend", "UsePsyfiend", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Silence", "UseSilence", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Spectral Guise", "UseSpectralGuise", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Void Tendrils", "UseVoidTendrils", "Defensive Cooldown", "AtPercentage");
            /* Healing Spell */
            AddControlInWinForm("Use Desperate Prayer", "UseDesperatePrayer", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Flash Heal for Regeneration after combat", "UseFlashHealNonCombat", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Flash Heal during combat", "UseFlashHealInCombat", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Hymn of Hope", "UseHymnofHope", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Prayer of Mending", "UsePrayerofMending", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Renew", "UseRenew", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Vampiric Embrace", "UseVampiricEmbrace", "Healing Spell", "AtPercentage");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket", "UseTrinket", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
        }

        public static PriestShadowSettings CurrentSetting { get; set; }

        public static PriestShadowSettings GetSettings()
        {
            string CurrentSettingsFile = Application.StartupPath + "\\CustomClasses\\Settings\\Priest_Shadow.xml";
            if (File.Exists(CurrentSettingsFile))
            {
                return
                    CurrentSetting = Load<PriestShadowSettings>(CurrentSettingsFile);
            }
            else
            {
                return new PriestShadowSettings();
            }
        }
    }

    #endregion
}

public class Priest_Discipline
{
    private readonly PriestDisciplineSettings MySettings = PriestDisciplineSettings.GetSettings();
    private readonly string MoveBackward = nManager.Wow.Helpers.Keybindings.GetKeyByAction(nManager.Wow.Enums.Keybindings.MOVEBACKWARD);

    #region General Timers & Variables

    private Timer AlchFlask_Timer = new Timer(0);
    private Timer Engineering_Timer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer Trinket_Timer = new Timer(0);

    #endregion

    #region Professions and Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell Arcane_Torrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell Blood_Fury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell Gift_of_the_Naaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell War_Stomp = new Spell("War Stomp");

    #endregion

    #region Priest Buffs

    private readonly Spell Inner_Fire = new Spell("Inner Fire");
    private readonly Spell Inner_Will = new Spell("Inner Will");
    private readonly Spell Levitate = new Spell("Levitate");
    private readonly Spell Power_Word_Fortitude = new Spell("Power Word: Fortitude");
    private Timer Levitate_Timer = new Timer(0);

    #endregion

    #region Offensive Spell

    private readonly Spell Cascade = new Spell("Cascade");
    private readonly Spell Divine_Star = new Spell("Divine Star");
    private readonly Spell Halo = new Spell("Halo");
    private readonly Spell Mind_Sear = new Spell("Mind Sear");
    private readonly Spell Power_Word_Solace = new Spell("Power Word: Solace");
    private readonly Spell Shadow_Word_Death = new Spell("Shadow Word: Death");
    private readonly Spell Shadow_Word_Pain = new Spell("Shadow Word: Pain");
    private readonly Spell Smite = new Spell("Smite");
    private Timer Shadow_Word_Pain_Timer = new Timer(0);

    #endregion

    #region Healing Cooldown

    private readonly Spell Archangel = new Spell("Archangel");
    private readonly Spell Inner_Focus = new Spell("Inner Focus");
    private readonly Spell Power_Infusion = new Spell("Power Infusion");
    private readonly Spell Shadowfiend = new Spell("Shadowfiend");

    #endregion

    #region Defensive Cooldown

    private readonly Spell Pain_Suppression = new Spell("Pain Suppression");
    private readonly Spell Power_Word_Barrier = new Spell("Power Word: Barrier");
    private readonly Spell Power_Word_Shield = new Spell("Power Word: Shield");
    private readonly Spell Psychic_Scream = new Spell("Psychic Scream");
    private readonly Spell Psyfiend = new Spell("Psyfiend");
    private readonly Spell Spectral_Guise = new Spell("Spectral Guise");
    private readonly Spell Void_Tendrils = new Spell("Void Tendrils");

    #endregion

    #region Healing Spell

    private readonly Spell Desperate_Prayer = new Spell("Desperate Prayer");
    private readonly Spell Flash_Heal = new Spell("Flash Heal");
    private readonly Spell Greater_Heal = new Spell("Greater Heal");
    private readonly Spell Heal_Spell = new Spell("Heal");
    private readonly Spell Holy_Fire = new Spell("Holy Fire");
    private readonly Spell Hymn_of_Hope = new Spell("Hymn of Hope");
    private readonly Spell Penance = new Spell("Penance");
    private readonly Spell Prayer_of_Healing = new Spell("Prayer of Healing");
    private readonly Spell Prayer_of_Mending = new Spell("Prayer of Mending");
    private readonly Spell Renew = new Spell("Renew");
    private readonly Spell Spirit_Shell = new Spell("Spirit Shell");
    private Timer Renew_Timer = new Timer(0);

    #endregion

    public Priest_Discipline()
    {
        Main.range = 30.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDead)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        Buff_Levitate();
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget &&
                                (Holy_Fire.IsDistanceGood || Shadow_Word_Pain.IsDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }
                            else
                                Combat();
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void Buff_Levitate()
    {
        if (!Fight.InFight && Levitate.KnownSpell && Levitate.IsSpellUsable && MySettings.UseLevitate
            && (!Levitate.HaveBuff || Levitate_Timer.IsReady))
        {
            Levitate.Launch();
            Levitate_Timer = new Timer(1000*60*9);
        }
    }

    private void Pull()
    {
        if (Holy_Fire.IsSpellUsable && Holy_Fire.KnownSpell && Holy_Fire.IsDistanceGood
            && MySettings.UseHolyFire)
        {
            Holy_Fire.Launch();
            return;
        }
        else
        {
            if (Shadow_Word_Pain.IsSpellUsable && Shadow_Word_Pain.KnownSpell && Shadow_Word_Pain.IsDistanceGood
                && MySettings.UseShadowWordPain)
            {
                Shadow_Word_Pain.Launch();
                Shadow_Word_Pain_Timer = new Timer(1000*14);
                return;
            }
        }
    }

    private void Combat()
    {
        AvoidMelee();
        if (OnCD.IsReady)
            Defense_Cycle();
        Heal();
        Buff();
        Healing_Burst();
        DPS_Cycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (Power_Word_Fortitude.KnownSpell && Power_Word_Fortitude.IsSpellUsable &&
            !Power_Word_Fortitude.HaveBuff && MySettings.UsePowerWordFortitude)
        {
            Power_Word_Fortitude.Launch();
            return;
        }
        else if (Inner_Fire.KnownSpell && Inner_Fire.IsSpellUsable && !Inner_Fire.HaveBuff
                 && MySettings.UseInnerFire)
        {
            Inner_Fire.Launch();
            return;
        }
        else if (Inner_Will.KnownSpell && Inner_Will.IsSpellUsable && !Inner_Will.HaveBuff
                 && !MySettings.UseInnerFire && MySettings.UseInnerWill)
        {
            Inner_Will.Launch();
            return;
        }
        else
        {
            if (AlchFlask_Timer.IsReady && MySettings.UseAlchFlask
                 && ItemsManager.GetItemCountByIdLUA(75525) == 1)
            {
                Logging.WriteFight("Use Alchi Flask");
                Lua.RunMacroText("/use item:75525");
                AlchFlask_Timer = new Timer(1000*60*60*2);
            }
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            Keyboard.DownKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
            while (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
                Thread.Sleep(300);
            Keyboard.UpKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
        }
    }

    private void Defense_Cycle()
    {
        if (ObjectManager.Me.HealthPercent <= MySettings.UsePsychicScreamAtPercentage && Psychic_Scream.IsSpellUsable && Psychic_Scream.KnownSpell
            && MySettings.UsePsychicScream)
        {
            Psychic_Scream.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() >= 2 && ObjectManager.Me.HealthPercent <= MySettings.UseVoidTendrilsAtPercentage &&
                 Void_Tendrils.IsSpellUsable && Void_Tendrils.KnownSpell && MySettings.UseVoidTendrils)
        {
            Void_Tendrils.Launch();
            OnCD = new Timer(1000*10);
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() >= 2 && ObjectManager.Me.HealthPercent <= MySettings.UsePsyfiendAtPercentage &&
                 Psyfiend.IsSpellUsable && Psyfiend.KnownSpell && MySettings.UsePsyfiend)
        {
            Psyfiend.Launch();
            OnCD = new Timer(1000*10);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseSpectralGuiseAtPercentage && Spectral_Guise.IsSpellUsable && Spectral_Guise.KnownSpell
                 && MySettings.UseSpectralGuise)
        {
            if (Renew.KnownSpell && Renew.IsSpellUsable && MySettings.UseRenew)
            {
                Renew.Launch();
                Thread.Sleep(1500);
            }
            Spectral_Guise.Launch();
            OnCD = new Timer(1000*3);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UsePowerWordBarrierAtPercentage && Power_Word_Barrier.IsSpellUsable && Power_Word_Barrier.KnownSpell
                 && MySettings.UsePowerWordBarrier)
        {
            SpellManager.CastSpellByIDAndPosition(62618, ObjectManager.Me.Position);
            OnCD = new Timer(1000*10);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UsePainSuppressionAtPercentage && Pain_Suppression.IsSpellUsable && Pain_Suppression.KnownSpell
                 && MySettings.UsePainSuppression)
        {
            Pain_Suppression.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable && Stoneform.KnownSpell
                 && MySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent <= MySettings.UseWarStompAtPercentage && War_Stomp.IsSpellUsable && War_Stomp.KnownSpell
                && MySettings.UseWarStomp)
            {
                War_Stomp.Launch();
                OnCD = new Timer(1000*2);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.HealthPercent <= MySettings.UseFlashHealNonCombatAtPercentage && !Fight.InFight && ObjectManager.GetNumberAttackPlayer() == 0
            && Flash_Heal.KnownSpell && Flash_Heal.IsSpellUsable && MySettings.UseFlashHealNonCombat)
        {
            Flash_Heal.Launch(false);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseInnerFocusAtPercentage && Inner_Focus.KnownSpell && Inner_Focus.IsSpellUsable
                 && MySettings.UseInnerFocus && !Inner_Focus.HaveBuff)
        {
            Inner_Focus.Launch();
            return;
        }
        else if (!Fight.InFight && ObjectManager.Me.ManaPercentage <= MySettings.UseHymnofHopeAtPercentage && Hymn_of_Hope.KnownSpell
                 && Hymn_of_Hope.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() == 0 && MySettings.UseHymnofHope)
        {
            Hymn_of_Hope.Launch(false);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseDesperatePrayerAtPercentage && Desperate_Prayer.KnownSpell && Desperate_Prayer.IsSpellUsable
                 && MySettings.UseDesperatePrayer)
        {
            Desperate_Prayer.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseFlashHealInCombatAtPercentage && Flash_Heal.KnownSpell && Flash_Heal.IsSpellUsable
                 && MySettings.UseFlashHealInCombat)
        {
            Flash_Heal.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseGreaterHealAtPercentage && Greater_Heal.KnownSpell && Greater_Heal.IsSpellUsable
                 && MySettings.UseGreaterHeal)
        {
            Greater_Heal.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseGiftoftheNaaruAtPercentage && Gift_of_the_Naaru.IsSpellUsable && Gift_of_the_Naaru.KnownSpell
                 && MySettings.UseGiftoftheNaaru)
        {
            Gift_of_the_Naaru.Launch();
            return;
        }
        else if (Power_Word_Shield.KnownSpell && Power_Word_Shield.IsSpellUsable
                 && !Power_Word_Shield.HaveBuff && MySettings.UsePowerWordShield
                 && !ObjectManager.Me.HaveBuff(6788) && ObjectManager.Me.HealthPercent <= MySettings.UsePowerWordShieldAtPercentage
                 && (ObjectManager.GetNumberAttackPlayer() > 0 || ObjectManager.Me.GetMove))
        {
            Power_Word_Shield.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UsePrayerofHealingAtPercentage && Prayer_of_Healing.KnownSpell && Prayer_of_Healing.IsSpellUsable
                 && MySettings.UsePrayerofHealing)
        {
            Prayer_of_Healing.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UsePrayerofMendingAtPercentage && Prayer_of_Mending.KnownSpell && Prayer_of_Mending.IsSpellUsable
                 && MySettings.UsePrayerofMending)
        {
            Prayer_of_Mending.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseHealAtPercentage && Heal_Spell.KnownSpell && Heal_Spell.IsSpellUsable
                 && (MySettings.UseHeal || !Greater_Heal.KnownSpell))
        {
            Heal_Spell.Launch();
            return;
        }
        else
        {
            if (Renew.KnownSpell && Renew.IsSpellUsable && !Renew.HaveBuff &&
                ObjectManager.Me.HealthPercent <= MySettings.UseRenewAtPercentage && MySettings.UseRenew)
            {
                Renew.Launch();
                return;
            }
        }
    }

    private void Healing_Burst()
    {
        if (MySettings.UseTrinket && Trinket_Timer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Trinket_Timer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBerserking)
            Berserking.Launch();
        else if (Blood_Fury.IsSpellUsable && Blood_Fury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBloodFury)
            Blood_Fury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (Engineering_Timer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                && MySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            Engineering_Timer = new Timer(1000*60);
        }
        else if (Power_Infusion.IsSpellUsable && Power_Infusion.KnownSpell
                 && MySettings.UsePowerInfusion && ObjectManager.Target.GetDistance < 40)
        {
            Power_Infusion.Launch();
            return;
        }
        else if (Archangel.IsSpellUsable && Archangel.KnownSpell && ObjectManager.Me.BuffStack(81661) > 4
                 && MySettings.UseArchangel && ObjectManager.Target.GetDistance < 40)
        {
            Archangel.Launch();
            return;
        }
        else if (Spirit_Shell.IsSpellUsable && Spirit_Shell.KnownSpell && ObjectManager.Me.HealthPercent > 80
                 && MySettings.UseSpiritShell && ObjectManager.Target.InCombat)
        {
            Spirit_Shell.Launch();
            return;
        }
        else
        {
            if (Shadowfiend.IsSpellUsable && Shadowfiend.KnownSpell && Shadowfiend.IsDistanceGood
                && MySettings.UseShadowfiend)
            {
                Shadowfiend.Launch();
                return;
            }
        }
    }

    private void DPS_Cycle()
    {
        if (ObjectManager.Me.ManaPercentage < 80 && Arcane_Torrent.KnownSpell && Arcane_Torrent.IsSpellUsable
            && MySettings.UseArcaneTorrent)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 2 && Cascade.IsSpellUsable && Cascade.KnownSpell
                 && Cascade.IsDistanceGood && MySettings.UseCascade)
        {
            Cascade.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 2 && Divine_Star.IsSpellUsable && Divine_Star.KnownSpell
                 && Divine_Star.IsDistanceGood && MySettings.UseDivineStar)
        {
            Divine_Star.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 2 && Halo.IsSpellUsable && Halo.KnownSpell
                 && Halo.IsDistanceGood && MySettings.UseHalo)
        {
            Halo.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 4 && Mind_Sear.IsSpellUsable && Mind_Sear.KnownSpell
                 && Mind_Sear.IsDistanceGood && !ObjectManager.Me.IsCast && MySettings.UseMindSear)
        {
            Mind_Sear.Launch();
            return;
        }
        else if (Shadow_Word_Death.IsSpellUsable && Shadow_Word_Death.IsDistanceGood && Shadow_Word_Death.KnownSpell
                 && ObjectManager.Target.HealthPercent < 20 && MySettings.UseShadowWordDeath)
        {
            Shadow_Word_Death.Launch();
            return;
        }
        else if (Shadow_Word_Pain.KnownSpell && Shadow_Word_Pain.IsSpellUsable
                 && Shadow_Word_Pain.IsDistanceGood && MySettings.UseShadowWordPain
                 && (!Shadow_Word_Pain.TargetHaveBuff || Shadow_Word_Pain_Timer.IsReady))
        {
            Shadow_Word_Pain.Launch();
            Shadow_Word_Pain_Timer = new Timer(1000*14);
            return;
        }
        else if (Power_Word_Solace.KnownSpell && Power_Word_Solace.IsDistanceGood
                 && Power_Word_Solace.IsSpellUsable && MySettings.UsePowerWordSolace
                 && ObjectManager.Me.ManaPercentage < 50)
        {
            Power_Word_Solace.Launch();
            return;
        }
        else if (Penance.IsSpellUsable && Penance.IsDistanceGood && Penance.KnownSpell
                 && MySettings.UsePenance)
        {
            Penance.Launch();
            return;
        }
        else if (Holy_Fire.IsSpellUsable && Holy_Fire.IsDistanceGood && Holy_Fire.KnownSpell
                 && MySettings.UseHolyFire)
        {
            Holy_Fire.Launch();
            return;
        }
        else if (Smite.IsSpellUsable && Smite.KnownSpell && Smite.IsDistanceGood
                 && MySettings.UseSmite && Shadow_Word_Pain.TargetHaveBuff
                 && ObjectManager.GetNumberAttackPlayer() < 5)
        {
            Smite.Launch();
            return;
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: PriestDisciplineSettings

    [Serializable]
    public class PriestDisciplineSettings : Settings
    {
        public int UseDesperatePrayerAtPercentage = 65;
        public int UseFlashHealNonCombatAtPercentage = 95;
        public int UseFlashHealInCombatAtPercentage = 60;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public int UseGreaterHealAtPercentage = 70;
        public int UseHealAtPercentage = 70;
        public int UseHymnofHopeAtPercentage = 40;
        public int UseInnerFocusAtPercentage = 90;
        public int UsePainSuppressionAtPercentage = 70;
        public int UsePowerWordBarrierAtPercentage = 60;
        public int UsePowerWordShieldAtPercentage = 100;
        public int UsePrayerofHealingAtPercentage = 50;
        public int UsePrayerofMendingAtPercentage = 50;
        public int UsePsychicScreamAtPercentage = 20;
        public int UsePsyfiendAtPercentage = 35;
        public int UseRenewAtPercentage = 90;
        public int UseSpectralGuiseAtPercentage = 70;
        public int UseStoneformAtPercentage = 80;
        public int UseWarStompAtPercentage = 80;
        public int UseVoidTendrilsAtPercentage = 35;
        public bool UseAlchFlask = true;
        public bool UseArcaneTorrent = true;
        public bool UseArchangel = true;
        public bool UseBerserking = true;
        public bool UseBloodFury = true;
        public bool UseCascade = true;
        public bool UseDesperatePrayer = true;
        public bool UseDivineStar = true;
        public bool UseEngGlove = true;
        public bool UseFlashHealNonCombat = true;
        public bool UseFlashHealInCombat = true;
        public bool UseGiftoftheNaaru = true;
        public bool UseGreaterHeal = true;
        public bool UseHalo = true;
        public bool UseHeal = true;
        public bool UseHolyFire = true;
        public bool UseHymnofHope = true;
        public bool UseInnerFire = true;
        public bool UseInnerFocus = true;
        public bool UseInnerWill = false;
        public bool UseLevitate = false;
        public bool UseLifeblood = true;
        public bool UseMindSear = true;
        public bool UsePainSuppression = true;
        public bool UsePenance = true;
        public bool UsePowerInfusion = true;
        public bool UsePowerWordBarrier = true;
        public bool UsePowerWordFortitude = true;
        public bool UsePowerWordShield = true;
        public bool UsePowerWordSolace = true;
        public bool UsePrayerofHealing = false;
        public bool UsePrayerofMending = true;
        public bool UsePsychicScream = true;
        public bool UsePsyfiend = true;
        public bool UseRenew = true;
        public bool UseShadowWordDeath = true;
        public bool UseShadowWordPain = true;
        public bool UseShadowfiend = true;
        public bool UseSpectralGuise = true;
        public bool UseSpiritShell = true;
        public bool UseSmite = true;
        public bool UseStoneform = true;
        public bool UseTrinket = true;
        public bool UseVoidTendrils = true;
        public bool UseWarStomp = true;

        public PriestDisciplineSettings()
        {
            ConfigWinForm(new Point(500, 400), "Discipline Priest Settings");
            /* Professions and Racials */
            AddControlInWinForm("Use Arcane Torrent", "UseArcaneTorrent", "Professions and Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions and Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions and Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions and Racials", "AtPercentage");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions and Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions and Racials", "AtPercentage");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions and Racials", "AtPercentage");
            /* Priest Buffs */
            AddControlInWinForm("Use Inner Fire", "UseInnerFire", "Priest Buffs");
            AddControlInWinForm("Use Inner Will", "UseInnerWill", "Priest Buffs");
            AddControlInWinForm("Use Levitate", "UseLevitate", "Priest Buffs");
            AddControlInWinForm("Use Power Word: Fortitude", "UsePowerWordFortitude", "Priest Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Cascade", "UseCascade", "Offensive Spell");
            AddControlInWinForm("Use Divine Star", "Use Divine Star", "Offensive Spell");
            AddControlInWinForm("Use Halo", "UseHalo", "Offensive Spell");
            AddControlInWinForm("Use Holy Fire", "UseHolyFire", "Offensive Spell");
            AddControlInWinForm("Use Mind Sear", "UseMindSear", "Offensive Spell");
            AddControlInWinForm("Use Penance", "UsePenance", "Offensive Spell");
            AddControlInWinForm("Use Shadow Word: Death", "UseShadowWordDeath", "Offensive Spell");
            AddControlInWinForm("Use Shadow Word: Pain", "UseShadowWordPain", "Offensive Spell");
            AddControlInWinForm("Use Smite", "UseSmite", "Offensive Spell");
            /* Healing Cooldown */
            AddControlInWinForm("Use Archangel", "UseArchangel", "Healing Cooldown");
            AddControlInWinForm("Use Power Infusion", "UsePowerInfusion", "Healing Cooldown");
            AddControlInWinForm("Use Shadowfiend", "UseShadowfiend", "Healing Cooldown");
            AddControlInWinForm("Use Spirit Shell", "UseSpiritShell", "Healing Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Pain Suppression", "UsePainSuppression", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Power Word: Barrier", "UsePowerWordBarrier", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Power Word: Shield", "UsePowerWordShield", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Psychic Scream", "UsePsychicScream", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Psyfiend", "UsePsyfiend", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Spectral Guise", "UseSpectralGuise", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Void Tendrils", "UseVoidTendrils", "Defensive Cooldown", "AtPercentage");
            /* Healing Spell */
            AddControlInWinForm("Use Desperate Prayer", "UseDesperatePrayer", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Flash Heal for Regeneration after combat", "UseFlashHealNonCombat", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Flash Heal during combat", "UseFlashHealInCombat", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Greater Heal", "UseGreaterHeal", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Heal", "UseHeal", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Hymn of Hope", "UseHymnofHope", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Inner Focus", "UseInnerFocus", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Prayer of Mending", "UsePrayerofMending", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Renew", "UseRenew", "Healing Spell", "AtPercentage");
            /* Game Settings */
            AddControlInWinForm("Use Trinket", "UseTrinket", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
        }

        public static PriestDisciplineSettings CurrentSetting { get; set; }

        public static PriestDisciplineSettings GetSettings()
        {
            string CurrentSettingsFile = Application.StartupPath + "\\CustomClasses\\Settings\\Priest_Discipline.xml";
            if (File.Exists(CurrentSettingsFile))
            {
                return
                    CurrentSetting = Load<PriestDisciplineSettings>(CurrentSettingsFile);
            }
            else
            {
                return new PriestDisciplineSettings();
            }
        }
    }

    #endregion
}

public class Priest_Holy
{
    private readonly PriestHolySettings MySettings = PriestHolySettings.GetSettings();
    private readonly string MoveBackward = nManager.Wow.Helpers.Keybindings.GetKeyByAction(nManager.Wow.Enums.Keybindings.MOVEBACKWARD);

    #region General Timers & Variables

    private Timer AlchFlask_Timer = new Timer(0);
    private Timer Engineering_Timer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer Trinket_Timer = new Timer(0);

    #endregion

    #region Professions and Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell Arcane_Torrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell Blood_Fury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell Gift_of_the_Naaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell War_Stomp = new Spell("War Stomp");

    #endregion

    #region Priest Buffs

    private readonly Spell Chakra_Chastise = new Spell("Chakra: Chastise");
    private readonly Spell Chakra_Sanctuary = new Spell("Chakra: Sanctuary");
    private readonly Spell Chakra_Serenity = new Spell("Chakra: Serenity");
    private readonly Spell Inner_Fire = new Spell("Inner Fire");
    private readonly Spell Inner_Will = new Spell("Inner Will");
    private readonly Spell Levitate = new Spell("Levitate");
    private readonly Spell Power_Word_Fortitude = new Spell("Power Word: Fortitude");
    private Timer Levitate_Timer = new Timer(0);

    #endregion

    #region Offensive Spell

    private readonly Spell Cascade = new Spell("Cascade");
    private readonly Spell Divine_Star = new Spell("Divine Star");
    private readonly Spell Halo = new Spell("Halo");
    private readonly Spell Holy_Word_Chastise = new Spell("Holy Word: Chastise");
    private readonly Spell Mind_Sear = new Spell("Mind Sear");
    private readonly Spell Power_Word_Solace = new Spell("Power Word: Solace");
    private readonly Spell Shadow_Word_Death = new Spell("Shadow Word: Death");
    private readonly Spell Shadow_Word_Pain = new Spell("Shadow Word: Pain");
    private readonly Spell Smite = new Spell("Smite");
    private Timer Shadow_Word_Pain_Timer = new Timer(0);

    #endregion

    #region Healing Cooldown

    private readonly Spell Divine_Hymn = new Spell("Divine Hymn");
    private readonly Spell Light_Well = new Spell("Light Well");
    private readonly Spell Power_Infusion = new Spell("Power Infusion");
    private readonly Spell Shadowfiend = new Spell("Shadowfiend");

    #endregion

    #region Defensive Cooldown

    private readonly Spell Guardian_Spirit = new Spell("Guardian Spirit");
    private readonly Spell Power_Word_Shield = new Spell("Power Word: Shield");
    private readonly Spell Psychic_Scream = new Spell("Psychic Scream");
    private readonly Spell Psyfiend = new Spell("Psyfiend");
    private readonly Spell Spectral_Guise = new Spell("Spectral Guise");
    private readonly Spell Void_Tendrils = new Spell("Void Tendrils");

    #endregion

    #region Healing Spell

    private readonly Spell Circle_of_Healing = new Spell("Circle of Healing");
    private readonly Spell Desperate_Prayer = new Spell("Desperate Prayer");
    private readonly Spell Flash_Heal = new Spell("Flash Heal");
    private readonly Spell Greater_Heal = new Spell("Greater Heal");
    private readonly Spell Heal_Spell = new Spell("Heal");
    private readonly Spell Holy_Fire = new Spell("Holy Fire");
    private readonly Spell Hymn_of_Hope = new Spell("Hymn of Hope");
    private readonly Spell Prayer_of_Healing = new Spell("Prayer of Healing");
    private readonly Spell Prayer_of_Mending = new Spell("Prayer of Mending");
    private readonly Spell Renew = new Spell("Renew");
    private Timer Renew_Timer = new Timer(0);

    #endregion

    public Priest_Holy()
    {
        Main.range = 30.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDead)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        Buff_Levitate();
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget &&
                            (Holy_Fire.IsDistanceGood || Shadow_Word_Pain.IsDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }
                            else
                                Combat();
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void Buff_Levitate()
    {
        if (!Fight.InFight && Levitate.KnownSpell && Levitate.IsSpellUsable && MySettings.UseLevitate
            && (!Levitate.HaveBuff || Levitate_Timer.IsReady))
        {
            Levitate.Launch();
            Levitate_Timer = new Timer(1000*60*9);
        }
    }

    private void Pull()
    {
        if (Holy_Fire.IsSpellUsable && Holy_Fire.KnownSpell && Holy_Fire.IsDistanceGood
            && MySettings.UseHolyFire)
        {
            Holy_Fire.Launch();
            return;
        }
        else
        {
            if (Shadow_Word_Pain.IsSpellUsable && Shadow_Word_Pain.KnownSpell && Shadow_Word_Pain.IsDistanceGood
                && MySettings.UseShadowWordPain)
            {
                Shadow_Word_Pain.Launch();
                Shadow_Word_Pain_Timer = new Timer(1000*14);
                return;
            }
        }
    }

    private void Combat()
    {
        AvoidMelee();
        if (OnCD.IsReady)
            Defense_Cycle();
        Heal();
        Buff();
        Healing_Burst();
        DPS_Cycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (Power_Word_Fortitude.KnownSpell && Power_Word_Fortitude.IsSpellUsable &&
            !Power_Word_Fortitude.HaveBuff && MySettings.UsePowerWordFortitude)
        {
            Power_Word_Fortitude.Launch();
            return;
        }
        else if (Inner_Fire.KnownSpell && Inner_Fire.IsSpellUsable && !Inner_Fire.HaveBuff
                 && MySettings.UseInnerFire)
        {
            Inner_Fire.Launch();
            return;
        }
        else if (Inner_Will.KnownSpell && Inner_Will.IsSpellUsable && !Inner_Will.HaveBuff
                 && !MySettings.UseInnerFire && MySettings.UseInnerWill)
        {
            Inner_Will.Launch();
            return;
        }
        else if (Chakra_Chastise.KnownSpell && Chakra_Chastise.IsSpellUsable && !Chakra_Chastise.HaveBuff
                 && MySettings.UseChakraChastise)
        {
            Chakra_Chastise.Launch();
            return;
        }
        else if (Chakra_Sanctuary.KnownSpell && Chakra_Sanctuary.IsSpellUsable && !Chakra_Sanctuary.HaveBuff
                 && !MySettings.UseChakraChastise && MySettings.UseChakraSanctuary)
        {
            Chakra_Sanctuary.Launch();
            return;
        }
        else if (Chakra_Serenity.KnownSpell && Chakra_Serenity.IsSpellUsable && !Chakra_Serenity.HaveBuff
                 && !MySettings.UseChakraChastise && !MySettings.UseChakraSanctuary && MySettings.UseChakraSerenity)
        {
            Chakra_Serenity.Launch();
            return;
        }
        else
        {
            if (AlchFlask_Timer.IsReady && MySettings.UseAlchFlask
                 && ItemsManager.GetItemCountByIdLUA(75525) == 1)
            {
                Logging.WriteFight("Use Alchi Flask");
                Lua.RunMacroText("/use item:75525");
                AlchFlask_Timer = new Timer(1000*60*60*2);
            }
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            Keyboard.DownKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
            while (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
                Thread.Sleep(300);
            Keyboard.UpKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
        }
    }

    private void Defense_Cycle()
    {
        if (ObjectManager.Me.HealthPercent <= MySettings.UsePsychicScreamAtPercentage && Psychic_Scream.IsSpellUsable && Psychic_Scream.KnownSpell
            && MySettings.UsePsychicScream)
        {
            Psychic_Scream.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseGuardianSpiritAtPercentage && Guardian_Spirit.KnownSpell && Guardian_Spirit.IsSpellUsable
                 && MySettings.UseGuardianSpirit)
        {
            Guardian_Spirit.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() >= 2 && ObjectManager.Me.HealthPercent <= MySettings.UseVoidTendrilsAtPercentage &&
                 Void_Tendrils.IsSpellUsable && Void_Tendrils.KnownSpell && MySettings.UseVoidTendrils)
        {
            Void_Tendrils.Launch();
            OnCD = new Timer(1000*10);
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() >= 2 && ObjectManager.Me.HealthPercent <= MySettings.UsePsyfiendAtPercentage &&
                 Psyfiend.IsSpellUsable && Psyfiend.KnownSpell && MySettings.UsePsyfiend)
        {
            Psyfiend.Launch();
            OnCD = new Timer(1000*10);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseSpectralGuiseAtPercentage && Spectral_Guise.IsSpellUsable && Spectral_Guise.KnownSpell
                 && MySettings.UseSpectralGuise)
        {
            if (Renew.KnownSpell && Renew.IsSpellUsable && MySettings.UseRenew)
            {
                Renew.Launch();
                Thread.Sleep(1500);
            }
            Spectral_Guise.Launch();
            OnCD = new Timer(1000*3);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable && Stoneform.KnownSpell
                 && MySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent <= MySettings.UseWarStompAtPercentage && War_Stomp.IsSpellUsable && War_Stomp.KnownSpell
                && MySettings.UseWarStomp)
            {
                War_Stomp.Launch();
                OnCD = new Timer(1000*2);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.HealthPercent <= MySettings.UseFlashHealNonCombatAtPercentage && !Fight.InFight && ObjectManager.GetNumberAttackPlayer() == 0
            && Flash_Heal.KnownSpell && Flash_Heal.IsSpellUsable && MySettings.UseFlashHealNonCombat)
        {
            Flash_Heal.Launch(false);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseDivineHymnAtPercentage && Divine_Hymn.KnownSpell && Divine_Hymn.IsSpellUsable
                 && MySettings.UseDivineHymn)
        {
            Divine_Hymn.Launch();
            return;
        }
        else if (!Fight.InFight && ObjectManager.Me.ManaPercentage <= MySettings.UseHymnofHopeAtPercentage && Hymn_of_Hope.KnownSpell
                 && Hymn_of_Hope.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() == 0 && MySettings.UseHymnofHope)
        {
            Hymn_of_Hope.Launch(false);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseDesperatePrayerAtPercentage && Desperate_Prayer.KnownSpell && Desperate_Prayer.IsSpellUsable
                 && MySettings.UseDesperatePrayer)
        {
            Desperate_Prayer.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseFlashHealInCombatAtPercentage && Flash_Heal.KnownSpell && Flash_Heal.IsSpellUsable
                 && MySettings.UseFlashHealInCombat)
        {
            Flash_Heal.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseGreaterHealAtPercentage && Greater_Heal.KnownSpell && Greater_Heal.IsSpellUsable
                 && MySettings.UseGreaterHeal)
        {
            Greater_Heal.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseGiftoftheNaaruAtPercentage && Gift_of_the_Naaru.IsSpellUsable && Gift_of_the_Naaru.KnownSpell
                 && MySettings.UseGiftoftheNaaru)
        {
            Gift_of_the_Naaru.Launch();
            return;
        }
        else if (Power_Word_Shield.KnownSpell && Power_Word_Shield.IsSpellUsable
                 && !Power_Word_Shield.HaveBuff && MySettings.UsePowerWordShield
                 && !ObjectManager.Me.HaveBuff(6788) && ObjectManager.Me.HealthPercent <= MySettings.UsePowerWordShieldAtPercentage
                 && (ObjectManager.GetNumberAttackPlayer() > 0 || ObjectManager.Me.GetMove))
        {
            Power_Word_Shield.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UsePrayerofHealingAtPercentage && Prayer_of_Healing.KnownSpell && Prayer_of_Healing.IsSpellUsable
                 && MySettings.UsePrayerofHealing)
        {
            Prayer_of_Healing.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseCircleofHealingAtPercentage && Circle_of_Healing.KnownSpell && Circle_of_Healing.IsSpellUsable
                 && MySettings.UseCircleofHealing)
        {
            SpellManager.CastSpellByIDAndPosition(34861, ObjectManager.Me.Position);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UsePrayerofMendingAtPercentage && Prayer_of_Mending.KnownSpell && Prayer_of_Mending.IsSpellUsable
                 && MySettings.UsePrayerofMending)
        {
            Prayer_of_Mending.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseHealAtPercentage && Heal_Spell.KnownSpell && Heal_Spell.IsSpellUsable
                 && (MySettings.UseHeal || !Greater_Heal.KnownSpell))
        {
            Heal_Spell.Launch();
            return;
        }
        else if (Light_Well.KnownSpell && Light_Well.IsSpellUsable && MySettings.UseGlyphofLightspring
                 && ObjectManager.Me.HealthPercent <= MySettings.UseLightWellAtPercentage && MySettings.UseLightWell)
        {
            SpellManager.CastSpellByIDAndPosition(724, ObjectManager.Target.Position);
            return;
        }
        else
        {
            if (Renew.KnownSpell && Renew.IsSpellUsable && !Renew.HaveBuff &&
                ObjectManager.Me.HealthPercent <= MySettings.UseRenewAtPercentage && MySettings.UseRenew)
            {
                Renew.Launch();
                return;
            }
        }
    }

    private void Healing_Burst()
    {
        if (MySettings.UseTrinket && Trinket_Timer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Trinket_Timer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBerserking)
            Berserking.Launch();
        else if (Blood_Fury.IsSpellUsable && Blood_Fury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBloodFury)
            Blood_Fury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (Engineering_Timer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                && MySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            Engineering_Timer = new Timer(1000*60);
        }
        else if (Power_Infusion.IsSpellUsable && Power_Infusion.KnownSpell
                 && MySettings.UsePowerInfusion && ObjectManager.Target.GetDistance < 40)
        {
            Power_Infusion.Launch();
            return;
        }
        else
        {
            if (Shadowfiend.IsSpellUsable && Shadowfiend.KnownSpell && Shadowfiend.IsDistanceGood
                && MySettings.UseShadowfiend)
            {
                Shadowfiend.Launch();
                return;
            }
        }
    }

    private void DPS_Cycle()
    {
        if (ObjectManager.Me.ManaPercentage < 80 && Arcane_Torrent.KnownSpell && Arcane_Torrent.IsSpellUsable
            && MySettings.UseArcaneTorrent)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 2 && Cascade.IsSpellUsable && Cascade.KnownSpell
                 && Cascade.IsDistanceGood && MySettings.UseCascade)
        {
            Cascade.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 2 && Divine_Star.IsSpellUsable && Divine_Star.KnownSpell
                 && Divine_Star.IsDistanceGood && MySettings.UseDivineStar)
        {
            Divine_Star.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 2 && Halo.IsSpellUsable && Halo.KnownSpell
                 && Halo.IsDistanceGood && MySettings.UseHalo)
        {
            Halo.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 4 && Mind_Sear.IsSpellUsable && Mind_Sear.KnownSpell
                 && Mind_Sear.IsDistanceGood && !ObjectManager.Me.IsCast && MySettings.UseMindSear)
        {
            Mind_Sear.Launch();
            return;
        }
        else if (Shadow_Word_Death.IsSpellUsable && Shadow_Word_Death.IsDistanceGood && Shadow_Word_Death.KnownSpell
                 && ObjectManager.Target.HealthPercent < 20 && MySettings.UseShadowWordDeath)
        {
            Shadow_Word_Death.Launch();
            return;
        }
        else if (Shadow_Word_Pain.KnownSpell && Shadow_Word_Pain.IsSpellUsable
                 && Shadow_Word_Pain.IsDistanceGood && MySettings.UseShadowWordPain
                 && (!Shadow_Word_Pain.TargetHaveBuff || Shadow_Word_Pain_Timer.IsReady))
        {
            Shadow_Word_Pain.Launch();
            Shadow_Word_Pain_Timer = new Timer(1000*14);
            return;
        }
        else if (Power_Word_Solace.KnownSpell && Power_Word_Solace.IsDistanceGood
                 && Power_Word_Solace.IsSpellUsable && MySettings.UsePowerWordSolace
                 && ObjectManager.Me.ManaPercentage < 50)
        {
            Power_Word_Solace.Launch();
            return;
        }
        else if (Holy_Word_Chastise.IsSpellUsable && Holy_Word_Chastise.IsDistanceGood && Holy_Word_Chastise.KnownSpell
                 && MySettings.UseHolyWordChastise)
        {
            Holy_Word_Chastise.Launch();
            return;
        }
        else if (Holy_Fire.IsSpellUsable && Holy_Fire.IsDistanceGood && Holy_Fire.KnownSpell
                 && MySettings.UseHolyFire)
        {
            Holy_Fire.Launch();
            return;
        }
        else if (Smite.IsSpellUsable && Smite.KnownSpell && Smite.IsDistanceGood
                 && MySettings.UseSmite && Shadow_Word_Pain.TargetHaveBuff
                 && ObjectManager.GetNumberAttackPlayer() < 5)
        {
            Smite.Launch();
            return;
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: PriestHolySettings

    [Serializable]
    public class PriestHolySettings : Settings
    {
        public int UseCircleofHealingAtPercentage = 50;
        public int UseDesperatePrayerAtPercentage = 65;
        public int UseDivineHymnAtPercentage = 30;
        public int UseFlashHealNonCombatAtPercentage = 95;
        public int UseFlashHealInCombatAtPercentage = 60;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public int UseGreaterHealAtPercentage = 70;
        public int UseGuardianSpiritAtPercentage = 20;
        public int UseHealAtPercentage = 70;
        public int UseHymnofHopeAtPercentage = 40;
        public int UseLightWellAtPercentage = 95;
        public int UsePowerWordShieldAtPercentage = 100;
        public int UsePrayerofHealingAtPercentage = 50;
        public int UsePrayerofMendingAtPercentage = 50;
        public int UsePsychicScreamAtPercentage = 20;
        public int UsePsyfiendAtPercentage = 35;
        public int UseRenewAtPercentage = 90;
        public int UseSpectralGuiseAtPercentage = 70;
        public int UseStoneformAtPercentage = 80;
        public int UseWarStompAtPercentage = 80;
        public int UseVoidTendrilsAtPercentage = 35;
        public bool UseAlchFlask = true;
        public bool UseArcaneTorrent = true;
        public bool UseArchangel = true;
        public bool UseBerserking = true;
        public bool UseBloodFury = true;
        public bool UseCascade = true;
        public bool UseChakraChastise = true;
        public bool UseChakraSanctuary = false;
        public bool UseChakraSerenity = false;
        public bool UseCircleofHealing = false;
        public bool UseDesperatePrayer = true;
        public bool UseDivineHymn = true;
        public bool UseDivineStar = true;
        public bool UseEngGlove = true;
        public bool UseFlashHealNonCombat = true;
        public bool UseFlashHealInCombat = true;
        public bool UseGiftoftheNaaru = true;
        public bool UseGlyphofLightspring = false;
        public bool UseGreaterHeal = true;
        public bool UseGuardianSpirit = true;
        public bool UseHalo = true;
        public bool UseHeal = true;
        public bool UseHolyFire = true;
        public bool UseHolyWordChastise = true;
        public bool UseHymnofHope = true;
        public bool UseInnerFire = true;
        public bool UseInnerWill = false;
        public bool UseLevitate = false;
        public bool UseLifeblood = true;
        public bool UseLightWell = true;
        public bool UseMindSear = true;
        public bool UsePowerInfusion = true;
        public bool UsePowerWordFortitude = true;
        public bool UsePowerWordShield = true;
        public bool UsePowerWordSolace = true;
        public bool UsePrayerofHealing = false;
        public bool UsePrayerofMending = true;
        public bool UsePsychicScream = true;
        public bool UsePsyfiend = true;
        public bool UseRenew = true;
        public bool UseShadowWordDeath = true;
        public bool UseShadowWordPain = true;
        public bool UseShadowfiend = true;
        public bool UseSpectralGuise = true;
        public bool UseSmite = true;
        public bool UseStoneform = true;
        public bool UseTrinket = true;
        public bool UseVoidTendrils = true;
        public bool UseWarStomp = true;

        public PriestHolySettings()
        {
            ConfigWinForm(new Point(500, 400), "Holy Priest Settings");
            /* Professions and Racials */
            AddControlInWinForm("Use Arcane Torrent", "UseArcaneTorrent", "Professions and Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions and Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions and Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions and Racials", "AtPercentage");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions and Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions and Racials", "AtPercentage");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions and Racials", "AtPercentage");
            /* Priest Buffs */
            AddControlInWinForm("Use Chakra: Chastise", "UseChakraChastise", "Priest Buffs");
            AddControlInWinForm("Use Chakra: Sanctuary", "UseChakraSanctuary", "Priest Buffs");
            AddControlInWinForm("Use Chakra: Serenity", "UseChakraSerenity", "Priest Buffs");
            AddControlInWinForm("Use Inner Fire", "UseInnerFire", "Priest Buffs");
            AddControlInWinForm("Use Inner Will", "UseInnerWill", "Priest Buffs");
            AddControlInWinForm("Use Levitate", "UseLevitate", "Priest Buffs");
            AddControlInWinForm("Use Power Word: Fortitude", "UsePowerWordFortitude", "Priest Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Cascade", "UseCascade", "Offensive Spell");
            AddControlInWinForm("Use Divine Star", "Use Divine Star", "Offensive Spell");
            AddControlInWinForm("Use Halo", "UseHalo", "Offensive Spell");
            AddControlInWinForm("Use Holy Fire", "UseHolyFire", "Offensive Spell");
            AddControlInWinForm("Use Holy Word: Chastise", "UseHolyWordChastise", "Offensive Spell");
            AddControlInWinForm("Use Mind Sear", "UseMindSear", "Offensive Spell");
            AddControlInWinForm("Use Shadow Word: Death", "UseShadowWordDeath", "Offensive Spell");
            AddControlInWinForm("Use Shadow Word: Pain", "UseShadowWordPain", "Offensive Spell");
            AddControlInWinForm("Use Smite", "UseSmite", "Offensive Spell");
            /* Healing Cooldown */
            AddControlInWinForm("Use Divine Hymn", "UseDivineHymn", "Healing Cooldown", "AtPercentage");
            AddControlInWinForm("Use Light Well", "UseLightWell", "Healing Cooldown", "AtPercentage");
            AddControlInWinForm("Use Power Infusion", "UsePowerInfusion", "Healing Cooldown");
            AddControlInWinForm("Use Shadowfiend", "UseShadowfiend", "Healing Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Guardian Spirit", "UseGuardianSpirit", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Power Word: Shield", "UsePowerWordShield", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Psychic Scream", "UsePsychicScream", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Psyfiend", "UsePsyfiend", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Spectral Guise", "UseSpectralGuise", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Void Tendrils", "UseVoidTendrils", "Defensive Cooldown", "AtPercentage");
            /* Healing Spell */
            AddControlInWinForm("Use Circle of Healing", "UseCircleofHealing", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Desperate Prayer", "UseDesperatePrayer", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Flash Heal for Regeneration after combat", "UseFlashHealNonCombat", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Flash Heal during combat", "UseFlashHealInCombat", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Greater Heal", "UseGreaterHeal", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Heal", "UseHeal", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Hymn of Hope", "UseHymnofHope", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Prayer of Mending", "UsePrayerofMending", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Renew", "UseRenew", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Use Trinket", "UseTrinket", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Use Glyph of Lightspring", "UseGlyphofLightspring", "Game Settings");
        }

        public static PriestHolySettings CurrentSetting { get; set; }

        public static PriestHolySettings GetSettings()
        {
            string CurrentSettingsFile = Application.StartupPath + "\\CustomClasses\\Settings\\Priest_Holy.xml";
            if (File.Exists(CurrentSettingsFile))
            {
                return
                    CurrentSetting = Load<PriestHolySettings>(CurrentSettingsFile);
            }
            else
            {
                return new PriestHolySettings();
            }
        }
    }

    #endregion
}

#endregion

#region Rogue

public class Rogue_Combat
{
    private readonly RogueCombatSettings MySettings = RogueCombatSettings.GetSettings();
    private readonly string MoveBackward = nManager.Wow.Helpers.Keybindings.GetKeyByAction(nManager.Wow.Enums.Keybindings.MOVEBACKWARD);

    #region General Timers & Variables

    private Timer AlchFlask_Timer = new Timer(0);
    private Timer Engineering_Timer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer Trinket_Timer = new Timer(0);
    public int CP = 0;
    public int LC = 0;

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell Arcane_Torrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell Blood_Fury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell Gift_of_the_Naaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell War_Stomp = new Spell("War Stomp");

    #endregion

    #region Rogue Buffs

    private readonly Spell Blade_Flurry = new Spell("Blade Flurry");
    private readonly Spell Burst_of_Speed = new Spell("Burst of Speed");
    private readonly Spell Crippling_Poison = new Spell("Crippling Poison");
    private readonly Spell Deadly_Poison = new Spell("Deadly Poison");
    private readonly Spell Leeching_Poison = new Spell("Leeching Poison");
    private readonly Spell Mindnumbing_Poison = new Spell("Mind-numbing Poison");
    private readonly Spell Paralytic_Poison = new Spell("Paralytic Poison");
    private readonly Spell Slice_and_Dice = new Spell("Slice and Dice");
    private readonly Spell Sprint = new Spell("Sprint");
    private readonly Spell Stealth = new Spell("Stealth");
    private readonly Spell Wound_Poison = new Spell("Wound Poison");
    private Timer Slice_and_Dice_Timer = new Timer(0);

    #endregion

    #region Offensive Spell

    private readonly Spell Ambush = new Spell("Ambush");
    private readonly Spell Crimson_Tempest = new Spell("Crimson Tempest");
    private readonly Spell Deadly_Throw = new Spell("Deadly Throw");
    private readonly Spell Eviscerate = new Spell("Eviscerate");
    private readonly Spell Expose_Armor = new Spell("Expose Armor");
    private readonly Spell Fan_of_Knives = new Spell("Fan of Knives");
    private readonly Spell Garrote = new Spell("Garrote");
    private readonly Spell Revealing_Strike = new Spell("Revealing Strike");
    private readonly Spell Rupture = new Spell("Rupture");
    private readonly Spell Shiv = new Spell("Shiv");
    private readonly Spell Shuriken_Toss = new Spell("Shuriken Toss");
    private readonly Spell Sinister_Strike = new Spell("Sinister Strike");
    private readonly Spell Throw = new Spell("Throw");
    private Timer Rupture_Timer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell Adrenaline_Rush = new Spell("Adrenaline Rush");
    private readonly Spell Killing_Spree = new Spell("Killing Spree");
    private readonly Spell Redirect = new Spell("Redirect");
    private readonly Spell Shadow_Blades = new Spell("Shadow Blades");
    private readonly Spell Shadow_Step = new Spell("Shadow Step");
    private readonly Spell Vendetta = new Spell("Vendetta");

    #endregion

    #region Defensive Cooldown

    private readonly Spell Cheap_Shot = new Spell("Cheap Shot");
    private readonly Spell Cloak_of_Shadows = new Spell("Cloak of Shadows");
    private readonly Spell Combat_Readiness = new Spell("Combat Readiness");
    private readonly Spell Dismantle = new Spell("Dismantle");
    private readonly Spell Evasion = new Spell("Evasion");
    private readonly Spell Kick = new Spell("Kick");
    private readonly Spell Kidney_Shot = new Spell("Kidney Shot");
    private readonly Spell Preparation = new Spell("Preparation");
    private readonly Spell Smoke_Bomb = new Spell("Smoke Bomb");
    private readonly Spell Vanish = new Spell("Vanish");
    private Timer Dismantle_Timer = new Timer(0);

    #endregion

    #region Healing Spell

    private readonly Spell Recuperate = new Spell("Recuperate");

    #endregion

    public Rogue_Combat()
    {
        Main.range = 5.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (Throw.IsDistanceGood || Cheap_Shot.IsDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && MySettings.UseLowCombat)
                            {
                                LC = 1;
                                LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(250);
        }
    }

    private void Pull()
    {
        if (Redirect.IsSpellUsable && Redirect.IsDistanceGood && Redirect.KnownSpell
            && MySettings.UseRedirect && ObjectManager.Me.ComboPoint > 0)
        {
            Redirect.Launch();
            Thread.Sleep(200);
        }

        if (((Stealth.KnownSpell && Stealth.IsSpellUsable && !Stealth.HaveBuff && MySettings.UseStealth)
             || Stealth.HaveBuff) && LC != 1)
        {
            if (!Stealth.HaveBuff)
            {
                Stealth.Launch();
                Thread.Sleep(200);
            }

            if (Shadow_Step.IsSpellUsable && Shadow_Step.IsDistanceGood && Shadow_Step.KnownSpell
                && MySettings.UseShadowStep)
            {
                Shadow_Step.Launch();
                Thread.Sleep(200);
            }

            if (Garrote.IsSpellUsable && Garrote.IsDistanceGood && Garrote.KnownSpell
                && MySettings.UseGarrote)
            {
                Garrote.Launch();
                return;
            }
            else
            {
                if (Cheap_Shot.IsSpellUsable && Cheap_Shot.IsDistanceGood && Cheap_Shot.KnownSpell
                    && MySettings.UseCheapShot)
                {
                    Cheap_Shot.Launch();
                    return;
                }
            }
        }
        else if (Shuriken_Toss.IsSpellUsable && Shuriken_Toss.IsDistanceGood && Shuriken_Toss.KnownSpell
                 && MySettings.UseShurikenToss && !MySettings.UseStealth)
        {
            Shuriken_Toss.Launch();
            return;
        }
        else
        {
            if (Throw.IsSpellUsable && Throw.IsDistanceGood && Throw.KnownSpell
                && MySettings.UseThrow && !MySettings.UseStealth)
            {
                MovementManager.StopMove();
                Throw.Launch();
                Thread.Sleep(1000);
                return;
            }
        }
    }

    private void LowCombat()
    {
        Buff();
        AvoidMelee();
        Defense_Cycle();
        Heal();

        if (Throw.IsSpellUsable && Throw.IsDistanceGood && Throw.KnownSpell && !ObjectManager.Target.InCombat
            && MySettings.UseThrow)
        {
            Throw.Launch();
            return;
        }

        if (Eviscerate.KnownSpell && Eviscerate.IsSpellUsable && Eviscerate.IsDistanceGood
            && MySettings.UseEviscerate && ObjectManager.Me.ComboPoint > 4)
        {
            Eviscerate.Launch();
            return;
        }
        else if (Revealing_Strike.KnownSpell && Revealing_Strike.IsSpellUsable && Revealing_Strike.IsDistanceGood
                 && MySettings.UseRevealingStrike)
        {
            Revealing_Strike.Launch();
            return;
        }
        else if (Sinister_Strike.KnownSpell && Sinister_Strike.IsSpellUsable && Sinister_Strike.IsDistanceGood
                 && MySettings.UseSinisterStrike)
        {
            Sinister_Strike.Launch();
            return;
        }
        else
        {
            if (Slice_and_Dice.KnownSpell && Slice_and_Dice.IsSpellUsable && Slice_and_Dice.IsDistanceGood
                && MySettings.UseSliceandDice && !Slice_and_Dice.HaveBuff)
            {
                CP = ObjectManager.Me.ComboPoint;
                Slice_and_Dice.Launch();
                Slice_and_Dice_Timer = new Timer(1000*(6 + (CP*6)));
                return;
            }
        }

        if (Fan_of_Knives.KnownSpell && Fan_of_Knives.IsSpellUsable && Fan_of_Knives.IsDistanceGood
            && MySettings.UseFanofKnives)
        {
            Fan_of_Knives.Launch();
            return;
        }
    }

    private void Combat()
    {
        Buff();
        AvoidMelee();
        if (OnCD.IsReady)
            Defense_Cycle();
        Heal();
        Decast();
        DPS_Burst();
        DPS_Cycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (MySettings.UseDeadlyPoison && Deadly_Poison.KnownSpell && Deadly_Poison.IsSpellUsable
            && !Deadly_Poison.HaveBuff)
        {
            Deadly_Poison.Launch();
            return;
        }
        else
        {
            if (!Wound_Poison.HaveBuff && Wound_Poison.KnownSpell && Wound_Poison.IsSpellUsable
                && MySettings.UseWoundPoison && !Deadly_Poison.HaveBuff)
            {
                Wound_Poison.Launch();
                return;
            }
        }

        if (!Leeching_Poison.HaveBuff && Leeching_Poison.KnownSpell && Leeching_Poison.IsSpellUsable
            && MySettings.UseLeechingPoison)
        {
            Leeching_Poison.Launch();
            return;
        }
        else if (!Paralytic_Poison.HaveBuff && Paralytic_Poison.KnownSpell && Paralytic_Poison.IsSpellUsable
                 && MySettings.UseParalyticPoison && !Leeching_Poison.HaveBuff)
        {
            Paralytic_Poison.Launch();
            return;
        }
        else if (!Crippling_Poison.HaveBuff && Crippling_Poison.KnownSpell && Crippling_Poison.IsSpellUsable
                 && MySettings.UseCripplingPoison && !Leeching_Poison.HaveBuff && Paralytic_Poison.HaveBuff)
        {
            Crippling_Poison.Launch();
            return;
        }
        else
        {
            if (!Mindnumbing_Poison.HaveBuff && Mindnumbing_Poison.KnownSpell && Mindnumbing_Poison.IsSpellUsable
                && MySettings.UseMindnumbingPoison && !Crippling_Poison.HaveBuff && !Paralytic_Poison.HaveBuff
                && !Leeching_Poison.HaveBuff)
            {
                Mindnumbing_Poison.Launch();
                return;
            }
        }

        if (ObjectManager.GetNumberAttackPlayer() == 0 && Burst_of_Speed.IsSpellUsable && Burst_of_Speed.KnownSpell
            && MySettings.UseBurstofSpeed && ObjectManager.Me.GetMove)
        {
            Burst_of_Speed.Launch();
            return;
        }
        else
        {
            if (ObjectManager.GetNumberAttackPlayer() == 0 && Sprint.IsSpellUsable && Sprint.KnownSpell
                && MySettings.UseSprint && ObjectManager.Me.GetMove)
            {
                Sprint.Launch();
                return;
            }
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            Keyboard.DownKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
            while (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
                Thread.Sleep(300);
            Keyboard.UpKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
        }
    }

    private void Defense_Cycle()
    {
        if (ObjectManager.Me.HealthPercent <= 80 && !Kidney_Shot.TargetHaveBuff && Kidney_Shot.KnownSpell
            && Kidney_Shot.IsSpellUsable && Kidney_Shot.IsDistanceGood && ObjectManager.Me.ComboPoint <= 3
            && Recuperate.HaveBuff && MySettings.UseKidneyShot)
        {
            CP = ObjectManager.Me.ComboPoint;
            Kidney_Shot.Launch();
            OnCD = new Timer(1000*CP);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= 80 && Evasion.KnownSpell && Evasion.IsSpellUsable
                 && MySettings.UseEvasion)
        {
            Evasion.Launch();
            OnCD = new Timer(1000*15);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= 90 && Combat_Readiness.KnownSpell && Combat_Readiness.IsSpellUsable
                 && MySettings.UseCombatReadiness)
        {
            Combat_Readiness.Launch();
            OnCD = new Timer(1000*20);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= 95 && Dismantle.KnownSpell && Dismantle.IsSpellUsable
                 && MySettings.UseDismantle)
        {
            Dismantle.Launch();
            Dismantle_Timer = new Timer(1000*60);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseWarStompAtPercentage && War_Stomp.IsSpellUsable && War_Stomp.KnownSpell
                 && MySettings.UseWarStomp)
        {
            War_Stomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable && Stoneform.KnownSpell
                 && MySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else
        {
            if (ObjectManager.GetNumberAttackPlayer() >= 3 && Vanish.KnownSpell && Vanish.IsSpellUsable
                && MySettings.UseVanish)
            {
                Vanish.Launch();
                Thread.Sleep(5000);
                return;
            }
        }

        if (ObjectManager.Me.HealthPercent <= 70 && Preparation.KnownSpell && Preparation.IsSpellUsable
            && MySettings.UsePreparation && !Evasion.IsSpellUsable)
        {
            Preparation.Launch();
            return;
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (ObjectManager.Me.HealthPercent <= MySettings.UseGiftoftheNaaruAtPercentage && Gift_of_the_Naaru.KnownSpell && Gift_of_the_Naaru.IsSpellUsable
            && MySettings.UseGiftoftheNaaru)
        {
            Gift_of_the_Naaru.Launch();
            return;
        }
        else
        {
            if (!Recuperate.HaveBuff && ObjectManager.Me.ComboPoint > 1 && MySettings.UseRecuperate
                && ObjectManager.Me.HealthPercent <= 90 && Recuperate.KnownSpell && Recuperate.IsSpellUsable)
            {
                Recuperate.Launch();
                return;
            }
        }
    }

    private void Decast()
    {
        if (ObjectManager.Target.IsCast && Kick.KnownSpell && Kick.IsSpellUsable
            && Kick.IsDistanceGood && MySettings.UseKick && ObjectManager.Target.IsTargetingMe)
        {
            Kick.Launch();
            return;
        }
        else if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell && ObjectManager.Target.GetDistance < 8
                && ObjectManager.Me.HealthPercent <= MySettings.UseArcaneTorrentForDecastAtPercentage
                && MySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && Cloak_of_Shadows.KnownSpell && Cloak_of_Shadows.IsSpellUsable
                 && ObjectManager.Target.IsTargetingMe && MySettings.UseCloakofShadows)
        {
            Cloak_of_Shadows.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.IsCast && Smoke_Bomb.KnownSpell && Smoke_Bomb.IsSpellUsable
                && ObjectManager.Target.IsTargetingMe && MySettings.UseSmokeBomb
                && !Cloak_of_Shadows.HaveBuff)
            {
                Smoke_Bomb.Launch();
                return;
            }
        }

        if (ObjectManager.Me.HealthPercent <= 70 && Preparation.KnownSpell && Preparation.IsSpellUsable
            && MySettings.UsePreparation && !Cloak_of_Shadows.IsSpellUsable && ObjectManager.Target.IsCast
            && ObjectManager.Target.IsTargetingMe)
        {
            Preparation.Launch();
            return;
        }
    }

    private void DPS_Burst()
    {
        if (MySettings.UseTrinket && Trinket_Timer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Trinket_Timer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBerserking)
            Berserking.Launch();
        else if (Blood_Fury.IsSpellUsable && Blood_Fury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBloodFury)
            Blood_Fury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (Engineering_Timer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                && MySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            Engineering_Timer = new Timer(1000*60);
        }
        else if (Adrenaline_Rush.KnownSpell && Adrenaline_Rush.IsSpellUsable
                 && MySettings.UseAdrenalineRush && ObjectManager.Target.GetDistance < 30)
        {
            Adrenaline_Rush.Launch();
            return;
        }
        else if (Killing_Spree.KnownSpell && Killing_Spree.IsSpellUsable
                 && MySettings.UseKillingSpree && ObjectManager.Target.GetDistance < 10
                 && ObjectManager.Me.EnergyPercentage < 35)
        {
            Killing_Spree.Launch();
            return;
        }
        else
        {
            if (Shadow_Blades.KnownSpell && Shadow_Blades.IsSpellUsable
                && MySettings.UseShadowBlades && ObjectManager.Target.GetDistance < 30)
            {
                Shadow_Blades.Launch();
                return;
            }
        }
    }

    private void DPS_Cycle()
    {
        if (Garrote.IsSpellUsable && Garrote.IsDistanceGood && Garrote.KnownSpell
            && MySettings.UseGarrote && ObjectManager.Me.HaveBuff(115192))
        {
            Garrote.Launch();
            return;
        }

        if (Throw.IsSpellUsable && Throw.IsDistanceGood && Throw.KnownSpell && !ObjectManager.Target.InCombat
            && MySettings.UseThrow)
        {
            Throw.Launch();
            return;
        }

        if (Blade_Flurry.KnownSpell && Blade_Flurry.IsSpellUsable && ObjectManager.Target.GetDistance < 10
            && MySettings.UseBladeFlurry && !Blade_Flurry.HaveBuff && ObjectManager.GetNumberAttackPlayer() > 1)
        {
            Blade_Flurry.Launch();
            return;
        }
        else
        {
            if (Blade_Flurry.KnownSpell && Blade_Flurry.IsSpellUsable && Sinister_Strike.IsDistanceGood
                && Blade_Flurry.HaveBuff && ObjectManager.GetNumberAttackPlayer() < 2)
            {
                Blade_Flurry.Launch();
                return;
            }
        }

        if (Eviscerate.KnownSpell && Eviscerate.IsSpellUsable && Eviscerate.IsDistanceGood
            && MySettings.UseEviscerate && ObjectManager.Me.ComboPoint > 4)
        {
            Eviscerate.Launch();
            return;
        }
        else if (Revealing_Strike.KnownSpell && Revealing_Strike.IsSpellUsable && Revealing_Strike.IsDistanceGood
                 && MySettings.UseRevealingStrike && !Revealing_Strike.TargetHaveBuff)
        {
            Revealing_Strike.Launch();
            return;
        }
        else if (Slice_and_Dice.KnownSpell && Slice_and_Dice.IsSpellUsable && Slice_and_Dice.IsDistanceGood
                 && MySettings.UseSliceandDice && !Slice_and_Dice.HaveBuff)
        {
            CP = ObjectManager.Me.ComboPoint;
            Slice_and_Dice.Launch();
            Slice_and_Dice_Timer = new Timer(1000*(6 + (CP*6)));
            return;
        }
        else if (Rupture.KnownSpell && Rupture.IsDistanceGood && Rupture.IsSpellUsable
                 && MySettings.UseRupture && (!Rupture.TargetHaveBuff || Rupture_Timer.IsReady))
        {
            CP = ObjectManager.Me.ComboPoint;
            Rupture.Launch();
            Rupture_Timer = new Timer(1000*(4 + (CP*4)));
            return;
        }
        else if (Expose_Armor.IsSpellUsable && Expose_Armor.IsDistanceGood && Expose_Armor.KnownSpell
                 && MySettings.UseExposeArmor && !ObjectManager.Target.HaveBuff(113746))
        {
            Expose_Armor.Launch();
            return;
        }
        else if (Sinister_Strike.KnownSpell && Sinister_Strike.IsSpellUsable && Sinister_Strike.IsDistanceGood
                && MySettings.UseSinisterStrike)
        {
            Sinister_Strike.Launch();
            return;
        }
        else
        {
            if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell
                && MySettings.UseArcaneTorrentForResource)
            {
                Arcane_Torrent.Launch();
                return;
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: RogueCombatSettings

    [Serializable]
    public class RogueCombatSettings : Settings
    {
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public int UseStoneformAtPercentage = 80;
        public int UseWarStompAtPercentage = 80;
        public bool UseAdrenalineRush = true;
        public bool UseAlchFlask = true;
        public bool UseAmbush = true;
        public bool UseArcaneTorrentForDecast = true;
        public bool UseArcaneTorrentForResource = true;
        public bool UseBerserking = true;
        public bool UseBladeFlurry = true;
        public bool UseBloodFury = true;
        public bool UseBurstofSpeed = true;
        public bool UseCheapShot = true;
        public bool UseCloakofShadows = true;
        public bool UseCombatReadiness = true;
        public bool UseCrimsonTempest = true;
        public bool UseCripplingPoison = false;
        public bool UseDeadlyPoison = true;
        public bool UseDeadlyThrow = true;
        public bool UseDismantle = true;
        public bool UseEngGlove = true;
        public bool UseEvasion = true;
        public bool UseEviscerate = true;
        public bool UseExposeArmor = false;
        public bool UseFanofKnives = true;
        public bool UseGarrote = true;
        public bool UseGiftoftheNaaru = true;
        public bool UseKick = true;
        public bool UseKidneyShot = true;
        public bool UseKillingSpree = true;
        public bool UseLeechingPoison = true;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMindnumbingPoison = true;
        public bool UseParalyticPoison = false;
        public bool UsePreparation = true;
        public bool UseRecuperate = true;
        public bool UseRedirect = true;
        public bool UseRevealingStrike = true;
        public bool UseRupture = true;
        public bool UseShadowBlades = true;
        public bool UseShadowStep = true;
        public bool UseShiv = true;
        public bool UseShurikenToss = true;
        public bool UseSinisterStrike = true;
        public bool UseSliceandDice = true;
        public bool UseSmokeBomb = true;
        public bool UseSprint = true;
        public bool UseStealth = false;
        public bool UseStoneform = true;
        public bool UseThrow = true;
        public bool UseTrinket = true;
        public bool UseVanish = true;
        public bool UseWarStomp = true;
        public bool UseWoundPoison = false;

        public RogueCombatSettings()
        {
            ConfigWinForm(new Point(500, 400), "Rogue Combat Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrent", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Rogue Buffs */
            AddControlInWinForm("Use Blade Flurry", "UseBladeFlurry", "Rogue Buffs");
            AddControlInWinForm("Use Burst of Speed", "UseBurstofSpeed", "Rogue Buffs");
            AddControlInWinForm("Use Crippling Poison", "UseCripplingPoison", "Rogue Buffs");
            AddControlInWinForm("Use Deadly Poison", "UseDeadlyPoison", "Rogue Buffs");
            AddControlInWinForm("Use Leeching Poison", "UseLeechingPoison", "Rogue Buffs");
            AddControlInWinForm("Use Mindnumbing Poison", "UseMindnumbingPoison", "Rogue Buffs");
            AddControlInWinForm("Use Paralytic Poison", "UseParalyticPoison", "Rogue Buffs");
            AddControlInWinForm("Use Slice and Dice", "UseSliceandDice", "Rogue Buffs");
            AddControlInWinForm("Use Sprint", "UseSprint", "Rogue Buffs");
            AddControlInWinForm("Use Stealth", "UseStealth", "Rogue Buffs");
            AddControlInWinForm("Use Wound Poison", "UseWoundPoison", "Rogue Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Ambush", "UseAmbush", "Offensive Spell");
            AddControlInWinForm("Use Crimson Tempest", "UseCrimsonTempest", "Offensive Spell");
            AddControlInWinForm("Use Deadly Throw", "UseDeadlyThrow", "Offensive Spell");
            AddControlInWinForm("Use Eviscerate", "UseEviscerate", "Offensive Spell");
            AddControlInWinForm("Use Expose Armor", "UseExposeArmor", "Offensive Spell");
            AddControlInWinForm("Use Fan of Knives", "UseFanofKnives", "Offensive Spell");
            AddControlInWinForm("Use Garrote", "UseGarrote", "Offensive Spell");
            AddControlInWinForm("Use Revealing Strike", "UseRevealingStrike", "Offensive Spell");
            AddControlInWinForm("Use Rupture", "UseRupture", "Offensive Spell");
            AddControlInWinForm("Use Shiv", "UseShiv", "Offensive Spell");
            AddControlInWinForm("Use Shuriken Toss", "UseShurikenToss", "Offensive Spell");
            AddControlInWinForm("Use Sinister Strike", "UseSinisterStrike", "Offensive Spell");
            AddControlInWinForm("Use Throw", "UseThrow", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Adrenaline Rush", "UseAdrenalineRush", "Offensive Cooldown");
            AddControlInWinForm("Use Killing Spree", "UseKillingSpree", "Offensive Cooldown");
            AddControlInWinForm("Use Redirect", "UseRedirect", "Offensive Cooldown");
            AddControlInWinForm("Use Shadow Blades", "UseShadowBlades", "Offensive Cooldown");
            AddControlInWinForm("Use Shadow Step", "UseShadowStep", "Offensive Cooldown");
            AddControlInWinForm("Use Vendetta", "UseVendetta", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use CheapShot", "UseCheapShot", "Defensive Cooldown");
            AddControlInWinForm("Use CloakofShadows", "UseCloakofShadows", "Defensive Cooldown");
            AddControlInWinForm("Use CombatReadiness", "UseCombatReadiness", "Defensive Cooldown");
            AddControlInWinForm("Use Dismantle", "UseDismantle", "Defensive Cooldown");
            AddControlInWinForm("Use Evasion", "UseEvasion", "Defensive Cooldown");
            AddControlInWinForm("Use Kick", "UseKick", "Defensive Cooldown");
            AddControlInWinForm("Use KidneyShot", "UseKidneyShot", "Defensive Cooldown");
            AddControlInWinForm("Use Preparation", "UsePreparation", "Defensive Cooldown");
            AddControlInWinForm("Use SmokeBomb", "UseSmokeBomb", "Defensive Cooldown");
            AddControlInWinForm("Use Vanish", "UseVanish", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Recuperate", "UseRecuperate", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket", "UseTrinket", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
        }

        public static RogueCombatSettings CurrentSetting { get; set; }

        public static RogueCombatSettings GetSettings()
        {
            string CurrentSettingsFile = Application.StartupPath + "\\CustomClasses\\Settings\\Rogue_Combat.xml";
            if (File.Exists(CurrentSettingsFile))
            {
                return
                    CurrentSetting = Load<RogueCombatSettings>(CurrentSettingsFile);
            }
            else
            {
                return new RogueCombatSettings();
            }
        }
    }

    #endregion
}

public class Rogue_Subtlety
{
    private readonly RogueSubtletySettings MySettings = RogueSubtletySettings.GetSettings();
    private readonly string MoveBackward = nManager.Wow.Helpers.Keybindings.GetKeyByAction(nManager.Wow.Enums.Keybindings.MOVEBACKWARD);

    #region General Timers & Variables

    private Timer AlchFlask_Timer = new Timer(0);
    private Timer Engineering_Timer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer Trinket_Timer = new Timer(0);
    public int CP = 0;
    public int LC = 0;

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell Arcane_Torrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell Blood_Fury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell Gift_of_the_Naaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell War_Stomp = new Spell("War Stomp");

    #endregion

    #region Rogue Buffs

    private readonly Spell Burst_of_Speed = new Spell("Burst of Speed");
    private readonly Spell Crippling_Poison = new Spell("Crippling Poison");
    private readonly Spell Deadly_Poison = new Spell("Deadly Poison");
    private readonly Spell Leeching_Poison = new Spell("Leeching Poison");
    private readonly Spell Mindnumbing_Poison = new Spell("Mind-numbing Poison");
    private readonly Spell Paralytic_Poison = new Spell("Paralytic Poison");
    private readonly Spell Slice_and_Dice = new Spell("Slice and Dice");
    private readonly Spell Sprint = new Spell("Sprint");
    private readonly Spell Stealth = new Spell("Stealth");
    private readonly Spell Wound_Poison = new Spell("Wound Poison");
    private Timer Slice_and_Dice_Timer = new Timer(0);

    #endregion

    #region Offensive Spell

    private readonly Spell Ambush = new Spell("Ambush");
    private readonly Spell Crimson_Tempest = new Spell("Crimson Tempest");
    private readonly Spell Deadly_Throw = new Spell("Deadly Throw");
    private readonly Spell Eviscerate = new Spell("Eviscerate");
    private readonly Spell Expose_Armor = new Spell("Expose Armor");
    private readonly Spell Fan_of_Knives = new Spell("Fan of Knives");
    private readonly Spell Garrote = new Spell("Garrote");
    private readonly Spell Hemorrhage = new Spell("Hemorrhage");
    private readonly Spell Rupture = new Spell("Rupture");
    private readonly Spell Shiv = new Spell("Shiv");
    private readonly Spell Shuriken_Toss = new Spell("Shuriken Toss");
    private readonly Spell Sinister_Strike = new Spell("Sinister Strike");
    private readonly Spell Throw = new Spell("Throw");
    private Timer Rupture_Timer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell Premeditation = new Spell("Premeditation");
    private readonly Spell Redirect = new Spell("Redirect");
    private readonly Spell Shadow_Blades = new Spell("Shadow Blades");
    private readonly Spell Shadow_Dance = new Spell("Shadow Dance");
    private readonly Spell Shadow_Step = new Spell("Shadow Step");

    #endregion

    #region Defensive Cooldown

    private readonly Spell Cheap_Shot = new Spell("Cheap Shot");
    private readonly Spell Cloak_of_Shadows = new Spell("Cloak of Shadows");
    private readonly Spell Combat_Readiness = new Spell("Combat Readiness");
    private readonly Spell Dismantle = new Spell("Dismantle");
    private readonly Spell Evasion = new Spell("Evasion");
    private readonly Spell Kick = new Spell("Kick");
    private readonly Spell Kidney_Shot = new Spell("Kidney Shot");
    private readonly Spell Preparation = new Spell("Preparation");
    private readonly Spell Smoke_Bomb = new Spell("Smoke Bomb");
    private readonly Spell Vanish = new Spell("Vanish");
    private Timer Dismantle_Timer = new Timer(0);

    #endregion

    #region Healing Spell

    private readonly Spell Recuperate = new Spell("Recuperate");

    #endregion

    public Rogue_Subtlety()
    {
        Main.range = 5.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (Throw.IsDistanceGood || Cheap_Shot.IsDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && MySettings.UseLowCombat)
                            {
                                LC = 1;
                                LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(250);
        }
    }

    private void Pull()
    {
        if (Redirect.IsSpellUsable && Redirect.IsDistanceGood && Redirect.KnownSpell
            && MySettings.UseRedirect && ObjectManager.Me.ComboPoint > 0)
        {
            Redirect.Launch();
            Thread.Sleep(200);
        }

        if (((Stealth.KnownSpell && Stealth.IsSpellUsable && !Stealth.HaveBuff && MySettings.UseStealth)
             || Stealth.HaveBuff) && LC != 1)
        {
            if (!Stealth.HaveBuff)
            {
                Stealth.Launch();
                Thread.Sleep(200);
            }

            if (Premeditation.IsSpellUsable && Premeditation.IsDistanceGood && Premeditation.KnownSpell
                && MySettings.UsePremeditation && ObjectManager.Me.ComboPoint == 0)
            {
                Premeditation.Launch();
                Thread.Sleep(200);
            }

            if (Shadow_Step.IsSpellUsable && Shadow_Step.IsDistanceGood && Shadow_Step.KnownSpell
                && MySettings.UseShadowStep)
            {
                Shadow_Step.Launch();
                Thread.Sleep(200);
            }

            if (Garrote.IsSpellUsable && Garrote.IsDistanceGood && Garrote.KnownSpell
                && MySettings.UseGarrote)
            {
                Garrote.Launch();
                return;
            }
            else
            {
                if (Cheap_Shot.IsSpellUsable && Cheap_Shot.IsDistanceGood && Cheap_Shot.KnownSpell
                    && MySettings.UseCheapShot)
                {
                    Cheap_Shot.Launch();
                    return;
                }
            }
        }
        else if (Shuriken_Toss.IsSpellUsable && Shuriken_Toss.IsDistanceGood && Shuriken_Toss.KnownSpell
                 && MySettings.UseShurikenToss && !MySettings.UseStealth)
        {
            Shuriken_Toss.Launch();
            return;
        }
        else
        {
            if (Throw.IsSpellUsable && Throw.IsDistanceGood && Throw.KnownSpell
                && MySettings.UseThrow && !MySettings.UseStealth)
            {
                MovementManager.StopMove();
                Throw.Launch();
                Thread.Sleep(1000);
                return;
            }
        }
    }

    private void LowCombat()
    {
        Buff();
        AvoidMelee();
        Defense_Cycle();
        Heal();

        if (Throw.IsSpellUsable && Throw.IsDistanceGood && Throw.KnownSpell && !ObjectManager.Target.InCombat
            && MySettings.UseThrow)
        {
            Throw.Launch();
            return;
        }

        if (Eviscerate.KnownSpell && Eviscerate.IsSpellUsable && Eviscerate.IsDistanceGood
            && MySettings.UseEviscerate && ObjectManager.Me.ComboPoint > 4)
        {
            Eviscerate.Launch();
            return;
        }
        else if (Slice_and_Dice.KnownSpell && Slice_and_Dice.IsSpellUsable && Slice_and_Dice.IsDistanceGood
                 && MySettings.UseSliceandDice && !Slice_and_Dice.HaveBuff)
        {
            CP = ObjectManager.Me.ComboPoint;
            Slice_and_Dice.Launch();
            Slice_and_Dice_Timer = new Timer(1000*(6 + (CP*6)));
            return;
        }
        else
        {
            // Blizzard API Calls for Hemorrhage using Sinister Strike Function
            if (Sinister_Strike.KnownSpell && Sinister_Strike.IsSpellUsable && Sinister_Strike.IsDistanceGood
                && MySettings.UseHemorrhage)
            {
                Sinister_Strike.Launch();
                return;
            }
        }

        if (Fan_of_Knives.KnownSpell && Fan_of_Knives.IsSpellUsable && Fan_of_Knives.IsDistanceGood
            && MySettings.UseFanofKnives)
        {
            Fan_of_Knives.Launch();
            return;
        }
    }

    private void Combat()
    {
        Buff();
        AvoidMelee();
        if (OnCD.IsReady)
            Defense_Cycle();
        Heal();
        Decast();
        DPS_Burst();
        DPS_Cycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (MySettings.UseDeadlyPoison && Deadly_Poison.KnownSpell && Deadly_Poison.IsSpellUsable
            && !Deadly_Poison.HaveBuff)
        {
            Deadly_Poison.Launch();
            return;
        }
        else
        {
            if (!Wound_Poison.HaveBuff && Wound_Poison.KnownSpell && Wound_Poison.IsSpellUsable
                && MySettings.UseWoundPoison && !Deadly_Poison.HaveBuff)
            {
                Wound_Poison.Launch();
                return;
            }
        }

        if (!Leeching_Poison.HaveBuff && Leeching_Poison.KnownSpell && Leeching_Poison.IsSpellUsable
            && MySettings.UseLeechingPoison)
        {
            Leeching_Poison.Launch();
            return;
        }
        else if (!Paralytic_Poison.HaveBuff && Paralytic_Poison.KnownSpell && Paralytic_Poison.IsSpellUsable
                 && MySettings.UseParalyticPoison && !Leeching_Poison.HaveBuff)
        {
            Paralytic_Poison.Launch();
            return;
        }
        else if (!Crippling_Poison.HaveBuff && Crippling_Poison.KnownSpell && Crippling_Poison.IsSpellUsable
                 && MySettings.UseCripplingPoison && !Leeching_Poison.HaveBuff && Paralytic_Poison.HaveBuff)
        {
            Crippling_Poison.Launch();
            return;
        }
        else
        {
            if (!Mindnumbing_Poison.HaveBuff && Mindnumbing_Poison.KnownSpell && Mindnumbing_Poison.IsSpellUsable
                && MySettings.UseMindnumbingPoison && !Crippling_Poison.HaveBuff && !Paralytic_Poison.HaveBuff
                && !Leeching_Poison.HaveBuff)
            {
                Mindnumbing_Poison.Launch();
                return;
            }
        }

        if (ObjectManager.GetNumberAttackPlayer() == 0 && Burst_of_Speed.IsSpellUsable && Burst_of_Speed.KnownSpell
            && MySettings.UseBurstofSpeed && ObjectManager.Me.GetMove)
        {
            Burst_of_Speed.Launch();
            return;
        }
        else
        {
            if (ObjectManager.GetNumberAttackPlayer() == 0 && Sprint.IsSpellUsable && Sprint.KnownSpell
                && MySettings.UseSprint && ObjectManager.Me.GetMove)
            {
                Sprint.Launch();
                return;
            }
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            Keyboard.DownKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
            while (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
                Thread.Sleep(300);
            Keyboard.UpKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
        }
    }

    private void Defense_Cycle()
    {
        if (ObjectManager.Me.HealthPercent <= 80 && !Kidney_Shot.TargetHaveBuff && Kidney_Shot.KnownSpell
            && Kidney_Shot.IsSpellUsable && Kidney_Shot.IsDistanceGood && ObjectManager.Me.ComboPoint <= 3
            && Recuperate.HaveBuff && MySettings.UseKidneyShot)
        {
            CP = ObjectManager.Me.ComboPoint;
            Kidney_Shot.Launch();
            OnCD = new Timer(1000*CP);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= 80 && Evasion.KnownSpell && Evasion.IsSpellUsable
                 && MySettings.UseEvasion)
        {
            Evasion.Launch();
            OnCD = new Timer(1000*15);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= 90 && Combat_Readiness.KnownSpell && Combat_Readiness.IsSpellUsable
                 && MySettings.UseCombatReadiness)
        {
            Combat_Readiness.Launch();
            OnCD = new Timer(1000*20);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= 95 && Dismantle.KnownSpell && Dismantle.IsSpellUsable
                 && MySettings.UseDismantle)
        {
            Dismantle.Launch();
            Dismantle_Timer = new Timer(1000*60);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseWarStompAtPercentage && War_Stomp.IsSpellUsable && War_Stomp.KnownSpell
                 && MySettings.UseWarStomp)
        {
            War_Stomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable && Stoneform.KnownSpell
                 && MySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else
        {
            if (ObjectManager.GetNumberAttackPlayer() >= 3 && Vanish.KnownSpell && Vanish.IsSpellUsable
                && MySettings.UseVanish)
            {
                Vanish.Launch();
                Thread.Sleep(5000);
                return;
            }
        }

        if (ObjectManager.Me.HealthPercent <= 70 && Preparation.KnownSpell && Preparation.IsSpellUsable
            && MySettings.UsePreparation && !Evasion.IsSpellUsable)
        {
            Preparation.Launch();
            return;
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (ObjectManager.Me.HealthPercent <= MySettings.UseGiftoftheNaaruAtPercentage && Gift_of_the_Naaru.KnownSpell && Gift_of_the_Naaru.IsSpellUsable
            && MySettings.UseGiftoftheNaaru)
        {
            Gift_of_the_Naaru.Launch();
            return;
        }
        else
        {
            if (!Recuperate.HaveBuff && ObjectManager.Me.ComboPoint > 1 && MySettings.UseRecuperate
                && ObjectManager.Me.HealthPercent <= 90 && Recuperate.KnownSpell && Recuperate.IsSpellUsable)
            {
                Recuperate.Launch();
                return;
            }
        }
    }

    private void Decast()
    {
        if (ObjectManager.Target.IsCast && Kick.KnownSpell && Kick.IsSpellUsable
            && Kick.IsDistanceGood && MySettings.UseKick && ObjectManager.Target.IsTargetingMe)
        {
            Kick.Launch();
            return;
        }
        else if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell && ObjectManager.Target.GetDistance < 8
                && ObjectManager.Me.HealthPercent <= MySettings.UseArcaneTorrentForDecastAtPercentage
                && MySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && Cloak_of_Shadows.KnownSpell && Cloak_of_Shadows.IsSpellUsable
                 && ObjectManager.Target.IsTargetingMe && MySettings.UseCloakofShadows)
        {
            Cloak_of_Shadows.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.IsCast && Smoke_Bomb.KnownSpell && Smoke_Bomb.IsSpellUsable
                && ObjectManager.Target.IsTargetingMe && MySettings.UseSmokeBomb
                && !Cloak_of_Shadows.HaveBuff)
            {
                Smoke_Bomb.Launch();
                return;
            }
        }

        if (ObjectManager.Me.HealthPercent <= 70 && Preparation.KnownSpell && Preparation.IsSpellUsable
            && MySettings.UsePreparation && !Cloak_of_Shadows.IsSpellUsable && ObjectManager.Target.IsCast
            && ObjectManager.Target.IsTargetingMe)
        {
            Preparation.Launch();
            return;
        }
    }

    private void DPS_Burst()
    {
        if (MySettings.UseTrinket && Trinket_Timer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Trinket_Timer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBerserking)
            Berserking.Launch();
        else if (Blood_Fury.IsSpellUsable && Blood_Fury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBloodFury)
            Blood_Fury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (Engineering_Timer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                && MySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            Engineering_Timer = new Timer(1000*60);
        }
        else if (Shadow_Dance.KnownSpell && Shadow_Dance.IsSpellUsable
                 && MySettings.UseShadowDance && ObjectManager.Target.GetDistance < 10)
        {
            Shadow_Dance.Launch();
            return;
        }
        else
        {
            if (Shadow_Blades.KnownSpell && Shadow_Blades.IsSpellUsable
                && MySettings.UseShadowBlades && ObjectManager.Target.GetDistance < 30)
            {
                Shadow_Blades.Launch();
                return;
            }
        }
    }

    private void DPS_Cycle()
    {
        if (ObjectManager.Me.HaveBuff(115192) || ObjectManager.Me.HaveBuff(51713))
        {
            if (Garrote.IsSpellUsable && Garrote.IsDistanceGood && Garrote.KnownSpell
                && MySettings.UseGarrote && !ObjectManager.Target.HaveBuff(703))
            {
                Garrote.Launch();
                return;
            }
        }

        if (Throw.IsSpellUsable && Throw.IsDistanceGood && Throw.KnownSpell && !ObjectManager.Target.InCombat
            && MySettings.UseThrow)
        {
            Throw.Launch();
            return;
        }

        if (Eviscerate.KnownSpell && Eviscerate.IsSpellUsable && Eviscerate.IsDistanceGood
            && MySettings.UseEviscerate && ObjectManager.Me.ComboPoint > 4)
        {
            Eviscerate.Launch();
            return;
        }
        else if (Slice_and_Dice.KnownSpell && Slice_and_Dice.IsSpellUsable && Slice_and_Dice.IsDistanceGood
                 && MySettings.UseSliceandDice && !Slice_and_Dice.HaveBuff)
        {
            CP = ObjectManager.Me.ComboPoint;
            Slice_and_Dice.Launch();
            Slice_and_Dice_Timer = new Timer(1000*(6 + (CP*6)));
            return;
        }
        else if (Rupture.KnownSpell && Rupture.IsDistanceGood && Rupture.IsSpellUsable
                 && MySettings.UseRupture && (!Rupture.TargetHaveBuff || Rupture_Timer.IsReady))
        {
            CP = ObjectManager.Me.ComboPoint;
            Rupture.Launch();
            Rupture_Timer = new Timer(1000*(4 + (CP*4)));
            return;
        }
        else if (Expose_Armor.IsSpellUsable && Expose_Armor.IsDistanceGood && Expose_Armor.KnownSpell
                 && MySettings.UseExposeArmor && !ObjectManager.Target.HaveBuff(113746))
        {
            Expose_Armor.Launch();
            return;
        }
        else if (Sinister_Strike.KnownSpell && Sinister_Strike.IsSpellUsable && Sinister_Strike.IsDistanceGood
                && MySettings.UseHemorrhage)
        {
            Sinister_Strike.Launch();
            return;
        }
        else
        {
            if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell
                && MySettings.UseArcaneTorrentForResource)
            {
                Arcane_Torrent.Launch();
                return;
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: RogueSubtletySettings

    [Serializable]
    public class RogueSubtletySettings : Settings
    {
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public int UseStoneformAtPercentage = 80;
        public int UseWarStompAtPercentage = 80;
        public bool UseAlchFlask = true;
        public bool UseAmbush = true;
        public bool UseArcaneTorrentForDecast = true;
        public bool UseArcaneTorrentForResource = true;
        public bool UseBerserking = true;
        public bool UseBloodFury = true;
        public bool UseBurstofSpeed = true;
        public bool UseCheapShot = true;
        public bool UseCloakofShadows = true;
        public bool UseCombatReadiness = true;
        public bool UseCrimsonTempest = true;
        public bool UseCripplingPoison = false;
        public bool UseDeadlyPoison = true;
        public bool UseDeadlyThrow = true;
        public bool UseDismantle = true;
        public bool UseEngGlove = true;
        public bool UseEvasion = true;
        public bool UseEviscerate = true;
        public bool UseExposeArmor = false;
        public bool UseFanofKnives = true;
        public bool UseGarrote = true;
        public bool UseGiftoftheNaaru = true;
        public bool UseHemorrhage = true;
        public bool UseKick = true;
        public bool UseKidneyShot = true;
        public bool UseLeechingPoison = true;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMindnumbingPoison = true;
        public bool UseParalyticPoison = false;
        public bool UsePremeditation = true;
        public bool UsePreparation = true;
        public bool UseRecuperate = true;
        public bool UseRedirect = true;
        public bool UseRupture = true;
        public bool UseShadowBlades = true;
        public bool UseShadowDance = true;
        public bool UseShadowStep = true;
        public bool UseShiv = true;
        public bool UseShurikenToss = true;
        public bool UseSliceandDice = true;
        public bool UseSmokeBomb = true;
        public bool UseSprint = true;
        public bool UseStealth = false;
        public bool UseStoneform = true;
        public bool UseThrow = true;
        public bool UseTrinket = true;
        public bool UseVanish = true;
        public bool UseWarStomp = true;
        public bool UseWoundPoison = false;

        public RogueSubtletySettings()
        {
            ConfigWinForm(new Point(500, 400), "Rogue Subtlety Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrent", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Rogue Buffs */
            AddControlInWinForm("Use Burst of Speed", "UseBurstofSpeed", "Rogue Buffs");
            AddControlInWinForm("Use Crippling Poison", "UseCripplingPoison", "Rogue Buffs");
            AddControlInWinForm("Use Deadly Poison", "UseDeadlyPoison", "Rogue Buffs");
            AddControlInWinForm("Use Leeching Poison", "UseLeechingPoison", "Rogue Buffs");
            AddControlInWinForm("Use Mindnumbing Poison", "UseMindnumbingPoison", "Rogue Buffs");
            AddControlInWinForm("Use Paralytic Poison", "UseParalyticPoison", "Rogue Buffs");
            AddControlInWinForm("Use Slice and Dice", "UseSliceandDice", "Rogue Buffs");
            AddControlInWinForm("Use Sprint", "UseSprint", "Rogue Buffs");
            AddControlInWinForm("Use Stealth", "UseStealth", "Rogue Buffs");
            AddControlInWinForm("Use Wound Poison", "UseWoundPoison", "Rogue Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Ambush", "UseAmbush", "Offensive Spell");
            AddControlInWinForm("Use Crimson Tempest", "UseCrimsonTempest", "Offensive Spell");
            AddControlInWinForm("Use Deadly Throw", "UseDeadlyThrow", "Offensive Spell");
            AddControlInWinForm("Use Expose Armor", "UseExposeArmor", "Offensive Spell");
            AddControlInWinForm("Use Fan of Knives", "UseFanofKnives", "Offensive Spell");
            AddControlInWinForm("Use Eviscerate", "UseEviscerate", "Offensive Spell");
            AddControlInWinForm("Use Garrote", "UseGarrote", "Offensive Spell");
            AddControlInWinForm("Use Hemorrhage", "UseHemorrhage", "Offensive Spell");
            AddControlInWinForm("Use Rupture", "UseRupture", "Offensive Spell");
            AddControlInWinForm("Use Shiv", "UseShiv", "Offensive Spell");
            AddControlInWinForm("Use Shuriken Toss", "UseShurikenToss", "Offensive Spell");
            AddControlInWinForm("Use Throw", "UseThrow", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Premeditation", "UsePremeditation", "Offensive Cooldown");
            AddControlInWinForm("Use Redirect", "UseRedirect", "Offensive Cooldown");
            AddControlInWinForm("Use Shadow Blades", "UseShadowBlades", "Offensive Cooldown");
            AddControlInWinForm("Use Shadow Dance", "UseShadowDance", "Offensive Cooldown");
            AddControlInWinForm("Use Shadow Step", "UseShadowStep", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use CheapShot", "UseCheapShot", "Defensive Cooldown");
            AddControlInWinForm("Use CloakofShadows", "UseCloakofShadows", "Defensive Cooldown");
            AddControlInWinForm("Use CombatReadiness", "UseCombatReadiness", "Defensive Cooldown");
            AddControlInWinForm("Use Dismantle", "UseDismantle", "Defensive Cooldown");
            AddControlInWinForm("Use Evasion", "UseEvasion", "Defensive Cooldown");
            AddControlInWinForm("Use Kick", "UseKick", "Defensive Cooldown");
            AddControlInWinForm("Use KidneyShot", "UseKidneyShot", "Defensive Cooldown");
            AddControlInWinForm("Use Preparation", "UsePreparation", "Defensive Cooldown");
            AddControlInWinForm("Use SmokeBomb", "UseSmokeBomb", "Defensive Cooldown");
            AddControlInWinForm("Use Vanish", "UseVanish", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Recuperate", "UseRecuperate", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket", "UseTrinket", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
        }

        public static RogueSubtletySettings CurrentSetting { get; set; }

        public static RogueSubtletySettings GetSettings()
        {
            string CurrentSettingsFile = Application.StartupPath + "\\CustomClasses\\Settings\\Rogue_Subtlety.xml";
            if (File.Exists(CurrentSettingsFile))
            {
                return
                    CurrentSetting = Load<RogueSubtletySettings>(CurrentSettingsFile);
            }
            else
            {
                return new RogueSubtletySettings();
            }
        }
    }

    #endregion
}

public class Rogue_Assassination
{
    private readonly RogueAssassinationSettings MySettings = RogueAssassinationSettings.GetSettings();
    private readonly string MoveBackward = nManager.Wow.Helpers.Keybindings.GetKeyByAction(nManager.Wow.Enums.Keybindings.MOVEBACKWARD);

    #region General Timers & Variables

    private Timer AlchFlask_Timer = new Timer(0);
    private Timer Engineering_Timer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer Trinket_Timer = new Timer(0);
    public int CP = 0;
    public int LC = 0;

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell Arcane_Torrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell Blood_Fury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell Gift_of_the_Naaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell War_Stomp = new Spell("War Stomp");

    #endregion

    #region Rogue Buffs

    private readonly Spell Burst_of_Speed = new Spell("Burst of Speed");
    private readonly Spell Crippling_Poison = new Spell("Crippling Poison");
    private readonly Spell Deadly_Poison = new Spell("Deadly Poison");
    private readonly Spell Leeching_Poison = new Spell("Leeching Poison");
    private readonly Spell Mindnumbing_Poison = new Spell("Mind-numbing Poison");
    private readonly Spell Paralytic_Poison = new Spell("Paralytic Poison");
    private readonly Spell Slice_and_Dice = new Spell("Slice and Dice");
    private readonly Spell Sprint = new Spell("Sprint");
    private readonly Spell Stealth = new Spell("Stealth");
    private readonly Spell Wound_Poison = new Spell("Wound Poison");
    private Timer Slice_and_Dice_Timer = new Timer(0);

    #endregion

    #region Offensive Spell

    private readonly Spell Ambush = new Spell("Ambush");
    private readonly Spell Crimson_Tempest = new Spell("Crimson Tempest");
    private readonly Spell Deadly_Throw = new Spell("Deadly Throw");
    private readonly Spell Dispatch = new Spell("Dispatch");
    private readonly Spell Envenom = new Spell("Envenom");
    private readonly Spell Eviscerate = new Spell("Eviscerate");
    private readonly Spell Expose_Armor = new Spell("Expose Armor");
    private readonly Spell Fan_of_Knives = new Spell("Fan of Knives");
    private readonly Spell Garrote = new Spell("Garrote");
    private readonly Spell Mutilate = new Spell("Mutilate");
    private readonly Spell Rupture = new Spell("Rupture");
    private readonly Spell Shiv = new Spell("Shiv");
    private readonly Spell Shuriken_Toss = new Spell("Shuriken Toss");
    private readonly Spell Sinister_Strike = new Spell("Sinister Strike");
    private readonly Spell Throw = new Spell("Throw");
    private Timer Rupture_Timer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell Redirect = new Spell("Redirect");
    private readonly Spell Shadow_Blades = new Spell("Shadow Blades");
    private readonly Spell Shadow_Step = new Spell("Shadow Step");
    private readonly Spell Vendetta = new Spell("Vendetta");

    #endregion

    #region Defensive Cooldown

    private readonly Spell Cheap_Shot = new Spell("Cheap Shot");
    private readonly Spell Cloak_of_Shadows = new Spell("Cloak of Shadows");
    private readonly Spell Combat_Readiness = new Spell("Combat Readiness");
    private readonly Spell Dismantle = new Spell("Dismantle");
    private readonly Spell Evasion = new Spell("Evasion");
    private readonly Spell Kick = new Spell("Kick");
    private readonly Spell Kidney_Shot = new Spell("Kidney Shot");
    private readonly Spell Preparation = new Spell("Preparation");
    private readonly Spell Smoke_Bomb = new Spell("Smoke Bomb");
    private readonly Spell Vanish = new Spell("Vanish");
    private Timer Dismantle_Timer = new Timer(0);

    #endregion

    #region Healing Spell

    private readonly Spell Recuperate = new Spell("Recuperate");

    #endregion

    public Rogue_Assassination()
    {
        Main.range = 5.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (Throw.IsDistanceGood || Cheap_Shot.IsDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && MySettings.UseLowCombat)
                            {
                                LC = 1;
                                LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(250);
        }
    }

    private void Pull()
    {
        if (Redirect.IsSpellUsable && Redirect.IsDistanceGood && Redirect.KnownSpell
            && MySettings.UseRedirect && ObjectManager.Me.ComboPoint > 0)
        {
            Redirect.Launch();
            Thread.Sleep(200);
        }

        if (((Stealth.KnownSpell && Stealth.IsSpellUsable && !Stealth.HaveBuff && MySettings.UseStealth)
             || Stealth.HaveBuff) && LC != 1)
        {
            if (!Stealth.HaveBuff)
            {
                Stealth.Launch();
                Thread.Sleep(200);
            }

            if (Shadow_Step.IsSpellUsable && Shadow_Step.IsDistanceGood && Shadow_Step.KnownSpell
                && MySettings.UseShadowStep)
            {
                Shadow_Step.Launch();
                Thread.Sleep(200);
            }

            if (Garrote.IsSpellUsable && Garrote.IsDistanceGood && Garrote.KnownSpell
                && MySettings.UseGarrote)
            {
                Garrote.Launch();
                return;
            }
            else
            {
                if (Cheap_Shot.IsSpellUsable && Cheap_Shot.IsDistanceGood && Cheap_Shot.KnownSpell
                    && MySettings.UseCheapShot)
                {
                    Cheap_Shot.Launch();
                    return;
                }
            }
        }
        else if (Shuriken_Toss.IsSpellUsable && Shuriken_Toss.IsDistanceGood && Shuriken_Toss.KnownSpell
                 && MySettings.UseShurikenToss && !MySettings.UseStealth)
        {
            Shuriken_Toss.Launch();
            return;
        }
        else
        {
            if (Throw.IsSpellUsable && Throw.IsDistanceGood && Throw.KnownSpell
                && MySettings.UseThrow && !MySettings.UseStealth)
            {
                MovementManager.StopMove();
                Throw.Launch();
                Thread.Sleep(1000);
                return;
            }
        }
    }

    private void LowCombat()
    {
        Buff();
        AvoidMelee();
        Defense_Cycle();
        Heal();

        if (Throw.IsSpellUsable && Throw.IsDistanceGood && Throw.KnownSpell && !ObjectManager.Target.InCombat
            && MySettings.UseThrow)
        {
            Throw.Launch();
            return;
        }
        // Blizzard API Calls for Envenom using Eviscerate Function
        if (Eviscerate.KnownSpell && Eviscerate.IsSpellUsable && Eviscerate.IsDistanceGood
            && MySettings.UseEnvenom && (ObjectManager.Me.ComboPoint > 4
                                         || (Slice_and_Dice.HaveBuff && Slice_and_Dice_Timer.IsReady)))
        {
            Eviscerate.Launch();
            if (Slice_and_Dice.HaveBuff)
                Slice_and_Dice_Timer = new Timer(1000*(6 + (5*6)));
            return;
        }
        // Blizzard API Calls for Dispatch using Sinister Strike Function
        else if (Sinister_Strike.KnownSpell && Sinister_Strike.IsSpellUsable && Sinister_Strike.IsDistanceGood
                 && MySettings.UseDispatch)
        {
            Sinister_Strike.Launch();
            return;
        }
        else if (Slice_and_Dice.KnownSpell && Slice_and_Dice.IsSpellUsable && Slice_and_Dice.IsDistanceGood
                 && MySettings.UseSliceandDice && !Slice_and_Dice.HaveBuff)
        {
            CP = ObjectManager.Me.ComboPoint;
            Slice_and_Dice.Launch();
            Slice_and_Dice_Timer = new Timer(1000*(6 + (CP*6)));
            return;
        }
        else
        {
            if (Mutilate.KnownSpell && Mutilate.IsSpellUsable && ObjectManager.Target.HealthPercent > 35
                && MySettings.UseMutilate && Mutilate.IsDistanceGood)
            {
                Mutilate.Launch();
                return;
            }
        }

        if (Fan_of_Knives.KnownSpell && Fan_of_Knives.IsSpellUsable && Fan_of_Knives.IsDistanceGood
            && MySettings.UseFanofKnives)
        {
            Fan_of_Knives.Launch();
            return;
        }
    }

    private void Combat()
    {
        Buff();
        AvoidMelee();
        if (OnCD.IsReady)
            Defense_Cycle();
        Heal();
        Decast();
        DPS_Burst();
        DPS_Cycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (MySettings.UseDeadlyPoison && Deadly_Poison.KnownSpell && Deadly_Poison.IsSpellUsable
            && !Deadly_Poison.HaveBuff)
        {
            Deadly_Poison.Launch();
            return;
        }
        else
        {
            if (!Wound_Poison.HaveBuff && Wound_Poison.KnownSpell && Wound_Poison.IsSpellUsable
                && MySettings.UseWoundPoison && !Deadly_Poison.HaveBuff)
            {
                Wound_Poison.Launch();
                return;
            }
        }

        if (!Leeching_Poison.HaveBuff && Leeching_Poison.KnownSpell && Leeching_Poison.IsSpellUsable
            && MySettings.UseLeechingPoison)
        {
            Leeching_Poison.Launch();
            return;
        }
        else if (!Paralytic_Poison.HaveBuff && Paralytic_Poison.KnownSpell && Paralytic_Poison.IsSpellUsable
                 && MySettings.UseParalyticPoison && !Leeching_Poison.HaveBuff)
        {
            Paralytic_Poison.Launch();
            return;
        }
        else if (!Crippling_Poison.HaveBuff && Crippling_Poison.KnownSpell && Crippling_Poison.IsSpellUsable
                 && MySettings.UseCripplingPoison && !Leeching_Poison.HaveBuff && Paralytic_Poison.HaveBuff)
        {
            Crippling_Poison.Launch();
            return;
        }
        else
        {
            if (!Mindnumbing_Poison.HaveBuff && Mindnumbing_Poison.KnownSpell && Mindnumbing_Poison.IsSpellUsable
                && MySettings.UseMindnumbingPoison && !Crippling_Poison.HaveBuff && !Paralytic_Poison.HaveBuff
                && !Leeching_Poison.HaveBuff)
            {
                Mindnumbing_Poison.Launch();
                return;
            }
        }

        if (ObjectManager.GetNumberAttackPlayer() == 0 && Burst_of_Speed.IsSpellUsable && Burst_of_Speed.KnownSpell
            && MySettings.UseBurstofSpeed && ObjectManager.Me.GetMove)
        {
            Burst_of_Speed.Launch();
            return;
        }
        else
        {
            if (ObjectManager.GetNumberAttackPlayer() == 0 && Sprint.IsSpellUsable && Sprint.KnownSpell
                && MySettings.UseSprint && ObjectManager.Me.GetMove)
            {
                Sprint.Launch();
                return;
            }
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            Keyboard.DownKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
            while (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
                Thread.Sleep(300);
            Keyboard.UpKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
        }
    }

    private void Defense_Cycle()
    {
        if (ObjectManager.Me.HealthPercent <= 80 && !Kidney_Shot.TargetHaveBuff && Kidney_Shot.KnownSpell
            && Kidney_Shot.IsSpellUsable && Kidney_Shot.IsDistanceGood && ObjectManager.Me.ComboPoint <= 3
            && Recuperate.HaveBuff && MySettings.UseKidneyShot)
        {
            CP = ObjectManager.Me.ComboPoint;
            Kidney_Shot.Launch();
            OnCD = new Timer(1000*CP);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= 80 && Evasion.KnownSpell && Evasion.IsSpellUsable
                 && MySettings.UseEvasion)
        {
            Evasion.Launch();
            OnCD = new Timer(1000*15);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= 90 && Combat_Readiness.KnownSpell && Combat_Readiness.IsSpellUsable
                 && MySettings.UseCombatReadiness)
        {
            Combat_Readiness.Launch();
            OnCD = new Timer(1000*20);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= 95 && Dismantle.KnownSpell && Dismantle.IsSpellUsable
                 && MySettings.UseDismantle)
        {
            Dismantle.Launch();
            Dismantle_Timer = new Timer(1000*60);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseWarStompAtPercentage && War_Stomp.IsSpellUsable && War_Stomp.KnownSpell
                 && MySettings.UseWarStomp)
        {
            War_Stomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable && Stoneform.KnownSpell
                 && MySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else
        {
            if (ObjectManager.GetNumberAttackPlayer() >= 3 && Vanish.KnownSpell && Vanish.IsSpellUsable
                && MySettings.UseVanish)
            {
                Vanish.Launch();
                Thread.Sleep(5000);
                return;
            }
        }

        if (ObjectManager.Me.HealthPercent <= 70 && Preparation.KnownSpell && Preparation.IsSpellUsable
            && MySettings.UsePreparation && !Evasion.IsSpellUsable)
        {
            Preparation.Launch();
            return;
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (ObjectManager.Me.HealthPercent <= MySettings.UseGiftoftheNaaruAtPercentage && Gift_of_the_Naaru.KnownSpell && Gift_of_the_Naaru.IsSpellUsable
            && MySettings.UseGiftoftheNaaru)
        {
            Gift_of_the_Naaru.Launch();
            return;
        }
        else
        {
            if (!Recuperate.HaveBuff && ObjectManager.Me.ComboPoint > 1 && MySettings.UseRecuperate
                && ObjectManager.Me.HealthPercent <= 90 && Recuperate.KnownSpell && Recuperate.IsSpellUsable)
            {
                Recuperate.Launch();
                return;
            }
        }
    }

    private void Decast()
    {
        if (ObjectManager.Target.IsCast && Kick.KnownSpell && Kick.IsSpellUsable
            && Kick.IsDistanceGood && MySettings.UseKick && ObjectManager.Target.IsTargetingMe)
        {
            Kick.Launch();
            return;
        }
        else if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell && ObjectManager.Target.GetDistance < 8
                && ObjectManager.Me.HealthPercent <= MySettings.UseArcaneTorrentForDecastAtPercentage
                && MySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && Cloak_of_Shadows.KnownSpell && Cloak_of_Shadows.IsSpellUsable
                 && ObjectManager.Target.IsTargetingMe && MySettings.UseCloakofShadows)
        {
            Cloak_of_Shadows.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.IsCast && Smoke_Bomb.KnownSpell && Smoke_Bomb.IsSpellUsable
                && ObjectManager.Target.IsTargetingMe && MySettings.UseSmokeBomb
                && !Cloak_of_Shadows.HaveBuff)
            {
                Smoke_Bomb.Launch();
                return;
            }
        }

        if (ObjectManager.Me.HealthPercent <= 70 && Preparation.KnownSpell && Preparation.IsSpellUsable
            && MySettings.UsePreparation && !Cloak_of_Shadows.IsSpellUsable && ObjectManager.Target.IsCast
            && ObjectManager.Target.IsTargetingMe)
        {
            Preparation.Launch();
            return;
        }
    }

    private void DPS_Burst()
    {
        if (MySettings.UseTrinket && Trinket_Timer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Trinket_Timer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBerserking)
            Berserking.Launch();
        else if (Blood_Fury.IsSpellUsable && Blood_Fury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBloodFury)
            Blood_Fury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (Engineering_Timer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                && MySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            Engineering_Timer = new Timer(1000*60);
        }
        else if (Vendetta.KnownSpell && Vendetta.IsSpellUsable
                 && MySettings.UseVendetta && Vendetta.IsDistanceGood)
        {
            Vendetta.Launch();
            return;
        }
        else
        {
            if (Shadow_Blades.KnownSpell && Shadow_Blades.IsSpellUsable
                && MySettings.UseShadowBlades && ObjectManager.Target.GetDistance < 30)
            {
                Shadow_Blades.Launch();
                return;
            }
        }
    }

    private void DPS_Cycle()
    {
        if (Mutilate.KnownSpell && Mutilate.IsSpellUsable && MySettings.UseMutilate
            && Mutilate.IsDistanceGood && MySettings.UseShadowFocus && !ObjectManager.Target.InCombat
            && (Stealth.HaveBuff || ObjectManager.Me.HaveBuff(115192)))
        {
            Mutilate.Launch();
            return;
        }

        if (Garrote.IsSpellUsable && Garrote.IsDistanceGood && Garrote.KnownSpell
            && MySettings.UseGarrote && ObjectManager.Me.HaveBuff(115192))
        {
            Garrote.Launch();
            return;
        }

        if (Throw.IsSpellUsable && Throw.IsDistanceGood && Throw.KnownSpell && !ObjectManager.Target.InCombat
            && MySettings.UseThrow)
        {
            Throw.Launch();
            return;
        }

        if (Eviscerate.KnownSpell && Eviscerate.IsSpellUsable && Eviscerate.IsDistanceGood
            && MySettings.UseEnvenom && (ObjectManager.Me.ComboPoint > 4
                                         || (Slice_and_Dice.HaveBuff && Slice_and_Dice_Timer.IsReady)))
        {
            Eviscerate.Launch();
            if (Slice_and_Dice.HaveBuff)
                Slice_and_Dice_Timer = new Timer(1000*(6 + (5*6)));
            return;
        }
        else if (Sinister_Strike.KnownSpell && Sinister_Strike.IsSpellUsable && Sinister_Strike.IsDistanceGood
                 && MySettings.UseDispatch)
        {
            Sinister_Strike.Launch();
            return;
        }
        else if (Slice_and_Dice.KnownSpell && Slice_and_Dice.IsSpellUsable && Slice_and_Dice.IsDistanceGood
                 && MySettings.UseSliceandDice && !Slice_and_Dice.HaveBuff)
        {
            CP = ObjectManager.Me.ComboPoint;
            Slice_and_Dice.Launch();
            Slice_and_Dice_Timer = new Timer(1000*(6 + (CP*6)));
            return;
        }
        else if (Rupture.KnownSpell && Rupture.IsDistanceGood && Rupture.IsSpellUsable
                 && MySettings.UseRupture && (!Rupture.TargetHaveBuff || Rupture_Timer.IsReady))
        {
            CP = ObjectManager.Me.ComboPoint;
            Rupture.Launch();
            Rupture_Timer = new Timer(1000*(4 + (CP*4)));
            return;
        }
        else if (Expose_Armor.IsSpellUsable && Expose_Armor.IsDistanceGood && Expose_Armor.KnownSpell
                 && MySettings.UseExposeArmor && !ObjectManager.Target.HaveBuff(113746))
        {
            Expose_Armor.Launch();
            return;
        }
        else if (Mutilate.KnownSpell && Mutilate.IsSpellUsable && ObjectManager.Target.HealthPercent > 35
                && MySettings.UseMutilate && Mutilate.IsDistanceGood)
        {
            Mutilate.Launch();
            return;
        }
        else
        {
            if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell
                && MySettings.UseArcaneTorrentForResource)
            {
                Arcane_Torrent.Launch();
                return;
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: RogueAssassinationSettings

    [Serializable]
    public class RogueAssassinationSettings : Settings
    {
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public int UseStoneformAtPercentage = 80;
        public int UseWarStompAtPercentage = 80;
        public bool UseAlchFlask = true;
        public bool UseAmbush = true;
        public bool UseArcaneTorrentForDecast = true;
        public bool UseArcaneTorrentForResource = true;
        public bool UseBerserking = true;
        public bool UseBloodFury = true;
        public bool UseBurstofSpeed = true;
        public bool UseCheapShot = true;
        public bool UseCloakofShadows = true;
        public bool UseCombatReadiness = true;
        public bool UseCrimsonTempest = true;
        public bool UseCripplingPoison = false;
        public bool UseDeadlyPoison = true;
        public bool UseDeadlyThrow = true;
        public bool UseDismantle = true;
        public bool UseDispatch = true;
        public bool UseEngGlove = true;
        public bool UseEnvenom = true;
        public bool UseEvasion = true;
        public bool UseExposeArmor = false;
        public bool UseFanofKnives = true;
        public bool UseGarrote = true;
        public bool UseGiftoftheNaaru = true;
        public bool UseKick = true;
        public bool UseKidneyShot = true;
        public bool UseLeechingPoison = true;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMindnumbingPoison = true;
        public bool UseMutilate = true;
        public bool UseParalyticPoison = false;
        public bool UsePreparation = true;
        public bool UseRecuperate = true;
        public bool UseRedirect = true;
        public bool UseRupture = true;
        public bool UseShadowBlades = true;
        public bool UseShadowFocus = false;
        public bool UseShadowStep = true;
        public bool UseShiv = true;
        public bool UseShurikenToss = true;
        public bool UseSliceandDice = true;
        public bool UseSmokeBomb = true;
        public bool UseSprint = true;
        public bool UseStealth = false;
        public bool UseStoneform = true;
        public bool UseThrow = true;
        public bool UseTrinket = true;
        public bool UseVanish = true;
        public bool UseVendetta = true;
        public bool UseWarStomp = true;
        public bool UseWoundPoison = false;

        public RogueAssassinationSettings()
        {
            ConfigWinForm(new Point(500, 400), "Rogue Assassination Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrent", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Rogue Buffs */
            AddControlInWinForm("Use Burst of Speed", "UseBurstofSpeed", "Rogue Buffs");
            AddControlInWinForm("Use Crippling Poison", "UseCripplingPoison", "Rogue Buffs");
            AddControlInWinForm("Use Deadly Poison", "UseDeadlyPoison", "Rogue Buffs");
            AddControlInWinForm("Use Leeching Poison", "UseLeechingPoison", "Rogue Buffs");
            AddControlInWinForm("Use Mindnumbing Poison", "UseMindnumbingPoison", "Rogue Buffs");
            AddControlInWinForm("Use Paralytic Poison", "UseParalyticPoison", "Rogue Buffs");
            AddControlInWinForm("Use Slice and Dice", "UseSliceandDice", "Rogue Buffs");
            AddControlInWinForm("Use Sprint", "UseSprint", "Rogue Buffs");
            AddControlInWinForm("Use Stealth", "UseStealth", "Rogue Buffs");
            AddControlInWinForm("Use Wound Poison", "UseWoundPoison", "Rogue Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Ambush", "UseAmbush", "Offensive Spell");
            AddControlInWinForm("Use Crimson Tempest", "UseCrimsonTempest", "Offensive Spell");
            AddControlInWinForm("Use Deadly Throw", "UseDeadlyThrow", "Offensive Spell");
            AddControlInWinForm("Use Dispatch", "UseDispatch", "Offensive Spell");
            AddControlInWinForm("Use Envenom", "UseEnvenom", "Offensive Spell");
            AddControlInWinForm("Use Expose Armor", "UseExposeArmor", "Offensive Spell");
            AddControlInWinForm("Use Fan of Knives", "UseFanofKnives", "Offensive Spell");
            AddControlInWinForm("Use Garrote", "UseGarrote", "Offensive Spell");
            AddControlInWinForm("Use Mutilate", "UseMutilate", "Offensive Spell");
            AddControlInWinForm("Use Rupture", "UseRupture", "Offensive Spell");
            AddControlInWinForm("Use Shiv", "UseShiv", "Offensive Spell");
            AddControlInWinForm("Use Shuriken Toss", "UseShurikenToss", "Offensive Spell");
            AddControlInWinForm("Use Throw", "UseThrow", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Redirect", "UseRedirect", "Offensive Cooldown");
            AddControlInWinForm("Use Shadow Blades", "UseShadowBlades", "Offensive Cooldown");
            AddControlInWinForm("Use Shadow Step", "UseShadowStep", "Offensive Cooldown");
            AddControlInWinForm("Use Vendetta", "UseVendetta", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use CheapShot", "UseCheapShot", "Defensive Cooldown");
            AddControlInWinForm("Use CloakofShadows", "UseCloakofShadows", "Defensive Cooldown");
            AddControlInWinForm("Use CombatReadiness", "UseCombatReadiness", "Defensive Cooldown");
            AddControlInWinForm("Use Dismantle", "UseDismantle", "Defensive Cooldown");
            AddControlInWinForm("Use Evasion", "UseEvasion", "Defensive Cooldown");
            AddControlInWinForm("Use Kick", "UseKick", "Defensive Cooldown");
            AddControlInWinForm("Use KidneyShot", "UseKidneyShot", "Defensive Cooldown");
            AddControlInWinForm("Use Preparation", "UsePreparation", "Defensive Cooldown");
            AddControlInWinForm("Use SmokeBomb", "UseSmokeBomb", "Defensive Cooldown");
            AddControlInWinForm("Use Vanish", "UseVanish", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Recuperate", "UseRecuperate", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket", "UseTrinket", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Use Shadow Focus Talent?", "UseShadowFocus", "Game Settings");
        }

        public static RogueAssassinationSettings CurrentSetting { get; set; }

        public static RogueAssassinationSettings GetSettings()
        {
            string CurrentSettingsFile = Application.StartupPath + "\\CustomClasses\\Settings\\Rogue_Assassination.xml";
            if (File.Exists(CurrentSettingsFile))
            {
                return
                    CurrentSetting = Load<RogueAssassinationSettings>(CurrentSettingsFile);
            }
            else
            {
                return new RogueAssassinationSettings();
            }
        }
    }

    #endregion
}

#endregion

#region Warrior

public class Warrior_Arms
{
    private readonly WarriorArmsSettings MySettings = WarriorArmsSettings.GetSettings();
    private readonly string MoveBackward = nManager.Wow.Helpers.Keybindings.GetKeyByAction(nManager.Wow.Enums.Keybindings.MOVEBACKWARD);

    #region General Timers & Variables

    //private readonly WoWItem FirstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
    //private readonly WoWItem SecondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);

    private Timer AlchFlask_Timer = new Timer(0);
    private Timer Engineering_Timer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer Trinket_Timer = new Timer(0);
    public int LC = 0;

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell Arcane_Torrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell Blood_Fury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell Gift_of_the_Naaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell War_Stomp = new Spell("War Stomp");

    #endregion

    #region Warrior Buffs

    private readonly Spell Battle_Shout = new Spell("Battle Shout");
    private readonly Spell Battle_Stance = new Spell("Battle Stance");
    private readonly Spell Berserker_Stance = new Spell("Berserker Stance");
    private readonly Spell Commanding_Shout = new Spell("Commanding Shout");
    private readonly Spell Defensive_Stance = new Spell("Defensive Stance");

    #endregion

    #region Offensive Spell

    private readonly Spell Avatar = new Spell("Avatar");
    private readonly Spell Bladestorm = new Spell("Bladestorm");
    private readonly Spell Bloodbath = new Spell("Bloodbath");
    private readonly Spell Charge = new Spell("Charge");
    private readonly Spell Cleave = new Spell("Cleave");
    private readonly Spell Colossus_Smash = new Spell("Colossus Smash");
    private readonly Spell Dragon_Roar = new Spell("Dragon Roar");
    private readonly Spell Execute = new Spell("Execute");
    private readonly Spell Heroic_Leap = new Spell("Heroic Leap");
    private readonly Spell Heroic_Strike = new Spell("Heroic Strike");
    private readonly Spell Heroic_Throw = new Spell("Heroic Throw");
    private readonly Spell Impending_Victory = new Spell("Impending Victory");
    private readonly Spell Mortal_Strike = new Spell("Mortal Strike");
    private readonly Spell Overpower = new Spell("Overpower");
    private readonly Spell Shockwave = new Spell("Shockwave");
    private readonly Spell Slam = new Spell("Slam");
    private readonly Spell Storm_Bolt = new Spell("Storm Bolt");
    private readonly Spell Taunt = new Spell("Taunt");
    private readonly Spell Thunder_Clap = new Spell("Thunder Clap");
    private readonly Spell Whirlwind = new Spell("Whirlwind");

    #endregion

    #region Offensive Cooldown

    private readonly Spell Berserker_Rage = new Spell("Berserker Rage");
    private readonly Spell Deadly_Calm = new Spell("Deadly Calm");
    private readonly Spell Recklessness = new Spell("Recklessness");
    private readonly Spell Shattering_Throw = new Spell("Shattering Throw");
    private readonly Spell Skull_Banner = new Spell("Skull Banner");
    private readonly Spell Sweeping_Strikes = new Spell("Sweeping Strikes");

    #endregion

    #region Defensive Cooldown

    private readonly Spell Demoralizing_Banner = new Spell("Demoralizing Banner");
    private readonly Spell Die_by_the_Sword = new Spell("Die by the Sword");
    private readonly Spell Disarm = new Spell("Disarm");
    private readonly Spell Disrupting_Shout = new Spell("Disrupting Shout");
    private readonly Spell Hamstring = new Spell("Hamstring");
    private readonly Spell Intimidating_Shout = new Spell("Intimidating Shout");
    private readonly Spell Mass_Spell_Reflection = new Spell("Mass Spell Reflection");
    private readonly Spell Piercing_Howl = new Spell("Piercing Howl");
    private readonly Spell Pummel = new Spell("Pummel");
    private readonly Spell Staggering_Shout = new Spell("Staggering Shout");
    private Timer Disarm_Timer = new Timer(0);

    #endregion

    #region Healing Spell

    private readonly Spell Enraged_Regeneration = new Spell("Enraged Regeneration");
    private readonly Spell Rallying_Cry = new Spell("Rallying Cry");
    private readonly Spell Victory_Rush = new Spell("Victory Rush");

    #endregion

    public Warrior_Arms()
    {
        Main.range = 5.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && Taunt.IsDistanceGood)
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && MySettings.UseLowCombat)
                            {
                                LC = 1;
                                LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void Pull()
    {
        if (Heroic_Leap.IsDistanceGood && Heroic_Leap.KnownSpell && Heroic_Leap.IsSpellUsable
            && MySettings.UseHeroicLeap)
        {
            SpellManager.CastSpellByIDAndPosition(6544, ObjectManager.Target.Position);
            Thread.Sleep(200);
        }

        if (Taunt.IsDistanceGood && Taunt.KnownSpell && Taunt.IsSpellUsable
            && MySettings.UseTaunt && ObjectManager.Target.GetDistance > 20)
        {
            Taunt.Launch();
            return;
        }
    }

    private void LowCombat()
    {
        Buff();
        AvoidMelee();
        Defense_Cycle();
        Heal();

        if (Heroic_Throw.KnownSpell && Heroic_Throw.IsSpellUsable && Heroic_Throw.IsDistanceGood
            && MySettings.UseHeroicThrow && !ObjectManager.Target.InCombat)
        {
            Heroic_Throw.Launch();
            return;
        }

        if (Charge.KnownSpell && Charge.IsSpellUsable && Charge.IsDistanceGood
            && MySettings.UseCharge && ObjectManager.Target.GetDistance > 14)
        {
            Charge.Launch();
            return;
        }

        if (Mortal_Strike.KnownSpell && Mortal_Strike.IsSpellUsable && Mortal_Strike.IsDistanceGood
            && MySettings.UseMortalStrike)
        {
            Mortal_Strike.Launch();
            return;
        }
        else if (Colossus_Smash.KnownSpell && Colossus_Smash.IsDistanceGood && Colossus_Smash.IsSpellUsable
                 && MySettings.UseColossusSmash)
        {
            Colossus_Smash.Launch();
            return;
        }
        else if (Heroic_Strike.KnownSpell && Heroic_Strike.IsSpellUsable && Heroic_Strike.IsDistanceGood
                 && MySettings.UseHeroicStrike && ObjectManager.GetNumberAttackPlayer() < 3
                 && (ObjectManager.Me.RagePercentage > 90 || ObjectManager.Me.HaveBuff(125831)))
        {
            if (Deadly_Calm.KnownSpell && Deadly_Calm.IsSpellUsable && MySettings.UseDeadlyCalm)
            {
                Deadly_Calm.Launch();
                Thread.Sleep(200);
            }

            Heroic_Strike.Launch();
            return;
        }
        else if (Shockwave.KnownSpell && Shockwave.IsSpellUsable && ObjectManager.Target.GetDistance < 10
                 && MySettings.UseShockwave)
        {
            Shockwave.Launch();
            return;
        }
        else if (Dragon_Roar.KnownSpell && Dragon_Roar.IsSpellUsable && ObjectManager.Target.GetDistance < 8
                 && MySettings.UseDragonRoar)
        {
            Dragon_Roar.Launch();
            return;
        }
        else
        {
            if (Bladestorm.KnownSpell && Bladestorm.IsSpellUsable && ObjectManager.Target.GetDistance < 8
                && MySettings.UseBladestorm)
            {
                Bladestorm.Launch();
                return;
            }
        }

        if (Thunder_Clap.KnownSpell && Thunder_Clap.IsSpellUsable && Thunder_Clap.IsDistanceGood
            && MySettings.UseThunderClap)
        {
            Thunder_Clap.Launch();
            return;
        }
    }

    private void Combat()
    {
        Buff();
        AvoidMelee();
        if (OnCD.IsReady)
            Defense_Cycle();
        Heal();
        Decast();
        DPS_Burst();
        DPS_Cycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (ObjectManager.Me.HealthPercent < 30 && MySettings.UseDefensiveStance
            && Defensive_Stance.KnownSpell && Defensive_Stance.IsSpellUsable && !Defensive_Stance.HaveBuff)
        {
            Defensive_Stance.Launch();
            return;
        }
        else if (!Battle_Stance.HaveBuff && Battle_Stance.KnownSpell && Battle_Stance.IsSpellUsable
                 && MySettings.UseBattleStance && ObjectManager.Me.HealthPercent > 50)
        {
            Battle_Stance.Launch();
            return;
        }
        else if (!Berserker_Stance.HaveBuff && Berserker_Stance.KnownSpell && Berserker_Stance.IsSpellUsable
                 && MySettings.UseBerserkerStance && !MySettings.UseBattleStance && ObjectManager.Me.HealthPercent > 50)
        {
            Berserker_Stance.Launch();
            return;
        }
        else if (Battle_Shout.KnownSpell && Battle_Shout.IsSpellUsable && !Battle_Shout.HaveBuff
                 && MySettings.UseBattleShout)
        {
            Battle_Shout.Launch();
            return;
        }
        else
        {
            if (Commanding_Shout.KnownSpell && Commanding_Shout.IsSpellUsable && !Commanding_Shout.HaveBuff
                && MySettings.UseCommandingShout && !MySettings.UseBattleShout)
            {
                Commanding_Shout.Launch();
                return;
            }
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            Keyboard.DownKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
            while (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
                Thread.Sleep(300);
            Keyboard.UpKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
        }
    }

    private void Defense_Cycle()
    {
        if (ObjectManager.Me.HealthPercent < 95 && MySettings.UseDisarm && Disarm.IsDistanceGood
            && Disarm.KnownSpell && Disarm.IsSpellUsable && Disarm_Timer.IsReady)
        {
            Disarm.Launch();
            Disarm_Timer = new Timer(1000*60);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 20 && MySettings.UseIntimidatingShout
                 && Intimidating_Shout.KnownSpell && Intimidating_Shout.IsSpellUsable &&
                 ObjectManager.Target.GetDistance < 8)
        {
            Intimidating_Shout.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && MySettings.UseDiebytheSword
                 && Die_by_the_Sword.KnownSpell && Die_by_the_Sword.IsSpellUsable)
        {
            Die_by_the_Sword.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && MySettings.UseDemoralizingBanner
                 && Demoralizing_Banner.KnownSpell && Demoralizing_Banner.IsSpellUsable &&
                 ObjectManager.Target.GetDistance < 30)
        {
            SpellManager.CastSpellByIDAndPosition(114203, ObjectManager.Target.Position);
            OnCD = new Timer(1000*15);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseWarStompAtPercentage && War_Stomp.IsSpellUsable && War_Stomp.KnownSpell
                 && MySettings.UseWarStomp)
        {
            War_Stomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent <= MySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable && Stoneform.KnownSpell
                && MySettings.UseStoneform)
            {
                Stoneform.Launch();
                OnCD = new Timer(1000*8);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (Victory_Rush.KnownSpell && Victory_Rush.IsSpellUsable && Victory_Rush.IsDistanceGood
            && MySettings.UseVictoryRush && ObjectManager.Me.HealthPercent < 90)
        {
            Victory_Rush.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 30 && Rallying_Cry.IsSpellUsable && Rallying_Cry.KnownSpell
                 && MySettings.UseRallyingCry && Fight.InFight)
        {
            Rallying_Cry.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseGiftoftheNaaruAtPercentage && Gift_of_the_Naaru.IsSpellUsable && Gift_of_the_Naaru.KnownSpell
                 && MySettings.UseGiftoftheNaaru)
        {
            Gift_of_the_Naaru.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent < 80 && Enraged_Regeneration.IsSpellUsable &&
                Enraged_Regeneration.KnownSpell
                && MySettings.UseEnragedRegeneration)
            {
                Enraged_Regeneration.Launch();
                return;
            }
        }
    }

    private void Decast()
    {
        if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell && ObjectManager.Target.GetDistance < 8
            && ObjectManager.Me.HealthPercent <= MySettings.UseArcaneTorrentForDecastAtPercentage
            && MySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else if (!Hamstring.TargetHaveBuff && MySettings.UseHamstring && Hamstring.KnownSpell
                 && Hamstring.IsSpellUsable && Hamstring.IsDistanceGood)
        {
            Hamstring.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && Pummel.IsDistanceGood
                 && Pummel.KnownSpell && Pummel.IsSpellUsable && MySettings.UsePummel)
        {
            Pummel.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe &&
                 ObjectManager.Target.GetDistance < 10
                 && Disrupting_Shout.KnownSpell && Disrupting_Shout.IsSpellUsable && MySettings.UseDisruptingShout)
        {
            Disrupting_Shout.Launch();
            return;
        }
        else if (ObjectManager.Target.GetMove && !Piercing_Howl.TargetHaveBuff && MySettings.UsePiercingHowl
                 && Piercing_Howl.KnownSpell && Piercing_Howl.IsSpellUsable && ObjectManager.Target.GetDistance < 15)
        {
            Piercing_Howl.Launch();
            return;
        }
        else if (Hamstring.TargetHaveBuff && MySettings.UseStaggeringShout && Staggering_Shout.KnownSpell
                 && Staggering_Shout.IsSpellUsable && ObjectManager.Target.GetDistance < 20)
        {
            Staggering_Shout.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe &&
                MySettings.UseMassSpellReflection
                && Mass_Spell_Reflection.KnownSpell && Mass_Spell_Reflection.IsSpellUsable)
            {
                Mass_Spell_Reflection.Launch();
                return;
            }
        }
    }

    private void DPS_Burst()
    {
        /*if (MySettings.UseTrinket)
        {
            if (!SpellManager.HaveBuffLua(ItemsManager.GetItemSpellByItemName(FirstTrinket.Name)))
            {
                if (ItemsManager.IsUsableItemByName(FirstTrinket.Name) && !ItemsManager.IsItemOnCooldown((uint) FirstTrinket.Entry))
                {
                    ItemsManager.UseItem(FirstTrinket.Name);
                    Logging.WriteFight("Use First Trinket Slot");
                }
            }
            if (!SpellManager.HaveBuffLua(ItemsManager.GetItemSpellByItemName(SecondTrinket.Name)))
            {
                if (ItemsManager.IsUsableItemByName(SecondTrinket.Name) && !ItemsManager.IsItemOnCooldown((uint)SecondTrinket.Entry))
                {
                    ItemsManager.UseItem(SecondTrinket.Name);
                    Logging.WriteFight("Use Second Trinket Slot");
                }
            }
        }*/
        if (MySettings.UseTrinket && Trinket_Timer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Trinket_Timer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBerserking)
            Berserking.Launch();
        else if (Blood_Fury.IsSpellUsable && Blood_Fury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBloodFury)
            Blood_Fury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (Engineering_Timer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                && MySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            Engineering_Timer = new Timer(1000*60);
        }
        else if (Berserker_Rage.KnownSpell && Berserker_Rage.IsSpellUsable && ObjectManager.Me.RagePercentage < 50
                 && MySettings.UseBerserkerRage && ObjectManager.Target.GetDistance < 30)
        {
            Berserker_Rage.Launch();
            return;
        }
        else if (Battle_Shout.KnownSpell && Battle_Shout.IsSpellUsable && ObjectManager.Me.RagePercentage < 80
                 && MySettings.UseBattleShout && ObjectManager.Target.GetDistance < 30)
        {
            Battle_Shout.Launch();
            return;
        }
        else if (Commanding_Shout.KnownSpell && Commanding_Shout.IsSpellUsable && ObjectManager.Me.RagePercentage < 80
                 && MySettings.UseCommandingShout && !MySettings.UseBattleShout && ObjectManager.Target.GetDistance < 30)
        {
            Commanding_Shout.Launch();
            return;
        }
        else if (Recklessness.KnownSpell && Recklessness.IsSpellUsable && MySettings.UseRecklessness
                 && ObjectManager.Target.GetDistance < 30)
        {
            Recklessness.Launch();
            return;
        }
        else if (Shattering_Throw.KnownSpell && Shattering_Throw.IsSpellUsable && Shattering_Throw.IsDistanceGood
                 && MySettings.UseShatteringThrow)
        {
            Shattering_Throw.Launch();
            return;
        }
        else if (Skull_Banner.KnownSpell && Skull_Banner.IsSpellUsable
                 && MySettings.UseSkullBanner && ObjectManager.Target.GetDistance < 30)
        {
            Skull_Banner.Launch();
            return;
        }
        else if (Avatar.KnownSpell && Avatar.IsSpellUsable
                 && MySettings.UseAvatar && ObjectManager.Target.GetDistance < 30)
        {
            Avatar.Launch();
            return;
        }
        else if (Bloodbath.KnownSpell && Bloodbath.IsSpellUsable
                 && MySettings.UseBloodbath && ObjectManager.Target.GetDistance < 30)
        {
            Bloodbath.Launch();
            return;
        }
        else if (Deadly_Calm.KnownSpell && Deadly_Calm.IsSpellUsable && ObjectManager.Me.RagePercentage > 90
                 && MySettings.UseDeadlyCalm && Heroic_Strike.IsDistanceGood)
        {
            Deadly_Calm.Launch();
            return;
        }
        else
        {
            if (Storm_Bolt.KnownSpell && Storm_Bolt.IsSpellUsable
                && MySettings.UseStormBolt && Storm_Bolt.IsDistanceGood)
            {
                Storm_Bolt.Launch();
                return;
            }
        }

        if (Heroic_Strike.KnownSpell && Heroic_Strike.IsSpellUsable && Heroic_Strike.IsDistanceGood
            && MySettings.UseHeroicStrike && ObjectManager.Me.Level < 10)
        {
            Heroic_Strike.Launch();
            return;
        }
    }

    private void DPS_Cycle()
    {
        if (Heroic_Throw.KnownSpell && Heroic_Throw.IsSpellUsable && Heroic_Throw.IsDistanceGood
            && MySettings.UseHeroicThrow && !ObjectManager.Target.InCombat)
        {
            Heroic_Throw.Launch();
            return;
        }

        if (Charge.KnownSpell && Charge.IsSpellUsable && Charge.IsDistanceGood
            && MySettings.UseCharge && ObjectManager.Target.GetDistance > 14)
        {
            Charge.Launch();
            return;
        }

        if (Victory_Rush.KnownSpell && Victory_Rush.IsSpellUsable && Victory_Rush.IsDistanceGood
            && MySettings.UseVictoryRush && ObjectManager.Me.HealthPercent < 90)
        {
            Victory_Rush.Launch();
            return;
        }
        else if (Sweeping_Strikes.KnownSpell && Sweeping_Strikes.IsSpellUsable &&
                 ObjectManager.GetNumberAttackPlayer() > 1
                 && MySettings.UseSweepingStrikes)
        {
            Sweeping_Strikes.Launch();
            return;
        }
        else if (Thunder_Clap.KnownSpell && Thunder_Clap.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 2
                 && MySettings.UseThunderClap)
        {
            Thunder_Clap.Launch();
            return;
        }
        else if (Whirlwind.KnownSpell && Whirlwind.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 3
                 && MySettings.UseWhirlwind)
        {
            Whirlwind.Launch();
            return;
        }
        else if (Cleave.KnownSpell && Cleave.IsSpellUsable && Cleave.IsDistanceGood
                 && ObjectManager.GetNumberAttackPlayer() == 3 && MySettings.UseCleave)
        {
            if (Deadly_Calm.KnownSpell && Deadly_Calm.IsSpellUsable && MySettings.UseDeadlyCalm)
            {
                Deadly_Calm.Launch();
                Thread.Sleep(200);
            }

            Cleave.Launch();
            return;
        }
        else if (Heroic_Strike.KnownSpell && Heroic_Strike.IsSpellUsable && Heroic_Strike.IsDistanceGood
                 && MySettings.UseHeroicStrike && ObjectManager.GetNumberAttackPlayer() < 3
                 && (ObjectManager.Me.HaveBuff(125831) || ObjectManager.Me.HaveBuff(85730)))
        {
            if (Deadly_Calm.KnownSpell && Deadly_Calm.IsSpellUsable && MySettings.UseDeadlyCalm)
            {
                Deadly_Calm.Launch();
                Thread.Sleep(200);
            }

            Heroic_Strike.Launch();
            return;
        }
        else if (Shockwave.KnownSpell && Shockwave.IsSpellUsable && ObjectManager.Target.GetDistance < 10
                 && MySettings.UseShockwave)
        {
            Shockwave.Launch();
            return;
        }
        else if (Dragon_Roar.KnownSpell && Dragon_Roar.IsSpellUsable && ObjectManager.Target.GetDistance < 8
                 && MySettings.UseDragonRoar)
        {
            Dragon_Roar.Launch();
            return;
        }
        else if (Bladestorm.KnownSpell && Bladestorm.IsSpellUsable && ObjectManager.Target.GetDistance < 8
                 && MySettings.UseBladestorm)
        {
            Bladestorm.Launch();
            return;
        }
        else if (Mortal_Strike.KnownSpell && Mortal_Strike.IsSpellUsable && Mortal_Strike.IsDistanceGood
                 && MySettings.UseMortalStrike && ObjectManager.Me.RagePercentage < 100)
        {
            Mortal_Strike.Launch();
            return;
        }
        else if (Colossus_Smash.KnownSpell && Colossus_Smash.IsSpellUsable && Colossus_Smash.IsDistanceGood
                 && MySettings.UseColossusSmash)
        {
            Colossus_Smash.Launch();
            return;
        }
        else if (Execute.KnownSpell && Execute.IsSpellUsable && Execute.IsDistanceGood
                 && MySettings.UseExecute && ObjectManager.GetNumberAttackPlayer() < 4)
        {
            Execute.Launch();
            return;
        }
        else if (Overpower.KnownSpell && Overpower.IsSpellUsable && Overpower.IsDistanceGood
                 && MySettings.UseOverpower && ObjectManager.Me.RagePercentage < 100)
        {
            Overpower.Launch();
            return;
        }
        else if (Slam.KnownSpell && Slam.IsSpellUsable && Slam.IsDistanceGood && MySettings.UseSlam
                && ObjectManager.GetNumberAttackPlayer() < 4 && ObjectManager.Target.HealthPercent > 20)
        {
            Slam.Launch();
            return;
        }
        else
        {
            if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell
                && MySettings.UseArcaneTorrentForResource)
            {
                Arcane_Torrent.Launch();
                return;
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: WarriorArmsSettings

    [Serializable]
    public class WarriorArmsSettings : Settings
    {
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public int UseStoneformAtPercentage = 80;
        public int UseWarStompAtPercentage = 80;
        public bool UseAlchFlask = true;
        public bool UseArcaneTorrentForDecast = true;
        public bool UseArcaneTorrentForResource = true;
        public bool UseAvatar = true;
        public bool UseBattleShout = true;
        public bool UseBattleStance = true;
        public bool UseBerserkerRage = true;
        public bool UseBerserkerStance = false;
        public bool UseBerserking = true;
        public bool UseBladestorm = true;
        public bool UseBloodFury = true;
        public bool UseBloodbath = true;
        public bool UseCharge = true;
        public bool UseCleave = true;
        public bool UseColossusSmash = true;
        public bool UseCommandingShout = false;
        public bool UseDeadlyCalm = true;
        public bool UseDefensiveStance = true;
        public bool UseDemoralizingBanner = true;
        public bool UseDiebytheSword = true;
        public bool UseDisarm = true;
        public bool UseDisruptingShout = true;
        public bool UseDragonRoar = true;
        public bool UseEngGlove = true;
        public bool UseEnragedRegeneration = true;
        public bool UseExecute = true;
        public bool UseGiftoftheNaaru = true;
        public bool UseHamstring = false;
        public bool UseHeroicLeap = true;
        public bool UseHeroicStrike = true;
        public bool UseHeroicThrow = true;
        public bool UseIntimidatingShout = true;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMassSpellReflection = true;
        public bool UseMortalStrike = true;
        public bool UseOverpower = true;
        public bool UsePiercingHowl = false;
        public bool UsePummel = true;
        public bool UseRallyingCry = true;
        public bool UseRecklessness = true;
        public bool UseShatteringThrow = true;
        public bool UseShockwave = true;
        public bool UseSkullBanner = true;
        public bool UseSlam = true;
        public bool UseStaggeringShout = true;
        public bool UseStoneform = true;
        public bool UseStormBolt = true;
        public bool UseSweepingStrikes = true;
        public bool UseTaunt = true;
        public bool UseThunderClap = true;
        public bool UseTrinket = true;
        public bool UseVictoryRush = true;
        public bool UseWarStomp = true;
        public bool UseWhirlwind = true;

        public WarriorArmsSettings()
        {
            ConfigWinForm(new Point(500, 400), "Warrior Arms Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrent", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Warrior Buffs */
            AddControlInWinForm("Use Battle Shout", "UseBattleShout", "Warrior Buffs");
            AddControlInWinForm("Use Battle Stance", "UseBattleStance", "Warrior Buffs");
            AddControlInWinForm("Use Berserker Stance", "UseBerserkerStance", "Warrior Buffs");
            AddControlInWinForm("Use Commanding Shout", "UseCommandingShout", "Warrior Buffs");
            AddControlInWinForm("Use Defensive Stance", "UseDefensiveStance", "Warrior Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Avatar", "UseAvatar", "Offensive Spell");
            AddControlInWinForm("Use Bladestorm", "UseBladestorm", "Offensive Spell");
            AddControlInWinForm("Use Bloodbath", "UseBloodbath", "Offensive Spell");
            AddControlInWinForm("Use Charge", "UseCharge", "Offensive Spell");
            AddControlInWinForm("Use Cleave", "UseCleave", "Offensive Spell");
            AddControlInWinForm("Use Colossus Smash", "UseColossusSmash", "Offensive Spell");
            AddControlInWinForm("Use Dragon Roar", "UseDragonRoar", "Offensive Spell");
            AddControlInWinForm("Use Exectue", "UseExecute", "Offensive Spell");
            AddControlInWinForm("Use Heroic Leap", "UseHeroicLeap", "Offensive Spell");
            AddControlInWinForm("Use Heroic Strike", "UseHeroicStrike", "Offensive Spell");
            AddControlInWinForm("Use Heroic Throw", "UseHeroicThrow", "Offensive Spell");
            AddControlInWinForm("Use Mortal Strike", "UseMortalStrike", "Offensive Spell");
            AddControlInWinForm("Use Overpower", "UseOverpower", "Offensive Spell");
            AddControlInWinForm("Use Shockwave", "UseShockwave", "Offensive Spell");
            AddControlInWinForm("Use Slam", "UseSlam", "Offensive Spell");
            AddControlInWinForm("Use Storm Bolt", "UseStormBolt", "Offensive Spell");
            AddControlInWinForm("Use Taunt", "UseTaunt", "Offensive Spell");
            AddControlInWinForm("Use Thunder Clap", "UseThunderClap", "Offensive Spell");
            AddControlInWinForm("Use Whirlwind", "UseWhirlwind", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Berserker Rage", "UseBerserkerRage", "Offensive Cooldown");
            AddControlInWinForm("Use Deadly Calm", "UseDeadlyCalm", "Offensive Cooldown");
            AddControlInWinForm("Use Recklessness", "UseRecklessness", "Offensive Cooldown");
            AddControlInWinForm("Use Shattering Throw", "UseShatteringThrow", "Offensive Cooldown");
            AddControlInWinForm("Use Sweeping Strikes", "UseSweepingStrikes", "Offensive Cooldown");
            AddControlInWinForm("Use Skull Banner", "UseSkullBanner", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Demoralizing Banner", "UseDemoralizingBanner", "Defensive Cooldown");
            AddControlInWinForm("Use Die by the Sword", "UseDiebytheSword", "Defensive Cooldown");
            AddControlInWinForm("Use Disarm", "UseDisarm", "Defensive Cooldown");
            AddControlInWinForm("Use Disrupting Shout", "UseDisruptingShout", "Defensive Cooldown");
            AddControlInWinForm("Use Hamstring", "UseHamstring", "Defensive Cooldown");
            AddControlInWinForm("Use Intimidating Shout", "UseIntimidatingShout", "Defensive Cooldown");
            AddControlInWinForm("Use Mass Spell Reflection", "UseMassSpellReflection", "Defensive Cooldown");
            AddControlInWinForm("Use Piercing Howl", "UsePiercingHowl", "Defensive Cooldown");
            AddControlInWinForm("Use Pummel", "UsePummel", "Defensive Cooldown");
            AddControlInWinForm("Use Staggering Shout", "UseStaggeringShout", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Enraged Regeneration", "UseEnragedRegeneration", "Healing Spell");
            AddControlInWinForm("Use Rallying Cry", "UseRallyingCry", "Healing Spell");
            AddControlInWinForm("Use Victory Rush", "UseVictoryRush", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket", "UseTrinket", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
        }

        public static WarriorArmsSettings CurrentSetting { get; set; }

        public static WarriorArmsSettings GetSettings()
        {
            string CurrentSettingsFile = Application.StartupPath + "\\CustomClasses\\Settings\\Warrior_Arms.xml";
            if (File.Exists(CurrentSettingsFile))
            {
                return
                    CurrentSetting = Load<WarriorArmsSettings>(CurrentSettingsFile);
            }
            else
            {
                return new WarriorArmsSettings();
            }
        }
    }

    #endregion
}

public class Warrior_Protection
{
    private readonly WarriorProtectionSettings MySettings = WarriorProtectionSettings.GetSettings();
    private readonly string MoveBackward = nManager.Wow.Helpers.Keybindings.GetKeyByAction(nManager.Wow.Enums.Keybindings.MOVEBACKWARD);

    #region General Timers & Variables

    private Timer AlchFlask_Timer = new Timer(0);
    private Timer Engineering_Timer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer Trinket_Timer = new Timer(0);
    public int LC = 0;

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell Arcane_Torrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell Blood_Fury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell Gift_of_the_Naaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell War_Stomp = new Spell("War Stomp");

    #endregion

    #region Warrior Buffs

    private readonly Spell Battle_Shout = new Spell("Battle Shout");
    private readonly Spell Battle_Stance = new Spell("Battle Stance");
    private readonly Spell Berserker_Stance = new Spell("Berserker Stance");
    private readonly Spell Commanding_Shout = new Spell("Commanding Shout");
    private readonly Spell Defensive_Stance = new Spell("Defensive Stance");

    #endregion

    #region Offensive Spell

    private readonly Spell Avatar = new Spell("Avatar");
    private readonly Spell Bladestorm = new Spell("Bladestorm");
    private readonly Spell Bloodbath = new Spell("Bloodbath");
    private readonly Spell Charge = new Spell("Charge");
    private readonly Spell Cleave = new Spell("Cleave");
    private readonly Spell Devastate = new Spell("Devastate");
    private readonly Spell Dragon_Roar = new Spell("Dragon Roar");
    private readonly Spell Execute = new Spell("Execute");
    private readonly Spell Heroic_Leap = new Spell("Heroic Leap");
    private readonly Spell Heroic_Strike = new Spell("Heroic Strike");
    private readonly Spell Heroic_Throw = new Spell("Heroic Throw");
    private readonly Spell Revenge = new Spell("Revenge");
    private readonly Spell Shield_Slam = new Spell("Shield Slam");
    private readonly Spell Shockwave = new Spell("Shockwave");
    private readonly Spell Storm_Bolt = new Spell("Storm Bolt");
    private readonly Spell Sunder_Armor = new Spell("Sunder Armor");
    private readonly Spell Taunt = new Spell("Taunt");
    private readonly Spell Thunder_Clap = new Spell("Thunder Clap");

    #endregion

    #region Offensive Cooldown

    private readonly Spell Berserker_Rage = new Spell("Berserker Rage");
    private readonly Spell Deadly_Calm = new Spell("Deadly Calm");
    private readonly Spell Recklessness = new Spell("Recklessness");
    private readonly Spell Shattering_Throw = new Spell("Shattering Throw");
    private readonly Spell Skull_Banner = new Spell("Skull Banner");
    private readonly Spell Sweeping_Strikes = new Spell("Sweeping Strikes");

    #endregion

    #region Defensive Cooldown

    private readonly Spell Demoralizing_Banner = new Spell("Demoralizing Banner");
    private readonly Spell Demoralizing_Shout = new Spell("Demoralizing Shout");
    private readonly Spell Disarm = new Spell("Disarm");
    private readonly Spell Disrupting_Shout = new Spell("Disrupting Shout");
    private readonly Spell Hamstring = new Spell("Hamstring");
    private readonly Spell Intimidating_Shout = new Spell("Intimidating Shout");
    private readonly Spell Mass_Spell_Reflection = new Spell("Mass Spell Reflection");
    private readonly Spell Piercing_Howl = new Spell("Piercing Howl");
    private readonly Spell Pummel = new Spell("Pummel");
    private readonly Spell Shield_Barrier = new Spell("Shield Barrier");
    private readonly Spell Shield_Block = new Spell("Shield Block");
    private readonly Spell Shield_Wall = new Spell("Shield Wall");
    private readonly Spell Spell_Reflection = new Spell("Spell Reflection");
    private readonly Spell Staggering_Shout = new Spell("Staggering Shout");
    private Timer Disarm_Timer = new Timer(0);
    private Timer Shield_Barrier_Timer = new Timer(0);

    #endregion

    #region Healing Spell

    private readonly Spell Enraged_Regeneration = new Spell("Enraged Regeneration");
    private readonly Spell Last_Stand = new Spell("Last Stand");
    private readonly Spell Rallying_Cry = new Spell("Rallying Cry");
    private readonly Spell Victory_Rush = new Spell("Victory Rush");

    #endregion

    public Warrior_Protection()
    {
        Main.range = 5.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && Taunt.IsDistanceGood)
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && MySettings.UseLowCombat)
                            {
                                LC = 1;
                                LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(250);
        }
    }

    private void Pull()
    {
        if (Heroic_Leap.IsDistanceGood && Heroic_Leap.KnownSpell && Heroic_Leap.IsSpellUsable
            && MySettings.UseHeroicLeap)
        {
            SpellManager.CastSpellByIDAndPosition(6544, ObjectManager.Target.Position);
            Thread.Sleep(200);
        }

        if (Taunt.IsDistanceGood && Taunt.KnownSpell && Taunt.IsSpellUsable
            && MySettings.UseTaunt && ObjectManager.Target.GetDistance > 20)
        {
            Taunt.Launch();
            return;
        }
    }

    private void LowCombat()
    {
        Buff();
        AvoidMelee();
        Defense_Cycle();
        Heal();

        if (Heroic_Throw.KnownSpell && Heroic_Throw.IsSpellUsable && Heroic_Throw.IsDistanceGood
            && MySettings.UseHeroicThrow && !ObjectManager.Target.InCombat)
        {
            Heroic_Throw.Launch();
            return;
        }

        if (Charge.KnownSpell && Charge.IsSpellUsable && Charge.IsDistanceGood
            && MySettings.UseCharge && ObjectManager.Target.GetDistance > 14)
        {
            Charge.Launch();
            return;
        }

        if (Shield_Slam.KnownSpell && Shield_Slam.IsSpellUsable && Shield_Slam.IsDistanceGood
            && ObjectManager.Me.RagePercentage < 95 && MySettings.UseShieldSlam)
        {
            Shield_Slam.Launch();
            return;
        }
        else if (Heroic_Strike.KnownSpell && Heroic_Strike.IsSpellUsable && Heroic_Strike.IsDistanceGood
                 && MySettings.UseHeroicStrike &&
                 (ObjectManager.Me.RagePercentage > 80 || ObjectManager.Me.HaveBuff(122510)))
        {
            if (ObjectManager.Me.HealthPercent > 80)
            {
                if (Deadly_Calm.KnownSpell && Deadly_Calm.IsSpellUsable && MySettings.UseDeadlyCalm)
                {
                    Deadly_Calm.Launch();
                    Thread.Sleep(200);
                }
                Heroic_Strike.Launch();
                return;
            }
        }
        else if (Revenge.KnownSpell && Revenge.IsDistanceGood && Revenge.IsSpellUsable
                 && ObjectManager.Me.RagePercentage < 95 && MySettings.UseRevenge)
        {
            Revenge.Launch();
            return;
        }
        else if (Shockwave.KnownSpell && Shockwave.IsSpellUsable && Shockwave.IsDistanceGood
                 && MySettings.UseShockwave)
        {
            Shockwave.Launch();
            return;
        }
        else if (Dragon_Roar.KnownSpell && Dragon_Roar.IsSpellUsable && Dragon_Roar.IsDistanceGood
                 && MySettings.UseDragonRoar)
        {
            Dragon_Roar.Launch();
            return;
        }
        else if (Bladestorm.KnownSpell && Bladestorm.IsSpellUsable && Bladestorm.IsDistanceGood
                 && MySettings.UseBladestorm)
        {
            Bladestorm.Launch();
            return;
        }
        else
        {
            // Blizzard API Calls for Devastate using Sunder Armor Function
            if (Sunder_Armor.KnownSpell && Sunder_Armor.IsSpellUsable && Sunder_Armor.IsDistanceGood
                && MySettings.UseDevastate)
            {
                Sunder_Armor.Launch();
                return;
            }
        }

        if (Thunder_Clap.KnownSpell && Thunder_Clap.IsSpellUsable && Thunder_Clap.IsDistanceGood
            && MySettings.UseThunderClap)
        {
            Thunder_Clap.Launch();
            return;
        }
    }

    private void Combat()
    {
        Buff();
        AvoidMelee();
        if (OnCD.IsReady)
            Defense_Cycle();
        Heal();
        Decast();
        DPS_Burst();
        DPS_Cycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (MySettings.UseDefensiveStance && Defensive_Stance.KnownSpell && Defensive_Stance.IsSpellUsable
            && !Defensive_Stance.HaveBuff && LC != 1)
        {
            Defensive_Stance.Launch();
            return;
        }
        else if (!Battle_Stance.HaveBuff && Battle_Stance.KnownSpell && Battle_Stance.IsSpellUsable
                 && MySettings.UseBattleStance && LC == 1)
        {
            Battle_Stance.Launch();
            return;
        }
        else if (!Berserker_Stance.HaveBuff && Berserker_Stance.KnownSpell && Berserker_Stance.IsSpellUsable
                 && MySettings.UseBerserkerStance && !MySettings.UseBattleStance && !MySettings.UseDefensiveStance)
        {
            Berserker_Stance.Launch();
            return;
        }
        else if (Battle_Shout.KnownSpell && Battle_Shout.IsSpellUsable && !Battle_Shout.HaveBuff
                 && MySettings.UseBattleShout)
        {
            Battle_Shout.Launch();
            return;
        }
        else
        {
            if (Commanding_Shout.KnownSpell && Commanding_Shout.IsSpellUsable && !Commanding_Shout.HaveBuff
                && MySettings.UseCommandingShout && !MySettings.UseBattleShout)
            {
                Commanding_Shout.Launch();
                return;
            }
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            Keyboard.DownKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
            while (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
                Thread.Sleep(300);
            Keyboard.UpKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
        }
    }

    private void Defense_Cycle()
    {
        if (ObjectManager.Me.HealthPercent < 95 && MySettings.UseDisarm && Disarm.IsDistanceGood
            && Disarm.KnownSpell && Disarm.IsSpellUsable && Disarm_Timer.IsReady)
        {
            Disarm.Launch();
            Disarm_Timer = new Timer(1000*60);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 20 && MySettings.UseIntimidatingShout
                 && Intimidating_Shout.KnownSpell && Intimidating_Shout.IsSpellUsable &&
                 ObjectManager.Target.GetDistance < 8)
        {
            Intimidating_Shout.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 60 && Shield_Wall.KnownSpell && Shield_Wall.IsSpellUsable
                 && MySettings.UseShieldWall)
        {
            Shield_Wall.Launch();
            OnCD = new Timer(1000*12);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && MySettings.UseDemoralizingBanner
                 && Demoralizing_Banner.KnownSpell && Demoralizing_Banner.IsSpellUsable &&
                 ObjectManager.Target.GetDistance < 30)
        {
            SpellManager.CastSpellByIDAndPosition(114203, ObjectManager.Target.Position);
            OnCD = new Timer(1000*15);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 90 && MySettings.UseDemoralizingShout
                 && Demoralizing_Shout.KnownSpell && Demoralizing_Shout.IsSpellUsable &&
                 ObjectManager.Target.GetDistance < 30)
        {
            Demoralizing_Shout.Launch();
            OnCD = new Timer(1000*10);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseWarStompAtPercentage && War_Stomp.IsSpellUsable && War_Stomp.KnownSpell
                 && MySettings.UseWarStomp)
        {
            War_Stomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable && Stoneform.KnownSpell
                 && MySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent < 80 && Shield_Block.KnownSpell && Shield_Block.IsSpellUsable
                && MySettings.UseShieldBlock)
            {
                Shield_Block.Launch();
                OnCD = new Timer(1000*6);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (Victory_Rush.KnownSpell && Victory_Rush.IsSpellUsable && Victory_Rush.IsDistanceGood
            && MySettings.UseVictoryRush && ObjectManager.Me.HealthPercent < 90)
        {
            Victory_Rush.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 30 && Last_Stand.IsSpellUsable && Last_Stand.KnownSpell
                 && MySettings.UseLastStand && Fight.InFight)
        {
            Last_Stand.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 30 && Rallying_Cry.IsSpellUsable && Rallying_Cry.KnownSpell
                 && MySettings.UseRallyingCry && Fight.InFight && !Last_Stand.HaveBuff)
        {
            Rallying_Cry.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseGiftoftheNaaruAtPercentage && Gift_of_the_Naaru.IsSpellUsable && Gift_of_the_Naaru.KnownSpell
                 && MySettings.UseGiftoftheNaaru)
        {
            Gift_of_the_Naaru.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent < 80 && Enraged_Regeneration.IsSpellUsable &&
                Enraged_Regeneration.KnownSpell
                && MySettings.UseEnragedRegeneration)
            {
                Enraged_Regeneration.Launch();
                return;
            }
        }
    }

    private void Decast()
    {
        if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell && ObjectManager.Target.GetDistance < 8
            && ObjectManager.Me.HealthPercent <= MySettings.UseArcaneTorrentForDecastAtPercentage
            && MySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else if (!Hamstring.TargetHaveBuff && MySettings.UseHamstring && Hamstring.KnownSpell
                 && Hamstring.IsSpellUsable && Hamstring.IsDistanceGood)
        {
            Hamstring.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && Pummel.IsDistanceGood
                 && Pummel.KnownSpell && Pummel.IsSpellUsable && MySettings.UsePummel)
        {
            Pummel.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe &&
                 ObjectManager.Target.GetDistance < 10
                 && Disrupting_Shout.KnownSpell && Disrupting_Shout.IsSpellUsable && MySettings.UseDisruptingShout)
        {
            Disrupting_Shout.Launch();
            return;
        }
        else if (ObjectManager.Target.GetMove && !Piercing_Howl.TargetHaveBuff && MySettings.UsePiercingHowl
                 && Piercing_Howl.KnownSpell && Piercing_Howl.IsSpellUsable && ObjectManager.Target.GetDistance < 15)
        {
            Piercing_Howl.Launch();
            return;
        }
        else if (Hamstring.TargetHaveBuff && MySettings.UseStaggeringShout && Staggering_Shout.KnownSpell
                 && Staggering_Shout.IsSpellUsable && ObjectManager.Target.GetDistance < 20)
        {
            Staggering_Shout.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && Spell_Reflection.KnownSpell && Spell_Reflection.IsSpellUsable
                 && MySettings.UseSpellReflection)
        {
            Spell_Reflection.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe &&
                 MySettings.UseMassSpellReflection
                 && Mass_Spell_Reflection.KnownSpell && Mass_Spell_Reflection.IsSpellUsable)
        {
            Mass_Spell_Reflection.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && ObjectManager.Me.HealthPercent < 80 && Shield_Barrier.KnownSpell
                && Shield_Barrier.IsSpellUsable && MySettings.UseShieldBarrier && Shield_Barrier_Timer.IsReady)
            {
                Shield_Barrier.Launch();
                Shield_Barrier_Timer = new Timer(1000*6);
                return;
            }
        }
    }

    private void DPS_Burst()
    {
        if (MySettings.UseTrinket && Trinket_Timer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Trinket_Timer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBerserking)
            Berserking.Launch();
        else if (Blood_Fury.IsSpellUsable && Blood_Fury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBloodFury)
            Blood_Fury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (Engineering_Timer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                && MySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            Engineering_Timer = new Timer(1000*60);
        }
        else if (Berserker_Rage.KnownSpell && Berserker_Rage.IsSpellUsable && ObjectManager.Me.RagePercentage < 50
                 && MySettings.UseBerserkerRage && ObjectManager.Target.GetDistance < 30)
        {
            Berserker_Rage.Launch();
            return;
        }
        else if (Battle_Shout.KnownSpell && Battle_Shout.IsSpellUsable && ObjectManager.Me.RagePercentage < 80
                 && MySettings.UseBattleShout && ObjectManager.Target.GetDistance < 30)
        {
            Battle_Shout.Launch();
            return;
        }
        else if (Commanding_Shout.KnownSpell && Commanding_Shout.IsSpellUsable && ObjectManager.Me.RagePercentage < 80
                 && MySettings.UseCommandingShout && !MySettings.UseBattleShout && ObjectManager.Target.GetDistance < 30)
        {
            Commanding_Shout.Launch();
            return;
        }
        else if (Recklessness.KnownSpell && Recklessness.IsSpellUsable && MySettings.UseRecklessness
                 && ObjectManager.Target.GetDistance < 30)
        {
            Recklessness.Launch();
            return;
        }
        else if (Shattering_Throw.KnownSpell && Shattering_Throw.IsSpellUsable && Shattering_Throw.IsDistanceGood
                 && MySettings.UseShatteringThrow)
        {
            Shattering_Throw.Launch();
            return;
        }
        else if (Skull_Banner.KnownSpell && Skull_Banner.IsSpellUsable
                 && MySettings.UseSkullBanner && ObjectManager.Target.GetDistance < 30)
        {
            Skull_Banner.Launch();
            return;
        }
        else if (Avatar.KnownSpell && Avatar.IsSpellUsable
                 && MySettings.UseAvatar && ObjectManager.Target.GetDistance < 30)
        {
            Avatar.Launch();
            return;
        }
        else if (Bloodbath.KnownSpell && Bloodbath.IsSpellUsable
                 && MySettings.UseBloodbath && ObjectManager.Target.GetDistance < 30)
        {
            Bloodbath.Launch();
            return;
        }
        else
        {
            if (Storm_Bolt.KnownSpell && Storm_Bolt.IsSpellUsable
                && MySettings.UseStormBolt && Storm_Bolt.IsDistanceGood)
            {
                Storm_Bolt.Launch();
                return;
            }
        }
    }

    private void DPS_Cycle()
    {
        if (Heroic_Throw.KnownSpell && Heroic_Throw.IsSpellUsable && Heroic_Throw.IsDistanceGood
            && MySettings.UseHeroicThrow && !ObjectManager.Target.InCombat)
        {
            Heroic_Throw.Launch();
            return;
        }

        if (Charge.KnownSpell && Charge.IsSpellUsable && Charge.IsDistanceGood
            && MySettings.UseCharge && ObjectManager.Target.GetDistance > 14)
        {
            Charge.Launch();
            return;
        }

        if (Victory_Rush.KnownSpell && Victory_Rush.IsSpellUsable && Victory_Rush.IsDistanceGood
            && MySettings.UseVictoryRush && ObjectManager.Me.HealthPercent < 90)
        {
            Victory_Rush.Launch();
            return;
        }

        if (ObjectManager.GetNumberAttackPlayer() > 2 && Thunder_Clap.KnownSpell && Thunder_Clap.IsSpellUsable
            && Thunder_Clap.IsDistanceGood && MySettings.UseThunderClap)
        {
            Thunder_Clap.Launch();
            return;
        }

        if (Cleave.KnownSpell && Cleave.IsSpellUsable && Cleave.IsDistanceGood &&
            ObjectManager.GetNumberAttackPlayer() > 2
            && MySettings.UseCleave && (ObjectManager.Me.RagePercentage > 80 || ObjectManager.Me.HaveBuff(122510)))
        {
            if (ObjectManager.Me.HealthPercent > 80)
            {
                if (Deadly_Calm.KnownSpell && Deadly_Calm.IsSpellUsable && MySettings.UseDeadlyCalm)
                {
                    Deadly_Calm.Launch();
                    Thread.Sleep(200);
                }
                Cleave.Launch();
                return;
            }
        }

        else
        {
            if (Heroic_Strike.KnownSpell && Heroic_Strike.IsSpellUsable && Heroic_Strike.IsDistanceGood
                && MySettings.UseHeroicStrike &&
                (ObjectManager.Me.RagePercentage > 80 || ObjectManager.Me.HaveBuff(122510)))
            {
                if (ObjectManager.Me.HealthPercent > 80)
                {
                    if (Deadly_Calm.KnownSpell && Deadly_Calm.IsSpellUsable && MySettings.UseDeadlyCalm)
                    {
                        Deadly_Calm.Launch();
                        Thread.Sleep(200);
                    }
                    Heroic_Strike.Launch();
                    return;
                }
            }
        }

        if (Shield_Slam.KnownSpell && Shield_Slam.IsSpellUsable && Shield_Slam.IsDistanceGood
            && MySettings.UseShieldSlam && ObjectManager.Me.RagePercentage < 95)
        {
            Shield_Slam.Launch();
            return;
        }
        else if (Revenge.KnownSpell && Revenge.IsDistanceGood && Revenge.IsSpellUsable
                 && MySettings.UseRevenge && ObjectManager.Me.RagePercentage < 95)
        {
            Revenge.Launch();
            return;
        }
        else if (Shockwave.KnownSpell && Shockwave.IsSpellUsable && Shockwave.IsDistanceGood
                 && MySettings.UseShockwave)
        {
            Shockwave.Launch();
            return;
        }
        else if (Dragon_Roar.KnownSpell && Dragon_Roar.IsSpellUsable && Dragon_Roar.IsDistanceGood
                 && MySettings.UseDragonRoar)
        {
            Shockwave.Launch();
            return;
        }
        else if (Bladestorm.KnownSpell && Bladestorm.IsSpellUsable && Bladestorm.IsDistanceGood
                 && MySettings.UseBladestorm)
        {
            Bladestorm.Launch();
            return;
        }
        else if (Thunder_Clap.KnownSpell && Thunder_Clap.IsSpellUsable && Thunder_Clap.IsDistanceGood
                 && MySettings.UseThunderClap && !ObjectManager.Target.HaveBuff(115798))
        {
            Thunder_Clap.Launch();
            return;
        }
        else if (Battle_Shout.KnownSpell && Battle_Shout.IsSpellUsable && MySettings.UseBattleShout)
        {
            Battle_Shout.Launch();
            return;
        }
        else if (Commanding_Shout.KnownSpell && Commanding_Shout.IsSpellUsable && MySettings.UseCommandingShout
                 && !MySettings.UseBattleShout)
        {
            Commanding_Shout.Launch();
            return;
        }
        else if (Sunder_Armor.KnownSpell && Sunder_Armor.IsSpellUsable && Sunder_Armor.IsDistanceGood
                && MySettings.UseDevastate)
        {
            Sunder_Armor.Launch();
            return;
        }
        else
        {
            if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell
                && MySettings.UseArcaneTorrentForResource)
            {
                Arcane_Torrent.Launch();
                return;
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: WarriorProtectionSettings

    [Serializable]
    public class WarriorProtectionSettings : Settings
    {
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public int UseStoneformAtPercentage = 80;
        public int UseWarStompAtPercentage = 80;
        public bool UseAlchFlask = true;
        public bool UseArcaneTorrentForDecast = true;
        public bool UseArcaneTorrentForResource = true;
        public bool UseAvatar = true;
        public bool UseBattleShout = true;
        public bool UseBattleStance = true;
        public bool UseBerserkerRage = true;
        public bool UseBerserkerStance = false;
        public bool UseBerserking = true;
        public bool UseBladestorm = true;
        public bool UseBloodFury = true;
        public bool UseBloodbath = true;
        public bool UseCharge = true;
        public bool UseCleave = true;
        public bool UseCommandingShout = false;
        public bool UseDeadlyCalm = true;
        public bool UseDefensiveStance = true;
        public bool UseDemoralizingBanner = true;
        public bool UseDemoralizingShout = true;
        public bool UseDevastate = true;
        public bool UseDisarm = true;
        public bool UseDisruptingShout = true;
        public bool UseDragonRoar = true;
        public bool UseEngGlove = true;
        public bool UseEnragedRegeneration = true;
        public bool UseExecute = true;
        public bool UseGiftoftheNaaru = true;
        public bool UseHamstring = false;
        public bool UseHeroicLeap = true;
        public bool UseHeroicStrike = true;
        public bool UseHeroicThrow = true;
        public bool UseIntimidatingShout = true;
        public bool UseLastStand = true;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMassSpellReflection = true;
        public bool UsePiercingHowl = false;
        public bool UsePummel = true;
        public bool UseRallyingCry = true;
        public bool UseRecklessness = true;
        public bool UseRevenge = true;
        public bool UseShatteringThrow = true;
        public bool UseShieldBarrier = true;
        public bool UseShieldBlock = true;
        public bool UseShieldSlam = true;
        public bool UseShieldWall = true;
        public bool UseShockwave = true;
        public bool UseSkullBanner = true;
        public bool UseSpellReflection = true;
        public bool UseStaggeringShout = true;
        public bool UseStoneform = true;
        public bool UseStormBolt = true;
        public bool UseSweepingStrikes = true;
        public bool UseTaunt = true;
        public bool UseThunderClap = true;
        public bool UseTrinket = true;
        public bool UseVictoryRush = true;
        public bool UseWarStomp = true;

        public WarriorProtectionSettings()
        {
            ConfigWinForm(new Point(500, 400), "Warrior Protection Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrent", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Warrior Buffs */
            AddControlInWinForm("Use Battle Shout", "UseBattleShout", "Warrior Buffs");
            AddControlInWinForm("Use Battle Stance", "UseBattleStance", "Warrior Buffs");
            AddControlInWinForm("Use Berserker Stance", "UseBerserkerStance", "Warrior Buffs");
            AddControlInWinForm("Use Commanding Shout", "UseCommandingShout", "Warrior Buffs");
            AddControlInWinForm("Use Defensive Stance", "UseDefensiveStance", "Warrior Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Avatar", "UseAvatar", "Offensive Spell");
            AddControlInWinForm("Use Bladestorm", "UseBladestorm", "Offensive Spell");
            AddControlInWinForm("Use Bloodbath", "UseBloodbath", "Offensive Spell");
            AddControlInWinForm("Use Charge", "UseCharge", "Offensive Spell");
            AddControlInWinForm("Use Cleave", "UseCleave", "Offensive Spell");
            AddControlInWinForm("Use Devastate", "UseDevastate", "Offensive Spell");
            AddControlInWinForm("Use Dragon Roar", "UseDragonRoar", "Offensive Spell");
            AddControlInWinForm("Use Exectue", "UseExecute", "Offensive Spell");
            AddControlInWinForm("Use Heroic Leap", "UseHeroicLeap", "Offensive Spell");
            AddControlInWinForm("Use Heroic Strike", "UseHeroicStrike", "Offensive Spell");
            AddControlInWinForm("Use Heroic Throw", "UseHeroicThrow", "Offensive Spell");
            AddControlInWinForm("Use Revenge", "UseRevenge", "Offensive Spell");
            AddControlInWinForm("Use Shield Slam", "UseShieldSlam", "Offensive Spell");
            AddControlInWinForm("Use Shockwave", "UseShockwave", "Offensive Spell");
            AddControlInWinForm("Use Storm Bolt", "UseStormBolt", "Offensive Spell");
            AddControlInWinForm("Use Taunt", "UseTaunt", "Offensive Spell");
            AddControlInWinForm("Use Thunder Clap", "UseThunderClap", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Berserker Rage", "UseBerserkerRage", "Offensive Cooldown");
            AddControlInWinForm("Use Deadly Calm", "UseDeadlyCalm", "Offensive Cooldown");
            AddControlInWinForm("Use Recklessness", "UseRecklessness", "Offensive Cooldown");
            AddControlInWinForm("Use Shattering Throw", "UseShatteringThrow", "Offensive Cooldown");
            AddControlInWinForm("Use Sweeping Strikes", "UseSweepingStrikes", "Offensive Cooldown");
            AddControlInWinForm("Use Skull Banner", "UseSkullBanner", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Demoralizing Banner", "UseDemoralizingBanner", "Defensive Cooldown");
            AddControlInWinForm("Use Demoralizing Shout", "UseDemoralizingShout", "Defensive Cooldown");
            AddControlInWinForm("Use Disarm", "UseDisarm", "Defensive Cooldown");
            AddControlInWinForm("Use Disrupting Shout", "UseDisruptingShout", "Defensive Cooldown");
            AddControlInWinForm("Use Hamstring", "UseHamstring", "Defensive Cooldown");
            AddControlInWinForm("Use Intimidating Shout", "UseIntimidatingShout", "Defensive Cooldown");
            AddControlInWinForm("Use Mass Spell Reflection", "UseMassSpellReflection", "Defensive Cooldown");
            AddControlInWinForm("Use Piercing Howl", "UsePiercingHowl", "Defensive Cooldown");
            AddControlInWinForm("Use Pummel", "UsePummel", "Defensive Cooldown");
            AddControlInWinForm("Use Shield Barrier", "UseShieldBarrier", "Defensive Cooldown");
            AddControlInWinForm("Use Shield Block", "UseShieldBlock", "Defensive Cooldown");
            AddControlInWinForm("Use Shield Wall", "UseShieldWall", "Defensive Cooldown");
            AddControlInWinForm("Use Spell Reflection", "UseSpellReflection", "Defensive Cooldown");
            AddControlInWinForm("Use Staggering Shout", "UseStaggeringShout", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Enraged Regeneration", "UseEnragedRegeneration", "Healing Spell");
            AddControlInWinForm("Use Last Stand", "UseLastStand", "Healing Spell");
            AddControlInWinForm("Use Rallying Cry", "UseRallyingCry", "Healing Spell");
            AddControlInWinForm("Use Victory Rush", "UseVictoryRush", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket", "UseTrinket", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
        }

        public static WarriorProtectionSettings CurrentSetting { get; set; }

        public static WarriorProtectionSettings GetSettings()
        {
            string CurrentSettingsFile = Application.StartupPath + "\\CustomClasses\\Settings\\Warrior_Protection.xml";
            if (File.Exists(CurrentSettingsFile))
            {
                return
                    CurrentSetting = Load<WarriorProtectionSettings>(CurrentSettingsFile);
            }
            else
            {
                return new WarriorProtectionSettings();
            }
        }
    }

    #endregion
}

public class Warrior_Fury
{
    private readonly WarriorFurySettings MySettings = WarriorFurySettings.GetSettings();
    private readonly string MoveBackward = nManager.Wow.Helpers.Keybindings.GetKeyByAction(nManager.Wow.Enums.Keybindings.MOVEBACKWARD);

    #region General Timers & Variables

    private Timer AlchFlask_Timer = new Timer(0);
    private Timer Engineering_Timer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer Trinket_Timer = new Timer(0);
    public int LC = 0;

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell Arcane_Torrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell Blood_Fury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell Gift_of_the_Naaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell War_Stomp = new Spell("War Stomp");

    #endregion

    #region Warrior Buffs

    private readonly Spell Battle_Shout = new Spell("Battle Shout");
    private readonly Spell Battle_Stance = new Spell("Battle Stance");
    private readonly Spell Berserker_Stance = new Spell("Berserker Stance");
    private readonly Spell Commanding_Shout = new Spell("Commanding Shout");
    private readonly Spell Defensive_Stance = new Spell("Defensive Stance");

    #endregion

    #region Offensive Spell

    private readonly Spell Avatar = new Spell("Avatar");
    private readonly Spell Bladestorm = new Spell("Bladestorm");
    private readonly Spell Bloodbath = new Spell("Bloodbath");
    private readonly Spell Bloodthirst = new Spell("Bloodthirst");
    private readonly Spell Charge = new Spell("Charge");
    private readonly Spell Cleave = new Spell("Cleave");
    private readonly Spell Colossus_Smash = new Spell("Colossus Smash");
    private readonly Spell Dragon_Roar = new Spell("Dragon Roar");
    private readonly Spell Execute = new Spell("Execute");
    private readonly Spell Heroic_Leap = new Spell("Heroic Leap");
    private readonly Spell Heroic_Strike = new Spell("Heroic Strike");
    private readonly Spell Heroic_Throw = new Spell("Heroic Throw");
    private readonly Spell Impending_Victory = new Spell("Impending Victory");
    private readonly Spell Raging_Blow = new Spell("Raging Blow");
    private readonly Spell Shockwave = new Spell("Shockwave");
    private readonly Spell Storm_Bolt = new Spell("Storm Bolt");
    private readonly Spell Taunt = new Spell("Taunt");
    private readonly Spell Thunder_Clap = new Spell("Thunder Clap");
    private readonly Spell Whirlwind = new Spell("Whirlwind");
    private readonly Spell Wild_Strike = new Spell("Wild Strike");

    #endregion

    #region Offensive Cooldown

    private readonly Spell Berserker_Rage = new Spell("Berserker Rage");
    private readonly Spell Deadly_Calm = new Spell("Deadly Calm");
    private readonly Spell Recklessness = new Spell("Recklessness");
    private readonly Spell Shattering_Throw = new Spell("Shattering Throw");
    private readonly Spell Skull_Banner = new Spell("Skull Banner");
    private readonly Spell Sweeping_Strikes = new Spell("Sweeping Strikes");

    #endregion

    #region Defensive Cooldown

    private readonly Spell Demoralizing_Banner = new Spell("Demoralizing Banner");
    private readonly Spell Die_by_the_Sword = new Spell("Die by the Sword");
    private readonly Spell Disarm = new Spell("Disarm");
    private readonly Spell Disrupting_Shout = new Spell("Disrupting Shout");
    private readonly Spell Hamstring = new Spell("Hamstring");
    private readonly Spell Intimidating_Shout = new Spell("Intimidating Shout");
    private readonly Spell Mass_Spell_Reflection = new Spell("Mass Spell Reflection");
    private readonly Spell Piercing_Howl = new Spell("Piercing Howl");
    private readonly Spell Pummel = new Spell("Pummel");
    private readonly Spell Staggering_Shout = new Spell("Staggering Shout");
    private Timer Disarm_Timer = new Timer(0);

    #endregion

    #region Healing Spell

    private readonly Spell Enraged_Regeneration = new Spell("Enraged Regeneration");
    private readonly Spell Rallying_Cry = new Spell("Rallying Cry");
    private readonly Spell Victory_Rush = new Spell("Victory Rush");

    #endregion

    public Warrior_Fury()
    {
        Main.range = 5.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && Taunt.IsDistanceGood)
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && MySettings.UseLowCombat)
                            {
                                LC = 1;
                                LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(250);
        }
    }

    private void Pull()
    {
        if (Heroic_Leap.IsDistanceGood && Heroic_Leap.KnownSpell && Heroic_Leap.IsSpellUsable
            && MySettings.UseHeroicLeap)
        {
            SpellManager.CastSpellByIDAndPosition(6544, ObjectManager.Target.Position);
            Thread.Sleep(200);
        }

        if (Taunt.IsDistanceGood && Taunt.KnownSpell && Taunt.IsSpellUsable
            && MySettings.UseTaunt && ObjectManager.Target.GetDistance > 20)
        {
            Taunt.Launch();
            return;
        }
    }

    private void LowCombat()
    {
        Buff();
        AvoidMelee();
        Defense_Cycle();
        Heal();

        if (Heroic_Throw.KnownSpell && Heroic_Throw.IsSpellUsable && Heroic_Throw.IsDistanceGood
            && MySettings.UseHeroicThrow && !ObjectManager.Target.InCombat)
        {
            Heroic_Throw.Launch();
            return;
        }

        if (Charge.KnownSpell && Charge.IsSpellUsable && Charge.IsDistanceGood
            && MySettings.UseCharge && ObjectManager.Target.GetDistance > 14)
        {
            Charge.Launch();
            return;
        }

        if (Bloodthirst.KnownSpell && Bloodthirst.IsSpellUsable && Bloodthirst.IsDistanceGood
            && MySettings.UseBloodthirst)
        {
            Bloodthirst.Launch();
            return;
        }
        else if (Colossus_Smash.KnownSpell && Colossus_Smash.IsDistanceGood && Colossus_Smash.IsSpellUsable
                 && MySettings.UseColossusSmash)
        {
            Colossus_Smash.Launch();
            return;
        }
        else if (Heroic_Strike.KnownSpell && Heroic_Strike.IsSpellUsable && Heroic_Strike.IsDistanceGood
                 && MySettings.UseHeroicStrike && ObjectManager.GetNumberAttackPlayer() < 3
                 && ObjectManager.Me.RagePercentage > 80)
        {
            if (Deadly_Calm.KnownSpell && Deadly_Calm.IsSpellUsable && MySettings.UseDeadlyCalm)
            {
                Deadly_Calm.Launch();
                Thread.Sleep(200);
            }

            Heroic_Strike.Launch();
            return;
        }
        else if (Shockwave.KnownSpell && Shockwave.IsSpellUsable && ObjectManager.Target.GetDistance < 10
                 && MySettings.UseShockwave)
        {
            Shockwave.Launch();
            return;
        }
        else if (Dragon_Roar.KnownSpell && Dragon_Roar.IsSpellUsable && ObjectManager.Target.GetDistance < 8
                 && MySettings.UseDragonRoar)
        {
            Dragon_Roar.Launch();
            return;
        }
        else
        {
            if (Bladestorm.KnownSpell && Bladestorm.IsSpellUsable && ObjectManager.Target.GetDistance < 8
                && MySettings.UseBladestorm)
            {
                Bladestorm.Launch();
                return;
            }
        }

        if (Thunder_Clap.KnownSpell && Thunder_Clap.IsSpellUsable && Thunder_Clap.IsDistanceGood
            && MySettings.UseThunderClap)
        {
            Thunder_Clap.Launch();
            return;
        }
    }

    private void Combat()
    {
        Buff();
        AvoidMelee();
        if (OnCD.IsReady)
            Defense_Cycle();
        Heal();
        Decast();
        DPS_Burst();
        DPS_Cycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (ObjectManager.Me.HealthPercent < 30 && MySettings.UseDefensiveStance
            && Defensive_Stance.KnownSpell && Defensive_Stance.IsSpellUsable && !Defensive_Stance.HaveBuff)
        {
            Defensive_Stance.Launch();
            return;
        }
        else if (!Battle_Stance.HaveBuff && Battle_Stance.KnownSpell && Battle_Stance.IsSpellUsable
                 && MySettings.UseBattleStance && ObjectManager.Me.HealthPercent > 50)
        {
            Battle_Stance.Launch();
            return;
        }
        else if (!Berserker_Stance.HaveBuff && Berserker_Stance.KnownSpell && Berserker_Stance.IsSpellUsable
                 && MySettings.UseBerserkerStance && !MySettings.UseBattleStance && ObjectManager.Me.HealthPercent > 50)
        {
            Berserker_Stance.Launch();
            return;
        }
        else if (Battle_Shout.KnownSpell && Battle_Shout.IsSpellUsable && !Battle_Shout.HaveBuff
                 && MySettings.UseBattleShout)
        {
            Battle_Shout.Launch();
            return;
        }
        else
        {
            if (Commanding_Shout.KnownSpell && Commanding_Shout.IsSpellUsable && !Commanding_Shout.HaveBuff
                && MySettings.UseCommandingShout && !MySettings.UseBattleShout)
            {
                Commanding_Shout.Launch();
                return;
            }
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            Keyboard.DownKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
            while (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
                Thread.Sleep(300);
            Keyboard.UpKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
        }
    }

    private void Defense_Cycle()
    {
        if (ObjectManager.Me.HealthPercent < 95 && MySettings.UseDisarm && Disarm.IsDistanceGood
            && Disarm.KnownSpell && Disarm.IsSpellUsable && Disarm_Timer.IsReady)
        {
            Disarm.Launch();
            Disarm_Timer = new Timer(1000*60);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 20 && MySettings.UseIntimidatingShout
                 && Intimidating_Shout.KnownSpell && Intimidating_Shout.IsSpellUsable &&
                 ObjectManager.Target.GetDistance < 8)
        {
            Intimidating_Shout.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && MySettings.UseDiebytheSword
                 && Die_by_the_Sword.KnownSpell && Die_by_the_Sword.IsSpellUsable)
        {
            Die_by_the_Sword.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && MySettings.UseDemoralizingBanner
                 && Demoralizing_Banner.KnownSpell && Demoralizing_Banner.IsSpellUsable &&
                 ObjectManager.Target.GetDistance < 30)
        {
            SpellManager.CastSpellByIDAndPosition(114203, ObjectManager.Target.Position);
            OnCD = new Timer(1000*15);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseWarStompAtPercentage && War_Stomp.IsSpellUsable && War_Stomp.KnownSpell
                 && MySettings.UseWarStomp)
        {
            War_Stomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent <= MySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable && Stoneform.KnownSpell
                && MySettings.UseStoneform)
            {
                Stoneform.Launch();
                OnCD = new Timer(1000*8);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (Victory_Rush.KnownSpell && Victory_Rush.IsSpellUsable && Victory_Rush.IsDistanceGood
            && MySettings.UseVictoryRush && ObjectManager.Me.HealthPercent < 90)
        {
            Victory_Rush.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 30 && Rallying_Cry.IsSpellUsable && Rallying_Cry.KnownSpell
                 && MySettings.UseRallyingCry && Fight.InFight)
        {
            Rallying_Cry.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseGiftoftheNaaruAtPercentage && Gift_of_the_Naaru.IsSpellUsable && Gift_of_the_Naaru.KnownSpell
                 && MySettings.UseGiftoftheNaaru)
        {
            Gift_of_the_Naaru.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent < 80 && Enraged_Regeneration.IsSpellUsable &&
                Enraged_Regeneration.KnownSpell
                && MySettings.UseEnragedRegeneration)
            {
                Enraged_Regeneration.Launch();
                return;
            }
        }
    }

    private void Decast()
    {
        if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell && ObjectManager.Target.GetDistance < 8
            && ObjectManager.Me.HealthPercent <= MySettings.UseArcaneTorrentForDecastAtPercentage
            && MySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else if (!Hamstring.TargetHaveBuff && MySettings.UseHamstring && Hamstring.KnownSpell
                 && Hamstring.IsSpellUsable && Hamstring.IsDistanceGood)
        {
            Hamstring.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && Pummel.IsDistanceGood
                 && Pummel.KnownSpell && Pummel.IsSpellUsable && MySettings.UsePummel)
        {
            Pummel.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe &&
                 ObjectManager.Target.GetDistance < 10
                 && Disrupting_Shout.KnownSpell && Disrupting_Shout.IsSpellUsable && MySettings.UseDisruptingShout)
        {
            Disrupting_Shout.Launch();
            return;
        }
        else if (ObjectManager.Target.GetMove && !Piercing_Howl.TargetHaveBuff && MySettings.UsePiercingHowl
                 && Piercing_Howl.KnownSpell && Piercing_Howl.IsSpellUsable && ObjectManager.Target.GetDistance < 15)
        {
            Piercing_Howl.Launch();
            return;
        }
        else if (Hamstring.TargetHaveBuff && MySettings.UseStaggeringShout && Staggering_Shout.KnownSpell
                 && Staggering_Shout.IsSpellUsable && ObjectManager.Target.GetDistance < 20)
        {
            Staggering_Shout.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe &&
                MySettings.UseMassSpellReflection
                && Mass_Spell_Reflection.KnownSpell && Mass_Spell_Reflection.IsSpellUsable)
            {
                Mass_Spell_Reflection.Launch();
                return;
            }
        }
    }

    private void DPS_Burst()
    {
        if (MySettings.UseTrinket && Trinket_Timer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Trinket_Timer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBerserking)
            Berserking.Launch();
        else if (Blood_Fury.IsSpellUsable && Blood_Fury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBloodFury)
            Blood_Fury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (Engineering_Timer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                && MySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            Engineering_Timer = new Timer(1000*60);
        }
        else if (Berserker_Rage.KnownSpell && Berserker_Rage.IsSpellUsable && ObjectManager.Me.RagePercentage < 50
                 && MySettings.UseBerserkerRage && ObjectManager.Target.GetDistance < 30)
        {
            Berserker_Rage.Launch();
            return;
        }
        else if (Battle_Shout.KnownSpell && Battle_Shout.IsSpellUsable && ObjectManager.Me.RagePercentage < 80
                 && MySettings.UseBattleShout && ObjectManager.Target.GetDistance < 30)
        {
            Battle_Shout.Launch();
            return;
        }
        else if (Commanding_Shout.KnownSpell && Commanding_Shout.IsSpellUsable && ObjectManager.Me.RagePercentage < 80
                 && MySettings.UseCommandingShout && !MySettings.UseBattleShout && ObjectManager.Target.GetDistance < 30)
        {
            Commanding_Shout.Launch();
            return;
        }
        else if (Recklessness.KnownSpell && Recklessness.IsSpellUsable && MySettings.UseRecklessness
                 && ObjectManager.Target.GetDistance < 30)
        {
            Recklessness.Launch();
            return;
        }
        else if (Shattering_Throw.KnownSpell && Shattering_Throw.IsSpellUsable && Shattering_Throw.IsDistanceGood
                 && MySettings.UseShatteringThrow)
        {
            Shattering_Throw.Launch();
            return;
        }
        else if (Skull_Banner.KnownSpell && Skull_Banner.IsSpellUsable
                 && MySettings.UseSkullBanner && ObjectManager.Target.GetDistance < 30)
        {
            Skull_Banner.Launch();
            return;
        }
        else if (Avatar.KnownSpell && Avatar.IsSpellUsable
                 && MySettings.UseAvatar && ObjectManager.Target.GetDistance < 30)
        {
            Avatar.Launch();
            return;
        }
        else if (Bloodbath.KnownSpell && Bloodbath.IsSpellUsable
                 && MySettings.UseBloodbath && ObjectManager.Target.GetDistance < 30)
        {
            Bloodbath.Launch();
            return;
        }
        else
        {
            if (Storm_Bolt.KnownSpell && Storm_Bolt.IsSpellUsable
                && MySettings.UseStormBolt && Storm_Bolt.IsDistanceGood)
            {
                Storm_Bolt.Launch();
                return;
            }
        }
    }

    private void DPS_Cycle()
    {
        if (Heroic_Throw.KnownSpell && Heroic_Throw.IsSpellUsable && Heroic_Throw.IsDistanceGood
            && MySettings.UseHeroicThrow && !ObjectManager.Target.InCombat)
        {
            Heroic_Throw.Launch();
            return;
        }

        if (Charge.KnownSpell && Charge.IsSpellUsable && Charge.IsDistanceGood
            && MySettings.UseCharge && ObjectManager.Target.GetDistance > 14)
        {
            Charge.Launch();
            return;
        }

        if (Victory_Rush.KnownSpell && Victory_Rush.IsSpellUsable && Victory_Rush.IsDistanceGood
            && MySettings.UseVictoryRush && ObjectManager.Me.HealthPercent < 90)
        {
            Victory_Rush.Launch();
            return;
        }
        else if (Whirlwind.KnownSpell && Whirlwind.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 3
                 && MySettings.UseWhirlwind)
        {
            Whirlwind.Launch();
            return;
        }
        else if (Cleave.KnownSpell && Cleave.IsSpellUsable && Cleave.IsDistanceGood && MySettings.UseCleave
                 && ObjectManager.GetNumberAttackPlayer() > 1 && ObjectManager.GetNumberAttackPlayer() < 4)
        {
            if (Deadly_Calm.KnownSpell && Deadly_Calm.IsSpellUsable && MySettings.UseDeadlyCalm)
            {
                Deadly_Calm.Launch();
                Thread.Sleep(200);
            }

            Cleave.Launch();
            return;
        }
        else if (Heroic_Strike.KnownSpell && Heroic_Strike.IsSpellUsable && Heroic_Strike.IsDistanceGood
                 && MySettings.UseHeroicStrike && ObjectManager.GetNumberAttackPlayer() < 3
                 && ObjectManager.Me.RagePercentage > 80)
        {
            if (Deadly_Calm.KnownSpell && Deadly_Calm.IsSpellUsable && MySettings.UseDeadlyCalm)
            {
                Deadly_Calm.Launch();
                Thread.Sleep(200);
            }

            Heroic_Strike.Launch();
            return;
        }
        else if (Shockwave.KnownSpell && Shockwave.IsSpellUsable && ObjectManager.Target.GetDistance < 10
                 && MySettings.UseShockwave)
        {
            Shockwave.Launch();
            return;
        }
        else if (Dragon_Roar.KnownSpell && Dragon_Roar.IsSpellUsable && ObjectManager.Target.GetDistance < 8
                 && MySettings.UseDragonRoar)
        {
            Dragon_Roar.Launch();
            return;
        }
        else if (Bladestorm.KnownSpell && Bladestorm.IsSpellUsable && ObjectManager.Target.GetDistance < 8
                 && MySettings.UseBladestorm)
        {
            Bladestorm.Launch();
            return;
        }
        else if (Bloodthirst.KnownSpell && Bloodthirst.IsSpellUsable && Bloodthirst.IsDistanceGood
                 && MySettings.UseBloodthirst)
        {
            Bloodthirst.Launch();
            return;
        }
        else if (Colossus_Smash.KnownSpell && Colossus_Smash.IsSpellUsable && Colossus_Smash.IsDistanceGood
                 && MySettings.UseColossusSmash)
        {
            Colossus_Smash.Launch();
            return;
        }
        else if (Execute.KnownSpell && Execute.IsSpellUsable && Execute.IsDistanceGood
                 && MySettings.UseExecute && ObjectManager.GetNumberAttackPlayer() < 4)
        {
            Execute.Launch();
            return;
        }
        else if (Raging_Blow.KnownSpell && Raging_Blow.IsSpellUsable && Raging_Blow.IsDistanceGood
                 && MySettings.UseRagingBlow)
        {
            Raging_Blow.Launch();
            return;
        }
        else if (Wild_Strike.KnownSpell && Wild_Strike.IsSpellUsable && Wild_Strike.IsDistanceGood
                 && MySettings.UseWildStrike && ObjectManager.Me.HaveBuff(46915))
        {
            Wild_Strike.Launch();
            return;
        }
        else
        {
            if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell
                && MySettings.UseArcaneTorrentForResource)
            {
                Arcane_Torrent.Launch();
                return;
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: WarriorFurySettings

    [Serializable]
    public class WarriorFurySettings : Settings
    {
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public int UseStoneformAtPercentage = 80;
        public int UseWarStompAtPercentage = 80;
        public bool UseAlchFlask = true;
        public bool UseArcaneTorrentForDecast = true;
        public bool UseArcaneTorrentForResource = true;
        public bool UseAvatar = true;
        public bool UseBattleShout = true;
        public bool UseBattleStance = true;
        public bool UseBerserkerRage = true;
        public bool UseBerserkerStance = false;
        public bool UseBerserking = true;
        public bool UseBladestorm = true;
        public bool UseBloodFury = true;
        public bool UseBloodbath = true;
        public bool UseBloodthirst = true;
        public bool UseCharge = true;
        public bool UseCleave = true;
        public bool UseColossusSmash = true;
        public bool UseCommandingShout = false;
        public bool UseDeadlyCalm = true;
        public bool UseDefensiveStance = true;
        public bool UseDemoralizingBanner = true;
        public bool UseDiebytheSword = true;
        public bool UseDisarm = true;
        public bool UseDisruptingShout = true;
        public bool UseDragonRoar = true;
        public bool UseEngGlove = true;
        public bool UseEnragedRegeneration = true;
        public bool UseExecute = true;
        public bool UseGiftoftheNaaru = true;
        public bool UseHamstring = false;
        public bool UseHeroicLeap = true;
        public bool UseHeroicStrike = true;
        public bool UseHeroicThrow = true;
        public bool UseIntimidatingShout = true;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMassSpellReflection = true;
        public bool UsePiercingHowl = false;
        public bool UsePummel = true;
        public bool UseRagingBlow = true;
        public bool UseRallyingCry = true;
        public bool UseRecklessness = true;
        public bool UseShatteringThrow = true;
        public bool UseShockwave = true;
        public bool UseSkullBanner = true;
        public bool UseStaggeringShout = true;
        public bool UseStoneform = true;
        public bool UseStormBolt = true;
        public bool UseSweepingStrikes = true;
        public bool UseTaunt = true;
        public bool UseThunderClap = true;
        public bool UseTrinket = true;
        public bool UseVictoryRush = true;
        public bool UseWarStomp = true;
        public bool UseWhirlwind = true;
        public bool UseWildStrike = true;

        public WarriorFurySettings()
        {
            ConfigWinForm(new Point(500, 400), "Warrior Fury Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrent", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Warrior Buffs */
            AddControlInWinForm("Use Battle Shout", "UseBattleShout", "Warrior Buffs");
            AddControlInWinForm("Use Battle Stance", "UseBattleStance", "Warrior Buffs");
            AddControlInWinForm("Use Berserker Stance", "UseBerserkerStance", "Warrior Buffs");
            AddControlInWinForm("Use Commanding Shout", "UseCommandingShout", "Warrior Buffs");
            AddControlInWinForm("Use Defensive Stance", "UseDefensiveStance", "Warrior Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Avatar", "UseAvatar", "Offensive Spell");
            AddControlInWinForm("Use Bladestorm", "UseBladestorm", "Offensive Spell");
            AddControlInWinForm("Use Bloodbath", "UseBloodbath", "Offensive Spell");
            AddControlInWinForm("Use Bloodthirst", "UseBloodthirst", "Offensive Spell");
            AddControlInWinForm("Use Charge", "UseCharge", "Offensive Spell");
            AddControlInWinForm("Use Cleave", "UseCleave", "Offensive Spell");
            AddControlInWinForm("Use Colossus Smash", "UseColossusSmash", "Offensive Spell");
            AddControlInWinForm("Use Dragon Roar", "UseDragonRoar", "Offensive Spell");
            AddControlInWinForm("Use Exectue", "UseExecute", "Offensive Spell");
            AddControlInWinForm("Use Heroic Leap", "UseHeroicLeap", "Offensive Spell");
            AddControlInWinForm("Use Heroic Strike", "UseHeroicStrike", "Offensive Spell");
            AddControlInWinForm("Use Heroic Throw", "UseHeroicThrow", "Offensive Spell");
            AddControlInWinForm("Use Raging Blow", "UseRagingBlow", "Offensive Spell");
            AddControlInWinForm("Use Shockwave", "UseShockwave", "Offensive Spell");
            AddControlInWinForm("Use Storm Bolt", "UseStormBolt", "Offensive Spell");
            AddControlInWinForm("Use Taunt", "UseTaunt", "Offensive Spell");
            AddControlInWinForm("Use Thunder Clap", "UseThunderClap", "Offensive Spell");
            AddControlInWinForm("Use Whirlwind", "UseWhirlwind", "Offensive Spell");
            AddControlInWinForm("Use Wild Strike", "UseWildStrike", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Berserker Rage", "UseBerserkerRage", "Offensive Cooldown");
            AddControlInWinForm("Use Deadly Calm", "UseDeadlyCalm", "Offensive Cooldown");
            AddControlInWinForm("Use Recklessness", "UseRecklessness", "Offensive Cooldown");
            AddControlInWinForm("Use Shattering Throw", "UseShatteringThrow", "Offensive Cooldown");
            AddControlInWinForm("Use Sweeping Strikes", "UseSweepingStrikes", "Offensive Cooldown");
            AddControlInWinForm("Use Skull Banner", "UseSkullBanner", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Demoralizing Banner", "UseDemoralizingBanner", "Defensive Cooldown");
            AddControlInWinForm("Use Die by the Sword", "UseDiebytheSword", "Defensive Cooldown");
            AddControlInWinForm("Use Disarm", "UseDisarm", "Defensive Cooldown");
            AddControlInWinForm("Use Disrupting Shout", "UseDisruptingShout", "Defensive Cooldown");
            AddControlInWinForm("Use Hamstring", "UseHamstring", "Defensive Cooldown");
            AddControlInWinForm("Use Intimidating Shout", "UseIntimidatingShout", "Defensive Cooldown");
            AddControlInWinForm("Use Mass Spell Reflection", "UseMassSpellReflection", "Defensive Cooldown");
            AddControlInWinForm("Use Piercing Howl", "UsePiercingHowl", "Defensive Cooldown");
            AddControlInWinForm("Use Pummel", "UsePummel", "Defensive Cooldown");
            AddControlInWinForm("Use Staggering Shout", "UseStaggeringShout", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Enraged Regeneration", "UseEnragedRegeneration", "Healing Spell");
            AddControlInWinForm("Use Rallying Cry", "UseRallyingCry", "Healing Spell");
            AddControlInWinForm("Use Victory Rush", "UseVictoryRush", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket", "UseTrinket", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
        }

        public static WarriorFurySettings CurrentSetting { get; set; }

        public static WarriorFurySettings GetSettings()
        {
            string CurrentSettingsFile = Application.StartupPath + "\\CustomClasses\\Settings\\Warrior_Fury.xml";
            if (File.Exists(CurrentSettingsFile))
            {
                return
                    CurrentSetting = Load<WarriorFurySettings>(CurrentSettingsFile);
            }
            else
            {
                return new WarriorFurySettings();
            }
        }
    }

    #endregion
}

#endregion

#region Hunter

public class Hunter_Marksmanship
{
    private readonly HunterMarksmanshipSettings MySettings = HunterMarksmanshipSettings.GetSettings();
    private readonly string MoveBackward = nManager.Wow.Helpers.Keybindings.GetKeyByAction(nManager.Wow.Enums.Keybindings.MOVEBACKWARD);

    #region General Timers & Variables

    private Timer AlchFlask_Timer = new Timer(0);
    private Timer Engineering_Timer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer Steady_Focus_Timer = new Timer(0);
    private Timer Trinket_Timer = new Timer(0);
    public int LC = 0;

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell Arcane_Torrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell Blood_Fury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell Gift_of_the_Naaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell War_Stomp = new Spell("War Stomp");

    #endregion

    #region Hunter Buffs

    private readonly Spell Aspect_of_the_Hawk = new Spell("Aspect of the Hawk");
    private readonly Spell Camouflage = new Spell("Camouflage");
    private readonly Spell Feign_Death = new Spell("Feign Death");
    private readonly Spell Hunters_Mark = new Spell("Hunter's Mark");
    private readonly Spell Misdirection = new Spell("Misdirection");

    #endregion

    #region Offensive Spell

    private readonly Spell Aimed_Shot = new Spell("Aimed Shot");
    private readonly Spell Arcane_Shot = new Spell("Arcane Shot");
    private readonly Spell Call_Pet_1 = new Spell("Call Pet 1");
    private readonly Spell Call_Pet_2 = new Spell("Call Pet 2");
    private readonly Spell Call_Pet_3 = new Spell("Call Pet 3");
    private readonly Spell Call_Pet_4 = new Spell("Call Pet 4");
    private readonly Spell Call_Pet_5 = new Spell("Call Pet 5");
    private readonly Spell Chimera_Shot = new Spell("Chimera Shot");
    private readonly Spell Explosive_Trap = new Spell("Explosive Trap");
    private readonly Spell Kill_Shot = new Spell("Kill Shot");
    private readonly Spell Multi_Shot = new Spell("Multi-Shot");
    private readonly Spell Serpent_Sting = new Spell("Serpent Sting");
    private readonly Spell Steady_Shot = new Spell("Steady Shot");
    private Timer Serpent_Sting_Timer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell A_Murder_of_Crows = new Spell("A Murder of Crows");
    private readonly Spell Barrage = new Spell("Barrage");
    private readonly Spell Blink_Strike = new Spell("Blink Strike");
    private readonly Spell Dire_Beast = new Spell("Dire Beast");
    private readonly Spell Fervor = new Spell("Fervor");
    private readonly Spell Glaive_Toss = new Spell("Glaive Toss");
    private readonly Spell Lynx_Rush = new Spell("Lynx Rush");
    private readonly Spell Powershot = new Spell("Powershot");
    private readonly Spell Rapid_Fire = new Spell("Rapid Fire");
    private readonly Spell Readiness = new Spell("Readiness");
    private readonly Spell Stampede = new Spell("Stampede");
    private Timer Dire_Beast_Timer = new Timer(0);

    #endregion

    #region Defensive Cooldown

    private readonly Spell Binding_Shot = new Spell("Binding Shot");
    private readonly Spell Concussive_Shot = new Spell("Concussive Shot");
    private readonly Spell Deterrance = new Spell("Deterrance");
    private readonly Spell Disengage = new Spell("Disengage");
    private readonly Spell Freezing_Trap = new Spell("Freezing Trap");
    private readonly Spell Ice_Trap = new Spell("Ice Trap");
    private readonly Spell Scatter_Shot = new Spell("Scatter Shot");
    private readonly Spell Silencing_Shot = new Spell("Silencing Shot");
    private readonly Spell Wyvern_Sting = new Spell("Wyvern Sting");

    #endregion

    #region Healing Spell

    private readonly Spell Exhilaration = new Spell("Exhilaration");
    private readonly Spell Feed_Pet = new Spell("Feed Pet");
    private readonly Spell Mend_Pet = new Spell("Mend Pet");
    private readonly Spell Revive_Pet = new Spell("Revive Pet");
    private Timer Mend_Pet_Timer = new Timer(0);

    #endregion

    public Hunter_Marksmanship()
    {
        Main.range = 30.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget && Serpent_Sting.IsDistanceGood)
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && MySettings.UseLowCombat)
                            {
                                LC = 1;
                                LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(250);
        }
    }

    private void Pull()
    {
        if (Hunters_Mark.KnownSpell && Hunters_Mark.IsSpellUsable && MySettings.UseHuntersMark
            && Hunters_Mark.IsDistanceGood && !Hunters_Mark.TargetHaveBuff && LC != 1)
            Hunters_Mark.Launch();

        if (ObjectManager.Pet.IsAlive)
        {
            Lua.RunMacroText("/petattack");
            Logging.WriteFight("Launch Pet Attack");
        }

        if (ObjectManager.Pet.IsAlive && MySettings.UseMisdirection && Misdirection.KnownSpell
            && Misdirection.IsSpellUsable)
        {
            Lua.RunMacroText("/target pet");
            Thread.Sleep(200);
            Misdirection.Launch();
            Thread.Sleep(200);
        }

        if (Serpent_Sting.KnownSpell && Serpent_Sting.IsSpellUsable && Serpent_Sting.IsDistanceGood
            && MySettings.UseSerpentSting)
        {
            Serpent_Sting.Launch();
            return;
        }
    }

    private void LowCombat()
    {
        Buff();
        AvoidMelee();
        Defense_Cycle();
        Heal();

        if (Glaive_Toss.KnownSpell && Glaive_Toss.IsSpellUsable && Glaive_Toss.IsDistanceGood
            && MySettings.UseGlaiveToss)
        {
            Glaive_Toss.Launch();
            return;
        }
        else if (Arcane_Shot.IsSpellUsable && Arcane_Shot.IsDistanceGood && Arcane_Shot.KnownSpell
                 && MySettings.UseArcaneShot)
        {
            Arcane_Shot.Launch();
            return;
        }
        else
        {
            if (Steady_Shot.KnownSpell && Steady_Shot.IsSpellUsable && Steady_Shot.IsDistanceGood
                && MySettings.UseSteadyShot)
            {
                Steady_Shot.Launch();
                return;
            }
        }

        if (Explosive_Trap.KnownSpell && Explosive_Trap.IsSpellUsable && Explosive_Trap.IsDistanceGood
            && MySettings.UseExplosiveTrap)
        {
            Explosive_Trap.Launch();
            return;
        }
    }

    private void Combat()
    {
        Buff();
        AvoidMelee();
        if (OnCD.IsReady)
            Defense_Cycle();
        Heal();
        Decast();
        DPS_Burst();
        DPS_Cycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        Pet();

        if (MySettings.UseAspectoftheHawk && Aspect_of_the_Hawk.KnownSpell && Aspect_of_the_Hawk.IsSpellUsable
            && !Aspect_of_the_Hawk.HaveBuff && !ObjectManager.Me.HaveBuff(109260))
        {
            Aspect_of_the_Hawk.Launch();
            return;
        }

        if (MySettings.UseCamouflage && Camouflage.KnownSpell && Camouflage.IsSpellUsable && !Camouflage.HaveBuff
            && !Fight.InFight && ObjectManager.GetNumberAttackPlayer() == 0)
        {
            Camouflage.Launch();
            return;
        }
    }

    private void Pet()
    {
        if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
            && Call_Pet_1.KnownSpell && Call_Pet_1.IsSpellUsable && MySettings.UsePet1)
        {
            Call_Pet_1.Launch();
            Thread.Sleep(1000);
        }
        else if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                 && Call_Pet_2.KnownSpell && Call_Pet_2.IsSpellUsable && MySettings.UsePet2)
        {
            Call_Pet_2.Launch();
            Thread.Sleep(1000);
        }
        else if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                 && Call_Pet_3.KnownSpell && Call_Pet_3.IsSpellUsable && MySettings.UsePet3)
        {
            Call_Pet_3.Launch();
            Thread.Sleep(1000);
        }
        else if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                 && Call_Pet_4.KnownSpell && Call_Pet_4.IsSpellUsable && MySettings.UsePet4)
        {
            Call_Pet_4.Launch();
            Thread.Sleep(1000);
        }
        else
        {
            if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                && Call_Pet_5.KnownSpell && Call_Pet_5.IsSpellUsable && MySettings.UsePet5)
            {
                Call_Pet_5.Launch();
                Thread.Sleep(1000);
            }
        }

        if (!ObjectManager.Me.IsCast && (!ObjectManager.Pet.IsAlive || ObjectManager.Pet.Guid == 0)
            && Revive_Pet.KnownSpell && Revive_Pet.IsSpellUsable && MySettings.UseRevivePet
            && MySettings.UseCombatRevive && ObjectManager.Target.HealthPercent > 10)
        {
            Revive_Pet.Launch();
            Thread.Sleep(1000);
        }
        else if (!ObjectManager.Me.IsCast && (!ObjectManager.Pet.IsAlive || ObjectManager.Pet.Guid == 0)
                 && Revive_Pet.KnownSpell && Revive_Pet.IsSpellUsable && MySettings.UseRevivePet
                 && !Fight.InFight && ObjectManager.GetNumberAttackPlayer() == 0)
        {
            Revive_Pet.Launch();
            Thread.Sleep(1000);
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            Keyboard.DownKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
            while (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
                Thread.Sleep(300);
            Keyboard.UpKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
        }
    }

    private void Defense_Cycle()
    {
        if (ObjectManager.Me.HealthPercent < 20 && MySettings.UseFeignDeath
            && Feign_Death.KnownSpell && Feign_Death.IsSpellUsable)
        {
            Feign_Death.Launch();
            Thread.Sleep(5000);
            if (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                return;
            else
                Thread.Sleep(5000);
        }
        else if (ObjectManager.Me.HealthPercent < 50 && MySettings.UseDeterrance
                 && Deterrance.KnownSpell && Deterrance.IsSpellUsable)
        {
            Deterrance.Launch();
            Thread.Sleep(200);
        }
        else if (MySettings.UseFreezingTrap && ObjectManager.GetNumberAttackPlayer() > 1 && Freezing_Trap.KnownSpell
                 && Freezing_Trap.IsSpellUsable && ObjectManager.Target.GetDistance > 10)
        {
            Freezing_Trap.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && MySettings.UseIceTrap
                 && Ice_Trap.KnownSpell && Ice_Trap.IsSpellUsable && ObjectManager.Target.GetDistance < 10
                 && Disengage.KnownSpell && Disengage.IsSpellUsable && MySettings.UseDisengage)
        {
            Ice_Trap.Launch();
            Thread.Sleep(1000);
            Keybindings.PressKeybindings(nManager.Wow.Enums.Keybindings.JUMP);
            Disengage.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && MySettings.UseConcussiveShot
                 && Concussive_Shot.KnownSpell && Concussive_Shot.IsSpellUsable && Concussive_Shot.IsDistanceGood
                 && Disengage.KnownSpell && Disengage.IsSpellUsable && MySettings.UseDisengage)
        {
            Concussive_Shot.Launch();
            Thread.Sleep(1000);
            Keybindings.PressKeybindings(nManager.Wow.Enums.Keybindings.JUMP);
            Disengage.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && MySettings.UseBindingShot
                 && Binding_Shot.KnownSpell && Binding_Shot.IsSpellUsable && Binding_Shot.IsDistanceGood
                 && Disengage.KnownSpell && Disengage.IsSpellUsable && MySettings.UseDisengage)
        {
            Binding_Shot.Launch();
            Thread.Sleep(1000);
            Keybindings.PressKeybindings(nManager.Wow.Enums.Keybindings.JUMP);
            Disengage.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseWarStompAtPercentage && War_Stomp.IsSpellUsable && War_Stomp.KnownSpell
                 && MySettings.UseWarStomp)
        {
            War_Stomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent <= MySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable && Stoneform.KnownSpell
                && MySettings.UseStoneform)
            {
                Stoneform.Launch();
                OnCD = new Timer(1000*8);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (ObjectManager.Me.HealthPercent <= MySettings.UseGiftoftheNaaruAtPercentage && Gift_of_the_Naaru.KnownSpell && Gift_of_the_Naaru.IsSpellUsable
            && MySettings.UseGiftoftheNaaru)
        {
            Gift_of_the_Naaru.Launch();
            return;
        }
        else if (Exhilaration.KnownSpell && Exhilaration.IsSpellUsable
                 && MySettings.UseExhilaration && ObjectManager.Me.HealthPercent < 70)
        {
            Exhilaration.Launch();
            return;
        }
        else if (ObjectManager.Pet.Health > 0 && ObjectManager.Pet.HealthPercent < 50
                 && Feed_Pet.KnownSpell && Feed_Pet.IsSpellUsable && MySettings.UseFeedPet
                 && !Fight.InFight && ObjectManager.GetNumberAttackPlayer() == 0)
        {
            Feed_Pet.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Pet.Health > 0 && ObjectManager.Pet.HealthPercent < 80
                && Mend_Pet.KnownSpell && Mend_Pet.IsSpellUsable && MySettings.UseMendPet
                && Mend_Pet_Timer.IsReady)
            {
                Mend_Pet.Launch();
                Mend_Pet_Timer = new Timer(1000*10);
                return;
            }
        }
    }

    private void Decast()
    {
        if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell && ObjectManager.Target.GetDistance < 8
            && ObjectManager.Me.HealthPercent <= MySettings.UseArcaneTorrentForDecastAtPercentage
            && MySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && Silencing_Shot.IsDistanceGood
                 && Silencing_Shot.KnownSpell && Silencing_Shot.IsSpellUsable && MySettings.UseSilencingShot)
        {
            Silencing_Shot.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && Scatter_Shot.IsDistanceGood
                 && Scatter_Shot.KnownSpell && Scatter_Shot.IsSpellUsable && MySettings.UseScatterShot)
        {
            Scatter_Shot.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && MySettings.UseWyvernSting
                && Wyvern_Sting.KnownSpell && Wyvern_Sting.IsSpellUsable && Wyvern_Sting.IsDistanceGood)
            {
                Wyvern_Sting.Launch();
                return;
            }
        }
    }

    private void DPS_Burst()
    {
        if (MySettings.UseTrinket && Trinket_Timer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Trinket_Timer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBerserking)
            Berserking.Launch();
        else if (Blood_Fury.IsSpellUsable && Blood_Fury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBloodFury)
            Blood_Fury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (Engineering_Timer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                && MySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            Engineering_Timer = new Timer(1000*60);
        }
        else if (A_Murder_of_Crows.KnownSpell && A_Murder_of_Crows.IsSpellUsable && A_Murder_of_Crows.IsDistanceGood
                 && MySettings.UseAMurderofCrows && !A_Murder_of_Crows.TargetHaveBuff)
        {
            A_Murder_of_Crows.Launch();
            return;
        }
        else if (Barrage.KnownSpell && Barrage.IsSpellUsable && MySettings.UseBarrage && Barrage.IsDistanceGood)
        {
            Barrage.Launch();
            return;
        }
        else if (Blink_Strike.KnownSpell && Blink_Strike.IsSpellUsable && ObjectManager.Pet.IsAlive
                 && MySettings.UseBlinkStrike && ObjectManager.Target.GetDistance < 40)
        {
            Blink_Strike.Launch();
            return;
        }
        else if (Dire_Beast.KnownSpell && Dire_Beast.IsSpellUsable && MySettings.UseDireBeast
                 && Dire_Beast.IsDistanceGood && Dire_Beast_Timer.IsReady)
        {
            Dire_Beast.Launch();
            Dire_Beast_Timer = new Timer(1000*15);
            return;
        }
        else if (Fervor.KnownSpell && Fervor.IsSpellUsable && ObjectManager.Me.Focus < 50
                 && MySettings.UseFervor)
        {
            Fervor.Launch();
            return;
        }
        else if (Glaive_Toss.KnownSpell && Glaive_Toss.IsSpellUsable && MySettings.UseGlaiveToss &&
                 Glaive_Toss.IsDistanceGood)
        {
            Glaive_Toss.Launch();
            return;
        }
        else if (Lynx_Rush.KnownSpell && Lynx_Rush.IsSpellUsable && MySettings.UseLynxRush &&
                 ObjectManager.Target.GetDistance < 40)
        {
            Lynx_Rush.Launch();
            return;
        }
        else if (Powershot.KnownSpell && Powershot.IsSpellUsable && MySettings.UsePowershot &&
                 Powershot.IsDistanceGood)
        {
            Powershot.Launch();
            return;
        }
        else if (Stampede.KnownSpell && Stampede.IsSpellUsable && MySettings.UseStampede &&
                 Stampede.IsDistanceGood)
        {
            Stampede.Launch();
            return;
        }
        else if (Rapid_Fire.KnownSpell && Rapid_Fire.IsSpellUsable && MySettings.UseRapidFire
                 && ObjectManager.Target.GetDistance < 40)
        {
            Rapid_Fire.Launch();
            return;
        }
        else
        {
            if (Readiness.KnownSpell && Readiness.IsSpellUsable && MySettings.UseReadiness)
            {
                Readiness.Launch();
                return;
            }
        }
    }

    private void DPS_Cycle()
    {
        if (Serpent_Sting.IsSpellUsable && Serpent_Sting.IsDistanceGood && Serpent_Sting.KnownSpell
            && MySettings.UseSerpentSting && !Serpent_Sting.TargetHaveBuff)
        {
            Serpent_Sting.Launch();
            Serpent_Sting_Timer = new Timer(1000*12);
            return;
        }
        else if (Chimera_Shot.KnownSpell && Chimera_Shot.IsSpellUsable && Chimera_Shot.IsDistanceGood
                 && MySettings.UseChimeraShot)
        {
            Chimera_Shot.Launch();
            Serpent_Sting_Timer = new Timer(1000*12);
            return;
        }
        else if (Kill_Shot.KnownSpell && Kill_Shot.IsSpellUsable && Kill_Shot.IsDistanceGood
                 && MySettings.UseKillShot)
        {
            Kill_Shot.Launch();
            return;
        }
        else if (Aimed_Shot.KnownSpell && Aimed_Shot.IsSpellUsable && Aimed_Shot.IsDistanceGood
                 && MySettings.UseAimedShot && ObjectManager.Me.HaveBuff(82926))
        {
            Aimed_Shot.Launch();
            return;
        }
        else if (Steady_Shot.KnownSpell && Steady_Shot.IsSpellUsable && Steady_Shot.IsDistanceGood
                 && MySettings.UseSteadyShot && (!ObjectManager.Me.HaveBuff(53220) || Steady_Focus_Timer.IsReady))
        {
            Steady_Shot.Launch();
            Steady_Focus_Timer = new Timer(1000*6);
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 3 && MySettings.UseMultiShot && MySettings.UseSteadyShot)
        {
            if (Multi_Shot.KnownSpell && Multi_Shot.IsSpellUsable && Multi_Shot.IsDistanceGood)
            {
                Multi_Shot.Launch();
                return;
            }
            else
            {
                if (Steady_Shot.KnownSpell && Steady_Shot.IsSpellUsable && Steady_Shot.IsDistanceGood)
                {
                    Steady_Shot.Launch();
                    return;
                }
            }
        }
        else if (Arcane_Shot.KnownSpell && Arcane_Shot.IsSpellUsable && Arcane_Shot.IsDistanceGood
                 && MySettings.UseArcaneShot && ObjectManager.Me.FocusPercentage > 64)
        {
            Arcane_Shot.Launch();
            return;
        }
        else if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell
                 && MySettings.UseArcaneTorrentForResource)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else
        {
            if (Steady_Shot.KnownSpell && Steady_Shot.IsSpellUsable && Steady_Shot.IsDistanceGood
                && MySettings.UseSteadyShot && ObjectManager.Me.FocusPercentage < 80)
            {
                Steady_Shot.Launch();
                return;
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: HunterMarksmanshipSettings

    [Serializable]
    public class HunterMarksmanshipSettings : Settings
    {
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public int UseStoneformAtPercentage = 80;
        public int UseWarStompAtPercentage = 80;
        public bool UseAMurderofCrows = true;
        public bool UseAimedShot = true;
        public bool UseAlchFlask = true;
        public bool UseArcaneShot = true;
        public bool UseArcaneTorrentForDecast = true;
        public bool UseArcaneTorrentForResource = true;
        public bool UseAspectoftheHawk = true;
        public bool UseBarrage = true;
        public bool UseBerserking = true;
        public bool UseBindingShot = true;
        public bool UseBlinkStrike = true;
        public bool UseBloodFury = true;
        public bool UseCamouflage = false;
        public bool UseChimeraShot = true;
        public bool UseCombatRevive = true;
        public bool UseConcussiveShot = true;
        public bool UseDeterrance = true;
        public bool UseDireBeast = true;
        public bool UseDisengage = true;
        public bool UseEngGlove = true;
        public bool UseExhilaration = true;
        public bool UseExplosiveTrap = true;
        public bool UseFeedPet = true;
        public bool UseFeignDeath = true;
        public bool UseFervor = true;
        public bool UseFreezingTrap = true;
        public bool UseGiftoftheNaaru = true;
        public bool UseGlaiveToss = true;
        public bool UseHuntersMark = true;
        public bool UseIceTrap = true;
        public bool UseKillShot = true;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseLynxRush = true;
        public bool UseMendPet = true;
        public bool UseMisdirection = true;
        public bool UseMultiShot = true;
        public bool UsePet1 = true;
        public bool UsePet2 = false;
        public bool UsePet3 = false;
        public bool UsePet4 = false;
        public bool UsePet5 = false;
        public bool UsePowershot = true;
        public bool UseRapidFire = true;
        public bool UseReadiness = true;
        public bool UseRevivePet = true;
        public bool UseScatterShot = true;
        public bool UseSerpentSting = true;
        public bool UseSilencingShot = true;
        public bool UseStampede = true;
        public bool UseSteadyShot = true;
        public bool UseStoneform = true;
        public bool UseTrinket = true;
        public bool UseWarStomp = true;
        public bool UseWyvernSting = true;

        public HunterMarksmanshipSettings()
        {
            ConfigWinForm(new Point(500, 400), "Hunter Marksmanship Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrent", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Hunter Buffs */
            AddControlInWinForm("Use Aspect of the Hawk", "UseAspectoftheHawk", "Hunter Buffs");
            AddControlInWinForm("Use Camouflage", "UseCamouflage", "Hunter Buffs");
            AddControlInWinForm("Use Feign Death", "UseFeignDeath", "Hunter Buffs");
            AddControlInWinForm("Use Hunter's Mark", "UseHuntersMark", "Hunter Buffs");
            AddControlInWinForm("Use Misdirection", "UseMisdirection", "Hunter Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Aimed Shot", "UseAimedShot", "Offensive Spell");
            AddControlInWinForm("Use Arcane Shot", "UseArcaneShot", "Offensive Spell");
            AddControlInWinForm("Use Pet in Slot 1", "UsePet1", "Offensive Spell");
            AddControlInWinForm("Use Pet in Slot 2", "UsePet2", "Offensive Spell");
            AddControlInWinForm("Use Pet in Slot 3", "UsePet3", "Offensive Spell");
            AddControlInWinForm("Use Pet in Slot 4", "UsePet4", "Offensive Spell");
            AddControlInWinForm("Use Pet in Slot 5", "UsePet5", "Offensive Spell");
            AddControlInWinForm("Use Chimera Shot", "UseChimeraShot", "Offensive Spell");
            AddControlInWinForm("Use Explosive Trap", "UseExplosiveTrap", "Offensive Spell");
            AddControlInWinForm("Use KillShot", "UseKillShot", "Offensive Spell");
            AddControlInWinForm("Use Multi-Shot", "UseMultiShot", "Offensive Spell");
            AddControlInWinForm("Use Serpent Sting", "UseSerpentSting", "Offensive Spell");
            AddControlInWinForm("Use Steady Shot", "UseSteadyShot", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use A Murder of Crows", "UseAMurderofCrows", "Offensive Cooldown");
            AddControlInWinForm("Use Barrage", "UseBarrage", "Offensive Cooldown");
            AddControlInWinForm("Use Blink Strike", "UseBlinkStrike", "Offensive Cooldown");
            AddControlInWinForm("Use Dire Beast", "UseDireBeast", "Offensive Cooldown");
            AddControlInWinForm("Use Fervor", "UseFervor", "Offensive Cooldown");
            AddControlInWinForm("Use Glaive Toss", "UseGlaiveToss", "Offensive Cooldown");
            AddControlInWinForm("Use Lynx Rush", "UseLynxRush", "Offensive Cooldown");
            AddControlInWinForm("Use Powershot", "UsePowershot", "Offensive Cooldown");
            AddControlInWinForm("Use Rapid Fire", "UseRapidFire", "Offensive Cooldown");
            AddControlInWinForm("Use Readiness", "UseReadiness", "Offensive Cooldown");
            AddControlInWinForm("Use Stampede", "UseStampede", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Binding Shot", "UseBindingShot", "Defensive Cooldown");
            AddControlInWinForm("Use Concussive Shot", "UseConcussiveShot", "Defensive Cooldown");
            AddControlInWinForm("Use Deterrance", "UseDeterrance", "Defensive Cooldown");
            AddControlInWinForm("Use Disengage", "UseDisengage", "Defensive Cooldown");
            AddControlInWinForm("Use Freezing Trap", "UseFreezingTrap", "Defensive Cooldown");
            AddControlInWinForm("Use Ice Trap", "UseIceTrap", "Defensive Cooldown");
            AddControlInWinForm("Use Scatter Shot", "UseScatterShot", "Defensive Cooldown");
            AddControlInWinForm("Use Silencing Shot", "UseSilencingShot", "Defensive Cooldown");
            AddControlInWinForm("Use Wyvern Sting", "UseWyvernSting", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Exhilaration", "UseExhilaration", "Healing Spell");
            AddControlInWinForm("Use Feed Pet", "UseFeedPet", "Healing Spell");
            AddControlInWinForm("Use Mend Pet", "UseMendPet", "Healing Spell");
            AddControlInWinForm("Use Revive Pet", "UseRevivePet", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket", "UseTrinket", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Use Revive Pet in Combat", "UseCombatRevive", "Game Settings");
        }

        public static HunterMarksmanshipSettings CurrentSetting { get; set; }

        public static HunterMarksmanshipSettings GetSettings()
        {
            string CurrentSettingsFile = Application.StartupPath + "\\CustomClasses\\Settings\\Hunter_Marksmanship.xml";
            if (File.Exists(CurrentSettingsFile))
            {
                return
                    CurrentSetting = Load<HunterMarksmanshipSettings>(CurrentSettingsFile);
            }
            else
            {
                return new HunterMarksmanshipSettings();
            }
        }
    }

    #endregion
}

public class Hunter_BeastMastery
{
    private readonly HunterBeastMasterySettings MySettings = HunterBeastMasterySettings.GetSettings();
    private readonly string MoveBackward = nManager.Wow.Helpers.Keybindings.GetKeyByAction(nManager.Wow.Enums.Keybindings.MOVEBACKWARD);

    #region General Timers & Variables

    private Timer AlchFlask_Timer = new Timer(0);
    private Timer Ancient_Hysteria_Timer = new Timer(0);
    private Timer Burrow_Attack_Timer = new Timer(0);
    private Timer Engineering_Timer = new Timer(0);
    private Timer Froststorm_Breath_Timer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer Spirit_Mend_Timer = new Timer(0);
    private Timer Trinket_Timer = new Timer(0);
    public int LC = 0;

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell Arcane_Torrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell Blood_Fury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell Gift_of_the_Naaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell War_Stomp = new Spell("War Stomp");

    #endregion

    #region Hunter Buffs

    private readonly Spell Aspect_of_the_Hawk = new Spell("Aspect of the Hawk");
    private readonly Spell Camouflage = new Spell("Camouflage");
    private readonly Spell Feign_Death = new Spell("Feign Death");
    private readonly Spell Hunters_Mark = new Spell("Hunter's Mark");
    private readonly Spell Misdirection = new Spell("Misdirection");

    #endregion

    #region Offensive Spell

    private readonly Spell Arcane_Shot = new Spell("Arcane Shot");
    private readonly Spell Call_Pet_1 = new Spell("Call Pet 1");
    private readonly Spell Call_Pet_2 = new Spell("Call Pet 2");
    private readonly Spell Call_Pet_3 = new Spell("Call Pet 3");
    private readonly Spell Call_Pet_4 = new Spell("Call Pet 4");
    private readonly Spell Call_Pet_5 = new Spell("Call Pet 5");
    private readonly Spell Cobra_Shot = new Spell("Cobra Shot");
    private readonly Spell Explosive_Trap = new Spell("Explosive Trap");
    private readonly Spell Kill_Command = new Spell("Kill Command");
    private readonly Spell Kill_Shot = new Spell("Kill Shot");
    private readonly Spell Multi_Shot = new Spell("Multi-Shot");
    private readonly Spell Serpent_Sting = new Spell("Serpent Sting");
    private readonly Spell Steady_Shot = new Spell("Steady Shot");
    private Timer Serpent_Sting_Timer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell A_Murder_of_Crows = new Spell("A Murder of Crows");
    private readonly Spell Barrage = new Spell("Barrage");
    private readonly Spell Bestial_Wrath = new Spell("Bestial Wrath");
    private readonly Spell Blink_Strike = new Spell("Blink Strike");
    private readonly Spell Dire_Beast = new Spell("Dire Beast");
    private readonly Spell Fervor = new Spell("Fervor");
    private readonly Spell Focus_Fire = new Spell("Focus Fire");
    private readonly Spell Glaive_Toss = new Spell("Glaive Toss");
    private readonly Spell Lynx_Rush = new Spell("Lynx Rush");
    private readonly Spell Powershot = new Spell("Powershot");
    private readonly Spell Rapid_Fire = new Spell("Rapid Fire");
    private readonly Spell Readiness = new Spell("Readiness");
    private readonly Spell Stampede = new Spell("Stampede");
    private Timer Dire_Beast_Timer = new Timer(0);

    #endregion

    #region Defensive Cooldown

    private readonly Spell Binding_Shot = new Spell("Binding Shot");
    private readonly Spell Concussive_Shot = new Spell("Concussive Shot");
    private readonly Spell Deterrance = new Spell("Deterrance");
    private readonly Spell Disengage = new Spell("Disengage");
    private readonly Spell Freezing_Trap = new Spell("Freezing Trap");
    private readonly Spell Ice_Trap = new Spell("Ice Trap");
    private readonly Spell Intimidation = new Spell("Intimidation");
    private readonly Spell Scatter_Shot = new Spell("Scatter Shot");
    private readonly Spell Silencing_Shot = new Spell("Silencing Shot");
    private readonly Spell Wyvern_Sting = new Spell("Wyvern Sting");

    #endregion

    #region Healing Spell

    private readonly Spell Exhilaration = new Spell("Exhilaration");
    private readonly Spell Feed_Pet = new Spell("Feed Pet");
    private readonly Spell Mend_Pet = new Spell("Mend Pet");
    private readonly Spell Revive_Pet = new Spell("Revive Pet");
    private Timer Mend_Pet_Timer = new Timer(0);

    #endregion

    public Hunter_BeastMastery()
    {
        Main.range = 30.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget && Serpent_Sting.IsDistanceGood)
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && MySettings.UseLowCombat)
                            {
                                LC = 1;
                                LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(250);
        }
    }

    private void Pull()
    {
        if (Hunters_Mark.KnownSpell && Hunters_Mark.IsSpellUsable && MySettings.UseHuntersMark
            && Hunters_Mark.IsDistanceGood && !Hunters_Mark.TargetHaveBuff && LC != 1)
            Hunters_Mark.Launch();

        if (ObjectManager.Pet.IsAlive)
        {
            Lua.RunMacroText("/petattack");
            Logging.WriteFight("Launch Pet Attack");
        }

        if (ObjectManager.Pet.IsAlive && MySettings.UseMisdirection && Misdirection.KnownSpell
            && Misdirection.IsSpellUsable)
        {
            Lua.RunMacroText("/target pet");
            Thread.Sleep(200);
            Misdirection.Launch();
            Thread.Sleep(200);
        }

        if (Serpent_Sting.KnownSpell && Serpent_Sting.IsSpellUsable && Serpent_Sting.IsDistanceGood
            && MySettings.UseSerpentSting)
        {
            Serpent_Sting.Launch();
            return;
        }
    }

    private void LowCombat()
    {
        Buff();
        AvoidMelee();
        Defense_Cycle();
        Heal();

        if (Glaive_Toss.KnownSpell && Glaive_Toss.IsSpellUsable && Glaive_Toss.IsDistanceGood
            && MySettings.UseGlaiveToss)
        {
            Glaive_Toss.Launch();
            return;
        }
        else if (Arcane_Shot.IsSpellUsable && Arcane_Shot.IsDistanceGood && Arcane_Shot.KnownSpell
                 && MySettings.UseArcaneShot)
        {
            Arcane_Shot.Launch();
            return;
        }
        else
        {
            if (Cobra_Shot.KnownSpell && Cobra_Shot.IsSpellUsable && Cobra_Shot.IsDistanceGood
                && MySettings.UseCobraShot)
            {
                Cobra_Shot.Launch();
                return;
            }
            else
            {
                if (Steady_Shot.KnownSpell && Steady_Shot.IsSpellUsable && Steady_Shot.IsDistanceGood
                    && ObjectManager.Me.FocusPercentage < 60 && (!Cobra_Shot.KnownSpell || !MySettings.UseCobraShot))
                {
                    Steady_Shot.Launch();
                    return;
                }
            }
        }

        if (Explosive_Trap.KnownSpell && Explosive_Trap.IsSpellUsable && Explosive_Trap.IsDistanceGood
            && MySettings.UseExplosiveTrap)
        {
            Explosive_Trap.Launch();
            return;
        }
    }

    private void Combat()
    {
        Buff();
        AvoidMelee();
        if (OnCD.IsReady)
            Defense_Cycle();
        Heal();
        Decast();
        DPS_Burst();
        DPS_Cycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        Pet();

        if (MySettings.UseAspectoftheHawk && Aspect_of_the_Hawk.KnownSpell && Aspect_of_the_Hawk.IsSpellUsable
            && !Aspect_of_the_Hawk.HaveBuff && !ObjectManager.Me.HaveBuff(109260))
        {
            Aspect_of_the_Hawk.Launch();
            return;
        }

        if (MySettings.UseCamouflage && Camouflage.KnownSpell && Camouflage.IsSpellUsable && !Camouflage.HaveBuff
            && !Fight.InFight && ObjectManager.GetNumberAttackPlayer() == 0)
        {
            Camouflage.Launch();
            return;
        }
    }

    private void Pet()
    {
        if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
            && Call_Pet_1.KnownSpell && Call_Pet_1.IsSpellUsable && MySettings.UsePet1)
        {
            Call_Pet_1.Launch();
            Thread.Sleep(1000);
        }
        else if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                 && Call_Pet_2.KnownSpell && Call_Pet_2.IsSpellUsable && MySettings.UsePet2)
        {
            Call_Pet_2.Launch();
            Thread.Sleep(1000);
        }
        else if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                 && Call_Pet_3.KnownSpell && Call_Pet_3.IsSpellUsable && MySettings.UsePet3)
        {
            Call_Pet_3.Launch();
            Thread.Sleep(1000);
        }
        else if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                 && Call_Pet_4.KnownSpell && Call_Pet_4.IsSpellUsable && MySettings.UsePet4)
        {
            Call_Pet_4.Launch();
            Thread.Sleep(1000);
        }
        else
        {
            if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                && Call_Pet_5.KnownSpell && Call_Pet_5.IsSpellUsable && MySettings.UsePet5)
            {
                Call_Pet_5.Launch();
                Thread.Sleep(1000);
            }
        }

        if (!ObjectManager.Me.IsCast && (!ObjectManager.Pet.IsAlive || ObjectManager.Pet.Guid == 0)
            && Revive_Pet.KnownSpell && Revive_Pet.IsSpellUsable && MySettings.UseRevivePet
            && MySettings.UseCombatRevive && ObjectManager.Target.HealthPercent > 10)
        {
            Revive_Pet.Launch();
            Thread.Sleep(1000);
        }
        else if (!ObjectManager.Me.IsCast && (!ObjectManager.Pet.IsAlive || ObjectManager.Pet.Guid == 0)
                 && Revive_Pet.KnownSpell && Revive_Pet.IsSpellUsable && MySettings.UseRevivePet
                 && !Fight.InFight && ObjectManager.GetNumberAttackPlayer() == 0)
        {
            Revive_Pet.Launch();
            Thread.Sleep(1000);
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            Keyboard.DownKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
            while (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
                Thread.Sleep(300);
            Keyboard.UpKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
        }
    }

    private void Defense_Cycle()
    {
        if (ObjectManager.Me.HealthPercent < 20 && MySettings.UseFeignDeath
            && Feign_Death.KnownSpell && Feign_Death.IsSpellUsable)
        {
            Feign_Death.Launch();
            Thread.Sleep(5000);
            if (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                return;
            else
                Thread.Sleep(5000);
        }
        else if (ObjectManager.Me.HealthPercent < 50 && MySettings.UseDeterrance
                 && Deterrance.KnownSpell && Deterrance.IsSpellUsable)
        {
            Deterrance.Launch();
            Thread.Sleep(200);
        }
        else if (MySettings.UseFreezingTrap && ObjectManager.GetNumberAttackPlayer() > 1 && Freezing_Trap.KnownSpell
                 && Freezing_Trap.IsSpellUsable && ObjectManager.Target.GetDistance > 10)
        {
            Freezing_Trap.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && MySettings.UseIceTrap
                 && Ice_Trap.KnownSpell && Ice_Trap.IsSpellUsable && ObjectManager.Target.GetDistance < 10
                 && Disengage.KnownSpell && Disengage.IsSpellUsable && MySettings.UseDisengage)
        {
            Ice_Trap.Launch();
            Thread.Sleep(1000);
            Keybindings.PressKeybindings(nManager.Wow.Enums.Keybindings.JUMP);
            Disengage.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && MySettings.UseConcussiveShot
                 && Concussive_Shot.KnownSpell && Concussive_Shot.IsSpellUsable && Concussive_Shot.IsDistanceGood
                 && Disengage.KnownSpell && Disengage.IsSpellUsable && MySettings.UseDisengage)
        {
            Concussive_Shot.Launch();
            Thread.Sleep(1000);
            Keybindings.PressKeybindings(nManager.Wow.Enums.Keybindings.JUMP);
            Disengage.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && MySettings.UseBindingShot
                 && Binding_Shot.KnownSpell && Binding_Shot.IsSpellUsable && Binding_Shot.IsDistanceGood
                 && Disengage.KnownSpell && Disengage.IsSpellUsable && MySettings.UseDisengage)
        {
            Binding_Shot.Launch();
            Thread.Sleep(1000);
            Keybindings.PressKeybindings(nManager.Wow.Enums.Keybindings.JUMP);
            Disengage.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseWarStompAtPercentage && War_Stomp.IsSpellUsable && War_Stomp.KnownSpell
                 && MySettings.UseWarStomp)
        {
            War_Stomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable && Stoneform.KnownSpell
                 && MySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else
        {
            if (Intimidation.IsSpellUsable && Intimidation.KnownSpell && MySettings.UseIntimidation
                && (ObjectManager.Me.HealthPercent < 80 || ObjectManager.Pet.Health < 80))
            {
                Intimidation.Launch();
                OnCD = new Timer(1000*3);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (ObjectManager.Me.HealthPercent < 85 && ObjectManager.Pet.IsAlive
            && MySettings.UseSpiritBeastPet && Spirit_Mend_Timer.IsReady)
        {
            Logging.WriteFight("Cast Spirit Mend.");
            Lua.RunMacroText("/target Player");
            Thread.Sleep(200);
            Lua.RunMacroText("/cast Spirit Mend");
            Spirit_Mend_Timer = new Timer(1000*40);
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseGiftoftheNaaruAtPercentage && Gift_of_the_Naaru.KnownSpell && Gift_of_the_Naaru.IsSpellUsable
                 && MySettings.UseGiftoftheNaaru)
        {
            Gift_of_the_Naaru.Launch();
            return;
        }
        else if (Exhilaration.KnownSpell && Exhilaration.IsSpellUsable
                 && MySettings.UseExhilaration && ObjectManager.Me.HealthPercent < 70)
        {
            Exhilaration.Launch();
            return;
        }
        else if (ObjectManager.Pet.Health > 0 && ObjectManager.Pet.HealthPercent < 50
                 && Feed_Pet.KnownSpell && Feed_Pet.IsSpellUsable && MySettings.UseFeedPet
                 && !Fight.InFight && ObjectManager.GetNumberAttackPlayer() == 0)
        {
            Feed_Pet.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Pet.Health > 0 && ObjectManager.Pet.HealthPercent < 80
                && Mend_Pet.KnownSpell && Mend_Pet.IsSpellUsable && MySettings.UseMendPet
                && Mend_Pet_Timer.IsReady)
            {
                Mend_Pet.Launch();
                Mend_Pet_Timer = new Timer(1000*10);
                return;
            }
        }
    }

    private void Decast()
    {
        if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell && ObjectManager.Target.GetDistance < 8
            && ObjectManager.Me.HealthPercent <= MySettings.UseArcaneTorrentForDecastAtPercentage
            && MySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && Silencing_Shot.IsDistanceGood
                 && Silencing_Shot.KnownSpell && Silencing_Shot.IsSpellUsable && MySettings.UseSilencingShot)
        {
            Silencing_Shot.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && Scatter_Shot.IsDistanceGood
                 && Scatter_Shot.KnownSpell && Scatter_Shot.IsSpellUsable && MySettings.UseScatterShot)
        {
            Scatter_Shot.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && MySettings.UseWyvernSting
                && Wyvern_Sting.KnownSpell && Wyvern_Sting.IsSpellUsable && Wyvern_Sting.IsDistanceGood)
            {
                Wyvern_Sting.Launch();
                return;
            }
        }
    }

    private void DPS_Burst()
    {
        if (MySettings.UseTrinket && Trinket_Timer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Trinket_Timer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBerserking)
            Berserking.Launch();
        else if (Blood_Fury.IsSpellUsable && Blood_Fury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBloodFury)
            Blood_Fury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (Engineering_Timer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                && MySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            Engineering_Timer = new Timer(1000*60);
        }
        else if (A_Murder_of_Crows.KnownSpell && A_Murder_of_Crows.IsSpellUsable && A_Murder_of_Crows.IsDistanceGood
                 && MySettings.UseAMurderofCrows && !A_Murder_of_Crows.TargetHaveBuff)
        {
            A_Murder_of_Crows.Launch();
            return;
        }
        else if (Barrage.KnownSpell && Barrage.IsSpellUsable && MySettings.UseBarrage && Barrage.IsDistanceGood)
        {
            Barrage.Launch();
            return;
        }
        else if (Blink_Strike.KnownSpell && Blink_Strike.IsSpellUsable && ObjectManager.Pet.IsAlive
                 && MySettings.UseBlinkStrike && ObjectManager.Target.GetDistance < 40)
        {
            Blink_Strike.Launch();
            return;
        }
        else if (Dire_Beast.KnownSpell && Dire_Beast.IsSpellUsable && MySettings.UseDireBeast
                 && Dire_Beast.IsDistanceGood && Dire_Beast_Timer.IsReady)
        {
            Dire_Beast.Launch();
            Dire_Beast_Timer = new Timer(1000*15);
            return;
        }
        else if (Fervor.KnownSpell && Fervor.IsSpellUsable && ObjectManager.Me.Focus < 50
                 && MySettings.UseFervor)
        {
            Fervor.Launch();
            return;
        }
        else if (Glaive_Toss.KnownSpell && Glaive_Toss.IsSpellUsable && MySettings.UseGlaiveToss &&
                 Glaive_Toss.IsDistanceGood)
        {
            Glaive_Toss.Launch();
            return;
        }
        else if (Lynx_Rush.KnownSpell && Lynx_Rush.IsSpellUsable && MySettings.UseLynxRush &&
                 ObjectManager.Target.GetDistance < 40)
        {
            Lynx_Rush.Launch();
            return;
        }
        else if (Powershot.KnownSpell && Powershot.IsSpellUsable && MySettings.UsePowershot &&
                 Powershot.IsDistanceGood)
        {
            Powershot.Launch();
            return;
        }
        else if (Stampede.KnownSpell && Stampede.IsSpellUsable && MySettings.UseStampede &&
                 Stampede.IsDistanceGood)
        {
            Stampede.Launch();
            return;
        }
        else if (Bestial_Wrath.KnownSpell && Bestial_Wrath.IsSpellUsable && MySettings.UseBestialWrath
                 && ObjectManager.Target.GetDistance < 40)
        {
            Bestial_Wrath.Launch();
            return;
        }
        else if (Rapid_Fire.KnownSpell && Rapid_Fire.IsSpellUsable && MySettings.UseRapidFire
                 && ObjectManager.Target.GetDistance < 40 && !Bestial_Wrath.HaveBuff)
        {
            Rapid_Fire.Launch();
            return;
        }
        else if (MySettings.UseCoreHoundPet && ObjectManager.Target.GetDistance < 40
                 && Ancient_Hysteria_Timer.IsReady && ObjectManager.Me.HaveBuff(95809)
                 && ObjectManager.Pet.IsAlive && !Rapid_Fire.HaveBuff && !Bestial_Wrath.HaveBuff)
        {
            Lua.RunMacroText("/cast Ancient Hysteria");
            Logging.WriteFight("Launch Core Hound Pet Ancient Hysteria");
            Ancient_Hysteria_Timer = new Timer(1000*60*6);
            return;
        }
        else if (ObjectManager.Pet.BuffStack(19623) == 5 && Focus_Fire.IsSpellUsable &&
                 Focus_Fire.KnownSpell
                 && MySettings.UseFocusFire)
        {
            Focus_Fire.Launch();
            return;
        }
        else
        {
            if (Readiness.KnownSpell && Readiness.IsSpellUsable && MySettings.UseReadiness
                && !Rapid_Fire.IsSpellUsable && !Bestial_Wrath.IsSpellUsable)
            {
                Readiness.Launch();
                return;
            }
        }
    }

    private void DPS_Cycle()
    {
        if (Serpent_Sting.IsSpellUsable && Serpent_Sting.IsDistanceGood && Serpent_Sting.KnownSpell
            && MySettings.UseSerpentSting && !Serpent_Sting.TargetHaveBuff)
        {
            Serpent_Sting.Launch();
            Serpent_Sting_Timer = new Timer(1000*12);
            return;
        }
        else if (Cobra_Shot.KnownSpell && Cobra_Shot.IsSpellUsable && Cobra_Shot.IsDistanceGood
                 && MySettings.UseCobraShot && Serpent_Sting_Timer.IsReady)
        {
            Cobra_Shot.Launch();
            Serpent_Sting_Timer = new Timer(1000*12);
            return;
        }
        else if (Kill_Shot.KnownSpell && Kill_Shot.IsSpellUsable && Kill_Shot.IsDistanceGood
                 && MySettings.UseKillShot)
        {
            Kill_Shot.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 2 && MySettings.UseMultiShot)
        {
            if (Multi_Shot.KnownSpell && Multi_Shot.IsSpellUsable && Multi_Shot.IsDistanceGood)
            {
                Multi_Shot.Launch();
                return;
            }
            else if (MySettings.UseChimeraPet && ObjectManager.Target.GetDistance < 10
                     && ObjectManager.Pet.Guid == 780 && ObjectManager.Pet.Focus > 29
                     && Froststorm_Breath_Timer.IsReady && ObjectManager.Pet.IsAlive)
            {
                Lua.RunMacroText("/cast Froststorm Breath");
                Logging.WriteFight("Launch Chimera Pet AoE");
                Froststorm_Breath_Timer = new Timer(1000*8);
                return;
            }
            else
            {
                if (MySettings.UseWormPet && ObjectManager.Target.GetDistance < 10
                    && ObjectManager.Pet.Guid == 784 && ObjectManager.Pet.Focus > 29
                    && Burrow_Attack_Timer.IsReady && ObjectManager.Pet.IsAlive)
                {
                    Lua.RunMacroText("/cast Burrow Attack");
                    Logging.WriteFight("Launch Worm Pet AoE");
                    Burrow_Attack_Timer = new Timer(1000*20);
                    return;
                }
            }
        }
        else if (Kill_Command.KnownSpell && Kill_Command.IsSpellUsable && MySettings.UseKillCommand
                 && ObjectManager.Target.GetDistance < 25.0f) // Kill_Command.IsDistanceGood seams to be wrong
        {
            Kill_Command.Launch();
            return;
        }
        else if (Arcane_Shot.KnownSpell && Arcane_Shot.IsSpellUsable && Arcane_Shot.IsDistanceGood
                 && MySettings.UseArcaneShot && ObjectManager.Me.FocusPercentage > 59)
        {
            Arcane_Shot.Launch();
            return;
        }
        else if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell
                 && MySettings.UseArcaneTorrentForResource)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else
        {
            if (Cobra_Shot.KnownSpell && Cobra_Shot.IsSpellUsable && Cobra_Shot.IsDistanceGood
                && MySettings.UseCobraShot && ObjectManager.Me.FocusPercentage < 60)
            {
                Cobra_Shot.Launch();
                return;
            }
            else
            {
                if (Steady_Shot.KnownSpell && Steady_Shot.IsSpellUsable && Steady_Shot.IsDistanceGood
                    && ObjectManager.Me.FocusPercentage < 60 && (!Cobra_Shot.KnownSpell || !MySettings.UseCobraShot))
                {
                    Steady_Shot.Launch();
                    return;
                }
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: HunterBeastMasterySettings

    [Serializable]
    public class HunterBeastMasterySettings : Settings
    {
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public int UseStoneformAtPercentage = 80;
        public int UseWarStompAtPercentage = 80;
        public bool UseAMurderofCrows = true;
        public bool UseAlchFlask = true;
        public bool UseArcaneShot = true;
        public bool UseArcaneTorrentForDecast = true;
        public bool UseArcaneTorrentForResource = true;
        public bool UseAspectoftheHawk = true;
        public bool UseBarrage = true;
        public bool UseBerserking = true;
        public bool UseBestialWrath = true;
        public bool UseBindingShot = true;
        public bool UseBlinkStrike = true;
        public bool UseBloodFury = true;
        public bool UseCamouflage = false;
        public bool UseChimeraPet = false;
        public bool UseCobraShot = true;
        public bool UseCombatRevive = true;
        public bool UseConcussiveShot = true;
        public bool UseCoreHoundPet = false;
        public bool UseDeterrance = true;
        public bool UseDireBeast = true;
        public bool UseDisengage = true;
        public bool UseEngGlove = true;
        public bool UseExhilaration = true;
        public bool UseExplosiveTrap = true;
        public bool UseFeedPet = true;
        public bool UseFeignDeath = true;
        public bool UseFervor = true;
        public bool UseFocusFire = false;
        public bool UseFreezingTrap = true;
        public bool UseGiftoftheNaaru = true;
        public bool UseGlaiveToss = true;
        public bool UseHuntersMark = true;
        public bool UseIceTrap = true;
        public bool UseIntimidation = true;
        public bool UseKillCommand = true;
        public bool UseKillShot = true;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseLynxRush = true;
        public bool UseMendPet = true;
        public bool UseMisdirection = true;
        public bool UseMultiShot = true;
        public bool UsePet1 = true;
        public bool UsePet2 = false;
        public bool UsePet3 = false;
        public bool UsePet4 = false;
        public bool UsePet5 = false;
        public bool UsePowershot = true;
        public bool UseRapidFire = true;
        public bool UseReadiness = true;
        public bool UseRevivePet = true;
        public bool UseScatterShot = true;
        public bool UseSerpentSting = true;
        public bool UseSilencingShot = true;
        public bool UseSpiritBeastPet = false;
        public bool UseStampede = true;
        public bool UseStoneform = true;
        public bool UseTrinket = true;
        public bool UseWarStomp = true;
        public bool UseWormPet = false;
        public bool UseWyvernSting = true;

        public HunterBeastMasterySettings()
        {
            ConfigWinForm(new Point(500, 400), "Hunter BeastMastery Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrent", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Hunter Buffs */
            AddControlInWinForm("Use Aspect of the Hawk", "UseAspectoftheHawk", "Hunter Buffs");
            AddControlInWinForm("Use Camouflage", "UseCamouflage", "Hunter Buffs");
            AddControlInWinForm("Use Feign Death", "UseFeignDeath", "Hunter Buffs");
            AddControlInWinForm("Use Hunter's Mark", "UseHuntersMark", "Hunter Buffs");
            AddControlInWinForm("Use Misdirection", "UseMisdirection", "Hunter Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Arcane Shot", "UseArcaneShot", "Offensive Spell");
            AddControlInWinForm("Use Pet in Slot 1", "UsePet1", "Offensive Spell");
            AddControlInWinForm("Use Pet in Slot 2", "UsePet2", "Offensive Spell");
            AddControlInWinForm("Use Pet in Slot 3", "UsePet3", "Offensive Spell");
            AddControlInWinForm("Use Pet in Slot 4", "UsePet4", "Offensive Spell");
            AddControlInWinForm("Use Pet in Slot 5", "UsePet5", "Offensive Spell");
            AddControlInWinForm("Use Cobra Shot", "UseCobraShot", "Offensive Spell");
            AddControlInWinForm("Use Explosive Trap", "UseExplosiveTrap", "Offensive Spell");
            AddControlInWinForm("Use Kill Command", "UseKillCommand", "Offensive Spell");
            AddControlInWinForm("Use KillShot", "UseKillShot", "Offensive Spell");
            AddControlInWinForm("Use Multi-Shot", "UseMultiShot", "Offensive Spell");
            AddControlInWinForm("Use Serpent Sting", "UseSerpentSting", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use A Murder of Crows", "UseAMurderofCrows", "Offensive Cooldown");
            AddControlInWinForm("Use Barrage", "UseBarrage", "Offensive Cooldown");
            AddControlInWinForm("Use Bestial Wrath", "UseBestialWrath", "Offensive Cooldown");
            AddControlInWinForm("Use Blink Strike", "UseBlinkStrike", "Offensive Cooldown");
            AddControlInWinForm("Use Dire Beast", "UseDireBeast", "Offensive Cooldown");
            AddControlInWinForm("Use Fervor", "UseFervor", "Offensive Cooldown");
            AddControlInWinForm("Use Focus Fire", "UseFocusFire", "Offensive Cooldown");
            AddControlInWinForm("Use Glaive Toss", "UseGlaiveToss", "Offensive Cooldown");
            AddControlInWinForm("Use Lynx Rush", "UseLynxRush", "Offensive Cooldown");
            AddControlInWinForm("Use Powershot", "UsePowershot", "Offensive Cooldown");
            AddControlInWinForm("Use Rapid Fire", "UseRapidFire", "Offensive Cooldown");
            AddControlInWinForm("Use Readiness", "UseReadiness", "Offensive Cooldown");
            AddControlInWinForm("Use Stampede", "UseStampede", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Binding Shot", "UseBindingShot", "Defensive Cooldown");
            AddControlInWinForm("Use Concussive Shot", "UseConcussiveShot", "Defensive Cooldown");
            AddControlInWinForm("Use Deterrance", "UseDeterrance", "Defensive Cooldown");
            AddControlInWinForm("Use Disengage", "UseDisengage", "Defensive Cooldown");
            AddControlInWinForm("Use Freezing Trap", "UseFreezingTrap", "Defensive Cooldown");
            AddControlInWinForm("Use Ice Trap", "UseIceTrap", "Defensive Cooldown");
            AddControlInWinForm("Use Intimidation", "UseIntimidation", "Defensive Cooldown");
            AddControlInWinForm("Use Scatter Shot", "UseScatterShot", "Defensive Cooldown");
            AddControlInWinForm("Use Silencing Shot", "UseSilencingShot", "Defensive Cooldown");
            AddControlInWinForm("Use Wyvern Sting", "UseWyvernSting", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Exhilaration", "UseExhilaration", "Healing Spell");
            AddControlInWinForm("Use Feed Pet", "UseFeedPet", "Healing Spell");
            AddControlInWinForm("Use Mend Pet", "UseMendPet", "Healing Spell");
            AddControlInWinForm("Use Revive Pet", "UseRevivePet", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket", "UseTrinket", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Use Core Hound Pet", "UseCoreHoundPet", "Game Settings");
            AddControlInWinForm("Use Worm Pet", "UseWormPet", "Game Settings");
            AddControlInWinForm("Use Chimera Pet", "UseChimeraPet", "Game Settings");
            AddControlInWinForm("Use Spirit Beast Pet", "UseSpiritBeastPet", "Game Settings");
            AddControlInWinForm("Use Revive Pet in Combat", "UseCombatRevive", "Game Settings");
        }

        public static HunterBeastMasterySettings CurrentSetting { get; set; }

        public static HunterBeastMasterySettings GetSettings()
        {
            string CurrentSettingsFile = Application.StartupPath + "\\CustomClasses\\Settings\\Hunter_BeastMastery.xml";
            if (File.Exists(CurrentSettingsFile))
            {
                return
                    CurrentSetting = Load<HunterBeastMasterySettings>(CurrentSettingsFile);
            }
            else
            {
                return new HunterBeastMasterySettings();
            }
        }
    }

    #endregion
}

public class Hunter_Survival
{
    private readonly HunterSurvivalSettings MySettings = HunterSurvivalSettings.GetSettings();
    private readonly string MoveBackward = nManager.Wow.Helpers.Keybindings.GetKeyByAction(nManager.Wow.Enums.Keybindings.MOVEBACKWARD);

    #region General Timers & Variables

    private Timer AlchFlask_Timer = new Timer(0);
    private Timer Engineering_Timer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer Trinket_Timer = new Timer(0);
    public int LC = 0;

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell Arcane_Torrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell Blood_Fury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell Gift_of_the_Naaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell War_Stomp = new Spell("War Stomp");

    #endregion

    #region Hunter Buffs

    private readonly Spell Aspect_of_the_Hawk = new Spell("Aspect of the Hawk");
    private readonly Spell Camouflage = new Spell("Camouflage");
    private readonly Spell Feign_Death = new Spell("Feign Death");
    private readonly Spell Hunters_Mark = new Spell("Hunter's Mark");
    private readonly Spell Misdirection = new Spell("Misdirection");

    #endregion

    #region Offensive Spell

    private readonly Spell Arcane_Shot = new Spell("Arcane Shot");
    private readonly Spell Black_Arrow = new Spell("Black Arrow");
    private readonly Spell Call_Pet_1 = new Spell("Call Pet 1");
    private readonly Spell Call_Pet_2 = new Spell("Call Pet 2");
    private readonly Spell Call_Pet_3 = new Spell("Call Pet 3");
    private readonly Spell Call_Pet_4 = new Spell("Call Pet 4");
    private readonly Spell Call_Pet_5 = new Spell("Call Pet 5");
    private readonly Spell Cobra_Shot = new Spell("Cobra Shot");
    private readonly Spell Explosive_Shot = new Spell("Explosive Shot");
    private readonly Spell Explosive_Trap = new Spell("Explosive Trap");
    private readonly Spell Kill_Shot = new Spell("Kill Shot");
    private readonly Spell Multi_Shot = new Spell("Multi-Shot");
    private readonly Spell Serpent_Sting = new Spell("Serpent Sting");
    private readonly Spell Steady_Shot = new Spell("Steady Shot");
    private Timer Serpent_Sting_Timer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell A_Murder_of_Crows = new Spell("A Murder of Crows");
    private readonly Spell Barrage = new Spell("Barrage");
    private readonly Spell Blink_Strike = new Spell("Blink Strike");
    private readonly Spell Dire_Beast = new Spell("Dire Beast");
    private readonly Spell Fervor = new Spell("Fervor");
    private readonly Spell Glaive_Toss = new Spell("Glaive Toss");
    private readonly Spell Lynx_Rush = new Spell("Lynx Rush");
    private readonly Spell Powershot = new Spell("Powershot");
    private readonly Spell Rapid_Fire = new Spell("Rapid Fire");
    private readonly Spell Readiness = new Spell("Readiness");
    private readonly Spell Stampede = new Spell("Stampede");
    private Timer Dire_Beast_Timer = new Timer(0);

    #endregion

    #region Defensive Cooldown

    private readonly Spell Binding_Shot = new Spell("Binding Shot");
    private readonly Spell Concussive_Shot = new Spell("Concussive Shot");
    private readonly Spell Deterrance = new Spell("Deterrance");
    private readonly Spell Disengage = new Spell("Disengage");
    private readonly Spell Freezing_Trap = new Spell("Freezing Trap");
    private readonly Spell Ice_Trap = new Spell("Ice Trap");
    private readonly Spell Scatter_Shot = new Spell("Scatter Shot");
    private readonly Spell Silencing_Shot = new Spell("Silencing Shot");
    private readonly Spell Wyvern_Sting = new Spell("Wyvern Sting");

    #endregion

    #region Healing Spell

    private readonly Spell Exhilaration = new Spell("Exhilaration");
    private readonly Spell Feed_Pet = new Spell("Feed Pet");
    private readonly Spell Mend_Pet = new Spell("Mend Pet");
    private readonly Spell Revive_Pet = new Spell("Revive Pet");
    private Timer Mend_Pet_Timer = new Timer(0);

    #endregion

    public Hunter_Survival()
    {
        Main.range = 30.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget && Serpent_Sting.IsDistanceGood)
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && MySettings.UseLowCombat)
                            {
                                LC = 1;
                                LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                Combat();
                            }
                        }
                        else
                        {
                            if (!ObjectManager.Me.IsCast)
                                Patrolling();
                        }
                    }
                }
                Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(250);
        }
    }

    private void Pull()
    {
        if (Hunters_Mark.KnownSpell && Hunters_Mark.IsSpellUsable && MySettings.UseHuntersMark
            && Hunters_Mark.IsDistanceGood && !Hunters_Mark.TargetHaveBuff && LC != 1)
            Hunters_Mark.Launch();

        if (ObjectManager.Pet.IsAlive)
        {
            Lua.RunMacroText("/petattack");
            Logging.WriteFight("Launch Pet Attack");
        }

        if (ObjectManager.Pet.IsAlive && MySettings.UseMisdirection && Misdirection.KnownSpell
            && Misdirection.IsSpellUsable)
        {
            Lua.RunMacroText("/target pet");
            Thread.Sleep(200);
            Misdirection.Launch();
            Thread.Sleep(200);
        }

        if (Serpent_Sting.KnownSpell && Serpent_Sting.IsSpellUsable && Serpent_Sting.IsDistanceGood
            && MySettings.UseSerpentSting)
        {
            Serpent_Sting.Launch();
            return;
        }
    }

    private void LowCombat()
    {
        Buff();
        AvoidMelee();
        Defense_Cycle();
        Heal();

        if (Glaive_Toss.KnownSpell && Glaive_Toss.IsSpellUsable && Glaive_Toss.IsDistanceGood
            && MySettings.UseGlaiveToss)
        {
            Glaive_Toss.Launch();
            return;
        }
        else if (Arcane_Shot.IsSpellUsable && Arcane_Shot.IsDistanceGood && Arcane_Shot.KnownSpell
                 && MySettings.UseArcaneShot)
        {
            Arcane_Shot.Launch();
            return;
        }
        else
        {
            if (Cobra_Shot.KnownSpell && Cobra_Shot.IsSpellUsable && Cobra_Shot.IsDistanceGood
                && MySettings.UseCobraShot)
            {
                Cobra_Shot.Launch();
                return;
            }
            else
            {
                if (Steady_Shot.KnownSpell && Steady_Shot.IsSpellUsable && Steady_Shot.IsDistanceGood
                    && ObjectManager.Me.FocusPercentage < 60 && (!Cobra_Shot.KnownSpell || !MySettings.UseCobraShot))
                {
                    Steady_Shot.Launch();
                    return;
                }
            }
        }

        if (Explosive_Trap.KnownSpell && Explosive_Trap.IsSpellUsable && Explosive_Trap.IsDistanceGood
            && MySettings.UseExplosiveTrap)
        {
            Explosive_Trap.Launch();
            return;
        }
    }

    private void Combat()
    {
        Buff();
        AvoidMelee();
        if (OnCD.IsReady)
            Defense_Cycle();
        Heal();
        Decast();
        DPS_Burst();
        DPS_Cycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        Pet();

        if (MySettings.UseAspectoftheHawk && Aspect_of_the_Hawk.KnownSpell && Aspect_of_the_Hawk.IsSpellUsable
            && !Aspect_of_the_Hawk.HaveBuff && !ObjectManager.Me.HaveBuff(109260))
        {
            Aspect_of_the_Hawk.Launch();
            return;
        }

        if (MySettings.UseCamouflage && Camouflage.KnownSpell && Camouflage.IsSpellUsable && !Camouflage.HaveBuff
            && !Fight.InFight && ObjectManager.GetNumberAttackPlayer() == 0)
        {
            Camouflage.Launch();
            return;
        }
    }

    private void Pet()
    {
        if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
            && Call_Pet_1.KnownSpell && Call_Pet_1.IsSpellUsable && MySettings.UsePet1)
        {
            Call_Pet_1.Launch();
            Thread.Sleep(1000);
        }
        else if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                 && Call_Pet_2.KnownSpell && Call_Pet_2.IsSpellUsable && MySettings.UsePet2)
        {
            Call_Pet_2.Launch();
            Thread.Sleep(1000);
        }
        else if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                 && Call_Pet_3.KnownSpell && Call_Pet_3.IsSpellUsable && MySettings.UsePet3)
        {
            Call_Pet_3.Launch();
            Thread.Sleep(1000);
        }
        else if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                 && Call_Pet_4.KnownSpell && Call_Pet_4.IsSpellUsable && MySettings.UsePet4)
        {
            Call_Pet_4.Launch();
            Thread.Sleep(1000);
        }
        else
        {
            if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                && Call_Pet_5.KnownSpell && Call_Pet_5.IsSpellUsable && MySettings.UsePet5)
            {
                Call_Pet_5.Launch();
                Thread.Sleep(1000);
            }
        }

        if (!ObjectManager.Me.IsCast && (!ObjectManager.Pet.IsAlive || ObjectManager.Pet.Guid == 0)
            && Revive_Pet.KnownSpell && Revive_Pet.IsSpellUsable && MySettings.UseRevivePet
            && MySettings.UseCombatRevive && ObjectManager.Target.HealthPercent > 10)
        {
            Revive_Pet.Launch();
            Thread.Sleep(1000);
        }
        else if (!ObjectManager.Me.IsCast && (!ObjectManager.Pet.IsAlive || ObjectManager.Pet.Guid == 0)
                 && Revive_Pet.KnownSpell && Revive_Pet.IsSpellUsable && MySettings.UseRevivePet
                 && !Fight.InFight && ObjectManager.GetNumberAttackPlayer() == 0)
        {
            Revive_Pet.Launch();
            Thread.Sleep(1000);
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            Keyboard.DownKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
            while (ObjectManager.Target.GetDistance < 3 && ObjectManager.Target.InCombat)
                Thread.Sleep(300);
            Keyboard.UpKey(Memory.WowProcess.MainWindowHandle, MoveBackward);
        }
    }

    private void Defense_Cycle()
    {
        if (ObjectManager.Me.HealthPercent < 20 && MySettings.UseFeignDeath
            && Feign_Death.KnownSpell && Feign_Death.IsSpellUsable)
        {
            Feign_Death.Launch();
            Thread.Sleep(5000);
            if (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                return;
            else
                Thread.Sleep(5000);
        }
        else if (ObjectManager.Me.HealthPercent < 50 && MySettings.UseDeterrance
                 && Deterrance.KnownSpell && Deterrance.IsSpellUsable)
        {
            Deterrance.Launch();
            Thread.Sleep(200);
        }
        else if (MySettings.UseFreezingTrap && ObjectManager.GetNumberAttackPlayer() > 1 && Freezing_Trap.KnownSpell
                 && Freezing_Trap.IsSpellUsable && ObjectManager.Target.GetDistance > 10)
        {
            Freezing_Trap.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && MySettings.UseIceTrap
                 && Ice_Trap.KnownSpell && Ice_Trap.IsSpellUsable && ObjectManager.Target.GetDistance < 10
                 && Disengage.KnownSpell && Disengage.IsSpellUsable && MySettings.UseDisengage)
        {
            Ice_Trap.Launch();
            Thread.Sleep(1000);
            Keybindings.PressKeybindings(nManager.Wow.Enums.Keybindings.JUMP);
            Disengage.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && MySettings.UseConcussiveShot
                 && Concussive_Shot.KnownSpell && Concussive_Shot.IsSpellUsable && Concussive_Shot.IsDistanceGood
                 && Disengage.KnownSpell && Disengage.IsSpellUsable && MySettings.UseDisengage)
        {
            Concussive_Shot.Launch();
            Thread.Sleep(1000);
            Keybindings.PressKeybindings(nManager.Wow.Enums.Keybindings.JUMP);
            Disengage.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && MySettings.UseBindingShot
                 && Binding_Shot.KnownSpell && Binding_Shot.IsSpellUsable && Binding_Shot.IsDistanceGood
                 && Disengage.KnownSpell && Disengage.IsSpellUsable && MySettings.UseDisengage)
        {
            Binding_Shot.Launch();
            Thread.Sleep(1000);
            Keybindings.PressKeybindings(nManager.Wow.Enums.Keybindings.JUMP);
            Disengage.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= MySettings.UseWarStompAtPercentage && War_Stomp.IsSpellUsable && War_Stomp.KnownSpell
                 && MySettings.UseWarStomp)
        {
            War_Stomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent <= MySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable && Stoneform.KnownSpell
                && MySettings.UseStoneform)
            {
                Stoneform.Launch();
                OnCD = new Timer(1000*8);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (ObjectManager.Me.HealthPercent <= MySettings.UseGiftoftheNaaruAtPercentage && Gift_of_the_Naaru.KnownSpell && Gift_of_the_Naaru.IsSpellUsable
            && MySettings.UseGiftoftheNaaru)
        {
            Gift_of_the_Naaru.Launch();
            return;
        }
        else if (Exhilaration.KnownSpell && Exhilaration.IsSpellUsable
                 && MySettings.UseExhilaration && ObjectManager.Me.HealthPercent < 70)
        {
            Exhilaration.Launch();
            return;
        }
        else if (ObjectManager.Pet.Health > 0 && ObjectManager.Pet.HealthPercent < 50
                 && Feed_Pet.KnownSpell && Feed_Pet.IsSpellUsable && MySettings.UseFeedPet
                 && !Fight.InFight && ObjectManager.GetNumberAttackPlayer() == 0)
        {
            Feed_Pet.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Pet.Health > 0 && ObjectManager.Pet.HealthPercent < 80
                && Mend_Pet.KnownSpell && Mend_Pet.IsSpellUsable && MySettings.UseMendPet
                && Mend_Pet_Timer.IsReady)
            {
                Mend_Pet.Launch();
                Mend_Pet_Timer = new Timer(1000*10);
                return;
            }
        }
    }

    private void Decast()
    {
        if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell && ObjectManager.Target.GetDistance < 8
            && ObjectManager.Me.HealthPercent <= MySettings.UseArcaneTorrentForDecastAtPercentage
            && MySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && Silencing_Shot.IsDistanceGood
                 && Silencing_Shot.KnownSpell && Silencing_Shot.IsSpellUsable && MySettings.UseSilencingShot)
        {
            Silencing_Shot.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && Scatter_Shot.IsDistanceGood
                 && Scatter_Shot.KnownSpell && Scatter_Shot.IsSpellUsable && MySettings.UseScatterShot)
        {
            Scatter_Shot.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && MySettings.UseWyvernSting
                && Wyvern_Sting.KnownSpell && Wyvern_Sting.IsSpellUsable && Wyvern_Sting.IsDistanceGood)
            {
                Wyvern_Sting.Launch();
                return;
            }
        }
    }

    private void DPS_Burst()
    {
        if (MySettings.UseTrinket && Trinket_Timer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            Trinket_Timer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBerserking)
            Berserking.Launch();
        else if (Blood_Fury.IsSpellUsable && Blood_Fury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseBloodFury)
            Blood_Fury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && MySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (Engineering_Timer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                && MySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            Engineering_Timer = new Timer(1000*60);
        }
        else if (A_Murder_of_Crows.KnownSpell && A_Murder_of_Crows.IsSpellUsable && A_Murder_of_Crows.IsDistanceGood
                 && MySettings.UseAMurderofCrows && !A_Murder_of_Crows.TargetHaveBuff)
        {
            A_Murder_of_Crows.Launch();
            return;
        }
        else if (Barrage.KnownSpell && Barrage.IsSpellUsable && MySettings.UseBarrage && Barrage.IsDistanceGood)
        {
            Barrage.Launch();
            return;
        }
        else if (Blink_Strike.KnownSpell && Blink_Strike.IsSpellUsable && ObjectManager.Pet.IsAlive
                 && MySettings.UseBlinkStrike && ObjectManager.Target.GetDistance < 40)
        {
            Blink_Strike.Launch();
            return;
        }
        else if (Dire_Beast.KnownSpell && Dire_Beast.IsSpellUsable && MySettings.UseDireBeast
                 && Dire_Beast.IsDistanceGood && Dire_Beast_Timer.IsReady)
        {
            Dire_Beast.Launch();
            Dire_Beast_Timer = new Timer(1000*15);
            return;
        }
        else if (Fervor.KnownSpell && Fervor.IsSpellUsable && ObjectManager.Me.Focus < 50
                 && MySettings.UseFervor)
        {
            Fervor.Launch();
            return;
        }
        else if (Glaive_Toss.KnownSpell && Glaive_Toss.IsSpellUsable && MySettings.UseGlaiveToss &&
                 Glaive_Toss.IsDistanceGood)
        {
            Glaive_Toss.Launch();
            return;
        }
        else if (Lynx_Rush.KnownSpell && Lynx_Rush.IsSpellUsable && MySettings.UseLynxRush &&
                 ObjectManager.Target.GetDistance < 40)
        {
            Lynx_Rush.Launch();
            return;
        }
        else if (Powershot.KnownSpell && Powershot.IsSpellUsable && MySettings.UsePowershot &&
                 Powershot.IsDistanceGood)
        {
            Powershot.Launch();
            return;
        }
        else if (Stampede.KnownSpell && Stampede.IsSpellUsable && MySettings.UseStampede &&
                 Stampede.IsDistanceGood)
        {
            Stampede.Launch();
            return;
        }
        else if (Rapid_Fire.KnownSpell && Rapid_Fire.IsSpellUsable && MySettings.UseRapidFire
                 && ObjectManager.Target.GetDistance < 40)
        {
            Rapid_Fire.Launch();
            return;
        }
        else
        {
            if (Readiness.KnownSpell && Readiness.IsSpellUsable && MySettings.UseReadiness)
            {
                Readiness.Launch();
                return;
            }
        }
    }

    private void DPS_Cycle()
    {
        if (Serpent_Sting.IsSpellUsable && Serpent_Sting.IsDistanceGood && Serpent_Sting.KnownSpell
            && MySettings.UseSerpentSting && !Serpent_Sting.TargetHaveBuff)
        {
            Serpent_Sting.Launch();
            Serpent_Sting_Timer = new Timer(1000*12);
            return;
        }
        else if (Cobra_Shot.KnownSpell && Cobra_Shot.IsSpellUsable && Cobra_Shot.IsDistanceGood
                 && MySettings.UseCobraShot && Serpent_Sting_Timer.IsReady)
        {
            Cobra_Shot.Launch();
            Serpent_Sting_Timer = new Timer(1000*12);
            return;
        }
        else if (Kill_Shot.KnownSpell && Kill_Shot.IsSpellUsable && Kill_Shot.IsDistanceGood
                 && MySettings.UseKillShot)
        {
            Kill_Shot.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 4 && MySettings.UseMultiShot && MySettings.UseExplosiveTrap
                 && MySettings.UseExplosiveShot)
        {
            if (Multi_Shot.KnownSpell && Multi_Shot.IsSpellUsable && Multi_Shot.IsDistanceGood)
            {
                Multi_Shot.Launch();
                return;
            }
            else if (Explosive_Trap.KnownSpell && Explosive_Trap.IsSpellUsable && ObjectManager.Target.GetDistance < 10)
            {
                Explosive_Trap.Launch();
                return;
            }
            else
            {
                if (Explosive_Shot.KnownSpell && Explosive_Shot.IsSpellUsable && Explosive_Shot.IsDistanceGood)
                {
                    Explosive_Shot.Launch();
                    return;
                }
            }
        }
        else if (Explosive_Trap.KnownSpell && Explosive_Trap.IsSpellUsable && ObjectManager.Target.GetDistance < 10
                 && MySettings.UseExplosiveTrap && ObjectManager.GetNumberAttackPlayer() < 4 &&
                 ObjectManager.GetNumberAttackPlayer() > 1)
        {
            Explosive_Trap.Launch();
            return;
        }
        else if (Black_Arrow.KnownSpell && Black_Arrow.IsSpellUsable && Black_Arrow.IsDistanceGood
                 && MySettings.UseBlackArrow)
        {
            Black_Arrow.Launch();
            return;
        }
        else if (Explosive_Shot.KnownSpell && Explosive_Shot.IsSpellUsable && Explosive_Shot.IsDistanceGood
                 && MySettings.UseExplosiveShot)
        {
            Explosive_Shot.Launch();
            return;
        }
        else if (Multi_Shot.KnownSpell && Multi_Shot.IsSpellUsable && Multi_Shot.IsDistanceGood
                 && MySettings.UseMultiShot && ObjectManager.Me.FocusPercentage > 79
                 && ObjectManager.GetNumberAttackPlayer() < 4 && ObjectManager.GetNumberAttackPlayer() > 1)
        {
            Multi_Shot.Launch();
            return;
        }
        else if (Arcane_Shot.KnownSpell && Arcane_Shot.IsSpellUsable && Arcane_Shot.IsDistanceGood
                 && MySettings.UseArcaneShot && ObjectManager.Me.FocusPercentage > 79)
        {
            Arcane_Shot.Launch();
            return;
        }
        else if (Arcane_Torrent.IsSpellUsable && Arcane_Torrent.KnownSpell
                 && MySettings.UseArcaneTorrentForResource)
        {
            Arcane_Torrent.Launch();
            return;
        }
        else
        {
            if (Cobra_Shot.KnownSpell && Cobra_Shot.IsSpellUsable && Cobra_Shot.IsDistanceGood
                && MySettings.UseCobraShot && ObjectManager.Me.FocusPercentage < 80)
            {
                Cobra_Shot.Launch();
                return;
            }
            else
            {
                if (Steady_Shot.KnownSpell && Steady_Shot.IsSpellUsable && Steady_Shot.IsDistanceGood
                    && ObjectManager.Me.FocusPercentage < 60 && (!Cobra_Shot.KnownSpell || !MySettings.UseCobraShot))
                {
                    Steady_Shot.Launch();
                    return;
                }
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: HunterSurvivalSettings

    [Serializable]
    public class HunterSurvivalSettings : Settings
    {
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public int UseStoneformAtPercentage = 80;
        public int UseWarStompAtPercentage = 80;
        public bool UseAMurderofCrows = true;
        public bool UseAlchFlask = true;
        public bool UseArcaneShot = true;
        public bool UseArcaneTorrentForDecast = true;
        public bool UseArcaneTorrentForResource = true;
        public bool UseAspectoftheHawk = true;
        public bool UseBarrage = true;
        public bool UseBerserking = true;
        public bool UseBindingShot = true;
        public bool UseBlackArrow = true;
        public bool UseBlinkStrike = true;
        public bool UseBloodFury = true;
        public bool UseCamouflage = false;
        public bool UseCobraShot = true;
        public bool UseCombatRevive = true;
        public bool UseConcussiveShot = true;
        public bool UseDeterrance = true;
        public bool UseDireBeast = true;
        public bool UseDisengage = true;
        public bool UseEngGlove = true;
        public bool UseExhilaration = true;
        public bool UseExplosiveShot = true;
        public bool UseExplosiveTrap = true;
        public bool UseFeedPet = true;
        public bool UseFeignDeath = true;
        public bool UseFervor = true;
        public bool UseFreezingTrap = true;
        public bool UseGiftoftheNaaru = true;
        public bool UseGlaiveToss = true;
        public bool UseHuntersMark = true;
        public bool UseIceTrap = true;
        public bool UseKillShot = true;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseLynxRush = true;
        public bool UseMendPet = true;
        public bool UseMisdirection = true;
        public bool UseMultiShot = true;
        public bool UsePet1 = true;
        public bool UsePet2 = false;
        public bool UsePet3 = false;
        public bool UsePet4 = false;
        public bool UsePet5 = false;
        public bool UsePowershot = true;
        public bool UseRapidFire = true;
        public bool UseReadiness = true;
        public bool UseRevivePet = true;
        public bool UseScatterShot = true;
        public bool UseSerpentSting = true;
        public bool UseSilencingShot = true;
        public bool UseStampede = true;
        public bool UseStoneform = true;
        public bool UseTrinket = true;
        public bool UseWarStomp = true;
        public bool UseWyvernSting = true;

        public HunterSurvivalSettings()
        {
            ConfigWinForm(new Point(500, 400), "Hunter Survival Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrent", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Hunter Buffs */
            AddControlInWinForm("Use Aspect of the Hawk", "UseAspectoftheHawk", "Hunter Buffs");
            AddControlInWinForm("Use Camouflage", "UseCamouflage", "Hunter Buffs");
            AddControlInWinForm("Use Feign Death", "UseFeignDeath", "Hunter Buffs");
            AddControlInWinForm("Use Hunter's Mark", "UseHuntersMark", "Hunter Buffs");
            AddControlInWinForm("Use Misdirection", "UseMisdirection", "Hunter Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Arcane Shot", "UseArcaneShot", "Offensive Spell");
            AddControlInWinForm("Use Black Arrow", "UseBlackArrow", "Offensive Spell");
            AddControlInWinForm("Use Pet in Slot 1", "UsePet1", "Offensive Spell");
            AddControlInWinForm("Use Pet in Slot 2", "UsePet2", "Offensive Spell");
            AddControlInWinForm("Use Pet in Slot 3", "UsePet3", "Offensive Spell");
            AddControlInWinForm("Use Pet in Slot 4", "UsePet4", "Offensive Spell");
            AddControlInWinForm("Use Pet in Slot 5", "UsePet5", "Offensive Spell");
            AddControlInWinForm("Use Cobra Shot", "UseCobraShot", "Offensive Spell");
            AddControlInWinForm("Use Explosive Shot", "UseExplosiveShot", "Offensive Spell");
            AddControlInWinForm("Use Explosive Trap", "UseExplosiveTrap", "Offensive Spell");
            AddControlInWinForm("Use KillShot", "UseKillShot", "Offensive Spell");
            AddControlInWinForm("Use Multi-Shot", "UseMultiShot", "Offensive Spell");
            AddControlInWinForm("Use Serpent Sting", "UseSerpentSting", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use A Murder of Crows", "UseAMurderofCrows", "Offensive Cooldown");
            AddControlInWinForm("Use Barrage", "UseBarrage", "Offensive Cooldown");
            AddControlInWinForm("Use Blink Strike", "UseBlinkStrike", "Offensive Cooldown");
            AddControlInWinForm("Use Dire Beast", "UseDireBeast", "Offensive Cooldown");
            AddControlInWinForm("Use Fervor", "UseFervor", "Offensive Cooldown");
            AddControlInWinForm("Use Glaive Toss", "UseGlaiveToss", "Offensive Cooldown");
            AddControlInWinForm("Use Lynx Rush", "UseLynxRush", "Offensive Cooldown");
            AddControlInWinForm("Use Powershot", "UsePowershot", "Offensive Cooldown");
            AddControlInWinForm("Use Rapid Fire", "UseRapidFire", "Offensive Cooldown");
            AddControlInWinForm("Use Readiness", "UseReadiness", "Offensive Cooldown");
            AddControlInWinForm("Use Stampede", "UseStampede", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Binding Shot", "UseBindingShot", "Defensive Cooldown");
            AddControlInWinForm("Use Concussive Shot", "UseConcussiveShot", "Defensive Cooldown");
            AddControlInWinForm("Use Deterrance", "UseDeterrance", "Defensive Cooldown");
            AddControlInWinForm("Use Disengage", "UseDisengage", "Defensive Cooldown");
            AddControlInWinForm("Use Freezing Trap", "UseFreezingTrap", "Defensive Cooldown");
            AddControlInWinForm("Use Ice Trap", "UseIceTrap", "Defensive Cooldown");
            AddControlInWinForm("Use Scatter Shot", "UseScatterShot", "Defensive Cooldown");
            AddControlInWinForm("Use Silencing Shot", "UseSilencingShot", "Defensive Cooldown");
            AddControlInWinForm("Use Wyvern Sting", "UseWyvernSting", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Exhilaration", "UseExhilaration", "Healing Spell");
            AddControlInWinForm("Use Feed Pet", "UseFeedPet", "Healing Spell");
            AddControlInWinForm("Use Mend Pet", "UseMendPet", "Healing Spell");
            AddControlInWinForm("Use Revive Pet", "UseRevivePet", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket", "UseTrinket", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Use Revive Pet in Combat", "UseCombatRevive", "Game Settings");
        }

        public static HunterSurvivalSettings CurrentSetting { get; set; }

        public static HunterSurvivalSettings GetSettings()
        {
            string CurrentSettingsFile = Application.StartupPath + "\\CustomClasses\\Settings\\Hunter_Survival.xml";
            if (File.Exists(CurrentSettingsFile))
            {
                return
                    CurrentSetting = Load<HunterSurvivalSettings>(CurrentSettingsFile);
            }
            else
            {
                return new HunterSurvivalSettings();
            }
        }
    }

    #endregion
}

#endregion