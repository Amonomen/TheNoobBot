/*
* CombatClass for TheNoobBot
* Credit : Rival, Geesus, Enelya, Marstor, Vesper, Neo2003, Dreadlocks
* Thanks you !
*/

using System;
using System.IO;
using System.Threading;
using System.Windows.Forms;
using nManager.Helpful;
using nManager.Wow.Class;
using nManager.Wow.Enums;
using nManager.Wow.Helpers;
using nManager.Wow.ObjectManager;
using Point = System.Drawing.Point;
using Timer = nManager.Helpful.Timer;

public class Main : ICombatClass
{
    internal static float range = 5.0f;
    internal static bool loop = true;

    #region ICombatClass Members

    public float Range
    {
        get { return range; }
        set { range = value; }
    }

    public void Initialize()
    {
        Initialize(false);
    }

    public void Dispose()
    {
        Logging.WriteFight("Combat system stopped.");
        loop = false;
    }

    public void ShowConfiguration()
    {
        Directory.CreateDirectory(Application.StartupPath + "\\CombatClasses\\Settings\\");
        Initialize(true);
    }

    public void ResetConfiguration()
    {
        Directory.CreateDirectory(Application.StartupPath + "\\CombatClasses\\Settings\\");
        Initialize(true, true);
    }

    #endregion

    public void Initialize(bool configOnly, bool resetSettings = false)
    {
        try
        {
            if (!loop)
                loop = true;
            Logging.WriteFight("Loading combat system.");
            switch (ObjectManager.Me.WowClass)
            {
                #region DeathKnight Specialisation checking

                case WoWClass.DeathKnight:
                    var BloodRites = new Spell("Blood Rites");
                    var Reaping = new Spell("Reaping");
                    var HowlingBlast = new Spell("Howling Blast");

                    if (BloodRites.KnownSpell)
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Deathknight_Blood.xml";
                            DeathknightBlood.DeathknightBloodSettings CurrentSetting;
                            CurrentSetting = new DeathknightBlood.DeathknightBloodSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<DeathknightBlood.DeathknightBloodSettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Deathknight Blood Combat class...");
                            range = 5.0f;
                            new DeathknightBlood();
                        }
                    }
                    else if (Reaping.KnownSpell)
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Deathknight_Unholy.xml";
                            DeathknightUnholy.DeathknightUnholySettings CurrentSetting;
                            CurrentSetting = new DeathknightUnholy.DeathknightUnholySettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<DeathknightUnholy.DeathknightUnholySettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Deathknight Unholy Combat class...");
                            range = 5.0f;
                            new DeathknightUnholy();
                        }
                    }
                    else if (HowlingBlast.KnownSpell)
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Deathknight_Frost.xml";
                            DeathknightFrost.DeathknightFrostSettings CurrentSetting;
                            CurrentSetting = new DeathknightFrost.DeathknightFrostSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<DeathknightFrost.DeathknightFrostSettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Deathknight Frost Combat class...");
                            range = 5.0f;
                            new DeathknightFrost();
                        }
                    }
                    else
                    {
                        if (configOnly)
                        {
                            MessageBox.Show(
                                "Your specification haven't be found, loading Deathknight Apprentice Settings");
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Deathknight_Apprentice.xml";
                            DeathknightApprentice.DeathknightApprenticeSettings CurrentSetting;
                            CurrentSetting = new DeathknightApprentice.DeathknightApprenticeSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<DeathknightApprentice.DeathknightApprenticeSettings>(
                                        currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("No specialisation detected.");
                            Logging.WriteFight("Loading Deathknight Apprentice Combat class...");
                            range = 5.0f;
                            new DeathknightApprentice();
                        }
                    }
                    break;

                #endregion

                #region Mage Specialisation checking

                case WoWClass.Mage:
                    var MageArcaneSpell = new Spell("Arcane Blast");
                    var MageFireSpell = new Spell("Pyroblast");
                    var MageFrostSpell = new Spell("Summon Water Elemental");

                    if (MageArcaneSpell.KnownSpell)
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Mage_Arcane.xml";
                            MageArcane.MageArcaneSettings CurrentSetting;
                            CurrentSetting = new MageArcane.MageArcaneSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<MageArcane.MageArcaneSettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Mage Arcane Combat class...");
                            range = 30.0f;
                            new MageArcane();
                        }
                        break;
                    }
                    else if (MageFireSpell.KnownSpell)
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Mage_Fire.xml";
                            MageFire.MageFireSettings CurrentSetting;
                            CurrentSetting = new MageFire.MageFireSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<MageFire.MageFireSettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Mage Fire Combat class...");
                            range = 30.0f;
                            new MageFire();
                        }
                        break;
                    }
                    else if (MageFrostSpell.KnownSpell)
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Mage_Frost.xml";
                            MageFrost.MageFrostSettings CurrentSetting;
                            CurrentSetting = new MageFrost.MageFrostSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<MageFrost.MageFrostSettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Mage Frost Combat class...");
                            range = 30.0f;
                            new MageFrost();
                        }
                        break;
                    }
                    else
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Mage_Frost.xml";
                            MageFrost.MageFrostSettings CurrentSetting;
                            CurrentSetting = new MageFrost.MageFrostSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<MageFrost.MageFrostSettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Mage without Spec");
                            Logging.WriteFight("Loading Mage Frost Combat class...");
                            range = 30.0f;
                            new MageFrost();
                        }
                        break;
                    }

                #endregion

                #region Warlock Specialisation checking

                case WoWClass.Warlock:
                    var WarlockDemonologySpell = new Spell("Summon Felguard");
                    var WarlockAfflictionSpell = new Spell("Unstable Affliction");
                    var WarlockDestructionSpell = new Spell("Conflagrate");

                    if (WarlockDemonologySpell.KnownSpell)
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Warlock_Demonology.xml";
                            WarlockDemonology.WarlockDemonologySettings CurrentSetting;
                            CurrentSetting = new WarlockDemonology.WarlockDemonologySettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<WarlockDemonology.WarlockDemonologySettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Warlock Demonology Combat class...");
                            range = 30.0f;
                            new WarlockDemonology();
                        }
                    }
                    else if (WarlockAfflictionSpell.KnownSpell)
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Warlock_Affliction.xml";
                            WarlockAffliction.WarlockAfflictionSettings CurrentSetting;
                            CurrentSetting = new WarlockAffliction.WarlockAfflictionSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<WarlockAffliction.WarlockAfflictionSettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Warlock Affliction Combat class...");
                            range = 30.0f;
                            new WarlockAffliction();
                        }
                    }
                    else if (WarlockDestructionSpell.KnownSpell)
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Warlock_Destruction.xml";
                            WarlockDestruction.WarlockDestructionSettings CurrentSetting;
                            CurrentSetting = new WarlockDestruction.WarlockDestructionSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<WarlockDestruction.WarlockDestructionSettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Warlock Destruction Combat class...");
                            range = 30.0f;
                            new WarlockDestruction();
                        }
                    }
                    else
                    {
                        if (configOnly)
                        {
                            MessageBox.Show(
                                "Your specification haven't be found, loading Warlock Demonology Settings");
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Warlock_Demonology.xml";
                            WarlockDemonology.WarlockDemonologySettings CurrentSetting;
                            CurrentSetting = new WarlockDemonology.WarlockDemonologySettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<WarlockDemonology.WarlockDemonologySettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("No specialisation detected.");
                            Logging.WriteFight("Loading Warlock Demonology Combat class...");
                            range = 30.0f;
                            new WarlockDemonology();
                        }
                    }
                    break;

                #endregion

                #region Druid Specialisation checking

                case WoWClass.Druid:
                    var DruidFeralSpell = new Spell("Tiger's Fury");
                    var DruidGuardianSpell = new Spell("Savage Defense");
                    var DruidBalanceSpell = new Spell("Eclipse");
                    var DruidRestorationSpell = new Spell("Swiftmend");

                    if (DruidFeralSpell.KnownSpell)
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Druid_Feral.xml";
                            DruidFeral.DruidFeralSettings CurrentSetting;
                            CurrentSetting = new DruidFeral.DruidFeralSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<DruidFeral.DruidFeralSettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Druid Feral Found");
                            new DruidFeral();
                        }
                    }
                    else if (DruidGuardianSpell.KnownSpell)
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Druid_Guardian.xml";
                            DruidGuardian.DruidGuardianSettings CurrentSetting;
                            CurrentSetting = new DruidGuardian.DruidGuardianSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<DruidGuardian.DruidGuardianSettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Feral Guardian Found");
                            new DruidGuardian();
                        }
                    }
                    else if (DruidBalanceSpell.KnownSpell)
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Druid_Balance.xml";
                            DruidBalance.DruidBalanceSettings CurrentSetting;
                            CurrentSetting = new DruidBalance.DruidBalanceSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<DruidBalance.DruidBalanceSettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Druid Balance Found");
                            range = 30.0f;
                            new DruidBalance();
                        }
                    }
                    else if (DruidRestorationSpell.KnownSpell)
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Druid_Restoration.xml";
                            DruidRestoration.DruidRestorationSettings CurrentSetting;
                            CurrentSetting = new DruidRestoration.DruidRestorationSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<DruidRestoration.DruidRestorationSettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Druid Restoration Found");
                            range = 30.0f;
                            new DruidRestoration();
                        }
                    }
                    else
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Druid_Balance.xml";
                            DruidBalance.DruidBalanceSettings CurrentSetting;
                            CurrentSetting = new DruidBalance.DruidBalanceSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<DruidBalance.DruidBalanceSettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("No specialisation detected.");
                            Logging.WriteFight("Loading Druid Balance Combat class...");
                            range = 30.0f;
                            new DruidBalance();
                        }
                    }
                    break;

                #endregion

                #region Paladin Specialisation checking

                case WoWClass.Paladin:
                    var PaladinRetributionSpell = new Spell("Templar's Verdict");
                    var PaladinProtectionSpell = new Spell("Avenger's Shield");
                    var PaladinHolySpell = new Spell("Holy Shock");
                    if (PaladinRetributionSpell.KnownSpell)
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Paladin_Retribution.xml";
                            var CurrentSetting = new PaladinRetribution.PaladinRetributionSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<PaladinRetribution.PaladinRetributionSettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Paladin Retribution Combat class...");
                            new PaladinRetribution();
                        }
                    }
                    else if (PaladinProtectionSpell.KnownSpell)
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Paladin_Protection.xml";
                            var CurrentSetting = new PaladinProtection.PaladinProtectionSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<PaladinProtection.PaladinProtectionSettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Paladin Protection Combat class...");
                            new PaladinProtection();
                        }
                    }
                    else if (PaladinHolySpell.KnownSpell)
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Paladin_Holy.xml";
                            var CurrentSetting = new PaladinHoly.PaladinHolySettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting = Settings.Load<PaladinHoly.PaladinHolySettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Paladin Holy Combat class...");
                            range = 30.0f;
                            new PaladinHoly();
                        }
                    }
                    else
                    {
                        if (configOnly)
                        {
                            MessageBox.Show(
                                "Your specification haven't be found, loading Paladin Retribution Settings");
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Paladin_Retribution.xml";
                            var CurrentSetting = new PaladinRetribution.PaladinRetributionSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<PaladinRetribution.PaladinRetributionSettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("No specialisation detected.");
                            Logging.WriteFight("Loading Paladin Retribution Combat class...");
                            new PaladinRetribution();
                        }
                    }
                    break;

                #endregion

                #region Shaman Specialisation checking

                case WoWClass.Shaman:
                    var ShamanEnhancementSpell = new Spell("Lava Lash");
                    var ShamanElementalSpell = new Spell("Thunderstorm");
                    var ShamanRestorationSpell = new Spell("Riptide");

                    if (ShamanEnhancementSpell.KnownSpell)
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Shaman_Enhancement.xml";
                            ShamanEnhancement.ShamanEnhancementSettings CurrentSetting;
                            CurrentSetting = new ShamanEnhancement.ShamanEnhancementSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<ShamanEnhancement.ShamanEnhancementSettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Shaman Enhancement Combat class...");
                            new ShamanEnhancement();
                        }
                        break;
                    }
                    else if (ShamanElementalSpell.KnownSpell)
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Shaman_Elemental.xml";
                            ShamanElemental.ShamanElementalSettings CurrentSetting;
                            CurrentSetting = new ShamanElemental.ShamanElementalSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<ShamanElemental.ShamanElementalSettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Shaman Elemental Combat class...");
                            range = 30.0f;
                            new ShamanElemental();
                        }
                        break;
                    }
                    else if (ShamanRestorationSpell.KnownSpell)
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Shaman_Restoration.xml";
                            ShamanRestoration.ShamanRestorationSettings CurrentSetting;
                            CurrentSetting = new ShamanRestoration.ShamanRestorationSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<ShamanRestoration.ShamanRestorationSettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Shaman Restoration Combat class...");
                            range = 30.0f;
                            new ShamanRestoration();
                        }
                        break;
                    }
                    else
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Shaman_Restoration.xml";
                            ShamanRestoration.ShamanRestorationSettings CurrentSetting;
                            CurrentSetting = new ShamanRestoration.ShamanRestorationSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<ShamanRestoration.ShamanRestorationSettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Shaman without Spec");
                            range = 30.0f;
                            new ShamanRestoration();
                        }
                        break;
                    }

                #endregion

                #region Priest Specialisation checking

                case WoWClass.Priest:
                    var PriestShadowSpell = new Spell("Mind Flay");
                    var PriestDisciplineSpell = new Spell("Penance");
                    var PriestHolySpell = new Spell("Holy Word: Chastise");
                    if (PriestShadowSpell.KnownSpell)
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Priest_Shadow.xml";
                            PriestShadow.PriestShadowSettings CurrentSetting;
                            CurrentSetting = new PriestShadow.PriestShadowSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<PriestShadow.PriestShadowSettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Priest Shadow Combat class...");
                            range = 30.0f;
                            new PriestShadow();
                        }
                    }
                    else if (PriestDisciplineSpell.KnownSpell)
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Priest_Discipline.xml";
                            PriestDiscipline.PriestDisciplineSettings CurrentSetting;
                            CurrentSetting = new PriestDiscipline.PriestDisciplineSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<PriestDiscipline.PriestDisciplineSettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Priest Discipline Combat class...");
                            range = 30.0f;
                            new PriestDiscipline();
                        }
                    }
                    else if (PriestHolySpell.KnownSpell)
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Priest_Holy.xml";
                            PriestHoly.PriestHolySettings CurrentSetting;
                            CurrentSetting = new PriestHoly.PriestHolySettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<PriestHoly.PriestHolySettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Priest Holy Combat class...");
                            range = 30.0f;
                            new PriestHoly();
                        }
                    }
                    else
                    {
                        if (configOnly)
                        {
                            MessageBox.Show(
                                "Your specification haven't be found, loading Priest Shadow Settings");
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Priest_Shadow.xml";
                            PriestShadow.PriestShadowSettings CurrentSetting;
                            CurrentSetting = new PriestShadow.PriestShadowSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<PriestShadow.PriestShadowSettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("No specialisation detected.");
                            Logging.WriteFight("Loading Priest Shadow Combat class...");
                            range = 30.0f;
                            new PriestShadow();
                        }
                    }
                    break;

                #endregion

                #region Rogue Specialisation checking

                case WoWClass.Rogue:
                    var RogueCombatSpell = new Spell("Blade Flurry");
                    var RogueAssassinationSpell = new Spell("Mutilate");
                    var RogueSubtletySpell = new Spell("Master of Subtlety");

                    if (RogueCombatSpell.KnownSpell)
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Rogue_Combat.xml";
                            RogueCombat.RogueCombatSettings CurrentSetting;
                            CurrentSetting = new RogueCombat.RogueCombatSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<RogueCombat.RogueCombatSettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Rogue Combat Combat class...");
                            new RogueCombat();
                        }
                        break;
                    }
                    else if (RogueAssassinationSpell.KnownSpell)
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Rogue_Assassination.xml";
                            RogueAssassination.RogueAssassinationSettings CurrentSetting;
                            CurrentSetting = new RogueAssassination.RogueAssassinationSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<RogueAssassination.RogueAssassinationSettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Rogue Assassination Combat class...");
                            new RogueAssassination();
                        }
                        break;
                    }
                    else if (RogueSubtletySpell.KnownSpell)
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Rogue_Subtlety.xml";
                            RogueSubtlety.RogueSubtletySettings CurrentSetting;
                            CurrentSetting = new RogueSubtlety.RogueSubtletySettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<RogueSubtlety.RogueSubtletySettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Rogue Subtlety Combat class...");
                            new RogueSubtlety();
                        }
                        break;
                    }
                    else
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Rogue_Combat.xml";
                            RogueCombat.RogueCombatSettings CurrentSetting;
                            CurrentSetting = new RogueCombat.RogueCombatSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<RogueCombat.RogueCombatSettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Rogue without Spec");
                            new RogueCombat();
                        }
                        break;
                    }

                #endregion

                #region Warrior Specialisation checking

                case WoWClass.Warrior:
                    var WarriorArmsSpell = new Spell("Mortal Strike");
                    var WarriorFurySpell = new Spell("Bloodthirst");
                    var WarriorProtectionSpell = new Spell("Shield Slam");

                    if (WarriorArmsSpell.KnownSpell)
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Warrior_Arms.xml";
                            WarriorArms.WarriorArmsSettings CurrentSetting;
                            CurrentSetting = new WarriorArms.WarriorArmsSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<WarriorArms.WarriorArmsSettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Warrior Arms Combat class...");
                            new WarriorArms();
                        }
                    }
                    else if (WarriorFurySpell.KnownSpell)
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Warrior_Fury.xml";
                            WarriorFury.WarriorFurySettings CurrentSetting;
                            CurrentSetting = new WarriorFury.WarriorFurySettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<WarriorFury.WarriorFurySettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Warrior Fury Combat class...");
                            new WarriorFury();
                        }
                    }
                    else if (WarriorProtectionSpell.KnownSpell)
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Warrior_Protection.xml";
                            WarriorProtection.WarriorProtectionSettings CurrentSetting;
                            CurrentSetting = new WarriorProtection.WarriorProtectionSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<WarriorProtection.WarriorProtectionSettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Warrior Protection Combat class...");
                            new WarriorProtection();
                        }
                    }
                    else
                    {
                        if (configOnly)
                        {
                            MessageBox.Show(
                                "Your specification haven't be found, loading Warrior Arms Settings");
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Warrior_Arms.xml";
                            WarriorArms.WarriorArmsSettings CurrentSetting;
                            CurrentSetting = new WarriorArms.WarriorArmsSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<WarriorArms.WarriorArmsSettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("No specialisation detected.");
                            Logging.WriteFight("Loading Warrior Arms Combat class...");
                            new WarriorArms();
                        }
                    }
                    break;

                #endregion

                #region Hunter Specialisation checking

                case WoWClass.Hunter:
                    var HunterMarksmanshipSpell = new Spell("Aimed Shot");
                    var HunterSurvivalSpell = new Spell("Explosive Shot");
                    var HunterBeastMasterySpell = new Spell("Kill Command");

                    if (HunterMarksmanshipSpell.KnownSpell)
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Hunter_Marksmanship.xml";
                            HunterMarksmanship.HunterMarksmanshipSettings CurrentSetting;
                            CurrentSetting = new HunterMarksmanship.HunterMarksmanshipSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<HunterMarksmanship.HunterMarksmanshipSettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Hunter Marksmanship Combat class...");
                            range = 30.0f;
                            new HunterMarksmanship();
                        }
                    }
                    else if (HunterSurvivalSpell.KnownSpell)
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Hunter_Survival.xml";
                            HunterSurvival.HunterSurvivalSettings CurrentSetting;
                            CurrentSetting = new HunterSurvival.HunterSurvivalSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<HunterSurvival.HunterSurvivalSettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Hunter Survival Combat class...");
                            range = 30.0f;
                            new HunterSurvival();
                        }
                    }
                    else if (HunterBeastMasterySpell.KnownSpell)
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Hunter_BeastMastery.xml";
                            HunterBeastMastery.HunterBeastMasterySettings CurrentSetting;
                            CurrentSetting = new HunterBeastMastery.HunterBeastMasterySettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<HunterBeastMastery.HunterBeastMasterySettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Hunter BeastMastery Combat class...");
                            range = 30.0f;
                            new HunterBeastMastery();
                        }
                    }
                    else
                    {
                        if (configOnly)
                        {
                            MessageBox.Show(
                                "Your specification haven't be found, loading Hunter Marksmanship Settings");
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Hunter_Marksmanship.xml";
                            HunterMarksmanship.HunterMarksmanshipSettings CurrentSetting;
                            CurrentSetting = new HunterMarksmanship.HunterMarksmanshipSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<HunterMarksmanship.HunterMarksmanshipSettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("No specialisation detected.");
                            Logging.WriteFight("Loading Hunter Marksmanship Combat class...");
                            range = 30.0f;
                            new HunterMarksmanship();
                        }
                    }
                    break;

                #endregion

                #region Monk Specialisation checking

                case WoWClass.Monk:
                    var MonkBrewmasterSpell = new Spell("Dizzying Haze");
                    var MonkWindwalkerSpell = new Spell("Fists of Fury");
                    var MonkMistweaverSpell = new Spell("Soothing Mist");
                    if (MonkBrewmasterSpell.KnownSpell)
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Monk_Brewmaster.xml";
                            MonkBrewmaster.MonkBrewmasterSettings CurrentSetting;
                            CurrentSetting = new MonkBrewmaster.MonkBrewmasterSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<MonkBrewmaster.MonkBrewmasterSettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Monk Brewmaster Combat class...");
                            new MonkBrewmaster();
                        }
                    }
                    else if (MonkWindwalkerSpell.KnownSpell)
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Monk_Windwalker.xml";
                            MonkWindwalker.MonkWindwalkerSettings CurrentSetting;
                            CurrentSetting = new MonkWindwalker.MonkWindwalkerSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<MonkWindwalker.MonkWindwalkerSettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Monk Windwalker Combat class...");
                            new MonkWindwalker();
                        }
                    }
                    else if (MonkMistweaverSpell.KnownSpell)
                    {
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Monk_Mistweaver.xml";
                            MonkMistweaver.MonkMistweaverSettings CurrentSetting;
                            CurrentSetting = new MonkMistweaver.MonkMistweaverSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<MonkMistweaver.MonkMistweaverSettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Loading Monk Mistweaver Combat class...");
                            range = 30.0f;
                            new MonkMistweaver();
                        }
                    }
                    else
                    {
                        if (configOnly)
                        {
                            MessageBox.Show(
                                "Your specification haven't be found, loading Monk Brewmaster Settings");
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Monk_Brewmaster.xml";
                            MonkBrewmaster.MonkBrewmasterSettings CurrentSetting;
                            CurrentSetting = new MonkBrewmaster.MonkBrewmasterSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                CurrentSetting =
                                    Settings.Load<MonkBrewmaster.MonkBrewmasterSettings>(currentSettingsFile);
                            }
                            CurrentSetting.ToForm();
                            CurrentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("No specialisation detected.");
                            Logging.WriteFight("Loading Monk Brewmaster Combat class...");
                            new MonkBrewmaster();
                        }
                    }
                    break;

                #endregion

                default:
                    Dispose();
                    break;
            }
        }
        catch
        {
        }
        Logging.WriteFight("Combat system stopped.");
    }
}

#region Deathknight

public class DeathknightApprentice
{
    private readonly DeathknightApprenticeSettings mySettings = DeathknightApprenticeSettings.GetSettings();

    #region Professions & Racials

    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell BloodFury = new Spell("Blood Fury");
    private readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell WarStomp = new Spell("War Stomp");

    #endregion

    #region Deathknight Presence & Buffs

    private readonly Spell BloodPlague = new Spell("Blood Plague");
    private readonly Spell BloodPresence = new Spell("Blood Presence");
    private readonly Spell FrostFever = new Spell("Frost Fever");
    private readonly Spell FrostPresence = new Spell("Frost Presence");
    private Timer BloodPlagueTimer = new Timer(0);
    private Timer FrostFeverTimer = new Timer(0);

    #endregion

    #region Offensive Spell

    private readonly Spell BloodBoil = new Spell("Blood Boil");
    private readonly Spell BloodStrike = new Spell("Blood Strike");
    private readonly Spell DeathCoil = new Spell("Death Coil");
    private readonly Spell IcyTouch = new Spell("Icy Touch");
    private readonly Spell PlagueStrike = new Spell("Plague Strike");

    #endregion

    #region Offensive Cooldown

    private readonly Spell DeathGrip = new Spell("Death Grip");
    private readonly Spell Pestilence = new Spell("Pestilence");
    private readonly Spell RaiseDead = new Spell("Raise Dead");
    private Timer PestilenceTimer = new Timer(0);

    #endregion

    #region Defensive Cooldown

    private readonly Spell ChainsofIce = new Spell("Chains of Ice");
    private readonly Spell MindFreeze = new Spell("Mind Freeze");

    #endregion

    #region Healing Spell

    private readonly Spell DeathStrike = new Spell("Death Strike");

    #endregion

    public DeathknightApprentice()
    {
        Main.range = 5.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (DeathGrip.IsHostileDistanceGood || IcyTouch.IsHostileDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.GetDistance < 30)
                                Combat();
                        }

                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void Pull()
    {
        if (mySettings.UseDeathGrip && DeathGrip.KnownSpell && DeathGrip.IsHostileDistanceGood && DeathGrip.IsSpellUsable
            && ObjectManager.Target.GetDistance > Main.range)
        {
            DeathGrip.Launch();
            MovementManager.StopMove();
        }
        else
        {
            if (mySettings.UseIcyTouch && IcyTouch.KnownSpell && IcyTouch.IsHostileDistanceGood && IcyTouch.IsSpellUsable)
                IcyTouch.Launch();
        }
    }

    private void Combat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        DPSCycle();
        DefenseCycle();
        Heal();
        Decast();
        DPSBurst();
        DPSCycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (mySettings.UseBloodPresence && BloodPresence.KnownSpell && BloodPresence.IsSpellUsable && !BloodPresence.HaveBuff
            && (ObjectManager.GetNumberAttackPlayer() >= 3 || ObjectManager.Me.HealthPercent <= mySettings.UseBloodPresenceAtPercentage))
            BloodPresence.Launch();
        else
        {
            if (mySettings.UseFrostPresence && FrostPresence.KnownSpell && FrostPresence.IsSpellUsable && !FrostPresence.HaveBuff)
                FrostPresence.Launch();
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            var maxTimeTimer = new Timer(1000*2);
            MovementsAction.MoveBackward(true);
            while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                Thread.Sleep(300);
            MovementsAction.MoveBackward(false);
            if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
            {
                MovementsAction.MoveForward(true);
                Thread.Sleep(1000);
                MovementsAction.MoveForward(false);
                MovementManager.Face(ObjectManager.Target.Position);
            }
        }
    }

    private void DefenseCycle()
    {
        if (mySettings.UseStoneform && Stoneform.KnownSpell && Stoneform.IsSpellUsable
            && ObjectManager.Me.HealthPercent <= mySettings.UseStoneformAtPercentage)
        {
            Stoneform.Launch();
            return;
        }
        else
        {
            if (mySettings.UseWarStomp && WarStomp.KnownSpell && WarStomp.IsSpellUsable && ObjectManager.Target.GetDistance < 8
                && ObjectManager.Me.HealthPercent <= mySettings.UseWarStompAtPercentage)
            {
                WarStomp.Launch();
                return;
            }
        }
    }

    private void Heal()
    {
        if (mySettings.UseGiftoftheNaaru && GiftoftheNaaru.KnownSpell && GiftoftheNaaru.IsSpellUsable
            && ObjectManager.Me.HealthPercent <= mySettings.UseGiftoftheNaaruAtPercentage)
        {
            GiftoftheNaaru.Launch();
            return;
        }
        else
        {
            if (mySettings.UseDeathStrike && DeathStrike.KnownSpell && DeathStrike.IsHostileDistanceGood && DeathStrike.IsSpellUsable
                && ObjectManager.Target.IsValid && ObjectManager.Target.IsAlive
                && ObjectManager.Me.HealthPercent <= mySettings.UseDeathStrikeAtPercentage)
            {
                DeathStrike.Launch();
                return;
            }
        }
    }

    private void Decast()
    {
        if (mySettings.UseArcaneTorrentForDecast && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8 && ArcaneTorrent.IsSpellUsable
            && ObjectManager.Me.HealthPercent <= mySettings.UseArcaneTorrentForDecastAtPercentage
            && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else
        {
            if (mySettings.UseMindFreeze && MindFreeze.KnownSpell && MindFreeze.IsHostileDistanceGood && MindFreeze.IsSpellUsable
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && ObjectManager.Me.HealthPercent <= mySettings.UseMindFreezeAtPercentage)
            {
                MindFreeze.Launch();
                return;
            }
        }

        if (mySettings.UseChainsofIce && ChainsofIce.KnownSpell && ChainsofIce.IsHostileDistanceGood && ChainsofIce.IsSpellUsable
            && ObjectManager.Target.GetMove && !ChainsofIce.TargetHaveBuff)
        {
            ChainsofIce.Launch();
            return;
        }
    }

    private void DPSBurst()
    {
        if (mySettings.UseRaiseDead && RaiseDead.IsSpellUsable && ObjectManager.Target.GetDistance < 30 && RaiseDead.KnownSpell)
            RaiseDead.Launch();
        else if (mySettings.UseLifeblood && Lifeblood.IsSpellUsable && ObjectManager.Target.GetDistance < 30 && Lifeblood.KnownSpell)
            Lifeblood.Launch();
        else if (mySettings.UseBerserking && Berserking.IsSpellUsable && ObjectManager.Target.GetDistance < 30 && Berserking.KnownSpell)
            Berserking.Launch();
        else
        {
            if (mySettings.UseBloodFury && BloodFury.IsSpellUsable && ObjectManager.Target.GetDistance < 30 && BloodFury.KnownSpell)
                BloodFury.Launch();
        }
    }

    private void DPSCycle()
    {
        if (mySettings.UseIcyTouch && IcyTouch.KnownSpell && IcyTouch.IsHostileDistanceGood && IcyTouch.IsSpellUsable
            && (!FrostFever.TargetHaveBuff || FrostFeverTimer.IsReady))
        {
            IcyTouch.Launch();
            FrostFeverTimer = new Timer(1000*27);
            return;
        }
        else if (mySettings.UsePlagueStrike && PlagueStrike.KnownSpell && PlagueStrike.IsHostileDistanceGood && PlagueStrike.IsSpellUsable
                 && (!BloodPlague.TargetHaveBuff || BloodPlagueTimer.IsReady))
        {
            PlagueStrike.Launch();
            BloodPlagueTimer = new Timer(1000*27);
            return;
        }
        else if (mySettings.UsePestilence && Pestilence.KnownSpell && Pestilence.IsHostileDistanceGood && Pestilence.IsSpellUsable
                 && BloodPlague.TargetHaveBuff && FrostFever.TargetHaveBuff
                 && ObjectManager.GetNumberAttackPlayer() > 1 && PestilenceTimer.IsReady)
        {
            Pestilence.Launch();
            PestilenceTimer = new Timer(1000*30);
            return;
        }
        else if (mySettings.UseBloodBoil && BloodBoil.KnownSpell && ObjectManager.Target.GetDistance < 10 && BloodBoil.IsSpellUsable
                 && BloodPlague.TargetHaveBuff && FrostFever.TargetHaveBuff
                 && ObjectManager.GetNumberAttackPlayer() > 2)
        {
            BloodBoil.Launch();
            return;
        }
        else if (mySettings.UseDeathCoil && DeathCoil.KnownSpell && DeathCoil.IsHostileDistanceGood && DeathCoil.IsSpellUsable)
        {
            DeathCoil.Launch();
            return;
        }
        else if (mySettings.UseBloodStrike && BloodStrike.KnownSpell && BloodStrike.IsHostileDistanceGood && BloodStrike.IsSpellUsable)
        {
            BloodStrike.Launch();
            return;
        }
        else if (mySettings.UseIcyTouch && IcyTouch.KnownSpell && IcyTouch.IsHostileDistanceGood && IcyTouch.IsSpellUsable)
        {
            IcyTouch.Launch();
            return;
        }
        else if (mySettings.UsePlagueStrike && PlagueStrike.KnownSpell && PlagueStrike.IsHostileDistanceGood && PlagueStrike.IsSpellUsable)
        {
            PlagueStrike.Launch();
            return;
        }
        else
        {
            if (mySettings.UseArcaneTorrentForResource && ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable
                && ObjectManager.Me.RunicPowerPercentage < 86)
            {
                ArcaneTorrent.Launch();
                return;
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: DeathknightApprenticeSettings

    [Serializable]
    public class DeathknightApprenticeSettings : Settings
    {
        public bool DoAvoidMelee = false;
        public int DoAvoidMeleeDistance = 0;
        public bool UseArcaneTorrentForDecast = true;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public bool UseArcaneTorrentForResource = true;
        public bool UseBerserking = true;
        public bool UseBloodBoil = true;
        public bool UseBloodFury = true;
        public bool UseBloodPresence = true;
        public int UseBloodPresenceAtPercentage = 50;
        public bool UseBloodStrike = true;
        public bool UseChainsofIce = false;
        public bool UseDeathCoil = true;
        public bool UseDeathGrip = true;
        public bool UseDeathStrike = true;
        public int UseDeathStrikeAtPercentage = 80;
        public bool UseFrostPresence = true;
        public bool UseGiftoftheNaaru = true;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public bool UseIcyTouch = true;
        public bool UseLifeblood = true;
        public bool UseMindFreeze = true;
        public int UseMindFreezeAtPercentage = 100;
        public bool UsePestilence = true;
        public bool UsePlagueStrike = true;
        public bool UseRaiseDead = true;
        public bool UseStoneform = true;
        public int UseStoneformAtPercentage = 80;
        public bool UseWarStomp = true;
        public int UseWarStompAtPercentage = 80;

        public DeathknightApprenticeSettings()
        {
            ConfigWinForm(new Point(500, 400), "Deathknight Apprentice Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials", "AtPercentage");
            /* Deathknight Presence & Buffs */
            AddControlInWinForm("Use Frost Presence", "UseFrostPresence", "Deathknight Presence & Buffs");
            AddControlInWinForm("Use Blood Presence", "UseBloodPresence", "Deathknight Presence & Buffs", "AtPercentage");
            /* Offensive Spell */
            AddControlInWinForm("Use Blood Boil", "UseBloodBoil", "Offensive Spell");
            AddControlInWinForm("Use Blood Strike", "UseBloodStrike", "Offensive Spell");
            AddControlInWinForm("Use Death Coil", "UseDeathCoil", "Offensive Spell");
            AddControlInWinForm("Use Icy Touch", "UseIcyTouch", "Offensive Spell");
            AddControlInWinForm("Use Plague Strike", "UsePlagueStrike", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Death Grip", "UseDeathGrip", "Offensive Cooldown");
            AddControlInWinForm("Use Pestilence", "UsePestilence", "Offensive Cooldown");
            AddControlInWinForm("Use Raise Dead", "UseRaiseDead", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Chains of Ice", "UseChainsofIce", "Defensive Cooldown");
            AddControlInWinForm("Use Mind Freeze", "UseMindFreeze", "Defensive Cooldown", "AtPercentage");
            /* Healing Spell */
            AddControlInWinForm("Use Death Strike", "UseDeathStrike", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
            AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
        }

        public static DeathknightApprenticeSettings CurrentSetting { get; set; }

        public static DeathknightApprenticeSettings GetSettings()
        {
            string currentSettingsFile = Application.StartupPath +
                                         "\\CombatClasses\\Settings\\Deathknight_Apprentice.xml";
            if (File.Exists(currentSettingsFile))
            {
                return
                    CurrentSetting =
                    Load<DeathknightApprenticeSettings>(currentSettingsFile);
            }
            else
            {
                return new DeathknightApprenticeSettings();
            }
        }
    }

    #endregion
}

public class DeathknightBlood
{
    private readonly DeathknightBloodSettings mySettings = DeathknightBloodSettings.GetSettings();

    #region General Timers & Variables

    private Timer AlchFlaskTimer = new Timer(0);
    public int DRW = 1;
    private Timer EngineeringTimer = new Timer(0);
    public int LC = 0;
    private Timer OnCD = new Timer(0);
    private Timer TrinketOneTimer = new Timer(0);
    private Timer TrinketTwoTimer = new Timer(0);

    #endregion

    #region Professions & Racials

    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell BloodFury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell WarStomp = new Spell("War Stomp");

    #endregion

    #region Deathknight Presence & Buffs

    private readonly Spell BloodPlague = new Spell("Blood Plague");
    private readonly Spell BloodPresence = new Spell("Blood Presence");
    private readonly Spell FrostFever = new Spell("Frost Fever");
    private readonly Spell FrostPresence = new Spell("Frost Presence");
    private readonly Spell HornofWinter = new Spell("Horn of Winter");
    private readonly Spell PathofFrost = new Spell("Path of Frost");
    private readonly Spell RoilingBlood = new Spell("Roiling Blood");
    private readonly Spell UnholyPresence = new Spell("Unholy Presence");
    private Timer BloodPlagueTimer = new Timer(0);
    private Timer FrostFeverTimer = new Timer(0);
    private Timer PathofFrostTimer = new Timer(0);
    private Timer PathofFrostBuffTimer = new Timer(0);

    #endregion

    #region Offensive Spell

    private readonly Spell BloodBoil = new Spell("Blood Boil");
    private readonly Spell BloodStrike = new Spell("Blood Strike");
    private readonly Spell DeathCoil = new Spell("Death Coil");
    private readonly Spell DeathStrike = new Spell("Death Strike");
    private readonly Spell DeathandDecay = new Spell("Death and Decay");
    private readonly Spell HeartStrike = new Spell("Heart Strike");
    private readonly Spell IcyTouch = new Spell("Icy Touch");
    private readonly Spell PlagueLeech = new Spell("Plague Leech");
    private readonly Spell PlagueStrike = new Spell("Plague Strike");
    private readonly Spell RuneStrike = new Spell("Rune Strike");
    private readonly Spell SoulReaper = new Spell("Soul Reaper");
    private readonly Spell UnholyBlight = new Spell("Unholy Blight");

    #endregion

    #region Offensive Cooldown

    private readonly Spell BloodTap = new Spell("Blood Tap");
    private readonly Spell DancingRuneWeapon = new Spell("Dancing Rune Weapon");
    private readonly Spell DeathGrip = new Spell("Death Grip");
    private readonly Spell EmpowerRuneWeapon = new Spell("Empower Rune Weapon");
    private readonly Spell Outbreak = new Spell("Outbreak");
    private readonly Spell Pestilence = new Spell("Pestilence");
    private readonly Spell RaiseDead = new Spell("Raise Dead");
    private Timer DancingRuneWeaponTimer = new Timer(0);
    private Timer PestilenceTimer = new Timer(0);

    #endregion

    #region Defensive Cooldown

    private readonly Spell AntiMagicShell = new Spell("Anti-Magic Shell");
    private readonly Spell AntiMagicZone = new Spell("Anti-Magic Zone");
    private readonly Spell ArmyoftheDead = new Spell("Army of the Dead");
    private readonly Spell Asphyxiate = new Spell("Asphyxiate");
    private readonly Spell BoneShield = new Spell("Bone Shield");
    private readonly Spell ChainsofIce = new Spell("Chains of Ice");
    private readonly Spell DeathsAdvance = new Spell("Death's Advance");
    private readonly Spell IceboundFortitude = new Spell("Icebound Fortitude");
    private readonly Spell MindFreeze = new Spell("Mind Freeze");
    private readonly Spell RemorselessWinter = new Spell("Remorseless Winter");
    private readonly Spell Strangulate = new Spell("Strangulate");
    private readonly Spell VampiricBlood = new Spell("Vampiric Blood");

    #endregion

    #region Healing Spell

    private readonly Spell Conversion = new Spell("Conversion");
    private readonly Spell DeathPact = new Spell("Death Pact");
    private readonly Spell DeathSiphon = new Spell("Death Siphon");
    private readonly Spell Lichborne = new Spell("Lichborne");
    private readonly Spell RuneTap = new Spell("Rune Tap");

    #endregion

    public DeathknightBlood()
    {
        Main.range = 5.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    BuffPath();
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (DeathGrip.IsHostileDistanceGood || IcyTouch.IsHostileDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (mySettings.UseLowCombat && ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84)
                            {
                                LC = 1;
                                if (ObjectManager.Target.GetDistance < 30)
                                    LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                if (ObjectManager.Target.GetDistance < 30)
                                    Combat();
                            }
                        }

                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void BuffPath()
    {
        if (mySettings.UsePathofFrost && PathofFrost.KnownSpell && !Fight.InFight && PathofFrost.IsSpellUsable
            && (!PathofFrost.HaveBuff || PathofFrostTimer.IsReady) && PathofFrostBuffTimer.IsReady)
        {
            PathofFrost.Launch();
            PathofFrostBuffTimer = new Timer(1000*10);
            PathofFrostTimer = new Timer(1000*60*9.5);
        }
    }

    private void Pull()
    {
        if (mySettings.UseDeathGrip && DeathGrip.KnownSpell && DeathGrip.IsHostileDistanceGood && DeathGrip.IsSpellUsable
            && ObjectManager.Target.GetDistance > Main.range)
        {
            DeathGrip.Launch();
            MovementManager.StopMove();
        }
        else
        {
            if (mySettings.UseIcyTouch && IcyTouch.KnownSpell && IcyTouch.IsHostileDistanceGood && IcyTouch.IsSpellUsable)
            {
                IcyTouch.Launch();
                FrostFeverTimer = new Timer(1000*27);
            }
        }
    }

    private void LowCombat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        if (OnCD.IsReady)
            DefenseCycle();
        Heal();

        if (mySettings.UseIcyTouch && IcyTouch.KnownSpell && IcyTouch.IsHostileDistanceGood && IcyTouch.IsSpellUsable)
        {
            IcyTouch.Launch();
            return;
        }
        else if (mySettings.UseDeathCoil && DeathCoil.KnownSpell && DeathCoil.IsHostileDistanceGood && DeathCoil.IsSpellUsable
                 && ObjectManager.Target.GetDistance > Main.range)
        {
            DeathCoil.Launch();
            return;
        }
        else if (mySettings.UseRuneStrike && RuneStrike.KnownSpell && RuneStrike.IsHostileDistanceGood && RuneStrike.IsSpellUsable)
        {
            RuneStrike.Launch();
            return;
        }
        else if (mySettings.UsePlagueStrike && PlagueStrike.KnownSpell && PlagueStrike.IsHostileDistanceGood && PlagueStrike.IsSpellUsable)
        {
            PlagueStrike.Launch();
            return;
        }
        else
        {
            if (mySettings.UseBloodBoil && BloodBoil.KnownSpell && BloodBoil.IsHostileDistanceGood && BloodBoil.IsSpellUsable)
            {
                BloodBoil.Launch();
                return;
            }
        }
    }

    private void Combat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        DPSCycle();
        if (OnCD.IsReady)
            DefenseCycle();
        if (ObjectManager.Me.HealthPercent <= mySettings.UseGiftoftheNaaruAtPercentage || ObjectManager.Me.HealthPercent <= mySettings.UseDeathPactAtPercentage 
            || ObjectManager.Me.HealthPercent <= mySettings.UseLichborneAtPercentage || ObjectManager.Me.HealthPercent <= mySettings.UseConversionAtPercentage 
            || ObjectManager.Me.HealthPercent <= mySettings.UseDeathSiphonAtPercentage || ObjectManager.Me.HealthPercent <= mySettings.UseVampiricBloodAtPercentage
            || ObjectManager.Me.HealthPercent <= mySettings.UseRuneTapAtPercentage)
            Heal();
        Decast();
        DPSBurst();
        DPSCycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (mySettings.UseUnholyPresence && LC == 1 && UnholyPresence.KnownSpell && UnholyPresence.IsSpellUsable
            && !UnholyPresence.HaveBuff && ObjectManager.Me.HealthPercent > mySettings.UseBloodPresenceAtPercentage + 10)
            UnholyPresence.Launch();
        else if (mySettings.UseFrostPresence && !mySettings.UseUnholyPresence && LC == 1 && FrostPresence.KnownSpell && !FrostPresence.HaveBuff && FrostPresence.IsSpellUsable
                && ObjectManager.Me.HealthPercent > mySettings.UseBloodPresenceAtPercentage + 10)
            FrostPresence.Launch();
        else
        {
            if (mySettings.UseBloodPresence && BloodPresence.KnownSpell && !BloodPresence.HaveBuff && BloodPresence.IsSpellUsable
                && (LC != 1 || (!mySettings.UseUnholyPresence && !mySettings.UseFrostPresence)))
                BloodPresence.Launch();
        }

        if (mySettings.UseHornofWinter && HornofWinter.KnownSpell && !HornofWinter.HaveBuff && HornofWinter.IsSpellUsable)
            HornofWinter.Launch();
        
        if (mySettings.UseDeathsAdvance && DeathsAdvance.KnownSpell && ObjectManager.GetNumberAttackPlayer() == 0 && DeathsAdvance.IsSpellUsable
                 && ObjectManager.Me.GetMove)
            DeathsAdvance.Launch();

        if (mySettings.UseAlchFlask && AlchFlaskTimer.IsReady && ItemsManager.GetItemCountByIdLUA(75525) == 1)
        {
            Logging.WriteFight("Use Alchi Flask");
            Lua.RunMacroText("/use item:75525");
            AlchFlaskTimer = new Timer(1000*60*60*2);
            return;
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            var maxTimeTimer = new Timer(1000*2);
            MovementsAction.MoveBackward(true);
            while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                Thread.Sleep(300);
            MovementsAction.MoveBackward(false);
            if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
            {
                MovementsAction.MoveForward(true);
                Thread.Sleep(1000);
                MovementsAction.MoveForward(false);
                MovementManager.Face(ObjectManager.Target.Position);
            }
        }
    }

    private void DefenseCycle()
    {
        if (mySettings.UseBoneShield && BoneShield.KnownSpell && !BoneShield.HaveBuff && BoneShield.IsSpellUsable
            && ObjectManager.Me.HealthPercent <= mySettings.UseBoneShieldAtPercentage)
        {
            BoneShield.Launch();
            return;
        }
        else if (mySettings.UseIceboundFortitude && IceboundFortitude.KnownSpell && IceboundFortitude.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseIceboundFortitudeAtPercentage)
        {
            IceboundFortitude.Launch();
            OnCD = new Timer(1000*12);
            return;
        }
        else if (mySettings.UseAsphyxiate && Strangulate.KnownSpell && Strangulate.IsHostileDistanceGood && Strangulate.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseAsphyxiateAtPercentage)
        {
            Strangulate.Launch();
            OnCD = new Timer(1000*5);
            return;
        }
        else if (mySettings.UseStoneform && Stoneform.KnownSpell && Stoneform.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseStoneformAtPercentage)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (mySettings.UseWarStomp && WarStomp.KnownSpell && ObjectManager.Target.GetDistance < 8 && WarStomp.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseWarStompAtPercentage)
        {
            WarStomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else
        {
            if (mySettings.UseRemorselessWinter && RemorselessWinter.KnownSpell && ObjectManager.Target.GetDistance < 8 && RemorselessWinter.IsSpellUsable
                && (ObjectManager.Me.HealthPercent <= mySettings.UseRemorselessWinterAtPercentage || ObjectManager.GetNumberAttackPlayer() > 1))
            {
                RemorselessWinter.Launch();
                OnCD = new Timer(1000*8);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (mySettings.UseGiftoftheNaaru && GiftoftheNaaru.KnownSpell && GiftoftheNaaru.IsSpellUsable
            && ObjectManager.Me.HealthPercent <= mySettings.UseGiftoftheNaaruAtPercentage)
        {
            GiftoftheNaaru.Launch();
            return;
        }
        else if (mySettings.UseDeathPact && DeathPact.KnownSpell && RaiseDead.KnownSpell && RaiseDead.IsSpellUsable && DeathPact.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseDeathPactAtPercentage)
        {
            for (int i = 0; i < 3; i++)
            {
                RaiseDead.Launch();
                DeathPact.Launch();
                if (!DeathPact.IsSpellUsable)
                    break;
            }
        }
        else if (mySettings.UseLichborne && Lichborne.KnownSpell && DeathCoil.KnownSpell && DeathCoil.IsSpellUsable && Lichborne.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseLichborneAtPercentage)
        {
            if (Lichborne.IsSpellUsable)
            {
                Lichborne.Launch();
                return;
            }
        }
        else if (mySettings.UseConversion && Conversion.KnownSpell && ObjectManager.Me.RunicPower > 10 && Conversion.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseConversionAtPercentage)
        {
            Conversion.Launch();
            while (ObjectManager.Me.RunicPower > 0 || ObjectManager.Me.HealthPercent < 100)
                Thread.Sleep(200);
            return;
        }
        else if (mySettings.UseDeathSiphon && DeathSiphon.KnownSpell && DeathSiphon.IsHostileDistanceGood && DeathSiphon.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseDeathSiphonAtPercentage)
        {
            DeathSiphon.Launch();
            return;
        }
        else if (mySettings.UseVampiricBlood && VampiricBlood.KnownSpell && VampiricBlood.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseVampiricBloodAtPercentage)
        {
            VampiricBlood.Launch();
            Thread.Sleep(200);
        }
        else
        {
            if (mySettings.UseBloodTapToHeal && BloodTap.KnownSpell && !RuneTap.IsSpellUsable && BloodTap.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= mySettings.UseRuneTapAtPercentage)
            {
                BloodTap.Launch();
                Thread.Sleep(200);
            }

            if (mySettings.UseRuneTap && RuneTap.KnownSpell && RuneTap.IsSpellUsable && ObjectManager.Me.HealthPercent <= mySettings.UseRuneTapAtPercentage)
                RuneTap.Launch();
        }
    }

    private void Decast()
    {
        if (mySettings.UseMindFreeze && MindFreeze.KnownSpell && MindFreeze.IsHostileDistanceGood && MindFreeze.IsSpellUsable
            && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
            && ObjectManager.Me.HealthPercent <= mySettings.UseMindFreezeAtPercentage)
        {
            MindFreeze.Launch();
            return;
        }
        else if (mySettings.UseArcaneTorrentForDecast && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8 && ArcaneTorrent.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseArcaneTorrentForDecastAtPercentage
                 && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else if (mySettings.UseAntiMagicShell && AntiMagicShell.KnownSpell && AntiMagicShell.IsSpellUsable
                 && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                 && ObjectManager.Me.HealthPercent <= mySettings.UseAntiMagicShellAtPercentage)
        {
            AntiMagicShell.Launch();
            return;
        }
        else if (Strangulate.KnownSpell && Strangulate.IsHostileDistanceGood && Strangulate.IsSpellUsable
                 && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                 && (mySettings.UseStrangulate && ObjectManager.Me.HealthPercent <= mySettings.UseStrangulateAtPercentage
                  || mySettings.UseAsphyxiate && ObjectManager.Me.HealthPercent <= mySettings.UseAsphyxiateAtPercentage))
        {
            Strangulate.Launch();
            return;
        }
        else
        {
            if (mySettings.UseAntiMagicZone && AntiMagicZone.KnownSpell && AntiMagicZone.IsSpellUsable
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && ObjectManager.Me.HealthPercent <= mySettings.UseAntiMagicZoneAtPercentage)
            {
                SpellManager.CastSpellByIDAndPosition(51052, ObjectManager.Me.Position);
                return;
            }
        }

        if (mySettings.UseChainsofIce && ChainsofIce.KnownSpell && ChainsofIce.IsHostileDistanceGood && ChainsofIce.IsSpellUsable
            && ObjectManager.Target.GetMove && !ChainsofIce.TargetHaveBuff)
        {
            ChainsofIce.Launch();
            return;
        }
    }

    private void DPSBurst()
    {
        if (mySettings.UseTrinketOne && TrinketOneTimer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketOneTimer = new Timer(1000*60*2);
        }
        else if (mySettings.UseTrinketTwo && TrinketTwoTimer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketTwoTimer = new Timer(1000*60*2);
        }

        if (mySettings.UseBerserking && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30 && Berserking.IsSpellUsable)
            Berserking.Launch();
        else if (mySettings.UseBloodFury && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 30 && BloodFury.IsSpellUsable)
            BloodFury.Launch();

        if (mySettings.UseLifeblood && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30 && Lifeblood.IsSpellUsable)
            Lifeblood.Launch();

        if (mySettings.UseBloodTapForDPS && BloodTap.KnownSpell && ObjectManager.Target.GetDistance < 30 && BloodTap.IsSpellUsable)
            BloodTap.Launch();

        if (mySettings.UseEngGlove && EngineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            EngineeringTimer = new Timer(1000*60);
        }

        if (mySettings.UseRaiseDeadForDPS && !DeathPact.KnownSpell && RaiseDead.KnownSpell && ObjectManager.Target.GetDistance < 30 && RaiseDead.IsSpellUsable)
            RaiseDead.Launch();

        if (DancingRuneWeaponTimer.IsReady && DRW == 0)
            DRW = 1;

        if (mySettings.UseDancingRuneWeapon && DancingRuneWeapon.KnownSpell && DancingRuneWeapon.IsHostileDistanceGood && DancingRuneWeapon.IsSpellUsable
            && DRW == 1)
        {
            DancingRuneWeapon.Launch();
            DancingRuneWeaponTimer = new Timer(1000*60*1.5);
            DRW = 0;
            return;
        }
    }

    private void DPSCycle()
    {
        if (DeathCoil.KnownSpell && Lichborne.HaveBuff && ObjectManager.Me.HealthPercent < 85 && DeathCoil.IsSpellUsable)
        {
            Lua.RunMacroText("/target Player");
            DeathCoil.Launch();
            return;
        }

        if (mySettings.UsePlagueLeech && mySettings.UseOutbreak && PlagueLeech.KnownSpell && Outbreak.KnownSpell && PlagueLeech.IsHostileDistanceGood
                 && Outbreak.IsSpellUsable && PlagueLeech.IsSpellUsable && BloodPlagueTimer.IsReady && BloodPlague.TargetHaveBuff && FrostFeverTimer.IsReady && FrostFever.TargetHaveBuff)
        {
            PlagueLeech.Launch();
            Thread.Sleep(400);
            if (Outbreak.IsHostileDistanceGood && Outbreak.IsSpellUsable)
            {
                Outbreak.Launch();
                BloodPlagueTimer = new Timer(1000*27);
                FrostFeverTimer = new Timer(1000*27);
            }
        }
        else if (mySettings.UseUnholyBlight && UnholyBlight.KnownSpell && ObjectManager.Target.GetDistance < 9 && UnholyBlight.IsSpellUsable
                 && (!BloodPlague.TargetHaveBuff || BloodPlagueTimer.IsReady || !FrostFever.TargetHaveBuff || FrostFeverTimer.IsReady))
        {
            UnholyBlight.Launch();
            BloodPlagueTimer = new Timer(1000*27);
            FrostFeverTimer = new Timer(1000*27);
        }
        else if (mySettings.UseOutbreak && Outbreak.KnownSpell && Outbreak.IsHostileDistanceGood && Outbreak.IsSpellUsable
                 && (BloodPlagueTimer.IsReady || FrostFeverTimer.IsReady || !BloodPlague.TargetHaveBuff || !FrostFever.TargetHaveBuff))
        {
            Outbreak.Launch();
            BloodPlagueTimer = new Timer(1000*27);
            FrostFeverTimer = new Timer(1000*27);
        }
        else if (mySettings.UseBloodBoil && RoilingBlood.KnownSpell && BloodBoil.KnownSpell && ObjectManager.Target.GetDistance < 9 && BloodBoil.IsSpellUsable
                 && ((BloodPlagueTimer.IsReady && BloodPlague.TargetHaveBuff) || (FrostFeverTimer.IsReady && FrostFever.TargetHaveBuff)))
        {
            BloodBoil.Launch();
            BloodPlagueTimer = new Timer(1000*27);
            FrostFeverTimer = new Timer(1000*27);
        }

        if (mySettings.UsePlagueStrike && PlagueStrike.KnownSpell && PlagueStrike.IsHostileDistanceGood && PlagueStrike.IsSpellUsable
                 && !Outbreak.IsSpellUsable && !UnholyBlight.IsSpellUsable && (BloodPlagueTimer.IsReady || !BloodPlague.TargetHaveBuff))
        {
            PlagueStrike.Launch();
            BloodPlagueTimer = new Timer(1000*27);
        }

        if (mySettings.UseIcyTouch && IcyTouch.KnownSpell && IcyTouch.IsHostileDistanceGood && IcyTouch.IsSpellUsable
                 && !Outbreak.IsSpellUsable && !UnholyBlight.IsSpellUsable && (FrostFeverTimer.IsReady || !FrostFever.TargetHaveBuff))
        {
            IcyTouch.Launch();
            FrostFeverTimer = new Timer(1000*27);
        }

        if (ObjectManager.GetNumberAttackPlayer() > 1 || ObjectManager.Me.HaveBuff(81141))
        {
            if (mySettings.UseBloodBoil && BloodBoil.KnownSpell && BloodBoil.IsHostileDistanceGood && BloodBoil.IsSpellUsable
                 && (ObjectManager.GetNumberAttackPlayer() > 3 || ObjectManager.Me.HaveBuff(81141)))
            {
                BloodBoil.Launch();
                if (RoilingBlood.KnownSpell && BloodPlague.TargetHaveBuff && FrostFever.TargetHaveBuff)
                {
                    BloodPlagueTimer = new Timer(1000*27);
                    FrostFeverTimer = new Timer(1000*27);
                }
                return;
            }
            else if (mySettings.UsePestilence && (!RoilingBlood.KnownSpell || !mySettings.UseBloodBoil) && Pestilence.KnownSpell && Pestilence.IsHostileDistanceGood && Pestilence.IsSpellUsable
                 && FrostFever.TargetHaveBuff && BloodPlague.TargetHaveBuff && ObjectManager.GetNumberAttackPlayer() > 2)
            {
                Pestilence.Launch();
                PestilenceTimer = new Timer(1000 * 30);
                return;
            }
            else if (mySettings.UseDeathandDecay && DeathandDecay.KnownSpell && DeathandDecay.IsHostileDistanceGood && DeathandDecay.IsSpellUsable
                 && ObjectManager.GetNumberAttackPlayer() > 2)
            {
                SpellManager.CastSpellByIDAndPosition(43265, ObjectManager.Target.Position);
                return;
            }
            // Blizzard API Calls for Heart Strike using Blood Strike Function
            else if (mySettings.UseHeartStrike && BloodStrike.KnownSpell && BloodStrike.IsHostileDistanceGood && BloodStrike.IsSpellUsable
                 && ObjectManager.GetNumberAttackPlayer() < 4 && ObjectManager.GetNumberAttackPlayer() > 1)
            {
                BloodStrike.Launch();
                return;
            }
            else if (mySettings.UseArmyoftheDead && ArmyoftheDead.KnownSpell && ArmyoftheDead.IsSpellUsable
                 && ObjectManager.GetNumberAttackPlayer() > 3)
            {
                ArmyoftheDead.Launch();
                Thread.Sleep(4000);
                return;
            }
        }

        if (mySettings.UseSoulReaper && SoulReaper.KnownSpell && SoulReaper.IsHostileDistanceGood && SoulReaper.IsSpellUsable
                 && ObjectManager.Target.HealthPercent < 35 && (ObjectManager.Me.HealthPercent > 90 || !mySettings.UseDeathStrike))
        {
            SoulReaper.Launch();
            return;
        }
        else if (mySettings.UseDeathStrike && DeathStrike.KnownSpell && DeathStrike.IsHostileDistanceGood && DeathStrike.IsSpellUsable)
        {
            DeathStrike.Launch();
            return;
        }
        else if (mySettings.UseRuneStrike && RuneStrike.KnownSpell && RuneStrike.IsHostileDistanceGood && DRW == 0 && RuneStrike.IsSpellUsable)
        {
            if ((mySettings.UseLichborne && ObjectManager.Me.HealthPercent <= mySettings.UseLichborneAtPercentage && Lichborne.KnownSpell)
                || (mySettings.UseConversion && ObjectManager.Me.HealthPercent <= mySettings.UseConversionAtPercentage && Conversion.KnownSpell))
                return;
            else
            {
                RuneStrike.Launch();
                return;
            }
        }
        // Blizzard API Calls for Heart Strike using Blood Strike Function
        else if (mySettings.UseHeartStrike && BloodStrike.KnownSpell && BloodStrike.IsHostileDistanceGood && BloodStrike.IsSpellUsable)
        {
            BloodStrike.Launch();
            return;
        }
        else if (mySettings.UseHornofWinter && HornofWinter.KnownSpell && ObjectManager.Me.RunicPowerPercentage < 90 && HornofWinter.IsSpellUsable
                 && FrostFever.TargetHaveBuff && PlagueStrike.TargetHaveBuff)
        {
            HornofWinter.Launch();
            return;
        }
        else if (mySettings.UseArcaneTorrentForResource && ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else
        {
            if (mySettings.UseEmpowerRuneWeapon && EmpowerRuneWeapon.KnownSpell && EmpowerRuneWeapon.IsSpellUsable)
                EmpowerRuneWeapon.Launch();
            return;
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: DeathknightBloodSettings

    [Serializable]
    public class DeathknightBloodSettings : Settings
    {
        public bool DoAvoidMelee = false;
        public int DoAvoidMeleeDistance = 0;
        public bool UseAlchFlask = true;
        public bool UseAntiMagicShell = true;
        public int UseAntiMagicShellAtPercentage = 100;
        public bool UseAntiMagicZone = true;
        public int UseAntiMagicZoneAtPercentage = 100;
        public bool UseArcaneTorrentForDecast = true;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public bool UseArcaneTorrentForResource = true;
        public bool UseArmyoftheDead = true;
        public bool UseAsphyxiate = true;
        public int UseAsphyxiateAtPercentage = 90;
        public bool UseBerserking = true;
        public bool UseBloodBoil = true;
        public bool UseBloodFury = true;
        public bool UseBloodPresence = true;
        public int UseBloodPresenceAtPercentage = 50;
        public bool UseBloodTapForDPS = true;
        public bool UseBloodTapToHeal = true;
        public bool UseBoneShield = true;
        public int UseBoneShieldAtPercentage = 100;
        public bool UseChainsofIce = false;
        public bool UseConversion = true;
        public int UseConversionAtPercentage = 45;
        public bool UseDancingRuneWeapon = true;
        public bool UseDeathCoil = true;
        public bool UseDeathGrip = true;
        public bool UseDeathPact = true;
        public int UseDeathPactAtPercentage = 55;
        public bool UseDeathSiphon = true;
        public int UseDeathSiphonAtPercentage = 80;
        public bool UseDeathStrike = true;
        public bool UseDeathandDecay = true;
        public bool UseDeathsAdvance = true;
        public bool UseEmpowerRuneWeapon = true;
        public bool UseEngGlove = true;
        public bool UseFrostPresence = true;
        public bool UseGiftoftheNaaru = true;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public bool UseHeartStrike = true;
        public bool UseHornofWinter = true;
        public bool UseIceboundFortitude = true;
        public int UseIceboundFortitudeAtPercentage = 80;
        public bool UseIcyTouch = true;
        public bool UseLichborne = true;
        public int UseLichborneAtPercentage = 45;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMindFreeze = true;
        public int UseMindFreezeAtPercentage = 100;
        public bool UseOutbreak = true;
        public bool UsePathofFrost = true;
        public bool UsePestilence = true;
        public bool UsePlagueLeech = true;
        public bool UsePlagueStrike = true;
        public bool UseRaiseDeadForDPS = true;
        public bool UseRemorselessWinter = true;
        public int UseRemorselessWinterAtPercentage = 70;
        public bool UseRuneStrike = true;
        public bool UseRuneTap = true;
        public int UseRuneTapAtPercentage = 70;
        public bool UseSoulReaper = true;
        public bool UseStoneform = true;
        public int UseStoneformAtPercentage = 80;
        public bool UseStrangulate = true;
        public int UseStrangulateAtPercentage = 100;
        public bool UseTrinketOne = true;
        public bool UseTrinketTwo = true;
        public bool UseUnholyBlight = true;
        public bool UseUnholyPresence = true;
        public bool UseVampiricBlood = true;
        public int UseVampiricBloodAtPercentage = 70;
        public bool UseWarStomp = true;
        public int UseWarStompAtPercentage = 80;

        public DeathknightBloodSettings()
        {
            ConfigWinForm(new Point(500, 400), "Deathknight Blood Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials", "AtPercentage");
            /* Deathknight Presence & Buffs */
            AddControlInWinForm("Use Frost Presence", "UseFrostPresence", "Deathknight Presence & Buffs");
            AddControlInWinForm("Use Blood Presence", "UseBloodPresence", "Deathknight Presence & Buffs", "AtPercentage");
            AddControlInWinForm("Use Horn of Winter", "UseHornofWinter", "Deathknight Presence & Buffs");
            AddControlInWinForm("Use Path of Frost", "UsePathofFrost", "Deathknight Presence & Buffs");
            AddControlInWinForm("Use Unholy Presence", "UseUnholyPresence", "Deathknight Presence & Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Blood Boil", "UseBloodBoil", "Offensive Spell");
            AddControlInWinForm("Use Death Coil", "UseDeathCoil", "Offensive Spell");
            AddControlInWinForm("Use Death and Decay", "UseDeathandDecay", "Offensive Spell");
            AddControlInWinForm("Use Death Strike", "UseDeathStrike", "Offensive Spell");
            AddControlInWinForm("Use Heart Strike", "UseHeartStrike", "Offensive Spell");
            AddControlInWinForm("Use Icy Touch", "UseIcyTouch", "Offensive Spell");
            AddControlInWinForm("Use Plague Leech", "UsePlagueLeech", "Offensive Spell");
            AddControlInWinForm("Use Plague Strike", "UsePlagueStrike", "Offensive Spell");
            AddControlInWinForm("Use Rune Strike", "UseRuneStrike", "Offensive Spell");
            AddControlInWinForm("Use Soul Reaper", "UseSoulReaper", "Offensive Spell");
            AddControlInWinForm("Use Unholy Blight", "UseUnholyBlight", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Blood Tap for Healing", "UseBloodTapForHeal", "Offensive Cooldown");
            AddControlInWinForm("Use Blood Tap for DPS", "UseBloodTapForDPS", "Offensive Cooldown");
            AddControlInWinForm("Use Dancing Rune Weapon", "UseDancingRuneWeapon", "Offensive Cooldown");
            AddControlInWinForm("Use Death Grip", "UseDeathGrip", "Offensive Cooldown");
            AddControlInWinForm("Use Empower Rune Weapon", "UseEmpowerRuneWeapon", "Offensive Cooldown");
            AddControlInWinForm("Use Outbreak", "UseOutbreak", "Offensive Cooldown");
            AddControlInWinForm("Use Pestilence", "UsePestilence", "Offensive Cooldown");
            AddControlInWinForm("Use Raise Dead For DPS", "UseRaiseDeadForDPS", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Anti-Magic Shell", "UseAntiMagicShell", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Anti-Magic Zone", "UseAntiMagicZone", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Army of the Dead", "UseArmyoftheDead", "Defensive Cooldown");
            AddControlInWinForm("Use Asphyxiate", "UseAsphyxiate", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Bone Shield", "UseBoneShield", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Chains of Ice", "UseChainsofIce", "Defensive Cooldown");
            AddControlInWinForm("Use Death's Advance", "UseDeathsAdvance", "Defensive Cooldown");
            AddControlInWinForm("Use Icebound Fortitude", "UseIceboundFortitude", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Mind Freeze", "UseMindFreeze", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Remorseless Winter", "UseRemorseless Winter", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Strangulate", "UseStrangulate", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Vampiric Blood", "UseVampiricBlood", "Defensive Cooldown", "AtPercentage");
            /* Healing Spell */
            AddControlInWinForm("Use Conversion", "UseConversion", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Death Pact", "UseDeathPact", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Death Siphon", "UseDeathSiphon", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Lichborne", "UseLichborne", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Rune Tap", "UseRuneTap", "Healing Spell", "AtPercentage");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
            AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
            AddControlInWinForm("Use Engineer Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
            AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
        }

        public static DeathknightBloodSettings CurrentSetting { get; set; }

        public static DeathknightBloodSettings GetSettings()
        {
            string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Deathknight_Blood.xml";
            if (File.Exists(currentSettingsFile))
            {
                return
                    CurrentSetting = Load<DeathknightBloodSettings>(currentSettingsFile);
            }
            else
            {
                return new DeathknightBloodSettings();
            }
        }
    }

    #endregion
}

public class DeathknightUnholy
{
    private readonly DeathknightUnholySettings mySettings = DeathknightUnholySettings.GetSettings();

    #region General Timers & Variables

    private Timer AlchFlaskTimer = new Timer(0);
    public int DT = 1;
    private Timer EngineeringTimer = new Timer(0);
    public int LC = 0;
    private Timer OnCD = new Timer(0);
    private Timer TrinketOneTimer = new Timer(0);
    private Timer TrinketTwoTimer = new Timer(0);

    #endregion

    #region Professions & Racials

    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell BloodFury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell WarStomp = new Spell("War Stomp");

    #endregion

    #region Deathknight Presence & Buffs

    private readonly Spell BloodPlague = new Spell("Blood Plague");
    private readonly Spell BloodPresence = new Spell("Blood Presence");
    private readonly Spell FrostFever = new Spell("Frost Fever");
    private readonly Spell FrostPresence = new Spell("Frost Presence");
    private readonly Spell HornofWinter = new Spell("Horn of Winter");
    private readonly Spell PathofFrost = new Spell("Path of Frost");
    private readonly Spell RoilingBlood = new Spell("Roiling Blood");
    private readonly Spell UnholyPresence = new Spell("Unholy Presence");
    private Timer BloodPlagueTimer = new Timer(0);
    private Timer FrostFeverTimer = new Timer(0);
    private Timer PathofFrostTimer = new Timer(0);
    private Timer PathofFrostBuffTimer = new Timer(0);

    #endregion

    #region Offensive Spell

    private readonly Spell BloodBoil = new Spell("Blood Boil");
    private readonly Spell BloodStrike = new Spell("Blood Strike");
    private readonly Spell DarkTransformation = new Spell("Dark Transformation");
    private readonly Spell DeathCoil = new Spell("Death Coil");
    private readonly Spell DeathandDecay = new Spell("Death and Decay");
    private readonly Spell FesteringStrike = new Spell("Festering Strike");
    private readonly Spell IcyTouch = new Spell("Icy Touch");
    private readonly Spell PlagueLeech = new Spell("Plague Leech");
    private readonly Spell PlagueStrike = new Spell("Plague Strike");
    private readonly Spell ScourgeStrike = new Spell("Scourge Strike");
    private readonly Spell SoulReaper = new Spell("Soul Reaper");
    private readonly Spell UnholyBlight = new Spell("Unholy Blight");
    private Timer DarkTransformationTimer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell BloodTap = new Spell("Blood Tap");
    private readonly Spell DeathGrip = new Spell("Death Grip");
    private readonly Spell EmpowerRuneWeapon = new Spell("Empower Rune Weapon");
    private readonly Spell Outbreak = new Spell("Outbreak");
    private readonly Spell Pestilence = new Spell("Pestilence");
    private readonly Spell RaiseDead = new Spell("Raise Dead");
    private readonly Spell SummonGargoyle = new Spell("Summon Gargoyle");
    private readonly Spell UnholyFrenzy = new Spell("Unholy Frenzy");
    private Timer PestilenceTimer = new Timer(0);

    #endregion

    #region Defensive Cooldown

    private readonly Spell AntiMagicShell = new Spell("Anti-Magic Shell");
    private readonly Spell AntiMagicZone = new Spell("Anti-Magic Zone");
    private readonly Spell ArmyoftheDead = new Spell("Army of the Dead");
    private readonly Spell Asphyxiate = new Spell("Asphyxiate");
    private readonly Spell ChainsofIce = new Spell("Chains of Ice");
    private readonly Spell DeathsAdvance = new Spell("Death's Advance");
    private readonly Spell IceboundFortitude = new Spell("Icebound Fortitude");
    private readonly Spell MindFreeze = new Spell("Mind Freeze");
    private readonly Spell RemorselessWinter = new Spell("Remorseless Winter");
    private readonly Spell Strangulate = new Spell("Strangulate");

    #endregion

    #region Healing Spell

    private readonly Spell Conversion = new Spell("Conversion");
    private readonly Spell DeathPact = new Spell("Death Pact");
    private readonly Spell DeathSiphon = new Spell("Death Siphon");
    private readonly Spell DeathStrike = new Spell("Death Strike");
    private readonly Spell Lichborne = new Spell("Lichborne");

    #endregion

    public DeathknightUnholy()
    {
        Main.range = 5.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    BuffPath();
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (DeathGrip.IsHostileDistanceGood || IcyTouch.IsHostileDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (mySettings.UseLowCombat && ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84)
                            {
                                LC = 1;
                                if (ObjectManager.Target.GetDistance < 30)
                                    LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                if (ObjectManager.Target.GetDistance < 30)
                                    Combat();
                            }
                        }

                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void BuffPath()
    {
        if (mySettings.UsePathofFrost && PathofFrost.KnownSpell && !Fight.InFight && PathofFrost.IsSpellUsable
            && (!PathofFrost.HaveBuff || PathofFrostTimer.IsReady) && PathofFrostBuffTimer.IsReady)
        {
            PathofFrost.Launch();
            PathofFrostBuffTimer = new Timer(1000*10);
            PathofFrostTimer = new Timer(1000*60*9.5);
        }
    }

    private void Pull()
    {
        if (mySettings.UseDeathGrip && DeathGrip.KnownSpell && DeathGrip.IsHostileDistanceGood && DeathGrip.IsSpellUsable
            && ObjectManager.Target.GetDistance > Main.range)
        {
            DeathGrip.Launch();
            MovementManager.StopMove();
        }
        else
        {
            if (mySettings.UseIcyTouch && IcyTouch.KnownSpell && IcyTouch.IsHostileDistanceGood && IcyTouch.IsSpellUsable)
            {
                IcyTouch.Launch();
                FrostFeverTimer = new Timer(1000*27);
            }
        }
    }

    private void LowCombat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        if (OnCD.IsReady)
            DefenseCycle();
        Heal();

        if (mySettings.UseIcyTouch && IcyTouch.KnownSpell && IcyTouch.IsHostileDistanceGood && IcyTouch.IsSpellUsable)
        {
            IcyTouch.Launch();
            return;
        }
        else if (mySettings.UseDeathCoil && DeathCoil.KnownSpell && DeathCoil.IsHostileDistanceGood && DeathCoil.IsSpellUsable)
        {
            DeathCoil.Launch();
            return;
        }
        else if (mySettings.UseScourgeStrike && ScourgeStrike.KnownSpell && ScourgeStrike.IsHostileDistanceGood && ScourgeStrike.IsSpellUsable)
        {
            ScourgeStrike.Launch();
            return;
        }
        else
        {
            if (mySettings.UseBloodBoil && BloodBoil.KnownSpell && BloodBoil.IsHostileDistanceGood && BloodBoil.IsSpellUsable)
            {
                BloodBoil.Launch();
                return;
            }
        }
    }

    private void Combat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        DPSCycle();
        if (OnCD.IsReady && (ObjectManager.Me.HealthPercent <= mySettings.UseIceboundFortitudeAtPercentage || ObjectManager.Me.HealthPercent <= mySettings.UseAsphyxiateAtPercentage 
            || ObjectManager.Me.HealthPercent <= mySettings.UseStoneformAtPercentage || ObjectManager.Me.HealthPercent <= mySettings.UseWarStompAtPercentage 
            || ObjectManager.Me.HealthPercent <= mySettings.UseRemorselessWinterAtPercentage))
            DefenseCycle();
        if (ObjectManager.Me.HealthPercent <= mySettings.UseGiftoftheNaaruAtPercentage || ObjectManager.Me.HealthPercent <= mySettings.UseDeathPactAtPercentage 
            || ObjectManager.Me.HealthPercent <= mySettings.UseLichborneAtPercentage || ObjectManager.Me.HealthPercent <= mySettings.UseConversionAtPercentage 
            || ObjectManager.Me.HealthPercent <= mySettings.UseDeathSiphonAtPercentage || ObjectManager.Me.HealthPercent <= mySettings.UseDeathStrikeAtPercentage)
            Heal();
        Decast();
        DPSBurst();
        DPSCycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (mySettings.UseRaiseDead && RaiseDead.KnownSpell && RaiseDead.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 0
            && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0))
        {
            Logging.WriteFight(" - PET DEAD - ");
            Logging.WriteFight(" - SUMMONING PET - ");
            RaiseDead.Launch();
        }

        if (mySettings.UseUnholyPresence && UnholyPresence.KnownSpell && !UnholyPresence.HaveBuff && UnholyPresence.IsSpellUsable
            && ObjectManager.Me.HealthPercent > mySettings.UseBloodPresenceAtPercentage + 10)
            UnholyPresence.Launch();
        else if (mySettings.UseFrostPresence && !mySettings.UseUnholyPresence && FrostPresence.KnownSpell && !FrostPresence.HaveBuff && FrostPresence.IsSpellUsable
                 && ObjectManager.Me.HealthPercent > mySettings.UseBloodPresenceAtPercentage + 10)
            FrostPresence.Launch();
        else
        {
            if (mySettings.UseBloodPresence && BloodPresence.KnownSpell && !BloodPresence.HaveBuff && BloodPresence.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= mySettings.UseBloodPresenceAtPercentage)
                BloodPresence.Launch();
        }

        if (mySettings.UseHornofWinter && HornofWinter.KnownSpell && !HornofWinter.HaveBuff && HornofWinter.IsSpellUsable)
            HornofWinter.Launch();
        
        if (mySettings.UseDeathsAdvance && DeathsAdvance.KnownSpell && ObjectManager.GetNumberAttackPlayer() == 0 && DeathsAdvance.IsSpellUsable
                 && ObjectManager.Me.GetMove)
            DeathsAdvance.Launch();

        if (mySettings.UseAlchFlask && AlchFlaskTimer.IsReady && ItemsManager.GetItemCountByIdLUA(75525) == 1)
        {
            Logging.WriteFight("Use Alchi Flask");
            Lua.RunMacroText("/use item:75525");
            AlchFlaskTimer = new Timer(1000*60*60*2);
            return;
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            var maxTimeTimer = new Timer(1000*2);
            MovementsAction.MoveBackward(true);
            while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                Thread.Sleep(300);
            MovementsAction.MoveBackward(false);
            if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
            {
                MovementsAction.MoveForward(true);
                Thread.Sleep(1000);
                MovementsAction.MoveForward(false);
                MovementManager.Face(ObjectManager.Target.Position);
            }
        }
    }

    private void DefenseCycle()
    {
        if (mySettings.UseIceboundFortitude && IceboundFortitude.KnownSpell && IceboundFortitude.IsSpellUsable
            && ObjectManager.Me.HealthPercent <= mySettings.UseIceboundFortitudeAtPercentage)
        {
            IceboundFortitude.Launch();
            OnCD = new Timer(1000*12);
            return;
        }
        else if (mySettings.UseAsphyxiate && Strangulate.KnownSpell && Strangulate.IsHostileDistanceGood && Strangulate.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseAsphyxiateAtPercentage)
        {
            Strangulate.Launch();
            OnCD = new Timer(1000*5);
            return;
        }
        else if (mySettings.UseStoneform && Stoneform.KnownSpell && Stoneform.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseStoneformAtPercentage)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (mySettings.UseWarStomp && WarStomp.KnownSpell && ObjectManager.Target.GetDistance < 8 && WarStomp.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseWarStompAtPercentage)
        {
            WarStomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else
        {
            if (mySettings.UseRemorselessWinter && RemorselessWinter.KnownSpell && ObjectManager.Target.GetDistance < 8 && RemorselessWinter.IsSpellUsable
                && (ObjectManager.Me.HealthPercent <= mySettings.UseRemorselessWinterAtPercentage || ObjectManager.GetNumberAttackPlayer() > 1))
            {
                RemorselessWinter.Launch();
                OnCD = new Timer(1000*8);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (mySettings.UseGiftoftheNaaru && GiftoftheNaaru.KnownSpell && GiftoftheNaaru.IsSpellUsable
            && ObjectManager.Me.HealthPercent <= mySettings.UseGiftoftheNaaruAtPercentage)
        {
            GiftoftheNaaru.Launch();
            return;
        }
        else if (mySettings.UseDeathPact && DeathPact.KnownSpell && (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0) && DeathPact.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseDeathPactAtPercentage)
        {
            DeathPact.Launch();
            return;
        }
        else if (mySettings.UseDeathPact && DeathPact.KnownSpell && RaiseDead.KnownSpell && RaiseDead.IsSpellUsable && DeathPact.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseDeathPactAtPercentage)
        {
            for (int i = 0; i < 3; i++)
            {
                RaiseDead.Launch();
                DeathPact.Launch();
                if (!DeathPact.IsSpellUsable)
                    break;
            }
        }
        else if (mySettings.UseLichborne && Lichborne.KnownSpell && DeathCoil.KnownSpell && DeathCoil.IsSpellUsable && Lichborne.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseLichborneAtPercentage)
        {
            if (Lichborne.IsSpellUsable)
            {
                Lichborne.Launch();
                return;
            }
        }
        else if (mySettings.UseConversion && Conversion.KnownSpell && ObjectManager.Me.RunicPower > 10 && Conversion.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseConversionAtPercentage)
        {
            Conversion.Launch();
            while (ObjectManager.Me.RunicPower > 0 || ObjectManager.Me.HealthPercent < 100)
                Thread.Sleep(200);
            return;
        }
        else if (mySettings.UseDeathSiphon && DeathSiphon.KnownSpell && DeathSiphon.IsHostileDistanceGood && DeathSiphon.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseDeathSiphonAtPercentage)
        {
            DeathSiphon.Launch();
            return;
        }
        else
        {
            if (mySettings.UseDeathStrike && DeathStrike.KnownSpell && DeathStrike.IsHostileDistanceGood && DeathStrike.IsSpellUsable
                && ObjectManager.Target.IsValid && ObjectManager.Target.IsAlive
                && ObjectManager.Me.HealthPercent <= mySettings.UseDeathStrikeAtPercentage)
            {
                DeathStrike.Launch();
                return;
            }
        }
    }

    private void Decast()
    {
        if (mySettings.UseMindFreeze && MindFreeze.KnownSpell && MindFreeze.IsHostileDistanceGood && MindFreeze.IsSpellUsable
            && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
            && ObjectManager.Me.HealthPercent <= mySettings.UseMindFreezeAtPercentage)
        {
            MindFreeze.Launch();
            return;
        }
        else if (mySettings.UseArcaneTorrentForDecast && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8 && ArcaneTorrent.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseArcaneTorrentForDecastAtPercentage
                 && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else if (mySettings.UseAntiMagicShell && AntiMagicShell.KnownSpell && AntiMagicShell.IsSpellUsable
                 && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                 && ObjectManager.Me.HealthPercent <= mySettings.UseAntiMagicShellAtPercentage)
        {
            AntiMagicShell.Launch();
            return;
        }
        else if (Strangulate.KnownSpell && Strangulate.IsHostileDistanceGood && Strangulate.IsSpellUsable
                 && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                 && (mySettings.UseStrangulate && ObjectManager.Me.HealthPercent <= mySettings.UseStrangulateAtPercentage
                  || mySettings.UseAsphyxiate && ObjectManager.Me.HealthPercent <= mySettings.UseAsphyxiateAtPercentage))
        {
            Strangulate.Launch();
            return;
        }
        else
        {
            if (mySettings.UseAntiMagicZone && AntiMagicZone.KnownSpell && AntiMagicZone.IsSpellUsable
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && ObjectManager.Me.HealthPercent <= mySettings.UseAntiMagicZoneAtPercentage)
            {
                SpellManager.CastSpellByIDAndPosition(51052, ObjectManager.Me.Position);
                return;
            }
        }

        if (mySettings.UseChainsofIce && ChainsofIce.KnownSpell && ChainsofIce.IsHostileDistanceGood && ChainsofIce.IsSpellUsable
            && ObjectManager.Target.GetMove && !ChainsofIce.TargetHaveBuff)
        {
            ChainsofIce.Launch();
            return;
        }
    }

    private void DPSBurst()
    {
        if (mySettings.UseTrinketOne && TrinketOneTimer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketOneTimer = new Timer(1000*60*2);
        }
        else if (mySettings.UseTrinketTwo && TrinketTwoTimer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketTwoTimer = new Timer(1000*60*2);
        }

        if (mySettings.UseBerserking && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30 && Berserking.IsSpellUsable)
            Berserking.Launch();
        else if (mySettings.UseBloodFury && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 30 && BloodFury.IsSpellUsable)
            BloodFury.Launch();

        if (mySettings.UseLifeblood && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30 && Lifeblood.IsSpellUsable)
            Lifeblood.Launch();

        if (mySettings.UseBloodTap && BloodTap.KnownSpell && ObjectManager.Target.GetDistance < 30 && BloodTap.IsSpellUsable)
            BloodTap.Launch();

        if (mySettings.UseEngGlove && EngineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            EngineeringTimer = new Timer(1000*60);
        }

        if (mySettings.UseUnholyFrenzy && UnholyFrenzy.KnownSpell && ObjectManager.Target.GetDistance < 30 && UnholyFrenzy.IsSpellUsable)
            UnholyFrenzy.Launch();

        if (mySettings.UseSummonGargoyle && SummonGargoyle.KnownSpell && ObjectManager.Target.GetDistance < 30 && SummonGargoyle.IsSpellUsable)
            SummonGargoyle.Launch();

        if (DarkTransformationTimer.IsReady && DT == 0)
            DT++;

        if (mySettings.UseDarkTransformation && DarkTransformation.KnownSpell && DT == 1 && DarkTransformation.IsSpellUsable)
        {
            DarkTransformation.Launch();
            DarkTransformationTimer = new Timer(1000*30);
            DT--;
            return;
        }
    }

    private void DPSCycle()
    {
        if (DeathCoil.KnownSpell && Lichborne.HaveBuff && ObjectManager.Me.HealthPercent < 85 && DeathCoil.IsSpellUsable)
        {
            Lua.RunMacroText("/target Player");
            DeathCoil.Launch();
            return;
        }

        if (mySettings.UsePlagueLeech && mySettings.UseOutbreak && PlagueLeech.KnownSpell && Outbreak.KnownSpell && PlagueLeech.IsHostileDistanceGood
                 && Outbreak.IsSpellUsable && PlagueLeech.IsSpellUsable && BloodPlague.TargetHaveBuff && FrostFever.TargetHaveBuff)
        {
            PlagueLeech.Launch();
            Thread.Sleep(400);
            if (Outbreak.IsHostileDistanceGood && Outbreak.IsSpellUsable)
                Outbreak.Launch();
        }
        else if (mySettings.UseUnholyBlight && UnholyBlight.KnownSpell && ObjectManager.Target.GetDistance < 9 && UnholyBlight.IsSpellUsable
                 && (!BloodPlague.TargetHaveBuff || !FrostFever.TargetHaveBuff))
            UnholyBlight.Launch();
        else if (mySettings.UseOutbreak && Outbreak.KnownSpell && Outbreak.IsHostileDistanceGood && Outbreak.IsSpellUsable
                 && (!BloodPlague.TargetHaveBuff || !FrostFever.TargetHaveBuff))
            Outbreak.Launch();
        else if (mySettings.UsePlagueStrike && PlagueStrike.KnownSpell && PlagueStrike.IsHostileDistanceGood && PlagueStrike.IsSpellUsable
                 && !Outbreak.IsSpellUsable && !UnholyBlight.IsSpellUsable && (!BloodPlague.TargetHaveBuff || !FrostFever.TargetHaveBuff))
            PlagueStrike.Launch();

        if (mySettings.UsePestilence && (!RoilingBlood.KnownSpell || !mySettings.UseBloodBoil) && Pestilence.KnownSpell && Pestilence.IsHostileDistanceGood && Pestilence.IsSpellUsable
                 && FrostFever.TargetHaveBuff && BloodPlague.TargetHaveBuff && ObjectManager.GetNumberAttackPlayer() > 2)
        {
            Pestilence.Launch();
            PestilenceTimer = new Timer(1000 * 30);
            return;
        }

        if (mySettings.UseDarkTransformation && DarkTransformationTimer.IsReady && DT == 1)
        {
            if (mySettings.UseDeathCoil && DeathCoil.IsSpellUsable && DeathCoil.IsHostileDistanceGood && DeathCoil.KnownSpell)
            {
                if ((mySettings.UseLichborne && ObjectManager.Me.HealthPercent <= mySettings.UseLichborneAtPercentage && Lichborne.KnownSpell)
                || (mySettings.UseConversion && ObjectManager.Me.HealthPercent <= mySettings.UseConversionAtPercentage && Conversion.KnownSpell))
                    return;
                else
                {
                    DeathCoil.Launch();
                    return;
                }
            }
        }

        if (ObjectManager.GetNumberAttackPlayer() > 2)
        {
            if (mySettings.UseDeathandDecay && DeathandDecay.KnownSpell && DeathandDecay.IsHostileDistanceGood && DeathandDecay.IsSpellUsable
                 && ObjectManager.GetNumberAttackPlayer() > 2)
            {
                SpellManager.CastSpellByIDAndPosition(43265, ObjectManager.Target.Position);
                return;
            }
            else if (mySettings.UseArmyoftheDead && ArmyoftheDead.KnownSpell && ObjectManager.GetNumberAttackPlayer() > 3 && ArmyoftheDead.IsSpellUsable)
            {
                ArmyoftheDead.Launch();
                Thread.Sleep(4000);
                return;
            }
            else if (mySettings.UseBloodBoil && BloodBoil.KnownSpell && ObjectManager.Target.GetDistance < 9 && BloodBoil.IsSpellUsable
                 && ObjectManager.GetNumberAttackPlayer() > 2)
            {
                BloodBoil.Launch();
                return;
            }
        }

        if (mySettings.UseSoulReaper && SoulReaper.KnownSpell && SoulReaper.IsHostileDistanceGood && SoulReaper.IsSpellUsable
                 && ObjectManager.Target.HealthPercent < 35 && (ObjectManager.Me.HealthPercent > mySettings.UseDeathStrikeAtPercentage || !mySettings.UseDeathStrike))
        {
            SoulReaper.Launch();
            return;
        }
        else if (mySettings.UseScourgeStrike && ScourgeStrike.KnownSpell && ScourgeStrike.IsHostileDistanceGood && ScourgeStrike.IsSpellUsable
                 && ObjectManager.Me.RunicPowerPercentage < 90)
        {
            ScourgeStrike.Launch();
            return;
        }
        else if (mySettings.UseFesteringStrike && FesteringStrike.KnownSpell && FesteringStrike.IsHostileDistanceGood && FesteringStrike.IsSpellUsable
                 && ObjectManager.Me.RunicPowerPercentage < 90)
        {
            FesteringStrike.Launch();
            return;
        }
        else if (mySettings.UseDeathCoil && DeathCoil.KnownSpell && DeathCoil.IsHostileDistanceGood && DeathCoil.IsSpellUsable
                 && (ObjectManager.Me.RunicPowerPercentage > 89 || ObjectManager.Me.HaveBuff(81340)))
        {
            DeathCoil.Launch();
            return;
        }
        else if (mySettings.UseHornofWinter && HornofWinter.KnownSpell && ObjectManager.Me.RunicPowerPercentage < 90 && HornofWinter.IsSpellUsable
                 && FrostFever.TargetHaveBuff && PlagueStrike.TargetHaveBuff)
        {
            HornofWinter.Launch();
            return;
        }
        else if (mySettings.UseArcaneTorrentForResource && ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else
        {
            if (mySettings.UseEmpowerRuneWeapon && EmpowerRuneWeapon.KnownSpell && EmpowerRuneWeapon.IsSpellUsable)
            {
                EmpowerRuneWeapon.Launch();
                return;
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: DeathknightUnholySettings

    [Serializable]
    public class DeathknightUnholySettings : Settings
    {
        public bool DoAvoidMelee = false;
        public int DoAvoidMeleeDistance = 0;
        public bool UseAlchFlask = true;
        public bool UseAntiMagicShell = true;
        public int UseAntiMagicShellAtPercentage = 100;
        public bool UseAntiMagicZone = true;
        public int UseAntiMagicZoneAtPercentage = 100;
        public bool UseArcaneTorrentForDecast = true;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public bool UseArcaneTorrentForResource = true;
        public bool UseArmyoftheDead = true;
        public bool UseAsphyxiate = true;
        public int UseAsphyxiateAtPercentage = 90;
        public bool UseBerserking = true;
        public bool UseBloodBoil = true;
        public bool UseBloodFury = true;
        public bool UseBloodPresence = true;
        public int UseBloodPresenceAtPercentage = 50;
        public bool UseBloodTap = true;
        public bool UseChainsofIce = false;
        public bool UseConversion = true;
        public int UseConversionAtPercentage = 45;
        public bool UseDarkTransformation = true;
        public bool UseDeathCoil = true;
        public bool UseDeathGrip = true;
        public bool UseDeathPact = true;
        public int UseDeathPactAtPercentage = 55;
        public bool UseDeathSiphon = true;
        public int UseDeathSiphonAtPercentage = 80;
        public bool UseDeathStrike = true;
        public int UseDeathStrikeAtPercentage = 80;
        public bool UseDeathandDecay = true;
        public bool UseDeathsAdvance = true;
        public bool UseEmpowerRuneWeapon = true;
        public bool UseEngGlove = true;
        public bool UseFesteringStrike = true;
        public bool UseFrostPresence = true;
        public bool UseGiftoftheNaaru = true;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public bool UseHornofWinter = true;
        public bool UseIceboundFortitude = true;
        public int UseIceboundFortitudeAtPercentage = 80;
        public bool UseIcyTouch = true;
        public bool UseLichborne = true;
        public int UseLichborneAtPercentage = 45;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMindFreeze = true;
        public int UseMindFreezeAtPercentage = 100;
        public bool UseOutbreak = true;
        public bool UsePathofFrost = true;
        public bool UsePestilence = true;
        public bool UsePlagueLeech = true;
        public bool UsePlagueStrike = true;
        public bool UseRaiseDead = true;
        public bool UseRemorselessWinter = true;
        public int UseRemorselessWinterAtPercentage = 70;
        public bool UseScourgeStrike = true;
        public bool UseSoulReaper = true;
        public bool UseStoneform = true;
        public int UseStoneformAtPercentage = 80;
        public bool UseStrangulate = true;
        public int UseStrangulateAtPercentage = 100;
        public bool UseSummonGargoyle = true;
        public bool UseTrinketOne = true;
        public bool UseTrinketTwo = true;
        public bool UseUnholyBlight = true;
        public bool UseUnholyFrenzy = true;
        public bool UseUnholyPresence = true;
        public bool UseWarStomp = true;
        public int UseWarStompAtPercentage = 80;

        public DeathknightUnholySettings()
        {
            ConfigWinForm(new Point(500, 400), "Deathknight Unholy Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials", "AtPercentage");
            /* Deathknight Presence & Buffs */
            AddControlInWinForm("Use Frost Presence", "UseFrostPresence", "Deathknight Presence & Buffs");
            AddControlInWinForm("Use Blood Presence", "UseBloodPresence", "Deathknight Presence & Buffs", "AtPercentage");
            AddControlInWinForm("Use Horn of Winter", "UseHornofWinter", "Deathknight Presence & Buffs");
            AddControlInWinForm("Use Path of Frost", "UsePathofFrost", "Deathknight Presence & Buffs");
            AddControlInWinForm("Use Unholy Presence", "UseUnholyPresence", "Deathknight Presence & Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Blood Boil", "UseBloodBoil", "Offensive Spell");
            AddControlInWinForm("Use Dark Transformation", "UseDarkTransformation", "Offensive Spell");
            AddControlInWinForm("Use Death Coil", "UseDeathCoil", "Offensive Spell");
            AddControlInWinForm("Use Death and Decay", "UseDeathandDecay", "Offensive Spell");
            AddControlInWinForm("Use Festering Strike", "UseFesteringStrike", "Offensive Spell");
            AddControlInWinForm("Use Icy Touch", "UseIcyTouch", "Offensive Spell");
            AddControlInWinForm("Use Plague Leech", "UsePlagueLeech", "Offensive Spell");
            AddControlInWinForm("Use Plague Strike", "UsePlagueStrike", "Offensive Spell");
            AddControlInWinForm("Use Soul Reaper", "UseSoulReaper", "Offensive Spell");
            AddControlInWinForm("Use Scourge Strike", "UseScourgeStrike", "Offensive Spell");
            AddControlInWinForm("Use Unholy Blight", "UseUnholyBlight", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Blood Tap", "UseBloodTap", "Offensive Cooldown");
            AddControlInWinForm("Use Death Grip", "UseDeathGrip", "Offensive Cooldown");
            AddControlInWinForm("Use Empower Rune Weapon", "UseEmpowerRuneWeapon", "Offensive Cooldown");
            AddControlInWinForm("Use Outbreak", "UseOutbreak", "Offensive Cooldown");
            AddControlInWinForm("Use Pestilence", "UsePestilence", "Offensive Cooldown");
            AddControlInWinForm("Use Raise Dead", "UseRaiseDead", "Offensive Cooldown");
            AddControlInWinForm("Use Summon Gargoyle", "UseSummonGargoyle", "Offensive Cooldown");
            AddControlInWinForm("Use Unholy Frenzy", "UseUnholyFrenzy", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Anti-Magic Shell", "UseAntiMagicShell", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Anti-Magic Zone", "UseAntiMagicZone", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Army of the Dead", "UseArmyoftheDead", "Defensive Cooldown");
            AddControlInWinForm("Use Asphyxiate", "UseAsphyxiate", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Chains of Ice", "UseChainsofIce", "Defensive Cooldown");
            AddControlInWinForm("Use Death's Advance", "UseDeathsAdvance", "Defensive Cooldown");
            AddControlInWinForm("Use Icebound Fortitude", "UseIceboundFortitude", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Mind Freeze", "UseMindFreeze", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Remorseless Winter", "UseRemorseless Winter", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Strangulate", "UseStrangulate", "Defensive Cooldown", "AtPercentage");
            /* Healing Spell */
            AddControlInWinForm("Use Conversion", "UseConversion", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Death Pact", "UseDeathPact", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Death Siphon", "UseDeathSiphon", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Death Strike", "UseDeathStrike", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Lichborne", "UseLichborne", "Healing Spell", "AtPercentage");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
            AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
            AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
        }

        public static DeathknightUnholySettings CurrentSetting { get; set; }

        public static DeathknightUnholySettings GetSettings()
        {
            string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Deathknight_Unholy.xml";
            if (File.Exists(currentSettingsFile))
            {
                return
                    CurrentSetting = Load<DeathknightUnholySettings>(currentSettingsFile);
            }
            else
            {
                return new DeathknightUnholySettings();
            }
        }
    }

    #endregion
}

public class DeathknightFrost
{
    private readonly DeathknightFrostSettings mySettings = DeathknightFrostSettings.GetSettings();

    #region General Timers & Variables

    private Timer AlchFlaskTimer = new Timer(0);
    private Timer EngineeringTimer = new Timer(0);
    public int LC = 0;
    private Timer OnCD = new Timer(0);
    private Timer TrinketOneTimer = new Timer(0);
    private Timer TrinketTwoTimer = new Timer(0);

    #endregion

    #region Professions & Racials

    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell BloodFury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell WarStomp = new Spell("War Stomp");

    #endregion

    #region Deathknight Presence & Buffs

    private readonly Spell BloodPlague = new Spell("Blood Plague");
    private readonly Spell BloodPresence = new Spell("Blood Presence");
    private readonly Spell FreezingFog = new Spell(59052);
    private readonly Spell FrostFever = new Spell("Frost Fever");
    private readonly Spell FrostPresence = new Spell("Frost Presence");
    private readonly Spell HornofWinter = new Spell("Horn of Winter");
    private readonly Spell PathofFrost = new Spell("Path of Frost");
    private readonly Spell RoilingBlood = new Spell("Roiling Blood");
    private readonly Spell UnholyPresence = new Spell("Unholy Presence");
    private Timer BloodPlagueTimer = new Timer(0);
    private Timer FrostFeverTimer = new Timer(0);
    private Timer PathofFrostTimer = new Timer(0);
    private Timer PathofFrostBuffTimer = new Timer(0);

    #endregion

    #region Offensive Spell

    private readonly Spell BloodBoil = new Spell("Blood Boil");
    private readonly Spell BloodStrike = new Spell("Blood Strike");
    private readonly Spell DeathCoil = new Spell("Death Coil");
    private readonly Spell DeathandDecay = new Spell("Death and Decay");
    private readonly Spell FrostStrike = new Spell("Frost Strike");
    private readonly Spell HowlingBlast = new Spell("Howling Blast");
    private readonly Spell IcyTouch = new Spell("Icy Touch");
    private readonly Spell Obliterate = new Spell("Obliterate");
    private readonly Spell PlagueLeech = new Spell("Plague Leech");
    private readonly Spell PlagueStrike = new Spell("Plague Strike");
    private readonly Spell SoulReaper = new Spell("Soul Reaper");
    private readonly Spell UnholyBlight = new Spell("Unholy Blight");

    #endregion

    #region Offensive Cooldown

    private readonly Spell BloodTap = new Spell("Blood Tap");
    private readonly Spell DeathGrip = new Spell("Death Grip");
    private readonly Spell EmpowerRuneWeapon = new Spell("Empower Rune Weapon");
    private readonly Spell Outbreak = new Spell("Outbreak");
    private readonly Spell Pestilence = new Spell("Pestilence");
    private readonly Spell PillarofFrost = new Spell("Pillar of Frost");
    private readonly Spell RaiseDead = new Spell("Raise Dead");
    private Timer PestilenceTimer = new Timer(0);

    #endregion

    #region Defensive Cooldown

    private readonly Spell AntiMagicShell = new Spell("Anti-Magic Shell");
    private readonly Spell AntiMagicZone = new Spell("Anti-Magic Zone");
    private readonly Spell ArmyoftheDead = new Spell("Army of the Dead");
    private readonly Spell Asphyxiate = new Spell("Asphyxiate");
    private readonly Spell ChainsofIce = new Spell("Chains of Ice");
    private readonly Spell DeathsAdvance = new Spell("Death's Advance");
    private readonly Spell IceboundFortitude = new Spell("Icebound Fortitude");
    private readonly Spell MindFreeze = new Spell("Mind Freeze");
    private readonly Spell RemorselessWinter = new Spell("Remorseless Winter");
    private readonly Spell Strangulate = new Spell("Strangulate");

    #endregion

    #region Healing Spell

    private readonly Spell Conversion = new Spell("Conversion");
    private readonly Spell DeathPact = new Spell("Death Pact");
    private readonly Spell DeathSiphon = new Spell("Death Siphon");
    private readonly Spell DeathStrike = new Spell("Death Strike");
    private readonly Spell Lichborne = new Spell("Lichborne");

    #endregion

    public DeathknightFrost()
    {
        Main.range = 5.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    BuffPath();
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (DeathGrip.IsHostileDistanceGood || IcyTouch.IsHostileDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (mySettings.UseLowCombat && ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84)
                            {
                                LC = 1;
                                if (ObjectManager.Target.GetDistance < 30)
                                    LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                if (ObjectManager.Target.GetDistance < 30)
                                    Combat();
                            }
                        }

                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(250);
        }
    }

    private void BuffPath()
    {
        if (mySettings.UsePathofFrost && PathofFrost.KnownSpell && !Fight.InFight && PathofFrost.IsSpellUsable
            && (!PathofFrost.HaveBuff || PathofFrostTimer.IsReady) && PathofFrostBuffTimer.IsReady)
        {
            PathofFrost.Launch();
            PathofFrostBuffTimer = new Timer(1000*10);
            PathofFrostTimer = new Timer(1000*60*9.5);
        }
    }

    private void Pull()
    {
        if (mySettings.UseDeathGrip && DeathGrip.KnownSpell && DeathGrip.IsHostileDistanceGood && DeathGrip.IsSpellUsable
            && ObjectManager.Target.GetDistance > Main.range)
        {
            DeathGrip.Launch();
            MovementManager.StopMove();
        }
        else
        {
            if (mySettings.UseIcyTouch && IcyTouch.KnownSpell && IcyTouch.IsHostileDistanceGood && IcyTouch.IsSpellUsable)
            {
                IcyTouch.Launch();
                FrostFeverTimer = new Timer(1000*27);
            }
        }
    }

    private void LowCombat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        if (OnCD.IsReady)
            DefenseCycle();
        Heal();

        if (mySettings.UseHowlingBlast && HowlingBlast.KnownSpell && HowlingBlast.IsHostileDistanceGood && HowlingBlast.IsSpellUsable)
        {
            HowlingBlast.Launch();
            return;
        }
        // Blizzard API Calls for Frost Strike using Blood Strike Function
        else if (mySettings.UseFrostStrike && BloodStrike.KnownSpell && BloodStrike.IsHostileDistanceGood && BloodStrike.IsSpellUsable)
        {
            BloodStrike.Launch();
            return;
        }
        else if (mySettings.UseDeathCoil && DeathCoil.KnownSpell && ObjectManager.Target.GetDistance > Main.range && DeathCoil.IsSpellUsable)
        {
            DeathCoil.Launch();
            return;
        }
        else if (mySettings.UsePlagueStrike && PlagueStrike.KnownSpell && PlagueStrike.IsHostileDistanceGood && PlagueStrike.IsSpellUsable)
        {
            PlagueStrike.Launch();
            return;
        }
        else
        {
            if (mySettings.UseBloodBoil && BloodBoil.KnownSpell && BloodBoil.IsHostileDistanceGood && BloodBoil.IsSpellUsable)
            {
                BloodBoil.Launch();
                return;
            }
        }
    }

    private void Combat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        DPSCycle();
        if (OnCD.IsReady && (ObjectManager.Me.HealthPercent <= mySettings.UseIceboundFortitudeAtPercentage || ObjectManager.Me.HealthPercent <= mySettings.UseAsphyxiateAtPercentage 
            || ObjectManager.Me.HealthPercent <= mySettings.UseStoneformAtPercentage || ObjectManager.Me.HealthPercent <= mySettings.UseWarStompAtPercentage 
            || ObjectManager.Me.HealthPercent <= mySettings.UseRemorselessWinterAtPercentage))
            DefenseCycle();
        if (ObjectManager.Me.HealthPercent <= mySettings.UseGiftoftheNaaruAtPercentage || ObjectManager.Me.HealthPercent <= mySettings.UseDeathPactAtPercentage 
            || ObjectManager.Me.HealthPercent <= mySettings.UseLichborneAtPercentage || ObjectManager.Me.HealthPercent <= mySettings.UseConversionAtPercentage 
            || ObjectManager.Me.HealthPercent <= mySettings.UseDeathSiphonAtPercentage)
            Heal();
        Decast();
        DPSBurst();
        DPSCycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (mySettings.UseFrostPresence && LC != 1 && FrostPresence.KnownSpell && !FrostPresence.HaveBuff && FrostPresence.IsSpellUsable
            && ObjectManager.Me.HealthPercent > mySettings.UseBloodPresenceAtPercentage + 10)
            FrostPresence.Launch();
        else if (mySettings.UseUnholyPresence && !mySettings.UseFrostPresence && mySettings.UseLowCombat && UnholyPresence.KnownSpell && UnholyPresence.IsSpellUsable
            && !UnholyPresence.HaveBuff && LC == 1 && ObjectManager.Me.HealthPercent > mySettings.UseBloodPresenceAtPercentage + 10)
            UnholyPresence.Launch();
        else
        {
            if (mySettings.UseBloodPresence && BloodPresence.KnownSpell && !BloodPresence.HaveBuff && BloodPresence.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= mySettings.UseBloodPresenceAtPercentage)
                BloodPresence.Launch();
        }

        if (mySettings.UseHornofWinter && HornofWinter.KnownSpell && !HornofWinter.HaveBuff && HornofWinter.IsSpellUsable)
            HornofWinter.Launch();

        if (mySettings.UseDeathsAdvance && DeathsAdvance.KnownSpell && ObjectManager.GetNumberAttackPlayer() == 0 && DeathsAdvance.IsSpellUsable
                 && ObjectManager.Me.GetMove)
            DeathsAdvance.Launch();

        if (mySettings.UseAlchFlask && AlchFlaskTimer.IsReady && ItemsManager.GetItemCountByIdLUA(75525) == 1)
        {
            Logging.WriteFight("Use Alchi Flask");
            Lua.RunMacroText("/use item:75525");
            AlchFlaskTimer = new Timer(1000*60*60*2);
            return;
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            var maxTimeTimer = new Timer(1000*2);
            MovementsAction.MoveBackward(true);
            while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                Thread.Sleep(300);
            MovementsAction.MoveBackward(false);
            if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
            {
                MovementsAction.MoveForward(true);
                Thread.Sleep(1000);
                MovementsAction.MoveForward(false);
                MovementManager.Face(ObjectManager.Target.Position);
            }
        }
    }

    private void DefenseCycle()
    {
        if (mySettings.UseIceboundFortitude && IceboundFortitude.KnownSpell && IceboundFortitude.IsSpellUsable
            && ObjectManager.Me.HealthPercent <= mySettings.UseIceboundFortitudeAtPercentage)
        {
            IceboundFortitude.Launch();
            OnCD = new Timer(1000*12);
            return;
        }
        else if (mySettings.UseAsphyxiate && Strangulate.KnownSpell && Strangulate.IsHostileDistanceGood && Strangulate.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseAsphyxiateAtPercentage)
        {
            Strangulate.Launch();
            OnCD = new Timer(1000*5);
            return;
        }
        else if (mySettings.UseStoneform && Stoneform.KnownSpell && Stoneform.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseStoneformAtPercentage)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (mySettings.UseWarStomp && WarStomp.KnownSpell && ObjectManager.Target.GetDistance < 8 && WarStomp.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseWarStompAtPercentage)
        {
            WarStomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else
        {
            if (mySettings.UseRemorselessWinter && RemorselessWinter.KnownSpell && ObjectManager.Target.GetDistance < 8 && RemorselessWinter.IsSpellUsable
                && (ObjectManager.Me.HealthPercent <= mySettings.UseRemorselessWinterAtPercentage || ObjectManager.GetNumberAttackPlayer() > 1))
            {
                RemorselessWinter.Launch();
                OnCD = new Timer(1000*8);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (mySettings.UseGiftoftheNaaru && GiftoftheNaaru.KnownSpell && GiftoftheNaaru.IsSpellUsable
            && ObjectManager.Me.HealthPercent <= mySettings.UseGiftoftheNaaruAtPercentage)
        {
            GiftoftheNaaru.Launch();
            return;
        }
        else if (mySettings.UseDeathPact && DeathPact.KnownSpell && RaiseDead.KnownSpell && RaiseDead.IsSpellUsable && DeathPact.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseDeathPactAtPercentage)
        {
            for (int i = 0; i < 3; i++)
            {
                RaiseDead.Launch();
                DeathPact.Launch();
                if (!DeathPact.IsSpellUsable)
                    break;
            }
        }
        else if (mySettings.UseLichborne && Lichborne.KnownSpell && DeathCoil.KnownSpell && DeathCoil.IsSpellUsable && Lichborne.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseLichborneAtPercentage)
        {
            if (Lichborne.IsSpellUsable)
            {
                Lichborne.Launch();
                return;
            }
        }
        else if (mySettings.UseConversion && Conversion.KnownSpell && ObjectManager.Me.RunicPower > 10 && Conversion.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseConversionAtPercentage)
        {
            Conversion.Launch();
            while (ObjectManager.Me.RunicPower > 0 || ObjectManager.Me.HealthPercent < 100)
                Thread.Sleep(200);
            return;
        }
        else
        {
            if (mySettings.UseDeathSiphon && DeathSiphon.KnownSpell && DeathSiphon.IsHostileDistanceGood && DeathSiphon.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseDeathSiphonAtPercentage)
            {
                DeathSiphon.Launch();
                return;
            }
        }
    }

    private void Decast()
    {
        if (mySettings.UseMindFreeze && MindFreeze.KnownSpell && MindFreeze.IsHostileDistanceGood && MindFreeze.IsSpellUsable
            && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
            && ObjectManager.Me.HealthPercent <= mySettings.UseMindFreezeAtPercentage)
        {
            MindFreeze.Launch();
            return;
        }
        else if (mySettings.UseArcaneTorrentForDecast && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8 && ArcaneTorrent.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseArcaneTorrentForDecastAtPercentage
                 && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else if (mySettings.UseAntiMagicShell && AntiMagicShell.KnownSpell && AntiMagicShell.IsSpellUsable
                 && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                 && ObjectManager.Me.HealthPercent <= mySettings.UseAntiMagicShellAtPercentage)
        {
            AntiMagicShell.Launch();
            return;
        }
        else if (Strangulate.KnownSpell && Strangulate.IsHostileDistanceGood && Strangulate.IsSpellUsable
                 && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                 && (mySettings.UseStrangulate && ObjectManager.Me.HealthPercent <= mySettings.UseStrangulateAtPercentage
                  || mySettings.UseAsphyxiate && ObjectManager.Me.HealthPercent <= mySettings.UseAsphyxiateAtPercentage))
        {
            Strangulate.Launch();
            return;
        }
        else
        {
            if (mySettings.UseAntiMagicZone && AntiMagicZone.KnownSpell && AntiMagicZone.IsSpellUsable
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && ObjectManager.Me.HealthPercent <= mySettings.UseAntiMagicZoneAtPercentage)
            {
                SpellManager.CastSpellByIDAndPosition(51052, ObjectManager.Me.Position);
                return;
            }
        }

        if (mySettings.UseChainsofIce && ChainsofIce.KnownSpell && ChainsofIce.IsHostileDistanceGood && ChainsofIce.IsSpellUsable
            && ObjectManager.Target.GetMove && !ChainsofIce.TargetHaveBuff)
        {
            ChainsofIce.Launch();
            return;
        }
    }

    private void DPSBurst()
    {
        if (mySettings.UseTrinketOne && TrinketOneTimer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketOneTimer = new Timer(1000*60*2);
        }
        else if (mySettings.UseTrinketTwo && TrinketTwoTimer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketTwoTimer = new Timer(1000*60*2);
        }

        if (mySettings.UseBerserking && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30 && Berserking.IsSpellUsable)
            Berserking.Launch();
        else if (mySettings.UseBloodFury && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 30 && BloodFury.IsSpellUsable)
            BloodFury.Launch();

        if (mySettings.UseLifeblood && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30 && Lifeblood.IsSpellUsable)
            Lifeblood.Launch();

        if (mySettings.UseEngGlove && EngineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            EngineeringTimer = new Timer(1000*60);
        }

        if (mySettings.UseBloodTap && BloodTap.KnownSpell && ObjectManager.Target.GetDistance < 30 && BloodTap.IsSpellUsable)
            BloodTap.Launch();

        if (mySettings.UsePillarofFrost && PillarofFrost.KnownSpell && ObjectManager.Target.GetDistance < 30 && PillarofFrost.IsSpellUsable)
            PillarofFrost.Launch();

        if (mySettings.UseRaiseDeadForDPS && RaiseDead.KnownSpell && ObjectManager.Target.GetDistance < 30 && RaiseDead.IsSpellUsable)
        {
            RaiseDead.Launch();
            return;
        }
    }

    private void DPSCycle()
    {
        if (DeathCoil.KnownSpell && Lichborne.HaveBuff && ObjectManager.Me.HealthPercent < 85 && DeathCoil.IsSpellUsable)
        {
            Lua.RunMacroText("/target Player");
            DeathCoil.Launch();
            return;
        }
        else if (mySettings.UsePlagueLeech && mySettings.UseOutbreak && PlagueLeech.KnownSpell && Outbreak.KnownSpell && PlagueLeech.IsHostileDistanceGood
                 && Outbreak.IsSpellUsable && PlagueLeech.IsSpellUsable && BloodPlagueTimer.IsReady && BloodPlague.TargetHaveBuff && FrostFeverTimer.IsReady && FrostFever.TargetHaveBuff)
        {
            PlagueLeech.Launch();
            Thread.Sleep(400);
            if (Outbreak.IsHostileDistanceGood && Outbreak.IsSpellUsable)
            {
                Outbreak.Launch();
                BloodPlagueTimer = new Timer(1000*27);
                FrostFeverTimer = new Timer(1000*27);
            }
        }
        else if (mySettings.UseUnholyBlight && UnholyBlight.KnownSpell && ObjectManager.Target.GetDistance < 9 && UnholyBlight.IsSpellUsable
                 && (!BloodPlague.TargetHaveBuff || BloodPlagueTimer.IsReady || !FrostFever.TargetHaveBuff || FrostFeverTimer.IsReady))
        {
            UnholyBlight.Launch();
            BloodPlagueTimer = new Timer(1000*27);
            FrostFeverTimer = new Timer(1000*27);
        }
        else if (mySettings.UseOutbreak && Outbreak.KnownSpell && Outbreak.IsHostileDistanceGood && Outbreak.IsSpellUsable
                 && (BloodPlagueTimer.IsReady || FrostFeverTimer.IsReady || !BloodPlague.TargetHaveBuff || !FrostFever.TargetHaveBuff))
        {
            Outbreak.Launch();
            BloodPlagueTimer = new Timer(1000*27);
            FrostFeverTimer = new Timer(1000*27);
        }
        else if (mySettings.UseBloodBoil && RoilingBlood.KnownSpell && BloodBoil.KnownSpell && ObjectManager.Target.GetDistance < 9 && BloodBoil.IsSpellUsable
                 && ((BloodPlagueTimer.IsReady && BloodPlague.TargetHaveBuff) || (FrostFeverTimer.IsReady && FrostFever.TargetHaveBuff)))
        {
            BloodBoil.Launch();
            BloodPlagueTimer = new Timer(1000*27);
            FrostFeverTimer = new Timer(1000*27);
        }

        if (mySettings.UsePlagueStrike && PlagueStrike.KnownSpell && PlagueStrike.IsHostileDistanceGood && PlagueStrike.IsSpellUsable
                 && !Outbreak.IsSpellUsable && !UnholyBlight.IsSpellUsable && (BloodPlagueTimer.IsReady || !BloodPlague.TargetHaveBuff))
        {
            PlagueStrike.Launch();
            BloodPlagueTimer = new Timer(1000*27);
        }

        if (mySettings.UseHowlingBlast && HowlingBlast.KnownSpell && HowlingBlast.IsHostileDistanceGood && HowlingBlast.IsSpellUsable
            && !Outbreak.IsSpellUsable && !UnholyBlight.IsSpellUsable && (FrostFeverTimer.IsReady || !FrostFever.TargetHaveBuff))
        {
            HowlingBlast.Launch();
            FrostFeverTimer = new Timer(1000*27);
        }
        else if (mySettings.UseIcyTouch && !mySettings.UseHowlingBlast && IcyTouch.KnownSpell && IcyTouch.IsHostileDistanceGood && IcyTouch.IsSpellUsable
                 && !Outbreak.IsSpellUsable && !UnholyBlight.IsSpellUsable && (FrostFeverTimer.IsReady || !FrostFever.TargetHaveBuff))
        {
            IcyTouch.Launch();
            FrostFeverTimer = new Timer(1000*27);
        }

        if (ObjectManager.GetNumberAttackPlayer() > 2)
        {
            if (mySettings.UsePestilence && (!RoilingBlood.KnownSpell || !mySettings.UseBloodBoil) && Pestilence.KnownSpell && Pestilence.IsHostileDistanceGood && Pestilence.IsSpellUsable
                 && FrostFever.TargetHaveBuff && BloodPlague.TargetHaveBuff && ObjectManager.GetNumberAttackPlayer() > 2)
            {
                Pestilence.Launch();
                PestilenceTimer = new Timer(1000 * 30);
            }

            if (mySettings.UseDeathandDecay && DeathandDecay.KnownSpell && DeathandDecay.IsHostileDistanceGood && DeathandDecay.IsSpellUsable
                 && ObjectManager.GetNumberAttackPlayer() > 2)
            {
                SpellManager.CastSpellByIDAndPosition(43265, ObjectManager.Target.Position);
                return;
            }
            else if (mySettings.UseArmyoftheDead && ArmyoftheDead.KnownSpell && ObjectManager.GetNumberAttackPlayer() > 3 && ArmyoftheDead.IsSpellUsable)
            {
                ArmyoftheDead.Launch();
                Thread.Sleep(4000);
                return;
            }
        }

        if (mySettings.UseHowlingBlast && FreezingFog.HaveBuff && HowlingBlast.KnownSpell && HowlingBlast.IsHostileDistanceGood && HowlingBlast.IsSpellUsable
            && ObjectManager.Me.RunicPowerPercentage < 90)
        {
            HowlingBlast.Launch();
            FrostFeverTimer = new Timer(1000*27);
            return;
        }
        // Blizzard API Calls for Frost Strike using Blood Strike Function
        else if (mySettings.UseFrostStrike && BloodStrike.KnownSpell && BloodStrike.IsHostileDistanceGood && BloodStrike.IsSpellUsable
                 && ObjectManager.Me.RunicPowerPercentage >= 80)
        {
            BloodStrike.Launch();
            return;
        }
        else
        {
            if (mySettings.UseSoulReaper && SoulReaper.KnownSpell && SoulReaper.IsHostileDistanceGood && SoulReaper.IsSpellUsable
                && ObjectManager.Target.HealthPercent < 35 && (ObjectManager.Me.HealthPercent > mySettings.UseDeathStrikeAtPercentage || !mySettings.UseDeathStrike))
            {
                SoulReaper.Launch();
                return;
            }
        }

        if (mySettings.UseDuelWield)
        {
            if (mySettings.UseFrostStrike && BloodStrike.KnownSpell && BloodStrike.IsHostileDistanceGood && BloodStrike.IsSpellUsable
                && ObjectManager.Me.HaveBuff(51124))
            {
                if ((mySettings.UseLichborne && ObjectManager.Me.HealthPercent <= mySettings.UseLichborneAtPercentage && Lichborne.KnownSpell)
                    || (mySettings.UseConversion && ObjectManager.Me.HealthPercent <= mySettings.UseConversionAtPercentage && Conversion.KnownSpell))
                    return;
                else
                {
                    BloodStrike.Launch();
                    return;
                }
            }
            else
            {
                if (mySettings.UseObliterate && Obliterate.KnownSpell && Obliterate.IsHostileDistanceGood && Obliterate.IsSpellUsable
                    && ObjectManager.Me.HaveBuff(51124))
                {
                    if (mySettings.UseDeathStrike && DeathStrike.KnownSpell && DeathStrike.IsHostileDistanceGood && DeathStrike.IsSpellUsable
                        && ObjectManager.Me.HealthPercent <= mySettings.UseDeathStrikeAtPercentage)
                    {
                        DeathStrike.Launch();
                        return;
                    }
                    Obliterate.Launch();
                    return;
                }
            }
        }
        else
        {
            if (mySettings.UseTwoHander)
            {
                if (mySettings.UseObliterate && Obliterate.KnownSpell && Obliterate.IsHostileDistanceGood && Obliterate.IsSpellUsable
                    && ObjectManager.Me.HaveBuff(51124))
                {
                    if (mySettings.UseDeathStrike && DeathStrike.KnownSpell && DeathStrike.IsHostileDistanceGood && DeathStrike.IsSpellUsable
                        && ObjectManager.Me.HealthPercent <= mySettings.UseDeathStrikeAtPercentage)
                    {
                        DeathStrike.Launch();
                        return;
                    }
                    Obliterate.Launch();
                    return;
                }

                else
                {
                    if (mySettings.UseFrostStrike && BloodStrike.KnownSpell && BloodStrike.IsHostileDistanceGood && BloodStrike.IsSpellUsable
                        && ObjectManager.Me.HaveBuff(51124))
                    {
                        if ((mySettings.UseLichborne && ObjectManager.Me.HealthPercent <= mySettings.UseLichborneAtPercentage && Lichborne.KnownSpell)
                            || (mySettings.UseConversion && ObjectManager.Me.HealthPercent <= mySettings.UseConversionAtPercentage && Conversion.KnownSpell))
                            return;
                        else
                        {
                            BloodStrike.Launch();
                            return;
                        }
                    }
                }
            }
        }

        if (mySettings.UseObliterate && Obliterate.KnownSpell && Obliterate.IsHostileDistanceGood && Obliterate.IsSpellUsable)
        {
            if (mySettings.UseDeathStrike && DeathStrike.KnownSpell && DeathStrike.IsHostileDistanceGood && DeathStrike.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= mySettings.UseDeathStrikeAtPercentage)
            {
                DeathStrike.Launch();
                return;
            }
            Obliterate.Launch();
            return;
        }
        else if (mySettings.UseFrostStrike && BloodStrike.KnownSpell && BloodStrike.IsHostileDistanceGood && BloodStrike.IsSpellUsable)
        {
            if ((mySettings.UseLichborne && ObjectManager.Me.HealthPercent <= mySettings.UseLichborneAtPercentage && Lichborne.KnownSpell)
                || (mySettings.UseConversion && ObjectManager.Me.HealthPercent <= mySettings.UseConversionAtPercentage && Conversion.KnownSpell))
                return;
            else
            {
                BloodStrike.Launch();
                return;
            }
        }
        else if (mySettings.UseHornofWinter && HornofWinter.KnownSpell && ObjectManager.Me.RunicPowerPercentage < 90 && HornofWinter.IsSpellUsable
            && FrostFever.TargetHaveBuff && PlagueStrike.TargetHaveBuff)
        {
            HornofWinter.Launch();
            return;
        }
        else if (mySettings.UseArcaneTorrentForResource && ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else if (mySettings.UseEmpowerRuneWeapon && EmpowerRuneWeapon.KnownSpell && EmpowerRuneWeapon.IsSpellUsable)
        {
            EmpowerRuneWeapon.Launch();
            return;
        }
        else
        {
            if (mySettings.UseHowlingBlast && mySettings.UseDuelWield && HowlingBlast.KnownSpell && HowlingBlast.IsHostileDistanceGood && HowlingBlast.IsSpellUsable
                && !FrostStrike.IsSpellUsable && !Obliterate.IsSpellUsable && ObjectManager.Me.RunicPowerPercentage < 90)
            {
                HowlingBlast.Launch();
                FrostFeverTimer = new Timer(1000*27);
                return;
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: DeathknightFrostSettings

    [Serializable]
    public class DeathknightFrostSettings : Settings
    {
        public bool DoAvoidMelee = false;
        public int DoAvoidMeleeDistance = 0;
        public bool UseAlchFlask = true;
        public bool UseAntiMagicShell = true;
        public int UseAntiMagicShellAtPercentage = 95;
        public bool UseAntiMagicZone = true;
        public int UseAntiMagicZoneAtPercentage = 95;
        public bool UseArcaneTorrentForDecast = true;
        public int UseArcaneTorrentForDecastAtPercentage = 95;
        public bool UseArcaneTorrentForResource = true;
        public bool UseArmyoftheDead = true;
        public bool UseAsphyxiate = true;
        public int UseAsphyxiateAtPercentage = 90;
        public bool UseBerserking = true;
        public bool UseBloodBoil = true;
        public bool UseBloodFury = true;
        public bool UseBloodPresence = true;
        public int UseBloodPresenceAtPercentage = 50;
        public bool UseBloodTap = true;
        public bool UseChainsofIce = false;
        public bool UseConversion = true;
        public int UseConversionAtPercentage = 45;
        public bool UseDeathCoil = true;
        public bool UseDeathGrip = true;
        public bool UseDeathPact = true;
        public int UseDeathPactAtPercentage = 55;
        public bool UseDeathSiphon = true;
        public int UseDeathSiphonAtPercentage = 80;
        public bool UseDeathStrike = true;
        public int UseDeathStrikeAtPercentage = 80;
        public bool UseDeathandDecay = true;
        public bool UseDeathsAdvance = true;
        public bool UseDuelWield = false;
        public bool UseEmpowerRuneWeapon = true;
        public bool UseEngGlove = true;
        public bool UseFrostPresence = true;
        public bool UseFrostStrike = true;
        public bool UseGiftoftheNaaru = true;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public bool UseHornofWinter = true;
        public bool UseHowlingBlast = true;
        public bool UseIceboundFortitude = true;
        public int UseIceboundFortitudeAtPercentage = 80;
        public bool UseIcyTouch = true;
        public bool UseLichborne = true;
        public int UseLichborneAtPercentage = 45;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMindFreeze = true;
        public int UseMindFreezeAtPercentage = 100;
        public bool UseObliterate = true;
        public bool UseOutbreak = true;
        public bool UsePathofFrost = true;
        public bool UsePestilence = true;
        public bool UsePillarofFrost = true;
        public bool UsePlagueLeech = true;
        public bool UsePlagueStrike = true;
        public bool UseRaiseDeadForDPS = true;
        public bool UseRemorselessWinter = true;
        public int UseRemorselessWinterAtPercentage = 70;
        public bool UseSoulReaper = true;
        public bool UseStoneform = true;
        public int UseStoneformAtPercentage = 80;
        public bool UseStrangulate = true;
        public int UseStrangulateAtPercentage = 100;
        public bool UseTrinketOne = true;
        public bool UseTrinketTwo = true;
        public bool UseTwoHander = true;
        public bool UseUnholyBlight = true;
        public bool UseUnholyPresence = true;
        public bool UseWarStomp = true;
        public int UseWarStompAtPercentage = 80;

        public DeathknightFrostSettings()
        {
            ConfigWinForm(new Point(500, 400), "Deathknight Frost Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials", "AtPercentage");
            /* Deathknight Presence & Buffs */
            AddControlInWinForm("Use Frost Presence", "UseFrostPresence", "Deathknight Presence & Buffs");
            AddControlInWinForm("Use Blood Presence", "UseBloodPresence", "Deathknight Presence & Buffs", "AtPercentage");
            AddControlInWinForm("Use Horn of Winter", "UseHornofWinter", "Deathknight Presence & Buffs");
            AddControlInWinForm("Use Path of Frost", "UsePathofFrost", "Deathknight Presence & Buffs");
            AddControlInWinForm("Use Unholy Presence", "UseUnholyPresence", "Deathknight Presence & Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Blood Boil", "UseBloodBoil", "Offensive Spell");
            AddControlInWinForm("Use Dark Transformation", "UseDarkTransformation", "Offensive Spell");
            AddControlInWinForm("Use Death Coil", "UseDeathCoil", "Offensive Spell");
            AddControlInWinForm("Use Death and Decay", "UseDeathandDecay", "Offensive Spell");
            AddControlInWinForm("Use Frost Strike", "UseFrostStrike", "Offensive Spell");
            AddControlInWinForm("Use Howling Blast", "UseHowlingBlast", "Offensive Spell");
            AddControlInWinForm("Use Icy Touch", "UseIcyTouch", "Offensive Spell");
            AddControlInWinForm("Use Plague Leech", "UsePlagueLeech", "Offensive Spell");
            AddControlInWinForm("Use Plague Strike", "UsePlagueStrike", "Offensive Spell");
            AddControlInWinForm("Use Obliterate", "UseObliterate", "Offensive Spell");
            AddControlInWinForm("Use Soul Reaper", "UseSoulReaper", "Offensive Spell");
            AddControlInWinForm("Use Unholy Blight", "UseUnholyBlight", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Blood Tap", "UseBloodTap", "Offensive Cooldown");
            AddControlInWinForm("Use Death Grip", "UseDeathGrip", "Offensive Cooldown");
            AddControlInWinForm("Use Empower Rune Weapon", "UseEmpowerRuneWeapon", "Offensive Cooldown");
            AddControlInWinForm("Use Outbreak", "UseOutbreak", "Offensive Cooldown");
            AddControlInWinForm("Use Pestilence", "UsePestilence", "Offensive Cooldown");
            AddControlInWinForm("Use Pillar of Frost", "UsePillarofFrost", "Offensive Cooldown");
            AddControlInWinForm("Use Raise Dead For DPS", "UseRaiseDeadForDPS", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Anti-Magic Shell", "UseAntiMagicShell", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Anti-Magic Zone", "UseAntiMagicZone", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Army of the Dead", "UseArmyoftheDead", "Defensive Cooldown");
            AddControlInWinForm("Use Asphyxiate", "UseAsphyxiate", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Chains of Ice", "UseChainsofIce", "Defensive Cooldown");
            AddControlInWinForm("Use Death's Advance", "UseDeathsAdvance", "Defensive Cooldown");
            AddControlInWinForm("Use Icebound Fortitude", "UseIceboundFortitude", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Mind Freeze", "UseMindFreeze", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Remorseless Winter", "UseRemorseless Winter", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Strangulate", "UseStrangulate", "Defensive Cooldown", "AtPercentage");
            /* Healing Spell */
            AddControlInWinForm("Use Conversion", "UseConversion", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Death Pact", "UseDeathPact", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Death Siphon", "UseDeathSiphon", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Death Strike", "UseDeathStrike", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Lichborne", "UseLichborne", "Healing Spell", "AtPercentage");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
            AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Use Duel Wield", "UseDuelWield", "Game Settings");
            AddControlInWinForm("Use Two Hander", "UseTwoHander", "Game Settings");
            AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
            AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
        }

        public static DeathknightFrostSettings CurrentSetting { get; set; }

        public static DeathknightFrostSettings GetSettings()
        {
            string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Deathknight_Frost.xml";
            if (File.Exists(currentSettingsFile))
            {
                return
                    CurrentSetting = Load<DeathknightFrostSettings>(currentSettingsFile);
            }
            else
            {
                return new DeathknightFrostSettings();
            }
        }
    }

    #endregion
}

#endregion

#region Mage

public class MageArcane
{
    private readonly MageArcaneSettings mySettings = MageArcaneSettings.GetSettings();

    #region General Timers & Variables

    private Timer AlchFlaskTimer = new Timer(0);
    private Timer EngineeringTimer = new Timer(0);
    public int LC = 0;
    private Timer OnCD = new Timer(0);
    private Timer SteadyFocusTimer = new Timer(0);
    private Timer TrinketOneTimer = new Timer(0);
    private Timer TrinketTwoTimer = new Timer(0);

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell BloodFury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell WarStomp = new Spell("War Stomp");

    #endregion

    #region Mage Buffs

    private readonly Spell ArcaneBrilliance = new Spell("Arcane Brilliance");
    private readonly Spell BlazingSpeed = new Spell("Blazing Speed");
    private readonly Spell FrostArmor = new Spell("Frost Armor");
    private readonly Spell IceFloes = new Spell("Ice Floes");
    private readonly Spell MageArmor = new Spell("Mage Armor");
    private readonly Spell MoltenArmor = new Spell("Molten Armor");

    #endregion

    #region Offensive Spell

    private readonly Spell ArcaneBarrage = new Spell("Arcane Barrage");
    private readonly Spell ArcaneBlast = new Spell("Arcane Blast");
    private readonly Spell ArcaneExplosion = new Spell("Arcane Explosion");
    private readonly Spell ArcaneMissiles = new Spell("Arcane Missiles");
    private readonly Spell Flamestrike = new Spell("Flamestrike");
    private readonly Spell Scorch = new Spell("Scorch");
    private Timer FlamestrikeTimer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell AlterTime = new Spell("Alter Time");
    private Timer AlterTimeTimer = new Timer(0);
    private readonly Spell ArcanePower = new Spell("Arcane Power");
    private readonly Spell FrozenOrb = new Spell("Frozen Orb");
    private readonly Spell MageBomb = new Spell("Mage Bomb");
    private readonly Spell MirrorImage = new Spell("Mirror Image");
    private readonly Spell PresenceofMind = new Spell("Presence of Mind");
    private readonly Spell TimeWarp = new Spell("Time Warp");

    #endregion

    #region Defensive Cooldown

    private readonly Spell Blink = new Spell("Blink");
    private readonly Spell ColdSnap = new Spell("Cold Snap");
    private readonly Spell ConeofCold = new Spell("Cone of Cold");
    private readonly Spell Counterspell = new Spell("Counterspell");
    private readonly Spell DeepFreeze = new Spell("Deep Freeze");
    private readonly Spell FrostNova = new Spell("Frost Nova");
    private readonly Spell Frostjaw = new Spell("Frostjaw");
    private readonly Spell IceBarrier = new Spell("Ice Barrier");
    private readonly Spell IceBlock = new Spell("Ice Block");
    private readonly Spell IceWard = new Spell("Ice Ward");
    private readonly Spell IncantersWard = new Spell("Incanter's Ward");
    private readonly Spell Invisibility = new Spell("Invisibility");
    private readonly Spell RingofFrost = new Spell("Ring of Frost");
    private readonly Spell Slow = new Spell("Slow");
    private readonly Spell TemporalShield = new Spell("Temporal Shield");

    #endregion

    #region Healing Spell

    private readonly Spell ConjureManaGem = new Spell("Conjure Mana Gem");
    private Timer ConjureManaGemTimer = new Timer(0);
    private readonly Spell ConjureRefreshment = new Spell("Conjure Refreshment");
    private Timer ConjureRefreshmentTimer = new Timer(0);
    private readonly Spell Evocation = new Spell("Evocation");

    #endregion

    public MageArcane()
    {
        Main.range = 30.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (ArcaneBarrage.IsHostileDistanceGood || Scorch.IsHostileDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (mySettings.UseLowCombat && ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84)
                            {
                                LC = 1;
                                if (ObjectManager.Target.GetDistance < 41)
                                    LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                if (ObjectManager.Target.GetDistance < 41)
                                    Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(250);
        }
    }

    private void Pull()
    {
        if (mySettings.UseArcaneBarrage && ArcaneBarrage.KnownSpell && ArcaneBarrage.IsHostileDistanceGood && ArcaneBarrage.IsSpellUsable)
            ArcaneBarrage.Launch();
        else
        {
            if (mySettings.UseArcaneBlast && ArcaneBlast.KnownSpell && ArcaneBlast.IsHostileDistanceGood && ArcaneBlast.IsSpellUsable)
                ArcaneBlast.Launch();
        }
    }

    private void LowCombat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        if (OnCD.IsReady)
            DefenseCycle();
        Heal();

        if (mySettings.UseArcaneBarrage && ArcaneBarrage.KnownSpell && ArcaneBarrage.IsHostileDistanceGood && ArcaneBarrage.IsSpellUsable)
        {
            ArcaneBarrage.Launch();
            return;
        }
        else if (mySettings.UseArcaneMissiles && ArcaneMissiles.KnownSpell && ArcaneMissiles.IsHostileDistanceGood && ArcaneMissiles.IsSpellUsable)
        {
            ArcaneMissiles.Launch();
            return;
        }
        else if (mySettings.UseArcaneBlast && ArcaneBlast.KnownSpell && ArcaneBlast.IsHostileDistanceGood && ArcaneBlast.IsSpellUsable)
        {
            ArcaneBlast.Launch();
            return;
        }
        else
        {
            if (mySettings.UseArcaneExplosion && ArcaneExplosion.KnownSpell && ArcaneExplosion.IsHostileDistanceGood && ArcaneExplosion.IsSpellUsable)
            {
                ArcaneExplosion.Launch();
                return;
            }
        }
    }

    private void Combat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        DPSCycle();
        if (OnCD.IsReady)
            DefenseCycle();
        Heal();
        Decast();
        DPSBurst();
        DPSCycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (mySettings.UseIceBlock && IceBlock.KnownSpell && ObjectManager.Me.HaveBuff(87023) && !ObjectManager.Me.HaveBuff(41425))
        {
            if (mySettings.UseColdSnap && ColdSnap.KnownSpell && !IceBlock.IsSpellUsable && ColdSnap.IsSpellUsable)
            {
                ColdSnap.Launch();
                Thread.Sleep(400);
            }

            if (IceBlock.IsSpellUsable)
            {
                IceBlock.Launch();
                OnCD = new Timer(1000*10);
                return;
            }
        }

        if (mySettings.UseArcaneBrilliance && ArcaneBrilliance.KnownSpell && !ArcaneBrilliance.HaveBuff && ArcaneBrilliance.IsSpellUsable
            && !ObjectManager.Me.HaveBuff(61316))
            ArcaneBrilliance.Launch();

        if (mySettings.UseMageArmor && MageArmor.KnownSpell && !MageArmor.HaveBuff && MageArmor.IsSpellUsable)
        {
            MageArmor.Launch();
            return;
        }
        else if (mySettings.UseFrostArmor && !mySettings.UseMageArmor && FrostArmor.KnownSpell && !FrostArmor.HaveBuff && FrostArmor.IsSpellUsable)
        {
            FrostArmor.Launch();
            return;
        }
        else if (mySettings.UseMoltenArmor && !mySettings.UseFrostArmor && !mySettings.UseMageArmor
                 && MoltenArmor.KnownSpell && !MoltenArmor.HaveBuff && MoltenArmor.IsSpellUsable)
        {
            MoltenArmor.Launch();
            return;
        }

        if (mySettings.UseBlazingSpeed && BlazingSpeed.KnownSpell && ObjectManager.Me.GetMove && BlazingSpeed.IsSpellUsable)
        {
            BlazingSpeed.Launch();
            return;
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            var maxTimeTimer = new Timer(1000*2);
            MovementsAction.MoveBackward(true);
            while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                Thread.Sleep(300);
            MovementsAction.MoveBackward(false);
            if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
            {
                MovementsAction.MoveForward(true);
                Thread.Sleep(1000);
                MovementsAction.MoveForward(false);
                MovementManager.Face(ObjectManager.Target.Position);
            }
        }
    }

    private void DefenseCycle()
    {
        if (mySettings.UseIncantersWard && IncantersWard.KnownSpell && !IncantersWard.HaveBuff && IncantersWard.IsSpellUsable 
            && ObjectManager.Me.HealthPercent <= mySettings.UseIncantersWardAtPercentage && ObjectManager.GetNumberAttackPlayer() > 0)
        {
            IncantersWard.Launch();
            return;
        }

        if (mySettings.UseRingofFrost && RingofFrost.KnownSpell && ObjectManager.GetNumberAttackPlayer() > 2 && RingofFrost.IsSpellUsable
            && ObjectManager.Target.GetDistance < 10)
        {
            SpellManager.CastSpellByIDAndPosition(113724, ObjectManager.Target.Position);
            OnCD = new Timer(1000 * 10);
            return;
        }
        else if (mySettings.UseFrostNova && FrostNova.KnownSpell && ObjectManager.Target.GetDistance < 12
                 && ObjectManager.Me.HealthPercent <= mySettings.UseFrostNovaAtPercentage)
        {
            if (mySettings.UseColdSnap && ColdSnap.KnownSpell && !FrostNova.IsSpellUsable && ColdSnap.IsSpellUsable)
            {
                ColdSnap.Launch();
                Thread.Sleep(200);
            }

            if (FrostNova.IsSpellUsable)
            {
                FrostNova.Launch();
                OnCD = new Timer(1000 * 8);
                return;
            }
        }
        else if (mySettings.UseIceWard && IceWard.KnownSpell && ObjectManager.Target.GetDistance < 10 && IceWard.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseIceWardAtPercentage)
        {
            IceWard.Launch();
            OnCD = new Timer(1000 * 5);
            return;
        }
        else if (mySettings.UseConeofCold && ConeofCold.KnownSpell && ObjectManager.Target.GetDistance < 10 && ConeofCold.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseConeofColdAtPercentage)
        {
            ConeofCold.Launch();
            return;
        }
        else if (mySettings.UseBlink && Blink.KnownSpell && ObjectManager.Target.GetDistance < 11 && Blink.IsSpellUsable
                 && (FrostNova.TargetHaveBuff || ConeofCold.TargetHaveBuff || IceWard.TargetHaveBuff))
        {
            Blink.Launch();
            return;
        }
        else if (mySettings.UseDeepFreeze && DeepFreeze.KnownSpell && DeepFreeze.IsHostileDistanceGood && DeepFreeze.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseDeepFreezeAtPercentage)
        {
            DeepFreeze.Launch();
            OnCD = new Timer(1000*5);
            return;
        }
        else if (mySettings.UseIceBarrier && IceBarrier.KnownSpell && !IceBarrier.HaveBuff && IceBarrier.IsSpellUsable 
                 && ObjectManager.Me.HealthPercent <= mySettings.UseIceBarrierAtPercentage)
        {
            IceBarrier.Launch();
            return;
        }
        else if (mySettings.UseTemporalShield && TemporalShield.KnownSpell && !TemporalShield.HaveBuff && TemporalShield.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseTemporalShieldAtPercentage && ObjectManager.GetNumberAttackPlayer() > 0)
        {
            TemporalShield.Launch();
            OnCD = new Timer(1000*4);
            return;
        }
        else if (mySettings.UseWarStomp && WarStomp.KnownSpell && WarStomp.IsHostileDistanceGood && WarStomp.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseWarStompAtPercentage)
        {
            WarStomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else if (mySettings.UseStoneform && Stoneform.KnownSpell && Stoneform.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseStoneformAtPercentage)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else
        {
            if (mySettings.UseInvisibility && Invisibility.KnownSpell && Invisibility.IsSpellUsable 
                && ObjectManager.GetNumberAttackPlayer() > 3)
            {
                Invisibility.Launch();
                Thread.Sleep(5000);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (mySettings.UseArcaneTorrentForResource && ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable
            && ObjectManager.Me.ManaPercentage <= mySettings.UseArcaneTorrentForResourceAtPercentage)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else if (mySettings.UseGiftoftheNaaru && GiftoftheNaaru.KnownSpell && GiftoftheNaaru.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseGiftoftheNaaruAtPercentage)
        {
            GiftoftheNaaru.Launch();
            return;
        }
        else if (mySettings.UseColdSnap && ColdSnap.KnownSpell && ColdSnap.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseColdSnapAtPercentage)
        {
            ColdSnap.Launch();
            return;
        }
        else if (mySettings.UseConjureManaGem && ObjectManager.Me.ManaPercentage <= mySettings.UseConjureManaGemAtPercentage 
                 && ItemsManager.GetItemCountByIdLUA(36799) > 0)
        {
            Logging.WriteFight("Use Mana Gem.");
            Lua.RunMacroText("/use item:36799");
            return;
        }
        else if (mySettings.UseEvocationForHP && mySettings.UseEvocationGlyph && Evocation.KnownSpell && Evocation.IsSpellUsable 
                 && !mySettings.UseRuneofPowerTalent && !mySettings.UseInvocationTalent
                 && ObjectManager.Me.HealthPercent <= mySettings.UseEvocationForHPAtPercentage)
        {
            Evocation.Launch();
            return;
        }
        else if (mySettings.UseEvocationForMana && Evocation.KnownSpell && ObjectManager.GetNumberAttackPlayer() == 0 && Evocation.IsSpellUsable
                 && !mySettings.UseInvocationTalent && !mySettings.UseRuneofPowerTalent
                 && ObjectManager.Me.ManaPercentage <= mySettings.UseEvocationForManaAtPercentage)
        {
            Evocation.Launch();
            return;
        }
        else if (mySettings.UseConjureManaGem && ConjureManaGem.KnownSpell && ItemsManager.GetItemCountByIdLUA(36799) == 0
                 && ConjureManaGemTimer.IsReady && ConjureManaGem.IsSpellUsable)
        {
            ConjureManaGem.Launch();
            ConjureManaGemTimer = new Timer(1000*60*5);
            return;
        }
        else
        {
            if (mySettings.UseConjureRefreshment && ConjureRefreshment.KnownSpell && ConjureRefreshmentTimer.IsReady && ConjureRefreshment.IsSpellUsable 
                && ItemsManager.GetItemCountByIdLUA(80610) == 0 // 90
                && ItemsManager.GetItemCountByIdLUA(65499) == 0 // 85-89
                && ItemsManager.GetItemCountByIdLUA(43523) == 0 // 84-80
                && ItemsManager.GetItemCountByIdLUA(43518) == 0 // 79-74
                && ItemsManager.GetItemCountByIdLUA(65517) == 0 // 73-64
                && ItemsManager.GetItemCountByIdLUA(65516) == 0 // 63-54
                && ItemsManager.GetItemCountByIdLUA(65515) == 0 // 53-44
                && ItemsManager.GetItemCountByIdLUA(65500) == 0) // 43-38
            {
                ConjureRefreshment.Launch();
                ConjureRefreshmentTimer = new Timer(1000*60*10);
                return;
            }
        }
    }

    private void Decast()
    {
        if (mySettings.UseCounterspell && Counterspell.KnownSpell && Counterspell.IsHostileDistanceGood && Counterspell.IsSpellUsable
            && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
            && ObjectManager.Me.HealthPercent <= mySettings.UseCounterspellAtPercentage)
        {
            Counterspell.Launch();
            return;
        }
        else if (mySettings.UseArcaneTorrentForDecast && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8 && ArcaneTorrent.IsSpellUsable
                 && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                 && ObjectManager.Me.HealthPercent <= mySettings.UseArcaneTorrentForDecastAtPercentage)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else
        {
            if (mySettings.UseFrostjaw && Frostjaw.KnownSpell && Frostjaw.IsHostileDistanceGood && Frostjaw.IsSpellUsable
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && ObjectManager.Me.HealthPercent <= mySettings.UseFrostjawAtPercentage)
            {
                Frostjaw.Launch();
                OnCD = new Timer(1000*8);
                return;
            }
        }

        if (mySettings.UseSlow && Slow.KnownSpell && Slow.IsHostileDistanceGood && Slow.IsSpellUsable
            && ObjectManager.Target.GetMove && !Slow.TargetHaveBuff)
        {
            Slow.Launch();
            return;
        }
    }

    private void DPSBurst()
    {
        if (mySettings.UseAlterTime && AlterTime.KnownSpell && ObjectManager.Target.GetDistance < 41 && AlterTime.IsSpellUsable && !AlterTime.HaveBuff
            && ObjectManager.Target.InCombat && ArcanePower.HaveBuff && ObjectManager.Me.BuffStack(114664) > 3)
        {
            AlterTime.Launch();
            AlterTimeTimer = new Timer(1000 * 4);
        }
        else if (mySettings.UseAlterTime && mySettings.UseArcaneBarrage && AlterTime.KnownSpell && ObjectManager.Target.GetDistance < 41 && AlterTime.IsSpellUsable
                     && AlterTime.HaveBuff && ObjectManager.Target.InCombat && ObjectManager.Me.BuffStack(114664) > 3 && AlterTimeTimer.IsReady)
        {
            if (ArcaneBarrage.KnownSpell && ArcaneBarrage.IsHostileDistanceGood && ArcaneBarrage.IsSpellUsable)
            {
                ArcaneBarrage.Launch();
                return;
            }
            return;
        }

        if (mySettings.UseTrinketOne && TrinketOneTimer.IsReady && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketOneTimer = new Timer(1000*60*2);
        }
        else if (mySettings.UseTrinketTwo && TrinketTwoTimer.IsReady && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketTwoTimer = new Timer(1000*60*2);
        }

        if (mySettings.UseBerserking && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 41 && Berserking.IsSpellUsable)
            Berserking.Launch();
        else if (mySettings.UseBloodFury && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 41 && BloodFury.IsSpellUsable)
            BloodFury.Launch();

        if (mySettings.UseLifeblood && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 41 && Lifeblood.IsSpellUsable)
            Lifeblood.Launch();

        if (mySettings.UseEngGlove && EngineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            EngineeringTimer = new Timer(1000*60);
        }

        if (mySettings.UseInvocationTalent && Evocation.KnownSpell && ObjectManager.Target.GetDistance < 41 && Evocation.IsSpellUsable
                 && !ObjectManager.Me.HaveBuff(116257))
            Evocation.Launch();
        else if (mySettings.UseRuneofPowerTalent && Evocation.KnownSpell && ObjectManager.Target.GetDistance < 41 && Evocation.IsSpellUsable
                 && !ObjectManager.Me.HaveBuff(116014))
            SpellManager.CastSpellByIDAndPosition(116011, ObjectManager.Me.Position);

        if (mySettings.UseArcanePower && ArcanePower.KnownSpell && ObjectManager.Target.GetDistance < 41 && ArcanePower.IsSpellUsable)
            ArcanePower.Launch();

        if (mySettings.UseMirrorImage && MirrorImage.KnownSpell && ObjectManager.Target.GetDistance < 41 && MirrorImage.IsSpellUsable)
            MirrorImage.Launch();

        if (mySettings.UseTimeWarp && TimeWarp.IsSpellUsable && TimeWarp.KnownSpell && ObjectManager.Target.GetDistance < 41
            && !ObjectManager.Me.HaveBuff(80354) && !ObjectManager.Me.HaveBuff(57724) && !ObjectManager.Me.HaveBuff(57723)
            && !ObjectManager.Me.HaveBuff(95809))
        {
            TimeWarp.Launch();
            return;
        }
    }

    private void DPSCycle()
    {
        if (mySettings.UseIceFloes && IceFloes.KnownSpell && ObjectManager.Me.GetMove && IceFloes.IsSpellUsable)
        {
            IceFloes.Launch();
            return;
        }

        if (mySettings.UseFlamestrike && Flamestrike.KnownSpell && Flamestrike.IsHostileDistanceGood && Flamestrike.IsSpellUsable
            && ObjectManager.GetNumberAttackPlayer() > 1 && FlamestrikeTimer.IsReady)
        {
            SpellManager.CastSpellByIDAndPosition(2120, ObjectManager.Target.Position);
            FlamestrikeTimer = new Timer(1000*8);
            return;
        }
        else if (mySettings.UseArcaneExplosion && ArcaneExplosion.KnownSpell && ArcaneExplosion.IsHostileDistanceGood && ArcaneExplosion.IsSpellUsable
                 && ObjectManager.GetNumberAttackPlayer() > 4)
        {
            ArcaneExplosion.Launch();
            return;
        }

        if (mySettings.UseTierFive && MageBomb.KnownSpell && ObjectManager.Target.GetDistance < 41 && MageBomb.IsSpellUsable
            && !ObjectManager.Target.HaveBuff(114954) && !ObjectManager.Target.HaveBuff(44457))
        {
            MageBomb.Launch();
            return;
        }
        else if (mySettings.UseArcaneMissiles && ArcaneMissiles.KnownSpell && ArcaneMissiles.IsHostileDistanceGood && ArcaneMissiles.IsSpellUsable
                 && ObjectManager.Me.BuffStack(79683) > 1)
        {
            ArcaneMissiles.Launch();
            return;
        }
        else if (mySettings.UseArcaneMissiles && ArcaneMissiles.KnownSpell && ArcaneMissiles.IsHostileDistanceGood && ArcaneMissiles.IsSpellUsable
                 && ObjectManager.Me.BuffStack(114664) > 3)
        {
            ArcaneMissiles.Launch();
            return;
        }
        else if (ArcaneBarrage.IsSpellUsable && ArcaneBarrage.KnownSpell && ArcaneBarrage.IsHostileDistanceGood
                 && mySettings.UseArcaneBarrage && ObjectManager.Me.BuffStack(114664) > 3)
        {
            ArcaneBarrage.Launch();
            return;
        }
        else if (mySettings.UsePresenceofMind && PresenceofMind.KnownSpell && ArcaneBlast.IsHostileDistanceGood && PresenceofMind.IsSpellUsable)
        {
            PresenceofMind.Launch();
            Thread.Sleep(400);
            if (mySettings.UseArcaneBlast && ArcaneBlast.KnownSpell && ArcaneBlast.IsHostileDistanceGood && ArcaneBlast.IsSpellUsable)
                ArcaneBlast.Launch();
            return;
        }
        else
        {
            if (mySettings.UseArcaneBlast && ArcaneBlast.KnownSpell && ArcaneBlast.IsHostileDistanceGood && ArcaneBlast.IsSpellUsable
                && ObjectManager.Me.BuffStack(114664) < 4)
            {
                ArcaneBlast.Launch();
                return;
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: MageArcaneSettings

    [Serializable]
    public class MageArcaneSettings : Settings
    {
        public bool DoAvoidMelee = false;
        public int DoAvoidMeleeDistance = 0;
        public bool UseAlchFlask = true;
        public bool UseAlterTime = true;
        public bool UseArcaneBarrage = true;
        public bool UseArcaneBlast = true;
        public bool UseArcaneBrilliance = true;
        public bool UseArcaneExplosion = true;
        public bool UseArcaneMissiles = true;
        public bool UseArcanePower = true;
        public bool UseArcaneTorrentForDecast = true;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public bool UseArcaneTorrentForResource = true;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public bool UseBerserking = true;
        public bool UseBlazingSpeed = true;
        public bool UseBlink = true;
        public bool UseBloodFury = true;
        public bool UseColdSnap = true;
        public int UseColdSnapAtPercentage = 70;
        public bool UseConeofCold = true;
        public int UseConeofColdAtPercentage = 45;
        public bool UseConjureManaGem = true;
        public int UseConjureManaGemAtPercentage = 40;
        public bool UseConjureRefreshment = true;
        public bool UseCounterspell = true;
        public int UseCounterspellAtPercentage = 100;
        public bool UseDeepFreeze = true;
        public int UseDeepFreezeAtPercentage = 50;
        public bool UseEngGlove = true;
        public bool UseEvocationForHP = true;
        public int UseEvocationForHPAtPercentage = 40;
        public bool UseEvocationForMana = true;
        public int UseEvocationForManaAtPercentage = 60;
        public bool UseEvocationGlyph = false;
        public bool UseFlamestrike = true;
        public bool UseFrostArmor = false;
        public bool UseFrostNova = true;
        public int UseFrostNovaAtPercentage = 50;
        public bool UseFrostjaw = true;
        public int UseFrostjawAtPercentage = 40;
        public bool UseGiftoftheNaaru = true;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public bool UseIceBarrier = true;
        public int UseIceBarrierAtPercentage = 95;
        public bool UseIceBlock = true;
        public bool UseIceFloes = true;
        public bool UseIceWard = true;
        public int UseIceWardAtPercentage = 45;
        public bool UseIncantersWard = true;
        public int UseIncantersWardAtPercentage = 95;
        public bool UseInvisibility = true;
        public bool UseInvocationTalent = false;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMageArmor = true;
        public bool UseMirrorImage = true;
        public bool UseMoltenArmor = false;
        public bool UsePresenceofMind = true;
        public bool UseRingofFrost = true;
        public bool UseRuneofPowerTalent = false;
        public bool UseScorch = true;
        public bool UseSlow = false;
        public bool UseStoneform = true;
        public int UseStoneformAtPercentage = 80;
        public bool UseTemporalShield = true;
        public int UseTemporalShieldAtPercentage = 95;
        public bool UseTierFive = true;
        public bool UseTimeWarp = true;
        public bool UseTrinketOne = true;
        public bool UseTrinketTwo = true;
        public bool UseWarStomp = true;
        public int UseWarStompAtPercentage = 80;

        public MageArcaneSettings()
        {
            ConfigWinForm(new Point(500, 400), "Mage Arcane Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials", "AtPercentage");
            /* Mage Buffs */
            AddControlInWinForm("Use Arcane Brilliance", "UseArcaneBrilliance", "Mage Buffs");
            AddControlInWinForm("Use Blazing Speed", "UseBlazingSpeed", "Mage Buffs");
            AddControlInWinForm("Use Frost Armor", "UseFrostArmor", "Mage Buffs");
            AddControlInWinForm("Use Ice Floes", "UseIceFloes", "Mage Buffs");
            AddControlInWinForm("Use Mage Armor", "UseMageArmor", "Mage Buffs");
            AddControlInWinForm("Use Molten Armor", "UseMoltenArmor", "Mage Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Arcane Barrage", "UseArcaneBarrage", "Offensive Spell");
            AddControlInWinForm("Use Arcane Blast", "UseArcaneBlast", "Offensive Spell");
            AddControlInWinForm("Use Arcane Explosion", "UseArcaneExplosion", "Offensive Spell");
            AddControlInWinForm("Use Arcane Missiles", "UseArcaneMissiles", "Offensive Spell");
            AddControlInWinForm("Use Flamestrike", "UseFlamestrike", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Alter Time", "UseAlterTime", "Offensive Cooldown");
            AddControlInWinForm("Use Arcane Power", "UseArcanePower", "Offensive Cooldown");
            AddControlInWinForm("Use Mirror Image", "UseMirrorImage", "Offensive Cooldown");
            AddControlInWinForm("Use Presence of Mind", "UsePresenceofMind", "Offensive Cooldown");
            AddControlInWinForm("Use Tier Five Talent", "UseTierFive", "Offensive Cooldown");
            AddControlInWinForm("Use Time Warp", "UseTimeWarp", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Blink", "UseBlink", "Defensive Cooldown");
            AddControlInWinForm("Use Cone of Cold", "UseConeofCold", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Counterspell", "UseCounterspell", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Deep Freeze", "UseDeepFreeze", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Frostjaw", "UseFrostjaw", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Frost Nova", "UseFrostNova", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Ice Barrier", "UseIceBarrier", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Ice Block", "UseIceBlock", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Ice Ward", "UseIceWard", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Incanter's Ward", "UseIncantersWard", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Invisibility", "UseInvisibility", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Ring of Frost", "UseRingofFrost", "Defensive Cooldown");
            AddControlInWinForm("Use Slow", "UseSlow", "Defensive Cooldown");
            AddControlInWinForm("Use Temporal Shield", "UseTemporalShield", "Defensive Cooldown", "AtPercentage");
            /* Healing Spell */
            AddControlInWinForm("Use Cold Snap", "UseColdSnap", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Conjure Mana Gem", "UseConjureManaGem", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Conjure Refreshment", "UseConjureRefreshment", "Healing Spell");
            AddControlInWinForm("Use Evocation to regen Health", "UseEvocationForHP", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Evocation to regen Mana", "UseEvocationForMana", "Healing Spell", "AtPercentage");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
            AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Use Evocation Glyph", "UseEvocationGlyph", "Game Settings");
            AddControlInWinForm("Use Invocation Talent", "UseInvocationTalent", "Game Settings");
            AddControlInWinForm("Use Rune of Power Talent", "UseRuneofPowerTalent", "Game Settings");
            AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
            AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
        }

        public static MageArcaneSettings CurrentSetting { get; set; }

        public static MageArcaneSettings GetSettings()
        {
            string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Mage_Arcane.xml";
            if (File.Exists(currentSettingsFile))
            {
                return
                    CurrentSetting = Load<MageArcaneSettings>(currentSettingsFile);
            }
            else
            {
                return new MageArcaneSettings();
            }
        }
    }

    #endregion
}

public class MageFrost
{
    private readonly MageFrostSettings mySettings = MageFrostSettings.GetSettings();

    #region General Timers & Variables

    private Timer AlchFlaskTimer = new Timer(0);
    private Timer EngineeringTimer = new Timer(0);
    private Timer FreezeTimer = new Timer(0);
    public int LC = 0;
    private Timer OnCD = new Timer(0);
    private Timer TrinketOneTimer = new Timer(0);
    private Timer TrinketTwoTimer = new Timer(0);

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell BloodFury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell WarStomp = new Spell("War Stomp");

    #endregion

    #region Mage Buffs

    private readonly Spell ArcaneBrilliance = new Spell("Arcane Brilliance");
    private readonly Spell BlazingSpeed = new Spell("Blazing Speed");
    private readonly Spell FrostArmor = new Spell("Frost Armor");
    private readonly Spell IceFloes = new Spell("Ice Floes");
    private readonly Spell MageArmor = new Spell("Mage Armor");
    private readonly Spell MoltenArmor = new Spell("Molten Armor");

    #endregion

    #region Offensive Spell

    private readonly Spell ArcaneExplosion = new Spell("Arcane Explosion");
    private readonly Spell Blizzard = new Spell("Blizzard");
    private readonly Spell ConeofCold = new Spell("Cone of Cold");
    private readonly Spell FireBlast = new Spell("Fire Blast");
    private readonly Spell Flamestrike = new Spell("Flamestrike");
    private readonly Spell Frostbolt = new Spell("Frostbolt");
    private readonly Spell FrostfireBolt = new Spell("Frostfire Bolt");
    private readonly Spell IceLance = new Spell("Ice Lance");
    private readonly Spell Scorch = new Spell("Scorch");
    private readonly Spell SummonWaterElemental = new Spell("Summon Water Elemental");
    private Timer FlamestrikeTimer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell AlterTime = new Spell("Alter Time");
    private readonly Spell FrozenOrb = new Spell("Frozen Orb");
    private readonly Spell IcyVeins = new Spell("Icy Veins");
    private readonly Spell MageBomb = new Spell("Mage Bomb");
    private readonly Spell MirrorImage = new Spell("Mirror Image");
    private readonly Spell PresenceofMind = new Spell("Presence of Mind");
    private readonly Spell TimeWarp = new Spell("Time Warp");

    #endregion

    #region Defensive Cooldown

    private readonly Spell Blink = new Spell("Blink");
    private readonly Spell ColdSnap = new Spell("Cold Snap");
    private readonly Spell Counterspell = new Spell("Counterspell");
    private readonly Spell DeepFreeze = new Spell("Deep Freeze");
    private readonly Spell FrostNova = new Spell("Frost Nova");
    private readonly Spell Frostjaw = new Spell("Frostjaw");
    private readonly Spell IceBarrier = new Spell("Ice Barrier");
    private readonly Spell IceBlock = new Spell("Ice Block");
    private readonly Spell IceWard = new Spell("Ice Ward");
    private readonly Spell IncantersWard = new Spell("Incanter's Ward");
    private readonly Spell Invisibility = new Spell("Invisibility");
    private readonly Spell RingofFrost = new Spell("Ring of Frost");
    private readonly Spell TemporalShield = new Spell("Temporal Shield");

    #endregion

    #region Healing Spell

    private readonly Spell ConjureManaGem = new Spell("Conjure Mana Gem");
    private Timer ConjureManaGemTimer = new Timer(0);
    private readonly Spell ConjureRefreshment = new Spell("Conjure Refreshment");
    private Timer ConjureRefreshmentTimer = new Timer(0);
    private readonly Spell Evocation = new Spell("Evocation");

    #endregion

    public MageFrost()
    {
        Main.range = 30.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (Frostbolt.IsHostileDistanceGood || IceLance.IsHostileDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (mySettings.UseLowCombat && ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84)
                            {
                                LC = 1;
                                if (ObjectManager.Target.GetDistance < 41)
                                    LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                if (ObjectManager.Target.GetDistance < 41)
                                    Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void Pull()
    {
        if (ObjectManager.Pet.IsAlive)
        {
            Lua.RunMacroText("/petattack");
            Logging.WriteFight("Launch Pet Attack");
        }

        if (mySettings.UseIceLance && IceLance.KnownSpell && IceLance.IsHostileDistanceGood && IceLance.IsSpellUsable)
            IceLance.Launch();

        if (mySettings.UseFreeze && ObjectManager.Me.Level > 9 && FreezeTimer.IsReady && ObjectManager.Target.GetDistance < 41
            && (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0))
        {
            SpellManager.CastSpellByIDAndPosition(33395, ObjectManager.Target.Position);
            FreezeTimer = new Timer(1000*25);
            Thread.Sleep(400);
            if (mySettings.UseDeepFreeze && DeepFreeze.KnownSpell && DeepFreeze.IsHostileDistanceGood && DeepFreeze.IsSpellUsable)
            {
                DeepFreeze.Launch();
                return;
            }
        }
    }

    private void LowCombat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        if (OnCD.IsReady)
            DefenseCycle();
        Heal();

        if (mySettings.UseIceLance && IceLance.KnownSpell && IceLance.IsHostileDistanceGood && IceLance.IsSpellUsable
            && ObjectManager.Me.HaveBuff(44544))
        {
            IceLance.Launch();
            return;
        }
        else if (mySettings.UseFrostfireBolt && FrostfireBolt.KnownSpell && FrostfireBolt.IsHostileDistanceGood && FrostfireBolt.IsSpellUsable
                 && ObjectManager.Me.HaveBuff(57761))
        {
            FrostfireBolt.Launch();
            return;
        }
        else if (mySettings.UseFrostbolt && Frostbolt.KnownSpell && Frostbolt.IsHostileDistanceGood && Frostbolt.IsSpellUsable)
        {
            Frostbolt.Launch();
            return;
        }
        else
        {
            if (mySettings.UseArcaneExplosion && ArcaneExplosion.KnownSpell && ArcaneExplosion.IsHostileDistanceGood && ArcaneExplosion.IsSpellUsable)
            {
                ArcaneExplosion.Launch();
                return;
            }
        }
    }

    private void Combat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        DPSCycle();
        if (OnCD.IsReady)
            DefenseCycle();
        Heal();
        Decast();
        DPSBurst();
        DPSCycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (mySettings.UseSummonWaterElemental && SummonWaterElemental.IsSpellUsable && SummonWaterElemental.KnownSpell
            && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0) && ObjectManager.GetNumberAttackPlayer() > 0)
        {
            Logging.WriteFight(" - PET DEAD - ");
            SummonWaterElemental.Launch();
        }

        if (mySettings.UseIceBlock && IceBlock.KnownSpell && ObjectManager.Me.HaveBuff(87023) && !ObjectManager.Me.HaveBuff(41425))
        {
            if (mySettings.UseColdSnap && ColdSnap.KnownSpell && !IceBlock.IsSpellUsable && ColdSnap.IsSpellUsable)
            {
                ColdSnap.Launch();
                Thread.Sleep(400);
            }

            if (IceBlock.IsSpellUsable)
            {
                IceBlock.Launch();
                OnCD = new Timer(1000*10);
                return;
            }
        }

        if (mySettings.UseArcaneBrilliance && ArcaneBrilliance.KnownSpell && !ArcaneBrilliance.HaveBuff && ArcaneBrilliance.IsSpellUsable
            && !ObjectManager.Me.HaveBuff(61316))
            ArcaneBrilliance.Launch();

        if (mySettings.UseFrostArmor && FrostArmor.KnownSpell && !FrostArmor.HaveBuff && FrostArmor.IsSpellUsable)
        {
            FrostArmor.Launch();
            return;
        }
        else if (mySettings.UseMoltenArmor && !mySettings.UseFrostArmor && MoltenArmor.KnownSpell && !MoltenArmor.HaveBuff && MoltenArmor.IsSpellUsable)
        {
            MoltenArmor.Launch();
            return;
        }
        else if (mySettings.UseMageArmor && MageArmor.KnownSpell && !mySettings.UseFrostArmor && !mySettings.UseMoltenArmor 
                 && !MageArmor.HaveBuff && MageArmor.IsSpellUsable)
        {
            MageArmor.Launch();
            return;
        }

        if (mySettings.UseBlazingSpeed && BlazingSpeed.KnownSpell && BlazingSpeed.IsSpellUsable && ObjectManager.Me.GetMove)
        {
            BlazingSpeed.Launch();
            return;
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            var maxTimeTimer = new Timer(1000*2);
            MovementsAction.MoveBackward(true);
            while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                Thread.Sleep(300);
            MovementsAction.MoveBackward(false);
            if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
            {
                MovementsAction.MoveForward(true);
                Thread.Sleep(1000);
                MovementsAction.MoveForward(false);
                MovementManager.Face(ObjectManager.Target.Position);
            }
        }
    }

    private void DefenseCycle()
    {
        if (mySettings.UseIncantersWard && IncantersWard.KnownSpell && !IncantersWard.HaveBuff && IncantersWard.IsSpellUsable 
            && ObjectManager.Me.HealthPercent <= mySettings.UseIncantersWardAtPercentage && ObjectManager.GetNumberAttackPlayer() > 0)
        {
            IncantersWard.Launch();
            return;
        }

        if (mySettings.UseRingofFrost && RingofFrost.KnownSpell && ObjectManager.GetNumberAttackPlayer() > 2 && RingofFrost.IsSpellUsable
            && ObjectManager.Target.GetDistance < 10)
        {
            SpellManager.CastSpellByIDAndPosition(113724, ObjectManager.Target.Position);
            OnCD = new Timer(1000 * 10);
            return;
        }
        else if (mySettings.UseFrostNova && FrostNova.KnownSpell && ObjectManager.Target.GetDistance < 12
                 && ObjectManager.Me.HealthPercent <= mySettings.UseFrostNovaAtPercentage)
        {
            if (mySettings.UseColdSnap && ColdSnap.KnownSpell && !FrostNova.IsSpellUsable && ColdSnap.IsSpellUsable)
            {
                ColdSnap.Launch();
                Thread.Sleep(200);
            }

            if (FrostNova.IsSpellUsable)
            {
                FrostNova.Launch();
                OnCD = new Timer(1000 * 8);
                return;
            }
        }
        else if (mySettings.UseIceWard && IceWard.KnownSpell && ObjectManager.Target.GetDistance < 10 && IceWard.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseIceWardAtPercentage)
        {
            IceWard.Launch();
            OnCD = new Timer(1000 * 5);
            return;
        }
        else if (mySettings.UseConeofCold && ConeofCold.KnownSpell && ObjectManager.Target.GetDistance < 10 && ConeofCold.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseConeofColdAtPercentage)
        {
            ConeofCold.Launch();
            return;
        }
        else if (mySettings.UseBlink && Blink.KnownSpell && ObjectManager.Target.GetDistance < 11 && Blink.IsSpellUsable
                 && (FrostNova.TargetHaveBuff || ConeofCold.TargetHaveBuff || IceWard.TargetHaveBuff))
        {
            Blink.Launch();
            return;
        }
        else if (mySettings.UseDeepFreeze && DeepFreeze.KnownSpell && DeepFreeze.IsHostileDistanceGood && DeepFreeze.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseDeepFreezeAtPercentage)
        {
            DeepFreeze.Launch();
            OnCD = new Timer(1000*5);
            return;
        }
        else if (mySettings.UseIceBarrier && IceBarrier.KnownSpell && !IceBarrier.HaveBuff && IceBarrier.IsSpellUsable 
                 && ObjectManager.Me.HealthPercent <= mySettings.UseIceBarrierAtPercentage)
        {
            IceBarrier.Launch();
            return;
        }
        else if (mySettings.UseTemporalShield && TemporalShield.KnownSpell && !TemporalShield.HaveBuff && TemporalShield.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseTemporalShieldAtPercentage && ObjectManager.GetNumberAttackPlayer() > 0)
        {
            TemporalShield.Launch();
            OnCD = new Timer(1000*4);
            return;
        }
        else if (mySettings.UseWarStomp && WarStomp.KnownSpell && WarStomp.IsHostileDistanceGood && WarStomp.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseWarStompAtPercentage)
        {
            WarStomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else if (mySettings.UseStoneform && Stoneform.KnownSpell && Stoneform.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseStoneformAtPercentage)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else
        {
            if (mySettings.UseInvisibility && Invisibility.KnownSpell && Invisibility.IsSpellUsable 
                && ObjectManager.GetNumberAttackPlayer() > 3)
            {
                Invisibility.Launch();
                Thread.Sleep(5000);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (mySettings.UseArcaneTorrentForResource && ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable
            && ObjectManager.Me.ManaPercentage <= mySettings.UseArcaneTorrentForResourceAtPercentage)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else if (mySettings.UseGiftoftheNaaru && GiftoftheNaaru.KnownSpell && GiftoftheNaaru.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseGiftoftheNaaruAtPercentage)
        {
            GiftoftheNaaru.Launch();
            return;
        }
        else if (mySettings.UseColdSnap && ColdSnap.KnownSpell && ColdSnap.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseColdSnapAtPercentage)
        {
            ColdSnap.Launch();
            return;
        }
        else if (mySettings.UseConjureManaGem && ObjectManager.Me.ManaPercentage <= mySettings.UseConjureManaGemAtPercentage 
                 && ItemsManager.GetItemCountByIdLUA(36799) > 0)
        {
            Logging.WriteFight("Use Mana Gem.");
            Lua.RunMacroText("/use item:36799");
            return;
        }
        else if (mySettings.UseEvocationForHP && mySettings.UseEvocationGlyph && Evocation.KnownSpell && Evocation.IsSpellUsable 
                 && !mySettings.UseRuneofPowerTalent && !mySettings.UseInvocationTalent
                 && ObjectManager.Me.HealthPercent <= mySettings.UseEvocationForHPAtPercentage)
        {
            Evocation.Launch();
            return;
        }
        else if (mySettings.UseEvocationForMana && Evocation.KnownSpell && ObjectManager.GetNumberAttackPlayer() == 0 && Evocation.IsSpellUsable
                 && !mySettings.UseInvocationTalent && !mySettings.UseRuneofPowerTalent
                 && ObjectManager.Me.ManaPercentage <= mySettings.UseEvocationForManaAtPercentage)
        {
            Evocation.Launch();
            return;
        }
        else if (mySettings.UseConjureManaGem && ConjureManaGem.KnownSpell && ItemsManager.GetItemCountByIdLUA(36799) == 0
                 && ConjureManaGemTimer.IsReady && ConjureManaGem.IsSpellUsable)
        {
            ConjureManaGem.Launch();
            ConjureManaGemTimer = new Timer(1000*60*5);
            return;
        }
        else
        {
            if (mySettings.UseConjureRefreshment && ConjureRefreshment.KnownSpell && ConjureRefreshmentTimer.IsReady && ConjureRefreshment.IsSpellUsable 
                && ItemsManager.GetItemCountByIdLUA(80610) == 0 // 90
                && ItemsManager.GetItemCountByIdLUA(65499) == 0 // 85-89
                && ItemsManager.GetItemCountByIdLUA(43523) == 0 // 84-80
                && ItemsManager.GetItemCountByIdLUA(43518) == 0 // 79-74
                && ItemsManager.GetItemCountByIdLUA(65517) == 0 // 73-64
                && ItemsManager.GetItemCountByIdLUA(65516) == 0 // 63-54
                && ItemsManager.GetItemCountByIdLUA(65515) == 0 // 53-44
                && ItemsManager.GetItemCountByIdLUA(65500) == 0) // 43-38
            {
                ConjureRefreshment.Launch();
                ConjureRefreshmentTimer = new Timer(1000*60*10);
                return;
            }
        }
    }

    private void Decast()
    {
        if (mySettings.UseCounterspell && Counterspell.KnownSpell && Counterspell.IsHostileDistanceGood && Counterspell.IsSpellUsable
            && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
            && ObjectManager.Me.HealthPercent <= mySettings.UseCounterspellAtPercentage)
        {
            Counterspell.Launch();
            return;
        }
        else if (mySettings.UseArcaneTorrentForDecast && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8 && ArcaneTorrent.IsSpellUsable
                 && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                 && ObjectManager.Me.HealthPercent <= mySettings.UseArcaneTorrentForDecastAtPercentage)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else
        {
            if (mySettings.UseFrostjaw && Frostjaw.KnownSpell && Frostjaw.IsHostileDistanceGood && Frostjaw.IsSpellUsable
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && ObjectManager.Me.HealthPercent <= mySettings.UseFrostjawAtPercentage)
            {
                Frostjaw.Launch();
                OnCD = new Timer(1000*8);
                return;
            }
        }
    }

    private void DPSBurst()
    {
        if (mySettings.UseAlterTime && AlterTime.KnownSpell && ObjectManager.Target.GetDistance < 41 && AlterTime.IsSpellUsable && !AlterTime.HaveBuff
            && ObjectManager.Target.InCombat && IcyVeins.HaveBuff && ObjectManager.Me.HaveBuff(57761) && ObjectManager.Me.BuffStack(44544) > 1)
            AlterTime.Launch();

        if (mySettings.UseTrinketOne && TrinketOneTimer.IsReady && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketOneTimer = new Timer(1000*60*2);
        }
        else if (mySettings.UseTrinketTwo && TrinketTwoTimer.IsReady && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketTwoTimer = new Timer(1000*60*2);
        }

        if (mySettings.UseBerserking && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 41 && Berserking.IsSpellUsable)
            Berserking.Launch();
        else if (mySettings.UseBloodFury && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 41 && BloodFury.IsSpellUsable)
            BloodFury.Launch();

        if (mySettings.UseLifeblood && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 41 && Lifeblood.IsSpellUsable)
            Lifeblood.Launch();

        if (mySettings.UseEngGlove && EngineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            EngineeringTimer = new Timer(1000*60);
        }

        if (FrozenOrb.IsSpellUsable && FrozenOrb.KnownSpell && FrozenOrb.IsHostileDistanceGood
                 && mySettings.UseFrozenOrb)
            FrozenOrb.Launch();

        if (mySettings.UseInvocationTalent && Evocation.KnownSpell && ObjectManager.Target.GetDistance < 41 && Evocation.IsSpellUsable
                 && !ObjectManager.Me.HaveBuff(116257))
            Evocation.Launch();
        else if (mySettings.UseRuneofPowerTalent && Evocation.KnownSpell && ObjectManager.Target.GetDistance < 41 && Evocation.IsSpellUsable
                 && !ObjectManager.Me.HaveBuff(116014))
            SpellManager.CastSpellByIDAndPosition(116011, ObjectManager.Me.Position);

        if (mySettings.UseIcyVeins && IcyVeins.KnownSpell && ObjectManager.Target.GetDistance < 41 && IcyVeins.IsSpellUsable
                 && !TimeWarp.HaveBuff)
            IcyVeins.Launch();

        if (mySettings.UseMirrorImage && MirrorImage.KnownSpell && ObjectManager.Target.GetDistance < 41 && MirrorImage.IsSpellUsable)
            MirrorImage.Launch();

        if (mySettings.UseTimeWarp && TimeWarp.IsSpellUsable && TimeWarp.KnownSpell && ObjectManager.Target.GetDistance < 41
                && !ObjectManager.Me.HaveBuff(80354) && !ObjectManager.Me.HaveBuff(57724) && !ObjectManager.Me.HaveBuff(57723)
                && !ObjectManager.Me.HaveBuff(95809))
        {
            TimeWarp.Launch();
            return;
        }
    }

    private void DPSCycle()
    {
        if (mySettings.UseIceFloes && IceFloes.KnownSpell && ObjectManager.Me.GetMove && IceFloes.IsSpellUsable)
        {
            IceFloes.Launch();
            return;
        }

        if (mySettings.UseFlamestrike && Flamestrike.KnownSpell && Flamestrike.IsHostileDistanceGood && Flamestrike.IsSpellUsable
            && FlamestrikeTimer.IsReady && ObjectManager.GetNumberAttackPlayer() > 4)
        {
            SpellManager.CastSpellByIDAndPosition(2120, ObjectManager.Target.Position);
            FlamestrikeTimer = new Timer(1000*8);
            return;
        }
        else if (mySettings.UseArcaneExplosion && ArcaneExplosion.KnownSpell && ArcaneExplosion.IsHostileDistanceGood && ArcaneExplosion.IsSpellUsable
                 && ObjectManager.GetNumberAttackPlayer() > 4)
        {
            ArcaneExplosion.Launch();
            return;
        }

        if (mySettings.UseTierFive && MageBomb.KnownSpell && ObjectManager.Target.GetDistance < 41 && MageBomb.IsSpellUsable
                 && !ObjectManager.Target.HaveBuff(114923) && !ObjectManager.Target.HaveBuff(44457))
        {
            MageBomb.Launch();
            return;
        }
        else if (mySettings.UseFreeze && ObjectManager.Me.Level > 9 && FreezeTimer.IsReady && ObjectManager.Target.GetDistance < 41
                 && (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0))
        {
            SpellManager.CastSpellByIDAndPosition(33395, ObjectManager.Target.Position);
            FreezeTimer = new Timer(1000*25);
            Thread.Sleep(400);
            return;
        }
        else if (mySettings.UseFrostfireBolt && FrostfireBolt.KnownSpell && FrostfireBolt.IsHostileDistanceGood && FrostfireBolt.IsSpellUsable
                 && ObjectManager.Me.HaveBuff(57761))
        {
            FrostfireBolt.Launch();
            return;
        }
        else if (mySettings.UseIceLance && IceLance.KnownSpell && IceLance.IsHostileDistanceGood && IceLance.IsSpellUsable
                 && ObjectManager.Me.HaveBuff(44544))
        {
            IceLance.Launch();
            return;
        }
        else if (mySettings.UsePresenceofMind && PresenceofMind.KnownSpell && Frostbolt.IsHostileDistanceGood && PresenceofMind.IsSpellUsable)
        {
            PresenceofMind.Launch();
            Thread.Sleep(400);
            if (mySettings.UseFrostbolt && Frostbolt.KnownSpell && Frostbolt.IsHostileDistanceGood && Frostbolt.IsSpellUsable)
                Frostbolt.Launch();
            return;
        }
        else
        {
            if (mySettings.UseFrostbolt && Frostbolt.KnownSpell && Frostbolt.IsHostileDistanceGood && Frostbolt.IsSpellUsable)
            {
                Frostbolt.Launch();
                return;
            }
        }

        if (mySettings.UseFrostfireBolt && FrostfireBolt.KnownSpell && FrostfireBolt.IsHostileDistanceGood && FrostfireBolt.IsSpellUsable
            && ObjectManager.Me.Level < 10)
        {
            FrostfireBolt.Launch();
            return;
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: MageFrostSettings

    [Serializable]
    public class MageFrostSettings : Settings
    {
        public bool DoAvoidMelee = false;
        public int DoAvoidMeleeDistance = 0;
        public bool UseAlchFlask = true;
        public bool UseAlterTime = true;
        public bool UseArcaneBrilliance = true;
        public bool UseArcaneExplosion = true;
        public bool UseArcaneTorrentForDecast = true;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public bool UseArcaneTorrentForResource = true;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public bool UseBerserking = true;
        public bool UseBlazingSpeed = true;
        public bool UseBlink = true;
        public bool UseBlizzard = true;
        public bool UseBloodFury = true;
        public bool UseColdSnap = true;
        public int UseColdSnapAtPercentage = 70;
        public bool UseConeofCold = true;
        public int UseConeofColdAtPercentage = 45;
        public bool UseConjureManaGem = true;
        public int UseConjureManaGemAtPercentage = 40;
        public bool UseConjureRefreshment = true;
        public bool UseCounterspell = true;
        public int UseCounterspellAtPercentage = 100;
        public bool UseDeepFreeze = true;
        public int UseDeepFreezeAtPercentage = 50;
        public bool UseEngGlove = true;
        public bool UseEvocationForHP = true;
        public int UseEvocationForHPAtPercentage = 40;
        public bool UseEvocationForMana = true;
        public int UseEvocationForManaAtPercentage = 60;
        public bool UseEvocationGlyph = false;
        public bool UseFlamestrike = true;
        public bool UseFreeze = true;
        public bool UseFrostArmor = true;
        public bool UseFrostNova = true;
        public int UseFrostNovaAtPercentage = 50;
        public bool UseFrostbolt = true;
        public bool UseFrostfireBolt = true;
        public bool UseFrostjaw = true;
        public int UseFrostjawAtPercentage = 40;
        public bool UseFrozenOrb = true;
        public bool UseGiftoftheNaaru = true;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public bool UseIceBarrier = true;
        public int UseIceBarrierAtPercentage = 95;
        public bool UseIceBlock = true;
        public bool UseIceFloes = true;
        public bool UseIceLance = true;
        public bool UseIceWard = true;
        public int UseIceWardAtPercentage = 45;
        public bool UseIcyVeins = true;
        public bool UseIncantersWard = true;
        public int UseIncantersWardAtPercentage = 95;
        public bool UseInvisibility = true;
        public bool UseInvocationTalent = false;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMageArmor = false;
        public bool UseMirrorImage = true;
        public bool UseMoltenArmor = false;
        public bool UsePresenceofMind = true;
        public bool UseRingofFrost = true;
        public bool UseRuneofPowerTalent = false;
        public bool UseScorch = true;
        public bool UseStoneform = true;
        public int UseStoneformAtPercentage = 80;
        public bool UseSummonWaterElemental = true;
        public bool UseTemporalShield = true;
        public int UseTemporalShieldAtPercentage = 95;
        public bool UseTierFive = true;
        public bool UseTimeWarp = true;
        public bool UseTrinketOne = true;
        public bool UseTrinketTwo = true;
        public bool UseWarStomp = true;
        public int UseWarStompAtPercentage = 80;

        public MageFrostSettings()
        {
            ConfigWinForm(new Point(500, 400), "Mage Frost Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials", "AtPercentage");
            /* Mage Buffs */
            AddControlInWinForm("Use Arcane Brilliance", "UseArcaneBrilliance", "Mage Buffs");
            AddControlInWinForm("Use Blazing Speed", "UseBlazingSpeed", "Mage Buffs");
            AddControlInWinForm("Use Frost Armor", "UseFrostArmor", "Mage Buffs");
            AddControlInWinForm("Use Ice Floes", "UseIceFloes", "Mage Buffs");
            AddControlInWinForm("Use Mage Armor", "UseMageArmor", "Mage Buffs");
            AddControlInWinForm("Use Molten Armor", "UseMoltenArmor", "Mage Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Arcane Explosion", "UseArcaneExplosion", "Offensive Spell");
            AddControlInWinForm("Use Blizzard", "UseBlizzard", "Offensive Spell");
            AddControlInWinForm("Use Flamestrike", "UseFlamestrike", "Offensive Spell");
            AddControlInWinForm("Use Pet Freeze Ability", "UseFreeze", "Offensive Spell");
            AddControlInWinForm("Use Frostbolt", "UseFrostbolt", "Offensive Spell");
            AddControlInWinForm("Use Frostfire Bolt", "UseFrostfireBolt", "Offensive Spell");
            AddControlInWinForm("Use Ice Lance", "UseIceLance", "Offensive Spell");
            AddControlInWinForm("Use Summon Water Elemental", "UseSummonWaterElemental", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Alter Time", "UseAlterTime", "Offensive Cooldown");
            AddControlInWinForm("Use Frozen Orb", "UseFrozenOrb", "Offensive Cooldown");
            AddControlInWinForm("Use Icy Veins", "UseIcyVeins", "Offensive Cooldown");
            AddControlInWinForm("Use Mirror Image", "UseMirrorImage", "Offensive Cooldown");
            AddControlInWinForm("Use Presence of Mind", "UsePresenceofMind", "Offensive Cooldown");
            AddControlInWinForm("Use Tier Five Ability", "UseTierFive", "Offensive Cooldown");
            AddControlInWinForm("Use Time Warp", "UseTimeWarp", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Blink", "UseBlink", "Defensive Cooldown");
            AddControlInWinForm("Use Cone of Cold", "UseConeofCold", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Counterspell", "UseCounterspell", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Deep Freeze", "UseDeepFreeze", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Frostjaw", "UseFrostjaw", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Frost Nova", "UseFrostNova", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Ice Barrier", "UseIceBarrier", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Ice Block", "UseIceBlock", "Defensive Cooldown");
            AddControlInWinForm("Use Ice Ward", "UseIceWard", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Incanter's Ward", "UseIncantersWard", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Invisibility", "UseInvisibility", "Defensive Cooldown");
            AddControlInWinForm("Use Ring of Frost", "UseRingofFrost", "Defensive Cooldown");
            AddControlInWinForm("Use Temporal Shield", "UseTemporalShield", "Defensive Cooldown", "AtPercentage");
            /* Healing Spell */
            AddControlInWinForm("Use Cold Snap", "UseColdSnap", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Conjure Mana Gem", "UseConjureManaGem", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Conjure Refreshment", "UseConjureRefreshment", "Healing Spell");
            AddControlInWinForm("Use Evocation to regen Health", "UseEvocationForHP", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Evocation to regen Mana", "UseEvocationForMana", "Healing Spell", "AtPercentage");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
            AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Use Evocation Glyph", "UseEvocationGlyph", "Game Settings");
            AddControlInWinForm("Use Invocation Talent", "UseInvocationTalent", "Game Settings");
            AddControlInWinForm("Use Rune of Power Talent", "UseRuneofPowerTalent", "Game Settings");
            AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
            AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
        }

        public static MageFrostSettings CurrentSetting { get; set; }

        public static MageFrostSettings GetSettings()
        {
            string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Mage_Frost.xml";
            if (File.Exists(currentSettingsFile))
            {
                return
                    CurrentSetting = Load<MageFrostSettings>(currentSettingsFile);
            }
            else
            {
                return new MageFrostSettings();
            }
        }
    }

    #endregion
}

public class MageFire
{
    private readonly MageFireSettings mySettings = MageFireSettings.GetSettings();

    #region General Timers & Variables

    private Timer AlchFlaskTimer = new Timer(0);
    private Timer EngineeringTimer = new Timer(0);
    public int LC = 0;
    private Timer OnCD = new Timer(0);
    private Timer TrinketOneTimer = new Timer(0);
    private Timer TrinketTwoTimer = new Timer(0);

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell BloodFury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell WarStomp = new Spell("War Stomp");

    #endregion

    #region Mage Buffs

    private readonly Spell ArcaneBrilliance = new Spell("Arcane Brilliance");
    private readonly Spell BlazingSpeed = new Spell("Blazing Speed");
    private readonly Spell FrostArmor = new Spell("Frost Armor");
    private readonly Spell IceFloes = new Spell("Ice Floes");
    private readonly Spell MageArmor = new Spell("Mage Armor");
    private readonly Spell MoltenArmor = new Spell("Molten Armor");

    #endregion

    #region Offensive Spell

    private readonly Spell ArcaneExplosion = new Spell("Arcane Explosion");
    private readonly Spell DragonsBreath = new Spell("Dragon's Breath");
    private readonly Spell FireBlast = new Spell("Fire Blast");
    private readonly Spell Fireball = new Spell("Fireball");
    private readonly Spell Flamestrike = new Spell("Flamestrike");
    private readonly Spell InfernoBlast = new Spell("Inferno Blast");
    private readonly Spell Pyroblast = new Spell("Pyroblast");
    private readonly Spell Scorch = new Spell("Scorch");
    private Timer FlamestrikeTimer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell AlterTime = new Spell("Alter Time");
    private readonly Spell Combustion = new Spell("Combustion");
    private readonly Spell FrostBomb = new Spell("Frost Bomb");
    private readonly Spell MageBomb = new Spell("Mage Bomb");
    private readonly Spell MirrorImage = new Spell("Mirror Image");
    private readonly Spell PresenceofMind = new Spell("Presence of Mind");
    private readonly Spell TimeWarp = new Spell("Time Warp");

    #endregion

    #region Defensive Cooldown

    private readonly Spell Blink = new Spell("Blink");
    private readonly Spell ColdSnap = new Spell("Cold Snap");
    private readonly Spell ConeofCold = new Spell("Cone of Cold");
    private readonly Spell Counterspell = new Spell("Counterspell");
    private readonly Spell DeepFreeze = new Spell("Deep Freeze");
    private readonly Spell FrostNova = new Spell("Frost Nova");
    private readonly Spell Frostjaw = new Spell("Frostjaw");
    private readonly Spell IceBarrier = new Spell("Ice Barrier");
    private readonly Spell IceBlock = new Spell("Ice Block");
    private readonly Spell IceWard = new Spell("Ice Ward");
    private readonly Spell IncantersWard = new Spell("Incanter's Ward");
    private readonly Spell Invisibility = new Spell("Invisibility");
    private readonly Spell RingofFrost = new Spell("Ring of Frost");
    private readonly Spell TemporalShield = new Spell("Temporal Shield");

    #endregion

    #region Healing Spell

    private readonly Spell ConjureManaGem = new Spell("Conjure Mana Gem");
    private Timer ConjureManaGemTimer = new Timer(0);
    private readonly Spell ConjureRefreshment = new Spell("Conjure Refreshment");
    private Timer ConjureRefreshmentTimer = new Timer(0);
    private readonly Spell Evocation = new Spell("Evocation");

    #endregion

    public MageFire()
    {
        Main.range = 30.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (Scorch.IsHostileDistanceGood || Fireball.IsHostileDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (mySettings.UseLowCombat && ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84)
                            {
                                LC = 1;
                                if (ObjectManager.Target.GetDistance < 41)
                                    LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                if (ObjectManager.Target.GetDistance < 41)
                                    Combat();
                            }
                        }
                        else
                        {
                            if (!ObjectManager.Me.IsCast)
                                Patrolling();
                        }
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void Pull()
    {
        if (mySettings.UsePyroblast && Pyroblast.KnownSpell && Pyroblast.IsHostileDistanceGood && Pyroblast.IsSpellUsable
            && ObjectManager.Me.HaveBuff(48108))
        {
            Pyroblast.Launch();
            return;
        }
        else if (mySettings.UsePyroblast && Pyroblast.KnownSpell && Pyroblast.IsHostileDistanceGood && Pyroblast.IsSpellUsable
            && ObjectManager.Me.HaveBuff(48108))
        {
            Pyroblast.Launch();
            return;
        }
        else if (mySettings.UseScorch && Scorch.KnownSpell && Scorch.IsHostileDistanceGood && Scorch.IsSpellUsable)
        {
            Scorch.Launch();
            return;
        }
        else
        {
            if (mySettings.UseFireball && Fireball.KnownSpell && Fireball.IsHostileDistanceGood && Fireball.IsSpellUsable)
            {
                Fireball.Launch();
                return;
            }
        }
    }

    private void LowCombat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        if (OnCD.IsReady)
            DefenseCycle();
        Heal();

        if (mySettings.UsePyroblast && Pyroblast.KnownSpell && Pyroblast.IsHostileDistanceGood && Pyroblast.IsSpellUsable
            && ObjectManager.Me.HaveBuff(48108))
        {
            Pyroblast.Launch();
            return;
        }
        //Blizzard API calls for Inferno Blast using the Fire Blast function.
        else if (mySettings.UseInfernoBlast && FireBlast.KnownSpell && FireBlast.IsHostileDistanceGood && FireBlast.IsSpellUsable)
        {
            FireBlast.Launch();
            return;
        }
        else if (mySettings.UseFireball && Fireball.KnownSpell && Fireball.IsHostileDistanceGood && Fireball.IsSpellUsable)
        {
            Fireball.Launch();
            return;
        }
        else
        {
            if (mySettings.UseArcaneExplosion && ArcaneExplosion.KnownSpell && ArcaneExplosion.IsHostileDistanceGood && ArcaneExplosion.IsSpellUsable)
            {
                ArcaneExplosion.Launch();
                return;
            }
        }
    }

    private void Combat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        DPSCycle();
        if (OnCD.IsReady)
            DefenseCycle();
        Heal();
        Decast();
        DPSBurst();
        DPSCycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (mySettings.UseIceBlock && IceBlock.KnownSpell && ObjectManager.Me.HaveBuff(87023) && !ObjectManager.Me.HaveBuff(41425))
        {
            if (mySettings.UseColdSnap && ColdSnap.KnownSpell && !IceBlock.IsSpellUsable && ColdSnap.IsSpellUsable)
            {
                ColdSnap.Launch();
                Thread.Sleep(400);
            }

            if (IceBlock.IsSpellUsable)
            {
                IceBlock.Launch();
                OnCD = new Timer(1000*10);
                return;
            }
        }

        if (mySettings.UseArcaneBrilliance && ArcaneBrilliance.KnownSpell && !ArcaneBrilliance.HaveBuff && ArcaneBrilliance.IsSpellUsable
            && !ObjectManager.Me.HaveBuff(61316))
            ArcaneBrilliance.Launch();

        if (mySettings.UseMoltenArmor && MoltenArmor.KnownSpell && !MoltenArmor.HaveBuff && MoltenArmor.IsSpellUsable)
            MoltenArmor.Launch();
        else if (mySettings.UseFrostArmor && !mySettings.UseMoltenArmor && FrostArmor.KnownSpell && !FrostArmor.HaveBuff && FrostArmor.IsSpellUsable)
            FrostArmor.Launch();
        else if (mySettings.UseMageArmor && MageArmor.KnownSpell && !mySettings.UseMoltenArmor && !mySettings.UseFrostArmor
                 && !MageArmor.HaveBuff && MageArmor.IsSpellUsable)
            MageArmor.Launch();

        if (mySettings.UseBlazingSpeed && BlazingSpeed.KnownSpell && ObjectManager.Me.GetMove && BlazingSpeed.IsSpellUsable)
        {
            BlazingSpeed.Launch();
            return;
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            var maxTimeTimer = new Timer(1000*2);
            MovementsAction.MoveBackward(true);
            while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                Thread.Sleep(300);
            MovementsAction.MoveBackward(false);
            if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
            {
                MovementsAction.MoveForward(true);
                Thread.Sleep(1000);
                MovementsAction.MoveForward(false);
                MovementManager.Face(ObjectManager.Target.Position);
            }
        }
    }

    private void DefenseCycle()
    {
        if (mySettings.UseIncantersWard && IncantersWard.KnownSpell && !IncantersWard.HaveBuff && IncantersWard.IsSpellUsable 
            && ObjectManager.Me.HealthPercent <= mySettings.UseIncantersWardAtPercentage && ObjectManager.GetNumberAttackPlayer() > 0)
        {
            IncantersWard.Launch();
            return;
        }

        if (mySettings.UseRingofFrost && RingofFrost.KnownSpell && ObjectManager.GetNumberAttackPlayer() > 2 && RingofFrost.IsSpellUsable
            && ObjectManager.Target.GetDistance < 10)
        {
            SpellManager.CastSpellByIDAndPosition(113724, ObjectManager.Target.Position);
            OnCD = new Timer(1000 * 10);
            return;
        }
        else if (mySettings.UseFrostNova && FrostNova.KnownSpell && ObjectManager.Target.GetDistance < 12
                 && ObjectManager.Me.HealthPercent <= mySettings.UseFrostNovaAtPercentage)
        {
            if (mySettings.UseColdSnap && ColdSnap.KnownSpell && !FrostNova.IsSpellUsable && ColdSnap.IsSpellUsable)
            {
                ColdSnap.Launch();
                Thread.Sleep(200);
            }

            if (FrostNova.IsSpellUsable)
            {
                FrostNova.Launch();
                OnCD = new Timer(1000 * 8);
                return;
            }
        }
        else if (mySettings.UseIceWard && IceWard.KnownSpell && ObjectManager.Target.GetDistance < 10 && IceWard.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseIceWardAtPercentage)
        {
            IceWard.Launch();
            OnCD = new Timer(1000 * 5);
            return;
        }
        else if (mySettings.UseConeofCold && ConeofCold.KnownSpell && ObjectManager.Target.GetDistance < 10 && ConeofCold.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseConeofColdAtPercentage)
        {
            ConeofCold.Launch();
            return;
        }
        else if (mySettings.UseBlink && Blink.KnownSpell && ObjectManager.Target.GetDistance < 11 && Blink.IsSpellUsable
                 && (FrostNova.TargetHaveBuff || ConeofCold.TargetHaveBuff || IceWard.TargetHaveBuff))
        {
            Blink.Launch();
            return;
        }
        else if (mySettings.UseDeepFreeze && DeepFreeze.KnownSpell && DeepFreeze.IsHostileDistanceGood && DeepFreeze.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseDeepFreezeAtPercentage)
        {
            DeepFreeze.Launch();
            OnCD = new Timer(1000*5);
            return;
        }
        else if (mySettings.UseIceBarrier && IceBarrier.KnownSpell && !IceBarrier.HaveBuff && IceBarrier.IsSpellUsable 
                 && ObjectManager.Me.HealthPercent <= mySettings.UseIceBarrierAtPercentage)
        {
            IceBarrier.Launch();
            return;
        }
        else if (mySettings.UseTemporalShield && TemporalShield.KnownSpell && !TemporalShield.HaveBuff && TemporalShield.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseTemporalShieldAtPercentage && ObjectManager.GetNumberAttackPlayer() > 0)
        {
            TemporalShield.Launch();
            OnCD = new Timer(1000*4);
            return;
        }
        else if (mySettings.UseWarStomp && WarStomp.KnownSpell && WarStomp.IsHostileDistanceGood && WarStomp.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseWarStompAtPercentage)
        {
            WarStomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else if (mySettings.UseStoneform && Stoneform.KnownSpell && Stoneform.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseStoneformAtPercentage)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else
        {
            if (mySettings.UseInvisibility && Invisibility.KnownSpell && Invisibility.IsSpellUsable 
                && ObjectManager.GetNumberAttackPlayer() > 3)
            {
                Invisibility.Launch();
                Thread.Sleep(5000);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (mySettings.UseArcaneTorrentForResource && ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable
            && ObjectManager.Me.ManaPercentage <= mySettings.UseArcaneTorrentForResourceAtPercentage)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else if (mySettings.UseGiftoftheNaaru && GiftoftheNaaru.KnownSpell && GiftoftheNaaru.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseGiftoftheNaaruAtPercentage)
        {
            GiftoftheNaaru.Launch();
            return;
        }
        else if (mySettings.UseColdSnap && ColdSnap.KnownSpell && ColdSnap.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseColdSnapAtPercentage)
        {
            ColdSnap.Launch();
            return;
        }
        else if (mySettings.UseConjureManaGem && ObjectManager.Me.ManaPercentage <= mySettings.UseConjureManaGemAtPercentage 
                 && ItemsManager.GetItemCountByIdLUA(36799) > 0)
        {
            Logging.WriteFight("Use Mana Gem.");
            Lua.RunMacroText("/use item:36799");
            return;
        }
        else if (mySettings.UseEvocationForHP && mySettings.UseEvocationGlyph && Evocation.KnownSpell && Evocation.IsSpellUsable 
                 && !mySettings.UseRuneofPowerTalent && !mySettings.UseInvocationTalent
                 && ObjectManager.Me.HealthPercent <= mySettings.UseEvocationForHPAtPercentage)
        {
            Evocation.Launch();
            return;
        }
        else if (mySettings.UseEvocationForMana && Evocation.KnownSpell && ObjectManager.GetNumberAttackPlayer() == 0 && Evocation.IsSpellUsable
                 && !mySettings.UseInvocationTalent && !mySettings.UseRuneofPowerTalent
                 && ObjectManager.Me.ManaPercentage <= mySettings.UseEvocationForManaAtPercentage)
        {
            Evocation.Launch();
            return;
        }
        else if (mySettings.UseConjureManaGem && ConjureManaGem.KnownSpell && ItemsManager.GetItemCountByIdLUA(36799) == 0
                 && ConjureManaGemTimer.IsReady && ConjureManaGem.IsSpellUsable)
        {
            ConjureManaGem.Launch();
            ConjureManaGemTimer = new Timer(1000*60*5);
            return;
        }
        else
        {
            if (mySettings.UseConjureRefreshment && ConjureRefreshment.KnownSpell && ConjureRefreshmentTimer.IsReady && ConjureRefreshment.IsSpellUsable 
                && ItemsManager.GetItemCountByIdLUA(80610) == 0 // 90
                && ItemsManager.GetItemCountByIdLUA(65499) == 0 // 85-89
                && ItemsManager.GetItemCountByIdLUA(43523) == 0 // 84-80
                && ItemsManager.GetItemCountByIdLUA(43518) == 0 // 79-74
                && ItemsManager.GetItemCountByIdLUA(65517) == 0 // 73-64
                && ItemsManager.GetItemCountByIdLUA(65516) == 0 // 63-54
                && ItemsManager.GetItemCountByIdLUA(65515) == 0 // 53-44
                && ItemsManager.GetItemCountByIdLUA(65500) == 0) // 43-38
            {
                ConjureRefreshment.Launch();
                ConjureRefreshmentTimer = new Timer(1000*60*10);
                return;
            }
        }
    }

    private void Decast()
    {
        if (mySettings.UseCounterspell && Counterspell.KnownSpell && Counterspell.IsHostileDistanceGood && Counterspell.IsSpellUsable
            && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
            && ObjectManager.Me.HealthPercent <= mySettings.UseCounterspellAtPercentage)
        {
            Counterspell.Launch();
            return;
        }
        else if (mySettings.UseArcaneTorrentForDecast && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8 && ArcaneTorrent.IsSpellUsable
                 && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                 && ObjectManager.Me.HealthPercent <= mySettings.UseArcaneTorrentForDecastAtPercentage)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else
        {
            if (mySettings.UseFrostjaw && Frostjaw.KnownSpell && Frostjaw.IsHostileDistanceGood && Frostjaw.IsSpellUsable
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && ObjectManager.Me.HealthPercent <= mySettings.UseFrostjawAtPercentage)
            {
                Frostjaw.Launch();
                OnCD = new Timer(1000*8);
                return;
            }
        }
    }

    private void DPSBurst()
    {
        if (mySettings.UseAlterTime && AlterTime.KnownSpell && ObjectManager.Target.GetDistance < 41 && AlterTime.IsSpellUsable && !AlterTime.HaveBuff
            && ObjectManager.Target.InCombat && ObjectManager.Me.HaveBuff(48108))
            AlterTime.Launch();

        if (mySettings.UseTrinketOne && TrinketOneTimer.IsReady && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketOneTimer = new Timer(1000*60*2);
        }
        else if (mySettings.UseTrinketTwo && TrinketTwoTimer.IsReady && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketTwoTimer = new Timer(1000*60*2);
        }

        if (mySettings.UseBerserking && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 41 && Berserking.IsSpellUsable)
            Berserking.Launch();
        else if (mySettings.UseBloodFury && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 41 && BloodFury.IsSpellUsable)
            BloodFury.Launch();

        if (mySettings.UseLifeblood && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 41 && Lifeblood.IsSpellUsable)
            Lifeblood.Launch();

        if (mySettings.UseEngGlove && EngineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            EngineeringTimer = new Timer(1000*60);
        }

        if (mySettings.UseInvocationTalent && Evocation.KnownSpell && ObjectManager.Target.GetDistance < 41 && Evocation.IsSpellUsable
                 && !ObjectManager.Me.HaveBuff(116257))
            Evocation.Launch();
        else if (mySettings.UseRuneofPowerTalent && Evocation.KnownSpell && ObjectManager.Target.GetDistance < 41 && Evocation.IsSpellUsable
                 && !ObjectManager.Me.HaveBuff(116014))
            SpellManager.CastSpellByIDAndPosition(116011, ObjectManager.Me.Position);

        if (mySettings.UseCombustion && Combustion.KnownSpell && Combustion.IsHostileDistanceGood && Combustion.IsSpellUsable
                 && ObjectManager.Target.HaveBuff(12654))
            Combustion.Launch();

        if (mySettings.UseMirrorImage && MirrorImage.KnownSpell && ObjectManager.Target.GetDistance < 41 && MirrorImage.IsSpellUsable)
            MirrorImage.Launch();

        if (mySettings.UseTimeWarp && TimeWarp.IsSpellUsable && TimeWarp.KnownSpell && ObjectManager.Target.GetDistance < 41
                && !ObjectManager.Me.HaveBuff(80354) && !ObjectManager.Me.HaveBuff(57724) && !ObjectManager.Me.HaveBuff(57723)
                && !ObjectManager.Me.HaveBuff(95809))
        {
            TimeWarp.Launch();
            return;
        }
    }

    private void DPSCycle()
    {
        if (mySettings.UseIceFloes && IceFloes.KnownSpell && ObjectManager.Me.GetMove && IceFloes.IsSpellUsable)
        {
            IceFloes.Launch();
            return;
        }

        if (mySettings.UseFlamestrike && Flamestrike.KnownSpell && Flamestrike.IsHostileDistanceGood && Flamestrike.IsSpellUsable
            && ObjectManager.GetNumberAttackPlayer() > 4 && FlamestrikeTimer.IsReady)
        {
            SpellManager.CastSpellByIDAndPosition(2120, ObjectManager.Target.Position);
            FlamestrikeTimer = new Timer(1000*8);
            return;
        }
        else if (mySettings.UseArcaneExplosion && ArcaneExplosion.KnownSpell && ArcaneExplosion.IsHostileDistanceGood && ArcaneExplosion.IsSpellUsable
                 && ObjectManager.GetNumberAttackPlayer() > 4)
        {
            ArcaneExplosion.Launch();
            return;
        }

        if (mySettings.UseTierFive && MageBomb.KnownSpell && ObjectManager.Target.GetDistance < 41 && MageBomb.IsSpellUsable
                 && !ObjectManager.Target.HaveBuff(114954) && !ObjectManager.Target.HaveBuff(44457))
        {
            MageBomb.Launch();
            return;
        }
        else if (mySettings.UsePyroblast && Pyroblast.KnownSpell && Pyroblast.IsHostileDistanceGood && Pyroblast.IsSpellUsable
                 && ObjectManager.Me.HaveBuff(48108))
        {
            Pyroblast.Launch();
            return;
        }
        else if (mySettings.UsePresenceofMind && PresenceofMind.KnownSpell && Pyroblast.IsHostileDistanceGood && PresenceofMind.IsSpellUsable)
        {
            PresenceofMind.Launch();
            Thread.Sleep(400);
            if (mySettings.UsePyroblast && Pyroblast.KnownSpell && Pyroblast.IsHostileDistanceGood && Pyroblast.IsSpellUsable)
                Pyroblast.Launch();
            return;
        }
        //Blizzard API calls for Inferno Blast using the Fire Blast function.
        else if (mySettings.UseInfernoBlast && FireBlast.KnownSpell && FireBlast.IsHostileDistanceGood && FireBlast.IsSpellUsable
                 && ObjectManager.Me.HaveBuff(48107))
        {
            FireBlast.Launch();
            return;
        }
        else if (mySettings.UseScorch && Scorch.KnownSpell && Scorch.IsHostileDistanceGood && Scorch.IsSpellUsable
                 && ObjectManager.Me.GetMove && !IceFloes.HaveBuff)
        {
            Scorch.Launch();
            return;
        }
        else
        {
            if (mySettings.UseFireball && Fireball.KnownSpell && Fireball.IsHostileDistanceGood && Fireball.IsSpellUsable
                && (!ObjectManager.Me.HaveBuff(48107) || !mySettings.UseInfernoBlast || !InfernoBlast.IsSpellUsable) 
                && (!ObjectManager.Me.HaveBuff(48108) || !mySettings.UsePyroblast))
            {
                Fireball.Launch();
                return;
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: MageFireSettings

    [Serializable]
    public class MageFireSettings : Settings
    {
        public bool DoAvoidMelee = false;
        public int DoAvoidMeleeDistance = 0;
        public bool UseAlchFlask = true;
        public bool UseAlterTime = true;
        public bool UseArcaneBrilliance = true;
        public bool UseArcaneExplosion = true;
        public bool UseArcaneTorrentForDecast = true;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public bool UseArcaneTorrentForResource = true;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public bool UseBerserking = true;
        public bool UseBlazingSpeed = true;
        public bool UseBlink = true;
        public bool UseBloodFury = true;
        public bool UseColdSnap = true;
        public int UseColdSnapAtPercentage = 70;
        public bool UseCombustion = true;
        public bool UseConeofCold = true;
        public int UseConeofColdAtPercentage = 45;
        public bool UseConjureManaGem = true;
        public int UseConjureManaGemAtPercentage = 40;
        public bool UseConjureRefreshment = true;
        public bool UseCounterspell = true;
        public int UseCounterspellAtPercentage = 100;
        public bool UseDeepFreeze = true;
        public int UseDeepFreezeAtPercentage = 50;
        public bool UseDragonsBreath = true;
        public bool UseEngGlove = true;
        public bool UseEvocationForHP = true;
        public int UseEvocationForHPAtPercentage = 40;
        public bool UseEvocationForMana = true;
        public int UseEvocationForManaAtPercentage = 60;
        public bool UseEvocationGlyph = false;
        public bool UseFireball = true;
        public bool UseFlamestrike = true;
        public bool UseFrostArmor = false;
        public bool UseFrostNova = true;
        public int UseFrostNovaAtPercentage = 50;
        public bool UseFrostjaw = true;
        public int UseFrostjawAtPercentage = 40;
        public bool UseFrozenOrb = true;
        public bool UseGiftoftheNaaru = true;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public bool UseIceBarrier = true;
        public int UseIceBarrierAtPercentage = 95;
        public bool UseIceBlock = true;
        public bool UseIceFloes = false;
        public bool UseIceWard = true;
        public int UseIceWardAtPercentage = 45;
        public bool UseIncantersWard = true;
        public int UseIncantersWardAtPercentage = 95;
        public bool UseInfernoBlast = true;
        public bool UseInvisibility = true;
        public bool UseInvocationTalent = false;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMageArmor = false;
        public bool UseMirrorImage = true;
        public bool UseMoltenArmor = true;
        public bool UsePresenceofMind = true;
        public bool UsePyroblast = true;
        public bool UseRingofFrost = true;
        public bool UseRuneofPowerTalent = false;
        public bool UseScorch = true;
        public bool UseStoneform = true;
        public int UseStoneformAtPercentage = 80;
        public bool UseTemporalShield = true;
        public int UseTemporalShieldAtPercentage = 95;
        public bool UseTierFive = true;
        public bool UseTimeWarp = true;
        public bool UseTrinketOne = true;
        public bool UseTrinketTwo = true;
        public bool UseWarStomp = true;
        public int UseWarStompAtPercentage = 80;

        public MageFireSettings()
        {
            ConfigWinForm(new Point(500, 400), "Mage Fire Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials", "AtPercentage");
            /* Mage Buffs */
            AddControlInWinForm("Use Arcane Brilliance", "UseArcaneBrilliance", "Mage Buffs");
            AddControlInWinForm("Use Blazing Speed", "UseBlazingSpeed", "Mage Buffs");
            AddControlInWinForm("Use Frost Armor", "UseFrostArmor", "Mage Buffs");
            AddControlInWinForm("Use Ice Floes", "UseIceFloes", "Mage Buffs");
            AddControlInWinForm("Use Mage Armor", "UseMageArmor", "Mage Buffs");
            AddControlInWinForm("Use Molten Armor", "UseMoltenArmor", "Mage Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Arcane Explosion", "UseArcaneExplosion", "Offensive Spell");
            AddControlInWinForm("Use Dragon's Breath", "UseDragonsBreath", "Offensive Spell");
            AddControlInWinForm("Use Fireball", "UseFireball", "Offensive Spell");
            AddControlInWinForm("Use Flamestrike", "UseFlamestrike", "Offensive Spell");
            AddControlInWinForm("Use Inferno Blast", "UseInfernoBlast", "Offensive Spell");
            AddControlInWinForm("Use Pyroblast", "UsePyroblast", "Offensive Spell");
            AddControlInWinForm("Use Scorch", "UseScorch", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Alter Time", "UseAlterTime", "Offensive Cooldown");
            AddControlInWinForm("Use Combustion", "UseCombustion", "Offensive Cooldown");
            AddControlInWinForm("Use Frozen Orb", "UseFrozenOrb", "Offensive Cooldown");
            AddControlInWinForm("Use Mirror Image", "UseMirrorImage", "Offensive Cooldown");
            AddControlInWinForm("Use Presence of Mind", "UsePresenceofMind", "Offensive Cooldown");
            AddControlInWinForm("Use Tier Five Talent", "UseTierFive", "Offensive Cooldown");
            AddControlInWinForm("Use Time Warp", "UseTimeWarp", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Blink", "UseBlink", "Defensive Cooldown");
            AddControlInWinForm("Use Cone of Cold", "UseConeofCold", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Counterspell", "UseCounterspell", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use DeepFreeze", "UseDeepFreeze", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Frostjaw", "UseFrostjaw", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Fros Nova", "UseFrostNova", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Ice Barrier", "UseIceBarrier", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Ice Block", "UseIceBlock", "Defensive Cooldown");
            AddControlInWinForm("Use Ice Ward", "UseIceWard", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Incanter's Ward", "UseIncantersWard", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Invisibility", "UseInvisibility", "Defensive Cooldown");
            AddControlInWinForm("Use Ring of Frost", "UseRingofFrost", "Defensive Cooldown");
            AddControlInWinForm("Use Temporal Shield", "UseTemporalShield", "Defensive Cooldown", "AtPercentage");
            /* Healing Spell */
            AddControlInWinForm("Use Cold Snap", "UseColdSnap", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Conjure Mana Gem", "UseConjureManaGem", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Conjure Refreshment", "UseConjureRefreshment", "Healing Spell");
            AddControlInWinForm("Use Evocation to regen Health", "UseEvocationForHP", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Evocation to regen Mana", "UseEvocationForMana", "Healing Spell", "AtPercentage");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
            AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Use Evocation Glyph", "UseEvocationGlyph", "Game Settings");
            AddControlInWinForm("Use Invocation Talent", "UseInvocationTalent", "Game Settings");
            AddControlInWinForm("Use Rune of Power Talent", "UseRuneofPowerTalent", "Game Settings");
            AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
            AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
        }

        public static MageFireSettings CurrentSetting { get; set; }

        public static MageFireSettings GetSettings()
        {
            string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Mage_Fire.xml";
            if (File.Exists(currentSettingsFile))
            {
                return
                    CurrentSetting = Load<MageFireSettings>(currentSettingsFile);
            }
            else
            {
                return new MageFireSettings();
            }
        }
    }

    #endregion
}

#endregion

#region Warlock

public class WarlockDemonology
{
    private readonly WarlockDemonologySettings mySettings = WarlockDemonologySettings.GetSettings();

    #region General Timers & Variables

    private Timer AlchFlaskTimer = new Timer(0);
    private Timer EngineeringTimer = new Timer(0);
    public int LC = 0;
    private Timer OnCD = new Timer(0);
    private Timer TrinketOneTimer = new Timer(0);
    private Timer TrinketTwoTimer = new Timer(0);

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell BloodFury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell WarStomp = new Spell("War Stomp");

    #endregion

    #region Warlock Buffs

    private readonly Spell CurseofEnfeeblement = new Spell("Curse of Enfeeblement");
    private readonly Spell CurseoftheElements = new Spell("Curse of the Elements");
    private readonly Spell DarkIntent = new Spell("Dark Intent");
    private readonly Spell GrimoireofSacrifice = new Spell("Grimoire of Sacrifice");
    private readonly Spell Metamorphosis = new Spell("Metamorphosis");
    private readonly Spell SoulLink = new Spell("Soul Link");
    private readonly Spell Soulstone = new Spell("Soulstone");

    #endregion

    #region Offensive Spell

    private readonly Spell CarrionSwarm = new Spell("Carrion Swarm");
    private readonly Spell CommandDemon = new Spell("Command Demon");
    private readonly Spell Corruption = new Spell("Corruption");
    private readonly Spell Doom = new Spell("Doom");
    private readonly Spell FelFlame = new Spell("Fel Flame");
    private readonly Spell HandofGuldan = new Spell("Hand of Gul'dan");
    private readonly Spell HarvestLife = new Spell("Harvest Life");
    private readonly Spell Hellfire = new Spell("Hellfire");
    private readonly Spell ImmolationAura = new Spell("Immolation Aura");
    private readonly Spell ShadowBolt = new Spell("Shadow Bolt");
    private readonly Spell SoulFire = new Spell("Soul Fire");
    private readonly Spell SummonFelguard = new Spell("Summon Felguard");
    private readonly Spell SummonFelhunter = new Spell("Summon Felhunter");
    private readonly Spell SummonImp = new Spell("Summon Imp");
    private readonly Spell SummonSuccubus = new Spell("Summon Succubus");
    private readonly Spell SummonVoidwalker = new Spell("Summon Voidwalker");
    private readonly Spell TouchofChaos = new Spell("Touch of Chaos");
    private readonly Spell VoidRay = new Spell("Void Ray");
    private Timer DoomTimer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell ArchimondesVengeance = new Spell("Archimonde's Vengeance");
    private readonly Spell DarkSoul = new Spell("Dark Soul");
    private readonly Spell GrimoireofService = new Spell("Grimoire of Service");
    private readonly Spell SummonDoomguard = new Spell("Summon Doomguard");
    private readonly Spell SummonInfernal = new Spell("Summon Infernal");

    #endregion

    #region Defensive Cooldown

    private readonly Spell DarkBargain = new Spell("Dark Bargain");
    private readonly Spell HowlofTerror = new Spell("HowlofTerror");
    private readonly Spell SacrificialPact = new Spell("Sacrificial Pact");
    private readonly Spell Shadowfury = new Spell("Shadowfury");
    private readonly Spell TwilightWard = new Spell("Twilight Ward");
    private readonly Spell UnboundWill = new Spell("Unbound Will");
    private readonly Spell UnendingResolve = new Spell("Unending Resolve");

    #endregion

    #region Healing Spell

    private readonly Spell CreateHealthstone = new Spell("Create Healthstone");
    private readonly Spell DarkRegeneration = new Spell("Dark Regeneration");
    private readonly Spell DrainLife = new Spell("Drain Life");
    private readonly Spell HealthFunnel = new Spell("Health Funnel");
    private readonly Spell LifeTap = new Spell("Life Tap");
    private readonly Spell MortalCoil = new Spell("Mortal Coil");
    private Timer HealthstoneTimer = new Timer(0);

    #endregion

    public WarlockDemonology()
    {
        Main.range = 30.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (Doom.IsHostileDistanceGood || Corruption.IsHostileDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (mySettings.UseLowCombat && ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84)
                            {
                                LC = 1;
                                if (ObjectManager.Target.GetDistance < 41)
                                    LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                if (ObjectManager.Target.GetDistance < 41)
                                    Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(250);
        }
    }

    private void Pull()
    {
        //Blizzard API calls for Doom using the Corruption Function
        if (mySettings.UseDoom && Corruption.KnownSpell && Corruption.IsHostileDistanceGood && Corruption.IsSpellUsable
            && ObjectManager.Me.DemonicFury > 199)
        {
            if (mySettings.UseMetamorphosis && Metamorphosis.KnownSpell && !Metamorphosis.HaveBuff && Metamorphosis.IsSpellUsable)
            {
                Metamorphosis.Launch();
                Thread.Sleep(400);
                Corruption.Launch();
                DoomTimer = new Timer(1000*60);
            }

            if (Metamorphosis.HaveBuff)
            {
                Thread.Sleep(2500);
                Metamorphosis.Launch();
            }
            return;
        }
    }

    private void LowCombat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        if (OnCD.IsReady)
            DefenseCycle();
        Heal();

        if (mySettings.UseLifeTap && LifeTap.KnownSpell && LifeTap.IsSpellUsable 
            && ObjectManager.Me.ManaPercentage <= mySettings.UseLifeTapAtPercentage)
        {
            LifeTap.Launch();
            return;
        }
        else if (mySettings.UseFelFlame && FelFlame.KnownSpell && FelFlame.IsHostileDistanceGood && FelFlame.IsSpellUsable)
        {
            FelFlame.Launch();
            return;
        }
        else
        {
            if (mySettings.UseHellfire && Hellfire.KnownSpell && Hellfire.IsHostileDistanceGood && Hellfire.IsSpellUsable)
            {
                Hellfire.Launch();
                Thread.Sleep(200);
                while (ObjectManager.Me.IsCast && ObjectManager.Target.HealthPercent > 0)
                    Thread.Sleep(200);
                return;
            }
        }
    }

    private void Combat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        DPSCycle();
        if (OnCD.IsReady && (ObjectManager.Me.HealthPercent <= mySettings.UseUnendingResolveAtPercentage || ObjectManager.Me.HealthPercent <= mySettings.UseHowlofTerrorAtPercentage
            || ObjectManager.Me.HealthPercent <= mySettings.UseDarkBargainAtPercentage || ObjectManager.Me.HealthPercent <= mySettings.UseSacrificialPactAtPercentage
            || ObjectManager.Me.HealthPercent <= mySettings.UseShadowfuryAtPercentage || ObjectManager.Me.HealthPercent <= mySettings.UseWarStompAtPercentage
            || ObjectManager.Me.HealthPercent <= mySettings.UseStoneformAtPercentage))
            DefenseCycle();
        if (ObjectManager.Me.ManaPercentage <= mySettings.UseArcaneTorrentForResourceAtPercentage || ObjectManager.Me.HealthPercent <= mySettings.UseGiftoftheNaaruAtPercentage
            || ObjectManager.Me.HealthPercent <= mySettings.UseDarkRegenerationAtPercentage || ObjectManager.Me.HealthPercent <= mySettings.UseCreateHealthstoneAtPercentage
            || ObjectManager.Me.HealthPercent <= mySettings.UseMortalCoilAtPercentage || ObjectManager.Me.HealthPercent <= mySettings.UseDrainLifeAtPercentage)
            Heal();
        Decast();
        DPSBurst();
        DPSCycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        Pet();

        if (mySettings.UseDarkIntent && DarkIntent.KnownSpell && !DarkIntent.HaveBuff && DarkIntent.IsSpellUsable)
            DarkIntent.Launch();
        
        if (mySettings.UseSoulLink && SoulLink.KnownSpell && !SoulLink.HaveBuff && SoulLink.IsSpellUsable
                 && (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0) && ObjectManager.GetNumberAttackPlayer() > 0)
            SoulLink.Launch();

        if (mySettings.UseSoulstone && Soulstone.KnownSpell && !Soulstone.HaveBuff && Soulstone.IsSpellUsable)
            Soulstone.Launch();

        if (mySettings.UseCreateHealthstone && CreateHealthstone.KnownSpell && CreateHealthstone.IsSpellUsable
                && ItemsManager.GetItemCountByIdLUA(5512) == 0)
        {
            Logging.WriteFight(" - Create Healthstone - ");
            CreateHealthstone.Launch();
            while (ObjectManager.Me.IsCast)
                Thread.Sleep(200);
        }
    }

    private void Pet()
    {
        if (mySettings.UseHealthFunnel && HealthFunnel.KnownSpell && ObjectManager.Pet.HealthPercent > 0 && HealthFunnel.IsSpellUsable
            && ObjectManager.Pet.HealthPercent < 50)
        {
            HealthFunnel.Launch();
            while (ObjectManager.Me.IsCast)
            {
                if (ObjectManager.Pet.HealthPercent > 85 || ObjectManager.Pet.IsDead)
                    break;
                Thread.Sleep(100);
            }
        }

        if (mySettings.UseSummonFelhunter && SummonFelhunter.KnownSpell && !GrimoireofSacrifice.HaveBuff && SummonFelhunter.IsSpellUsable
            && ObjectManager.GetNumberAttackPlayer() > 0 && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0))
        {
            Logging.WriteFight(" - PET DEAD - ");
            SummonFelhunter.Launch();
        }
        else if (mySettings.UseSummonFelguard && SummonFelguard.KnownSpell && !GrimoireofSacrifice.HaveBuff && SummonFelguard.IsSpellUsable
                 && ObjectManager.GetNumberAttackPlayer() > 0 && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0))
        {
            Logging.WriteFight(" - PET DEAD - ");
            SummonFelguard.Launch();
        }
        else if (mySettings.UseSummonImp && SummonImp.KnownSpell && !GrimoireofSacrifice.HaveBuff && SummonImp.IsSpellUsable 
                 && ObjectManager.GetNumberAttackPlayer() > 0 && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0))
        {
            Logging.WriteFight(" - PET DEAD - ");
            SummonImp.Launch();
        }
        else if (mySettings.UseSummonVoidwalker && SummonVoidwalker.KnownSpell && !GrimoireofSacrifice.HaveBuff && SummonVoidwalker.IsSpellUsable 
                 && ObjectManager.GetNumberAttackPlayer() > 0 && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0))
        {
            Logging.WriteFight(" - PET DEAD - ");
            SummonVoidwalker.Launch();
        }
        else if (mySettings.UseSummonSuccubus && SummonSuccubus.KnownSpell && !GrimoireofSacrifice.HaveBuff && SummonSuccubus.IsSpellUsable 
                 && ObjectManager.GetNumberAttackPlayer() > 0 && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0))
        {
            Logging.WriteFight(" - PET DEAD - ");
            SummonSuccubus.Launch();
        }

        Thread.Sleep(200);
        if (mySettings.UseGrimoireofSacrifice && GrimoireofSacrifice.KnownSpell && !GrimoireofSacrifice.HaveBuff && GrimoireofSacrifice.IsSpellUsable
            && (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0))
            GrimoireofSacrifice.Launch();
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            var maxTimeTimer = new Timer(1000*2);
            MovementsAction.MoveBackward(true);
            while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                Thread.Sleep(300);
            MovementsAction.MoveBackward(false);
            if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
            {
                MovementsAction.MoveForward(true);
                Thread.Sleep(1000);
                MovementsAction.MoveForward(false);
                MovementManager.Face(ObjectManager.Target.Position);
            }
        }
    }

    private void DefenseCycle()
    {
        if (mySettings.UseUnendingResolve && UnendingResolve.KnownSpell && UnendingResolve.IsSpellUsable 
            && ObjectManager.Me.HealthPercent <= mySettings.UseUnendingResolveAtPercentage)
        {
            UnendingResolve.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (mySettings.UseHowlofTerror && HowlofTerror.KnownSpell && ObjectManager.Target.GetDistance < 8 && HowlofTerror.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseHowlofTerrorAtPercentage)
        {
            HowlofTerror.Launch();
            return;
        }
        else if (mySettings.UseDarkBargain && DarkBargain.KnownSpell && DarkBargain.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseDarkBargainAtPercentage)
        {
            DarkBargain.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (mySettings.UseSacrificialPact && SacrificialPact.KnownSpell && SacrificialPact.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseSacrificialPactAtPercentage
                 && (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0))
        {
            SacrificialPact.Launch();
            OnCD = new Timer(1000*10);
            return;
        }
        else if (mySettings.UseShadowfury && Shadowfury.KnownSpell && Shadowfury.IsHostileDistanceGood && Shadowfury.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseShadowfuryAtPercentage)
        {
            SpellManager.CastSpellByIDAndPosition(30283, ObjectManager.Target.Position);
            OnCD = new Timer(1000*3);
            return;
        }
        else if (mySettings.UseWarStomp && WarStomp.KnownSpell && ObjectManager.Me.HealthPercent <= mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable)
        {
            WarStomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else
        {
            if (mySettings.UseStoneform && Stoneform.KnownSpell && ObjectManager.Me.HealthPercent <= mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable)
            {
                Stoneform.Launch();
                OnCD = new Timer(1000*8);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (mySettings.UseArcaneTorrentForResource && ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable 
            && ObjectManager.Me.ManaPercentage <= mySettings.UseArcaneTorrentForResourceAtPercentage)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else if (mySettings.UseGiftoftheNaaru && GiftoftheNaaru.KnownSpell && GiftoftheNaaru.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseGiftoftheNaaruAtPercentage)
        {
            GiftoftheNaaru.Launch();
            return;
        }
        else if (mySettings.UseDarkRegeneration && DarkRegeneration.KnownSpell && DarkRegeneration.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseDarkRegenerationAtPercentage)
        {
            DarkRegeneration.Launch();
            return;
        }
        else if (mySettings.UseCreateHealthstone && HealthstoneTimer.IsReady && ItemsManager.GetItemCountByIdLUA(5512) > 0
                 && ObjectManager.Me.HealthPercent <= mySettings.UseCreateHealthstoneAtPercentage)
        {
            Logging.WriteFight("Use Healthstone.");
            ItemsManager.UseItem("Healthstone");
            HealthstoneTimer = new Timer(1000*60*2);
            return;
        }
        else if (mySettings.UseMortalCoil && MortalCoil.KnownSpell && MortalCoil.IsHostileDistanceGood && MortalCoil.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseMortalCoilAtPercentage)
        {
            MortalCoil.Launch();
            return;
        }
        else
        {
            if (mySettings.UseDrainLife && DrainLife.KnownSpell && DrainLife.IsHostileDistanceGood && DrainLife.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= mySettings.UseDrainLifeAtPercentage)
            {
                DrainLife.Launch();
                while (ObjectManager.Me.IsCast)
                    Thread.Sleep(200);
                return;
            }
        }
    }

    private void Decast()
    {
        if (mySettings.UseArcaneTorrentForDecast && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8 && ArcaneTorrent.IsSpellUsable
            && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
            && ObjectManager.Me.HealthPercent <= mySettings.UseArcaneTorrentForDecastAtPercentage)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else if (mySettings.UseTwilightWard && TwilightWard.KnownSpell && TwilightWard.IsSpellUsable
                 && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                 && ObjectManager.Me.HealthPercent <= mySettings.UseTwilightWardAtPercentage)
        {
            TwilightWard.Launch();
            return;
        }
        else
        {
            if (mySettings.UseCommandDemon && mySettings.UseSummonFelhunter && CommandDemon.KnownSpell && ObjectManager.Target.GetDistance < 41 && CommandDemon.IsSpellUsable
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
            {
                CommandDemon.Launch();
                return;
            }
        }
    }

    private void DPSBurst()
    {
        if (mySettings.UseTrinketOne && TrinketOneTimer.IsReady && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketOneTimer = new Timer(1000*60*2);
        }
        else if (mySettings.UseTrinketTwo && TrinketTwoTimer.IsReady && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketTwoTimer = new Timer(1000*60*2);
        }

        if (mySettings.UseBerserking && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 41 && Berserking.IsSpellUsable)
            Berserking.Launch();
        else if (mySettings.UseBloodFury && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 41 && BloodFury.IsSpellUsable)
            BloodFury.Launch();

        if (mySettings.UseLifeblood && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 41 && Lifeblood.IsSpellUsable)
            Lifeblood.Launch();

        if (mySettings.UseEngGlove && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 41 && EngineeringTimer.IsReady)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            EngineeringTimer = new Timer(1000*60);
        }

        if (DarkSoul.KnownSpell && DarkSoul.IsSpellUsable
            && mySettings.UseDarkSoul && ObjectManager.Target.GetDistance < 41)
            DarkSoul.Launch();

        if (mySettings.UseSummonDoomguard && SummonDoomguard.KnownSpell && SummonDoomguard.IsHostileDistanceGood && SummonDoomguard.IsSpellUsable)
            SummonDoomguard.Launch();
        else if (mySettings.UseSummonInfernal && SummonInfernal.KnownSpell && SummonInfernal.IsHostileDistanceGood && SummonInfernal.IsSpellUsable)
            SpellManager.CastSpellByIDAndPosition(1122, ObjectManager.Target.Position);

        if (mySettings.UseArchimondesVengeance && ArchimondesVengeance.KnownSpell && ObjectManager.Target.GetDistance < 41 && ArchimondesVengeance.IsSpellUsable)
            ArchimondesVengeance.Launch();

        if (mySettings.UseGrimoireofService && GrimoireofService.KnownSpell && ObjectManager.Target.GetDistance < 41 && GrimoireofService.IsSpellUsable)
        {
            GrimoireofService.Launch();
            return;
        }
    }

    private void DPSCycle()
    {
        if (ObjectManager.Me.DemonicFury > 899 || (DoomTimer.IsReady || !ObjectManager.Target.HaveBuff(603)))
        {
            if (ObjectManager.Me.DemonicFury > 199)
            {
                if (mySettings.UseCorruption && Corruption.KnownSpell && Corruption.IsHostileDistanceGood && Corruption.IsSpellUsable)
                    Corruption.Launch();

                if (mySettings.UseMetamorphosis)
                    MetamorphosisCombat();
            }
        }

        if (Metamorphosis.HaveBuff)
            MetamorphosisCombat();

        if (mySettings.UseCurseoftheElements && CurseoftheElements.KnownSpell && !CurseoftheElements.TargetHaveBuff && CurseoftheElements.IsSpellUsable 
            && CurseoftheElements.IsHostileDistanceGood)
        {
            CurseoftheElements.Launch();
            return;
        }
        else if (mySettings.UseCurseofEnfeeblement && !mySettings.UseCurseoftheElements && CurseofEnfeeblement.KnownSpell && CurseofEnfeeblement.IsSpellUsable
                 && CurseofEnfeeblement.IsHostileDistanceGood && !CurseofEnfeeblement.TargetHaveBuff)
        {
            CurseofEnfeeblement.Launch();
            return;
        }
        else if (mySettings.UseLifeTap && LifeTap.KnownSpell && ObjectManager.Me.ManaPercentage <= mySettings.UseLifeTapAtPercentage && LifeTap.IsSpellUsable)
        {
            LifeTap.Launch();
            return;
        }
        else if (mySettings.UseHarvestLife && ObjectManager.GetNumberAttackPlayer() > 4 && HarvestLife.KnownSpell && HarvestLife.IsSpellUsable
                 && HarvestLife.IsHostileDistanceGood)
        {
            HarvestLife.Launch();
            while (ObjectManager.Me.IsCast)
                Thread.Sleep(200);
            return;
        }
        else if (mySettings.UseHarvestLife && ObjectManager.GetNumberAttackPlayer() > 4 && DrainLife.KnownSpell && DrainLife.IsSpellUsable
                 && DrainLife.IsHostileDistanceGood && !HarvestLife.KnownSpell)
        {
            DrainLife.Launch();
            while (ObjectManager.Me.IsCast)
                Thread.Sleep(200);
            return;
        }
        else if (mySettings.UseCommandDemon && mySettings.UseSummonFelguard && CommandDemon.KnownSpell && ObjectManager.GetNumberAttackPlayer() > 2 && CommandDemon.IsSpellUsable
                 && CommandDemon.IsHostileDistanceGood && ObjectManager.Pet.Health > 0)
        {
            CommandDemon.Launch();
            return;
        }
        else if (mySettings.UseHellfire && (!HarvestLife.KnownSpell || !mySettings.UseHarvestLife) && ObjectManager.GetNumberAttackPlayer() > 4 
                 && Hellfire.KnownSpell && ObjectManager.Target.GetDistance < 20 && Hellfire.IsSpellUsable)
        {
            Hellfire.Launch();
            Thread.Sleep(200);
            while (ObjectManager.Me.IsCast && ObjectManager.Target.HealthPercent > 0)
                Thread.Sleep(200);
            return;
        }
        else if (mySettings.UseCorruption && Corruption.KnownSpell && Corruption.IsHostileDistanceGood && Corruption.IsSpellUsable
                 && !Corruption.TargetHaveBuff)
        {
            Corruption.Launch();
            return;
        }
        else if (mySettings.UseHandofGuldan && HandofGuldan.KnownSpell && HandofGuldan.IsHostileDistanceGood && HandofGuldan.IsSpellUsable
                 && !ObjectManager.Target.HaveBuff(47960))
        {
            HandofGuldan.Launch();
            return;
        }
        else if (mySettings.UseSoulFire && SoulFire.KnownSpell && SoulFire.IsHostileDistanceGood && SoulFire.IsSpellUsable
                 && ObjectManager.Me.HaveBuff(122355))
        {
            SoulFire.Launch();
            return;
        }
        else
        {
            if (mySettings.UseShadowBolt && ShadowBolt.KnownSpell && ShadowBolt.IsHostileDistanceGood && ShadowBolt.IsSpellUsable)
            {
                ShadowBolt.Launch();
                return;
            }
        }
    }

    private void MetamorphosisCombat()
    {
        while (ObjectManager.Me.DemonicFury > 100)
        {
            if (mySettings.UseMetamorphosis && Metamorphosis.KnownSpell && !Metamorphosis.HaveBuff && Metamorphosis.IsSpellUsable)
            {
                Metamorphosis.Launch();
                Thread.Sleep(700);
            }

            if (ObjectManager.GetNumberAttackPlayer() > 2)
            {
                if (mySettings.UseImmolationAura && Hellfire.KnownSpell && Metamorphosis.HaveBuff && Hellfire.IsSpellUsable
                    && ObjectManager.Target.GetDistance < 20)
                {
                    Hellfire.Launch();
                    Thread.Sleep(200);
                }
                else if (mySettings.UseCarrionSwarm && CarrionSwarm.KnownSpell && Metamorphosis.HaveBuff && CarrionSwarm.IsSpellUsable
                         && ObjectManager.Target.GetDistance < 20)
                {
                    CarrionSwarm.Launch();
                    Thread.Sleep(200);
                }
                else
                {
                    if (mySettings.UseVoidRay && FelFlame.KnownSpell && FelFlame.IsHostileDistanceGood && FelFlame.IsSpellUsable
                        && Metamorphosis.HaveBuff)
                    {
                        FelFlame.Launch();
                        Thread.Sleep(200);
                    }
                }
            }
            else
            {
                if (mySettings.UseDoom && Corruption.KnownSpell && Corruption.IsHostileDistanceGood && Metamorphosis.HaveBuff
                    && Corruption.IsSpellUsable && (DoomTimer.IsReady || !ObjectManager.Target.HaveBuff(603)))
                {
                    Corruption.Launch();
                    DoomTimer = new Timer(1000*60);
                    Thread.Sleep(200);
                }

                if (mySettings.UseTouchofChaos && ShadowBolt.KnownSpell && ShadowBolt.IsHostileDistanceGood && ShadowBolt.IsSpellUsable
                    && Metamorphosis.HaveBuff)
                {
                    ShadowBolt.Launch();
                    Thread.Sleep(200);
                }
            }
        }

        Thread.Sleep(700);
        if (Metamorphosis.HaveBuff)
        {
            Metamorphosis.Launch();
            return;
        }
        return;
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: WarlockDemonologySettings

    [Serializable]
    public class WarlockDemonologySettings : Settings
    {
        public bool DoAvoidMelee = false;
        public int DoAvoidMeleeDistance = 0;
        public bool UseAlchFlask = true;
        public bool UseArcaneTorrentForDecast = true;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public bool UseArcaneTorrentForResource = true;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public bool UseArchimondesVengeance = true;
        public bool UseBerserking = true;
        public bool UseBloodFury = true;
        public bool UseCarrionSwarm = true;
        public bool UseCommandDemon = true;
        public bool UseCorruption = true;
        public bool UseCreateHealthstone = true;
        public int UseCreateHealthstoneAtPercentage = 75;
        public bool UseCurseofEnfeeblement = false;
        public bool UseCurseoftheElements = true;
        public bool UseDarkBargain = true;
        public int UseDarkBargainAtPercentage = 40;
        public bool UseDarkIntent = true;
        public bool UseDarkRegeneration = true;
        public int UseDarkRegenerationAtPercentage = 65;
        public bool UseDarkSoul = true;
        public bool UseDoom = true;
        public bool UseDrainLife = true;
        public int UseDrainLifeAtPercentage = 70;
        public bool UseEngGlove = true;
        public bool UseFelFlame = true;
        public bool UseGiftoftheNaaru = true;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public bool UseGrimoireofSacrifice = true;
        public bool UseGrimoireofService = true;
        public bool UseHandofGuldan = true;
        public bool UseHarvestLife = false;
        public bool UseHealthFunnel = true;
        public bool UseHellfire = true;
        public bool UseHowlofTerror = true;
        public int UseHowlofTerrorAtPercentage = 20;
        public bool UseImmolationAura = true;
        public bool UseLifeTap = true;
        public int UseLifeTapAtPercentage = 75;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMetamorphosis = true;
        public bool UseMortalCoil = true;
        public int UseMortalCoilAtPercentage = 85;
        public bool UseSacrificialPact = true;
        public int UseSacrificialPactAtPercentage = 95;
        public bool UseShadowBolt = true;
        public bool UseShadowfury = true;
        public int UseShadowfuryAtPercentage = 90;
        public bool UseSoulFire = true;
        public bool UseSoulLink = true;
        public bool UseSoulstone = true;
        public int UseSpellLockAtPercentage = 100;
        public bool UseStoneform = true;
        public int UseStoneformAtPercentage = 80;
        public bool UseSummonDoomguard = true;
        public bool UseSummonFelguard = true;
        public bool UseSummonFelhunter = false;
        public bool UseSummonImp = false;
        public bool UseSummonInfernal = false;
        public bool UseSummonSuccubus = false;
        public bool UseSummonVoidwalker = false;
        public bool UseTouchofChaos = true;
        public bool UseTrinketOne = true;
        public bool UseTrinketTwo = true;
        public bool UseTwilightWard = true;
        public int UseTwilightWardAtPercentage = 100;
        public bool UseUnboundWill = true;
        public bool UseUnendingResolve = true;
        public int UseUnendingResolveAtPercentage = 70;
        public bool UseVoidRay = true;
        public bool UseWarStomp = true;
        public int UseWarStompAtPercentage = 80;

        public WarlockDemonologySettings()
        {
            ConfigWinForm(new Point(500, 400), "Warlock Demonology Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials", "AtPercentage");
            /* Warlock Buffs */
            AddControlInWinForm("Use Curse of Enfeeblement", "UseCurseofEnfeeblement", "Warlock Buffs");
            AddControlInWinForm("Use Curse of the Elements", "UseCurseoftheElements", "Warlock Buffs");
            AddControlInWinForm("Use Dark Intent", "UseDarkIntent", "Warlock Buffs");
            AddControlInWinForm("Use Grimoire of Sacrifice", "UseGrimoireofSacrifice", "Warlock Buffs");
            AddControlInWinForm("Use Metamorphosis", "UseMetamorphosis", "Warlock Buffs");
            AddControlInWinForm("Use Soul Link ", "UseSoulLink ", "Warlock Buffs");
            AddControlInWinForm("Use Soulstone", "UseSoulstone", "Warlock Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Carrion Swarm", "UseCarrionSwarm", "Offensive Spell");
            AddControlInWinForm("Use Command Demon", "UseCommandDemon", "Offensive Spell");
            AddControlInWinForm("Use Corruption", "UseCorruption", "Offensive Spell");
            AddControlInWinForm("Use Doom", "UseDoom", "Offensive Spell");
            AddControlInWinForm("Use Fel Flame", "UseFelFlame", "Offensive Spell");
            AddControlInWinForm("Use Hand of Guldan", "UseHandofGuldan", "Offensive Spell");
            AddControlInWinForm("Use Harvest Life", "UseHarvestLife", "Offensive Spell");
            AddControlInWinForm("Use Hellfire", "UseHellfire", "Offensive Spell");
            AddControlInWinForm("Use Immolation Aura", "UseImmolationAura", "Offensive Spell");
            AddControlInWinForm("Use Shadow Bolt", "UseShadowBolt", "Offensive Spell");
            AddControlInWinForm("Use Soul Fire", "UseSoulFire", "Offensive Spell");
            AddControlInWinForm("Use Summon Imp", "UseSummonImp", "Offensive Spell");
            AddControlInWinForm("Use Summon Voidwalker", "UseSummonVoidwalker", "Offensive Spell");
            AddControlInWinForm("Use Summon Felhunter", "UseSummonFelhunter", "Offensive Spell");
            AddControlInWinForm("Use Summon Succubus", "UseSummonSuccubus", "Offensive Spell");
            AddControlInWinForm("Use Summon Felguard", "UseSummonFelguard", "Offensive Spell");
            AddControlInWinForm("Use Touch of Chaos", "UseTouchofChaos", "Offensive Spell");
            AddControlInWinForm("Use Void Ray", "UseVoidRay", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Archimonde's Vengeance", "UseArchimondesVengeance", "Offensive Cooldown");
            AddControlInWinForm("Use Dark Soul", "UseDarkSoul", "Offensive Cooldown");
            AddControlInWinForm("Use Grimoire of Service", "UseGrimoireofService", "Offensive Cooldown");
            AddControlInWinForm("Use Summon Doomguard", "UseSummonDoomguard", "Offensive Cooldown");
            AddControlInWinForm("Use Summon Infernal", "UseSummonInfernal", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Dark Bargain", "UseDarkBargain", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Howl of Terror", "UseHowlofTerror", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Sacrificial Pact", "UseSacrificialPact", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Shadowfury", "UseShadowfury", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Twilight Ward", "UseTwilightWard", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Unbound Will", "UseUnboundWill", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Unending Resolve", "UseUnendingResolve", "Defensive Cooldown", "AtPercentage");
            /* Healing Spell */
            AddControlInWinForm("Use Create Healthstone", "UseCreateHealthstone", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Dark Regeneration", "UseDarkRegeneration", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Drain Life", "UseDrainLife", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Health Funnel", "UseHealthFunnel", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Life Tap", "UseLifeTap", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Mortal Coil", "UseMortalCoil", "Healing Spell", "AtPercentage");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
            AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
            AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
        }

        public static WarlockDemonologySettings CurrentSetting { get; set; }

        public static WarlockDemonologySettings GetSettings()
        {
            string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Warlock_Demonology.xml";
            if (File.Exists(currentSettingsFile))
            {
                return
                    CurrentSetting = Load<WarlockDemonologySettings>(currentSettingsFile);
            }
            else
            {
                return new WarlockDemonologySettings();
            }
        }
    }

    #endregion
}

public class WarlockDestruction
{
    private readonly WarlockDestructionSettings mySettings = WarlockDestructionSettings.GetSettings();

    #region General Timers & Variables

    private Timer AlchFlaskTimer = new Timer(0);
    private Timer EngineeringTimer = new Timer(0);
    public int LC = 0;
    private Timer OnCD = new Timer(0);
    private Timer TrinketOneTimer = new Timer(0);
    private Timer TrinketTwoTimer = new Timer(0);

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell BloodFury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell WarStomp = new Spell("War Stomp");

    #endregion

    #region Warlock Buffs

    private readonly Spell CurseofEnfeeblement = new Spell("Curse of Enfeeblement");
    private readonly Spell CurseoftheElements = new Spell("Curse of the Elements");
    private readonly Spell DarkIntent = new Spell("Dark Intent");
    private readonly Spell GrimoireofSacrifice = new Spell("Grimoire of Sacrifice");
    private readonly Spell SoulLink = new Spell("Soul Link");
    private readonly Spell Soulstone = new Spell("Soulstone");

    #endregion

    #region Offensive Spell

    private readonly Spell ChaosBolt = new Spell("Chaos Bolt");
    private readonly Spell CommandDemon = new Spell("Command Demon");
    private readonly Spell Conflagrate = new Spell("Conflagrate");
    private readonly Spell Corruption = new Spell("Corruption");
    private readonly Spell FelFlame = new Spell("Fel Flame");
    private readonly Spell FireandBrimstone = new Spell("Fire and Brimstone");
    private readonly Spell HarvestLife = new Spell("Harvest Life");
    private readonly Spell Immolate = new Spell("Immolate");
    private readonly Spell Incinerate = new Spell("Incinerate");
    private readonly Spell RainofFire = new Spell("Rain of Fire");
    private readonly Spell ShadowBolt = new Spell("Shadow Bolt");
    private readonly Spell Shadowburn = new Spell("Shadowburn");
    private readonly Spell SummonFelhunter = new Spell("Summon Felhunter");
    private readonly Spell SummonImp = new Spell("Summon Imp");
    private readonly Spell SummonSuccubus = new Spell("Summon Succubus");
    private readonly Spell SummonVoidwalker = new Spell("Summon Voidwalker");
    private Timer ImmolateTimer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell ArchimondesVengeance = new Spell("Archimonde's Vengeance");
    private readonly Spell DarkSoul = new Spell("Dark Soul");
    private readonly Spell GrimoireofService = new Spell("Grimoire of Service");
    private readonly Spell SummonDoomguard = new Spell("Summon Doomguard");
    private readonly Spell SummonInfernal = new Spell("Summon Infernal");

    #endregion

    #region Defensive Cooldown

    private readonly Spell DarkBargain = new Spell("Dark Bargain");
    private readonly Spell HowlofTerror = new Spell("HowlofTerror");
    private readonly Spell SacrificialPact = new Spell("Sacrificial Pact");
    private readonly Spell Shadowfury = new Spell("Shadowfury");
    private readonly Spell TwilightWard = new Spell("Twilight Ward");
    private readonly Spell UnboundWill = new Spell("Unbound Will");
    private readonly Spell UnendingResolve = new Spell("Unending Resolve");

    #endregion

    #region Healing Spell

    private readonly Spell CreateHealthstone = new Spell("Create Healthstone");
    private readonly Spell DarkRegeneration = new Spell("Dark Regeneration");
    private readonly Spell DrainLife = new Spell("Drain Life");
    private readonly Spell EmberTap = new Spell("Ember Tap");
    private readonly Spell FlamesofXoroth = new Spell("Flames of Xoroth");
    private readonly Spell HealthFunnel = new Spell("Health Funnel");
    private readonly Spell LifeTap = new Spell("Life Tap");
    private readonly Spell MortalCoil = new Spell("Mortal Coil");
    private Timer HealthstoneTimer = new Timer(0);

    #endregion

    public WarlockDestruction()
    {
        Main.range = 30.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (CurseoftheElements.IsHostileDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (mySettings.UseLowCombat && ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84)
                            {
                                LC = 1;
                                if (ObjectManager.Target.GetDistance < 41)
                                    LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                if (ObjectManager.Target.GetDistance < 41)
                                    Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(250);
        }
    }

    private void Pull()
    {
        if (mySettings.UseCurseoftheElements && CurseoftheElements.KnownSpell && CurseoftheElements.IsSpellUsable
            && CurseoftheElements.IsHostileDistanceGood && !CurseoftheElements.TargetHaveBuff)
        {
            CurseoftheElements.Launch();
            return;
        }
    }

    private void LowCombat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        if (OnCD.IsReady)
            DefenseCycle();
        Heal();

        // Blizzard API Calls for Incinerate using Shadow Bolt Function
        if (mySettings.UseIncinerate && ShadowBolt.KnownSpell && ShadowBolt.IsHostileDistanceGood && ShadowBolt.IsSpellUsable)
        {
            ShadowBolt.Launch();
            return;
        }
        else if (mySettings.UseRainofFire && RainofFire.KnownSpell && RainofFire.IsHostileDistanceGood && RainofFire.IsSpellUsable)
        {
            SpellManager.CastSpellByIDAndPosition(5740, ObjectManager.Target.Position);
            return;
        }
    }

    private void Combat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        DPSCycle();
        if (OnCD.IsReady && (ObjectManager.Me.HealthPercent <= mySettings.UseUnendingResolveAtPercentage || ObjectManager.Me.HealthPercent <= mySettings.UseHowlofTerrorAtPercentage
            || ObjectManager.Me.HealthPercent <= mySettings.UseDarkBargainAtPercentage || ObjectManager.Me.HealthPercent <= mySettings.UseSacrificialPactAtPercentage
            || ObjectManager.Me.HealthPercent <= mySettings.UseShadowfuryAtPercentage || ObjectManager.Me.HealthPercent <= mySettings.UseWarStompAtPercentage
            || ObjectManager.Me.HealthPercent <= mySettings.UseStoneformAtPercentage))
            DefenseCycle();
        if (ObjectManager.Me.ManaPercentage <= mySettings.UseArcaneTorrentForResourceAtPercentage || ObjectManager.Me.HealthPercent <= mySettings.UseGiftoftheNaaruAtPercentage
            || ObjectManager.Me.HealthPercent <= mySettings.UseDarkRegenerationAtPercentage || ObjectManager.Me.HealthPercent <= mySettings.UseCreateHealthstoneAtPercentage
            || ObjectManager.Me.HealthPercent <= mySettings.UseMortalCoilAtPercentage || ObjectManager.Me.HealthPercent <= mySettings.UseDrainLifeAtPercentage
            || ObjectManager.Me.HealthPercent <= mySettings.UseEmberTapAtPercentage && EmberTap.IsSpellUsable)
            Heal();
        Decast();
        DPSBurst();
        DPSCycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        Pet();

        if (mySettings.UseDarkIntent && DarkIntent.KnownSpell && !DarkIntent.HaveBuff && DarkIntent.IsSpellUsable)
            DarkIntent.Launch();
        
        if (mySettings.UseSoulLink && SoulLink.KnownSpell && !SoulLink.HaveBuff && SoulLink.IsSpellUsable
                 && (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0) && ObjectManager.GetNumberAttackPlayer() > 0)
            SoulLink.Launch();

        if (mySettings.UseSoulstone && Soulstone.KnownSpell && !Soulstone.HaveBuff && Soulstone.IsSpellUsable)
            Soulstone.Launch();

        if (mySettings.UseCreateHealthstone && CreateHealthstone.KnownSpell && CreateHealthstone.IsSpellUsable
                && ItemsManager.GetItemCountByIdLUA(5512) == 0)
        {
            Logging.WriteFight(" - Create Healthstone - ");
            CreateHealthstone.Launch();
            while (ObjectManager.Me.IsCast)
                Thread.Sleep(200);
        }
    }

    private void Pet()
    {
        if (mySettings.UseHealthFunnel && HealthFunnel.KnownSpell && ObjectManager.Pet.HealthPercent > 0 && HealthFunnel.IsSpellUsable
            && ObjectManager.Pet.HealthPercent < 50)
        {
            HealthFunnel.Launch();
            while (ObjectManager.Me.IsCast)
            {
                if (ObjectManager.Pet.HealthPercent > 85 || ObjectManager.Pet.IsDead)
                    break;
                Thread.Sleep(100);
            }
        }

        if (mySettings.UseFlamesofXoroth && FlamesofXoroth.KnownSpell && ObjectManager.GetNumberAttackPlayer() > 0 && FlamesofXoroth.IsSpellUsable
            && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0) && !GrimoireofSacrifice.HaveBuff)
        {
            FlamesofXoroth.Launch();
            Logging.WriteFight(" - PET DEAD - ");
        }
        else if (mySettings.UseSummonFelhunter && SummonFelhunter.KnownSpell && !GrimoireofSacrifice.HaveBuff && SummonFelhunter.IsSpellUsable
            && ObjectManager.GetNumberAttackPlayer() > 0 && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0))
        {
            Logging.WriteFight(" - PET DEAD - ");
            SummonFelhunter.Launch();
        }
        else if (mySettings.UseSummonImp && SummonImp.KnownSpell && !GrimoireofSacrifice.HaveBuff && SummonImp.IsSpellUsable 
                 && ObjectManager.GetNumberAttackPlayer() > 0 && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0))
        {
            Logging.WriteFight(" - PET DEAD - ");
            SummonImp.Launch();
        }
        else if (mySettings.UseSummonVoidwalker && SummonVoidwalker.KnownSpell && !GrimoireofSacrifice.HaveBuff && SummonVoidwalker.IsSpellUsable 
                 && ObjectManager.GetNumberAttackPlayer() > 0 && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0))
        {
            Logging.WriteFight(" - PET DEAD - ");
            SummonVoidwalker.Launch();
        }
        else if (mySettings.UseSummonSuccubus && SummonSuccubus.KnownSpell && !GrimoireofSacrifice.HaveBuff && SummonSuccubus.IsSpellUsable 
                 && ObjectManager.GetNumberAttackPlayer() > 0 && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0))
        {
            Logging.WriteFight(" - PET DEAD - ");
            SummonSuccubus.Launch();
        }

        Thread.Sleep(200);
        if (mySettings.UseGrimoireofSacrifice && GrimoireofSacrifice.KnownSpell && !GrimoireofSacrifice.HaveBuff && GrimoireofSacrifice.IsSpellUsable
            && (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0))
            GrimoireofSacrifice.Launch();
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            var maxTimeTimer = new Timer(1000*2);
            MovementsAction.MoveBackward(true);
            while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                Thread.Sleep(300);
            MovementsAction.MoveBackward(false);
            if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
            {
                MovementsAction.MoveForward(true);
                Thread.Sleep(1000);
                MovementsAction.MoveForward(false);
                MovementManager.Face(ObjectManager.Target.Position);
            }
        }
    }

    private void DefenseCycle()
    {
        if (mySettings.UseUnendingResolve && UnendingResolve.KnownSpell && UnendingResolve.IsSpellUsable 
            && ObjectManager.Me.HealthPercent <= mySettings.UseUnendingResolveAtPercentage)
        {
            UnendingResolve.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (mySettings.UseHowlofTerror && HowlofTerror.KnownSpell && ObjectManager.Target.GetDistance < 8 && HowlofTerror.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseHowlofTerrorAtPercentage)
        {
            HowlofTerror.Launch();
            return;
        }
        else if (mySettings.UseDarkBargain && DarkBargain.KnownSpell && DarkBargain.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseDarkBargainAtPercentage)
        {
            DarkBargain.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (mySettings.UseSacrificialPact && SacrificialPact.KnownSpell && SacrificialPact.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseSacrificialPactAtPercentage
                 && (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0))
        {
            SacrificialPact.Launch();
            OnCD = new Timer(1000*10);
            return;
        }
        else if (mySettings.UseShadowfury && Shadowfury.KnownSpell && Shadowfury.IsHostileDistanceGood && Shadowfury.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseShadowfuryAtPercentage)
        {
            SpellManager.CastSpellByIDAndPosition(30283, ObjectManager.Target.Position);
            OnCD = new Timer(1000*3);
            return;
        }
        else if (mySettings.UseWarStomp && WarStomp.KnownSpell && ObjectManager.Me.HealthPercent <= mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable)
        {
            WarStomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else
        {
            if (mySettings.UseStoneform && Stoneform.KnownSpell && ObjectManager.Me.HealthPercent <= mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable)
            {
                Stoneform.Launch();
                OnCD = new Timer(1000*8);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (mySettings.UseArcaneTorrentForResource && ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable 
            && ObjectManager.Me.ManaPercentage <= mySettings.UseArcaneTorrentForResourceAtPercentage)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else if (mySettings.UseGiftoftheNaaru && GiftoftheNaaru.KnownSpell && GiftoftheNaaru.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseGiftoftheNaaruAtPercentage)
        {
            GiftoftheNaaru.Launch();
            return;
        }
        else if (mySettings.UseEmberTap && EmberTap.KnownSpell && ObjectManager.Me.HealthPercent <= mySettings.UseEmberTapAtPercentage && EmberTap.IsSpellUsable)
        {
            EmberTap.Launch();
            return;
        }
        else if (mySettings.UseDarkRegeneration && DarkRegeneration.KnownSpell && DarkRegeneration.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseDarkRegenerationAtPercentage)
        {
            DarkRegeneration.Launch();
            return;
        }
        else if (mySettings.UseCreateHealthstone && HealthstoneTimer.IsReady && ItemsManager.GetItemCountByIdLUA(5512) > 0
                 && ObjectManager.Me.HealthPercent <= mySettings.UseCreateHealthstoneAtPercentage)
        {
            Logging.WriteFight("Use Healthstone.");
            ItemsManager.UseItem("Healthstone");
            HealthstoneTimer = new Timer(1000*60*2);
            return;
        }
        else if (mySettings.UseMortalCoil && MortalCoil.KnownSpell && MortalCoil.IsHostileDistanceGood && MortalCoil.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseMortalCoilAtPercentage)
        {
            MortalCoil.Launch();
            return;
        }
        else
        {
            if (mySettings.UseDrainLife && DrainLife.KnownSpell && DrainLife.IsHostileDistanceGood && DrainLife.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= mySettings.UseDrainLifeAtPercentage)
            {
                DrainLife.Launch();
                while (ObjectManager.Me.IsCast)
                    Thread.Sleep(200);
                return;
            }
        }
    }

    private void Decast()
    {
        if (mySettings.UseArcaneTorrentForDecast && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8 && ArcaneTorrent.IsSpellUsable
            && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
            && ObjectManager.Me.HealthPercent <= mySettings.UseArcaneTorrentForDecastAtPercentage)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else if (mySettings.UseTwilightWard && TwilightWard.KnownSpell && TwilightWard.IsSpellUsable
                 && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                 && ObjectManager.Me.HealthPercent <= mySettings.UseTwilightWardAtPercentage)
        {
            TwilightWard.Launch();
            return;
        }
        else
        {
            if (mySettings.UseCommandDemon && mySettings.UseSummonFelhunter && CommandDemon.KnownSpell && ObjectManager.Target.GetDistance < 41 && CommandDemon.IsSpellUsable
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
            {
                CommandDemon.Launch();
                return;
            }
        }
    }

    private void DPSBurst()
    {
        if (mySettings.UseTrinketOne && TrinketOneTimer.IsReady && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketOneTimer = new Timer(1000*60*2);
        }
        else if (mySettings.UseTrinketTwo && TrinketTwoTimer.IsReady && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketTwoTimer = new Timer(1000*60*2);
        }

        if (mySettings.UseBerserking && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 41 && Berserking.IsSpellUsable)
            Berserking.Launch();
        else if (mySettings.UseBloodFury && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 41 && BloodFury.IsSpellUsable)
            BloodFury.Launch();

        if (mySettings.UseLifeblood && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 41 && Lifeblood.IsSpellUsable)
            Lifeblood.Launch();

        if (mySettings.UseEngGlove && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 41 && EngineeringTimer.IsReady)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            EngineeringTimer = new Timer(1000*60);
        }

        if (DarkSoul.KnownSpell && DarkSoul.IsSpellUsable
            && mySettings.UseDarkSoul && ObjectManager.Target.GetDistance < 41)
            DarkSoul.Launch();

        if (mySettings.UseSummonDoomguard && SummonDoomguard.KnownSpell && SummonDoomguard.IsHostileDistanceGood && SummonDoomguard.IsSpellUsable)
            SummonDoomguard.Launch();
        else if (mySettings.UseSummonInfernal && SummonInfernal.KnownSpell && SummonInfernal.IsHostileDistanceGood && SummonInfernal.IsSpellUsable)
            SpellManager.CastSpellByIDAndPosition(1122, ObjectManager.Target.Position);

        if (mySettings.UseArchimondesVengeance && ArchimondesVengeance.KnownSpell && ObjectManager.Target.GetDistance < 41 && ArchimondesVengeance.IsSpellUsable)
            ArchimondesVengeance.Launch();

        if (mySettings.UseGrimoireofService && GrimoireofService.KnownSpell && ObjectManager.Target.GetDistance < 41 && GrimoireofService.IsSpellUsable)
        {
            GrimoireofService.Launch();
            return;
        }
    }

    private void DPSCycle()
    {
        if (mySettings.UseCurseoftheElements && CurseoftheElements.KnownSpell && CurseoftheElements.IsHostileDistanceGood && CurseoftheElements.IsSpellUsable
            && !CurseoftheElements.TargetHaveBuff)
        {
            CurseoftheElements.Launch();
            return;
        }
        else if (mySettings.UseCurseofEnfeeblement && !mySettings.UseCurseoftheElements && CurseofEnfeeblement.KnownSpell && CurseofEnfeeblement.IsHostileDistanceGood && CurseofEnfeeblement.IsSpellUsable
                 && !CurseofEnfeeblement.TargetHaveBuff)
        {
            CurseofEnfeeblement.Launch();
            return;
        }

        if (ObjectManager.GetNumberAttackPlayer() > 4)
        {
            // Blizzard API Calls for Immolate using Corruption Function
            if (mySettings.UseFireandBrimstone && mySettings.UseImmolate && FireandBrimstone.KnownSpell && FireandBrimstone.IsSpellUsable 
            && !ObjectManager.Target.HaveBuff(348) && Corruption.KnownSpell && Corruption.IsHostileDistanceGood && Corruption.IsSpellUsable)
            {
                FireandBrimstone.Launch();
                Thread.Sleep(200);
                Corruption.Launch();
                ImmolateTimer = new Timer(1000*12);
                return;
            }
            else if (mySettings.UseHarvestLife && ObjectManager.Target.HaveBuff(348) && HarvestLife.KnownSpell 
                 && HarvestLife.IsHostileDistanceGood && HarvestLife.IsSpellUsable)
            {
                HarvestLife.Launch();
                while (ObjectManager.Me.IsCast)
                    Thread.Sleep(200);
                return;
            }
            else if (mySettings.UseHarvestLife && ObjectManager.Target.HaveBuff(348) && DrainLife.KnownSpell 
                 && DrainLife.IsHostileDistanceGood && DrainLife.IsSpellUsable && !HarvestLife.KnownSpell)
            {
                DrainLife.Launch();
                while (ObjectManager.Me.IsCast)
                    Thread.Sleep(200);
                return;
            }
            // Blizzard API Calls for Incinerate using Shadow Bolt Function
            else if (mySettings.UseFireandBrimstone && mySettings.UseIncinerate && FireandBrimstone.KnownSpell && FireandBrimstone.IsSpellUsable 
                 && ShadowBolt.KnownSpell && ShadowBolt.IsHostileDistanceGood && ShadowBolt.IsSpellUsable)
            {
                FireandBrimstone.Launch();
                Thread.Sleep(200);
                ShadowBolt.Launch();
                return;
            }
            else
            {
                if (mySettings.UseRainofFire && RainofFire.KnownSpell && RainofFire.IsHostileDistanceGood && RainofFire.IsSpellUsable)
                {
                    SpellManager.CastSpellByIDAndPosition(5740, ObjectManager.Target.Position);
                    return;
                }
            }
        }

        if (mySettings.UseConflagrate && Conflagrate.KnownSpell && Conflagrate.IsHostileDistanceGood && Conflagrate.IsSpellUsable)
        {
            Conflagrate.Launch();
            return;
        }
        else if (mySettings.UseImmolate && Corruption.KnownSpell && Corruption.IsHostileDistanceGood && Corruption.IsSpellUsable
                && !ObjectManager.Target.HaveBuff(348) || ImmolateTimer.IsReady)
        {
            Corruption.Launch();
            ImmolateTimer = new Timer(1000*12);
            return;
        }
        else if (ObjectManager.Target.HealthPercent < 20 && Shadowburn.KnownSpell && Shadowburn.IsSpellUsable && Shadowburn.IsHostileDistanceGood
            && !ObjectManager.Me.HaveBuff(117828) && mySettings.UseShadowburn)
        {
            Shadowburn.Launch();
            return;
        }
        else if (mySettings.UseChaosBolt && ChaosBolt.KnownSpell && ChaosBolt.IsHostileDistanceGood && ChaosBolt.IsSpellUsable
                && !ObjectManager.Me.HaveBuff(117828))
        {
            ChaosBolt.Launch();
            return;
        }
        else
        {
            if (mySettings.UseIncinerate && ShadowBolt.KnownSpell && ShadowBolt.IsSpellUsable && ShadowBolt.IsHostileDistanceGood)
            {
                ShadowBolt.Launch();
                return;
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: WarlockDestructionSettings

    [Serializable]
    public class WarlockDestructionSettings : Settings
    {
        public bool DoAvoidMelee = false;
        public int DoAvoidMeleeDistance = 0;
        public bool UseAlchFlask = true;
        public bool UseArcaneTorrentForDecast = true;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public bool UseArcaneTorrentForResource = true;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public bool UseArchimondesVengeance = true;
        public bool UseBerserking = true;
        public bool UseBloodFury = true;
        public bool UseChaosBolt = true;
        public bool UseCommandDemon = true;
        public bool UseConflagrate = true;
        public bool UseCreateHealthstone = true;
        public int UseCreateHealthstoneAtPercentage = 75;
        public bool UseCurseofEnfeeblement = false;
        public bool UseCurseoftheElements = true;
        public bool UseDarkBargain = true;
        public int UseDarkBargainAtPercentage = 40;
        public bool UseDarkIntent = true;
        public bool UseDarkRegeneration = true;
        public int UseDarkRegenerationAtPercentage = 65;
        public bool UseDarkSoul = true;
        public bool UseDrainLife = true;
        public int UseDrainLifeAtPercentage = 70;
        public bool UseEmberTap = true;
        public int UseEmberTapAtPercentage = 60;
        public bool UseEngGlove = true;
        public bool UseFelFlame = true;
        public bool UseFireandBrimstone = true;
        public bool UseFlamesofXoroth = true;
        public bool UseGiftoftheNaaru = true;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public bool UseGrimoireofSacrifice = true;
        public bool UseGrimoireofService = true;
        public bool UseHarvestLife = false;
        public bool UseHealthFunnel = true;
        public bool UseHowlofTerror = true;
        public int UseHowlofTerrorAtPercentage = 20;
        public bool UseImmolate = true;
        public bool UseIncinerate = true;
        public bool UseLifeTap = true;
        public int UseLifeTapAtPercentage = 75;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMortalCoil = true;
        public int UseMortalCoilAtPercentage = 85;
        public bool UseRainofFire = true;
        public bool UseSacrificialPact = true;
        public int UseSacrificialPactAtPercentage = 95;
        public bool UseShadowburn = true;
        public bool UseShadowfury = true;
        public int UseShadowfuryAtPercentage = 90;
        public bool UseSoulLink = true;
        public bool UseSoulstone = true;
        public int UseSpellLockAtPercentage = 100;
        public bool UseStoneform = true;
        public int UseStoneformAtPercentage = 80;
        public bool UseSummonDoomguard = true;
        public bool UseSummonFelhunter = true;
        public bool UseSummonImp = false;
        public bool UseSummonInfernal = false;
        public bool UseSummonSuccubus = false;
        public bool UseSummonVoidwalker = false;
        public bool UseTrinketOne = true;
        public bool UseTrinketTwo = true;
        public bool UseTwilightWard = true;
        public int UseTwilightWardAtPercentage = 100;
        public bool UseUnboundWill = true;
        public bool UseUnendingResolve = true;
        public int UseUnendingResolveAtPercentage = 70;
        public bool UseWarStomp = true;
        public int UseWarStompAtPercentage = 80;

        public WarlockDestructionSettings()
        {
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials", "AtPercentage");
            /* Warlock Buffs */
            AddControlInWinForm("Use Curse of Enfeeblement", "UseCurseofEnfeeblement", "Warlock Buffs");
            AddControlInWinForm("Use Curse of the Elements", "UseCurseoftheElements", "Warlock Buffs");
            AddControlInWinForm("Use Dark Intent", "UseDarkIntent", "Warlock Buffs");
            AddControlInWinForm("Use Grimoire of Sacrifice", "UseGrimoireofSacrifice", "Warlock Buffs");
            AddControlInWinForm("Use Soul Link ", "UseSoulLink ", "Warlock Buffs");
            AddControlInWinForm("Use Soulstone", "UseSoulstone", "Warlock Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Chaos Bolt", "UseChaosBolt", "Offensive Spell");
            AddControlInWinForm("Use Command Demon", "UseCommandDemon", "Offensive Spell");
            AddControlInWinForm("Use Conflagrate", "UseConflagrate", "Offensive Spell");
            AddControlInWinForm("Use Fel Flame", "UseFelFlame", "Offensive Spell");
            AddControlInWinForm("Use Fire and Brimstone", "UseFireandBrimstone", "Offensive Spell");
            AddControlInWinForm("Use Harvest Life", "UseHarvestLife", "Offensive Spell");
            AddControlInWinForm("Use Immolate", "UseImmolate", "Offensive Spell");
            AddControlInWinForm("Use Incinerate", "UseIncinerate", "Offensive Spell");
            AddControlInWinForm("Use Rain of Fire", "UseRainofFire", "Offensive Spell");
            AddControlInWinForm("Use Shadowburn", "UseShadowburn", "Offensive Spell");
            AddControlInWinForm("Use Summon Imp", "UseSummonImp", "Offensive Spell");
            AddControlInWinForm("Use Summon Voidwalker", "UseSummonVoidwalker", "Offensive Spell");
            AddControlInWinForm("Use Summon Felhunter", "UseSummonFelhunter", "Offensive Spell");
            AddControlInWinForm("Use Summon Succubus", "UseSummonSuccubus", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Archimonde's Vengeance", "UseArchimondesVengeance", "Offensive Cooldown");
            AddControlInWinForm("Use Dark Soul", "UseDarkSoul", "Offensive Cooldown");
            AddControlInWinForm("Use Grimoire of Service", "UseGrimoireofService", "Offensive Cooldown");
            AddControlInWinForm("Use Summon Doomguard", "UseSummonDoomguard", "Offensive Cooldown");
            AddControlInWinForm("Use Summon Infernal", "UseSummonInfernal", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Dark Bargain", "UseDarkBargain", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Howl of Terror", "UseHowlofTerror", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Sacrificial Pact", "UseSacrificialPact", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Shadowfury", "UseShadowfury", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Spell Lock", "UseSpellLock", "Offensive Spell", "AtPercentage");
            AddControlInWinForm("Use Twilight Ward", "UseTwilightWard", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Unbound Will", "UseUnboundWill", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Unending Resolve", "UseUnendingResolve", "Defensive Cooldown", "AtPercentage");
            /* Healing Spell */
            AddControlInWinForm("Use Create Healthstone", "UseCreateHealthstone", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Dark Regeneration", "UseDarkRegeneration", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Drain Life", "UseDrainLife", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Ember Tap", "UseEmberTap", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Flames of Xoroth", "UseFlamesofXoroth", "Healing Spell");
            AddControlInWinForm("Use Health Funnel", "UseHealthFunnel", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Life Tap", "UseLifeTap", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Mortal Coil", "UseMortalCoil", "Healing Spell", "AtPercentage");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
            AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
            AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
        }

        public static WarlockDestructionSettings CurrentSetting { get; set; }

        public static WarlockDestructionSettings GetSettings()
        {
            string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Warlock_Destruction.xml";
            if (File.Exists(currentSettingsFile))
            {
                return
                    CurrentSetting = Load<WarlockDestructionSettings>(currentSettingsFile);
            }
            else
            {
                return new WarlockDestructionSettings();
            }
        }
    }

    #endregion
}

public class WarlockAffliction
{
    private readonly WarlockAfflictionSettings mySettings = WarlockAfflictionSettings.GetSettings();

    #region General Timers & Variables

    private Timer AlchFlaskTimer = new Timer(0);
    private Timer EngineeringTimer = new Timer(0);
    public int LC = 0;
    private Timer OnCD = new Timer(0);
    private Timer TrinketOneTimer = new Timer(0);
    private Timer TrinketTwoTimer = new Timer(0);

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell BloodFury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell WarStomp = new Spell("War Stomp");

    #endregion

    #region Warlock Buffs

    private readonly Spell CurseofEnfeeblement = new Spell("Curse of Enfeeblement");
    private readonly Spell CurseofExhaustion = new Spell("Curse of Exhaustion");
    private readonly Spell CurseoftheElements = new Spell("Curse of the Elements");
    private readonly Spell DarkIntent = new Spell("Dark Intent");
    private readonly Spell GrimoireofSacrifice = new Spell("Grimoire of Sacrifice");
    private readonly Spell SoulLink = new Spell("Soul Link");
    private readonly Spell Soulstone = new Spell("Soulstone");

    #endregion

    #region Offensive Spell

    private readonly Spell Agony = new Spell("Agony");
    private readonly Spell CommandDemon = new Spell("Command Demon");
    private readonly Spell Corruption = new Spell("Corruption");
    private readonly Spell DrainSoul = new Spell("Drain Soul");
    private readonly Spell FelFlame = new Spell("Fel Flame");
    private readonly Spell HarvestLife = new Spell("Harvest Life");
    private readonly Spell Haunt = new Spell("Haunt");
    private readonly Spell MaleficGrasp = new Spell("Malefic Grasp");
    private readonly Spell RainofFire = new Spell("Rain of Fire");
    private readonly Spell SeedofCorruption = new Spell("Seed of Corruption");
    private readonly Spell ShadowBolt = new Spell("Shadow Bolt");
    private readonly Spell SoulSwap = new Spell("Soul Swap");
    private readonly Spell Soulburn = new Spell("Soulburn");
    private readonly Spell SummonFelguard = new Spell("Summon Felguard");
    private readonly Spell SummonFelhunter = new Spell("Summon Felhunter");
    private readonly Spell SummonImp = new Spell("Summon Imp");
    private readonly Spell SummonSuccubus = new Spell("Summon Succubus");
    private readonly Spell SummonVoidwalker = new Spell("Summon Voidwalker");
    private readonly Spell UnstableAffliction = new Spell("Unstable Affliction");
    private Timer AgonyTimer = new Timer(0);
    private Timer CorruptionTimer = new Timer(0);
    private Timer UnstableAfflictionTimer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell ArchimondesVengeance = new Spell("Archimonde's Vengeance");
    private readonly Spell DarkSoul = new Spell("Dark Soul");
    private readonly Spell GrimoireofService = new Spell("Grimoire of Service");
    private readonly Spell SummonDoomguard = new Spell("Summon Doomguard");
    private readonly Spell SummonInfernal = new Spell("Summon Infernal");

    #endregion

    #region Defensive Cooldown

    private readonly Spell DarkBargain = new Spell("Dark Bargain");
    private readonly Spell HowlofTerror = new Spell("HowlofTerror");
    private readonly Spell SacrificialPact = new Spell("Sacrificial Pact");
    private readonly Spell Shadowfury = new Spell("Shadowfury");
    private readonly Spell TwilightWard = new Spell("Twilight Ward");
    private readonly Spell UnboundWill = new Spell("Unbound Will");
    private readonly Spell UnendingResolve = new Spell("Unending Resolve");

    #endregion

    #region Healing Spell

    private readonly Spell CreateHealthstone = new Spell("Create Healthstone");
    private readonly Spell DarkRegeneration = new Spell("Dark Regeneration");
    private readonly Spell DrainLife = new Spell("Drain Life");
    private readonly Spell HealthFunnel = new Spell("Health Funnel");
    private readonly Spell LifeTap = new Spell("Life Tap");
    private readonly Spell MortalCoil = new Spell("Mortal Coil");
    private Timer HealthstoneTimer = new Timer(0);

    #endregion

    public WarlockAffliction()
    {
        Main.range = 30.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (SoulSwap.IsHostileDistanceGood || Agony.IsHostileDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (mySettings.UseLowCombat && ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84)
                            {
                                LC = 1;
                                if (ObjectManager.Target.GetDistance < 41)
                                    LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                if (ObjectManager.Target.GetDistance < 41)
                                    Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(250);
        }
    }

    private void Pull()
    {
        if (!Agony.TargetHaveBuff && !Corruption.TargetHaveBuff && !UnstableAffliction.TargetHaveBuff)
        {
            if (mySettings.UseSoulSwap && mySettings.UseSoulburn && Soulburn.KnownSpell && SoulSwap.KnownSpell && Soulburn.IsSpellUsable && SoulSwap.IsSpellUsable
                && SoulSwap.IsHostileDistanceGood)
            {
                if (!Soulburn.HaveBuff)
                {
                    Soulburn.Launch();
                    Thread.Sleep(200);
                }

                SoulSwap.Launch();
                AgonyTimer = new Timer(1000*21);
                CorruptionTimer = new Timer(1000*15);
                UnstableAfflictionTimer = new Timer(1000*11);
            }
        }
        return;
    }

    private void LowCombat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        if (OnCD.IsReady)
            DefenseCycle();
        Heal();

        if (mySettings.UseLifeTap && LifeTap.KnownSpell && ObjectManager.Me.ManaPercentage < 75 && LifeTap.IsSpellUsable)
        {
            LifeTap.Launch();
            return;
        }

        if (mySettings.UseMaleficGrasp && MaleficGrasp.KnownSpell && MaleficGrasp.IsHostileDistanceGood && MaleficGrasp.IsSpellUsable)
        {
            MaleficGrasp.Launch();
            Thread.Sleep(200);
            while (ObjectManager.Me.IsCast)
                Thread.Sleep(200);
        }
        else
        {
            if (mySettings.UseRainofFire && RainofFire.KnownSpell && RainofFire.IsHostileDistanceGood && RainofFire.IsSpellUsable)
            {
                SpellManager.CastSpellByIDAndPosition(5740, ObjectManager.Target.Position);
                while (ObjectManager.Me.IsCast)
                    Thread.Sleep(200);
                return;
            }
        }
    }

    private void Combat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        DPSCycle();
        if (OnCD.IsReady && (ObjectManager.Me.HealthPercent <= mySettings.UseUnendingResolveAtPercentage || ObjectManager.Me.HealthPercent <= mySettings.UseHowlofTerrorAtPercentage
            || ObjectManager.Me.HealthPercent <= mySettings.UseDarkBargainAtPercentage || ObjectManager.Me.HealthPercent <= mySettings.UseSacrificialPactAtPercentage
            || ObjectManager.Me.HealthPercent <= mySettings.UseShadowfuryAtPercentage || ObjectManager.Me.HealthPercent <= mySettings.UseWarStompAtPercentage
            || ObjectManager.Me.HealthPercent <= mySettings.UseStoneformAtPercentage))
            DefenseCycle();
        if (ObjectManager.Me.ManaPercentage <= mySettings.UseArcaneTorrentForResourceAtPercentage || ObjectManager.Me.HealthPercent <= mySettings.UseGiftoftheNaaruAtPercentage
            || ObjectManager.Me.HealthPercent <= mySettings.UseDarkRegenerationAtPercentage || ObjectManager.Me.HealthPercent <= mySettings.UseCreateHealthstoneAtPercentage
            || ObjectManager.Me.HealthPercent <= mySettings.UseMortalCoilAtPercentage || ObjectManager.Me.HealthPercent <= mySettings.UseDrainLifeAtPercentage)
            Heal();
        Decast();
        DPSBurst();
        DPSCycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        Pet();

        if (mySettings.UseDarkIntent && DarkIntent.KnownSpell && !DarkIntent.HaveBuff && DarkIntent.IsSpellUsable)
            DarkIntent.Launch();

        if (mySettings.UseSoulLink && SoulLink.KnownSpell && !SoulLink.HaveBuff && SoulLink.IsSpellUsable
                 && (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0) && ObjectManager.GetNumberAttackPlayer() > 0)
            SoulLink.Launch();

        if (mySettings.UseSoulstone && Soulstone.KnownSpell && !Soulstone.HaveBuff && Soulstone.IsSpellUsable)
            Soulstone.Launch();

        if (mySettings.UseCreateHealthstone && CreateHealthstone.KnownSpell && CreateHealthstone.IsSpellUsable
                && ItemsManager.GetItemCountByIdLUA(5512) == 0)
        {
            Logging.WriteFight(" - Create Healthstone - ");
            CreateHealthstone.Launch();
            while (ObjectManager.Me.IsCast)
                Thread.Sleep(200);
        }
    }

    private void Pet()
    {
        if (mySettings.UseHealthFunnel && HealthFunnel.KnownSpell && ObjectManager.Pet.HealthPercent > 0 && HealthFunnel.IsSpellUsable
            && ObjectManager.Pet.HealthPercent < 50)
        {
            HealthFunnel.Launch();
            while (ObjectManager.Me.IsCast)
            {
                if (ObjectManager.Pet.HealthPercent > 85 || ObjectManager.Pet.IsDead)
                    break;
                Thread.Sleep(100);
            }
        }

        if (mySettings.UseSummonFelhunter && SummonFelhunter.KnownSpell && !GrimoireofSacrifice.HaveBuff && SummonFelhunter.IsSpellUsable
            && ObjectManager.GetNumberAttackPlayer() > 0 && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0))
        {
            Logging.WriteFight(" - PET DEAD - ");
            SummonFelhunter.Launch();
        }
        else if (mySettings.UseSummonImp && SummonImp.KnownSpell && !GrimoireofSacrifice.HaveBuff && SummonImp.IsSpellUsable 
                 && ObjectManager.GetNumberAttackPlayer() > 0 && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0))
        {
            Logging.WriteFight(" - PET DEAD - ");
            SummonImp.Launch();
        }
        else if (mySettings.UseSummonVoidwalker && SummonVoidwalker.KnownSpell && !GrimoireofSacrifice.HaveBuff && SummonVoidwalker.IsSpellUsable 
                 && ObjectManager.GetNumberAttackPlayer() > 0 && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0))
        {
            Logging.WriteFight(" - PET DEAD - ");
            SummonVoidwalker.Launch();
        }
        else if (mySettings.UseSummonSuccubus && SummonSuccubus.KnownSpell && !GrimoireofSacrifice.HaveBuff && SummonSuccubus.IsSpellUsable 
                 && ObjectManager.GetNumberAttackPlayer() > 0 && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0))
        {
            Logging.WriteFight(" - PET DEAD - ");
            SummonSuccubus.Launch();
        }

        Thread.Sleep(200);
        if (mySettings.UseGrimoireofSacrifice && GrimoireofSacrifice.KnownSpell && !GrimoireofSacrifice.HaveBuff && GrimoireofSacrifice.IsSpellUsable
            && (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0))
            GrimoireofSacrifice.Launch();
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            var maxTimeTimer = new Timer(1000*2);
            MovementsAction.MoveBackward(true);
            while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                Thread.Sleep(300);
            MovementsAction.MoveBackward(false);
            if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
            {
                MovementsAction.MoveForward(true);
                Thread.Sleep(1000);
                MovementsAction.MoveForward(false);
                MovementManager.Face(ObjectManager.Target.Position);
            }
        }
    }

    private void DefenseCycle()
    {
        if (mySettings.UseUnendingResolve && UnendingResolve.KnownSpell && UnendingResolve.IsSpellUsable 
            && ObjectManager.Me.HealthPercent <= mySettings.UseUnendingResolveAtPercentage)
        {
            UnendingResolve.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (mySettings.UseHowlofTerror && HowlofTerror.KnownSpell && ObjectManager.Target.GetDistance < 8 && HowlofTerror.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseHowlofTerrorAtPercentage)
        {
            HowlofTerror.Launch();
            return;
        }
        else if (mySettings.UseDarkBargain && DarkBargain.KnownSpell && DarkBargain.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseDarkBargainAtPercentage)
        {
            DarkBargain.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (mySettings.UseSacrificialPact && SacrificialPact.KnownSpell && SacrificialPact.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseSacrificialPactAtPercentage
                 && (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0))
        {
            SacrificialPact.Launch();
            OnCD = new Timer(1000*10);
            return;
        }
        else if (mySettings.UseShadowfury && Shadowfury.KnownSpell && Shadowfury.IsHostileDistanceGood && Shadowfury.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseShadowfuryAtPercentage)
        {
            SpellManager.CastSpellByIDAndPosition(30283, ObjectManager.Target.Position);
            OnCD = new Timer(1000*3);
            return;
        }
        else if (mySettings.UseWarStomp && WarStomp.KnownSpell && ObjectManager.Me.HealthPercent <= mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable)
        {
            WarStomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else
        {
            if (mySettings.UseStoneform && Stoneform.KnownSpell && ObjectManager.Me.HealthPercent <= mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable)
            {
                Stoneform.Launch();
                OnCD = new Timer(1000*8);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (mySettings.UseArcaneTorrentForResource && ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable 
            && ObjectManager.Me.ManaPercentage <= mySettings.UseArcaneTorrentForResourceAtPercentage)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else if (mySettings.UseGiftoftheNaaru && GiftoftheNaaru.KnownSpell && GiftoftheNaaru.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseGiftoftheNaaruAtPercentage)
        {
            GiftoftheNaaru.Launch();
            return;
        }
        else if (mySettings.UseDarkRegeneration && DarkRegeneration.KnownSpell && DarkRegeneration.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseDarkRegenerationAtPercentage)
        {
            DarkRegeneration.Launch();
            return;
        }
        else if (mySettings.UseCreateHealthstone && HealthstoneTimer.IsReady && ItemsManager.GetItemCountByIdLUA(5512) > 0
                 && ObjectManager.Me.HealthPercent <= mySettings.UseCreateHealthstoneAtPercentage)
        {
            Logging.WriteFight("Use Healthstone.");
            ItemsManager.UseItem("Healthstone");
            HealthstoneTimer = new Timer(1000*60*2);
            return;
        }
        else if (mySettings.UseMortalCoil && MortalCoil.KnownSpell && MortalCoil.IsHostileDistanceGood && MortalCoil.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseMortalCoilAtPercentage)
        {
            MortalCoil.Launch();
            return;
        }
        else
        {
            if (mySettings.UseDrainLife && DrainLife.KnownSpell && DrainLife.IsHostileDistanceGood && DrainLife.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= mySettings.UseDrainLifeAtPercentage)
            {
                DrainLife.Launch();
                while (ObjectManager.Me.IsCast)
                    Thread.Sleep(200);
                return;
            }
        }
    }

    private void Decast()
    {
        if (mySettings.UseArcaneTorrentForDecast && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8 && ArcaneTorrent.IsSpellUsable
            && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
            && ObjectManager.Me.HealthPercent <= mySettings.UseArcaneTorrentForDecastAtPercentage)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else if (mySettings.UseTwilightWard && TwilightWard.KnownSpell && TwilightWard.IsSpellUsable
                 && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                 && ObjectManager.Me.HealthPercent <= mySettings.UseTwilightWardAtPercentage)
        {
            TwilightWard.Launch();
            return;
        }
        else
        {
            if (mySettings.UseCommandDemon && mySettings.UseSummonFelhunter && CommandDemon.KnownSpell && ObjectManager.Target.GetDistance < 41 && CommandDemon.IsSpellUsable
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
            {
                CommandDemon.Launch();
                return;
            }
        }
    }

    private void DPSBurst()
    {
        if (mySettings.UseTrinketOne && TrinketOneTimer.IsReady && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketOneTimer = new Timer(1000*60*2);
        }
        else if (mySettings.UseTrinketTwo && TrinketTwoTimer.IsReady && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketTwoTimer = new Timer(1000*60*2);
        }

        if (mySettings.UseBerserking && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 41 && Berserking.IsSpellUsable)
            Berserking.Launch();
        else if (mySettings.UseBloodFury && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 41 && BloodFury.IsSpellUsable)
            BloodFury.Launch();

        if (mySettings.UseLifeblood && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 41 && Lifeblood.IsSpellUsable)
            Lifeblood.Launch();

        if (mySettings.UseEngGlove && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 41 && EngineeringTimer.IsReady)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            EngineeringTimer = new Timer(1000*60);
        }

        if (DarkSoul.KnownSpell && DarkSoul.IsSpellUsable
            && mySettings.UseDarkSoul && ObjectManager.Target.GetDistance < 41)
            DarkSoul.Launch();

        if (mySettings.UseSummonDoomguard && SummonDoomguard.KnownSpell && SummonDoomguard.IsHostileDistanceGood && SummonDoomguard.IsSpellUsable)
            SummonDoomguard.Launch();
        else if (mySettings.UseSummonInfernal && SummonInfernal.KnownSpell && SummonInfernal.IsHostileDistanceGood && SummonInfernal.IsSpellUsable)
            SpellManager.CastSpellByIDAndPosition(1122, ObjectManager.Target.Position);

        if (mySettings.UseArchimondesVengeance && ArchimondesVengeance.KnownSpell && ObjectManager.Target.GetDistance < 41 && ArchimondesVengeance.IsSpellUsable)
            ArchimondesVengeance.Launch();

        if (mySettings.UseGrimoireofService && GrimoireofService.KnownSpell && ObjectManager.Target.GetDistance < 41 && GrimoireofService.IsSpellUsable)
        {
            GrimoireofService.Launch();
            return;
        }
    }

    private void DPSCycle()
    {
        if (mySettings.UseCurseoftheElements && CurseoftheElements.KnownSpell && CurseoftheElements.IsHostileDistanceGood && CurseoftheElements.IsSpellUsable
            && !CurseoftheElements.TargetHaveBuff)
        {
            CurseoftheElements.Launch();
            return;
        }
        else if (mySettings.UseCurseofEnfeeblement && !mySettings.UseCurseoftheElements && CurseofEnfeeblement.KnownSpell && CurseofEnfeeblement.IsSpellUsable
                 && CurseofEnfeeblement.IsHostileDistanceGood && !CurseofEnfeeblement.TargetHaveBuff)
        {
            CurseofEnfeeblement.Launch();
            return;
        }
        else if (mySettings.UseCurseofExhaustion && !mySettings.UseCurseoftheElements && !mySettings.UseCurseofEnfeeblement && CurseofExhaustion.KnownSpell && CurseofExhaustion.IsSpellUsable
                 && CurseofExhaustion.IsHostileDistanceGood && !CurseofExhaustion.TargetHaveBuff)
        {
            CurseofExhaustion.Launch();
            return;
        }

        if (mySettings.UseLifeTap && LifeTap.KnownSpell && ObjectManager.Me.ManaPercentage <= mySettings.UseLifeTapAtPercentage && LifeTap.IsSpellUsable)
        {
            LifeTap.Launch();
            return;
        }

        if (ObjectManager.Target.HealthPercent < 20 && mySettings.UseDrainSoul)
        {
            if (DrainSoul.KnownSpell && DrainSoul.IsHostileDistanceGood && DrainSoul.IsSpellUsable)
            {
                DrainSoul.Launch();
                while (ObjectManager.Me.IsCast && !AgonyTimer.IsReady && !CorruptionTimer.IsReady && !UnstableAfflictionTimer.IsReady)
                    Thread.Sleep(200);
            }

            if (AgonyTimer.IsReady || CorruptionTimer.IsReady || UnstableAfflictionTimer.IsReady)
            {
                if (mySettings.UseSoulburn && mySettings.UseSoulSwap && Soulburn.KnownSpell && SoulSwap.KnownSpell && Soulburn.IsSpellUsable && SoulSwap.IsSpellUsable
                    && SoulSwap.IsHostileDistanceGood)
                {
                    Soulburn.Launch();
                    Thread.Sleep(200);
                    SoulSwap.Launch();
                    AgonyTimer = new Timer(1000*21);
                    CorruptionTimer = new Timer(1000*15);
                    UnstableAfflictionTimer = new Timer(1000*11);
                }
            }
        }

        if (ObjectManager.GetNumberAttackPlayer() > 4)
        {
            if (mySettings.UseSoulburn && mySettings.UseSeedofCorruption && Soulburn.KnownSpell && SeedofCorruption.KnownSpell
                 && !Corruption.TargetHaveBuff && Soulburn.IsSpellUsable && SeedofCorruption.IsSpellUsable && SeedofCorruption.IsHostileDistanceGood)
            {
                Soulburn.Launch();
                Thread.Sleep(200);
                SeedofCorruption.Launch();
                return;
            }
            else if (mySettings.UseHarvestLife && HarvestLife.KnownSpell && HarvestLife.IsHostileDistanceGood && HarvestLife.IsSpellUsable)
            {
                HarvestLife.Launch();
                while (ObjectManager.Me.IsCast)
                    Thread.Sleep(200);
                return;
            }
            else if (mySettings.UseHarvestLife && DrainLife.KnownSpell && DrainLife.IsSpellUsable && DrainLife.IsHostileDistanceGood && !HarvestLife.KnownSpell)
            {
                DrainLife.Launch();
                while (ObjectManager.Me.IsCast)
                    Thread.Sleep(200);
                return;
            }
            else if (mySettings.UseRainofFire && RainofFire.KnownSpell && RainofFire.IsHostileDistanceGood && RainofFire.IsSpellUsable)
            {
                SpellManager.CastSpellByIDAndPosition(5740, ObjectManager.Target.Position);
                while (ObjectManager.Me.IsCast)
                    Thread.Sleep(200);
                return;
            }
        }

        if (mySettings.UseAgony && Agony.KnownSpell && Agony.IsHostileDistanceGood && Agony.IsSpellUsable && (!Agony.TargetHaveBuff || AgonyTimer.IsReady))
        {
            Agony.Launch();
            AgonyTimer = new Timer(1000*21);
        }

        if (mySettings.UseCorruption && Corruption.KnownSpell && Corruption.IsHostileDistanceGood && Corruption.IsSpellUsable
            && (!Corruption.TargetHaveBuff || CorruptionTimer.IsReady))
        {
            Corruption.Launch();
            CorruptionTimer = new Timer(1000*15);
        }

        if (mySettings.UseUnstableAffliction && UnstableAffliction.KnownSpell && UnstableAffliction.IsHostileDistanceGood && UnstableAffliction.IsSpellUsable
            && (!UnstableAffliction.TargetHaveBuff || UnstableAfflictionTimer.IsReady))
        {
            UnstableAffliction.Launch();
            UnstableAfflictionTimer = new Timer(1000*11);
        }

        if (mySettings.UseHaunt && Haunt.KnownSpell && Haunt.IsHostileDistanceGood && !Haunt.TargetHaveBuff && Haunt.IsSpellUsable)
        {
            Haunt.Launch();
            return;
        }
        // Blizzard API Calls for Malefic Grasp using Shadow Bolt Function
        else
        {
            if (mySettings.UseMaleficGrasp && !ObjectManager.Me.IsCast && ShadowBolt.KnownSpell && ShadowBolt.IsHostileDistanceGood && ShadowBolt.IsSpellUsable
                && !AgonyTimer.IsReady && !CorruptionTimer.IsReady && !UnstableAfflictionTimer.IsReady)
            {
                ShadowBolt.Launch();
                return;
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: WarlockAfflictionSettings

    [Serializable]
    public class WarlockAfflictionSettings : Settings
    {
        public bool DoAvoidMelee = false;
        public int DoAvoidMeleeDistance = 0;
        public bool UseAgony = true;
        public bool UseAlchFlask = true;
        public bool UseArcaneTorrentForDecast = true;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public bool UseArcaneTorrentForResource = true;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public bool UseArchimondesVengeance = true;
        public bool UseBerserking = true;
        public bool UseBloodFury = true;
        public bool UseCommandDemon = true;
        public bool UseCorruption = true;
        public bool UseCreateHealthstone = true;
        public int UseCreateHealthstoneAtPercentage = 75;
        public bool UseCurseofEnfeeblement = false;
        public bool UseCurseofExhaustion = false;
        public bool UseCurseoftheElements = true;
        public bool UseDarkBargain = true;
        public int UseDarkBargainAtPercentage = 40;
        public bool UseDarkIntent = true;
        public bool UseDarkRegeneration = true;
        public int UseDarkRegenerationAtPercentage = 65;
        public bool UseDarkSoul = true;
        public bool UseDrainLife = true;
        public int UseDrainLifeAtPercentage = 70;
        public bool UseDrainSoul = true;
        public bool UseEngGlove = true;
        public bool UseFelFlame = true;
        public bool UseGiftoftheNaaru = true;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public bool UseGrimoireofSacrifice = true;
        public bool UseGrimoireofService = true;
        public bool UseHarvestLife = false;
        public bool UseHaunt = true;
        public bool UseHealthFunnel = true;
        public bool UseHowlofTerror = true;
        public int UseHowlofTerrorAtPercentage = 20;
        public bool UseLifeTap = true;
        public int UseLifeTapAtPercentage = 75;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMaleficGrasp = true;
        public bool UseMortalCoil = true;
        public int UseMortalCoilAtPercentage = 85;
        public bool UseRainofFire = true;
        public bool UseSacrificialPact = true;
        public int UseSacrificialPactAtPercentage = 95;
        public bool UseSeedofCorruption = true;
        public bool UseShadowBolt = true;
        public bool UseShadowfury = true;
        public int UseShadowfuryAtPercentage = 90;
        public bool UseSoulLink = true;
        public bool UseSoulSwap = true;
        public bool UseSoulburn = true;
        public bool UseSoulstone = true;
        public bool UseStoneform = true;
        public int UseStoneformAtPercentage = 80;
        public bool UseSummonDoomguard = true;
        public bool UseSummonFelhunter = true;
        public bool UseSummonImp = false;
        public bool UseSummonInfernal = false;
        public bool UseSummonSuccubus = false;
        public bool UseSummonVoidwalker = false;
        public bool UseTrinketOne = true;
        public bool UseTrinketTwo = true;
        public bool UseTwilightWard = true;
        public int UseTwilightWardAtPercentage = 100;
        public bool UseUnboundWill = true;
        public bool UseUnendingResolve = true;
        public int UseUnendingResolveAtPercentage = 70;
        public bool UseUnstableAffliction = true;
        public bool UseWarStomp = true;
        public int UseWarStompAtPercentage = 80;

        public WarlockAfflictionSettings()
        {
            ConfigWinForm(new Point(500, 400), "Warlock Affliction Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Warlock Buffs */
            AddControlInWinForm("Use Curse of Enfeeblement", "UseCurseofEnfeeblement", "Warlock Buffs");
            AddControlInWinForm("Use Curse of Exhaustion", "UseCurseofExhaustion", "Warlock Buffs");
            AddControlInWinForm("Use Curse of the Elements", "UseCurseoftheElements", "Warlock Buffs");
            AddControlInWinForm("Use Dark Intent", "UseDarkIntent", "Warlock Buffs");
            AddControlInWinForm("Use Grimoire of Sacrifice", "UseGrimoireofSacrifice", "Warlock Buffs");
            AddControlInWinForm("Use Soul Link ", "UseSoulLink ", "Warlock Buffs");
            AddControlInWinForm("Use Soulstone", "UseSoulstone", "Warlock Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Agony", "UseAgony", "Offensive Spell");
            AddControlInWinForm("Use Command Demon", "UseCommandDemon", "Offensive Spell");
            AddControlInWinForm("Use Corruption", "UseCorruption", "Offensive Spell");
            AddControlInWinForm("Use Drain Soul", "UseDrainSoul", "Offensive Spell");
            AddControlInWinForm("Use Fel Flame", "UseFelFlame", "Offensive Spell");
            AddControlInWinForm("Use Harvest Life", "UseHarvestLife", "Offensive Spell");
            AddControlInWinForm("Use Haunt", "UseHaunt", "Offensive Spell");
            AddControlInWinForm("Use Malefic Grasp", "UseMaleficGrasp", "Offensive Spell");
            AddControlInWinForm("Use Rain of Fire", "UseRainofFire", "Offensive Spell");
            AddControlInWinForm("Use Seed of Corruption", "UseSeedofCorruption", "Offensive Spell");
            AddControlInWinForm("Use Shadow Bolt", "UseShadowBolt", "Offensive Spell");
            AddControlInWinForm("Use Soul Swap", "UseSoulSwap", "Offensive Spell");
            AddControlInWinForm("Use Soulburn", "UseSoulburn", "Offensive Spell");
            AddControlInWinForm("Use Summon Imp", "UseSummonImp", "Offensive Spell");
            AddControlInWinForm("Use Summon Voidwalker", "UseSummonVoidwalker", "Offensive Spell");
            AddControlInWinForm("Use Summon Felhunter", "UseSummonFelhunter", "Offensive Spell");
            AddControlInWinForm("Use Summon Succubus", "UseSummonSuccubus", "Offensive Spell");
            AddControlInWinForm("Use Unstable Affliction", "UseUnstableAffliction", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Archimonde's Vengeance", "UseArchimondesVengeance", "Offensive Cooldown");
            AddControlInWinForm("Use Dark Soul", "UseDarkSoul", "Offensive Cooldown");
            AddControlInWinForm("Use Grimoire of Service", "UseGrimoireofService", "Offensive Cooldown");
            AddControlInWinForm("Use Summon Doomguard", "UseSummonDoomguard", "Offensive Cooldown");
            AddControlInWinForm("Use Summon Infernal", "UseSummonInfernal", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Dark Bargain", "UseDarkBargain", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Howl of Terror", "UseHowlofTerror", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Sacrificial Pact", "UseSacrificialPact", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Shadowfury", "UseShadowfury", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Twilight Ward", "UseTwilightWard", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Unbound Will", "UseUnboundWill", "Defensive Cooldown");
            AddControlInWinForm("Use Unending Resolve", "UseUnendingResolve", "Defensive Cooldown", "AtPercentage");
            /* Healing Spell */
            AddControlInWinForm("Use Create Healthstone", "UseCreateHealthstone", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Dark Regeneration", "UseDarkRegeneration", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Drain Life", "UseDrainLife", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Health Funnel", "UseHealthFunnel", "Healing Spell");
            AddControlInWinForm("Use Life Tap", "UseLifeTap", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Mortal Coil", "UseMortalCoil", "Healing Spell", "AtPercentage");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
            AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
            AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
        }

        public static WarlockAfflictionSettings CurrentSetting { get; set; }

        public static WarlockAfflictionSettings GetSettings()
        {
            string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Warlock_Affliction.xml";
            if (File.Exists(currentSettingsFile))
            {
                return
                    CurrentSetting = Load<WarlockAfflictionSettings>(currentSettingsFile);
            }
            else
            {
                return new WarlockAfflictionSettings();
            }
        }
    }

    #endregion
}

#endregion

#region Druid

public class DruidBalance
{
    private readonly DruidBalanceSettings mySettings = DruidBalanceSettings.GetSettings();

    #region General Timers & Variables

    private Timer AlchFlaskTimer = new Timer(0);
    private Timer EngineeringTimer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer TrinketOneTimer = new Timer(0);
    private Timer TrinketTwoTimer = new Timer(0);

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell BloodFury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell WarStomp = new Spell("War Stomp");

    #endregion

    #region Druid Buffs

    private readonly Spell Dash = new Spell("Dash");
    private readonly Spell FaerieFire = new Spell("Faerie Fire");
    private readonly Spell MarkoftheWild = new Spell("Mark of the Wild");
    private readonly Spell MoonkinForm = new Spell("Moonkin Form");
    private readonly Spell StampedingRoar = new Spell("Stampeding Roar");

    #endregion

    #region Offensive Spell

    private readonly Spell Hurricane = new Spell("Hurricane");
    private readonly Spell Moonfire = new Spell("Moonfire");
    private readonly Spell Starfall = new Spell("Starfall");
    private readonly Spell Starfire = new Spell("Starfire");
    private readonly Spell Starsurge = new Spell("Starsurge");
    private readonly Spell Sunfire = new Spell("Sunfire");
    private readonly Spell WildMushroom = new Spell("Wild Mushroom");
    private readonly Spell WildMushroomDetonate = new Spell("Wild Mushroom: Detonate");
    private readonly Spell Wrath = new Spell("Wrath");
    private Timer MoonfireTimer = new Timer(0);
    private bool StarfireUse;
    private Timer SunfireTimer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell AstralCommunion = new Spell("Astral Communion");
    private readonly Spell CelestialAlignment = new Spell("Celestial Alignment");
    private readonly Spell ForceofNature = new Spell("Force of Nature");
    private readonly Spell HeartoftheWild = new Spell("Heart of the Wild");
    private readonly Spell Incarnation = new Spell("Incarnation");
    private readonly Spell NaturesVigil = new Spell("Nature's Vigil");

    #endregion

    #region Defensive Cooldown

    private readonly Spell Barkskin = new Spell("Barkskin");
    private readonly Spell DisorientingRoar = new Spell("Disorienting Roar");
    private readonly Spell EntanglingRoots = new Spell("Entangling Roots");
    private readonly Spell MassEntanglement = new Spell("Mass Entanglement");
    private readonly Spell MightyBash = new Spell("Mighty Bash");
    private readonly Spell NaturesGrasp = new Spell("Nature's Grasp");
    private readonly Spell SolarBeam = new Spell("Solar Beam");
    private readonly Spell Typhoon = new Spell("Typhoon");
    private readonly Spell UrsolsVortex = new Spell("Ursol's Vortex");
    private readonly Spell WildCharge = new Spell("Wild Charge");

    #endregion

    #region Healing Spell

    private readonly Spell CenarionWard = new Spell("Cenarion Ward");
    private readonly Spell HealingTouch = new Spell("Healing Touch");
    private readonly Spell Innervate = new Spell("Innervate");
    private readonly Spell MightofUrsoc = new Spell("Might of Ursoc");
    private readonly Spell NaturesSwiftness = new Spell("Nature's Swiftness");
    private readonly Spell Rejuvenation = new Spell("Rejuvenation");
    private readonly Spell Renewal = new Spell("Renewal");
    private readonly Spell Tranquility = new Spell("Tranquility");
    private Timer HealingTouchTimer = new Timer(0);

    #endregion

    public DruidBalance()
    {
        Main.range = 30.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsMounted)
                {
                    if (Fight.InFight && ObjectManager.Me.Target > 0)
                    {
                        if (ObjectManager.Me.Target != lastTarget
                            && (Moonfire.IsHostileDistanceGood || Sunfire.IsHostileDistanceGood))
                        {
                            Pull();
                            lastTarget = ObjectManager.Me.Target;
                        }

                        if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                            && mySettings.UseLowCombat)
                        {
                            if (ObjectManager.Target.GetDistance < 41)
                                LowCombat();
                        }
                        else
                        {
                            if (ObjectManager.Target.GetDistance < 41)
                                Combat();
                        }
                    }
                    else if (!ObjectManager.Me.IsCast)
                        Patrolling();
                }
            }
            catch
            {
            }
            Thread.Sleep(250);
        }
    }

    private void Pull()
    {
        if (!ObjectManager.Me.HaveBuff(24858) && mySettings.UseMoonkinForm)
        {
            MoonkinForm.Launch();
        }

        if (Moonfire.KnownSpell && Moonfire.IsHostileDistanceGood && Moonfire.IsSpellUsable
            && mySettings.UseMoonfire)
        {
            Moonfire.Launch();
            MoonfireTimer = new Timer(1000*11);
            return;
        }
        else
        {
            if (Sunfire.KnownSpell && Sunfire.IsHostileDistanceGood && Sunfire.IsSpellUsable
                && mySettings.UseSunfire)
            {
                Sunfire.Launch();
                SunfireTimer = new Timer(1000*11);
                return;
            }
        }
    }

    private void LowCombat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        DefenseCycle();
        Heal();

        if (ObjectManager.Me.HaveBuff(48518))
            StarfireUse = true;

        if (ObjectManager.Me.HaveBuff(48517))
            StarfireUse = false;

        if (!ObjectManager.Me.HaveBuff(24858) && mySettings.UseMoonkinForm)
        {
            MoonkinForm.Launch();
            return;
        }

        if (Starsurge.KnownSpell && Starsurge.IsHostileDistanceGood && Starsurge.IsSpellUsable
            && ObjectManager.Me.HaveBuff(93400) && mySettings.UseStarsurge)
        {
            Starsurge.Launch();
            return;
        }
        else if (Moonfire.KnownSpell && Moonfire.IsHostileDistanceGood && Moonfire.IsSpellUsable
                 && !Moonfire.TargetHaveBuff && mySettings.UseMoonfire)
        {
            Moonfire.Launch();
            return;
        }
        else if (Sunfire.KnownSpell && Sunfire.IsHostileDistanceGood && Sunfire.IsSpellUsable
                 && !Sunfire.TargetHaveBuff && mySettings.UseSunfire)
        {
            Sunfire.Launch();
            return;
        }
        else if (Starsurge.KnownSpell && Starsurge.IsHostileDistanceGood && Starsurge.IsSpellUsable
                 && mySettings.UseStarsurge)
        {
            Starsurge.Launch();
            return;
        }
        else if (Starfire.KnownSpell && Starfire.IsHostileDistanceGood && Starfire.IsSpellUsable
                 && StarfireUse && mySettings.UseStarfire)
        {
            Starfire.Launch();
            return;
        }
        else
        {
            if (Wrath.KnownSpell && Wrath.IsHostileDistanceGood && Wrath.IsSpellUsable
                && mySettings.UseWrath)
            {
                Wrath.Launch();
                return;
            }
        }

        if (Hurricane.KnownSpell && Hurricane.IsHostileDistanceGood && Hurricane.IsSpellUsable
            && mySettings.UseHurricane)
        {
            Hurricane.Launch();
            return;
        }
    }

    private void Combat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        if (OnCD.IsReady)
            DefenseCycle();
        DPSCycle();
        Heal();
        Decast();
        DPSCycle();
        DPSBurst();
        DPSCycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (AstralCommunion.KnownSpell && AstralCommunion.IsSpellUsable && mySettings.UseAstralCommunion
            && !ObjectManager.Me.HaveBuff(48518) && !ObjectManager.Me.HaveBuff(48517)
            && !Fight.InFight && ObjectManager.GetNumberAttackPlayer() == 0)
        {
            AstralCommunion.Launch();
            while (ObjectManager.Me.IsCast)
            {
                Thread.Sleep(200);
            }
            return;
        }
        else if (AlchFlaskTimer.IsReady && mySettings.UseAlchFlask && Alchemy.KnownSpell
                 && ItemsManager.GetItemCountByIdLUA(75525) == 1)
        {
            Logging.WriteFight("Use Alchi Flask");
            Lua.RunMacroText("/use item:75525");
            AlchFlaskTimer = new Timer(1000*60*60*2);
            return;
        }
        else if (MarkoftheWild.KnownSpell && MarkoftheWild.IsSpellUsable && !MarkoftheWild.HaveBuff
                 && mySettings.UseMarkoftheWild)
        {
            MarkoftheWild.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() == 0 && mySettings.UseDash
                 && Dash.KnownSpell && Dash.IsSpellUsable && !Dash.HaveBuff && !StampedingRoar.HaveBuff
                 && ObjectManager.Me.GetMove)
        {
            Dash.Launch();
            return;
        }
        else
        {
            if (ObjectManager.GetNumberAttackPlayer() == 0 && mySettings.UseStampedingRoar
                && StampedingRoar.KnownSpell && StampedingRoar.IsSpellUsable && !Dash.HaveBuff
                && !StampedingRoar.HaveBuff && ObjectManager.Me.GetMove)
            {
                StampedingRoar.Launch();
                return;
            }
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            var maxTimeTimer = new Timer(1000*2);
            MovementsAction.MoveBackward(true);
            while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                Thread.Sleep(300);
            MovementsAction.MoveBackward(false);
            if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
            {
                MovementsAction.MoveForward(true);
                Thread.Sleep(1000);
                MovementsAction.MoveForward(false);
                MovementManager.Face(ObjectManager.Target.Position);
            }
        }
    }

    private void DefenseCycle()
    {
        if (!ObjectManager.Me.HaveBuff(24858) && mySettings.UseMoonkinForm)
        {
            MoonkinForm.Launch();
        }

        if (ObjectManager.Me.HealthPercent <= mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable &&
            Stoneform.KnownSpell
            && mySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && Barkskin.KnownSpell && Barkskin.IsSpellUsable
                 && mySettings.UseBarkskin)
        {
            Barkskin.Launch();
            OnCD = new Timer(1000*12);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && MightyBash.KnownSpell && MightyBash.IsSpellUsable
                 && mySettings.UseMightyBash && MightyBash.IsHostileDistanceGood)
        {
            MightyBash.Launch();
            OnCD = new Timer(1000*5);
            return;
        }
        else if (MassEntanglement.KnownSpell && MassEntanglement.IsSpellUsable && MassEntanglement.IsHostileDistanceGood
                 && mySettings.UseMassEntanglement && ObjectManager.Me.HealthPercent < 80)
        {
            MassEntanglement.Launch();

            if (WildCharge.KnownSpell && WildCharge.IsHostileDistanceGood && WildCharge.IsSpellUsable
                && mySettings.UseWildCharge)
            {
                Thread.Sleep(200);
                WildCharge.Launch();
            }
            return;
        }
        else if (UrsolsVortex.KnownSpell && UrsolsVortex.IsSpellUsable && UrsolsVortex.IsHostileDistanceGood
                 && mySettings.UseUrsolsVortex && ObjectManager.Me.HealthPercent < 80)
        {
            UrsolsVortex.Launch();

            if (WildCharge.KnownSpell && WildCharge.IsHostileDistanceGood && WildCharge.IsSpellUsable
                && mySettings.UseWildCharge)
            {
                Thread.Sleep(200);
                WildCharge.Launch();
            }
            return;
        }
        else if (NaturesGrasp.KnownSpell && NaturesGrasp.IsSpellUsable
                 && ObjectManager.Target.IsCast && mySettings.UseNaturesGrasp && ObjectManager.Me.HealthPercent < 80)
        {
            NaturesGrasp.Launch();

            if (WildCharge.KnownSpell && WildCharge.IsHostileDistanceGood && WildCharge.IsSpellUsable
                && mySettings.UseWildCharge)
            {
                Thread.Sleep(200);
                WildCharge.Launch();
            }
            return;
        }
        else if (Typhoon.KnownSpell && Typhoon.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 2
                 && ObjectManager.Target.GetDistance < 41 && ObjectManager.Me.HealthPercent < 70
                 && mySettings.UseTyphoon)
        {
            Typhoon.Launch();
            return;
        }
        else if (DisorientingRoar.KnownSpell && DisorientingRoar.IsSpellUsable &&
                 ObjectManager.GetNumberAttackPlayer() > 2
                 && ObjectManager.Target.GetDistance < 10 && ObjectManager.Me.HealthPercent < 70
                 && mySettings.UseDisorientingRoar)
        {
            DisorientingRoar.Launch();
            OnCD = new Timer(1000*3);
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent <= mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable &&
                WarStomp.KnownSpell
                && mySettings.UseWarStomp)
            {
                WarStomp.Launch();
                OnCD = new Timer(1000*2);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell &&
            ObjectManager.Me.ManaPercentage <= mySettings.UseArcaneTorrentForResourceAtPercentage
            && mySettings.UseArcaneTorrentForResource)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && NaturesSwiftness.IsSpellUsable && NaturesSwiftness.KnownSpell
                 && mySettings.UseNaturesSwiftness && mySettings.UseHealingTouch)
        {
            NaturesSwiftness.Launch();
            Thread.Sleep(400);
            HealingTouch.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 70 && Renewal.IsSpellUsable && Renewal.KnownSpell
                 && mySettings.UseRenewal)
        {
            Renewal.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 95 && !Fight.InFight && ObjectManager.GetNumberAttackPlayer() == 0
                 && HealingTouch.IsSpellUsable && HealingTouch.KnownSpell && mySettings.UseHealingTouch)
        {
            HealingTouch.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 90 && CenarionWard.IsSpellUsable && CenarionWard.KnownSpell
                 && mySettings.UseCenarionWard)
        {
            CenarionWard.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseGiftoftheNaaruAtPercentage &&
                 GiftoftheNaaru.IsSpellUsable && GiftoftheNaaru.KnownSpell
                 && mySettings.UseGiftoftheNaaru)
        {
            GiftoftheNaaru.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 70 && Rejuvenation.IsSpellUsable && Rejuvenation.KnownSpell
                 && !Rejuvenation.HaveBuff && mySettings.UseRejuvenation)
        {
            Rejuvenation.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 40 && HealingTouch.IsSpellUsable && HealingTouch.KnownSpell
                 && HealingTouchTimer.IsReady && mySettings.UseHealingTouch)
        {
            HealingTouch.Launch();
            HealingTouchTimer = new Timer(1000*15);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 35 && MightofUrsoc.IsSpellUsable && MightofUrsoc.KnownSpell
                 && mySettings.UseMightofUrsoc)
        {
            MightofUrsoc.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent < 30 && Tranquility.IsSpellUsable && Tranquility.KnownSpell
                && mySettings.UseTranquility)
            {
                Tranquility.Launch();
                while (ObjectManager.Me.IsCast)
                {
                    Thread.Sleep(100);
                    Thread.Sleep(100);
                }
                return;
            }
        }

        if (ObjectManager.Me.ManaPercentage < 50 && mySettings.UseInnervate)
        {
            Innervate.Launch();
            return;
        }
    }

    private void Decast()
    {
        if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
            && SolarBeam.KnownSpell && SolarBeam.IsSpellUsable && SolarBeam.IsHostileDistanceGood
            && mySettings.UseSolarBeam)
        {
            if (EntanglingRoots.KnownSpell && EntanglingRoots.IsHostileDistanceGood && EntanglingRoots.IsSpellUsable
                && mySettings.UseEntanglingRoots)
            {
                EntanglingRoots.Launch();
                Thread.Sleep(200);
            }

            SolarBeam.Launch();
            return;
        }
        else
        {
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8
                && ObjectManager.Me.HealthPercent <= mySettings.UseArcaneTorrentForDecastAtPercentage
                && mySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast &&
                ObjectManager.Target.IsTargetingMe)
            {
                ArcaneTorrent.Launch();
                return;
            }
        }
    }

    private void DPSBurst()
    {
        if (mySettings.UseTrinketOne && TrinketOneTimer.IsReady && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketOneTimer = new Timer(1000*60*2);
        }
        else if (mySettings.UseTrinketTwo && TrinketTwoTimer.IsReady && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketTwoTimer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseBerserking)
            Berserking.Launch();
        else if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseBloodFury)
            BloodFury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (EngineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            EngineeringTimer = new Timer(1000*60);
        }
        else if (ForceofNature.IsSpellUsable && ForceofNature.KnownSpell && ForceofNature.IsHostileDistanceGood
                 && mySettings.UseForceofNature)
        {
            SpellManager.CastSpellByIDAndPosition(106737, ObjectManager.Target.Position);
            return;
        }
        else if (Incarnation.IsSpellUsable && Incarnation.KnownSpell && mySettings.UseIncarnation
                 && ObjectManager.Target.GetDistance < 41)
        {
            Incarnation.Launch();
            return;
        }
        else if (HeartoftheWild.IsSpellUsable && HeartoftheWild.KnownSpell && mySettings.UseHeartoftheWild
                 && ObjectManager.Target.GetDistance < 41)
        {
            HeartoftheWild.Launch();
            return;
        }
        else if (NaturesVigil.IsSpellUsable && NaturesVigil.KnownSpell && mySettings.UseNaturesVigil
                 && ObjectManager.Target.GetDistance < 41)
        {
            NaturesVigil.Launch();
            return;
        }
        else
        {
            if (CelestialAlignment.KnownSpell && mySettings.UseCelestialAlignment &&
                ObjectManager.Target.GetDistance < 41
                && (CelestialAlignment.IsSpellUsable || ObjectManager.Me.HaveBuff(112071)))
            {
                if (!ObjectManager.Me.HaveBuff(112071))
                    CelestialAlignment.Launch();
                CelestialAlignmentCombat();
            }
        }
    }

    private void DPSCycle()
    {
        if (ObjectManager.Me.HaveBuff(48518))
            StarfireUse = true;

        if (ObjectManager.Me.HaveBuff(48517))
            StarfireUse = false;

        if (!ObjectManager.Me.HaveBuff(24858) && mySettings.UseMoonkinForm)
        {
            MoonkinForm.Launch();
            return;
        }

        if (Moonfire.KnownSpell && Moonfire.IsHostileDistanceGood && Moonfire.IsSpellUsable
            && mySettings.UseMoonfire && (!Moonfire.TargetHaveBuff || MoonfireTimer.IsReady))
        {
            Moonfire.Launch();
            MoonfireTimer = new Timer(1000*11);
            return;
        }
        else if (Sunfire.KnownSpell && Sunfire.IsHostileDistanceGood && Sunfire.IsSpellUsable
                 && mySettings.UseSunfire && (!Sunfire.TargetHaveBuff || SunfireTimer.IsReady))
        {
            Sunfire.Launch();
            SunfireTimer = new Timer(1000*11);
            return;
        }
        else if (Starsurge.IsHostileDistanceGood && Starsurge.IsSpellUsable
                 && Starsurge.KnownSpell && mySettings.UseStarsurge)
        {
            Starsurge.Launch();
            return;
        }
        else if (Starfall.KnownSpell && Starfall.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 2 &&
                 ObjectManager.Target.GetDistance < 41 && mySettings.UseStarfall)
        {
            Starfall.Launch();
            return;
        }
        else if (WildMushroom.KnownSpell && WildMushroom.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 3
                 && ObjectManager.Target.GetDistance < 41 && WildMushroomDetonate.KnownSpell &&
                 WildMushroom.IsSpellUsable
                 && mySettings.UseWildMushroom)
        {
            for (int i = 0; i < 3; i++)
            {
                SpellManager.CastSpellByIDAndPosition(88747, ObjectManager.Target.Position);
                Thread.Sleep(200);
            }

            WildMushroomDetonate.Launch();
            return;
        }
        else if (Hurricane.KnownSpell && Hurricane.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 2 &&
                 ObjectManager.Target.GetDistance < 41 && mySettings.UseHurricane)
        {
            SpellManager.CastSpellByIDAndPosition(16914, ObjectManager.Target.Position);
            return;
        }
        else if (Starfire.KnownSpell && Starfire.IsSpellUsable && Starfire.IsHostileDistanceGood
                 && StarfireUse && mySettings.UseStarfire)
        {
            Starfire.Launch();
            return;
        }
        else
        {
            if (Wrath.KnownSpell && Wrath.IsSpellUsable && Wrath.IsHostileDistanceGood
                && mySettings.UseWrath)
            {
                Wrath.Launch();
                return;
            }
        }
    }

    public void CelestialAlignmentCombat()
    {
        while (ObjectManager.Me.HaveBuff(112071))
        {
            if (!Moonfire.TargetHaveBuff || MoonfireTimer.IsReady || !Sunfire.TargetHaveBuff || SunfireTimer.IsReady)
            {
                Moonfire.Launch();
                MoonfireTimer = new Timer(1000*11);
                SunfireTimer = new Timer(1000*11);
            }

            if (Wrath.KnownSpell && Wrath.IsHostileDistanceGood && Wrath.IsSpellUsable)
                Wrath.Launch();
        }
        return;
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: DruidBalanceSettings

    [Serializable]
    public class DruidBalanceSettings : Settings
    {
        public bool DoAvoidMelee = false;
        public int DoAvoidMeleeDistance = 0;
        public bool UseAlchFlask = true;
        public bool UseArcaneTorrentForDecast = true;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public bool UseArcaneTorrentForResource = true;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public bool UseAstralCommunion = true;
        public bool UseBarkskin = true;
        public bool UseBerserking = true;
        public bool UseBloodFury = true;
        public bool UseCelestialAlignment = true;
        public bool UseCenarionWard = true;
        public bool UseDash = true;
        public bool UseDisorientingRoar = true;
        public bool UseEngGlove = true;
        public bool UseEntanglingRoots = true;
        public bool UseFaerieFire = true;
        public bool UseForceofNature = true;
        public bool UseGiftoftheNaaru = true;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public bool UseHealingTouch = true;
        public bool UseHeartoftheWild = true;
        public bool UseHurricane = true;
        public bool UseIncarnation = true;
        public bool UseInnervate = true;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMarkoftheWild = true;
        public bool UseMassEntanglement = true;
        public bool UseMightofUrsoc = true;
        public bool UseMightyBash = true;
        public bool UseMoonfire = true;
        public bool UseMoonkinForm = true;
        public bool UseNaturesGrasp = true;
        public bool UseNaturesSwiftness = true;
        public bool UseNaturesVigil = true;
        public bool UseRejuvenation = true;
        public bool UseRenewal = true;
        public bool UseSolarBeam = true;
        public bool UseStampedingRoar = true;
        public bool UseStarfall = true;
        public bool UseStarfire = true;
        public bool UseStarsurge = true;
        public bool UseStoneform = true;
        public int UseStoneformAtPercentage = 80;
        public bool UseSunfire = true;
        public bool UseTranquility = true;
        public bool UseTrinketOne = true;
        public bool UseTrinketTwo = true;
        public bool UseTyphoon = true;
        public bool UseUrsolsVortex = true;
        public bool UseWarStomp = true;
        public int UseWarStompAtPercentage = 80;
        public bool UseWildCharge = true;
        public bool UseWildMushroom = true;
        public bool UseWrath = true;

        public DruidBalanceSettings()
        {
            ConfigWinForm(new Point(500, 400), "Druid Balance Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Druid Buffs */
            AddControlInWinForm("Use Dash", "UseDash", "Druid Buffs");
            AddControlInWinForm("Use Faerie Fire", "UseFaerieFire", "Druid Buffs");
            AddControlInWinForm("Use Mark of the Wild", "UseMarkoftheWild", "Druid Buffs");
            AddControlInWinForm("Use Moonkin Form", "UseMoonkinForm", "Druid Buffs");
            AddControlInWinForm("Use Stampeding Roar", "UseStampedingRoar", "Druid Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Hurricane", "UseHurricane", "Offensive Spell");
            AddControlInWinForm("Use Moonfire", "UseMoonfire", "Offensive Spell");
            AddControlInWinForm("Use Starfall", "UseStarfall", "Offensive Spell");
            AddControlInWinForm("Use Starfire", "UseStarfire", "Offensive Spell");
            AddControlInWinForm("Use Starsurge", "UseStarsurge", "Offensive Spell");
            AddControlInWinForm("Use Sunfire", "UseSunfire", "Offensive Spell");
            AddControlInWinForm("Use WildMushroom", "UseWildMushroom", "Offensive Spell");
            AddControlInWinForm("Use Wrath", "UseWrath", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Astral Communion", "UseAstralCommunion", "Offensive Cooldown");
            AddControlInWinForm("Use Celestial Alignment", "UseCelestialAlignment", "Offensive Cooldown");
            AddControlInWinForm("Use Force of Nature", "UseForceofNature", "Offensive Cooldown");
            AddControlInWinForm("Use Heart of the Wild", "UseHeartoftheWild", "Offensive Cooldown");
            AddControlInWinForm("Use Incarnation", "UseIncarnation", "Offensive Cooldown");
            AddControlInWinForm("Use Nature's Vigil", "UseNaturesVigil", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Barkskin", "UseBarkskin", "Defensive Cooldown");
            AddControlInWinForm("Use Disorienting Roar", "UseDisorientingRoar", "Defensive Cooldown");
            AddControlInWinForm("Use Entangling Roots", "UseEntanglingRoots", "Defensive Cooldown");
            AddControlInWinForm("Use Mass Entanglement", "UseMassEntanglement", "Defensive Cooldown");
            AddControlInWinForm("Use Mighty Bash", "UseMightyBash", "Defensive Cooldown");
            AddControlInWinForm("Use Nature's Grasp", "UseNaturesGrasp", "Defensive Cooldown");
            AddControlInWinForm("Use Solar Beam", "UseSolarBeam", "Defensive Cooldown");
            AddControlInWinForm("Use Typhoon", "UseTyphoon", "Defensive Cooldown");
            AddControlInWinForm("Use Ursol's Vortex", "UseUrsolsVortex", "Defensive Cooldown");
            AddControlInWinForm("Use Wild Charge", "UseWildCharge", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Cenarion Ward", "UseCenarionWard", "Healing Spell");
            AddControlInWinForm("Use Healing Touch", "UseHealingTouch", "Healing Spell");
            AddControlInWinForm("Use Innervate", "UseInnervate", "Healing Spell");
            AddControlInWinForm("Use Might of Ursoc", "UseMightofUrsoc", "Healing Spell");
            AddControlInWinForm("Use Nature's Swiftness", "UseNaturesSwiftness", "Healing Spell");
            AddControlInWinForm("Use Rejuvenation", "UseRejuvenation", "Healing Spell");
            AddControlInWinForm("Use Renewal", "UseRenewal", "Healing Spell");
            AddControlInWinForm("Use Tranquility", "UseTranquility", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
            AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
            AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
        }

        public static DruidBalanceSettings CurrentSetting { get; set; }

        public static DruidBalanceSettings GetSettings()
        {
            string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Druid_Balance.xml";
            if (File.Exists(currentSettingsFile))
            {
                return
                    CurrentSetting = Load<DruidBalanceSettings>(currentSettingsFile);
            }
            else
            {
                return new DruidBalanceSettings();
            }
        }
    }

    #endregion
}

public class DruidFeral
{
    private readonly DruidFeralSettings mySettings = DruidFeralSettings.GetSettings();

    #region General Timers & Variables

    private Timer AlchFlaskTimer = new Timer(0);
    private int CP;
    private Timer EngineeringTimer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer TrinketOneTimer = new Timer(0);
    private Timer TrinketTwoTimer = new Timer(0);

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell BloodFury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell WarStomp = new Spell("War Stomp");

    #endregion

    #region Druid Buffs

    private readonly Spell CatForm = new Spell("Cat Form");
    private readonly Spell Dash = new Spell("Dash");
    private readonly Spell DisplacerBeast = new Spell("Displacer Beast");
    private readonly Spell FaerieFire = new Spell("Faerie Fire");
    private readonly Spell MarkoftheWild = new Spell("Mark of the Wild");
    private readonly Spell Prowl = new Spell("Prowl");
    private readonly Spell SavageRoar = new Spell("Savage Roar");
    private readonly Spell StampedingRoar = new Spell("Stampeding Roar");
    private bool FivePtSav;
    private Timer SavageRoarTimer = new Timer(0);

    #endregion

    #region Offensive Spell

    private readonly Spell FerociousBite = new Spell("Ferocious Bite");
    private readonly Spell Maim = new Spell("Maim");
    private readonly Spell Mangle = new Spell("Mangle");
    private readonly Spell Pounce = new Spell("Pounce");
    private readonly Spell Rake = new Spell("Rake");
    private readonly Spell Ravage = new Spell("Ravage");
    private readonly Spell Rip = new Spell("Rip");
    private readonly Spell Shred = new Spell("Shred");
    private readonly Spell Swipe = new Spell("Swipe");
    private readonly Spell Thrash = new Spell("Thrash");
    private bool FivePtFer;
    private bool FivePtRip;
    private Timer RakeTimer = new Timer(0);
    private Timer RipTimer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell Berserk = new Spell("Berserk");
    private readonly Spell ForceofNature = new Spell("Force of Nature");
    private readonly Spell HeartoftheWild = new Spell("Heart of the Wild");
    private readonly Spell Incarnation = new Spell("Incarnation");
    private readonly Spell NaturesVigil = new Spell("Nature's Vigil");
    private readonly Spell TigersFury = new Spell("Tiger's Fury");

    #endregion

    #region Defensive Cooldown

    private readonly Spell Barkskin = new Spell("Barkskin");
    private readonly Spell DisorientingRoar = new Spell("Disorienting Roar");
    private readonly Spell MassEntanglement = new Spell("Mass Entanglement");
    private readonly Spell MightyBash = new Spell("Mighty Bash");
    private readonly Spell NaturesGrasp = new Spell("Nature's Grasp");
    private readonly Spell SkullBash = new Spell("Skull Bash");
    private readonly Spell SurvivalInstincts = new Spell("Survival Instincts");
    private readonly Spell Typhoon = new Spell("Typhoon");
    private readonly Spell UrsolsVortex = new Spell("Ursol's Vortex");
    private readonly Spell WildCharge = new Spell("Wild Charge");

    #endregion

    #region Healing Spell

    private readonly Spell CenarionWard = new Spell("Cenarion Ward");
    private readonly Spell HealingTouch = new Spell("Healing Touch");
    private readonly Spell Innervate = new Spell("Innervate");
    private readonly Spell MightofUrsoc = new Spell("Might of Ursoc");
    private readonly Spell NaturesSwiftness = new Spell("Nature's Swiftness");
    private readonly Spell Rejuvenation = new Spell("Rejuvenation");
    private readonly Spell Renewal = new Spell("Renewal");
    private readonly Spell Tranquility = new Spell("Tranquility");
    private Timer HealingTouchTimer = new Timer(0);

    #endregion

    public DruidFeral()
    {
        Main.range = 5.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (FaerieFire.IsHostileDistanceGood || WildCharge.IsHostileDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && mySettings.UseLowCombat)
                            {
                                if (ObjectManager.Target.GetDistance < 30)
                                    LowCombat();
                            }
                            else
                            {
                                if (ObjectManager.Target.GetDistance < 30)
                                    Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void Pull()
    {
        if (!ObjectManager.Me.HaveBuff(768) && mySettings.UseCatForm)
            CatForm.Launch();

        if (!SavageRoar.HaveBuff && mySettings.UseSavageRoar && SavageRoar.IsSpellUsable && SavageRoar.KnownSpell
            && ObjectManager.Target.GetDistance < 30)
        {
            SavageRoar.Launch();
            SavageRoarTimer = new Timer(1000*12);
        }

        if (Prowl.IsSpellUsable && Prowl.KnownSpell && Prowl.IsHostileDistanceGood
            && mySettings.UseProwl && !ObjectManager.Me.InCombat)
        {
            if (DisplacerBeast.IsSpellUsable && DisplacerBeast.KnownSpell && DisplacerBeast.IsHostileDistanceGood
                && mySettings.UseDisplacerBeast)
            {
                DisplacerBeast.Launch();
                Thread.Sleep(200);
            }

            if (Pounce.IsSpellUsable && Pounce.KnownSpell && Pounce.IsHostileDistanceGood
                && mySettings.UsePounce)
            {
                Pounce.Launch();
                return;
            }
        }
        else
        {
            if (WildCharge.KnownSpell && WildCharge.IsSpellUsable && WildCharge.IsHostileDistanceGood
                && mySettings.UseWildCharge && ObjectManager.Target.GetDistance > Main.range)
            {
                WildCharge.Launch();
                return;
            }

            else
            {
                if (FaerieFire.KnownSpell && FaerieFire.IsSpellUsable && FaerieFire.IsHostileDistanceGood
                    && mySettings.UseFaerieFire)
                {
                    FaerieFire.Launch();
                    return;
                }
            }
        }
    }

    private void LowCombat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        DefenseCycle();
        Heal();

        if (!ObjectManager.Me.HaveBuff(768) && mySettings.UseCatForm)
        {
            CatForm.Launch();
            return;
        }

        if (Mangle.IsSpellUsable && Mangle.KnownSpell && Mangle.IsHostileDistanceGood
            && mySettings.UseMangle)
        {
            Mangle.Launch();
            if (ObjectManager.Target.HealthPercent < 50 && ObjectManager.Target.HealthPercent > 0)
            {
                Mangle.Launch();
                return;
            }
        }
        else
        {
            if (Swipe.IsSpellUsable && Swipe.KnownSpell && Swipe.IsHostileDistanceGood
                && mySettings.UseSwipe)
            {
                Swipe.Launch();
                return;
            }
        }
    }

    private void Combat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        if (OnCD.IsReady)
            DefenseCycle();
        DPSCycle();
        Heal();
        Decast();
        DPSCycle();
        DPSBurst();
        DPSCycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (MarkoftheWild.KnownSpell && MarkoftheWild.IsSpellUsable && !MarkoftheWild.HaveBuff)
        {
            MarkoftheWild.Launch();
            return;
        }
        else if (AlchFlaskTimer.IsReady && mySettings.UseAlchFlask && Alchemy.KnownSpell
                 && ItemsManager.GetItemCountByIdLUA(75525) == 1)
        {
            Logging.WriteFight("Use Alchi Flask");
            Lua.RunMacroText("/use item:75525");
            AlchFlaskTimer = new Timer(1000*60*60*2);
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() == 0 && mySettings.UseDash
                 && Dash.KnownSpell && Dash.IsSpellUsable && !Dash.HaveBuff && !StampedingRoar.HaveBuff
                 && ObjectManager.Me.GetMove)
        {
            Dash.Launch();
            return;
        }
        else
        {
            if (ObjectManager.GetNumberAttackPlayer() == 0 && mySettings.UseStampedingRoar
                && StampedingRoar.KnownSpell && StampedingRoar.IsSpellUsable && !Dash.HaveBuff
                && !StampedingRoar.HaveBuff && ObjectManager.Me.GetMove)
            {
                StampedingRoar.Launch();
                return;
            }
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            var maxTimeTimer = new Timer(1000*2);
            MovementsAction.MoveBackward(true);
            while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                Thread.Sleep(300);
            MovementsAction.MoveBackward(false);
            if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
            {
                MovementsAction.MoveForward(true);
                Thread.Sleep(1000);
                MovementsAction.MoveForward(false);
                MovementManager.Face(ObjectManager.Target.Position);
            }
        }
    }

    private void DefenseCycle()
    {
        if (ObjectManager.Me.HealthPercent < 80 && mySettings.UseBarkskin
            && Barkskin.KnownSpell && Barkskin.IsSpellUsable)
        {
            Barkskin.Launch();
            OnCD = new Timer(1000*12);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 90 && MightyBash.IsHostileDistanceGood
                 && MightyBash.KnownSpell && MightyBash.IsSpellUsable && mySettings.UseMightyBash)
        {
            MightyBash.Launch();
            OnCD = new Timer(1000*5);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 70 && ObjectManager.Me.ComboPoint > 2
                 && Maim.KnownSpell && Maim.IsSpellUsable && mySettings.UseMaim && Maim.IsHostileDistanceGood)
        {
            CP = ObjectManager.Me.ComboPoint;
            Maim.Launch();
            OnCD = new Timer(1000*CP);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 70 && mySettings.UseSurvivalInstincts
                 && SurvivalInstincts.KnownSpell && SurvivalInstincts.IsSpellUsable)
        {
            SurvivalInstincts.Launch();
            OnCD = new Timer(1000*12);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable &&
                 Stoneform.KnownSpell
                 && mySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (MassEntanglement.KnownSpell && MassEntanglement.IsSpellUsable && MassEntanglement.IsHostileDistanceGood
                 && ObjectManager.Target.IsCast && mySettings.UseMassEntanglement &&
                 ObjectManager.GetNumberAttackPlayer() > 2
                 && ObjectManager.Me.HealthPercent < 70)
        {
            if (Typhoon.KnownSpell && Typhoon.IsSpellUsable && mySettings.UseTyphoon
                && ObjectManager.Target.GetDistance < 41 && mySettings.UseTyphoon)
            {
                Typhoon.Launch();
                Thread.Sleep(200);
            }

            MassEntanglement.Launch();
            return;
        }
        else if (UrsolsVortex.KnownSpell && UrsolsVortex.IsSpellUsable && UrsolsVortex.IsHostileDistanceGood
                 && mySettings.UseUrsolsVortex && ObjectManager.Me.HealthPercent < 80
                 && ObjectManager.GetNumberAttackPlayer() > 2)
        {
            UrsolsVortex.Launch();

            if (WildCharge.KnownSpell && WildCharge.IsHostileDistanceGood && WildCharge.IsSpellUsable
                && mySettings.UseWildCharge && ObjectManager.Target.GetDistance > Main.range)
            {
                Thread.Sleep(200);
                WildCharge.Launch();
            }
            return;
        }
        else if (NaturesGrasp.KnownSpell && NaturesGrasp.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 2
                 && ObjectManager.Target.IsCast && mySettings.UseNaturesGrasp && ObjectManager.Me.HealthPercent < 80)
        {
            NaturesGrasp.Launch();
            return;
        }
        else if (Typhoon.KnownSpell && Typhoon.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 2
                 && ObjectManager.Target.GetDistance < 41 && ObjectManager.Me.HealthPercent < 70
                 && mySettings.UseTyphoon)
        {
            Typhoon.Launch();
            return;
        }
        else if (DisorientingRoar.KnownSpell && DisorientingRoar.IsSpellUsable &&
                 ObjectManager.GetNumberAttackPlayer() > 2
                 && ObjectManager.Target.GetDistance < 10 && ObjectManager.Me.HealthPercent < 70
                 && mySettings.UseDisorientingRoar)
        {
            DisorientingRoar.Launch();
            OnCD = new Timer(1000*3);
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent <= mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable &&
                WarStomp.KnownSpell
                && mySettings.UseWarStomp)
            {
                WarStomp.Launch();
                OnCD = new Timer(1000*2);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (ObjectManager.Me.HealthPercent < 80 && NaturesSwiftness.IsSpellUsable && NaturesSwiftness.KnownSpell
            && mySettings.UseNaturesSwiftness && mySettings.UseHealingTouch)
        {
            NaturesSwiftness.Launch();
            Thread.Sleep(400);
            HealingTouch.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 70 && Renewal.IsSpellUsable && Renewal.KnownSpell
                 && mySettings.UseRenewal)
        {
            Renewal.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 90 && CenarionWard.IsSpellUsable && CenarionWard.KnownSpell
                 && mySettings.UseCenarionWard)
        {
            CenarionWard.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 50 && !Fight.InFight && ObjectManager.GetNumberAttackPlayer() == 0
                 && HealingTouch.IsSpellUsable && HealingTouch.KnownSpell && mySettings.UseHealingTouch)
        {
            while (ObjectManager.Me.HealthPercent < 95 && HealingTouch.IsSpellUsable)
            {
                HealingTouch.Launch();
                Thread.Sleep(1500);
            }
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseGiftoftheNaaruAtPercentage &&
                 GiftoftheNaaru.IsSpellUsable && GiftoftheNaaru.KnownSpell)
        {
            GiftoftheNaaru.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 70 && HealingTouch.IsSpellUsable && HealingTouch.KnownSpell
                 && ObjectManager.Me.HaveBuff(69369) && mySettings.UseHealingTouch)
        {
            HealingTouch.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 50 && Rejuvenation.IsSpellUsable && Rejuvenation.KnownSpell
                 && !Rejuvenation.HaveBuff && mySettings.UseRejuvenation)
        {
            Rejuvenation.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 40 && HealingTouch.IsSpellUsable && HealingTouch.KnownSpell
                 && HealingTouchTimer.IsReady && mySettings.UseHealingTouch)
        {
            HealingTouch.Launch();
            HealingTouchTimer = new Timer(1000*15);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 35 && MightofUrsoc.IsSpellUsable && MightofUrsoc.KnownSpell
                 && mySettings.UseMightofUrsoc)
        {
            MightofUrsoc.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 30 && Tranquility.IsSpellUsable && Tranquility.KnownSpell
                 && mySettings.UseTranquility)
        {
            Tranquility.Launch();
            while (ObjectManager.Me.IsCast)
            {
                Thread.Sleep(100);
                Thread.Sleep(100);
            }
            return;
        }
        else
        {
            if (ObjectManager.Me.ManaPercentage < 10 && mySettings.UseInnervate)
            {
                Innervate.Launch();
                return;
            }
        }
    }

    private void Decast()
    {
        if (ObjectManager.Target.IsCast && mySettings.UseSkullBash
            && ObjectManager.Target.IsTargetingMe
            && SkullBash.KnownSpell && SkullBash.IsSpellUsable && SkullBash.IsHostileDistanceGood)
        {
            SkullBash.Launch();
            return;
        }
        else
        {
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8
                && ObjectManager.Me.HealthPercent <= mySettings.UseArcaneTorrentForDecastAtPercentage
                && mySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast &&
                ObjectManager.Target.IsTargetingMe)
            {
                ArcaneTorrent.Launch();
                return;
            }
        }
    }

    private void DPSBurst()
    {
        if (mySettings.UseTrinketOne && TrinketOneTimer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketOneTimer = new Timer(1000*60*2);
        }
        else if (mySettings.UseTrinketTwo && TrinketTwoTimer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketTwoTimer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseBerserking)
            Berserking.Launch();
        else if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseBloodFury)
            BloodFury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (EngineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            EngineeringTimer = new Timer(1000*60);
        }
        else if (ForceofNature.IsSpellUsable && ForceofNature.KnownSpell && ForceofNature.IsHostileDistanceGood
                 && mySettings.UseForceofNature)
        {
            SpellManager.CastSpellByIDAndPosition(106737, ObjectManager.Target.Position);
            return;
        }
        else if (Incarnation.IsSpellUsable && Incarnation.KnownSpell && mySettings.UseIncarnation
                 && ObjectManager.Target.GetDistance < 30)
        {
            Incarnation.Launch();
            return;
        }
        else if (HeartoftheWild.IsSpellUsable && HeartoftheWild.KnownSpell && mySettings.UseHeartoftheWild
                 && ObjectManager.Target.GetDistance < 30)
        {
            HeartoftheWild.Launch();
            return;
        }
        else if (NaturesVigil.IsSpellUsable && NaturesVigil.KnownSpell && mySettings.UseNaturesVigil
                 && ObjectManager.Target.GetDistance < 30)
        {
            NaturesVigil.Launch();
            return;
        }
        else if (TigersFury.KnownSpell && TigersFury.IsSpellUsable && ObjectManager.Me.Energy < 35
                 && !Berserk.HaveBuff && mySettings.UseTigersFury && ObjectManager.Target.GetDistance < 30)
        {
            TigersFury.Launch();
            return;
        }
        else
        {
            if (Berserk.KnownSpell && Berserk.IsSpellUsable && mySettings.UseBerserk
                && ObjectManager.Target.GetDistance < 30)
            {
                Berserk.Launch();
                return;
            }
        }
    }

    private void DPSCycle()
    {
        if (!ObjectManager.Me.HaveBuff(768) && mySettings.UseCatForm)
        {
            CatForm.Launch();
            return;
        }

        if (FaerieFire.KnownSpell && FaerieFire.IsSpellUsable && FaerieFire.IsHostileDistanceGood
            && mySettings.UseFaerieFire && (!FaerieFire.TargetHaveBuff || !ObjectManager.Target.HaveBuff(113746)))
        {
            FaerieFire.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 2 && Thrash.IsSpellUsable && Thrash.KnownSpell
                 && Thrash.IsHostileDistanceGood && !Thrash.TargetHaveBuff && mySettings.UseThrash)
        {
            Thrash.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 2 && Swipe.IsSpellUsable && Swipe.KnownSpell
                 && Swipe.IsHostileDistanceGood && mySettings.UseSwipe)
        {
            Swipe.Launch();
            return;
        }
        else if (FerociousBite.IsSpellUsable && FerociousBite.KnownSpell && FerociousBite.IsHostileDistanceGood
                 && mySettings.UseFerociousBite && !RipTimer.IsReady && ObjectManager.Me.ComboPoint > 4
                 && ObjectManager.Target.HealthPercent > 24 && !SavageRoarTimer.IsReady
                 && ObjectManager.Me.Energy > 49 && FivePtRip)
        {
            FerociousBite.Launch();
            return;
        }
        else if (SavageRoar.IsSpellUsable && SavageRoar.KnownSpell && SavageRoar.IsHostileDistanceGood && !FivePtSav
                 && ObjectManager.Me.ComboPoint > 4 && mySettings.UseSavageRoar)
        {
            CP = ObjectManager.Me.ComboPoint;
            SavageRoar.Launch();
            SavageRoarTimer = new Timer(1000*(12 + (6*CP)));
            FivePtSav = true;
            return;
        }
        else if (SavageRoar.IsSpellUsable && SavageRoar.KnownSpell && SavageRoar.IsHostileDistanceGood
                 && (!SavageRoar.HaveBuff || SavageRoarTimer.IsReady) && mySettings.UseSavageRoar
                 && ObjectManager.Me.ComboPoint < 5)
        {
            CP = ObjectManager.Me.ComboPoint;
            SavageRoar.Launch();
            SavageRoarTimer = new Timer(1000*(12 + (6*CP)));
            FivePtSav = false;
            return;
        }
        else
        {
            if (Rake.IsSpellUsable && Rake.KnownSpell && Rake.IsHostileDistanceGood && !Rake.TargetHaveBuff
                && mySettings.UseRake)
            {
                Rake.Launch();
                return;
            }
        }

        if (ObjectManager.Target.HealthPercent > 24)
        {
            if (Rip.IsSpellUsable && Rip.KnownSpell && Rip.IsHostileDistanceGood && !FivePtRip
                && ObjectManager.Me.ComboPoint > 4 && mySettings.UseRip)
            {
                Rip.Launch();
                RipTimer = new Timer(1000*13);
                FivePtRip = true;
                return;
            }

            if (Rip.IsSpellUsable && Rip.KnownSpell && Rip.IsHostileDistanceGood && mySettings.UseRip
                && (!Rip.TargetHaveBuff || RipTimer.IsReady))
            {
                Rip.Launch();
                RipTimer = new Timer(1000*19);
                FivePtRip = false;
                return;
            }
        }
        else
        {
            if (Rip.IsSpellUsable && Rip.KnownSpell && Rip.IsHostileDistanceGood && !Rip.TargetHaveBuff
                && mySettings.UseRip)
            {
                CP = ObjectManager.Me.ComboPoint;
                Rip.Launch();
                RipTimer = new Timer(1000*19);
                if (CP == 5)
                    FivePtFer = true;
                else
                    FivePtFer = false;
                return;
            }

            if (FerociousBite.IsSpellUsable && FerociousBite.KnownSpell && FerociousBite.IsHostileDistanceGood
                && !FivePtFer && ObjectManager.Me.ComboPoint > 4 && mySettings.UseFerociousBite)
            {
                FerociousBite.Launch();
                RipTimer = new Timer(1000*19);
                FivePtFer = true;
                return;
            }

            if (FerociousBite.IsSpellUsable && FerociousBite.KnownSpell && FerociousBite.IsHostileDistanceGood
                && mySettings.UseFerociousBite && RipTimer.IsReady && ObjectManager.Me.ComboPoint < 5)
            {
                FerociousBite.Launch();
                RipTimer = new Timer(1000*19);
                FivePtFer = false;
                return;
            }
        }

        if (ObjectManager.Me.HaveBuff(102543))
        {
            if (Ravage.KnownSpell && Ravage.IsSpellUsable && Ravage.IsHostileDistanceGood
                && mySettings.UseRavage)
            {
                Ravage.Launch();
                return;
            }
        }
        else if (Shred.KnownSpell && Shred.IsSpellUsable && Shred.IsHostileDistanceGood
                 && mySettings.UseShred && mySettings.UseGlyphofShred
                 && (TigersFury.HaveBuff || Berserk.HaveBuff))
        {
            Shred.Launch();
            return;
        }
        else
        {
            if (Mangle.KnownSpell && Mangle.IsSpellUsable && Mangle.IsHostileDistanceGood
                && mySettings.UseMangle)
            {
                Mangle.Launch();
                return;
            }
        }

        if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell
            && mySettings.UseArcaneTorrentForResource)
        {
            ArcaneTorrent.Launch();
            return;
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: DruidFeralSettings

    [Serializable]
    public class DruidFeralSettings : Settings
    {
        public bool DoAvoidMelee = false;
        public int DoAvoidMeleeDistance = 0;
        public bool UseAlchFlask = true;
        public bool UseArcaneTorrentForDecast = true;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public bool UseArcaneTorrentForResource = true;
        public bool UseBarkskin = true;
        public bool UseBerserk = true;
        public bool UseBerserking = true;
        public bool UseBloodFury = true;
        public bool UseCatForm = true;
        public bool UseCenarionWard = true;
        public bool UseDash = true;
        public bool UseDisorientingRoar = true;
        public bool UseDisplacerBeast = false;
        public bool UseEngGlove = true;
        public bool UseFaerieFire = true;
        public bool UseFerociousBite = true;
        public bool UseForceofNature = true;
        public bool UseGiftoftheNaaru = true;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public bool UseGlyphofShred = false;
        public bool UseHealingTouch = true;
        public bool UseHeartoftheWild = true;
        public bool UseIncarnation = true;
        public bool UseInnervate = true;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMaim = true;
        public bool UseMangle = true;
        public bool UseMarkoftheWild = true;
        public bool UseMassEntanglement = true;
        public bool UseMightofUrsoc = true;
        public bool UseMightyBash = true;
        public bool UseNaturesGrasp = true;
        public bool UseNaturesSwiftness = true;
        public bool UseNaturesVigil = true;
        public bool UsePounce = true;
        public bool UseProwl = false;
        public bool UseRake = true;
        public bool UseRavage = true;
        public bool UseRejuvenation = true;
        public bool UseRenewal = true;
        public bool UseRip = true;
        public bool UseSavageRoar = true;
        public bool UseShred = true;
        public bool UseSkullBash = true;
        public bool UseStampedingRoar = true;
        public bool UseStoneform = true;
        public int UseStoneformAtPercentage = 80;
        public bool UseSurvivalInstincts = true;
        public bool UseSwipe = true;
        public bool UseThrash = true;
        public bool UseTigersFury = true;
        public bool UseTranquility = true;
        public bool UseTrinketOne = true;
        public bool UseTrinketTwo = true;
        public bool UseTyphoon = true;
        public bool UseUrsolsVortex = true;
        public bool UseWarStomp = true;
        public int UseWarStompAtPercentage = 80;
        public bool UseWildCharge = true;

        public DruidFeralSettings()
        {
            ConfigWinForm(new Point(500, 400), "Druid Feral Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Druid Buffs */
            AddControlInWinForm("Use Cat Form", "UseCatForm", "Druid Buffs");
            AddControlInWinForm("Use Dash", "UseDash", "Druid Buffs");
            AddControlInWinForm("Use Displacer Beast", "UseDisplacerBeast", "Druid Buffs");
            AddControlInWinForm("Use Faerie Fire", "UseFaerieFire", "Druid Buffs");
            AddControlInWinForm("Use Mark of the Wild", "UseMarkoftheWild", "Druid Buffs");
            AddControlInWinForm("Use Prowl", "UseProwl", "Druid Buffs");
            AddControlInWinForm("Use Savage Roar", "UseSavageRoar", "Druid Buffs");
            AddControlInWinForm("Use Stampeding Roar", "UseStampedingRoar", "Druid Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Ferocious Bite", "UseFerociousBite", "Offensive Spell");
            AddControlInWinForm("Use Maim ", "UseMaim ", "Offensive Spell");
            AddControlInWinForm("Use Mangle", "UseMangle", "Offensive Spell");
            AddControlInWinForm("Use Pounce", "UsePounce", "Offensive Spell");
            AddControlInWinForm("Use Rake", "UseRake", "Offensive Spell");
            AddControlInWinForm("Use Ravage", "UseRavage", "Offensive Spell");
            AddControlInWinForm("Use Rip", "UseRip", "Offensive Spell");
            AddControlInWinForm("Use Shred", "UseShred", "Offensive Spell");
            AddControlInWinForm("Use Swipe", "UseSwipe", "Offensive Spell");
            AddControlInWinForm("Use Thrash", "UseThrash", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Berserk", "UseBerserk", "Offensive Cooldown");
            AddControlInWinForm("Use Force of Nature", "UseForceofNature", "Offensive Cooldown");
            AddControlInWinForm("Use Heart of the Wild", "UseHeartoftheWild", "Offensive Cooldown");
            AddControlInWinForm("Use Incarnation", "UseIncarnation", "Offensive Cooldown");
            AddControlInWinForm("Use Nature's Vigil", "UseNaturesVigil", "Offensive Cooldown");
            AddControlInWinForm("Use Tiger's Fury", "UseTigersFury", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Barkskin", "UseBarkskin", "Defensive Cooldown");
            AddControlInWinForm("Use Disorienting Roar", "UseDisorientingRoar", "Defensive Cooldown");
            AddControlInWinForm("Use Mass Entanglement", "UseMassEntanglement", "Defensive Cooldown");
            AddControlInWinForm("Use Mighty Bash", "UseMightyBash", "Defensive Cooldown");
            AddControlInWinForm("Use Nature's Grasp", "UseNaturesGrasp", "Defensive Cooldown");
            AddControlInWinForm("Use Skull Bash", "UseSkullBash", "Defensive Cooldown");
            AddControlInWinForm("Use Survival Instincts", "UseSurvivalInstincts", "Defensive Cooldown");
            AddControlInWinForm("Use Typhoon", "UseTyphoon", "Defensive Cooldown");
            AddControlInWinForm("Use Ursol's Vortex", "UseUrsolsVortex", "Defensive Cooldown");
            AddControlInWinForm("Use Wild Charge", "UseWildCharge", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Cenarion Ward", "UseCenarionWard", "Healing Spell");
            AddControlInWinForm("Use Healing Touch", "UseHealingTouch", "Healing Spell");
            AddControlInWinForm("Use Innervate", "UseInnervate", "Healing Spell");
            AddControlInWinForm("Use Might of Ursoc", "UseMightofUrsoc", "Healing Spell");
            AddControlInWinForm("Use Nature's Swiftness", "UseNaturesSwiftness", "Healing Spell");
            AddControlInWinForm("Use Rejuvenation", "UseRejuvenation", "Healing Spell");
            AddControlInWinForm("Use Renewal", "UseRenewal", "Healing Spell");
            AddControlInWinForm("Use Tranquility", "UseTranquility", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Using Glyph of Shred?", "UseGlyphofShred", "Game Settings");
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
            AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
            AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
        }

        public static DruidFeralSettings CurrentSetting { get; set; }

        public static DruidFeralSettings GetSettings()
        {
            string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Druid_Feral.xml";
            if (File.Exists(currentSettingsFile))
            {
                return
                    CurrentSetting = Load<DruidFeralSettings>(currentSettingsFile);
            }
            else
            {
                return new DruidFeralSettings();
            }
        }
    }

    #endregion
}

public class DruidRestoration
{
    private readonly DruidRestorationSettings mySettings = DruidRestorationSettings.GetSettings();

    #region General Timers & Variables

    private Timer AlchFlaskTimer = new Timer(0);
    private Timer EngineeringTimer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer TrinketOneTimer = new Timer(0);
    private Timer TrinketTwoTimer = new Timer(0);

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell BloodFury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell WarStomp = new Spell("War Stomp");

    #endregion

    #region Druid Buffs

    private readonly Spell Dash = new Spell("Dash");
    private readonly Spell FaerieFire = new Spell("Faerie Fire");
    private readonly Spell MarkoftheWild = new Spell("Mark of the Wild");
    private readonly Spell StampedingRoar = new Spell("Stampeding Roar");

    #endregion

    #region Offensive Spell

    private readonly Spell Hurricane = new Spell("Hurricane");
    private readonly Spell Moonfire = new Spell("Moonfire");
    private readonly Spell Wrath = new Spell("Wrath");
    private Timer MoonfireTimer = new Timer(0);

    #endregion

    #region Healing Cooldown

    private readonly Spell ForceofNature = new Spell("Force of Nature");
    private readonly Spell Incarnation = new Spell("Incarnation");

    #endregion

    #region Defensive Cooldown

    private readonly Spell Barkskin = new Spell("Barkskin");
    private readonly Spell DisorientingRoar = new Spell("Disorienting Roar");
    private readonly Spell EntanglingRoots = new Spell("Entangling Roots");
    private readonly Spell Ironbark = new Spell("Ironbark");
    private readonly Spell MassEntanglement = new Spell("Mass Entanglement");
    private readonly Spell MightyBash = new Spell("Mighty Bash");
    private readonly Spell NaturesGrasp = new Spell("Nature's Grasp");
    private readonly Spell SolarBeam = new Spell("Solar Beam");
    private readonly Spell Typhoon = new Spell("Typhoon");
    private readonly Spell UrsolsVortex = new Spell("Ursol's Vortex");
    private readonly Spell WildCharge = new Spell("Wild Charge");

    #endregion

    #region Healing Spell

    private readonly Spell CenarionWard = new Spell("Cenarion Ward");
    private readonly Spell HealingTouch = new Spell("Healing Touch");
    private readonly Spell Innervate = new Spell("Innervate");
    private readonly Spell Lifebloom = new Spell("Lifebloom");
    private readonly Spell MightofUrsoc = new Spell("Might of Ursoc");
    private readonly Spell NaturesSwiftness = new Spell("Nature's Swiftness");
    private readonly Spell Nourish = new Spell("Nourish");
    private readonly Spell Regrowth = new Spell("Regrowth");
    private readonly Spell Rejuvenation = new Spell("Rejuvenation");
    private readonly Spell Renewal = new Spell("Renewal");
    private readonly Spell Swiftmend = new Spell("Swiftmend");
    private readonly Spell Tranquility = new Spell("Tranquility");
    private readonly Spell WildGrowth = new Spell("Wild Growth");
    private readonly Spell WildMushroom = new Spell("Wild Mushroom");
    private readonly Spell WildMushroomBloom = new Spell("Wild Mushroom: Bloom");
    private Timer HealingTouchTimer = new Timer(0);
    private Timer NourishTimer = new Timer(0);

    #endregion

    public DruidRestoration()
    {
        Main.range = 30.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (Moonfire.IsHostileDistanceGood || Wrath.IsHostileDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.GetDistance < 41)
                                Combat();
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(250);
        }
    }

    private void Pull()
    {
        if (Moonfire.KnownSpell && Moonfire.IsHostileDistanceGood && Moonfire.IsSpellUsable
            && mySettings.UseMoonfire)
        {
            Moonfire.Launch();
            MoonfireTimer = new Timer(1000*11);
            return;
        }
        else
        {
            if (Wrath.KnownSpell && Wrath.IsHostileDistanceGood && Wrath.IsSpellUsable
                && mySettings.UseWrath)
            {
                Wrath.Launch();
                return;
            }
        }
    }

    private void Combat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        if (OnCD.IsReady)
            DefenseCycle();
        DPSCycle();
        Heal();
        Decast();
        DPSCycle();
        HealingBurst();
        DPSCycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (AlchFlaskTimer.IsReady && mySettings.UseAlchFlask && Alchemy.KnownSpell
            && ItemsManager.GetItemCountByIdLUA(75525) == 1)
        {
            Logging.WriteFight("Use Alchi Flask");
            Lua.RunMacroText("/use item:75525");
            AlchFlaskTimer = new Timer(1000*60*60*2);
            return;
        }
        else if (MarkoftheWild.KnownSpell && MarkoftheWild.IsSpellUsable && !MarkoftheWild.HaveBuff
                 && mySettings.UseMarkoftheWild)
        {
            MarkoftheWild.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() == 0 && mySettings.UseDash
                 && Dash.KnownSpell && Dash.IsSpellUsable && !Dash.HaveBuff && !StampedingRoar.HaveBuff
                 && ObjectManager.Me.GetMove)
        {
            Dash.Launch();
            return;
        }
        else
        {
            if (ObjectManager.GetNumberAttackPlayer() == 0 && mySettings.UseStampedingRoar
                && StampedingRoar.KnownSpell && StampedingRoar.IsSpellUsable && !Dash.HaveBuff
                && !StampedingRoar.HaveBuff && ObjectManager.Me.GetMove)
            {
                StampedingRoar.Launch();
                return;
            }
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            var maxTimeTimer = new Timer(1000*2);
            MovementsAction.MoveBackward(true);
            while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                Thread.Sleep(300);
            MovementsAction.MoveBackward(false);
            if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
            {
                MovementsAction.MoveForward(true);
                Thread.Sleep(1000);
                MovementsAction.MoveForward(false);
                MovementManager.Face(ObjectManager.Target.Position);
            }
        }
    }

    private void DefenseCycle()
    {
        if (ObjectManager.Me.HealthPercent <= mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable &&
            Stoneform.KnownSpell
            && mySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && Barkskin.KnownSpell && Barkskin.IsSpellUsable
                 && mySettings.UseBarkskin)
        {
            Barkskin.Launch();
            OnCD = new Timer(1000*12);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && Ironbark.KnownSpell && Ironbark.IsSpellUsable
                 && mySettings.UseIronbark)
        {
            Ironbark.Launch();
            OnCD = new Timer(1000*12);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && MightyBash.KnownSpell && MightyBash.IsSpellUsable
                 && mySettings.UseMightyBash && MightyBash.IsHostileDistanceGood)
        {
            MightyBash.Launch();
            OnCD = new Timer(1000*5);
            return;
        }
        else if (MassEntanglement.KnownSpell && MassEntanglement.IsSpellUsable && MassEntanglement.IsHostileDistanceGood
                 && mySettings.UseMassEntanglement && ObjectManager.Me.HealthPercent < 80)
        {
            MassEntanglement.Launch();

            if (WildCharge.KnownSpell && WildCharge.IsHostileDistanceGood && WildCharge.IsSpellUsable
                && mySettings.UseWildCharge)
            {
                Thread.Sleep(200);
                WildCharge.Launch();
            }
            return;
        }
        else if (UrsolsVortex.KnownSpell && UrsolsVortex.IsSpellUsable && UrsolsVortex.IsHostileDistanceGood
                 && mySettings.UseUrsolsVortex && ObjectManager.Me.HealthPercent < 80)
        {
            UrsolsVortex.Launch();

            if (WildCharge.KnownSpell && WildCharge.IsHostileDistanceGood && WildCharge.IsSpellUsable
                && mySettings.UseWildCharge)
            {
                Thread.Sleep(200);
                WildCharge.Launch();
            }
            return;
        }
        else if (NaturesGrasp.KnownSpell && NaturesGrasp.IsSpellUsable
                 && ObjectManager.Target.IsCast && mySettings.UseNaturesGrasp && ObjectManager.Me.HealthPercent < 80)
        {
            NaturesGrasp.Launch();

            if (WildCharge.KnownSpell && WildCharge.IsHostileDistanceGood && WildCharge.IsSpellUsable
                && mySettings.UseWildCharge)
            {
                Thread.Sleep(200);
                WildCharge.Launch();
            }
            return;
        }
        else if (Typhoon.KnownSpell && Typhoon.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 2
                 && ObjectManager.Target.GetDistance < 41 && ObjectManager.Me.HealthPercent < 70
                 && mySettings.UseTyphoon)
        {
            Typhoon.Launch();
            return;
        }
        else if (DisorientingRoar.KnownSpell && DisorientingRoar.IsSpellUsable &&
                 ObjectManager.GetNumberAttackPlayer() > 2
                 && ObjectManager.Target.GetDistance < 10 && ObjectManager.Me.HealthPercent < 70
                 && mySettings.UseDisorientingRoar)
        {
            DisorientingRoar.Launch();
            OnCD = new Timer(1000*3);
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent <= mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable &&
                WarStomp.KnownSpell
                && mySettings.UseWarStomp)
            {
                WarStomp.Launch();
                OnCD = new Timer(1000*2);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell &&
            ObjectManager.Me.ManaPercentage <= mySettings.UseArcaneTorrentForResourceAtPercentage
            && mySettings.UseArcaneTorrentForResource)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && NaturesSwiftness.IsSpellUsable && NaturesSwiftness.KnownSpell
                 && mySettings.UseNaturesSwiftness && mySettings.UseHealingTouch)
        {
            NaturesSwiftness.Launch();
            Thread.Sleep(400);
            HealingTouch.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 70 && Renewal.IsSpellUsable && Renewal.KnownSpell
                 && mySettings.UseRenewal)
        {
            Renewal.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 95 && !Fight.InFight && ObjectManager.GetNumberAttackPlayer() == 0
                 && HealingTouch.IsSpellUsable && HealingTouch.KnownSpell && mySettings.UseHealingTouch)
        {
            HealingTouch.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 90 && CenarionWard.IsSpellUsable && CenarionWard.KnownSpell
                 && mySettings.UseCenarionWard)
        {
            CenarionWard.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseGiftoftheNaaruAtPercentage &&
                 GiftoftheNaaru.IsSpellUsable && GiftoftheNaaru.KnownSpell
                 && mySettings.UseGiftoftheNaaru)
        {
            GiftoftheNaaru.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 90 && Rejuvenation.IsSpellUsable && Rejuvenation.KnownSpell
                 && !Rejuvenation.HaveBuff && mySettings.UseRejuvenation)
        {
            Rejuvenation.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 60 && Regrowth.IsSpellUsable && Regrowth.KnownSpell
                 && !Regrowth.HaveBuff && mySettings.UseRegrowth)
        {
            Regrowth.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && Swiftmend.IsSpellUsable && Swiftmend.KnownSpell
                 && mySettings.UseSwiftmend)
        {
            Swiftmend.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 50 && WildGrowth.IsSpellUsable && WildGrowth.KnownSpell
                 && mySettings.UseWildGrowth)
        {
            WildGrowth.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 40 && HealingTouch.IsSpellUsable && HealingTouch.KnownSpell
                 && HealingTouchTimer.IsReady && mySettings.UseHealingTouch)
        {
            HealingTouch.Launch();
            HealingTouchTimer = new Timer(1000*15);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 40 && Nourish.IsSpellUsable && Nourish.KnownSpell
                 && NourishTimer.IsReady && mySettings.UseNourish && !mySettings.UseHealingTouch)
        {
            Nourish.Launch();
            NourishTimer = new Timer(1000*15);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 35 && MightofUrsoc.IsSpellUsable && MightofUrsoc.KnownSpell
                 && mySettings.UseMightofUrsoc)
        {
            MightofUrsoc.Launch();
            return;
        }
        else if (WildMushroom.KnownSpell && WildMushroom.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 3
                 && WildMushroomBloom.KnownSpell && WildMushroom.IsSpellUsable && mySettings.UseWildMushroom
                 && ObjectManager.Me.HealthPercent < 80)
        {
            for (int i = 0; i < 3; i++)
            {
                SpellManager.CastSpellByIDAndPosition(88747, ObjectManager.Target.Position);
                Thread.Sleep(200);
            }

            WildMushroomBloom.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent < 30 && Tranquility.IsSpellUsable && Tranquility.KnownSpell
                && mySettings.UseTranquility)
            {
                Tranquility.Launch();
                while (ObjectManager.Me.IsCast)
                {
                    Thread.Sleep(100);
                    Thread.Sleep(100);
                }
                return;
            }
        }

        if (ObjectManager.Me.ManaPercentage < 50 && mySettings.UseInnervate)
        {
            Innervate.Launch();
            return;
        }
    }

    private void Decast()
    {
        if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8
            && ObjectManager.Me.HealthPercent <= mySettings.UseArcaneTorrentForDecastAtPercentage
            && mySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
        {
            ArcaneTorrent.Launch();
            return;
        }
    }

    public void HealingBurst()
    {
        if (mySettings.UseTrinketOne && TrinketOneTimer.IsReady && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketOneTimer = new Timer(1000*60*2);
        }
        else if (mySettings.UseTrinketTwo && TrinketTwoTimer.IsReady && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketTwoTimer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseBerserking)
            Berserking.Launch();
        else if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseBloodFury)
            BloodFury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (EngineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            EngineeringTimer = new Timer(1000*60);
        }
        else if (ForceofNature.IsSpellUsable && ForceofNature.KnownSpell && ForceofNature.IsHostileDistanceGood
                 && mySettings.UseForceofNature)
        {
            SpellManager.CastSpellByIDAndPosition(106737, ObjectManager.Target.Position);
            return;
        }
        else
        {
            if (Incarnation.IsSpellUsable && Incarnation.KnownSpell && mySettings.UseIncarnation
                && ObjectManager.Target.GetDistance < 41)
            {
                Incarnation.Launch();
                return;
            }
        }
    }

    private void DPSCycle()
    {
        if (Moonfire.KnownSpell && Moonfire.IsHostileDistanceGood && Moonfire.IsSpellUsable
            && mySettings.UseMoonfire && (!Moonfire.TargetHaveBuff || MoonfireTimer.IsReady))
        {
            Moonfire.Launch();
            MoonfireTimer = new Timer(1000*11);
            return;
        }
        else if (Hurricane.KnownSpell && Hurricane.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 2 &&
                 ObjectManager.Target.GetDistance < 41 && mySettings.UseHurricane)
        {
            SpellManager.CastSpellByIDAndPosition(16914, ObjectManager.Target.Position);
            return;
        }
        else
        {
            if (Wrath.KnownSpell && Wrath.IsSpellUsable && Wrath.IsHostileDistanceGood
                && mySettings.UseWrath)
            {
                Wrath.Launch();
                return;
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: DruidRestorationSettings

    [Serializable]
    public class DruidRestorationSettings : Settings
    {
        public bool DoAvoidMelee = false;
        public int DoAvoidMeleeDistance = 0;
        public bool UseAlchFlask = true;
        public bool UseArcaneTorrentForDecast = true;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public bool UseArcaneTorrentForResource = true;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public bool UseBarkskin = true;
        public bool UseBerserking = true;
        public bool UseBloodFury = true;
        public bool UseCenarionWard = true;
        public bool UseDash = true;
        public bool UseDisorientingRoar = true;
        public bool UseEngGlove = true;
        public bool UseEntanglingRoots = true;
        public bool UseFaerieFire = true;
        public bool UseForceofNature = true;
        public bool UseGiftoftheNaaru = true;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public bool UseHealingTouch = true;
        public bool UseHurricane = true;
        public bool UseIncarnation = true;
        public bool UseInnervate = true;
        public bool UseIronbark = true;
        public bool UseLifeblood = true;
        public bool UseLifebloom = true;
        public bool UseLowCombat = true;
        public bool UseMarkoftheWild = true;
        public bool UseMassEntanglement = true;
        public bool UseMightofUrsoc = true;
        public bool UseMightyBash = true;
        public bool UseMoonfire = true;
        public bool UseNaturesGrasp = true;
        public bool UseNaturesSwiftness = true;
        public bool UseNourish = false;
        public bool UseRegrowth = true;
        public bool UseRejuvenation = true;
        public bool UseRenewal = true;
        public bool UseSolarBeam = true;
        public bool UseStampedingRoar = true;
        public bool UseStoneform = true;
        public int UseStoneformAtPercentage = 80;
        public bool UseSwiftmend = true;
        public bool UseTranquility = true;
        public bool UseTrinketOne = true;
        public bool UseTrinketTwo = true;
        public bool UseTyphoon = true;
        public bool UseUrsolsVortex = true;
        public bool UseWarStomp = true;
        public int UseWarStompAtPercentage = 80;
        public bool UseWildCharge = true;
        public bool UseWildGrowth = true;
        public bool UseWildMushroom = false;
        public bool UseWrath = true;

        public DruidRestorationSettings()
        {
            ConfigWinForm(new Point(500, 400), "Druid Restoration Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Druid Buffs */
            AddControlInWinForm("Use Dash", "UseDash", "Druid Buffs");
            AddControlInWinForm("Use Faerie Fire", "UseFaerieFire", "Druid Buffs");
            AddControlInWinForm("Use Mark of the Wild", "UseMarkoftheWild", "Druid Buffs");
            AddControlInWinForm("Use Stampeding Roar", "UseStampedingRoar", "Druid Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Hurricane", "UseHurricane", "Offensive Spell");
            AddControlInWinForm("Use Moonfire", "UseMoonfire", "Offensive Spell");
            AddControlInWinForm("Use Wrath", "UseWrath", "Offensive Spell");
            /* Healing Cooldown */
            AddControlInWinForm("Use Force of Nature", "UseForceofNature", "Offensive Cooldown");
            AddControlInWinForm("Use Incarnation", "UseIncarnation", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Barkskin", "UseBarkskin", "Defensive Cooldown");
            AddControlInWinForm("Use Disorienting Roar", "UseDisorientingRoar", "Defensive Cooldown");
            AddControlInWinForm("Use Entangling Roots", "UseEntanglingRoots", "Defensive Cooldown");
            AddControlInWinForm("Use Ironbark", "UseIronbark", "Defensive Cooldown");
            AddControlInWinForm("Use Mass Entanglement", "UseMassEntanglement", "Defensive Cooldown");
            AddControlInWinForm("Use Mighty Bash", "UseMightyBash", "Defensive Cooldown");
            AddControlInWinForm("Use Nature's Grasp", "UseNaturesGrasp", "Defensive Cooldown");
            AddControlInWinForm("Use Solar Beam", "UseSolarBeam", "Defensive Cooldown");
            AddControlInWinForm("Use Typhoon", "UseTyphoon", "Defensive Cooldown");
            AddControlInWinForm("Use Ursol's Vortex", "UseUrsolsVortex", "Defensive Cooldown");
            AddControlInWinForm("Use Wild Charge", "UseWildCharge", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Cenarion Ward", "UseCenarionWard", "Healing Spell");
            AddControlInWinForm("Use Healing Touch", "UseHealingTouch", "Healing Spell");
            AddControlInWinForm("Use Innervate", "UseInnervate", "Healing Spell");
            AddControlInWinForm("Use Lifebloom", "UseLifebloom", "Offensive Spell");
            AddControlInWinForm("Use Might of Ursoc", "UseMightofUrsoc", "Healing Spell");
            AddControlInWinForm("Use Nature's Swiftness", "UseNaturesSwiftness", "Healing Spell");
            AddControlInWinForm("Use Nourish", "UseNourish", "Offensive Spell");
            AddControlInWinForm("Use Regrowth", "UseRegrowth", "Offensive Spell");
            AddControlInWinForm("Use Rejuvenation", "UseRejuvenation", "Healing Spell");
            AddControlInWinForm("Use Renewal", "UseRenewal", "Healing Spell");
            AddControlInWinForm("Use Swiftmend", "UseSwiftmend", "Offensive Spell");
            AddControlInWinForm("Use Tranquility", "UseTranquility", "Healing Spell");
            AddControlInWinForm("Use Wild Growth", "UseWildGrowth", "Offensive Spell");
            AddControlInWinForm("Use WildMushroom", "UseWildMushroom", "Offensive Spell");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
            AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
            AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
        }

        public static DruidRestorationSettings CurrentSetting { get; set; }

        public static DruidRestorationSettings GetSettings()
        {
            string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Druid_Restoration.xml";
            if (File.Exists(currentSettingsFile))
            {
                return
                    CurrentSetting = Load<DruidRestorationSettings>(currentSettingsFile);
            }
            else
            {
                return new DruidRestorationSettings();
            }
        }
    }

    #endregion
}

public class DruidGuardian
{
    private readonly DruidGuardianSettings mySettings = DruidGuardianSettings.GetSettings();

    #region General Timers & Variables

    private Timer AlchFlaskTimer = new Timer(0);
    private Timer EngineeringTimer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer TrinketOneTimer = new Timer(0);
    private Timer TrinketTwoTimer = new Timer(0);

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell BloodFury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell WarStomp = new Spell("War Stomp");

    #endregion

    #region Druid Buffs

    private readonly Spell BearForm = new Spell("Bear Form");
    private readonly Spell Dash = new Spell("Dash");
    private readonly Spell FaerieFire = new Spell("Faerie Fire");
    private readonly Spell MarkoftheWild = new Spell("Mark of the Wild");
    private readonly Spell StampedingRoar = new Spell("Stampeding Roar");

    #endregion

    #region Offensive Spell

    private readonly Spell Growl = new Spell("Growl");
    private readonly Spell Lacerate = new Spell("Lacerate");
    private readonly Spell Mangle = new Spell("Mangle");
    private readonly Spell Maul = new Spell("Maul");
    private readonly Spell Swipe = new Spell("Swipe");
    private readonly Spell Thrash = new Spell("Thrash");

    #endregion

    #region Offensive Cooldown

    private readonly Spell Berserk = new Spell("Berserk");
    private readonly Spell Enrage = new Spell("Enrage");
    private readonly Spell ForceofNature = new Spell("Force of Nature");
    private readonly Spell HeartoftheWild = new Spell("Heart of the Wild");
    private readonly Spell Incarnation = new Spell("Incarnation");
    private readonly Spell NaturesVigil = new Spell("Nature's Vigil");

    #endregion

    #region Defensive Cooldown

    private readonly Spell Barkskin = new Spell("Barkskin");
    private readonly Spell BearHug = new Spell("Bear Hug");
    private readonly Spell DisorientingRoar = new Spell("Disorienting Roar");
    private readonly Spell MassEntanglement = new Spell("Mass Entanglement");
    private readonly Spell MightyBash = new Spell("Mighty Bash");
    private readonly Spell NaturesGrasp = new Spell("Nature's Grasp");
    private readonly Spell SavageDefense = new Spell("Savage Defense");
    private readonly Spell SkullBash = new Spell("Skull Bash");
    private readonly Spell SurvivalInstincts = new Spell("Survival Instincts");
    private readonly Spell Typhoon = new Spell("Typhoon");
    private readonly Spell UrsolsVortex = new Spell("Ursol's Vortex");
    private readonly Spell WildCharge = new Spell("Wild Charge");

    #endregion

    #region Healing Spell

    private readonly Spell CenarionWard = new Spell("Cenarion Ward");
    private readonly Spell FrenziedRegeneration = new Spell("FrenziedRegeneration");
    private readonly Spell HealingTouch = new Spell("Healing Touch");
    private readonly Spell Innervate = new Spell("Innervate");
    private readonly Spell MightofUrsoc = new Spell("Might of Ursoc");
    private readonly Spell NaturesSwiftness = new Spell("Nature's Swiftness");
    private readonly Spell Rejuvenation = new Spell("Rejuvenation");
    private readonly Spell Renewal = new Spell("Renewal");
    private readonly Spell Tranquility = new Spell("Tranquility");
    private Timer HealingTouchTimer = new Timer(0);

    #endregion

    public DruidGuardian()
    {
        Main.range = 5.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (FaerieFire.IsHostileDistanceGood || WildCharge.IsHostileDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && mySettings.UseLowCombat)
                            {
                                if (ObjectManager.Target.GetDistance < 30)
                                    LowCombat();
                            }
                            else
                            {
                                if (ObjectManager.Target.GetDistance < 30)
                                    Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void Pull()
    {
        if (!ObjectManager.Me.HaveBuff(5487) && mySettings.UseBearForm)
            BearForm.Launch();

        if (WildCharge.KnownSpell && WildCharge.IsSpellUsable && WildCharge.IsHostileDistanceGood
            && mySettings.UseWildCharge && ObjectManager.Target.GetDistance > Main.range)
        {
            WildCharge.Launch();
            return;
        }
        else
        {
            if (FaerieFire.KnownSpell && FaerieFire.IsSpellUsable && FaerieFire.IsHostileDistanceGood
                && mySettings.UseFaerieFire)
            {
                FaerieFire.Launch();
                return;
            }
        }
    }

    private void LowCombat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        DefenseCycle();
        Heal();

        if (!ObjectManager.Me.HaveBuff(5487) && mySettings.UseBearForm)
        {
            BearForm.Launch();
            return;
        }

        if (Mangle.IsSpellUsable && Mangle.KnownSpell && Mangle.IsHostileDistanceGood
            && mySettings.UseMangle)
        {
            Mangle.Launch();
            if (ObjectManager.Target.HealthPercent < 50 && ObjectManager.Target.HealthPercent > 0)
            {
                Mangle.Launch();
                return;
            }
        }
        else if (Maul.IsSpellUsable && Maul.KnownSpell && Maul.IsHostileDistanceGood
                 && mySettings.UseMaul)
        {
            Maul.Launch();
            return;
        }
        else
        {
            if (Swipe.IsSpellUsable && Swipe.KnownSpell && Swipe.IsHostileDistanceGood
                && mySettings.UseSwipe)
            {
                Swipe.Launch();
                return;
            }
        }
    }

    private void Combat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        if (OnCD.IsReady)
            DefenseCycle();
        DPSCycle();
        Heal();
        Decast();
        DPSCycle();
        DPSBurst();
        DPSCycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (MarkoftheWild.KnownSpell && MarkoftheWild.IsSpellUsable && !MarkoftheWild.HaveBuff)
        {
            MarkoftheWild.Launch();
            return;
        }
        else if (AlchFlaskTimer.IsReady && mySettings.UseAlchFlask && Alchemy.KnownSpell
                 && ItemsManager.GetItemCountByIdLUA(75525) == 1)
        {
            Logging.WriteFight("Use Alchi Flask");
            Lua.RunMacroText("/use item:75525");
            AlchFlaskTimer = new Timer(1000*60*60*2);
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() == 0 && mySettings.UseDash
                 && Dash.KnownSpell && Dash.IsSpellUsable && !Dash.HaveBuff && !StampedingRoar.HaveBuff
                 && ObjectManager.Me.GetMove)
        {
            Dash.Launch();
            return;
        }
        else
        {
            if (ObjectManager.GetNumberAttackPlayer() == 0 && mySettings.UseStampedingRoar
                && StampedingRoar.KnownSpell && StampedingRoar.IsSpellUsable && !Dash.HaveBuff
                && !StampedingRoar.HaveBuff && ObjectManager.Me.GetMove)
            {
                StampedingRoar.Launch();
                return;
            }
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            var maxTimeTimer = new Timer(1000*2);
            MovementsAction.MoveBackward(true);
            while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                Thread.Sleep(300);
            MovementsAction.MoveBackward(false);
            if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
            {
                MovementsAction.MoveForward(true);
                Thread.Sleep(1000);
                MovementsAction.MoveForward(false);
                MovementManager.Face(ObjectManager.Target.Position);
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (ObjectManager.Me.HealthPercent < 80 && NaturesSwiftness.IsSpellUsable && NaturesSwiftness.KnownSpell
            && mySettings.UseNaturesSwiftness && mySettings.UseHealingTouch)
        {
            NaturesSwiftness.Launch();
            Thread.Sleep(400);
            HealingTouch.Launch();
            return;
        }
        if (ObjectManager.Me.HealthPercent < 75 && FrenziedRegeneration.IsSpellUsable &&
            FrenziedRegeneration.KnownSpell
            && mySettings.UseFrenziedRegeneration)
        {
            FrenziedRegeneration.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 70 && Renewal.IsSpellUsable && Renewal.KnownSpell
                 && mySettings.UseRenewal)
        {
            Renewal.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 90 && CenarionWard.IsSpellUsable && CenarionWard.KnownSpell
                 && mySettings.UseCenarionWard)
        {
            CenarionWard.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 50 && !Fight.InFight && ObjectManager.GetNumberAttackPlayer() == 0
                 && HealingTouch.IsSpellUsable && HealingTouch.KnownSpell && mySettings.UseHealingTouch)
        {
            while (ObjectManager.Me.HealthPercent < 95 && HealingTouch.IsSpellUsable)
            {
                HealingTouch.Launch();
                Thread.Sleep(1500);
            }
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseGiftoftheNaaruAtPercentage &&
                 GiftoftheNaaru.IsSpellUsable && GiftoftheNaaru.KnownSpell)
        {
            GiftoftheNaaru.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 50 && Rejuvenation.IsSpellUsable && Rejuvenation.KnownSpell
                 && !Rejuvenation.HaveBuff && mySettings.UseRejuvenation)
        {
            Rejuvenation.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 40 && HealingTouch.IsSpellUsable && HealingTouch.KnownSpell
                 && HealingTouchTimer.IsReady && mySettings.UseHealingTouch)
        {
            HealingTouch.Launch();
            HealingTouchTimer = new Timer(1000*15);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 35 && MightofUrsoc.IsSpellUsable && MightofUrsoc.KnownSpell
                 && mySettings.UseMightofUrsoc)
        {
            MightofUrsoc.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 30 && Tranquility.IsSpellUsable && Tranquility.KnownSpell
                 && mySettings.UseTranquility)
        {
            Tranquility.Launch();
            while (ObjectManager.Me.IsCast)
            {
                Thread.Sleep(100);
                Thread.Sleep(100);
            }
            return;
        }
        else
        {
            if (ObjectManager.Me.ManaPercentage < 10 && mySettings.UseInnervate)
            {
                Innervate.Launch();
                return;
            }
        }
    }

    private void DefenseCycle()
    {
        if (ObjectManager.Me.HealthPercent < 80 && mySettings.UseBarkskin
            && Barkskin.KnownSpell && Barkskin.IsSpellUsable)
        {
            Barkskin.Launch();
            OnCD = new Timer(1000*12);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 90 && mySettings.UseSavageDefense
                 && SavageDefense.KnownSpell && SavageDefense.IsSpellUsable)
        {
            SavageDefense.Launch();
            OnCD = new Timer(1000*6);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 90 && MightyBash.IsHostileDistanceGood
                 && MightyBash.KnownSpell && MightyBash.IsSpellUsable && mySettings.UseMightyBash)
        {
            MightyBash.Launch();
            OnCD = new Timer(1000*5);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 70 && BearHug.KnownSpell && BearHug.IsSpellUsable
                 && mySettings.UseBearHug && BearHug.IsHostileDistanceGood)
        {
            BearHug.Launch();
            OnCD = new Timer(1000*3);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 70 && mySettings.UseSurvivalInstincts
                 && SurvivalInstincts.KnownSpell && SurvivalInstincts.IsSpellUsable)
        {
            SurvivalInstincts.Launch();
            OnCD = new Timer(1000*12);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable &&
                 Stoneform.KnownSpell
                 && mySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (MassEntanglement.KnownSpell && MassEntanglement.IsSpellUsable && MassEntanglement.IsHostileDistanceGood
                 && ObjectManager.Target.IsCast && mySettings.UseMassEntanglement &&
                 ObjectManager.GetNumberAttackPlayer() > 2
                 && ObjectManager.Me.HealthPercent < 70)
        {
            if (Typhoon.KnownSpell && Typhoon.IsSpellUsable && mySettings.UseTyphoon
                && ObjectManager.Target.GetDistance < 41 && mySettings.UseTyphoon)
            {
                Typhoon.Launch();
                Thread.Sleep(200);
            }

            MassEntanglement.Launch();
            return;
        }
        else if (UrsolsVortex.KnownSpell && UrsolsVortex.IsSpellUsable && UrsolsVortex.IsHostileDistanceGood
                 && mySettings.UseUrsolsVortex && ObjectManager.Me.HealthPercent < 80
                 && ObjectManager.GetNumberAttackPlayer() > 2)
        {
            UrsolsVortex.Launch();

            if (WildCharge.KnownSpell && WildCharge.IsHostileDistanceGood && WildCharge.IsSpellUsable
                && mySettings.UseWildCharge && ObjectManager.Target.GetDistance > Main.range)
            {
                Thread.Sleep(200);
                WildCharge.Launch();
            }
            return;
        }
        else if (NaturesGrasp.KnownSpell && NaturesGrasp.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 2
                 && ObjectManager.Target.IsCast && mySettings.UseNaturesGrasp && ObjectManager.Me.HealthPercent < 80)
        {
            NaturesGrasp.Launch();
            return;
        }
        else if (Typhoon.KnownSpell && Typhoon.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 2
                 && ObjectManager.Target.GetDistance < 41 && ObjectManager.Me.HealthPercent < 70
                 && mySettings.UseTyphoon)
        {
            Typhoon.Launch();
            return;
        }
        else if (DisorientingRoar.KnownSpell && DisorientingRoar.IsSpellUsable &&
                 ObjectManager.GetNumberAttackPlayer() > 2
                 && ObjectManager.Target.GetDistance < 10 && ObjectManager.Me.HealthPercent < 70
                 && mySettings.UseDisorientingRoar)
        {
            DisorientingRoar.Launch();
            OnCD = new Timer(1000*3);
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent <= mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable &&
                WarStomp.KnownSpell
                && mySettings.UseWarStomp)
            {
                WarStomp.Launch();
                OnCD = new Timer(1000*2);
                return;
            }
        }
    }

    private void Decast()
    {
        if (ObjectManager.Target.IsCast && mySettings.UseSkullBash
            && ObjectManager.Target.IsTargetingMe
            && SkullBash.KnownSpell && SkullBash.IsSpellUsable && SkullBash.IsHostileDistanceGood)
        {
            SkullBash.Launch();
            return;
        }
        else
        {
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8
                && ObjectManager.Me.HealthPercent <= mySettings.UseArcaneTorrentForDecastAtPercentage
                && mySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast &&
                ObjectManager.Target.IsTargetingMe)
            {
                ArcaneTorrent.Launch();
                return;
            }
        }
    }

    private void DPSBurst()
    {
        if (mySettings.UseTrinketOne && TrinketOneTimer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketOneTimer = new Timer(1000*60*2);
        }
        else if (mySettings.UseTrinketTwo && TrinketTwoTimer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketTwoTimer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseBerserking)
            Berserking.Launch();
        else if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseBloodFury)
            BloodFury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (EngineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            EngineeringTimer = new Timer(1000*60);
        }
        else if (Enrage.IsSpellUsable && Enrage.KnownSpell && Enrage.IsHostileDistanceGood
                 && mySettings.UseEnrage && ObjectManager.Me.RagePercentage < 70)
        {
            Enrage.Launch();
            return;
        }
        else if (ForceofNature.IsSpellUsable && ForceofNature.KnownSpell && ForceofNature.IsHostileDistanceGood
                 && mySettings.UseForceofNature)
        {
            SpellManager.CastSpellByIDAndPosition(106737, ObjectManager.Target.Position);
            return;
        }
        else if (Incarnation.IsSpellUsable && Incarnation.KnownSpell && mySettings.UseIncarnation
                 && ObjectManager.Target.GetDistance < 30)
        {
            Incarnation.Launch();
            return;
        }
        else if (HeartoftheWild.IsSpellUsable && HeartoftheWild.KnownSpell && mySettings.UseHeartoftheWild
                 && ObjectManager.Target.GetDistance < 30)
        {
            HeartoftheWild.Launch();
            return;
        }
        else if (NaturesVigil.IsSpellUsable && NaturesVigil.KnownSpell && mySettings.UseNaturesVigil
                 && ObjectManager.Target.GetDistance < 30)
        {
            NaturesVigil.Launch();
            return;
        }
        else
        {
            if (Berserk.KnownSpell && Berserk.IsSpellUsable && mySettings.UseBerserk
                && ObjectManager.Target.GetDistance < 30)
            {
                Berserk.Launch();
                return;
            }
        }
    }

    private void DPSCycle()
    {
        if (!ObjectManager.Me.HaveBuff(5487) && mySettings.UseBearForm)
        {
            BearForm.Launch();
            return;
        }

        if (FaerieFire.KnownSpell && FaerieFire.IsSpellUsable && FaerieFire.IsHostileDistanceGood
            && mySettings.UseFaerieFire && (!FaerieFire.TargetHaveBuff || !ObjectManager.Target.HaveBuff(113746)))
        {
            FaerieFire.Launch();
            return;
        }
        else if (Growl.KnownSpell && Growl.IsSpellUsable && Growl.IsHostileDistanceGood
                 && mySettings.UseGrowl && !ObjectManager.Target.InCombat)
        {
            Growl.Launch();
            return;
        }
        else if (Mangle.KnownSpell && Mangle.IsSpellUsable && Mangle.IsHostileDistanceGood
                 && mySettings.UseMangle)
        {
            Mangle.Launch();
            return;
        }
        else if (Thrash.IsSpellUsable && Thrash.KnownSpell
                 && Thrash.IsHostileDistanceGood && !Thrash.TargetHaveBuff && mySettings.UseThrash)
        {
            Thrash.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 1 && Swipe.IsSpellUsable && Swipe.KnownSpell
                 && Swipe.IsHostileDistanceGood && mySettings.UseSwipe)
        {
            Swipe.Launch();
            return;
        }
        else if (Lacerate.KnownSpell && Lacerate.IsSpellUsable && Lacerate.IsHostileDistanceGood
                 && mySettings.UseLacerate)
        {
            Lacerate.Launch();
            return;
        }
        else if (Maul.KnownSpell && Maul.IsSpellUsable && Maul.IsHostileDistanceGood
                 && mySettings.UseMaul && ObjectManager.Me.RagePercentage > 90
                 && ObjectManager.Me.HealthPercent > 90)
        {
            Maul.Launch();
            return;
        }
        else
        {
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell
                && mySettings.UseArcaneTorrentForResource)
            {
                ArcaneTorrent.Launch();
                return;
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: DruidGuardianSettings

    [Serializable]
    public class DruidGuardianSettings : Settings
    {
        public bool DoAvoidMelee = false;
        public int DoAvoidMeleeDistance = 0;
        public bool UseAlchFlask = true;
        public bool UseArcaneTorrentForDecast = true;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public bool UseArcaneTorrentForResource = true;
        public bool UseBarkskin = true;
        public bool UseBearForm = true;
        public bool UseBearHug = true;
        public bool UseBerserk = true;
        public bool UseBerserking = true;
        public bool UseBloodFury = true;
        public bool UseCenarionWard = true;
        public bool UseDash = true;
        public bool UseDisorientingRoar = true;
        public bool UseEngGlove = true;
        public bool UseEnrage = true;
        public bool UseFaerieFire = true;
        public bool UseForceofNature = true;
        public bool UseFrenziedRegeneration = true;
        public bool UseGiftoftheNaaru = true;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public bool UseGrowl = true;
        public bool UseHealingTouch = true;
        public bool UseHeartoftheWild = true;
        public bool UseIncarnation = true;
        public bool UseInnervate = true;
        public bool UseLacerate = true;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMangle = true;
        public bool UseMarkoftheWild = true;
        public bool UseMassEntanglement = true;
        public bool UseMaul = true;
        public bool UseMightofUrsoc = true;
        public bool UseMightyBash = true;
        public bool UseNaturesGrasp = true;
        public bool UseNaturesSwiftness = true;
        public bool UseNaturesVigil = true;
        public bool UseRejuvenation = true;
        public bool UseRenewal = true;
        public bool UseSavageDefense = true;
        public bool UseSkullBash = true;
        public bool UseStampedingRoar = true;
        public bool UseStoneform = true;
        public int UseStoneformAtPercentage = 80;
        public bool UseSurvivalInstincts = true;
        public bool UseSwipe = true;
        public bool UseThrash = true;
        public bool UseTranquility = true;
        public bool UseTrinketOne = true;
        public bool UseTrinketTwo = true;
        public bool UseTyphoon = true;
        public bool UseUrsolsVortex = true;
        public bool UseWarStomp = true;
        public int UseWarStompAtPercentage = 80;
        public bool UseWildCharge = true;

        public DruidGuardianSettings()
        {
            ConfigWinForm(new Point(500, 400), "Druid Guardian Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Druid Buffs */
            AddControlInWinForm("Use Bear Form", "UseBearForm", "Druid Buffs");
            AddControlInWinForm("Use Dash", "UseDash", "Druid Buffs");
            AddControlInWinForm("Use Faerie Fire", "UseFaerieFire", "Druid Buffs");
            AddControlInWinForm("Use Mark of the Wild", "UseMarkoftheWild", "Druid Buffs");
            AddControlInWinForm("Use Stampeding Roar", "UseStampedingRoar", "Druid Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Growl", "UseGrowl", "Offensive Spell");
            AddControlInWinForm("Use Lacerate", "UseLacerate", "Offensive Spell");
            AddControlInWinForm("Use Mangle", "UseMangle", "Offensive Spell");
            AddControlInWinForm("Use Maul", "UseMaul", "Offensive Spell");
            AddControlInWinForm("Use Swipe", "UseSwipe", "Offensive Spell");
            AddControlInWinForm("Use Thrash", "UseThrash", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Berserk", "UseBerserk", "Offensive Cooldown");
            AddControlInWinForm("Use Enrage", "UseEnrage", "Offensive Cooldown");
            AddControlInWinForm("Use Force of Nature", "UseForceofNature", "Offensive Cooldown");
            AddControlInWinForm("Use Heart of the Wild", "UseHeartoftheWild", "Offensive Cooldown");
            AddControlInWinForm("Use Incarnation", "UseIncarnation", "Offensive Cooldown");
            AddControlInWinForm("Use Nature's Vigil", "UseNaturesVigil", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Bear Hug", "UseBearHug", "Defensive Cooldown");
            AddControlInWinForm("Use Barkskin", "UseBarkskin", "Defensive Cooldown");
            AddControlInWinForm("Use Disorienting Roar", "UseDisorientingRoar", "Defensive Cooldown");
            AddControlInWinForm("Use Mass Entanglement", "UseMassEntanglement", "Defensive Cooldown");
            AddControlInWinForm("Use Mighty Bash", "UseMightyBash", "Defensive Cooldown");
            AddControlInWinForm("Use Nature's Grasp", "UseNaturesGrasp", "Defensive Cooldown");
            AddControlInWinForm("Use Savage Defense", "UseSavageDefense", "Defensive Cooldown");
            AddControlInWinForm("Use Skull Bash", "UseSkullBash", "Defensive Cooldown");
            AddControlInWinForm("Use Survival Instincts", "UseSurvivalInstincts", "Defensive Cooldown");
            AddControlInWinForm("Use Typhoon", "UseTyphoon", "Defensive Cooldown");
            AddControlInWinForm("Use Ursol's Vortex", "UseUrsolsVortex", "Defensive Cooldown");
            AddControlInWinForm("Use Wild Charge", "UseWildCharge", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Cenarion Ward", "UseCenarionWard", "Healing Spell");
            AddControlInWinForm("Use Frenzied Regeneration", "UseFrenziedRegeneration", "Healing Spell");
            AddControlInWinForm("Use Healing Touch", "UseHealingTouch", "Healing Spell");
            AddControlInWinForm("Use Innervate", "UseInnervate", "Healing Spell");
            AddControlInWinForm("Use Might of Ursoc", "UseMightofUrsoc", "Healing Spell");
            AddControlInWinForm("Use Nature's Swiftness", "UseNaturesSwiftness", "Healing Spell");
            AddControlInWinForm("Use Rejuvenation", "UseRejuvenation", "Healing Spell");
            AddControlInWinForm("Use Renewal", "UseRenewal", "Healing Spell");
            AddControlInWinForm("Use Tranquility", "UseTranquility", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Using Glyph of Shred?", "UseGlyphofShred", "Game Settings");
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
            AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
            AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
        }

        public static DruidGuardianSettings CurrentSetting { get; set; }

        public static DruidGuardianSettings GetSettings()
        {
            string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Druid_Guardian.xml";
            if (File.Exists(currentSettingsFile))
            {
                return
                    CurrentSetting = Load<DruidGuardianSettings>(currentSettingsFile);
            }
            else
            {
                return new DruidGuardianSettings();
            }
        }
    }

    #endregion
}

#endregion

#region Paladin

public class PaladinHoly
{
    private readonly PaladinHolySettings mySettings = PaladinHolySettings.GetSettings();

    #region Professions & Racial

    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell WarStomp = new Spell("War Stomp");

    #endregion

    #region Paladin Seals & Buffs

    private readonly Spell BlessingOfKings = new Spell("Blessing of Kings");
    private readonly Spell BlessingOfMight = new Spell("Blessing of Might");
    private readonly Spell SealOfInsight = new Spell("Seal of Insight");
    private readonly Spell SealOfTheRighteousness = new Spell("Seal of Righteousness");
    private readonly Spell SealOfTruth = new Spell("Seal of Truth");

    #endregion

    #region Offensive Spell

    private readonly Spell Denounce = new Spell("Denounce");
    private readonly Spell HammerOfJustice = new Spell("Hammer of Justice");
    private readonly Spell HammerOfWrath = new Spell("Hammer of Wrath");
    private readonly Spell HolyShock = new Spell("Holy Shock");

    #endregion

    #region Offensive Cooldown

    private readonly Spell AvengingWrath = new Spell("Avenging Wrath");
    private readonly Spell DivineFavor = new Spell("Divine Favor");
    private readonly Spell HolyAvenger = new Spell("HolyAvenger");

    #endregion

    #region Defensive Cooldown

    private readonly Spell DevotionAura = new Spell("Devotion Aura");
    private readonly Spell DivineProtection = new Spell("Divine Protection");
    private readonly Spell DivineShield = new Spell("Divine Shield");
    private readonly Spell HandOfProtection = new Spell("Hand of Protection");
    private readonly Spell HandOfPurity = new Spell("Hand of Purity");
    private readonly Spell SacredShield = new Spell("Sacred Shield");

    #endregion

    #region Healing Spell

    private readonly Spell BeaconOfLight = new Spell("Beacon of Light");
    private readonly Spell DivineLight = new Spell("Divine Light");
    private readonly Spell DivinePlea = new Spell("Divine Plea");
    private readonly Spell FlashOfLight = new Spell("Flash of Light");
    private readonly Spell GlyphOfHarshWords = new Spell("Glyph of Harsh Words");
    private readonly Spell HolyLight = new Spell("Holy Light");
    private readonly Spell HolyRadiance = new Spell("Holy Radiance");
    private readonly Spell LayOnHands = new Spell("Lay on Hands");
    private readonly Spell WordOfGlory = new Spell("Word of Glory");

    #endregion

    public PaladinHoly()
    {
        Main.range = 30f;

        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget && HolyShock.IsHostileDistanceGood)
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }
                            if (ObjectManager.Target.GetDistance < 41)
                                Combat();
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void Pull()
    {
        if (HolyShock.KnownSpell && HolyShock.IsHostileDistanceGood && HolyShock.IsSpellUsable && mySettings.UseHolyShock)
        {
            HolyShock.Launch();
            return;
        }
    }

    private void Combat()
    {
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        DPSCycle();
        DPSBurst();
        DPSCycle();
        Heal();
        DPSCycle();
        Buffs();
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Blessing();
            Heal();
        }

        Seal();
    }

    private void Buffs()
    {
        if (!ObjectManager.Me.IsMounted)
            Blessing();
        Seal();
    }

    private void Seal()
    {
        if (SealOfInsight.KnownSpell && mySettings.UseSealOfInsight)
        {
            if (!SealOfInsight.HaveBuff && SealOfInsight.IsSpellUsable)
                SealOfInsight.Launch();
        }
        else if (SealOfTruth.KnownSpell && mySettings.UseSealOfTruth)
        {
            if (!SealOfTruth.HaveBuff && SealOfTruth.IsSpellUsable)
                SealOfTruth.Launch();
        }
        else if (SealOfTheRighteousness.KnownSpell && mySettings.UseSealOfTheRighteousness)
        {
            if (!SealOfTheRighteousness.HaveBuff && SealOfTheRighteousness.IsSpellUsable)
                SealOfTheRighteousness.Launch();
        }
    }

    private void Blessing()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (BlessingOfKings.KnownSpell && mySettings.UseBlessingOfKings)
        {
            if (!BlessingOfKings.HaveBuff && BlessingOfKings.IsSpellUsable)
                BlessingOfKings.Launch();
        }
        else if (BlessingOfMight.KnownSpell && mySettings.UseBlessingOfMight)
        {
            if (!BlessingOfMight.HaveBuff && BlessingOfMight.IsSpellUsable)
                BlessingOfMight.Launch();
        }
        if (BeaconOfLight.KnownSpell && mySettings.UseBeaconOfLight)
        {
            if (!BeaconOfLight.HaveBuff && BeaconOfLight.IsSpellUsable)
                BeaconOfLight.Launch();
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.HealthPercent < 95 && !Fight.InFight && ObjectManager.GetNumberAttackPlayer() == 0)
        {
            if (DivineLight.KnownSpell && DivineLight.IsSpellUsable && mySettings.UseDivineLight)
            {
                DivineLight.Launch(true, true, true);
                return;
            }
            if (FlashOfLight.KnownSpell && FlashOfLight.IsSpellUsable && mySettings.UseFlashOfLight)
            {
                FlashOfLight.Launch(true, true, true);
                return;
            }
            if (HolyLight.KnownSpell && HolyLight.IsSpellUsable && mySettings.UseHolyLight)
            {
                HolyLight.Launch(true, true, true);
                return;
            }
        }
        if (!ObjectManager.Me.HaveBuff(25771))
        {
            if (DivineShield.KnownSpell && ObjectManager.Me.HealthPercent > 0 && ObjectManager.Me.HealthPercent <= 20 &&
                DivineShield.IsSpellUsable && mySettings.UseDivineShield)
            {
                DivineShield.Launch();
                return;
            }
            if (LayOnHands.KnownSpell && ObjectManager.Me.HealthPercent > 0 && ObjectManager.Me.HealthPercent <= 20 &&
                LayOnHands.IsSpellUsable && mySettings.UseLayOnHands)
            {
                LayOnHands.Launch();
                return;
            }
            if (HandOfProtection.KnownSpell && ObjectManager.Me.HealthPercent > 0 &&
                ObjectManager.Me.HealthPercent <= 20 &&
                HandOfProtection.IsSpellUsable && mySettings.UseHandOfProtection)
            {
                HandOfProtection.Launch();
                return;
            }
        }
        if (ObjectManager.Me.ManaPercentage < 30)
        {
            if (ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable && mySettings.UseArcaneTorrentForResource)
                ArcaneTorrent.Launch();
            if (DivinePlea.KnownSpell && DivinePlea.IsSpellUsable && mySettings.UseHandOfProtection)
            {
                DivinePlea.Launch();
                return;
            }
        }
        if (ObjectManager.Me.HealthPercent > 0 && ObjectManager.Me.HealthPercent < 50)
        {
            if (WordOfGlory.KnownSpell && WordOfGlory.IsSpellUsable &&
                (!GlyphOfHarshWords.KnownSpell /* || cast on me */) && mySettings.UseWordOfGlory)
                WordOfGlory.Launch();
            if (DivineLight.KnownSpell && DivineLight.IsSpellUsable && mySettings.UseDivineLight)
            {
                DivineLight.Launch();
                return;
            }
            if (FlashOfLight.KnownSpell && FlashOfLight.IsSpellUsable && mySettings.UseFlashOfLight)
            {
                FlashOfLight.Launch();
                return;
            }
            if (HolyLight.KnownSpell && HolyLight.IsSpellUsable && mySettings.UseHolyLight)
            {
                HolyLight.Launch();
                return;
            }
        }
        if (ObjectManager.Me.HealthPercent >= 0 && ObjectManager.Me.HealthPercent < 30)
        {
            if (WordOfGlory.KnownSpell && WordOfGlory.IsSpellUsable &&
                (!GlyphOfHarshWords.KnownSpell /* || cast on me */) && mySettings.UseWordOfGlory)
                WordOfGlory.Launch();
            if (DivineProtection.KnownSpell && DivineProtection.IsSpellUsable && mySettings.UseDivineProtection)
                DivineProtection.Launch();
            if (FlashOfLight.KnownSpell && FlashOfLight.IsSpellUsable && mySettings.UseFlashOfLight)
            {
                FlashOfLight.Launch();
                return;
            }
            if (HolyLight.KnownSpell && HolyLight.IsSpellUsable && mySettings.UseHolyLight)
            {
                HolyLight.Launch();
                return;
            }
            if (DivineLight.KnownSpell && DivineLight.IsSpellUsable && mySettings.UseDivineLight)
            {
                DivineLight.Launch();
                return;
            }
        }
    }

    private void DPSBurst()
    {
        if (DivineFavor.KnownSpell && DivineFavor.IsSpellUsable)
        {
            if (AvengingWrath.KnownSpell && AvengingWrath.IsSpellUsable && mySettings.UseAvengingWrath)
            {
                AvengingWrath.Launch();
            }
            if (Lifeblood.KnownSpell && Lifeblood.IsSpellUsable && mySettings.UseLifeblood)
            {
                Lifeblood.Launch();
            }
            if (HolyAvenger.KnownSpell && HolyAvenger.IsSpellUsable && mySettings.UseHolyAvenger)
            {
                HolyAvenger.Launch();
            }
            if (mySettings.UseDivineFavor)
                DivineFavor.Launch();
            return;
        }
        else if (Lifeblood.KnownSpell && Lifeblood.IsSpellUsable && mySettings.UseLifeblood)
        {
            Lifeblood.Launch();
            return;
        }
    }

    private void DPSCycle()
    {
        if (HolyShock.KnownSpell && HolyShock.IsHostileDistanceGood && HolyShock.IsSpellUsable && mySettings.UseHolyShock)
        {
            HolyShock.Launch();
            return;
        }
        if (HammerOfWrath.KnownSpell && HammerOfWrath.IsHostileDistanceGood && HammerOfWrath.IsSpellUsable &&
            mySettings.UseHammerOfWrath)
        {
            HammerOfWrath.Launch();
            return;
        }
        if (HammerOfJustice.KnownSpell && HammerOfJustice.IsHostileDistanceGood && HammerOfJustice.IsSpellUsable &&
            mySettings.UseHammerOfJustice)
        {
            HammerOfJustice.Launch();
            return;
        }
        if (Denounce.KnownSpell && Denounce.IsHostileDistanceGood && Denounce.IsSpellUsable && mySettings.UseDenounce)
        {
            Denounce.Launch();
            return;
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            var maxTimeTimer = new Timer(1000*2);
            MovementsAction.MoveBackward(true);
            while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                Thread.Sleep(300);
            MovementsAction.MoveBackward(false);
            if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
            {
                MovementsAction.MoveForward(true);
                Thread.Sleep(1000);
                MovementsAction.MoveForward(false);
                MovementManager.Face(ObjectManager.Target.Position);
            }
        }
    }

    #region Nested type: PaladinHolySettings

    [Serializable]
    public class PaladinHolySettings : Settings
    {
        public bool DoAvoidMelee = false;
        public int DoAvoidMeleeDistance = 0;
        public bool UseArcaneTorrentForDecast = true;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public bool UseArcaneTorrentForResource = true;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public bool UseAvengingWrath = true;
        public bool UseBeaconOfLight = true;
        public bool UseBerserking = true;
        public bool UseBlessingOfKings = true;
        public bool UseBlessingOfMight = true;
        public bool UseDenounce = true;
        public bool UseDevotionAura = true;
        public bool UseDivineFavor = true;
        public bool UseDivineLight = true;
        public bool UseDivinePlea = true;
        public bool UseDivineProtection = true;
        public bool UseDivineShield = true;
        public bool UseFlashOfLight = true;
        public bool UseGiftoftheNaaru = true;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public bool UseHammerOfJustice = true;
        public bool UseHammerOfWrath = true;
        public bool UseHandOfProtection = true;
        public bool UseHandOfPurity = true;
        public bool UseHolyAvenger = true;
        public bool UseHolyLight = true;
        public bool UseHolyRadiance = true;
        public bool UseHolyShock = true;
        public bool UseLayOnHands = true;
        public bool UseLifeblood = true;
        public bool UseSacredShield = true;
        public bool UseSealOfInsight = true;
        public bool UseSealOfTheRighteousness = true;
        public bool UseSealOfTruth = true;
        public bool UseStoneform = true;
        public int UseStoneformAtPercentage = 80;
        public bool UseWarStomp = true;
        public int UseWarStompAtPercentage = 80;
        public bool UseWordOfGlory = true;

        public PaladinHolySettings()
        {
            ConfigWinForm(new Point(500, 400), "Paladin Protection Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            /* Paladin Seals & Buffs */
            AddControlInWinForm("Use Seal of the Righteousness", "UseSealOfTheRighteousness", "Paladin Seals & Buffs");
            AddControlInWinForm("Use Seal of Truth", "UseSealOfTruth", "Paladin Seals & Buffs");
            AddControlInWinForm("Use Seal of Insight", "UseSealOfInsight", "Paladin Seals & Buffs");
            AddControlInWinForm("Use Blessing of Might", "UseBlessingOfMight", "Paladin Seals & Buffs");
            AddControlInWinForm("Use Blessing of Kings", "UseBlessingOfKings", "Paladin Seals & Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Holy Shock", "UseHolyShock", "Offensive Spell");
            AddControlInWinForm("Use Denounce", "UseDenounce", "Offensive Spell");
            AddControlInWinForm("Use Hammer of Justice", "UseHammerOfJustice", "Offensive Spell");
            AddControlInWinForm("Use Hammer of Wrath", "UseHammerOfWrath", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Divine Favor", "UseDivineFavor", "Offensive Cooldown");
            AddControlInWinForm("Use Holy Avenger", "UseHolyAvenger", "Offensive Cooldown");
            AddControlInWinForm("Use Avenging Wrath", "UseAvengingWrath", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Sacred Shield", "UseSacredShield", "Defensive Cooldown");
            AddControlInWinForm("Use Hand of Purity", "UseHandOfPurity", "Defensive Cooldown");
            AddControlInWinForm("Use Devotion Aura", "UseDevotionAura", "Defensive Cooldown");
            AddControlInWinForm("Use Divine Protection", "UseDivineProtection", "Defensive Cooldown");
            AddControlInWinForm("Use Divine Shield", "UseDivineShield", "Defensive Cooldown");
            AddControlInWinForm("Use Hand of Protection", "UseHandOfProtection", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Divine Plea", "UseDivinePlea", "Healing Spell");
            AddControlInWinForm("Use Divine Light", "UseDivineLight", "Healing Spell");
            AddControlInWinForm("Use Holy Radiance", "UseHolyRadiance", "Healing Spell");
            AddControlInWinForm("Use Flash of Light", "UseFlashOfLight", "Healing Spell");
            AddControlInWinForm("Use Holy Light", "UseHolyLight", "Healing Spell");
            AddControlInWinForm("Use Lay on Hands", "UseLayOnHands", "Healing Spell");
            AddControlInWinForm("Use Word of Glory", "UseWordOfGlory", "Healing Spell");
            AddControlInWinForm("Use Beacon of Light", "UseBeaconOfLight", "Healing Spell");
            AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
            AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
        }

        public static PaladinHolySettings CurrentSetting { get; set; }

        public static PaladinHolySettings GetSettings()
        {
            string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Paladin_Holy.xml";
            if (File.Exists(currentSettingsFile))
            {
                return CurrentSetting = Load<PaladinHolySettings>(currentSettingsFile);
            }
            return new PaladinHolySettings();
        }
    }

    #endregion
}

public class PaladinProtection
{
    private readonly PaladinProtectionSettings mySettings = PaladinProtectionSettings.GetSettings();

    #region Professions & Racial

    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell WarStomp = new Spell("War Stomp");

    #endregion

    #region Paladin Seals & Buffs

    private readonly Spell BlessingOfKings = new Spell("Blessing of Kings");
    private readonly Spell BlessingOfMight = new Spell("Blessing of Might");
    private readonly Spell SealOfInsight = new Spell("Seal of Insight");
    private readonly Spell SealOfTheRighteousness = new Spell("Seal of Righteousness");
    private readonly Spell SealOfTruth = new Spell("Seal of Truth");

    #endregion

    #region Offensive Spell

    private readonly Spell AvengersShield = new Spell("Avenger's Shield");
    private readonly Spell Consecration = new Spell("Consecration");
    private readonly Spell CrusaderStrike = new Spell("Crusader Strike");
    private readonly Spell HammerOfJustice = new Spell("Hammer of Justice");
    private readonly Spell HammerOfTheRighteous = new Spell("Hammer of the Righteous"); // 115798 = Weakened Blows
    private readonly Spell HammerOfWrath = new Spell("Hammer of Wrath");
    private readonly Spell HolyWrath = new Spell("Holy Wrath");
    private readonly Spell Judgment = new Spell("Judgment");
    private readonly Spell ShieldOfTheRighteous = new Spell("Shield of the Righteous");

    #endregion

    #region Offensive Cooldown

    private readonly Spell AvengingWrath = new Spell("Avenging Wrath");
    private readonly Spell HolyAvenger = new Spell("Holy Avenger");

    #endregion

    #region Defensive Cooldown

    private readonly Spell ArdentDefender = new Spell("Ardent Defender");
    private readonly Spell DevotionAura = new Spell("Devotion Aura");
    private readonly Spell DivineProtection = new Spell("Divine Protection");
    private readonly Spell DivineShield = new Spell("Divine Shield");
    private readonly Spell GuardianOfAncientKings = new Spell("Guardian of Ancient Kings");
    private readonly Spell HandOfProtection = new Spell("Hand of Protection");
    private readonly Spell HandOfPurity = new Spell("Hand Of Purity");
    private readonly Spell SacredShield = new Spell("Sacred Shield");
    private Timer OnCD = new Timer(0);

    #endregion

    #region Healing Spell

    private readonly Spell FlashOfLight = new Spell("Flash of Light");
    private readonly Spell LayOnHands = new Spell("Lay on Hands");
    private readonly Spell WordOfGlory = new Spell("Word of Glory");

    #endregion

    public PaladinProtection()
    {
        Main.range = 5.0f;

        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget && Judgment.IsHostileDistanceGood)
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }
                            if (ObjectManager.Target.GetDistance < 41)
                                Combat();
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void Pull()
    {
        if (AvengersShield.KnownSpell && mySettings.UseAvengersShield && AvengersShield.IsHostileDistanceGood &&
            AvengersShield.IsSpellUsable)
        {
            AvengersShield.Launch();
        }
        if (Judgment.KnownSpell && mySettings.UseJudgment && Judgment.IsHostileDistanceGood && Judgment.IsSpellUsable)
        {
            Judgment.Launch();
            Thread.Sleep(1000);
        }
        DPSBurst();
    }

    private void Combat()
    {
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        if (OnCD.IsReady)
            DefenseCycle();
        DPSCycle();
        DPSBurst();
        DPSCycle();
        Heal();
        DPSCycle();
        Buffs();
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Blessing();
            Heal();
        }
        Seal();
    }

    private void Buffs()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Blessing();
        }
        Seal();
    }

    private void Seal()
    {
        if (ObjectManager.Me.IsMounted)
            return;
        else if (SealOfTruth.KnownSpell && mySettings.UseSealOfTruth &&
                 (ObjectManager.GetNumberAttackPlayer() <= 7 || !mySettings.UseSealOfTheRighteousness))
        {
            if (!SealOfTruth.HaveBuff && SealOfTruth.IsSpellUsable)
                SealOfTruth.Launch();
        }
        else if (SealOfTheRighteousness.KnownSpell && mySettings.UseSealOfTheRighteousness)
        {
            if (!SealOfTheRighteousness.HaveBuff && SealOfTheRighteousness.IsSpellUsable)
                SealOfTheRighteousness.Launch();
        }
        else if (SealOfInsight.KnownSpell && mySettings.UseSealOfInsight)
        {
            if (!SealOfInsight.HaveBuff && SealOfInsight.IsSpellUsable)
                SealOfInsight.Launch();
        }
    }

    private void Blessing()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (BlessingOfMight.KnownSpell && mySettings.UseBlessingOfMight)
        {
            if (!BlessingOfMight.HaveBuff && BlessingOfMight.IsSpellUsable)
                BlessingOfMight.Launch();
        }
        else if (BlessingOfKings.KnownSpell && mySettings.UseBlessingOfKings)
        {
            if (!BlessingOfKings.HaveBuff && BlessingOfKings.IsSpellUsable)
                BlessingOfKings.Launch();
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.HealthPercent < 95 && !Fight.InFight && ObjectManager.GetNumberAttackPlayer() == 0)
        {
            if (FlashOfLight.KnownSpell && FlashOfLight.IsSpellUsable && mySettings.UseFlashOfLight)
            {
                FlashOfLight.Launch(true, true, true);
                return;
            }
        }
        if (DivineShield.KnownSpell && mySettings.UseDivineShield && ObjectManager.Me.HealthPercent > 0 &&
            ObjectManager.Me.HealthPercent <= 20 && !ObjectManager.Me.HaveBuff(25771) && DivineShield.IsSpellUsable)
        {
            DivineShield.Launch();
            return;
        }
        if (LayOnHands.KnownSpell && mySettings.UseLayOnHands && ObjectManager.Me.HealthPercent > 0 &&
            ObjectManager.Me.HealthPercent <= 20 && !ObjectManager.Me.HaveBuff(25771) && LayOnHands.IsSpellUsable)
        {
            LayOnHands.Launch();
            return;
        }
        if (HandOfProtection.KnownSpell && mySettings.UseHandOfProtection && ObjectManager.Me.HealthPercent > 0 &&
            ObjectManager.Me.HealthPercent <= 20 && !ObjectManager.Me.HaveBuff(25771) && HandOfProtection.IsSpellUsable)
        {
            HandOfProtection.Launch();
            return;
        }
        if (ObjectManager.Me.ManaPercentage < 10)
        {
            if (ArcaneTorrent.KnownSpell && mySettings.UseArcaneTorrentForResource && ArcaneTorrent.IsSpellUsable)
            {
                ArcaneTorrent.Launch();
                return;
            }
        }
        if (ObjectManager.Me.HealthPercent > 0 && ObjectManager.Me.HealthPercent < 50)
        {
            if (WordOfGlory.KnownSpell && mySettings.UseWordOfGlory && WordOfGlory.IsSpellUsable)
                WordOfGlory.Launch();
            if (FlashOfLight.KnownSpell && mySettings.UseFlashOfLight && FlashOfLight.IsSpellUsable)
            {
                FlashOfLight.Launch();
                return;
            }
        }
        if (ObjectManager.Me.HealthPercent >= 0 && ObjectManager.Me.HealthPercent < 30)
        {
            if (WordOfGlory.KnownSpell && mySettings.UseWordOfGlory && WordOfGlory.IsSpellUsable)
                WordOfGlory.Launch();
            if (DivineProtection.KnownSpell && mySettings.UseDivineProtection && DivineProtection.IsSpellUsable)
                DivineProtection.Launch();
            if (FlashOfLight.KnownSpell && mySettings.UseFlashOfLight && FlashOfLight.IsSpellUsable)
            {
                FlashOfLight.Launch();
                return;
            }
        }
    }

    private void DPSBurst()
    {
        if (HolyAvenger.KnownSpell && mySettings.UseHolyAvenger && HolyAvenger.IsSpellUsable)
        {
            HolyAvenger.Launch();
            if (AvengingWrath.KnownSpell && mySettings.UseAvengingWrath && AvengingWrath.IsSpellUsable)
            {
                AvengingWrath.Launch();
                return;
            }
        }
        else if (AvengingWrath.KnownSpell && mySettings.UseAvengingWrath && AvengingWrath.IsSpellUsable)
        {
            AvengingWrath.Launch();
            return;
        }
    }

    private void DefenseCycle()
    {
        if (HandOfPurity.KnownSpell && mySettings.UseHandOfPurity && HandOfPurity.IsSpellUsable &&
            !HandOfPurity.HaveBuff)
        {
            HandOfPurity.Launch();
            OnCD = new Timer(1000*6);
        }
        else if (HammerOfJustice.KnownSpell && mySettings.UseHammerOfJustice && HammerOfJustice.IsSpellUsable)
        {
            HammerOfJustice.Launch();
            OnCD = new Timer(1000*6);
            return;
        }
        else if (DivineProtection.KnownSpell && mySettings.UseDivineProtection && DivineProtection.IsSpellUsable)
        {
            DivineProtection.Launch();
            OnCD = new Timer(1000*10);
            return;
        }
        else if (DevotionAura.KnownSpell && mySettings.UseDevotionAura && DevotionAura.IsSpellUsable)
        {
            DevotionAura.Launch();
            OnCD = new Timer(1000*6);
            return;
        }
        else if (GuardianOfAncientKings.KnownSpell && mySettings.UseGuardianOfAncientKings &&
                 GuardianOfAncientKings.IsSpellUsable)
        {
            GuardianOfAncientKings.Launch();
            OnCD = new Timer(1000*12);
            return;
        }
        else if (ArdentDefender.KnownSpell && mySettings.UseArdentDefender &&
                 ArdentDefender.IsSpellUsable)
        {
            ArdentDefender.Launch();
            OnCD = new Timer(1000*10);
            return;
        }
        else if (WordOfGlory.KnownSpell && mySettings.UseWordOfGlory && WordOfGlory.IsSpellUsable)
        {
            WordOfGlory.Launch();
            OnCD = new Timer(1000*5);
            return;
        }
    }

    private void DPSCycle()
    {
        if (ShieldOfTheRighteous.KnownSpell && mySettings.UseShieldOfTheRighteous && ShieldOfTheRighteous.IsSpellUsable &&
            ShieldOfTheRighteous.IsHostileDistanceGood && (ObjectManager.Me.HaveBuff(90174) || ObjectManager.Me.HolyPower >= 3))
        {
            ShieldOfTheRighteous.Launch();
            return;
        }
        if ((ObjectManager.GetNumberAttackPlayer() >= 2 || !ObjectManager.Target.HaveBuff(115798)) &&
            !ObjectManager.Me.HaveBuff(90174) && ObjectManager.Me.HolyPower < 3)
        {
            if (HammerOfTheRighteous.KnownSpell && mySettings.UseHammerOfTheRighteous &&
                HammerOfTheRighteous.IsHostileDistanceGood && HammerOfTheRighteous.IsSpellUsable)
            {
                HammerOfTheRighteous.Launch();
                return;
            }
        }
        else
        {
            if (CrusaderStrike.KnownSpell && mySettings.UseCrusaderStrike && CrusaderStrike.IsHostileDistanceGood &&
                CrusaderStrike.IsSpellUsable && !ObjectManager.Me.HaveBuff(90174) && ObjectManager.Me.HolyPower < 3)
            {
                CrusaderStrike.Launch();
                return;
            }
        }
        if (AvengersShield.KnownSpell && mySettings.UseAvengersShield && AvengersShield.IsHostileDistanceGood &&
            AvengersShield.IsSpellUsable && !ObjectManager.Me.HaveBuff(90174) && ObjectManager.Me.HolyPower < 3)
        {
            AvengersShield.Launch();
            return;
        }
        if (HammerOfWrath.KnownSpell && mySettings.UseHammerOfWrath && HammerOfWrath.IsHostileDistanceGood &&
            HammerOfWrath.IsSpellUsable && !ObjectManager.Me.HaveBuff(90174) && ObjectManager.Me.HolyPower < 3)
        {
            HammerOfWrath.Launch();
            return;
        }
        if (Judgment.KnownSpell && mySettings.UseJudgment && Judgment.IsHostileDistanceGood && Judgment.IsSpellUsable &&
            !ObjectManager.Me.HaveBuff(90174) && ObjectManager.Me.HolyPower < 3)
        {
            Judgment.Launch();
            return;
        }
        if (Consecration.KnownSpell && mySettings.UseConsecration && Consecration.IsSpellUsable &&
            !ObjectManager.Me.HaveBuff(90174) && ObjectManager.Me.HolyPower < 3)
        {
            // Consecration.Launch(); // TODO: Check if Glyph of Consecration is used.
            SpellManager.CastSpellByIDAndPosition(26573, ObjectManager.Target.Position);
            return;
        }
        if (HolyWrath.KnownSpell && mySettings.UseHolyWrath && HolyWrath.IsSpellUsable &&
            !ObjectManager.Me.HaveBuff(90174) && ObjectManager.Me.HolyPower < 3 && !Judgment.IsSpellUsable &&
            !CrusaderStrike.IsSpellUsable && !Consecration.IsSpellUsable)
        {
            HolyWrath.Launch();
            return;
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            var maxTimeTimer = new Timer(1000*2);
            MovementsAction.MoveBackward(true);
            while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                Thread.Sleep(300);
            MovementsAction.MoveBackward(false);
            if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
            {
                MovementsAction.MoveForward(true);
                Thread.Sleep(1000);
                MovementsAction.MoveForward(false);
                MovementManager.Face(ObjectManager.Target.Position);
            }
        }
    }

    #region Nested type: PaladinProtectionSettings

    [Serializable]
    public class PaladinProtectionSettings : Settings
    {
        public bool DoAvoidMelee = false;
        public int DoAvoidMeleeDistance = 0;
        public bool UseArcaneTorrentForDecast = true;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public bool UseArcaneTorrentForResource = true;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public bool UseArdentDefender = true;
        public bool UseAvengersShield = true;
        public bool UseAvengingWrath = true;
        public bool UseBerserking = true;
        public bool UseBlessingOfKings = true;
        public bool UseBlessingOfMight = true;
        public bool UseConsecration = true;
        public bool UseCrusaderStrike = true;
        public bool UseDevotionAura = true;
        public bool UseDivineProtection = true;
        public bool UseDivineShield = true;
        public bool UseFlashOfLight = true;
        public bool UseGiftoftheNaaru = true;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public bool UseGuardianOfAncientKings = true;
        public bool UseHammerOfJustice = true;
        public bool UseHammerOfTheRighteous = true;
        public bool UseHammerOfWrath = true;
        public bool UseHandOfProtection = true;
        public bool UseHandOfPurity = true;
        public bool UseHolyAvenger = true;
        public bool UseHolyWrath = true;
        public bool UseJudgment = true;
        public bool UseLayOnHands = true;
        public bool UseLifeblood = true;
        public bool UseSacredShield = true;
        public bool UseSealOfInsight = false;
        public bool UseSealOfTheRighteousness = true;
        public bool UseSealOfTruth = true;
        public bool UseShieldOfTheRighteous = true;
        public bool UseStoneform = true;
        public int UseStoneformAtPercentage = 80;
        public bool UseWarStomp = true;
        public int UseWarStompAtPercentage = 80;
        public bool UseWordOfGlory = true;

        public PaladinProtectionSettings()
        {
            ConfigWinForm(new Point(500, 400), "Paladin Protection Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            /* Paladin Seals & Buffs */
            AddControlInWinForm("Use Seal of the Righteousness", "UseSealOfTheRighteousness", "Paladin Seals & Buffs");
            AddControlInWinForm("Use Seal of Truth", "UseSealOfTruth", "Paladin Seals & Buffs");
            AddControlInWinForm("Use Seal of Insight", "UseSealOfInsight", "Paladin Seals & Buffs");
            AddControlInWinForm("Use Blessing of Might", "UseBlessingOfMight", "Paladin Seals & Buffs");
            AddControlInWinForm("Use Blessing of Kings", "UseBlessingOfKings", "Paladin Seals & Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Shield of the Righteous", "UseShieldOfTheRighteous", "Offensive Spell");
            AddControlInWinForm("Use Consecration", "UseConsecration", "Offensive Spell");
            AddControlInWinForm("Use Avenger's Shield", "UseAvengersShield", "Offensive Spell");
            AddControlInWinForm("Use Hammer of Wrath", "UseHammerOfWrath", "Offensive Spell");
            AddControlInWinForm("Use Crusader Strike", "UseCrusaderStrike", "Offensive Spell");
            AddControlInWinForm("Use Hammer of the Righteous", "UseHammerOfTheRighteous", "Offensive Spell");
            AddControlInWinForm("Use Judgment", "UseJudgment", "Offensive Spell");
            AddControlInWinForm("Use Hammer of Justice", "UseHammerOfJustice", "Offensive Spell");
            AddControlInWinForm("Use Holy Wrath", "UseHolyWrath", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Holy Avenger", "UseHolyAvenger", "Offensive Cooldown");
            AddControlInWinForm("Use Avenging Wrath", "UseAvengingWrath", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Guardian of Ancient Kings", "UseGuardianOfAncientKings", "Defensive Cooldown");
            AddControlInWinForm("Use Ardent Defender", "UseArdentDefender", "Defensive Cooldown");
            AddControlInWinForm("Use Sacred Shield", "UseSacredShield", "Defensive Cooldown");
            AddControlInWinForm("Use Hand of Purity", "UseHandOfPurity", "Defensive Cooldown");
            AddControlInWinForm("Use Devotion Aura", "UseDevotionAura", "Defensive Cooldown");
            AddControlInWinForm("Use Divine Protection", "UseDivineProtection", "Defensive Cooldown");
            AddControlInWinForm("Use Divine Shield", "UseDivineShield", "Defensive Cooldown");
            AddControlInWinForm("Use Hand of Protection", "UseHandOfProtection", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Flash of Light", "UseFlashOfLight", "Healing Spell");
            AddControlInWinForm("Use Lay on Hands", "UseLayOnHands", "Healing Spell");
            AddControlInWinForm("Use Word of Glory", "UseWordOfGlory", "Healing Spell");
            AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
            AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
        }

        public static PaladinProtectionSettings CurrentSetting { get; set; }

        public static PaladinProtectionSettings GetSettings()
        {
            string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Paladin_Protection.xml";
            if (File.Exists(currentSettingsFile))
            {
                return CurrentSetting = Load<PaladinProtectionSettings>(currentSettingsFile);
            }
            else
            {
                return new PaladinProtectionSettings();
            }
        }
    }

    #endregion
}

public class PaladinRetribution
{
    private static readonly PaladinRetributionSettings mySettings = PaladinRetributionSettings.GetSettings();

    #region Professions & Racials

    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell WarStomp = new Spell("War Stomp");

    #endregion

    #region Paladin Seals & Buffs

    private readonly Spell BlessingOfKings = new Spell("Blessing of Kings");
    private readonly Spell BlessingOfMight = new Spell("Blessing of Might");
    private readonly Spell SealOfCommand = new Spell("Seal of Command");
    private readonly Spell SealOfInsight = new Spell("Seal of Insight");
    private readonly Spell SealOfJustice = new Spell("Seal of Justice");
    private readonly Spell SealOfTheRighteousness = new Spell("Seal of Righteousness");
    private readonly Spell SealOfTruth = new Spell("Seal of Truth");

    #endregion

    #region Offensive Spell

    private readonly Spell BoundlessConviction = new Spell("Boundless Conviction");
    private readonly Spell CrusaderStrike = new Spell("Crusader Strike");
    private readonly Spell DivineStorm = new Spell("Divine Storm");
    private readonly Spell Exorcism = new Spell("Exorcism");
    private readonly Spell HammerOfJustice = new Spell("Hammer of Justice");
    private readonly Spell HammerOfTheRighteous = new Spell("Hammer of the Righteous");
    private readonly Spell HammerOfWrath = new Spell("Hammer of Wrath");
    private readonly Spell Judgment = new Spell("Judgment");
    private readonly Spell TemplarsVerdict = new Spell("Templar's Verdict");

    #endregion

    #region Offensive Cooldown

    private readonly Spell AvengingWrath = new Spell("Avenging Wrath");
    private readonly Spell GuardianOfAncientKings = new Spell("Guardian of Ancient Kings");
    private readonly Spell HolyAvenger = new Spell("Holy Avenger");
    private readonly Spell Inquisition = new Spell("Inquisition");
    private Timer BurstTime = new Timer(0);
    private Timer InquisitionToUseInPriotiy = new Timer(0);

    #endregion

    #region Defensive Cooldown

    private readonly Spell Reckoning = new Spell("Reckoning");
    private readonly Spell DevotionAura = new Spell("Devotion Aura");
    private readonly Spell DivineProtection = new Spell("Divine Protection");
    private readonly Spell DivineShield = new Spell("Divine Shield");
    private readonly Spell HandOfProtection = new Spell("Hand of Protection");
    private readonly Spell SacredShield = new Spell("Sacred Shield");

    #endregion

    #region Healing Spell

    private readonly Spell FlashOfLight = new Spell("Flash of Light");
    private readonly Spell LayOnHands = new Spell("Lay on Hands");
    private readonly Spell WordOfGlory = new Spell("Word of Glory");

    #endregion

    #region Flask & Potion Management

    private readonly uint CombatPotion = (uint)ItemsManager.GetIdByName(mySettings.CombatPotion);
    private readonly WoWItem FirstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
    private readonly uint FlaskOrBattleElixir = (uint)ItemsManager.GetIdByName(mySettings.FlaskOrBattleElixir);
    private readonly uint GuardianElixir = (uint)ItemsManager.GetIdByName(mySettings.GuardianElixir);

    private readonly WoWItem Hands = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_HAND);
    private readonly WoWItem SecondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);
    private readonly uint TeasureFindingPotion = (uint)ItemsManager.GetIdByName(mySettings.TeasureFindingPotion);
    private readonly uint WellFedBuff = (uint)ItemsManager.GetIdByName(mySettings.WellFedBuff);

    #endregion

    public PaladinRetribution()
    {
        Main.range = 5.0f;

        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (Judgment.IsHostileDistanceGood || Exorcism.IsHostileDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }
                            if (ObjectManager.Target.GetDistance < 41)
                                Combat();
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void Pull()
    {
        if (mySettings.UseExorcism && Exorcism.KnownSpell && Exorcism.IsSpellUsable && Exorcism.IsHostileDistanceGood)
        {
            Exorcism.Launch();
        }
        else if (mySettings.UseJudgment && Judgment.KnownSpell && Judgment.IsSpellUsable && Judgment.IsHostileDistanceGood)
        {
            Judgment.Launch();
        }
        else if (mySettings.UseReckoning && Reckoning.KnownSpell && Reckoning.IsSpellUsable && Reckoning.IsHostileDistanceGood)
        {
            Reckoning.Launch();
        }
    }

    private void Combat()
    {
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        DPSCycle();
        DPSBurst();
        DPSCycle();
        Heal();
        DPSCycle();
        Buffs();
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            if (mySettings.UseFlaskOrBattleElixir && mySettings.FlaskOrBattleElixir != string.Empty)
                if (!SpellManager.HaveBuffLua(ItemsManager.GetItemSpellByItemName(mySettings.FlaskOrBattleElixir)) &&
                    !ItemsManager.IsItemOnCooldown(FlaskOrBattleElixir) &&
                    ItemsManager.IsUsableItemById(FlaskOrBattleElixir))
                    ItemsManager.UseItem(mySettings.FlaskOrBattleElixir);
            if (mySettings.UseGuardianElixir && mySettings.GuardianElixir != string.Empty)
                if (!SpellManager.HaveBuffLua(ItemsManager.GetItemSpellByItemName(mySettings.GuardianElixir)) &&
                    !ItemsManager.IsItemOnCooldown(GuardianElixir) && ItemsManager.IsUsableItemById(GuardianElixir))
                    ItemsManager.UseItem(mySettings.GuardianElixir);
            Blessing();
            Heal();
        }
        Seal();
    }

    private void Buffs()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            if (mySettings.UseFlaskOrBattleElixir && mySettings.FlaskOrBattleElixir != string.Empty)
                if (!SpellManager.HaveBuffLua(ItemsManager.GetItemSpellByItemName(mySettings.FlaskOrBattleElixir)) &&
                    !ItemsManager.IsItemOnCooldown(FlaskOrBattleElixir) &&
                    ItemsManager.IsUsableItemById(FlaskOrBattleElixir))
                    ItemsManager.UseItem(mySettings.FlaskOrBattleElixir);
            if (mySettings.UseGuardianElixir && mySettings.GuardianElixir != string.Empty)
                if (!SpellManager.HaveBuffLua(ItemsManager.GetItemSpellByItemName(mySettings.GuardianElixir)) &&
                    !ItemsManager.IsItemOnCooldown(GuardianElixir) && ItemsManager.IsUsableItemById(GuardianElixir))
                    ItemsManager.UseItem(mySettings.GuardianElixir);
            Blessing();
        }
        Seal();
    }

    private void Seal()
    {
        if (mySettings.UseSealOfTruth && SealOfTruth.KnownSpell && (ObjectManager.GetNumberAttackPlayer() <= 7 || !mySettings.UseSealOfTheRighteousness || !SealOfTheRighteousness.KnownSpell))
        {
            if (!SealOfTruth.HaveBuff && SealOfTruth.IsSpellUsable)
                SealOfTruth.Launch();
        }
        else if (mySettings.UseSealOfTheRighteousness && SealOfTheRighteousness.KnownSpell)
        {
            if (!SealOfTheRighteousness.HaveBuff && SealOfTheRighteousness.IsSpellUsable)
                SealOfTheRighteousness.Launch();
        }
        else if (mySettings.UseSealOfJustice && SealOfJustice.KnownSpell)
        {
            if (!SealOfJustice.HaveBuff && SealOfJustice.IsSpellUsable)
                SealOfJustice.Launch();
        }
        else if (mySettings.UseSealOfInsight && SealOfInsight.KnownSpell)
        {
            if (!SealOfInsight.HaveBuff && SealOfInsight.IsSpellUsable)
                SealOfInsight.Launch();
        }
        else if (mySettings.UseSealOfCommand && SealOfCommand.KnownSpell)
        {
            if (!SealOfCommand.HaveBuff && SealOfCommand.IsSpellUsable)
                SealOfCommand.Launch();
        }
    }

    private void Blessing()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (mySettings.UseBlessingOfKings && BlessingOfKings.KnownSpell)
        {
            if (!BlessingOfKings.HaveBuff && BlessingOfKings.IsSpellUsable)
                BlessingOfKings.Launch();
        }
        else if (mySettings.UseBlessingOfMight && BlessingOfMight.KnownSpell)
        {
            if (!BlessingOfMight.HaveBuff && BlessingOfMight.IsSpellUsable)
                BlessingOfMight.Launch();
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.HealthPercent < 95.0f && !Fight.InFight && ObjectManager.GetNumberAttackPlayer() == 0)
        {
            if (mySettings.UseFlashOfLight && FlashOfLight.KnownSpell && FlashOfLight.IsSpellUsable)
            {
                FlashOfLight.Launch(true, true, true);
                Thread.Sleep(200);
                return;
            }
        }
        if (mySettings.UseDivineShield && DivineShield.KnownSpell && DivineShield.IsSpellUsable && ObjectManager.Me.HealthPercent > 0 && ObjectManager.Me.HealthPercent <= 5)
        {
            DivineShield.Launch();
            return;
        }
        if (mySettings.UseLayOnHands && LayOnHands.KnownSpell && LayOnHands.IsSpellUsable && !ObjectManager.Me.HaveBuff(25771) && ObjectManager.Me.HealthPercent > 0 && ObjectManager.Me.HealthPercent <= 20)
        {
            LayOnHands.Launch();
            return;
        }
        if (ObjectManager.Me.ManaPercentage < 10)
        {
            if (mySettings.UseArcaneTorrentForResource && ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable)
            {
                ArcaneTorrent.Launch();
                return;
            }
        }
        if (ObjectManager.Me.HealthPercent > 0 && ObjectManager.Me.HealthPercent < 50)
        {
            if (mySettings.UseWordOfGlory && WordOfGlory.KnownSpell && WordOfGlory.IsSpellUsable)
                WordOfGlory.Launch();
            if (mySettings.UseDevotionAura && DevotionAura.KnownSpell && DevotionAura.IsSpellUsable)
                DevotionAura.Launch();
            if (mySettings.UseFlashOfLight && FlashOfLight.KnownSpell && FlashOfLight.IsSpellUsable)
            {
                FlashOfLight.Launch();
                return;
            }
        }
        if (ObjectManager.Me.HealthPercent >= 0 && ObjectManager.Me.HealthPercent < 30)
        {
            if (mySettings.UseWordOfGlory && WordOfGlory.KnownSpell && WordOfGlory.IsSpellUsable)
                WordOfGlory.Launch();
            if (mySettings.UseDivineProtection && DivineProtection.KnownSpell && DivineProtection.IsSpellUsable)
                DivineProtection.Launch();
            else if (mySettings.UseHandOfProtection && HandOfProtection.KnownSpell && HandOfProtection.IsSpellUsable && !ObjectManager.Me.HaveBuff(25771))
                HandOfProtection.Launch();
            if (mySettings.UseFlashOfLight && FlashOfLight.KnownSpell && FlashOfLight.IsSpellUsable)
            {
                FlashOfLight.Launch();
            }
        }
    }

    private void DPSBurst()
    {
        if (!mySettings.UseGuardianOfAncientKings || !GuardianOfAncientKings.KnownSpell || GuardianOfAncientKings.HaveBuff || !GuardianOfAncientKings.IsSpellUsable)
        {
            if ((!GuardianOfAncientKings.KnownSpell || BurstTime.IsReady) && AvengingWrath.KnownSpell && AvengingWrath.IsSpellUsable && (!HolyAvenger.KnownSpell || HolyAvenger.IsSpellUsable))
            {
                if (mySettings.UseAvengingWrath)
                    AvengingWrath.Launch();
                if (mySettings.UseInquisition && Inquisition.KnownSpell && Inquisition.IsSpellUsable && (!Inquisition.HaveBuff || InquisitionToUseInPriotiy.IsReady) && (ObjectManager.Me.HaveBuff(90174) || ObjectManager.Me.HolyPower >= 3))
                {
                    Inquisition.Launch();
                    InquisitionToUseInPriotiy = new Timer(1000*(10*3 - 6));
                }
                if (mySettings.UseHolyAvenger && HolyAvenger.KnownSpell && HolyAvenger.IsSpellUsable)
                    HolyAvenger.Launch();
            }
            else if (mySettings.UseHolyAvenger && HolyAvenger.KnownSpell && HolyAvenger.IsSpellUsable && (!GuardianOfAncientKings.KnownSpell || BurstTime.IsReady))
            {
                HolyAvenger.Launch();
                if (mySettings.UseInquisition && Inquisition.KnownSpell && Inquisition.IsSpellUsable && (!Inquisition.HaveBuff || InquisitionToUseInPriotiy.IsReady) && (ObjectManager.Me.HaveBuff(90174) || ObjectManager.Me.HolyPower >= 3))
                {
                    Inquisition.Launch();
                    InquisitionToUseInPriotiy = new Timer(1000*(10*3 - 6));
                }
                if (mySettings.UseAvengingWrath && AvengingWrath.KnownSpell && AvengingWrath.IsSpellUsable)
                    AvengingWrath.Launch();
            }
        }
        else if (mySettings.UseGuardianOfAncientKings && GuardianOfAncientKings.KnownSpell && GuardianOfAncientKings.IsSpellUsable && AvengingWrath.IsSpellUsable && (!HolyAvenger.KnownSpell || HolyAvenger.IsSpellUsable))
        {
            GuardianOfAncientKings.Launch();
            BurstTime = new Timer(1000*6.5);
        }
    }

    private void DPSCycle()
    {
        if (mySettings.UseHammerOfJustice && HammerOfJustice.KnownSpell && HammerOfJustice.IsSpellUsable && HammerOfJustice.IsHostileDistanceGood &&
            ObjectManager.Target.IsStunnable)
        {
            HammerOfJustice.Launch();
            return;
        }
        if (mySettings.UseInquisition && Inquisition.KnownSpell && Inquisition.IsSpellUsable && (!Inquisition.HaveBuff || InquisitionToUseInPriotiy.IsReady) &&
            (ObjectManager.Me.HaveBuff(90174) || ObjectManager.Me.HolyPower >= 3))
        {
            Inquisition.Launch();
            InquisitionToUseInPriotiy = new Timer(1000*(10*3 - 6));
        }
        else if ((ObjectManager.GetNumberAttackPlayer() <= 2 ||
                  (!mySettings.UseDivineStorm && mySettings.UseTemplarsVerdict)) && TemplarsVerdict.KnownSpell &&
                 (!Inquisition.KnownSpell || Inquisition.HaveBuff) && TemplarsVerdict.IsSpellUsable &&
                 TemplarsVerdict.IsHostileDistanceGood &&
                 (ObjectManager.Me.HaveBuff(90174) || ObjectManager.Me.HolyPower == 5 ||
                  (ObjectManager.Me.HolyPower >= 3 && (!BoundlessConviction.KnownSpell || HolyAvenger.HaveBuff))))
        {
            TemplarsVerdict.Launch();
        }
        else if ((ObjectManager.GetNumberAttackPlayer() > 2 ||
                  (mySettings.UseDivineStorm && !mySettings.UseTemplarsVerdict)) && DivineStorm.KnownSpell &&
                 mySettings.UseDivineStorm && (!Inquisition.KnownSpell || Inquisition.HaveBuff) &&
                 DivineStorm.IsSpellUsable && DivineStorm.IsHostileDistanceGood &&
                 (ObjectManager.Me.HaveBuff(90174) || ObjectManager.Me.HolyPower == 5 ||
                  (ObjectManager.Me.HolyPower >= 3 && (!BoundlessConviction.KnownSpell || HolyAvenger.HaveBuff))))
        {
            DivineStorm.Launch();
        }
        else if (mySettings.UseHammerOfWrath && HammerOfWrath.KnownSpell && HammerOfWrath.IsSpellUsable && HammerOfWrath.IsHostileDistanceGood)
        {
            HammerOfWrath.Launch();
        }
        else if (mySettings.UseExorcism && Exorcism.KnownSpell && Exorcism.IsSpellUsable && Exorcism.IsHostileDistanceGood)
        {
            Exorcism.Launch();
        }
        else if (mySettings.UseCrusaderStrike && CrusaderStrike.KnownSpell && CrusaderStrike.IsSpellUsable && CrusaderStrike.IsHostileDistanceGood &&
                 (!mySettings.UseHammerOfTheRighteous || !HammerOfTheRighteous.KnownSpell ||
                  (mySettings.UseHammerOfTheRighteous && HammerOfTheRighteous.KnownSpell &&
                   (ObjectManager.GetNumberAttackPlayer() <= 3 && (ObjectManager.Target.HaveBuff(115798) || !mySettings.RefreshWeakenedBlows)))))
        {
            CrusaderStrike.Launch();
        }
        else if (mySettings.UseHammerOfTheRighteous && HammerOfTheRighteous.KnownSpell && HammerOfTheRighteous.IsSpellUsable && HammerOfTheRighteous.IsHostileDistanceGood &&
                 (!mySettings.UseCrusaderStrike || !CrusaderStrike.KnownSpell ||
                  (mySettings.UseCrusaderStrike && CrusaderStrike.KnownSpell &&
                   (ObjectManager.GetNumberAttackPlayer() >= 4 || (!ObjectManager.Target.HaveBuff(115798) && mySettings.RefreshWeakenedBlows)))))
        {
            HammerOfTheRighteous.Launch();
        }
        else if (mySettings.UseJudgment && Judgment.KnownSpell && Judgment.IsSpellUsable && Judgment.IsHostileDistanceGood)
        {
            Judgment.Launch();
        }
        else if ((ObjectManager.GetNumberAttackPlayer() <= 2 ||
                  (!mySettings.UseDivineStorm && mySettings.UseTemplarsVerdict)) &&
                 TemplarsVerdict.KnownSpell &&
                 (!Inquisition.KnownSpell || Inquisition.HaveBuff) &&
                 TemplarsVerdict.IsSpellUsable && TemplarsVerdict.IsHostileDistanceGood &&
                 (ObjectManager.Me.HaveBuff(90174) || ObjectManager.Me.HolyPower >= 3))
        {
            TemplarsVerdict.Launch();
        }
        else if ((ObjectManager.GetNumberAttackPlayer() > 2 ||
                  (mySettings.UseDivineStorm && !mySettings.UseTemplarsVerdict)) &&
                 DivineStorm.KnownSpell &&
                 (!Inquisition.KnownSpell || Inquisition.HaveBuff) &&
                 DivineStorm.IsSpellUsable && DivineStorm.IsHostileDistanceGood &&
                 (ObjectManager.Me.HaveBuff(90174) || ObjectManager.Me.HolyPower >= 3))
        {
            DivineStorm.Launch();
        }
        else if (mySettings.UseSacredShield && SacredShield.KnownSpell && SacredShield.IsSpellUsable && SacredShield.IsHostileDistanceGood
                 && (!mySettings.UseInquisition || !Inquisition.KnownSpell || Inquisition.HaveBuff)
                 && (!mySettings.UseTemplarsVerdict || !TemplarsVerdict.KnownSpell || !TemplarsVerdict.IsSpellUsable)
                 && (!mySettings.UseJudgment || !Judgment.KnownSpell || !Judgment.IsSpellUsable)
                 && (!mySettings.UseCrusaderStrike || !CrusaderStrike.KnownSpell || !CrusaderStrike.IsSpellUsable)
                 && (!mySettings.UseHammerOfWrath || !HammerOfWrath.KnownSpell || !HammerOfWrath.IsSpellUsable)
                 && (!mySettings.UseExorcism || !Exorcism.KnownSpell || !Exorcism.IsSpellUsable))
        {
            // Since we have a GCD available and spell to cast, we can use the Sacred Shield. (Loss of DPS if not placed here.)
            SacredShield.Launch();
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            var maxTimeTimer = new Timer(1000*2);
            MovementsAction.MoveBackward(true);
            while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                Thread.Sleep(300);
            MovementsAction.MoveBackward(false);
            if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
            {
                MovementsAction.MoveForward(true);
                Thread.Sleep(1000);
                MovementsAction.MoveForward(false);
                MovementManager.Face(ObjectManager.Target.Position);
            }
        }
    }

    #region Nested type: PaladinRetributionSettings

    [Serializable]
    public class PaladinRetributionSettings : Settings
    {
        public string CombatPotion = "Potion of Mogu Power";
        public bool DoAvoidMelee = false;
        public int DoAvoidMeleeDistance = 0;
        public string FlaskOrBattleElixir = "Flask of Winter's Bite";
        public string GuardianElixir = "";
        public bool RefreshWeakenedBlows = true;
        public string TeasureFindingPotion = "Potion of Luck";
        public bool UseArcaneTorrentForDecast = true;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public bool UseArcaneTorrentForResource = true;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public bool UseAvengingWrath = true;
        public bool UseBerserking = true;
        public bool UseBlessingOfKings = true;
        public bool UseBlessingOfMight = true;
        public bool UseCombatPotion = false;
        public bool UseCrusaderStrike = true;
        public bool UseDevotionAura = true;
        public bool UseDivineProtection = true;
        public bool UseDivineShield = true;
        public bool UseDivineStorm = true;
        public bool UseExorcism = true;
        public bool UseFlashOfLight = true;
        public bool UseFlaskOrBattleElixir = false;
        public bool UseGiftoftheNaaru = true;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public bool UseGuardianElixir = false;
        public bool UseGuardianOfAncientKings = true;
        public bool UseHammerOfJustice = true;
        public bool UseHammerOfTheRighteous = true;
        public bool UseHammerOfWrath = true;
        public bool UseHandOfProtection = false;
        public bool UseHolyAvenger = true;
        public bool UseInquisition = true;
        public bool UseJudgment = true;
        public bool UseLayOnHands = true;
        public bool UseLifeblood = true;
        public bool UseReckoning = true;
        public bool UseSacredShield = true;
        public bool UseSealOfCommand = true;
        public bool UseSealOfInsight = false;
        public bool UseSealOfJustice = false;
        public bool UseSealOfTheRighteousness = true;
        public bool UseSealOfTruth = true;
        public bool UseStoneform = true;
        public int UseStoneformAtPercentage = 80;
        public bool UseTeasureFindingPotion = false;
        public bool UseTemplarsVerdict = true;
        public bool UseWarStomp = true;
        public int UseWarStompAtPercentage = 80;
        public bool UseWellFedBuff = false;
        public bool UseWordOfGlory = true;

        public string WellFedBuff = "Black Pepper Ribs and Shrimp";

        public PaladinRetributionSettings()
        {
            ConfigWinForm(new Point(500, 400), "Paladin Retribution Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            /* Paladin Seals & Buffs */
            AddControlInWinForm("Use Seal of the Righteousness", "UseSealOfTheRighteousness", "Paladin Seals & Buffs");
            AddControlInWinForm("Use Seal of Truth", "UseSealOfTruth", "Paladin Seals & Buffs");
            AddControlInWinForm("Use Seal of Justice", "UseSealOfJustice", "Paladin Seals & Buffs");
            AddControlInWinForm("Use Seal of Insight", "UseSealOfInsight", "Paladin Seals & Buffs");
            AddControlInWinForm("Use Seal of Command", "UseSealOfCommand", "Paladin Seals & Buffs");
            AddControlInWinForm("Use Blessing of Might", "UseBlessingOfMight", "Paladin Seals & Buffs");
            AddControlInWinForm("Use Blessing of Kings", "UseBlessingOfKings", "Paladin Seals & Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Templar's Verdict", "UseTemplarsVerdict", "Offensive Spell");
            AddControlInWinForm("Use Divine Storm", "UseDivineStorm", "Offensive Spell");
            AddControlInWinForm("Use Exorcism", "UseExorcism", "Offensive Spell");
            AddControlInWinForm("Use Hammer of Wrath", "UseHammerOfWrath", "Offensive Spell");
            AddControlInWinForm("Use Crusader Strike", "UseCrusaderStrike", "Offensive Spell");
            AddControlInWinForm("Use Hammer of the Righteous", "UseHammerOfTheRighteous", "Offensive Spell");
            AddControlInWinForm("Use Judgment", "UseJudgment", "Offensive Spell");
            AddControlInWinForm("Use Hammer of Justice", "UseHammerOfJustice", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Inquisition", "UseInquisition", "Offensive Cooldown");
            AddControlInWinForm("Use Guardian of Ancient Kings", "UseGuardianOfAncientKings", "Offensive Cooldown");
            AddControlInWinForm("Use Holy Avenger", "UseHolyAvenger", "Offensive Cooldown");
            AddControlInWinForm("Use Avenging Wrath", "UseAvengingWrath", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Reckoning", "UseReckoning", "Defensive Cooldown");
            AddControlInWinForm("Refresh Weakened Blows", "RefreshWeakenedBlows", "Defensive Cooldown");
            AddControlInWinForm("Use Divine Protection", "UseDivineProtection", "Defensive Cooldown");
            AddControlInWinForm("Use Devotion Aura", "UseDevotionAura", "Defensive Cooldown");
            AddControlInWinForm("Use Sacred Shield", "UseSacredShield", "Defensive Cooldown");
            AddControlInWinForm("Use Divine Shield", "UseDivineShield", "Defensive Cooldown");
            AddControlInWinForm("Use Hand of Protection", "UseHandOfProtection", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Flash of Light", "UseFlashOfLight", "Healing Spell");
            AddControlInWinForm("Use Lay on Hands", "UseLayOnHands", "Healing Spell");
            AddControlInWinForm("Use Word of Glory", "UseWordOfGlory", "Healing Spell");
            /* Flask & Potion Management */
            AddControlInWinForm("Use Flask or Battle Elixir", "UseFlaskOrBattleElixir", "Flask & Potion Management");
            AddControlInWinForm("Flask or Battle Elixir Name", "FlaskOrBattleElixir", "Flask & Potion Management");
            AddControlInWinForm("Use Guardian Elixir", "UseGuardianElixir", "Flask & Potion Management");
            AddControlInWinForm("Guardian Elixir Name", "GuardianElixir", "Flask & Potion Management");
            AddControlInWinForm("Use Combat Potion", "UseCombatPotion", "Flask & Potion Management");
            AddControlInWinForm("Combat Potion Name", "CombatPotion", "Flask & Potion Management");
            AddControlInWinForm("Use Teasure Finding Potion", "UseTeasureFindingPotion", "Flask & Potion Management");
            AddControlInWinForm("Teasure Finding Potion Name", "TeasureFindingPotion", "Flask & Potion Management");
            AddControlInWinForm("Use Well Fed Buff", "UseWellFedBuff", "Flask & Potion Management");
            AddControlInWinForm("Well Fed Buff Name", "WellFedBuff", "Flask & Potion Management");
            AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
            AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
        }

        public static PaladinRetributionSettings CurrentSetting { get; set; }

        public static PaladinRetributionSettings GetSettings()
        {
            string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Paladin_Retribution.xml";
            if (File.Exists(currentSettingsFile))
            {
                return
                    CurrentSetting = Load<PaladinRetributionSettings>(currentSettingsFile);
            }
            return new PaladinRetributionSettings();
        }
    }

    #endregion
}

#endregion

#region Shaman

public class ShamanEnhancement
{
    private readonly ShamanEnhancementSettings mySettings = ShamanEnhancementSettings.GetSettings();

    #region General Timers & Variables

    private Timer AlchFlaskTimer = new Timer(0);
    private Timer EngineeringTimer = new Timer(0);
    public int LC = 0;
    private Timer OnCD = new Timer(0);
    private Timer TrinketOneTimer = new Timer(0);
    private Timer TrinketTwoTimer = new Timer(0);

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell BloodFury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell WarStomp = new Spell("War Stomp");

    #endregion

    #region Shaman Buffs

    private readonly Spell FlametongueWeapon = new Spell("Flametongue Weapon");
    private readonly Spell FrostbrandWeapon = new Spell("Frostbrand Weapon");
    private readonly Spell GhostWolf = new Spell("Ghost Wolf");
    private readonly Spell LightningShield = new Spell("Lightning Shield");
    private readonly Spell RockbiterWeapon = new Spell("Rockbiter Weapon");
    private readonly Spell SpiritwalkersGrace = new Spell("Spiritwalker's Grace");
    private readonly Spell WaterShield = new Spell("Water Shield");
    private readonly Spell WaterWalking = new Spell("Water Walking");
    private readonly Spell WindfuryWeapon = new Spell("Windfury Weapon");
    private Timer WaterWalkingTimer = new Timer(0);

    #endregion

    #region Offensive Spell

    private readonly Spell ChainLightning = new Spell("Chain Lightning");
    private readonly Spell EarthShock = new Spell("Earth Shock");
    private readonly Spell FireNova = new Spell("Fire Nova");
    private readonly Spell FlameShock = new Spell("Flame Shock");
    private readonly Spell FrostShock = new Spell("Frost Shock");
    private readonly Spell LavaLash = new Spell("Lava Lash");
    private readonly Spell LightningBolt = new Spell("Lightning Bolt");
    private readonly Spell MagmaTotem = new Spell("Magma Totem");
    private readonly Spell PrimalStrike = new Spell("Primal Strike");
    private readonly Spell SearingTotem = new Spell("Searing Totem");
    private readonly Spell Stormstrike = new Spell("Stormstrike");
    private Timer FlameShockTimer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell AncestralSwiftness = new Spell("Ancestral Swiftness");
    private readonly Spell Ascendance = new Spell("Ascendance");
    private readonly Spell Bloodlust = new Spell("Bloodlust");
    private readonly Spell CalloftheElements = new Spell("Call of the Elements");
    private readonly Spell EarthElementalTotem = new Spell("Earth Elemental Totem");
    private readonly Spell ElementalBlast = new Spell("Elemental Blast");
    private readonly Spell ElementalMastery = new Spell("Elemental Mastery");
    private readonly Spell FeralSpirit = new Spell("Feral Spirit");
    private readonly Spell FireElementalTotem = new Spell("Fire Elemental Totem");
    private readonly Spell Heroism = new Spell("Heroism");
    private readonly Spell StormlashTotem = new Spell("Stormlash Totem");
    private readonly Spell TotemicProjection = new Spell("Totemic Projection");
    private readonly Spell UnleashElements = new Spell("Unleash Elements");
    private readonly Spell UnleashedFury = new Spell("Unleashed Fury");

    #endregion

    #region Defensive Cooldown

    private readonly Spell AstralShift = new Spell("Astral Shift");
    private readonly Spell CapacitorTotem = new Spell("Capacitor Totem");
    private readonly Spell EarthbindTotem = new Spell("Earthbind Totem");
    private readonly Spell GroundingTotem = new Spell("Grounding Totem");
    private readonly Spell ShamanisticRage = new Spell("Shamanistic Rage");
    private readonly Spell StoneBulwarkTotem = new Spell("Stone Bulwark Totem");
    private readonly Spell WindShear = new Spell("Wind Shear");

    #endregion

    #region Healing Spell

    private readonly Spell AncestralGuidance = new Spell("Ancestral Guidance");
    private readonly Spell ChainHeal = new Spell("Chain Heal");
    private readonly Spell HealingRain = new Spell("Healing Rain");
    private readonly Spell HealingStreamTotem = new Spell("Healing Stream Totem");
    private readonly Spell HealingSurge = new Spell("Healing Surge");
    private readonly Spell HealingTideTotem = new Spell("Healing Tide Totem");
    private readonly Spell TotemicRecall = new Spell("Totemic Recall");

    #endregion

    public ShamanEnhancement()
    {
        Main.range = 5.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (FlameShock.IsHostileDistanceGood || EarthShock.IsHostileDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && mySettings.UseLowCombat)
                            {
                                LC = 1;
                                if (ObjectManager.Target.GetDistance < 41)
                                    LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                if (ObjectManager.Target.GetDistance < 41)
                                    Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void Pull()
    {
        if (TotemicProjection.KnownSpell && TotemicProjection.IsSpellUsable && mySettings.UseTotemicProjection)
            TotemicProjection.Launch();

        if (FlameShock.KnownSpell && FlameShock.IsSpellUsable && FlameShock.IsHostileDistanceGood
            && mySettings.UseFlameShock && LC != 1)
        {
            FlameShock.Launch();
            return;
        }
        else
        {
            if (EarthShock.KnownSpell && EarthShock.IsSpellUsable && EarthShock.IsHostileDistanceGood
                && mySettings.UseEarthShock)
            {
                EarthShock.Launch();
                return;
            }
        }
    }

    private void LowCombat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        DefenseCycle();
        Heal();

        if (EarthShock.KnownSpell && EarthShock.IsSpellUsable && EarthShock.IsHostileDistanceGood
            && mySettings.UseEarthShock)
        {
            EarthShock.Launch();
            return;
        }
        // Blizzard API Calls for Stormstrike using Primal Strike Function
        else if (PrimalStrike.KnownSpell && PrimalStrike.IsSpellUsable && PrimalStrike.IsHostileDistanceGood
                 && mySettings.UseStormstrike)
        {
            PrimalStrike.Launch();
            return;
        }
        else if (ChainLightning.KnownSpell && ChainLightning.IsSpellUsable && ChainLightning.IsHostileDistanceGood
                 && mySettings.UseChainLightning)
        {
            ChainLightning.Launch();
            return;
        }
        else
        {
            if (SearingTotem.KnownSpell && SearingTotem.IsSpellUsable && mySettings.UseSearingTotem
                && FireTotemReady() && !SearingTotem.CreatedBySpellInRange(25) && ObjectManager.Target.GetDistance < 31)
            {
                SearingTotem.Launch();
                return;
            }
        }

        if (MagmaTotem.KnownSpell && MagmaTotem.IsSpellUsable && ObjectManager.Target.GetDistance < 8
            && mySettings.UseMagmaTotem && FireTotemReady())
        {
            MagmaTotem.Launch();
            return;
        }
    }

    private void Combat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        if (OnCD.IsReady)
            DefenseCycle();
        DPSCycle();
        Heal();
        Decast();
        DPSCycle();
        DPSBurst();
        DPSCycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (WaterWalking.IsSpellUsable && WaterWalking.KnownSpell &&
            (!WaterWalking.HaveBuff || WaterWalkingTimer.IsReady)
            && ObjectManager.GetNumberAttackPlayer() == 0 && !Fight.InFight && mySettings.UseWaterWalking)
        {
            WaterWalking.Launch();
            WaterWalkingTimer = new Timer(1000*60*9);
            return;
        }
        else if ((ObjectManager.Me.ManaPercentage < 5 && WaterShield.KnownSpell && WaterShield.IsSpellUsable
                  && mySettings.UseWaterShield && !WaterShield.HaveBuff) || !mySettings.UseLightningShield)
        {
            WaterShield.Launch();
            return;
        }
        else if (LightningShield.KnownSpell && LightningShield.IsSpellUsable && !LightningShield.HaveBuff
                 && mySettings.UseLightningShield && ObjectManager.Me.ManaPercentage > 15)
        {
            LightningShield.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 0 && SpiritwalkersGrace.IsSpellUsable
                 && SpiritwalkersGrace.KnownSpell && mySettings.UseSpiritwalkersGrace && ObjectManager.Me.GetMove)
        {
            SpiritwalkersGrace.Launch();
            return;
        }
        else
        {
            if (WindfuryWeapon.KnownSpell && WindfuryWeapon.IsSpellUsable && !ObjectManager.Me.HaveBuff(33757)
                && mySettings.UseWindfuryWeapon)
            {
                WindfuryWeapon.Launch();
                return;
            }
            else if (FrostbrandWeapon.KnownSpell && FrostbrandWeapon.IsSpellUsable && !ObjectManager.Me.HaveBuff(8034)
                     && mySettings.UseFrostbrandWeapon && !mySettings.UseWindfuryWeapon)
            {
                FrostbrandWeapon.Launch();
                return;
            }
            else
            {
                if (RockbiterWeapon.KnownSpell && RockbiterWeapon.IsSpellUsable && !ObjectManager.Me.HaveBuff(36494)
                    && mySettings.UseRockbiterWeapon && !mySettings.UseWindfuryWeapon
                    && !mySettings.UseFrostbrandWeapon)
                {
                    RockbiterWeapon.Launch();
                    return;
                }
            }

            if (FlametongueWeapon.KnownSpell && FlametongueWeapon.IsSpellUsable && !ObjectManager.Me.HaveBuff(10400)
                && mySettings.UseFlametongueWeapon && (ObjectManager.Me.HaveBuff(33757)
                                                       || ObjectManager.Me.HaveBuff(8034) ||
                                                       ObjectManager.Me.HaveBuff(36494)))
            {
                FlametongueWeapon.Launch();
                return;
            }
        }

        if (ObjectManager.GetNumberAttackPlayer() == 0 && GhostWolf.IsSpellUsable && GhostWolf.KnownSpell
            && mySettings.UseGhostWolf && ObjectManager.Me.GetMove && !GhostWolf.HaveBuff
            && ObjectManager.Target.GetDistance > 10)
        {
            GhostWolf.Launch();
            return;
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            var maxTimeTimer = new Timer(1000*2);
            MovementsAction.MoveBackward(true);
            while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                Thread.Sleep(300);
            MovementsAction.MoveBackward(false);
            if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
            {
                MovementsAction.MoveForward(true);
                Thread.Sleep(1000);
                MovementsAction.MoveForward(false);
                MovementManager.Face(ObjectManager.Target.Position);
            }
        }
    }

    private void DefenseCycle()
    {
        if (ObjectManager.Me.HealthPercent < 50 && CapacitorTotem.KnownSpell && CapacitorTotem.IsSpellUsable
            && AirTotemReady() && mySettings.UseCapacitorTotem)
        {
            CapacitorTotem.Launch();
            OnCD = new Timer(1000*5);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 50 && StoneBulwarkTotem.KnownSpell &&
                 StoneBulwarkTotem.IsSpellUsable
                 && EarthTotemReady() && mySettings.UseStoneBulwarkTotem)
        {
            StoneBulwarkTotem.Launch();
            OnCD = new Timer(1000*10);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable &&
                 WarStomp.KnownSpell
                 && mySettings.UseWarStomp)
        {
            WarStomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable &&
                 Stoneform.KnownSpell
                 && mySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 90 && ShamanisticRage.IsSpellUsable
                 && ShamanisticRage.KnownSpell && mySettings.UseShamanisticRage)
        {
            ShamanisticRage.Launch();
            OnCD = new Timer(1000*15);
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent < 70 && AstralShift.KnownSpell && AstralShift.IsSpellUsable
                && mySettings.UseAstralShift)
            {
                AstralShift.Launch();
                OnCD = new Timer(1000*6);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (ObjectManager.Me.ManaPercentage < 50 && TotemicRecall.KnownSpell && TotemicRecall.IsSpellUsable
            && mySettings.UseTotemicRecall && ObjectManager.GetNumberAttackPlayer() == 0 && !Fight.InFight
            && TotemicRecallReady())
        {
            TotemicRecall.Launch();
            return;
        }

        if (ObjectManager.Me.HealthPercent < 95 && HealingSurge.KnownSpell && HealingSurge.IsSpellUsable
            && ObjectManager.GetNumberAttackPlayer() == 0 && !Fight.InFight && mySettings.UseHealingSurge)
        {
            HealingSurge.Launch();
            while (ObjectManager.Me.IsCast)
            {
                Thread.Sleep(200);
            }
            return;
        }
        else if (HealingSurge.KnownSpell && HealingSurge.IsSpellUsable && ObjectManager.Me.HealthPercent < 50
                 && mySettings.UseHealingSurge)
        {
            HealingSurge.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseGiftoftheNaaruAtPercentage &&
                 GiftoftheNaaru.KnownSpell && GiftoftheNaaru.IsSpellUsable
                 && mySettings.UseGiftoftheNaaru)
        {
            GiftoftheNaaru.Launch();
            return;
        }
        else if (HealingTideTotem.KnownSpell && HealingTideTotem.IsSpellUsable &&
                 ObjectManager.Me.HealthPercent < 70
                 && WaterTotemReady() && mySettings.UseHealingTideTotem)
        {
            HealingTideTotem.Launch();
            return;
        }
        else if (AncestralGuidance.KnownSpell && AncestralGuidance.IsSpellUsable &&
                 ObjectManager.Me.HealthPercent < 70
                 && mySettings.UseAncestralGuidance)
        {
            AncestralGuidance.Launch();
            return;
        }
        else if (ChainHeal.KnownSpell && ChainHeal.IsSpellUsable && ObjectManager.Me.HealthPercent < 80
                 && mySettings.UseChainHeal)
        {
            ChainHeal.Launch();
            return;
        }
        else
        {
            if (HealingStreamTotem.KnownSpell && HealingStreamTotem.IsSpellUsable &&
                ObjectManager.Me.HealthPercent < 90
                && WaterTotemReady() && mySettings.UseHealingStreamTotem)
            {
                HealingStreamTotem.Launch();
                return;
            }
        }
    }

    private void Decast()
    {
        if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && mySettings.UseWindShear
            && WindShear.KnownSpell && WindShear.IsSpellUsable && WindShear.IsHostileDistanceGood)
        {
            WindShear.Launch();
            return;
        }
        else if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8
                 && ObjectManager.Me.HealthPercent <= mySettings.UseArcaneTorrentForDecastAtPercentage
                 && mySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast &&
                 ObjectManager.Target.IsTargetingMe)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && mySettings.UseGroundingTotem
                && GroundingTotem.KnownSpell && GroundingTotem.IsSpellUsable && AirTotemReady())
            {
                GroundingTotem.Launch();
                return;
            }
        }

        if (ObjectManager.Target.GetMove && !FrostShock.TargetHaveBuff && mySettings.UseFrostShock
            && FrostShock.KnownSpell && FrostShock.IsSpellUsable && FrostShock.IsHostileDistanceGood)
        {
            FrostShock.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.GetMove && mySettings.UseEarthbindTotem && EarthTotemReady()
                && EarthbindTotem.KnownSpell && EarthbindTotem.IsSpellUsable && EarthbindTotem.IsHostileDistanceGood)
            {
                EarthbindTotem.Launch();
                return;
            }
        }
    }

    private void DPSBurst()
    {
        if (mySettings.UseTrinketOne && TrinketOneTimer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketOneTimer = new Timer(1000*60*2);
        }
        else if (mySettings.UseTrinketTwo && TrinketTwoTimer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketTwoTimer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseBerserking)
            Berserking.Launch();
        else if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseBloodFury)
            BloodFury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (EngineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            EngineeringTimer = new Timer(1000*60);
        }
        else if (UnleashElements.KnownSpell && UnleashElements.IsSpellUsable && UnleashedFury.KnownSpell
                 && mySettings.UseUnleashElements && UnleashElements.IsHostileDistanceGood)
        {
            UnleashElements.Launch();
            return;
        }
        else if (ElementalBlast.KnownSpell && ElementalBlast.IsSpellUsable
                 && mySettings.UseElementalBlast && ElementalBlast.IsHostileDistanceGood)
        {
            ElementalBlast.Launch();
            return;
        }
        else if (Ascendance.KnownSpell && Ascendance.IsSpellUsable
                 && mySettings.UseAscendance && ObjectManager.Target.GetDistance < 30)
        {
            Ascendance.Launch();
            return;
        }
        else if (FireElementalTotem.KnownSpell && FireElementalTotem.IsSpellUsable
                 && mySettings.UseFireElementalTotem && ObjectManager.Target.GetDistance < 30)
        {
            FireElementalTotem.Launch();
            return;
        }
        else if (StormlashTotem.KnownSpell && AirTotemReady()
                 && mySettings.UseStormlashTotem && ObjectManager.Target.GetDistance < 30)
        {
            if (!StormlashTotem.IsSpellUsable && mySettings.UseCalloftheElements
                && CalloftheElements.KnownSpell && CalloftheElements.IsSpellUsable)
            {
                CalloftheElements.Launch();
                Thread.Sleep(200);
            }

            if (StormlashTotem.IsSpellUsable)
                StormlashTotem.Launch();
            return;
        }
        else if (FeralSpirit.KnownSpell && FeralSpirit.IsSpellUsable
                 && mySettings.UseFeralSpirit && ObjectManager.Target.GetDistance < 30)
        {
            FeralSpirit.Launch();
            return;
        }
        else if (Bloodlust.KnownSpell && Bloodlust.IsSpellUsable && mySettings.UseBloodlustHeroism
                 && ObjectManager.Target.GetDistance < 30 && !ObjectManager.Me.HaveBuff(57724))
        {
            Bloodlust.Launch();
            return;
        }

        else if (Heroism.KnownSpell && Heroism.IsSpellUsable && mySettings.UseBloodlustHeroism
                 && ObjectManager.Target.GetDistance < 30 && !ObjectManager.Me.HaveBuff(57723))
        {
            Heroism.Launch();
            return;
        }
        else
        {
            if (ElementalMastery.KnownSpell && ElementalMastery.IsSpellUsable
                && !ObjectManager.Me.HaveBuff(2825) && mySettings.UseElementalMastery
                && !ObjectManager.Me.HaveBuff(32182))
            {
                ElementalMastery.Launch();
                return;
            }
        }
    }

    private void DPSCycle()
    {
        if (EarthElementalTotem.KnownSpell && EarthElementalTotem.IsSpellUsable
            && ObjectManager.GetNumberAttackPlayer() > 3 && mySettings.UseEarthElementalTotem)
        {
            EarthElementalTotem.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 5 && MagmaTotem.KnownSpell
                 && MagmaTotem.IsSpellUsable && mySettings.UseMagmaTotem
                 && !FireElementalTotem.CreatedBySpell)
        {
            MagmaTotem.Launch();
            return;
        }
        if (SearingTotem.KnownSpell && SearingTotem.IsSpellUsable && mySettings.UseSearingTotem
            && FireTotemReady() && !SearingTotem.CreatedBySpellInRange(25) && ObjectManager.Target.GetDistance < 31)
        {
            SearingTotem.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 2 && ChainLightning.KnownSpell
                 && ChainLightning.IsSpellUsable && ChainLightning.IsHostileDistanceGood
                 && mySettings.UseChainLightning && ObjectManager.Me.BuffStack(53817) == 5)
        {
            ChainLightning.Launch();
            return;
        }
        else if (LightningBolt.IsHostileDistanceGood && LightningBolt.KnownSpell && LightningBolt.IsSpellUsable
                 && mySettings.UseLightningBolt && ObjectManager.Me.BuffStack(53817) == 5)
        {
            LightningBolt.Launch();
            return;
        }
        else if (FlameShock.IsSpellUsable && FlameShock.IsHostileDistanceGood && FlameShock.KnownSpell
                 && mySettings.UseFlameShock && (!FlameShock.TargetHaveBuff || FlameShockTimer.IsReady))
        {
            if (UnleashElements.KnownSpell && UnleashElements.IsSpellUsable && UnleashElements.IsHostileDistanceGood
                && mySettings.UseUnleashElements)
            {
                UnleashElements.Launch();
                Thread.Sleep(200);
            }
            FlameShock.Launch();
            FlameShockTimer = new Timer(1000*27);
            return;
        }
        else if (FireNova.KnownSpell && FireNova.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 2
                 && mySettings.UseFireNova)
        {
            FireNova.Launch();
            return;
        }
        // Blizzard API Calls for Stormstrike using Primal Strike Function
        else if (PrimalStrike.KnownSpell && PrimalStrike.IsSpellUsable && PrimalStrike.IsHostileDistanceGood
                 && mySettings.UseStormstrike)
        {
            PrimalStrike.Launch();
            return;
        }
        else if (LavaLash.KnownSpell && LavaLash.IsSpellUsable && LavaLash.IsHostileDistanceGood
                 && mySettings.UseLavaLash)
        {
            LavaLash.Launch();
            return;
        }
        else if (UnleashElements.KnownSpell && UnleashElements.IsSpellUsable && UnleashElements.IsHostileDistanceGood
                 && mySettings.UseUnleashElements)
        {
            UnleashElements.Launch();
            return;
        }
        else if (EarthShock.IsSpellUsable && EarthShock.KnownSpell && EarthShock.IsHostileDistanceGood
                 && FlameShock.TargetHaveBuff && mySettings.UseEarthShock)
        {
            EarthShock.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 2 && ChainLightning.KnownSpell
                 && ChainLightning.IsSpellUsable && ChainLightning.IsHostileDistanceGood
                 && mySettings.UseChainLightning && ObjectManager.Me.BuffStack(53817) > 0)
        {
            if (AncestralSwiftness.KnownSpell && AncestralSwiftness.IsSpellUsable
                && mySettings.UseAncestralSwiftness)
            {
                AncestralSwiftness.Launch();
                Thread.Sleep(200);
            }
            ChainLightning.Launch();
            return;
        }
        else if (LightningBolt.IsHostileDistanceGood && LightningBolt.KnownSpell && LightningBolt.IsSpellUsable
                 && mySettings.UseLightningBolt && ObjectManager.Me.BuffStack(53817) > 0)
        {
            if (AncestralSwiftness.KnownSpell && AncestralSwiftness.IsSpellUsable
                && mySettings.UseAncestralSwiftness)
            {
                AncestralSwiftness.Launch();
                Thread.Sleep(200);
            }
            LightningBolt.Launch();
            return;
        }
        else
        {
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell
                && mySettings.UseArcaneTorrentForResource)
            {
                ArcaneTorrent.Launch();
                return;
            }
        }
    }

    private bool FireTotemReady()
    {
        if (FireElementalTotem.CreatedBySpell || MagmaTotem.CreatedBySpell)
            return false;
        return true;
    }

    private bool EarthTotemReady()
    {
        if (EarthbindTotem.CreatedBySpell || EarthElementalTotem.CreatedBySpell
            || StoneBulwarkTotem.CreatedBySpell)
            return false;
        return true;
    }

    private bool WaterTotemReady()
    {
        if (HealingStreamTotem.CreatedBySpell || HealingTideTotem.CreatedBySpell)
            return false;
        return true;
    }

    private bool AirTotemReady()
    {
        if (CapacitorTotem.CreatedBySpell || GroundingTotem.CreatedBySpell
            || StormlashTotem.CreatedBySpell)
            return false;
        return true;
    }

    private bool TotemicRecallReady()
    {
        if (FireElementalTotem.CreatedBySpell)
            return false;
        else if (EarthElementalTotem.CreatedBySpell)
            return false;
        else if (SearingTotem.CreatedBySpell)
            return true;
        else if (FireTotemReady() && EarthTotemReady() && WaterTotemReady() && AirTotemReady())
            return false;
        else
            return true;
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: ShamanEnhancementSettings

    [Serializable]
    public class ShamanEnhancementSettings : Settings
    {
        public bool DoAvoidMelee = false;
        public int DoAvoidMeleeDistance = 0;
        public bool UseAlchFlask = true;
        public bool UseAncestralGuidance = true;
        public bool UseAncestralSwiftness = true;
        public bool UseArcaneTorrentForDecast = true;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public bool UseArcaneTorrentForResource = true;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public bool UseAscendance = true;
        public bool UseAstralShift = true;
        public bool UseBerserking = true;
        public bool UseBloodFury = true;
        public bool UseBloodlustHeroism = true;
        public bool UseCalloftheElements = true;
        public bool UseCapacitorTotem = true;
        public bool UseChainHeal = false;
        public bool UseChainLightning = true;
        public bool UseEarthElementalTotem = true;
        public bool UseEarthShock = true;
        public bool UseEarthbindTotem = false;
        public bool UseElementalBlast = true;
        public bool UseElementalMastery = true;
        public bool UseEngGlove = true;
        public bool UseFeralSpirit = true;
        public bool UseFireElementalTotem = true;
        public bool UseFireNova = true;
        public bool UseFlameShock = true;
        public bool UseFlametongueWeapon = true;
        public bool UseFrostShock = false;
        public bool UseFrostbrandWeapon = false;
        public bool UseGhostWolf = true;
        public bool UseGiftoftheNaaru = true;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public bool UseGroundingTotem = true;
        public bool UseHealingRain = true;
        public bool UseHealingStreamTotem = true;
        public bool UseHealingSurge = true;
        public bool UseHealingTideTotem = true;
        public bool UseLavaLash = true;
        public bool UseLifeblood = true;
        public bool UseLightningBolt = true;
        public bool UseLightningShield = true;
        public bool UseLowCombat = true;
        public bool UseMagmaTotem = true;
        public bool UseRockbiterWeapon = false;
        public bool UseSearingTotem = true;
        public bool UseShamanisticRage = true;
        public bool UseSpiritwalkersGrace = true;
        public bool UseStoneBulwarkTotem = true;
        public bool UseStoneform = true;
        public int UseStoneformAtPercentage = 80;
        public bool UseStormlashTotem = true;
        public bool UseStormstrike = true;
        public bool UseTotemicProjection = true;
        public bool UseTotemicRecall = true;
        public bool UseTrinketOne = true;
        public bool UseTrinketTwo = true;
        public bool UseUnleashElements = true;
        public bool UseWarStomp = true;
        public int UseWarStompAtPercentage = 80;
        public bool UseWaterShield = true;
        public bool UseWaterWalking = true;
        public bool UseWindShear = true;
        public bool UseWindfuryWeapon = true;

        public ShamanEnhancementSettings()
        {
            ConfigWinForm(new Point(500, 400), "Shaman Enhancement Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Shaman Buffs */
            AddControlInWinForm("Use Flametongue Weapon", "UseFlametongueWeapon", "Shaman Buffs");
            AddControlInWinForm("Use Frostbrand Weapon", "UseFrostbrandWeapon", "Shaman Buffs");
            AddControlInWinForm("Use Ghost Wolf", "UseGhostWolf", "Shaman Buffs");
            AddControlInWinForm("Use Lightning Shield", "UseLightningShield", "Shaman Buffs");
            AddControlInWinForm("Use Rockbiter Weapon", "UseRockbiterWeapon", "Shaman Buffs");
            AddControlInWinForm("Use Spiritwalker's Grace", "UseSpiritwalkersGrace", "Shaman Buffs");
            AddControlInWinForm("Use Water Shield", "UseWaterShield", "Shaman Buffs");
            AddControlInWinForm("Use Water Walking", "UseWaterWalking", "Shaman Buffs");
            AddControlInWinForm("Use Windfury Weapon", "UseWindfuryWeapon", "Shaman Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Chain Lightning", "UseChainLightning", "Offensive Spell");
            AddControlInWinForm("Use Earth Shock", "UseEarthShock", "Offensive Spell");
            AddControlInWinForm("Use Fire Nova", "UseFireNova", "Offensive Spell");
            AddControlInWinForm("Use Flame Shock", "UseFlameShock", "Offensive Spell");
            AddControlInWinForm("Use Frost Shock", "UseFrostShock", "Offensive Spell");
            AddControlInWinForm("Use Lava Lash", "UseLavaLash", "Offensive Spell");
            AddControlInWinForm("Use Lightning Bolt", "UseLightningBolt", "Offensive Spell");
            AddControlInWinForm("Use Magma Totem", "UseMagmaTotem", "Offensive Spell");
            AddControlInWinForm("Use Searing Totem", "UseSearingTotem", "Offensive Spell");
            AddControlInWinForm("Use Stormstrike", "UseStormstrike", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Ancestral Swiftness", "UseAncestralSwiftness", "Offensive Cooldown");
            AddControlInWinForm("Use Ascendance", "UseAscendance", "Offensive Cooldown");
            AddControlInWinForm("Use Bloodlust / Heroism", "UseBloodlustHeroism", "Offensive Cooldown");
            AddControlInWinForm("Use Call of the Elements", "UseCalloftheElements", "Offensive Cooldown");
            AddControlInWinForm("Use Earth Elemental Totem", "UseEarthElementalTotem", "Offensive Cooldown");
            AddControlInWinForm("Use Elemental Blast", "UseElementalBlast", "Offensive Cooldown");
            AddControlInWinForm("Use Elemental Mastery", "UseElementalMastery", "Offensive Cooldown");
            AddControlInWinForm("Use Feral Spirit", "UseFeralSpirit", "Offensive Cooldown");
            AddControlInWinForm("Use Fire Elemental Totem", "UseFireElementalTotem", "Offensive Cooldown");
            AddControlInWinForm("Use Stormlash Totem", "UseStormlashTotem", "Offensive Cooldown");
            AddControlInWinForm("Use Totemic Projection", "UseTotemicProjection", "Offensive Cooldown");
            AddControlInWinForm("Use Unleash Elements", "UseUnleashElements", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Astral Shift", "UseAstralShift", "Defensive Cooldown");
            AddControlInWinForm("Use Capacitor Totem", "UseCapacitorTotem", "Defensive Cooldown");
            AddControlInWinForm("Use Earthbind Totem", "UseEarthbindTotem", "Defensive Cooldown");
            AddControlInWinForm("Use Grounding Totem", "UseGroundingTotem", "Defensive Cooldown");
            AddControlInWinForm("Use Shamanistic Rage", "UseShamanisticRage", "Defensive Cooldown");
            AddControlInWinForm("Use StoneBulwark Totem", "UseStoneBulwarkTotem", "Defensive Cooldown");
            AddControlInWinForm("Use Wind Shear", "UseWindShear", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Ancestral Guidance", "UseAncestralGuidance", "Healing Spell");
            AddControlInWinForm("Use Chain Heal", "UseChainHeal", "Healing Spell");
            AddControlInWinForm("Use Healing Rain", "UseHealingRain", "Healing Spell");
            AddControlInWinForm("Use Healing Surge", "UseHealingSurge", "Healing Spell");
            AddControlInWinForm("Use Healing Stream Totem", "UseHealingStreamTotem", "Healing Spell");
            AddControlInWinForm("Use Healing Tide Totem", "UsHealingTideTotem", "Healing Spell");
            AddControlInWinForm("Use Totemic Recall", "UseTotemicRecall", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
            AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
            AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
        }

        public static ShamanEnhancementSettings CurrentSetting { get; set; }

        public static ShamanEnhancementSettings GetSettings()
        {
            string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Shaman_Enhancement.xml";
            if (File.Exists(currentSettingsFile))
            {
                return
                    CurrentSetting = Load<ShamanEnhancementSettings>(currentSettingsFile);
            }
            else
            {
                return new ShamanEnhancementSettings();
            }
        }
    }

    #endregion
}

public class ShamanRestoration
{
    private readonly ShamanRestorationSettings mySettings = ShamanRestorationSettings.GetSettings();

    #region General Timers & Variables

    private Timer AlchFlaskTimer = new Timer(0);
    private Timer EngineeringTimer = new Timer(0);
    public int LC = 0;
    private Timer OnCD = new Timer(0);
    private Timer TrinketOneTimer = new Timer(0);
    private Timer TrinketTwoTimer = new Timer(0);

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell BloodFury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell WarStomp = new Spell("War Stomp");

    #endregion

    #region Shaman Buffs

    private readonly Spell EarthShield = new Spell("Earth Shield");
    private readonly Spell EarthlivingWeapon = new Spell("Earthliving Weapon");
    private readonly Spell FlametongueWeapon = new Spell("Flametongue Weapon");
    private readonly Spell FrostbrandWeapon = new Spell("Frostbrand Weapon");
    private readonly Spell GhostWolf = new Spell("Ghost Wolf");
    private readonly Spell LightningShield = new Spell("Lightning Shield");
    private readonly Spell RockbiterWeapon = new Spell("Rockbiter Weapon");
    private readonly Spell SpiritwalkersGrace = new Spell("Spiritwalker's Grace");
    private readonly Spell WaterShield = new Spell("Water Shield");
    private readonly Spell WaterWalking = new Spell("Water Walking");
    private Timer WaterWalkingTimer = new Timer(0);

    #endregion

    #region Offensive Spell

    private readonly Spell ChainLightning = new Spell("Chain Lightning");
    private readonly Spell EarthShock = new Spell("Earth Shock");
    private readonly Spell FlameShock = new Spell("Flame Shock");
    private readonly Spell FrostShock = new Spell("Frost Shock");
    private readonly Spell LavaBurst = new Spell("Lava Burst");
    private readonly Spell LightningBolt = new Spell("Lightning Bolt");
    private readonly Spell MagmaTotem = new Spell("Magma Totem");
    private readonly Spell PrimalStrike = new Spell("Primal Strike");
    private readonly Spell SearingTotem = new Spell("Searing Totem");
    private Timer FlameShockTimer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell AncestralSwiftness = new Spell("Ancestral Swiftness");
    private readonly Spell Ascendance = new Spell("Ascendance");
    private readonly Spell Bloodlust = new Spell("Bloodlust");
    private readonly Spell CalloftheElements = new Spell("Call of the Elements");
    private readonly Spell EarthElementalTotem = new Spell("Earth Elemental Totem");
    private readonly Spell ElementalBlast = new Spell("Elemental Blast");
    private readonly Spell ElementalMastery = new Spell("Elemental Mastery");
    private readonly Spell FireElementalTotem = new Spell("Fire Elemental Totem");
    private readonly Spell Heroism = new Spell("Heroism");
    private readonly Spell StormlashTotem = new Spell("Stormlash Totem");
    private readonly Spell TotemicProjection = new Spell("Totemic Projection");
    private readonly Spell UnleashElements = new Spell("Unleash Elements");
    private readonly Spell UnleashedFury = new Spell("Unleashed Fury");

    #endregion

    #region Defensive Cooldown

    private readonly Spell AstralShift = new Spell("Astral Shift");
    private readonly Spell CapacitorTotem = new Spell("Capacitor Totem");
    private readonly Spell EarthbindTotem = new Spell("Earthbind Totem");
    private readonly Spell GroundingTotem = new Spell("Grounding Totem");
    private readonly Spell StoneBulwarkTotem = new Spell("Stone Bulwark Totem");
    private readonly Spell WindShear = new Spell("Wind Shear");

    #endregion

    #region Healing Spell

    private readonly Spell AncestralGuidance = new Spell("Ancestral Guidance");
    private readonly Spell ChainHeal = new Spell("Chain Heal");
    private readonly Spell GreaterHealingWave = new Spell("Greater Healing Wave");
    private readonly Spell HealingRain = new Spell("Healing Rain");
    private readonly Spell HealingStreamTotem = new Spell("Healing Stream Totem");
    private readonly Spell HealingSurge = new Spell("Healing Surge");
    private readonly Spell HealingTideTotem = new Spell("Healing Tide Totem");
    private readonly Spell HealingWave = new Spell("HealingWave");
    private readonly Spell ManaTideTotem = new Spell("Mana Tide Totem");
    private readonly Spell Riptide = new Spell("Riptide");
    private readonly Spell SpiritLinkTotem = new Spell("Spirit Link Totem");
    private readonly Spell TotemicRecall = new Spell("Totemic Recall");

    #endregion

    public ShamanRestoration()
    {
        Main.range = 30.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (FlameShock.IsHostileDistanceGood || EarthShock.IsHostileDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && mySettings.UseLowCombat)
                            {
                                LC = 1;
                                if (ObjectManager.Target.GetDistance < 41)
                                    LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                if (ObjectManager.Target.GetDistance < 41)
                                    Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void Pull()
    {
        if (TotemicProjection.KnownSpell && TotemicProjection.IsSpellUsable && mySettings.UseTotemicProjection)
            TotemicProjection.Launch();

        if (FlameShock.KnownSpell && FlameShock.IsSpellUsable && FlameShock.IsHostileDistanceGood
            && mySettings.UseFlameShock && LC != 1)
        {
            FlameShock.Launch();
            return;
        }
        else
        {
            if (EarthShock.KnownSpell && EarthShock.IsSpellUsable && EarthShock.IsHostileDistanceGood
                && mySettings.UseEarthShock)
            {
                EarthShock.Launch();
                return;
            }
        }
    }

    private void LowCombat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        DefenseCycle();
        Heal();

        if (EarthShock.KnownSpell && EarthShock.IsSpellUsable && EarthShock.IsHostileDistanceGood
            && mySettings.UseEarthShock)
        {
            EarthShock.Launch();
            return;
        }
        else if (LavaBurst.KnownSpell && LavaBurst.IsSpellUsable && LavaBurst.IsHostileDistanceGood
                 && mySettings.UseLavaBurst)
        {
            LavaBurst.Launch();
            return;
        }
        else if (ChainLightning.KnownSpell && ChainLightning.IsSpellUsable && ChainLightning.IsHostileDistanceGood
                 && mySettings.UseChainLightning)
        {
            ChainLightning.Launch();
            return;
        }
        else
        {
            if (SearingTotem.KnownSpell && SearingTotem.IsSpellUsable && mySettings.UseSearingTotem
                && FireTotemReady() && !SearingTotem.CreatedBySpellInRange(25) && ObjectManager.Target.GetDistance < 31)
            {
                SearingTotem.Launch();
                return;
            }
        }

        if (MagmaTotem.KnownSpell && MagmaTotem.IsSpellUsable && ObjectManager.Target.GetDistance < 8
            && mySettings.UseMagmaTotem && FireTotemReady())
        {
            MagmaTotem.Launch();
            return;
        }
    }

    private void Combat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        if (OnCD.IsReady)
            DefenseCycle();
        DPSCycle();
        Heal();
        Decast();
        DPSCycle();
        DPSBurst();
        DPSCycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (WaterWalking.IsSpellUsable && WaterWalking.KnownSpell &&
            (!WaterWalking.HaveBuff || WaterWalkingTimer.IsReady)
            && ObjectManager.GetNumberAttackPlayer() == 0 && !Fight.InFight && mySettings.UseWaterWalking)
        {
            WaterWalking.Launch();
            WaterWalkingTimer = new Timer(1000*60*9);
            return;
        }
        else if ((ObjectManager.Me.ManaPercentage < 5 && WaterShield.KnownSpell && WaterShield.IsSpellUsable
                  && mySettings.UseWaterShield && !WaterShield.HaveBuff)
                 || (!mySettings.UseLightningShield && !mySettings.UseEarthShield))
        {
            WaterShield.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 50 && EarthShield.KnownSpell && EarthShield.IsSpellUsable
                 && mySettings.UseEarthShield && !EarthShield.HaveBuff && ObjectManager.Me.ManaPercentage > 15
                 || !mySettings.UseLightningShield)
        {
            EarthShield.Launch();
            return;
        }
        else if (LightningShield.KnownSpell && LightningShield.IsSpellUsable && !LightningShield.HaveBuff
                 && mySettings.UseLightningShield && ObjectManager.Me.ManaPercentage > 15
                 && ObjectManager.Me.HealthPercent > 70)
        {
            LightningShield.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 0 && SpiritwalkersGrace.IsSpellUsable
                 && SpiritwalkersGrace.KnownSpell && mySettings.UseSpiritwalkersGrace && ObjectManager.Me.GetMove)
        {
            SpiritwalkersGrace.Launch();
            return;
        }
        else
        {
            if (FlametongueWeapon.KnownSpell && FlametongueWeapon.IsSpellUsable && !ObjectManager.Me.HaveBuff(10400)
                && mySettings.UseFlametongueWeapon)
            {
                FlametongueWeapon.Launch();
                return;
            }
            else if (EarthlivingWeapon.KnownSpell && EarthlivingWeapon.IsSpellUsable &&
                     !ObjectManager.Me.HaveBuff(52007)
                     && mySettings.UseEarthlivingWeapon && !mySettings.UseFlametongueWeapon)
            {
                EarthlivingWeapon.Launch();
                return;
            }
            else if (FrostbrandWeapon.KnownSpell && FrostbrandWeapon.IsSpellUsable &&
                     !ObjectManager.Me.HaveBuff(8034)
                     && mySettings.UseFrostbrandWeapon && !mySettings.UseFlametongueWeapon &&
                     !mySettings.UseEarthlivingWeapon)
            {
                FrostbrandWeapon.Launch();
                return;
            }
            else
            {
                if (RockbiterWeapon.KnownSpell && RockbiterWeapon.IsSpellUsable &&
                    !ObjectManager.Me.HaveBuff(36494)
                    && mySettings.UseRockbiterWeapon && !mySettings.UseFlametongueWeapon
                    && !mySettings.UseFrostbrandWeapon && !mySettings.UseEarthlivingWeapon)
                {
                    RockbiterWeapon.Launch();
                    return;
                }
            }
        }

        if (ObjectManager.GetNumberAttackPlayer() == 0 && GhostWolf.IsSpellUsable && GhostWolf.KnownSpell
            && mySettings.UseGhostWolf && ObjectManager.Me.GetMove && !GhostWolf.HaveBuff
            && ObjectManager.Target.GetDistance > 50)
        {
            GhostWolf.Launch();
            return;
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            var maxTimeTimer = new Timer(1000*2);
            MovementsAction.MoveBackward(true);
            while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                Thread.Sleep(300);
            MovementsAction.MoveBackward(false);
            if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
            {
                MovementsAction.MoveForward(true);
                Thread.Sleep(1000);
                MovementsAction.MoveForward(false);
                MovementManager.Face(ObjectManager.Target.Position);
            }
        }
    }

    private void DefenseCycle()
    {
        if (ObjectManager.Me.HealthPercent < 50 && CapacitorTotem.KnownSpell && CapacitorTotem.IsSpellUsable
            && AirTotemReady() && mySettings.UseCapacitorTotem)
        {
            CapacitorTotem.Launch();
            OnCD = new Timer(1000*5);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 50 && StoneBulwarkTotem.KnownSpell &&
                 StoneBulwarkTotem.IsSpellUsable
                 && EarthTotemReady() && mySettings.UseStoneBulwarkTotem)
        {
            StoneBulwarkTotem.Launch();
            OnCD = new Timer(1000*10);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 70 && SpiritLinkTotem.KnownSpell &&
                 SpiritLinkTotem.IsSpellUsable
                 && AirTotemReady() && mySettings.UseSpiritLinkTotem)
        {
            SpiritLinkTotem.Launch();
            OnCD = new Timer(1000*6);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable &&
                 WarStomp.KnownSpell
                 && mySettings.UseWarStomp)
        {
            WarStomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable &&
                 Stoneform.KnownSpell
                 && mySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent < 70 && AstralShift.KnownSpell && AstralShift.IsSpellUsable
                && mySettings.UseAstralShift)
            {
                AstralShift.Launch();
                OnCD = new Timer(1000*6);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell &&
            ObjectManager.Me.ManaPercentage <= mySettings.UseArcaneTorrentForResourceAtPercentage
            && mySettings.UseArcaneTorrentForResource)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else if (ObjectManager.Me.ManaPercentage < 50 && TotemicRecall.KnownSpell && TotemicRecall.IsSpellUsable
                 && mySettings.UseTotemicRecall && ObjectManager.GetNumberAttackPlayer() == 0 && !Fight.InFight
                 && TotemicRecallReady())
        {
            TotemicRecall.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Me.ManaPercentage < 80 && ManaTideTotem.KnownSpell && ManaTideTotem.IsSpellUsable
                && mySettings.UseManaTideTotem && WaterTotemReady())
            {
                ManaTideTotem.Launch();
                return;
            }
        }

        if (ObjectManager.Me.HealthPercent < 95 && HealingSurge.KnownSpell && HealingSurge.IsSpellUsable
            && ObjectManager.GetNumberAttackPlayer() == 0 && !Fight.InFight && mySettings.UseHealingSurge)
        {
            HealingSurge.Launch();
            while (ObjectManager.Me.IsCast)
            {
                Thread.Sleep(200);
            }
            return;
        }
        else if (HealingSurge.KnownSpell && HealingSurge.IsSpellUsable && ObjectManager.Me.HealthPercent < 50
                 && mySettings.UseHealingSurge)
        {
            HealingSurge.Launch();
            return;
        }
        else if (GreaterHealingWave.KnownSpell && GreaterHealingWave.IsSpellUsable
                 && ObjectManager.Me.HealthPercent < 60 && mySettings.UseGreaterHealingWave)
        {
            GreaterHealingWave.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseGiftoftheNaaruAtPercentage &&
                 GiftoftheNaaru.KnownSpell && GiftoftheNaaru.IsSpellUsable
                 && mySettings.UseGiftoftheNaaru)
        {
            GiftoftheNaaru.Launch();
            return;
        }
        else if (HealingTideTotem.KnownSpell && HealingTideTotem.IsSpellUsable &&
                 ObjectManager.Me.HealthPercent < 70
                 && WaterTotemReady() && mySettings.UseHealingTideTotem)
        {
            HealingTideTotem.Launch();
            return;
        }
        else if (AncestralGuidance.KnownSpell && AncestralGuidance.IsSpellUsable &&
                 ObjectManager.Me.HealthPercent < 70
                 && mySettings.UseAncestralGuidance)
        {
            AncestralGuidance.Launch();
            return;
        }
        else if (ChainHeal.KnownSpell && ChainHeal.IsSpellUsable && ObjectManager.Me.HealthPercent < 80
                 && mySettings.UseChainHeal)
        {
            ChainHeal.Launch();
            return;
        }
        else if (HealingStreamTotem.KnownSpell && HealingStreamTotem.IsSpellUsable &&
                 ObjectManager.Me.HealthPercent < 90
                 && WaterTotemReady() && mySettings.UseHealingStreamTotem)
        {
            HealingStreamTotem.Launch();
            return;
        }
        else if (Riptide.KnownSpell && Riptide.IsSpellUsable && ObjectManager.Me.HealthPercent < 90
                 && mySettings.UseRiptide && !Riptide.HaveBuff)
        {
            Riptide.Launch();
            return;
        }
        else
        {
            if (HealingWave.KnownSpell && HealingWave.IsSpellUsable && ObjectManager.Me.HealthPercent < 80
                && mySettings.UseHealingWave)
            {
                HealingWave.Launch();
                return;
            }
        }
    }

    private void Decast()
    {
        if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && mySettings.UseWindShear
            && WindShear.KnownSpell && WindShear.IsSpellUsable && WindShear.IsHostileDistanceGood)
        {
            WindShear.Launch();
            return;
        }
        else if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8
                 && ObjectManager.Me.HealthPercent <= mySettings.UseArcaneTorrentForDecastAtPercentage
                 && mySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast &&
                 ObjectManager.Target.IsTargetingMe)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && mySettings.UseGroundingTotem
                && GroundingTotem.KnownSpell && GroundingTotem.IsSpellUsable && AirTotemReady())
            {
                GroundingTotem.Launch();
                return;
            }
        }

        if (ObjectManager.Target.GetMove && !FrostShock.TargetHaveBuff && mySettings.UseFrostShock
            && FrostShock.KnownSpell && FrostShock.IsSpellUsable && FrostShock.IsHostileDistanceGood)
        {
            FrostShock.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.GetMove && mySettings.UseEarthbindTotem && EarthTotemReady()
                && EarthbindTotem.KnownSpell && EarthbindTotem.IsSpellUsable && EarthbindTotem.IsHostileDistanceGood)
            {
                EarthbindTotem.Launch();
                return;
            }
        }
    }

    private void DPSBurst()
    {
        if (mySettings.UseTrinketOne && TrinketOneTimer.IsReady && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketOneTimer = new Timer(1000*60*2);
        }
        else if (mySettings.UseTrinketTwo && TrinketTwoTimer.IsReady && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketTwoTimer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseBerserking)
            Berserking.Launch();
        else if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseBloodFury)
            BloodFury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (EngineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            EngineeringTimer = new Timer(1000*60);
        }
        else if (UnleashElements.KnownSpell && UnleashElements.IsSpellUsable && UnleashedFury.KnownSpell
                 && mySettings.UseUnleashElements && UnleashElements.IsHostileDistanceGood)
        {
            UnleashElements.Launch();
            return;
        }
        else if (ElementalBlast.KnownSpell && ElementalBlast.IsSpellUsable
                 && mySettings.UseElementalBlast && ElementalBlast.IsHostileDistanceGood)
        {
            ElementalBlast.Launch();
            return;
        }
        else if (Ascendance.KnownSpell && Ascendance.IsSpellUsable && ObjectManager.Me.HealthPercent < 80
                 && mySettings.UseAscendance && ObjectManager.Target.GetDistance < 41)
        {
            Ascendance.Launch();
            return;
        }
        else if (FireElementalTotem.KnownSpell && FireElementalTotem.IsSpellUsable
                 && mySettings.UseFireElementalTotem && ObjectManager.Target.GetDistance < 41)
        {
            FireElementalTotem.Launch();
            return;
        }
        else if (StormlashTotem.KnownSpell && AirTotemReady()
                 && mySettings.UseStormlashTotem && ObjectManager.Target.GetDistance < 41)
        {
            if (!StormlashTotem.IsSpellUsable && mySettings.UseCalloftheElements
                && CalloftheElements.KnownSpell && CalloftheElements.IsSpellUsable)
            {
                CalloftheElements.Launch();
                Thread.Sleep(200);
            }

            if (StormlashTotem.IsSpellUsable)
                StormlashTotem.Launch();
            return;
        }
        else if (Bloodlust.KnownSpell && Bloodlust.IsSpellUsable && mySettings.UseBloodlustHeroism
                 && ObjectManager.Target.GetDistance < 41 && !ObjectManager.Me.HaveBuff(57724))
        {
            Bloodlust.Launch();
            return;
        }

        else if (Heroism.KnownSpell && Heroism.IsSpellUsable && mySettings.UseBloodlustHeroism
                 && ObjectManager.Target.GetDistance < 41 && !ObjectManager.Me.HaveBuff(57723))
        {
            Heroism.Launch();
            return;
        }
        else
        {
            if (ElementalMastery.KnownSpell && ElementalMastery.IsSpellUsable
                && !ObjectManager.Me.HaveBuff(2825) && mySettings.UseElementalMastery
                && !ObjectManager.Me.HaveBuff(32182))
            {
                ElementalMastery.Launch();
                return;
            }
        }
    }

    private void DPSCycle()
    {
        if (PrimalStrike.KnownSpell && PrimalStrike.IsSpellUsable && PrimalStrike.IsHostileDistanceGood
            && mySettings.UsePrimalStrike && ObjectManager.Me.Level < 11)
        {
            PrimalStrike.Launch();
            return;
        }

        if (EarthElementalTotem.KnownSpell && EarthElementalTotem.IsSpellUsable
            && ObjectManager.GetNumberAttackPlayer() > 3 && mySettings.UseEarthElementalTotem)
        {
            EarthElementalTotem.Launch();
            return;
        }
        else if (FlameShock.IsSpellUsable && FlameShock.IsHostileDistanceGood && FlameShock.KnownSpell
                 && mySettings.UseFlameShock && (!FlameShock.TargetHaveBuff || FlameShockTimer.IsReady))
        {
            FlameShock.Launch();
            FlameShockTimer = new Timer(1000*27);
            return;
        }
        else if (LavaBurst.KnownSpell && LavaBurst.IsSpellUsable && LavaBurst.IsHostileDistanceGood
                 && mySettings.UseLavaBurst && FlameShock.TargetHaveBuff)
        {
            LavaBurst.Launch();
            return;
        }
        else if (EarthShock.IsSpellUsable && EarthShock.KnownSpell && EarthShock.IsHostileDistanceGood
                 && mySettings.UseEarthShock && FlameShock.TargetHaveBuff)
        {
            EarthShock.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 1 && MagmaTotem.KnownSpell
                 && MagmaTotem.IsSpellUsable && mySettings.UseMagmaTotem
                 && !FireElementalTotem.CreatedBySpell)
        {
            MagmaTotem.Launch();
            return;
        }
        if (SearingTotem.KnownSpell && SearingTotem.IsSpellUsable && mySettings.UseSearingTotem
            && FireTotemReady() && !SearingTotem.CreatedBySpellInRange(25) && ObjectManager.Target.GetDistance < 31)
        {
            SearingTotem.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 1 && ChainLightning.KnownSpell
                 && ChainLightning.IsSpellUsable && ChainLightning.IsHostileDistanceGood
                 && mySettings.UseChainLightning && !ObjectManager.Me.HaveBuff(77762))
        {
            if (AncestralSwiftness.KnownSpell && AncestralSwiftness.IsSpellUsable
                && mySettings.UseAncestralSwiftness)
            {
                AncestralSwiftness.Launch();
                Thread.Sleep(200);
            }
            ChainLightning.Launch();
            return;
        }
        else
        {
            if (LightningBolt.IsHostileDistanceGood && LightningBolt.KnownSpell && LightningBolt.IsSpellUsable
                && mySettings.UseLightningBolt && !ObjectManager.Me.HaveBuff(77762))
            {
                if (AncestralSwiftness.KnownSpell && AncestralSwiftness.IsSpellUsable
                    && mySettings.UseAncestralSwiftness)
                {
                    AncestralSwiftness.Launch();
                    Thread.Sleep(200);
                }
                LightningBolt.Launch();
                return;
            }
        }
    }

    private bool FireTotemReady()
    {
        if (FireElementalTotem.CreatedBySpell || MagmaTotem.CreatedBySpell)
            return false;
        return true;
    }

    private bool EarthTotemReady()
    {
        if (EarthbindTotem.CreatedBySpell || EarthElementalTotem.CreatedBySpell
            || StoneBulwarkTotem.CreatedBySpell)
            return false;
        return true;
    }

    private bool WaterTotemReady()
    {
        if (HealingStreamTotem.CreatedBySpell || HealingTideTotem.CreatedBySpell
            || ManaTideTotem.CreatedBySpell)
            return false;
        return true;
    }

    private bool AirTotemReady()
    {
        if (CapacitorTotem.CreatedBySpell || GroundingTotem.CreatedBySpell
            || StormlashTotem.CreatedBySpell || SpiritLinkTotem.CreatedBySpell)
            return false;
        return true;
    }

    private bool TotemicRecallReady()
    {
        if (FireElementalTotem.CreatedBySpell)
            return false;
        else if (EarthElementalTotem.CreatedBySpell)
            return false;
        else if (SearingTotem.CreatedBySpell)
            return true;
        else if (FireTotemReady() && EarthTotemReady() && WaterTotemReady() && AirTotemReady())
            return false;
        else
            return true;
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: ShamanRestorationSettings

    [Serializable]
    public class ShamanRestorationSettings : Settings
    {
        public bool DoAvoidMelee = false;
        public int DoAvoidMeleeDistance = 0;
        public bool UseAlchFlask = true;
        public bool UseAncestralGuidance = true;
        public bool UseAncestralSwiftness = true;
        public bool UseArcaneTorrentForDecast = true;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public bool UseArcaneTorrentForResource = true;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public bool UseAscendance = true;
        public bool UseAstralShift = true;
        public bool UseBerserking = true;
        public bool UseBloodFury = true;
        public bool UseBloodlustHeroism = true;
        public bool UseCalloftheElements = true;
        public bool UseCapacitorTotem = true;
        public bool UseChainHeal = false;
        public bool UseChainLightning = true;
        public bool UseEarthElementalTotem = true;
        public bool UseEarthShield = true;
        public bool UseEarthShock = true;
        public bool UseEarthbindTotem = false;
        public bool UseEarthlivingWeapon = true;
        public bool UseElementalBlast = true;
        public bool UseElementalMastery = true;
        public bool UseEngGlove = true;
        public bool UseFireElementalTotem = true;
        public bool UseFlameShock = true;
        public bool UseFlametongueWeapon = true;
        public bool UseFrostShock = false;
        public bool UseFrostbrandWeapon = false;
        public bool UseGhostWolf = true;
        public bool UseGiftoftheNaaru = true;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public bool UseGreaterHealingWave = true;
        public bool UseGroundingTotem = true;
        public bool UseHealingRain = true;
        public bool UseHealingStreamTotem = true;
        public bool UseHealingSurge = true;
        public bool UseHealingTideTotem = true;
        public bool UseHealingWave = false;
        public bool UseLavaBurst = true;
        public bool UseLifeblood = true;
        public bool UseLightningBolt = true;
        public bool UseLightningShield = true;
        public bool UseLowCombat = true;
        public bool UseMagmaTotem = true;
        public bool UseManaTideTotem = true;
        public bool UsePrimalStrike = true;
        public bool UseRiptide = true;
        public bool UseRockbiterWeapon = false;
        public bool UseSearingTotem = true;
        public bool UseSpiritLinkTotem = true;
        public bool UseSpiritwalkersGrace = true;
        public bool UseStoneBulwarkTotem = true;
        public bool UseStoneform = true;
        public int UseStoneformAtPercentage = 80;
        public bool UseStormlashTotem = true;
        public bool UseTotemicProjection = true;
        public bool UseTotemicRecall = true;
        public bool UseTrinketOne = true;
        public bool UseTrinketTwo = true;
        public bool UseUnleashElements = true;
        public bool UseWarStomp = true;
        public int UseWarStompAtPercentage = 80;
        public bool UseWaterShield = true;
        public bool UseWaterWalking = true;
        public bool UseWindShear = true;

        public ShamanRestorationSettings()
        {
            ConfigWinForm(new Point(500, 400), "Shaman Restoration Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Shaman Buffs */
            AddControlInWinForm("Use Earth Shield", "UseEarthShield", "Shaman Buffs");
            AddControlInWinForm("Use Earthliving Weapon", "UseEarthlivingWeapon", "Shaman Buffs");
            AddControlInWinForm("Use Flametongue Weapon", "UseFlametongueWeapon", "Shaman Buffs");
            AddControlInWinForm("Use Frostbrand Weapon", "UseFrostbrandWeapon", "Shaman Buffs");
            AddControlInWinForm("Use Ghost Wolf", "UseGhostWolf", "Shaman Buffs");
            AddControlInWinForm("Use Lightning Shield", "UseLightningShield", "Shaman Buffs");
            AddControlInWinForm("Use Rockbiter Weapon", "UseRockbiterWeapon", "Shaman Buffs");
            AddControlInWinForm("Use Spiritwalker's Grace", "UseSpiritwalkersGrace", "Shaman Buffs");
            AddControlInWinForm("Use Water Shield", "UseWaterShield", "Shaman Buffs");
            AddControlInWinForm("Use Water Walking", "UseWaterWalking", "Shaman Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Chain Lightning", "UseChainLightning", "Offensive Spell");
            AddControlInWinForm("Use Earth Shock", "UseEarthShock", "Offensive Spell");
            AddControlInWinForm("Use Flame Shock", "UseFlameShock", "Offensive Spell");
            AddControlInWinForm("Use Frost Shock", "UseFrostShock", "Offensive Spell");
            AddControlInWinForm("Use Lava Burst", "UseLavaBurst", "Offensive Spell");
            AddControlInWinForm("Use Lightning Bolt", "UseLightningBolt", "Offensive Spell");
            AddControlInWinForm("Use Magma Totem", "UseMagmaTotem", "Offensive Spell");
            AddControlInWinForm("Use Searing Totem", "UseSearingTotem", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Ancestral Swiftness", "UseAncestralSwiftness", "Offensive Cooldown");
            AddControlInWinForm("Use Ascendance", "UseAscendance", "Offensive Cooldown");
            AddControlInWinForm("Use Bloodlust / Heroism", "UseBloodlustHeroism", "Offensive Cooldown");
            AddControlInWinForm("Use Call of the Elements", "UseCalloftheElements", "Offensive Cooldown");
            AddControlInWinForm("Use Earth Elemental Totem", "UseEarthElementalTotem", "Offensive Cooldown");
            AddControlInWinForm("Use Elemental Blast", "UseElementalBlast", "Offensive Cooldown");
            AddControlInWinForm("Use Elemental Mastery", "UseElementalMastery", "Offensive Cooldown");
            AddControlInWinForm("Use Fire Elemental Totem", "UseFireElementalTotem", "Offensive Cooldown");
            AddControlInWinForm("Use Stormlash Totem", "UseStormlashTotem", "Offensive Cooldown");
            AddControlInWinForm("Use Totemic Projection", "UseTotemicProjection", "Offensive Cooldown");
            AddControlInWinForm("Use Unleash Elements", "UseUnleashElements", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Astral Shift", "UseAstralShift", "Defensive Cooldown");
            AddControlInWinForm("Use Capacitor Totem", "UseCapacitorTotem", "Defensive Cooldown");
            AddControlInWinForm("Use Earthbind Totem", "UseEarthbindTotem", "Defensive Cooldown");
            AddControlInWinForm("Use Grounding Totem", "UseGroundingTotem", "Defensive Cooldown");
            AddControlInWinForm("Use StoneBulwark Totem", "UseStoneBulwarkTotem", "Defensive Cooldown");
            AddControlInWinForm("Use Wind Shear", "UseWindShear", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Ancestral Guidance", "UseAncestralGuidance", "Healing Spell");
            AddControlInWinForm("Use Chain Heal", "UseChainHeal", "Healing Spell");
            AddControlInWinForm("Use Greater Healing Wave", "UseGreaterHealingWave", "Healing Spell");
            AddControlInWinForm("Use Healing Rain", "UseHealingRain", "Healing Spell");
            AddControlInWinForm("Use Healing Surge", "UseHealingSurge", "Healing Spell");
            AddControlInWinForm("Use Healing Stream Totem", "UseHealingStreamTotem", "Healing Spell");
            AddControlInWinForm("Use Healing Tide Totem", "UsHealingTideTotem", "Healing Spell");
            AddControlInWinForm("Use Healing Wave", "UseHealingWave", "Healing Spell");
            AddControlInWinForm("Use Mana Tide Totem", "UseManaTideTotem", "Healing Spell");
            AddControlInWinForm("Use Riptide", "UseRiptide", "Healing Spell");
            AddControlInWinForm("Use Spirit Link Totem", "UseSpiritLinkTotem", "Healing Spell");
            AddControlInWinForm("Use Totemic Recall", "UseTotemicRecall", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
            AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
            AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
        }

        public static ShamanRestorationSettings CurrentSetting { get; set; }

        public static ShamanRestorationSettings GetSettings()
        {
            string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Shaman_Restoration.xml";
            if (File.Exists(currentSettingsFile))
            {
                return
                    CurrentSetting = Load<ShamanRestorationSettings>(currentSettingsFile);
            }
            else
            {
                return new ShamanRestorationSettings();
            }
        }
    }

    #endregion
}

public class ShamanElemental
{
    private readonly ShamanElementalSettings mySettings = ShamanElementalSettings.GetSettings();

    #region General Timers & Variables

    private Timer AlchFlaskTimer = new Timer(0);
    private Timer EngineeringTimer = new Timer(0);
    public int LC = 0;
    private Timer OnCD = new Timer(0);
    private Timer TrinketOneTimer = new Timer(0);
    private Timer TrinketTwoTimer = new Timer(0);

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell BloodFury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell WarStomp = new Spell("War Stomp");

    #endregion

    #region Shaman Buffs

    private readonly Spell FlametongueWeapon = new Spell("Flametongue Weapon");
    private readonly Spell FrostbrandWeapon = new Spell("Frostbrand Weapon");
    private readonly Spell GhostWolf = new Spell("Ghost Wolf");
    private readonly Spell LightningShield = new Spell("Lightning Shield");
    private readonly Spell RockbiterWeapon = new Spell("Rockbiter Weapon");
    private readonly Spell SpiritwalkersGrace = new Spell("Spiritwalker's Grace");
    private readonly Spell WaterShield = new Spell("Water Shield");
    private readonly Spell WaterWalking = new Spell("Water Walking");
    private Timer WaterWalkingTimer = new Timer(0);

    #endregion

    #region Offensive Spell

    private readonly Spell ChainLightning = new Spell("Chain Lightning");
    private readonly Spell EarthShock = new Spell("Earth Shock");
    private readonly Spell Earthquake = new Spell("Earthquake");
    private readonly Spell FlameShock = new Spell("Flame Shock");
    private readonly Spell FrostShock = new Spell("Frost Shock");
    private readonly Spell LavaBurst = new Spell("Lava Burst");
    private readonly Spell LightningBolt = new Spell("Lightning Bolt");
    private readonly Spell MagmaTotem = new Spell("Magma Totem");
    private readonly Spell SearingTotem = new Spell("Searing Totem");
    private readonly Spell Thunderstorm = new Spell("Thunderstorm");
    private Timer FlameShockTimer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell AncestralSwiftness = new Spell("Ancestral Swiftness");
    private readonly Spell Ascendance = new Spell("Ascendance");
    private readonly Spell Bloodlust = new Spell("Bloodlust");
    private readonly Spell CalloftheElements = new Spell("Call of the Elements");
    private readonly Spell EarthElementalTotem = new Spell("Earth Elemental Totem");
    private readonly Spell ElementalBlast = new Spell("Elemental Blast");
    private readonly Spell ElementalMastery = new Spell("Elemental Mastery");
    private readonly Spell FireElementalTotem = new Spell("Fire Elemental Totem");
    private readonly Spell Heroism = new Spell("Heroism");
    private readonly Spell StormlashTotem = new Spell("Stormlash Totem");
    private readonly Spell TotemicProjection = new Spell("Totemic Projection");
    private readonly Spell UnleashElements = new Spell("Unleash Elements");
    private readonly Spell UnleashedFury = new Spell("Unleashed Fury");

    #endregion

    #region Defensive Cooldown

    private readonly Spell AstralShift = new Spell("Astral Shift");
    private readonly Spell CapacitorTotem = new Spell("Capacitor Totem");
    private readonly Spell EarthbindTotem = new Spell("Earthbind Totem");
    private readonly Spell GroundingTotem = new Spell("Grounding Totem");
    private readonly Spell StoneBulwarkTotem = new Spell("Stone Bulwark Totem");
    private readonly Spell WindShear = new Spell("Wind Shear");

    #endregion

    #region Healing Spell

    private readonly Spell AncestralGuidance = new Spell("Ancestral Guidance");
    private readonly Spell ChainHeal = new Spell("Chain Heal");
    private readonly Spell HealingRain = new Spell("Healing Rain");
    private readonly Spell HealingStreamTotem = new Spell("Healing Stream Totem");
    private readonly Spell HealingSurge = new Spell("Healing Surge");
    private readonly Spell HealingTideTotem = new Spell("Healing Tide Totem");
    private readonly Spell TotemicRecall = new Spell("Totemic Recall");

    #endregion

    public ShamanElemental()
    {
        Main.range = 30.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget && FlameShock.IsHostileDistanceGood)
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && mySettings.UseLowCombat)
                            {
                                LC = 1;
                                if (ObjectManager.Target.GetDistance < 41)
                                    LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                if (ObjectManager.Target.GetDistance < 41)
                                    Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void Pull()
    {
        if (TotemicProjection.KnownSpell && TotemicProjection.IsSpellUsable && mySettings.UseTotemicProjection)
            TotemicProjection.Launch();

        if (FlameShock.KnownSpell && FlameShock.IsSpellUsable && FlameShock.IsHostileDistanceGood
            && mySettings.UseFlameShock && LC != 1)
        {
            FlameShock.Launch();
            return;
        }
        else
        {
            if (EarthShock.KnownSpell && EarthShock.IsSpellUsable && EarthShock.IsHostileDistanceGood
                && mySettings.UseEarthShock)
            {
                EarthShock.Launch();
                return;
            }
        }
    }

    private void LowCombat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        DefenseCycle();
        Heal();

        if (EarthShock.KnownSpell && EarthShock.IsSpellUsable && EarthShock.IsHostileDistanceGood
            && mySettings.UseEarthShock)
        {
            EarthShock.Launch();
            return;
        }
        else if (LavaBurst.KnownSpell && LavaBurst.IsSpellUsable && LavaBurst.IsHostileDistanceGood
                 && mySettings.UseLavaBurst)
        {
            LavaBurst.Launch();
            return;
        }
        else if (ChainLightning.KnownSpell && ChainLightning.IsSpellUsable && ChainLightning.IsHostileDistanceGood
                 && mySettings.UseChainLightning)
        {
            ChainLightning.Launch();
            return;
        }
        else
        {
            if (SearingTotem.KnownSpell && SearingTotem.IsSpellUsable && mySettings.UseSearingTotem
                && FireTotemReady() && !SearingTotem.CreatedBySpellInRange(25) && ObjectManager.Target.GetDistance < 31)
            {
                SearingTotem.Launch();
                return;
            }
        }

        if (MagmaTotem.KnownSpell && MagmaTotem.IsSpellUsable && ObjectManager.Target.GetDistance < 8
            && mySettings.UseMagmaTotem && FireTotemReady())
        {
            MagmaTotem.Launch();
            return;
        }
    }

    private void Combat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        if (OnCD.IsReady)
            DefenseCycle();
        DPSCycle();
        Heal();
        Decast();
        DPSCycle();
        DPSBurst();
        DPSCycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (WaterWalking.IsSpellUsable && WaterWalking.KnownSpell &&
            (!WaterWalking.HaveBuff || WaterWalkingTimer.IsReady)
            && ObjectManager.GetNumberAttackPlayer() == 0 && !Fight.InFight && mySettings.UseWaterWalking)
        {
            WaterWalking.Launch();
            WaterWalkingTimer = new Timer(1000*60*9);
            return;
        }
        else if ((ObjectManager.Me.ManaPercentage < 5 && WaterShield.KnownSpell && WaterShield.IsSpellUsable
                  && mySettings.UseWaterShield && !WaterShield.HaveBuff) || !mySettings.UseLightningShield)
        {
            WaterShield.Launch();
            return;
        }
        else if (LightningShield.KnownSpell && LightningShield.IsSpellUsable && !LightningShield.HaveBuff
                 && mySettings.UseLightningShield && ObjectManager.Me.ManaPercentage > 15)
        {
            LightningShield.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 0 && SpiritwalkersGrace.IsSpellUsable
                 && SpiritwalkersGrace.KnownSpell && mySettings.UseSpiritwalkersGrace && ObjectManager.Me.GetMove)
        {
            SpiritwalkersGrace.Launch();
            return;
        }
        else
        {
            if (FlametongueWeapon.KnownSpell && FlametongueWeapon.IsSpellUsable && !ObjectManager.Me.HaveBuff(10400)
                && mySettings.UseFlametongueWeapon)
            {
                FlametongueWeapon.Launch();
                return;
            }
            else if (FrostbrandWeapon.KnownSpell && FrostbrandWeapon.IsSpellUsable && !ObjectManager.Me.HaveBuff(8034)
                     && mySettings.UseFrostbrandWeapon && !mySettings.UseFlametongueWeapon)
            {
                FrostbrandWeapon.Launch();
                return;
            }
            else
            {
                if (RockbiterWeapon.KnownSpell && RockbiterWeapon.IsSpellUsable && !ObjectManager.Me.HaveBuff(36494)
                    && mySettings.UseRockbiterWeapon && !mySettings.UseFlametongueWeapon
                    && !mySettings.UseFrostbrandWeapon)
                {
                    RockbiterWeapon.Launch();
                    return;
                }
            }
        }

        if (ObjectManager.GetNumberAttackPlayer() == 0 && GhostWolf.IsSpellUsable && GhostWolf.KnownSpell
            && mySettings.UseGhostWolf && ObjectManager.Me.GetMove && !GhostWolf.HaveBuff
            && ObjectManager.Target.GetDistance > 50)
        {
            GhostWolf.Launch();
            return;
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            var maxTimeTimer = new Timer(1000*2);
            MovementsAction.MoveBackward(true);
            while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                Thread.Sleep(300);
            MovementsAction.MoveBackward(false);
            if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
            {
                MovementsAction.MoveForward(true);
                Thread.Sleep(1000);
                MovementsAction.MoveForward(false);
                MovementManager.Face(ObjectManager.Target.Position);
            }
        }
    }

    private void DefenseCycle()
    {
        if (ObjectManager.Me.HealthPercent < 50 && CapacitorTotem.KnownSpell && CapacitorTotem.IsSpellUsable
            && AirTotemReady() && mySettings.UseCapacitorTotem)
        {
            CapacitorTotem.Launch();
            OnCD = new Timer(1000*5);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 50 && StoneBulwarkTotem.KnownSpell &&
                 StoneBulwarkTotem.IsSpellUsable
                 && EarthTotemReady() && mySettings.UseStoneBulwarkTotem)
        {
            StoneBulwarkTotem.Launch();
            OnCD = new Timer(1000*10);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable &&
                 WarStomp.KnownSpell
                 && mySettings.UseWarStomp)
        {
            WarStomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable &&
                 Stoneform.KnownSpell
                 && mySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent < 70 && AstralShift.KnownSpell && AstralShift.IsSpellUsable
                && mySettings.UseAstralShift)
            {
                AstralShift.Launch();
                OnCD = new Timer(1000*6);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell &&
            ObjectManager.Me.ManaPercentage <= mySettings.UseArcaneTorrentForResourceAtPercentage
            && mySettings.UseArcaneTorrentForResource)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Me.ManaPercentage < 50 && TotemicRecall.KnownSpell && TotemicRecall.IsSpellUsable
                && mySettings.UseTotemicRecall && ObjectManager.GetNumberAttackPlayer() == 0 && !Fight.InFight
                && TotemicRecallReady())
            {
                TotemicRecall.Launch();
                return;
            }
        }

        if (ObjectManager.Me.HealthPercent < 95 && HealingSurge.KnownSpell && HealingSurge.IsSpellUsable
            && ObjectManager.GetNumberAttackPlayer() == 0 && !Fight.InFight && mySettings.UseHealingSurge)
        {
            HealingSurge.Launch();
            while (ObjectManager.Me.IsCast)
            {
                Thread.Sleep(200);
            }
            return;
        }
        else if (HealingSurge.KnownSpell && HealingSurge.IsSpellUsable && ObjectManager.Me.HealthPercent < 50
                 && mySettings.UseHealingSurge)
        {
            HealingSurge.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseGiftoftheNaaruAtPercentage &&
                 GiftoftheNaaru.KnownSpell && GiftoftheNaaru.IsSpellUsable
                 && mySettings.UseGiftoftheNaaru)
        {
            GiftoftheNaaru.Launch();
            return;
        }
        else if (HealingTideTotem.KnownSpell && HealingTideTotem.IsSpellUsable &&
                 ObjectManager.Me.HealthPercent < 70
                 && WaterTotemReady() && mySettings.UseHealingTideTotem)
        {
            HealingTideTotem.Launch();
            return;
        }
        else if (AncestralGuidance.KnownSpell && AncestralGuidance.IsSpellUsable &&
                 ObjectManager.Me.HealthPercent < 70
                 && mySettings.UseAncestralGuidance)
        {
            AncestralGuidance.Launch();
            return;
        }
        else if (ChainHeal.KnownSpell && ChainHeal.IsSpellUsable && ObjectManager.Me.HealthPercent < 80
                 && mySettings.UseChainHeal)
        {
            ChainHeal.Launch();
            return;
        }
        else
        {
            if (HealingStreamTotem.KnownSpell && HealingStreamTotem.IsSpellUsable &&
                ObjectManager.Me.HealthPercent < 90
                && WaterTotemReady() && mySettings.UseHealingStreamTotem)
            {
                HealingStreamTotem.Launch();
                return;
            }
        }
    }

    private void Decast()
    {
        if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && mySettings.UseWindShear
            && WindShear.KnownSpell && WindShear.IsSpellUsable && WindShear.IsHostileDistanceGood)
        {
            WindShear.Launch();
            return;
        }
        else if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8
                 && ObjectManager.Me.HealthPercent <= mySettings.UseArcaneTorrentForDecastAtPercentage
                 && mySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast &&
                 ObjectManager.Target.IsTargetingMe)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && mySettings.UseGroundingTotem
                && GroundingTotem.KnownSpell && GroundingTotem.IsSpellUsable && AirTotemReady())
            {
                GroundingTotem.Launch();
                return;
            }
        }

        if (ObjectManager.Target.GetMove && !FrostShock.TargetHaveBuff && mySettings.UseFrostShock
            && FrostShock.KnownSpell && FrostShock.IsSpellUsable && FrostShock.IsHostileDistanceGood)
        {
            FrostShock.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.GetMove && mySettings.UseEarthbindTotem && EarthTotemReady()
                && EarthbindTotem.KnownSpell && EarthbindTotem.IsSpellUsable && EarthbindTotem.IsHostileDistanceGood)
            {
                EarthbindTotem.Launch();
                return;
            }
        }
    }

    private void DPSBurst()
    {
        if (mySettings.UseTrinketOne && TrinketOneTimer.IsReady && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketOneTimer = new Timer(1000*60*2);
        }
        else if (mySettings.UseTrinketTwo && TrinketTwoTimer.IsReady && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketTwoTimer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseBerserking)
            Berserking.Launch();
        else if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseBloodFury)
            BloodFury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (EngineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            EngineeringTimer = new Timer(1000*60);
        }
        else if (UnleashElements.KnownSpell && UnleashElements.IsSpellUsable && UnleashedFury.KnownSpell
                 && mySettings.UseUnleashElements && UnleashElements.IsHostileDistanceGood)
        {
            UnleashElements.Launch();
            return;
        }
        else if (ElementalBlast.KnownSpell && ElementalBlast.IsSpellUsable
                 && mySettings.UseElementalBlast && ElementalBlast.IsHostileDistanceGood)
        {
            ElementalBlast.Launch();
            return;
        }
        else if (Ascendance.KnownSpell && Ascendance.IsSpellUsable
                 && mySettings.UseAscendance && ObjectManager.Target.GetDistance < 41)
        {
            Ascendance.Launch();
            return;
        }
        else if (FireElementalTotem.KnownSpell && FireElementalTotem.IsSpellUsable
                 && mySettings.UseFireElementalTotem && ObjectManager.Target.GetDistance < 41)
        {
            FireElementalTotem.Launch();
            return;
        }
        else if (StormlashTotem.KnownSpell && AirTotemReady()
                 && mySettings.UseStormlashTotem && ObjectManager.Target.GetDistance < 41)
        {
            if (!StormlashTotem.IsSpellUsable && mySettings.UseCalloftheElements
                && CalloftheElements.KnownSpell && CalloftheElements.IsSpellUsable)
            {
                CalloftheElements.Launch();
                Thread.Sleep(200);
            }

            if (StormlashTotem.IsSpellUsable)
                StormlashTotem.Launch();
            return;
        }
        else if (Bloodlust.KnownSpell && Bloodlust.IsSpellUsable && mySettings.UseBloodlustHeroism
                 && ObjectManager.Target.GetDistance < 41 && !ObjectManager.Me.HaveBuff(57724))
        {
            Bloodlust.Launch();
            return;
        }

        else if (Heroism.KnownSpell && Heroism.IsSpellUsable && mySettings.UseBloodlustHeroism
                 && ObjectManager.Target.GetDistance < 41 && !ObjectManager.Me.HaveBuff(57723))
        {
            Heroism.Launch();
            return;
        }
        else
        {
            if (ElementalMastery.KnownSpell && ElementalMastery.IsSpellUsable
                && !ObjectManager.Me.HaveBuff(2825) && mySettings.UseElementalMastery
                && !ObjectManager.Me.HaveBuff(32182))
            {
                ElementalMastery.Launch();
                return;
            }
        }
    }

    private void DPSCycle()
    {
        if (ObjectManager.Me.ManaPercentage < 80 && Thunderstorm.KnownSpell && Thunderstorm.IsSpellUsable
            && mySettings.UseThunderstorm)
        {
            Thunderstorm.Launch();
            return;
        }
        else if (EarthElementalTotem.KnownSpell && EarthElementalTotem.IsSpellUsable
                 && ObjectManager.GetNumberAttackPlayer() > 3 && mySettings.UseEarthElementalTotem)
        {
            EarthElementalTotem.Launch();
            return;
        }
        else if (Thunderstorm.KnownSpell && Thunderstorm.IsSpellUsable && ObjectManager.Target.GetDistance < 10
                 && ObjectManager.GetNumberAttackPlayer() > 5 && mySettings.UseThunderstorm)
        {
            Thunderstorm.Launch();
            return;
        }
        else if (Earthquake.KnownSpell && Earthquake.IsSpellUsable && Earthquake.IsHostileDistanceGood
                 && ObjectManager.GetNumberAttackPlayer() > 5 && mySettings.UseEarthquake)
        {
            SpellManager.CastSpellByIDAndPosition(61882, ObjectManager.Target.Position);
            return;
        }
        else if (FlameShock.IsSpellUsable && FlameShock.IsHostileDistanceGood && FlameShock.KnownSpell
                 && mySettings.UseFlameShock && (!FlameShock.TargetHaveBuff || FlameShockTimer.IsReady))
        {
            FlameShock.Launch();
            FlameShockTimer = new Timer(1000*27);
            return;
        }
        else if (LavaBurst.KnownSpell && LavaBurst.IsSpellUsable && LavaBurst.IsHostileDistanceGood
                 && mySettings.UseLavaBurst && FlameShock.TargetHaveBuff)
        {
            LavaBurst.Launch();
            return;
        }
        else if (mySettings.UseEarthShock && EarthShock.KnownSpell && EarthShock.IsHostileDistanceGood && EarthShock.IsSpellUsable
                 && (LightningShield.BuffStack > 4 || !mySettings.UseLightningShield || !LightningShield.KnownSpell))
        {
            EarthShock.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 1 && MagmaTotem.KnownSpell
                 && MagmaTotem.IsSpellUsable && mySettings.UseMagmaTotem
                 && !FireElementalTotem.CreatedBySpell)
        {
            MagmaTotem.Launch();
            return;
        }
        else if (SearingTotem.KnownSpell && SearingTotem.IsSpellUsable && mySettings.UseSearingTotem
                 && FireTotemReady() && !SearingTotem.CreatedBySpellInRange(25) &&
                 ObjectManager.Target.GetDistance < 31)
        {
            SearingTotem.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 1 && mySettings.UseChainLightning && ChainLightning.KnownSpell
                 && ChainLightning.IsHostileDistanceGood && ChainLightning.IsSpellUsable 
                 && (LightningShield.BuffStack < 6 || !mySettings.UseLightningShield || !LightningShield.KnownSpell))
        {
            if (AncestralSwiftness.KnownSpell && AncestralSwiftness.IsSpellUsable
                && mySettings.UseAncestralSwiftness)
            {
                AncestralSwiftness.Launch();
                Thread.Sleep(200);
            }
            ChainLightning.Launch();
            return;
        }
        else
        {
            if (mySettings.UseLightningBolt && LightningBolt.KnownSpell && LightningBolt.IsHostileDistanceGood && LightningBolt.IsSpellUsable
                && (LightningShield.BuffStack < 6 || !mySettings.UseLightningShield || !LightningShield.KnownSpell))
            {
                if (AncestralSwiftness.KnownSpell && AncestralSwiftness.IsSpellUsable
                    && mySettings.UseAncestralSwiftness)
                {
                    AncestralSwiftness.Launch();
                    Thread.Sleep(200);
                }
                LightningBolt.Launch();
                return;
            }
        }
    }

    private bool FireTotemReady()
    {
        if (FireElementalTotem.CreatedBySpell || MagmaTotem.CreatedBySpell)
            return false;
        return true;
    }

    private bool EarthTotemReady()
    {
        if (EarthbindTotem.CreatedBySpell || EarthElementalTotem.CreatedBySpell
            || StoneBulwarkTotem.CreatedBySpell)
            return false;
        return true;
    }

    private bool WaterTotemReady()
    {
        if (HealingStreamTotem.CreatedBySpell || HealingTideTotem.CreatedBySpell)
            return false;
        return true;
    }

    private bool AirTotemReady()
    {
        if (CapacitorTotem.CreatedBySpell || GroundingTotem.CreatedBySpell
            || StormlashTotem.CreatedBySpell)
            return false;
        return true;
    }

    private bool TotemicRecallReady()
    {
        if (FireElementalTotem.CreatedBySpell)
            return false;
        else if (EarthElementalTotem.CreatedBySpell)
            return false;
        else if (SearingTotem.CreatedBySpell)
            return true;
        else if (FireTotemReady() && EarthTotemReady() && WaterTotemReady() && AirTotemReady())
            return false;
        else
            return true;
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: ShamanElementalSettings

    [Serializable]
    public class ShamanElementalSettings : Settings
    {
        public bool DoAvoidMelee = false;
        public int DoAvoidMeleeDistance = 0;
        public bool UseAlchFlask = true;
        public bool UseAncestralGuidance = true;
        public bool UseAncestralSwiftness = true;
        public bool UseArcaneTorrentForDecast = true;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public bool UseArcaneTorrentForResource = true;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public bool UseAscendance = true;
        public bool UseAstralShift = true;
        public bool UseBerserking = true;
        public bool UseBloodFury = true;
        public bool UseBloodlustHeroism = true;
        public bool UseCalloftheElements = true;
        public bool UseCapacitorTotem = true;
        public bool UseChainHeal = false;
        public bool UseChainLightning = true;
        public bool UseEarthElementalTotem = true;
        public bool UseEarthShock = true;
        public bool UseEarthbindTotem = false;
        public bool UseEarthquake = true;
        public bool UseElementalBlast = true;
        public bool UseElementalMastery = true;
        public bool UseEngGlove = true;
        public bool UseFireElementalTotem = true;
        public bool UseFlameShock = true;
        public bool UseFlametongueWeapon = true;
        public bool UseFrostShock = false;
        public bool UseFrostbrandWeapon = false;
        public bool UseGhostWolf = true;
        public bool UseGiftoftheNaaru = true;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public bool UseGroundingTotem = true;
        public bool UseHealingRain = true;
        public bool UseHealingStreamTotem = true;
        public bool UseHealingSurge = true;
        public bool UseHealingTideTotem = true;
        public bool UseLavaBurst = true;
        public bool UseLifeblood = true;
        public bool UseLightningBolt = true;
        public bool UseLightningShield = true;
        public bool UseLowCombat = true;
        public bool UseMagmaTotem = true;
        public bool UseRockbiterWeapon = false;
        public bool UseSearingTotem = true;
        public bool UseSpiritwalkersGrace = true;
        public bool UseStoneBulwarkTotem = true;
        public bool UseStoneform = true;
        public int UseStoneformAtPercentage = 80;
        public bool UseStormlashTotem = true;
        public bool UseThunderstorm = true;
        public bool UseTotemicProjection = true;
        public bool UseTotemicRecall = true;
        public bool UseTrinketOne = true;
        public bool UseTrinketTwo = true;
        public bool UseUnleashElements = true;
        public bool UseWarStomp = true;
        public int UseWarStompAtPercentage = 80;
        public bool UseWaterShield = true;
        public bool UseWaterWalking = true;
        public bool UseWindShear = true;

        public ShamanElementalSettings()
        {
            ConfigWinForm(new Point(500, 400), "Shaman Elemental Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Shaman Buffs */
            AddControlInWinForm("Use Flametongue Weapon", "UseFlametongueWeapon", "Shaman Buffs");
            AddControlInWinForm("Use Frostbrand Weapon", "UseFrostbrandWeapon", "Shaman Buffs");
            AddControlInWinForm("Use Ghost Wolf", "UseGhostWolf", "Shaman Buffs");
            AddControlInWinForm("Use Lightning Shield", "UseLightningShield", "Shaman Buffs");
            AddControlInWinForm("Use Rockbiter Weapon", "UseRockbiterWeapon", "Shaman Buffs");
            AddControlInWinForm("Use Spiritwalker's Grace", "UseSpiritwalkersGrace", "Shaman Buffs");
            AddControlInWinForm("Use Water Shield", "UseWaterShield", "Shaman Buffs");
            AddControlInWinForm("Use Water Walking", "UseWaterWalking", "Shaman Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Chain Lightning", "UseChainLightning", "Offensive Spell");
            AddControlInWinForm("Use Earthquake", "UseEarthquake", "Offensive Spell");
            AddControlInWinForm("Use Earth Shock", "UseEarthShock", "Offensive Spell");
            AddControlInWinForm("Use Flame Shock", "UseFlameShock", "Offensive Spell");
            AddControlInWinForm("Use Frost Shock", "UseFrostShock", "Offensive Spell");
            AddControlInWinForm("Use Lava Burst", "UseLavaBurst", "Offensive Spell");
            AddControlInWinForm("Use Lightning Bolt", "UseLightningBolt", "Offensive Spell");
            AddControlInWinForm("Use Magma Totem", "UseMagmaTotem", "Offensive Spell");
            AddControlInWinForm("Use Searing Totem", "UseSearingTotem", "Offensive Spell");
            AddControlInWinForm("Use Thunderstorm", "UseThunderstorm", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Ancestral Swiftness", "UseAncestralSwiftness", "Offensive Cooldown");
            AddControlInWinForm("Use Ascendance", "UseAscendance", "Offensive Cooldown");
            AddControlInWinForm("Use Bloodlust / Heroism", "UseBloodlustHeroism", "Offensive Cooldown");
            AddControlInWinForm("Use Call of the Elements", "UseCalloftheElements", "Offensive Cooldown");
            AddControlInWinForm("Use Earth Elemental Totem", "UseEarthElementalTotem", "Offensive Cooldown");
            AddControlInWinForm("Use Elemental Blast", "UseElementalBlast", "Offensive Cooldown");
            AddControlInWinForm("Use Elemental Mastery", "UseElementalMastery", "Offensive Cooldown");
            AddControlInWinForm("Use Fire Elemental Totem", "UseFireElementalTotem", "Offensive Cooldown");
            AddControlInWinForm("Use Stormlash Totem", "UseStormlashTotem", "Offensive Cooldown");
            AddControlInWinForm("Use Totemic Projection", "UseTotemicProjection", "Offensive Cooldown");
            AddControlInWinForm("Use Unleash Elements", "UseUnleashElements", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Astral Shift", "UseAstralShift", "Defensive Cooldown");
            AddControlInWinForm("Use Capacitor Totem", "UseCapacitorTotem", "Defensive Cooldown");
            AddControlInWinForm("Use Earthbind Totem", "UseEarthbindTotem", "Defensive Cooldown");
            AddControlInWinForm("Use Grounding Totem", "UseGroundingTotem", "Defensive Cooldown");
            AddControlInWinForm("Use StoneBulwark Totem", "UseStoneBulwarkTotem", "Defensive Cooldown");
            AddControlInWinForm("Use Wind Shear", "UseWindShear", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Ancestral Guidance", "UseAncestralGuidance", "Healing Spell");
            AddControlInWinForm("Use Chain Heal", "UseChainHeal", "Healing Spell");
            AddControlInWinForm("Use Healing Rain", "UseHealingRain", "Healing Spell");
            AddControlInWinForm("Use Healing Surge", "UseHealingSurge", "Healing Spell");
            AddControlInWinForm("Use Healing Stream Totem", "UseHealingStreamTotem", "Healing Spell");
            AddControlInWinForm("Use Healing Tide Totem", "UsHealingTideTotem", "Healing Spell");
            AddControlInWinForm("Use Totemic Recall", "UseTotemicRecall", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
            AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
            AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
        }

        public static ShamanElementalSettings CurrentSetting { get; set; }

        public static ShamanElementalSettings GetSettings()
        {
            string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Shaman_Elemental.xml";
            if (File.Exists(currentSettingsFile))
            {
                return
                    CurrentSetting = Load<ShamanElementalSettings>(currentSettingsFile);
            }
            else
            {
                return new ShamanElementalSettings();
            }
        }
    }

    #endregion
}

#endregion

#region Priest

public class PriestShadow
{
    private readonly PriestShadowSettings mySettings = PriestShadowSettings.GetSettings();

    #region General Timers & Variables

    private Timer AlchFlaskTimer = new Timer(0);
    private Timer EngineeringTimer = new Timer(0);
    public int LC = 0;
    private Timer OnCD = new Timer(0);
    private Timer TrinketOneTimer = new Timer(0);
    private Timer TrinketTwoTimer = new Timer(0);

    #endregion

    #region Professions and Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell BloodFury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell WarStomp = new Spell("War Stomp");

    #endregion

    #region Priest Buffs

    private readonly Spell InnerFire = new Spell("Inner Fire");
    private readonly Spell InnerWill = new Spell("Inner Will");
    private readonly Spell Levitate = new Spell("Levitate");
    private readonly Spell PowerWordFortitude = new Spell("Power Word: Fortitude");
    private readonly Spell Shadowform = new Spell("Shadowform");
    private Timer LevitateTimer = new Timer(0);

    #endregion

    #region Offensive Spell

    private readonly Spell Cascade = new Spell("Cascade");
    private readonly Spell DevouringPlague = new Spell("Devouring Plague");
    private readonly Spell DivineStar = new Spell("Divine Star");
    private readonly Spell Halo = new Spell("Halo");
    private readonly Spell MindBlast = new Spell("Mind Blast");
    private readonly Spell MindFlay = new Spell("Mind Flay");
    private readonly Spell MindSear = new Spell("Mind Sear");
    private readonly Spell MindSpike = new Spell("Mind Spike");
    private readonly Spell ShadowWordDeath = new Spell("Shadow Word: Death");
    private readonly Spell ShadowWordInsanity = new Spell("Shadow Word: Insanity");
    private readonly Spell ShadowWordPain = new Spell("Shadow Word: Pain");
    private readonly Spell Smite = new Spell("Smite");
    private readonly Spell VampiricTouch = new Spell("Vampiric Touch");
    private Timer DevouringPlagueTimer = new Timer(0);
    private Timer ShadowWordPainTimer = new Timer(0);
    private Timer VampiricTouchTimer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell PowerInfusion = new Spell("Power Infusion");
    private readonly Spell Shadowfiend = new Spell("Shadowfiend");

    #endregion

    #region Defensive Cooldown

    private readonly Spell Dispersion = new Spell("Dispersion");
    private readonly Spell PowerWordShield = new Spell("Power Word: Shield");
    private readonly Spell PsychicHorror = new Spell("Psychic Horror");
    private readonly Spell PsychicScream = new Spell("Psychic Scream");
    private readonly Spell Psyfiend = new Spell("Psyfiend");
    private readonly Spell Silence = new Spell("Silence");
    private readonly Spell SpectralGuise = new Spell("Spectral Guise");
    private readonly Spell VoidTendrils = new Spell("Void Tendrils");

    #endregion

    #region Healing Spell

    private readonly Spell DesperatePrayer = new Spell("Desperate Prayer");
    private readonly Spell FlashHeal = new Spell("Flash Heal");
    private readonly Spell HymnofHope = new Spell("Hymn of Hope");
    private readonly Spell PrayerofMending = new Spell("Prayer of Mending");
    private readonly Spell Renew = new Spell("Renew");
    private readonly Spell VampiricEmbrace = new Spell("Vampiric Embrace");
    private Timer RenewTimer = new Timer(0);

    #endregion

    public PriestShadow()
    {
        Main.range = 30.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDead)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        BuffLevitate();
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget &&
                                (MindSpike.IsHostileDistanceGood || ShadowWordPain.IsHostileDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && mySettings.UseLowCombat)
                            {
                                LC = 1;
                                if (ObjectManager.Target.GetDistance < 41)
                                    LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                if (ObjectManager.Target.GetDistance < 41)
                                    Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void BuffLevitate()
    {
        if (!Fight.InFight && Levitate.KnownSpell && Levitate.IsSpellUsable && mySettings.UseLevitate
            && (!Levitate.HaveBuff || LevitateTimer.IsReady))
        {
            Levitate.Launch();
            LevitateTimer = new Timer(1000*60*9);
        }
    }

    private void Pull()
    {
        if (DevouringPlague.IsSpellUsable && DevouringPlague.KnownSpell && DevouringPlague.IsHostileDistanceGood
            && ObjectManager.Me.ShadowOrbs == 3 && mySettings.UseDevouringPlague)
        {
            DevouringPlague.Launch();
            return;
        }
        else
        {
            if (ShadowWordPain.IsSpellUsable && ShadowWordPain.KnownSpell && ShadowWordPain.IsHostileDistanceGood
                && mySettings.UseShadowWordPain)
            {
                ShadowWordPain.Launch();
                ShadowWordPainTimer = new Timer(1000*14);
                return;
            }
        }
    }

    private void LowCombat()
    {
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        Heal();
        DefenseCycle();
        Buff();

        if (DevouringPlague.IsSpellUsable && DevouringPlague.KnownSpell && DevouringPlague.IsHostileDistanceGood
            && ObjectManager.Me.ShadowOrbs == 3 && mySettings.UseDevouringPlague)
        {
            DevouringPlague.Launch();
            return;
        }
        else if (MindSpike.KnownSpell && MindSpike.IsSpellUsable && MindSpike.IsHostileDistanceGood
                 && mySettings.UseMindSpike)
        {
            MindSpike.Launch();
            if (ObjectManager.Target.HealthPercent < 50 && ObjectManager.Target.HealthPercent > 0)
            {
                MindSpike.Launch();
                return;
            }
            return;
        }
        else
        {
            if (MindSear.KnownSpell && MindSear.IsSpellUsable && MindSear.IsHostileDistanceGood
                && mySettings.UseMindSear)
            {
                MindSear.Launch();
                return;
            }
        }
    }

    private void Combat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        if (OnCD.IsReady)
            DefenseCycle();
        DPSCycle();
        Heal();
        Decast();
        DPSCycle();
        DPSBurst();
        DPSCycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (PowerWordFortitude.KnownSpell && PowerWordFortitude.IsSpellUsable &&
            !PowerWordFortitude.HaveBuff && mySettings.UsePowerWordFortitude)
        {
            PowerWordFortitude.Launch();
            return;
        }
        else if (InnerFire.KnownSpell && InnerFire.IsSpellUsable && !InnerFire.HaveBuff
                 && mySettings.UseInnerFire)
        {
            InnerFire.Launch();
            return;
        }
        else if (InnerWill.KnownSpell && InnerWill.IsSpellUsable && !InnerWill.HaveBuff
                 && !mySettings.UseInnerFire && mySettings.UseInnerWill)
        {
            InnerWill.Launch();
            return;
        }
        else if (AlchFlaskTimer.IsReady && mySettings.UseAlchFlask
                 && ItemsManager.GetItemCountByIdLUA(75525) == 1)
        {
            Logging.WriteFight("Use Alchi Flask");
            Lua.RunMacroText("/use item:75525");
            AlchFlaskTimer = new Timer(1000*60*60*2);
        }
        else
        {
            if (!Shadowform.HaveBuff && Shadowform.KnownSpell && Shadowform.IsSpellUsable
                && mySettings.UseShadowform)
            {
                Shadowform.Launch();
                return;
            }
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            var maxTimeTimer = new Timer(1000*2);
            MovementsAction.MoveBackward(true);
            while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                Thread.Sleep(300);
            MovementsAction.MoveBackward(false);
            if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
            {
                MovementsAction.MoveForward(true);
                Thread.Sleep(1000);
                MovementsAction.MoveForward(false);
                MovementManager.Face(ObjectManager.Target.Position);
            }
        }
    }

    private void DefenseCycle()
    {
        if (ObjectManager.Me.HealthPercent <= mySettings.UsePsychicScreamAtPercentage && PsychicScream.IsSpellUsable &&
            PsychicScream.KnownSpell
            && mySettings.UsePsychicScream)
        {
            PsychicScream.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseDispersionHealthAtPercentage && Dispersion.KnownSpell &&
                 Dispersion.IsSpellUsable
                 && mySettings.UseDispersionHealth)
        {
            if (Renew.KnownSpell && Renew.IsSpellUsable && mySettings.UseRenew)
            {
                Renew.Launch();
                Thread.Sleep(1500);
            }
            Dispersion.Launch();
            OnCD = new Timer(1000*6);
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() >= 2 &&
                 ObjectManager.Me.HealthPercent <= mySettings.UseVoidTendrilsAtPercentage &&
                 VoidTendrils.IsSpellUsable && VoidTendrils.KnownSpell && mySettings.UseVoidTendrils)
        {
            VoidTendrils.Launch();
            OnCD = new Timer(1000*10);
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() >= 2 &&
                 ObjectManager.Me.HealthPercent <= mySettings.UsePsyfiendAtPercentage &&
                 Psyfiend.IsSpellUsable && Psyfiend.KnownSpell && mySettings.UsePsyfiend)
        {
            Psyfiend.Launch();
            OnCD = new Timer(1000*10);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseSpectralGuiseAtPercentage &&
                 SpectralGuise.IsSpellUsable && SpectralGuise.KnownSpell
                 && mySettings.UseSpectralGuise)
        {
            if (Renew.KnownSpell && Renew.IsSpellUsable && mySettings.UseRenew)
            {
                Renew.Launch();
                Thread.Sleep(1500);
            }
            SpectralGuise.Launch();
            OnCD = new Timer(1000*3);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseStoneformAtPercentage &&
                 Stoneform.IsSpellUsable && Stoneform.KnownSpell
                 && mySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent <= mySettings.UseWarStompAtPercentage &&
                WarStomp.IsSpellUsable && WarStomp.KnownSpell
                && mySettings.UseWarStomp)
            {
                WarStomp.Launch();
                OnCD = new Timer(1000*2);
                return;
            }
        }
    }

    private void Heal()
    {
        if (mySettings.UseArcaneTorrentForResource && ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable 
            && ObjectManager.Me.ManaPercentage <= mySettings.UseArcaneTorrentForResourceAtPercentage)
        {
            ArcaneTorrent.Launch();
            return;
        }

        if (ObjectManager.Me.HealthPercent <= mySettings.UseFlashHealNonCombatAtPercentage && !Fight.InFight &&
            ObjectManager.GetNumberAttackPlayer() == 0
            && FlashHeal.KnownSpell && FlashHeal.IsSpellUsable && mySettings.UseFlashHealNonCombat)
        {
            FlashHeal.Launch(false);
            return;
        }
        else if (!Fight.InFight && ObjectManager.Me.ManaPercentage <= mySettings.UseHymnofHopeAtPercentage &&
                 HymnofHope.KnownSpell
                 && HymnofHope.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() == 0 && mySettings.UseHymnofHope)
        {
            HymnofHope.Launch(false);
            return;
        }
        else if (!Fight.InFight && ObjectManager.Me.ManaPercentage <= mySettings.UseDispersionManaAtPercentage &&
                 ObjectManager.GetNumberAttackPlayer() == 0
                 && Dispersion.KnownSpell && Dispersion.IsSpellUsable && mySettings.UseDispersionMana)
        {
            Dispersion.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseDesperatePrayerAtPercentage &&
                 DesperatePrayer.KnownSpell && DesperatePrayer.IsSpellUsable
                 && mySettings.UseDesperatePrayer)
        {
            DesperatePrayer.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseFlashHealInCombatAtPercentage &&
                 FlashHeal.KnownSpell && FlashHeal.IsSpellUsable
                 && mySettings.UseFlashHealInCombat)
        {
            FlashHeal.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseGiftoftheNaaruAtPercentage &&
                 GiftoftheNaaru.IsSpellUsable && GiftoftheNaaru.KnownSpell
                 && mySettings.UseGiftoftheNaaru)
        {
            GiftoftheNaaru.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseVampiricEmbraceAtPercentage &&
                 VampiricEmbrace.IsSpellUsable && VampiricEmbrace.KnownSpell
                 && mySettings.UseVampiricEmbrace)
        {
            VampiricEmbrace.Launch();
            return;
        }
        else if (PowerWordShield.KnownSpell && PowerWordShield.IsSpellUsable
                 && !PowerWordShield.HaveBuff && mySettings.UsePowerWordShield
                 && !ObjectManager.Me.HaveBuff(6788) &&
                 ObjectManager.Me.HealthPercent <= mySettings.UsePowerWordShieldAtPercentage
                 && (ObjectManager.GetNumberAttackPlayer() > 0 || ObjectManager.Me.GetMove))
        {
            PowerWordShield.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UsePrayerofMendingAtPercentage &&
                 PrayerofMending.KnownSpell && PrayerofMending.IsSpellUsable
                 && mySettings.UsePrayerofMending)
        {
            PrayerofMending.Launch();
            return;
        }
        else
        {
            if (Renew.KnownSpell && Renew.IsSpellUsable && !Renew.HaveBuff &&
                ObjectManager.Me.HealthPercent <= mySettings.UseRenewAtPercentage &&
                mySettings.UseRenew)
            {
                Renew.Launch();
                return;
            }
        }
    }

    private void Decast()
    {
        if (mySettings.UseArcaneTorrentForDecast && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8 && ArcaneTorrent.IsSpellUsable
            && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
            && ObjectManager.Me.HealthPercent <= mySettings.UseArcaneTorrentForDecastAtPercentage)
        {
            ArcaneTorrent.Launch();
            return;
        }

        if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && mySettings.UseSilence
            && Silence.KnownSpell && Silence.IsSpellUsable && Silence.IsHostileDistanceGood
            && ObjectManager.Target.HealthPercent <= mySettings.UseSilenceAtPercentage)
        {
            Silence.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && mySettings.UsePsychicHorror
                && PsychicHorror.KnownSpell && PsychicHorror.IsSpellUsable && PsychicHorror.IsHostileDistanceGood
                && ObjectManager.Target.HealthPercent <= mySettings.UsePsychicHorrorAtPercentage)
            {
                PsychicHorror.Launch();
                return;
            }
        }
    }

    private void DPSBurst()
    {
        if (mySettings.UseTrinketOne && TrinketOneTimer.IsReady && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketOneTimer = new Timer(1000*60*2);
        }
        else if (mySettings.UseTrinketTwo && TrinketTwoTimer.IsReady && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketTwoTimer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseBerserking)
            Berserking.Launch();
        else if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseBloodFury)
            BloodFury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (EngineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            EngineeringTimer = new Timer(1000*60);
        }
        else if (PowerInfusion.IsSpellUsable && PowerInfusion.KnownSpell
                 && mySettings.UsePowerInfusion && ObjectManager.Target.GetDistance < 41)
        {
            PowerInfusion.Launch();
            return;
        }
        else
        {
            if (Shadowfiend.IsSpellUsable && Shadowfiend.KnownSpell && Shadowfiend.IsHostileDistanceGood
                && mySettings.UseShadowfiend)
            {
                Shadowfiend.Launch();
                return;
            }
        }
    }

    private void DPSCycle()
    {
        if (ObjectManager.Me.ManaPercentage <= mySettings.UseArcaneTorrentForResourceAtPercentage && ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable
            && mySettings.UseArcaneTorrentForResource)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 2 && Cascade.IsSpellUsable && Cascade.KnownSpell
                 && Cascade.IsHostileDistanceGood && mySettings.UseCascade)
        {
            Cascade.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 2 && DivineStar.IsSpellUsable && DivineStar.KnownSpell
                 && DivineStar.IsHostileDistanceGood && mySettings.UseDivineStar)
        {
            DivineStar.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 2 && Halo.IsSpellUsable && Halo.KnownSpell
                 && Halo.IsHostileDistanceGood && mySettings.UseHalo)
        {
            Halo.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 4 && MindSear.IsSpellUsable && MindSear.KnownSpell
                 && MindSear.IsHostileDistanceGood && !ObjectManager.Me.IsCast && mySettings.UseMindSear)
        {
            MindSear.Launch();
            return;
        }
        else if (ShadowWordDeath.IsSpellUsable && ShadowWordDeath.IsHostileDistanceGood && ShadowWordDeath.KnownSpell
                 && ObjectManager.Target.HealthPercent < 20 && mySettings.UseShadowWordDeath)
        {
            ShadowWordDeath.Launch();
            return;
        }
        else if (ShadowWordPain.KnownSpell && ShadowWordPain.IsSpellUsable
                 && ShadowWordPain.IsHostileDistanceGood && mySettings.UseShadowWordPain
                 && (!ShadowWordPain.TargetHaveBuff || ShadowWordPainTimer.IsReady))
        {
            ShadowWordPain.Launch();
            ShadowWordPainTimer = new Timer(1000*14);
            return;
        }
        else if (ShadowWordInsanity.KnownSpell && ShadowWordInsanity.IsHostileDistanceGood
                 && ShadowWordInsanity.IsSpellUsable && mySettings.UseShadowWordInsanity)
        {
            ShadowWordInsanity.Launch();
            ShadowWordPainTimer = new Timer(0);
            return;
        }
        else if (VampiricTouch.KnownSpell && VampiricTouch.IsSpellUsable
                 && VampiricTouch.IsHostileDistanceGood && mySettings.UseVampiricTouch
                 && (!VampiricTouch.TargetHaveBuff || VampiricTouchTimer.IsReady))
        {
            VampiricTouch.Launch();
            VampiricTouchTimer = new Timer(1000*11);
            return;
        }
        else if (MindSpike.IsSpellUsable && MindSpike.IsHostileDistanceGood && MindSpike.KnownSpell &&
                 ObjectManager.Me.HaveBuff(87160) && mySettings.UseMindSpike)
        {
            MindSpike.Launch();
            return;
        }
        else if (DevouringPlague.KnownSpell && DevouringPlague.IsSpellUsable && DevouringPlague.IsHostileDistanceGood &&
                 ObjectManager.Me.ShadowOrbs == 3 && mySettings.UseDevouringPlague
                 && (!DevouringPlague.TargetHaveBuff || DevouringPlagueTimer.IsReady))
        {
            DevouringPlague.Launch();
            DevouringPlagueTimer = new Timer(1000*3);
            return;
        }
        else if (MindBlast.KnownSpell && MindBlast.IsSpellUsable && MindBlast.IsHostileDistanceGood
                 && ObjectManager.Me.ShadowOrbs < 3 && mySettings.UseMindBlast)
        {
            MindBlast.Launch();
            return;
        }
        else if (mySettings.UseMindFlay && MindFlay.KnownSpell && MindFlay.IsHostileDistanceGood && MindFlay.IsSpellUsable && !ObjectManager.Me.IsCast
                 && (ShadowWordPain.TargetHaveBuff || !mySettings.UseShadowWordPain || !ShadowWordPain.KnownSpell) &&
                 (VampiricTouch.TargetHaveBuff || !mySettings.UseVampiricTouch || !VampiricTouch.KnownSpell)
                 && !ObjectManager.Me.HaveBuff(87160) && ObjectManager.GetNumberAttackPlayer() < 5
                 && ObjectManager.Me.ShadowOrbs != 3)
        {
            MindFlay.Launch();
            return;
        }
        // Blizzard API Calls for Mind Flay using Smite Function
        else if (mySettings.UseMindFlay && Smite.KnownSpell && Smite.IsHostileDistanceGood && Smite.IsSpellUsable && !ObjectManager.Me.IsCast
                 && (ShadowWordPain.TargetHaveBuff || !mySettings.UseShadowWordPain || !ShadowWordPain.KnownSpell) &&
                 (VampiricTouch.TargetHaveBuff || !mySettings.UseVampiricTouch || !VampiricTouch.KnownSpell)
                 && !ObjectManager.Me.HaveBuff(87160) && ObjectManager.GetNumberAttackPlayer() < 5
                 && ObjectManager.Me.ShadowOrbs != 3)
        {
            Smite.Launch();
            return;
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: PriestShadowSettings

    [Serializable]
    public class PriestShadowSettings : Settings
    {
        public bool DoAvoidMelee = false;
        public int DoAvoidMeleeDistance = 0;
        public bool UseAlchFlask = true;
        public bool UseArcaneTorrentForDecast = true;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public bool UseArcaneTorrentForResource = true;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public bool UseBerserking = true;
        public bool UseBloodFury = true;
        public bool UseCascade = true;
        public bool UseDesperatePrayer = true;
        public int UseDesperatePrayerAtPercentage = 65;
        public bool UseDevouringPlague = true;
        public bool UseDispersionHealth = true;
        public int UseDispersionHealthAtPercentage = 20;
        public bool UseDispersionMana = true;
        public int UseDispersionManaAtPercentage = 60;
        public bool UseDivineStar = true;
        public bool UseEngGlove = true;
        public bool UseFlashHealInCombat = true;
        public int UseFlashHealInCombatAtPercentage = 60;
        public bool UseFlashHealNonCombat = true;
        public int UseFlashHealNonCombatAtPercentage = 95;
        public bool UseGiftoftheNaaru = true;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public bool UseHalo = true;
        public bool UseHymnofHope = true;
        public int UseHymnofHopeAtPercentage = 40;
        public bool UseInnerFire = true;
        public bool UseInnerWill = false;
        public bool UseLevitate = false;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMindBlast = true;
        public bool UseMindFlay = true;
        public bool UseMindSear = true;
        public bool UseMindSpike = true;
        public bool UsePowerInfusion = true;
        public bool UsePowerWordFortitude = true;
        public bool UsePowerWordShield = true;
        public int UsePowerWordShieldAtPercentage = 100;
        public bool UsePrayerofMending = true;
        public int UsePrayerofMendingAtPercentage = 50;
        public bool UsePsychicHorror = true;
        public int UsePsychicHorrorAtPercentage = 100;
        public bool UsePsychicScream = true;
        public int UsePsychicScreamAtPercentage = 20;
        public bool UsePsyfiend = true;
        public int UsePsyfiendAtPercentage = 35;
        public bool UseRenew = true;
        public int UseRenewAtPercentage = 90;
        public bool UseShadowWordDeath = true;
        public bool UseShadowWordInsanity = true;
        public bool UseShadowWordPain = true;
        public bool UseShadowfiend = true;
        public bool UseShadowform = true;
        public bool UseSilence = true;
        public int UseSilenceAtPercentage = 100;
        public bool UseSpectralGuise = true;
        public int UseSpectralGuiseAtPercentage = 70;
        public bool UseStoneform = true;
        public int UseStoneformAtPercentage = 80;
        public bool UseTrinketOne = true;
        public bool UseTrinketTwo = true;
        public bool UseVampiricEmbrace = true;
        public int UseVampiricEmbraceAtPercentage = 80;
        public bool UseVampiricTouch = true;
        public bool UseVoidTendrils = true;
        public int UseVoidTendrilsAtPercentage = 35;
        public bool UseWarStomp = true;
        public int UseWarStompAtPercentage = 80;

        public PriestShadowSettings()
        {
            ConfigWinForm(new Point(500, 400), "Shadow Priest Settings");
            /* Professions and Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions and Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions and Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions and Racials", "AtPercentage");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions and Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions and Racials", "AtPercentage");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions and Racials", "AtPercentage");
            /* Priest Buffs */
            AddControlInWinForm("Use Inner Fire", "UseInnerFire", "Priest Buffs");
            AddControlInWinForm("Use Inner Will", "UseInnerWill", "Priest Buffs");
            AddControlInWinForm("Use Levitate", "UseLevitate", "Priest Buffs");
            AddControlInWinForm("Use Power Word: Fortitude", "UsePowerWordFortitude", "Priest Buffs");
            AddControlInWinForm("Use Shadowform", "UseShadowform", "Priest Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Cascade", "UseCascade", "Offensive Spell");
            AddControlInWinForm("Use Devouring Plague", "UseDevoringPlague", "Offensive Spell");
            AddControlInWinForm("Use DivineStar", "UseDivineStar", "Offensive Spell");
            AddControlInWinForm("Use Halo", "UseHalo", "Offensive Spell");
            AddControlInWinForm("Use Mind Blast", "UseMindBlast", "Offensive Spell");
            AddControlInWinForm("Use Mind Flay", "UseMindFlay", "Offensive Spell");
            AddControlInWinForm("Use Mind Sear", "UseMindSear", "Offensive Spell");
            AddControlInWinForm("Use Mind Spike", "UseMindSpike", "Offensive Spell");
            AddControlInWinForm("Use Shadow Word: Death", "UseShadowWordDeath", "Offensive Spell");
            AddControlInWinForm("Use Shadow Word: Insanity", "UseShadowWordInsanity", "Offensive Spell");
            AddControlInWinForm("Use Shadow Word: Pain", "UseShadowWordPain", "Offensive Spell");
            AddControlInWinForm("Use Vampiric Touch", "UseVampiricTouch", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Power Infusion", "UsePowerInfusion", "Offensive Cooldown");
            AddControlInWinForm("Use Shadowfiend", "UseShadowfiend", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Dispersion when health low", "UseDispersionHealth", "Defensive Cooldown",
                                "AtPercentage");
            AddControlInWinForm("Use Dispersion when mana low", "UseDispersionMana", "Defensive Cooldown",
                                "AtPercentage");
            AddControlInWinForm("Use Power Word: Shield", "UsePowerWordShield", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Psychic Horror", "UsePsychicHorror", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Psychic Scream", "UsePsychicScream", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Psyfiend", "UsePsyfiend", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Silence", "UseSilence", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Spectral Guise", "UseSpectralGuise", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Void Tendrils", "UseVoidTendrils", "Defensive Cooldown", "AtPercentage");
            /* Healing Spell */
            AddControlInWinForm("Use Desperate Prayer", "UseDesperatePrayer", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Flash Heal for Regeneration after combat", "UseFlashHealNonCombat", "Healing Spell",
                                "AtPercentage");
            AddControlInWinForm("Use Flash Heal during combat", "UseFlashHealInCombat", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Hymn of Hope", "UseHymnofHope", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Prayer of Mending", "UsePrayerofMending", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Renew", "UseRenew", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Vampiric Embrace", "UseVampiricEmbrace", "Healing Spell", "AtPercentage");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
            AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
            AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
        }

        public static PriestShadowSettings CurrentSetting { get; set; }

        public static PriestShadowSettings GetSettings()
        {
            string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Priest_Shadow.xml";
            if (File.Exists(currentSettingsFile))
            {
                return
                    CurrentSetting = Load<PriestShadowSettings>(currentSettingsFile);
            }
            else
            {
                return new PriestShadowSettings();
            }
        }
    }

    #endregion
}

public class PriestDiscipline
{
    private readonly PriestDisciplineSettings mySettings = PriestDisciplineSettings.GetSettings();

    #region General Timers & Variables

    private Timer AlchFlaskTimer = new Timer(0);
    private Timer EngineeringTimer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer TrinketOneTimer = new Timer(0);
    private Timer TrinketTwoTimer = new Timer(0);

    #endregion

    #region Professions and Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell BloodFury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell WarStomp = new Spell("War Stomp");

    #endregion

    #region Priest Buffs

    private readonly Spell InnerFire = new Spell("Inner Fire");
    private readonly Spell InnerWill = new Spell("Inner Will");
    private readonly Spell Levitate = new Spell("Levitate");
    private readonly Spell PowerWordFortitude = new Spell("Power Word: Fortitude");
    private Timer LevitateTimer = new Timer(0);

    #endregion

    #region Offensive Spell

    private readonly Spell Cascade = new Spell("Cascade");
    private readonly Spell DivineStar = new Spell("Divine Star");
    private readonly Spell Halo = new Spell("Halo");
    private readonly Spell MindSear = new Spell("Mind Sear");
    private readonly Spell PowerWordSolace = new Spell("Power Word: Solace");
    private readonly Spell ShadowWordDeath = new Spell("Shadow Word: Death");
    private readonly Spell ShadowWordPain = new Spell("Shadow Word: Pain");
    private readonly Spell Smite = new Spell("Smite");
    private Timer ShadowWordPainTimer = new Timer(0);

    #endregion

    #region Healing Cooldown

    private readonly Spell Archangel = new Spell("Archangel");
    private readonly Spell InnerFocus = new Spell("Inner Focus");
    private readonly Spell PowerInfusion = new Spell("Power Infusion");
    private readonly Spell Shadowfiend = new Spell("Shadowfiend");

    #endregion

    #region Defensive Cooldown

    private readonly Spell PainSuppression = new Spell("Pain Suppression");
    private readonly Spell PowerWordBarrier = new Spell("Power Word: Barrier");
    private readonly Spell PowerWordShield = new Spell("Power Word: Shield");
    private readonly Spell PsychicScream = new Spell("Psychic Scream");
    private readonly Spell Psyfiend = new Spell("Psyfiend");
    private readonly Spell SpectralGuise = new Spell("Spectral Guise");
    private readonly Spell VoidTendrils = new Spell("Void Tendrils");

    #endregion

    #region Healing Spell

    private readonly Spell DesperatePrayer = new Spell("Desperate Prayer");
    private readonly Spell FlashHeal = new Spell("Flash Heal");
    private readonly Spell GreaterHeal = new Spell("Greater Heal");
    private readonly Spell HealSpell = new Spell("Heal");
    private readonly Spell HolyFire = new Spell("Holy Fire");
    private readonly Spell HymnofHope = new Spell("Hymn of Hope");
    private readonly Spell Penance = new Spell("Penance");
    private readonly Spell PrayerofHealing = new Spell("Prayer of Healing");
    private readonly Spell PrayerofMending = new Spell("Prayer of Mending");
    private readonly Spell Renew = new Spell("Renew");
    private readonly Spell SpiritShell = new Spell("Spirit Shell");
    private Timer RenewTimer = new Timer(0);

    #endregion

    public PriestDiscipline()
    {
        Main.range = 30.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDead)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        BuffLevitate();
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget &&
                                (HolyFire.IsHostileDistanceGood || ShadowWordPain.IsHostileDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }
                            else
                            {
                                if (ObjectManager.Target.GetDistance < 41)
                                    Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void BuffLevitate()
    {
        if (!Fight.InFight && Levitate.KnownSpell && Levitate.IsSpellUsable && mySettings.UseLevitate
            && (!Levitate.HaveBuff || LevitateTimer.IsReady))
        {
            Levitate.Launch();
            LevitateTimer = new Timer(1000*60*9);
        }
    }

    private void Pull()
    {
        if (HolyFire.IsSpellUsable && HolyFire.KnownSpell && HolyFire.IsHostileDistanceGood
            && mySettings.UseHolyFire)
        {
            HolyFire.Launch();
            return;
        }
        else
        {
            if (ShadowWordPain.IsSpellUsable && ShadowWordPain.KnownSpell && ShadowWordPain.IsHostileDistanceGood
                && mySettings.UseShadowWordPain)
            {
                ShadowWordPain.Launch();
                ShadowWordPainTimer = new Timer(1000*14);
                return;
            }
        }
    }

    private void Combat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        if (OnCD.IsReady)
            DefenseCycle();
        DPSCycle();
        Heal();
        Decast();
        DPSCycle();
        HealingBurst();
        DPSCycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (PowerWordFortitude.KnownSpell && PowerWordFortitude.IsSpellUsable &&
            !PowerWordFortitude.HaveBuff && mySettings.UsePowerWordFortitude)
        {
            PowerWordFortitude.Launch();
            return;
        }
        else if (InnerFire.KnownSpell && InnerFire.IsSpellUsable && !InnerFire.HaveBuff
                 && mySettings.UseInnerFire)
        {
            InnerFire.Launch();
            return;
        }
        else if (InnerWill.KnownSpell && InnerWill.IsSpellUsable && !InnerWill.HaveBuff
                 && !mySettings.UseInnerFire && mySettings.UseInnerWill)
        {
            InnerWill.Launch();
            return;
        }
        else
        {
            if (AlchFlaskTimer.IsReady && mySettings.UseAlchFlask
                && ItemsManager.GetItemCountByIdLUA(75525) == 1)
            {
                Logging.WriteFight("Use Alchi Flask");
                Lua.RunMacroText("/use item:75525");
                AlchFlaskTimer = new Timer(1000*60*60*2);
            }
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            var maxTimeTimer = new Timer(1000*2);
            MovementsAction.MoveBackward(true);
            while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                Thread.Sleep(300);
            MovementsAction.MoveBackward(false);
            if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
            {
                MovementsAction.MoveForward(true);
                Thread.Sleep(1000);
                MovementsAction.MoveForward(false);
                MovementManager.Face(ObjectManager.Target.Position);
            }
        }
    }

    private void DefenseCycle()
    {
        if (ObjectManager.Me.HealthPercent <= mySettings.UsePsychicScreamAtPercentage && PsychicScream.IsSpellUsable &&
            PsychicScream.KnownSpell
            && mySettings.UsePsychicScream)
        {
            PsychicScream.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() >= 2 &&
                 ObjectManager.Me.HealthPercent <= mySettings.UseVoidTendrilsAtPercentage &&
                 VoidTendrils.IsSpellUsable && VoidTendrils.KnownSpell && mySettings.UseVoidTendrils)
        {
            VoidTendrils.Launch();
            OnCD = new Timer(1000*10);
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() >= 2 &&
                 ObjectManager.Me.HealthPercent <= mySettings.UsePsyfiendAtPercentage &&
                 Psyfiend.IsSpellUsable && Psyfiend.KnownSpell && mySettings.UsePsyfiend)
        {
            Psyfiend.Launch();
            OnCD = new Timer(1000*10);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseSpectralGuiseAtPercentage &&
                 SpectralGuise.IsSpellUsable && SpectralGuise.KnownSpell
                 && mySettings.UseSpectralGuise)
        {
            if (Renew.KnownSpell && Renew.IsSpellUsable && mySettings.UseRenew)
            {
                Renew.Launch();
                Thread.Sleep(1500);
            }
            SpectralGuise.Launch();
            OnCD = new Timer(1000*3);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UsePowerWordBarrierAtPercentage &&
                 PowerWordBarrier.IsSpellUsable && PowerWordBarrier.KnownSpell
                 && mySettings.UsePowerWordBarrier)
        {
            SpellManager.CastSpellByIDAndPosition(62618, ObjectManager.Me.Position);
            OnCD = new Timer(1000*10);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UsePainSuppressionAtPercentage &&
                 PainSuppression.IsSpellUsable && PainSuppression.KnownSpell
                 && mySettings.UsePainSuppression)
        {
            PainSuppression.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseStoneformAtPercentage &&
                 Stoneform.IsSpellUsable && Stoneform.KnownSpell
                 && mySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent <= mySettings.UseWarStompAtPercentage &&
                WarStomp.IsSpellUsable && WarStomp.KnownSpell
                && mySettings.UseWarStomp)
            {
                WarStomp.Launch();
                OnCD = new Timer(1000*2);
                return;
            }
        }
    }

    private void Heal()
    {
        if (mySettings.UseArcaneTorrentForResource && ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable 
            && ObjectManager.Me.ManaPercentage <= mySettings.UseArcaneTorrentForResourceAtPercentage)
        {
            ArcaneTorrent.Launch();
            return;
        }

        if (ObjectManager.Me.HealthPercent <= mySettings.UseFlashHealNonCombatAtPercentage && !Fight.InFight &&
            ObjectManager.GetNumberAttackPlayer() == 0
            && FlashHeal.KnownSpell && FlashHeal.IsSpellUsable && mySettings.UseFlashHealNonCombat)
        {
            FlashHeal.Launch(false);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseInnerFocusAtPercentage && InnerFocus.KnownSpell &&
                 InnerFocus.IsSpellUsable
                 && mySettings.UseInnerFocus && !InnerFocus.HaveBuff)
        {
            InnerFocus.Launch();
            return;
        }
        else if (!Fight.InFight && ObjectManager.Me.ManaPercentage <= mySettings.UseHymnofHopeAtPercentage &&
                 HymnofHope.KnownSpell
                 && HymnofHope.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() == 0 &&
                 mySettings.UseHymnofHope)
        {
            HymnofHope.Launch(false);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseDesperatePrayerAtPercentage &&
                 DesperatePrayer.KnownSpell && DesperatePrayer.IsSpellUsable
                 && mySettings.UseDesperatePrayer)
        {
            DesperatePrayer.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseFlashHealInCombatAtPercentage &&
                 FlashHeal.KnownSpell && FlashHeal.IsSpellUsable
                 && mySettings.UseFlashHealInCombat)
        {
            FlashHeal.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseGreaterHealAtPercentage &&
                 GreaterHeal.KnownSpell && GreaterHeal.IsSpellUsable
                 && mySettings.UseGreaterHeal)
        {
            GreaterHeal.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseGiftoftheNaaruAtPercentage &&
                 GiftoftheNaaru.IsSpellUsable && GiftoftheNaaru.KnownSpell
                 && mySettings.UseGiftoftheNaaru)
        {
            GiftoftheNaaru.Launch();
            return;
        }
        else if (PowerWordShield.KnownSpell && PowerWordShield.IsSpellUsable
                 && !PowerWordShield.HaveBuff && mySettings.UsePowerWordShield
                 && !ObjectManager.Me.HaveBuff(6788) &&
                 ObjectManager.Me.HealthPercent <= mySettings.UsePowerWordShieldAtPercentage
                 && (ObjectManager.GetNumberAttackPlayer() > 0 || ObjectManager.Me.GetMove))
        {
            PowerWordShield.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UsePrayerofHealingAtPercentage &&
                 PrayerofHealing.KnownSpell && PrayerofHealing.IsSpellUsable
                 && mySettings.UsePrayerofHealing)
        {
            PrayerofHealing.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UsePrayerofMendingAtPercentage &&
                 PrayerofMending.KnownSpell && PrayerofMending.IsSpellUsable
                 && mySettings.UsePrayerofMending)
        {
            PrayerofMending.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseHealAtPercentage &&
                 HealSpell.KnownSpell && HealSpell.IsSpellUsable
                 && (mySettings.UseHeal || !GreaterHeal.KnownSpell))
        {
            HealSpell.Launch();
            return;
        }
        else
        {
            if (Renew.KnownSpell && Renew.IsSpellUsable && !Renew.HaveBuff &&
                ObjectManager.Me.HealthPercent <= mySettings.UseRenewAtPercentage &&
                mySettings.UseRenew)
            {
                Renew.Launch();
                return;
            }
        }
    }

    private void Decast()
    {
        if (mySettings.UseArcaneTorrentForDecast && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8 && ArcaneTorrent.IsSpellUsable
            && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
            && ObjectManager.Me.HealthPercent <= mySettings.UseArcaneTorrentForDecastAtPercentage)
        {
            ArcaneTorrent.Launch();
            return;
        }
    }

    private void HealingBurst()
    {
        if (mySettings.UseTrinketOne && TrinketOneTimer.IsReady && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketOneTimer = new Timer(1000*60*2);
        }
        else if (mySettings.UseTrinketTwo && TrinketTwoTimer.IsReady && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketTwoTimer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseBerserking)
            Berserking.Launch();
        else if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseBloodFury)
            BloodFury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (EngineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            EngineeringTimer = new Timer(1000*60);
        }
        else if (PowerInfusion.IsSpellUsable && PowerInfusion.KnownSpell
                 && mySettings.UsePowerInfusion && ObjectManager.Target.GetDistance < 41)
        {
            PowerInfusion.Launch();
            return;
        }
        else if (Archangel.IsSpellUsable && Archangel.KnownSpell && ObjectManager.Me.BuffStack(81661) > 4
                 && mySettings.UseArchangel && ObjectManager.Target.GetDistance < 41)
        {
            Archangel.Launch();
            return;
        }
        else if (SpiritShell.IsSpellUsable && SpiritShell.KnownSpell && ObjectManager.Me.HealthPercent > 80
                 && mySettings.UseSpiritShell && ObjectManager.Target.InCombat)
        {
            SpiritShell.Launch();
            return;
        }
        else
        {
            if (Shadowfiend.IsSpellUsable && Shadowfiend.KnownSpell && Shadowfiend.IsHostileDistanceGood
                && mySettings.UseShadowfiend)
            {
                Shadowfiend.Launch();
                return;
            }
        }
    }

    private void DPSCycle()
    {
        if (ObjectManager.Me.ManaPercentage <= mySettings.UseArcaneTorrentForResourceAtPercentage && ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable
            && mySettings.UseArcaneTorrentForResource)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 2 && Cascade.IsSpellUsable && Cascade.KnownSpell
                 && Cascade.IsHostileDistanceGood && mySettings.UseCascade)
        {
            Cascade.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 2 && DivineStar.IsSpellUsable && DivineStar.KnownSpell
                 && DivineStar.IsHostileDistanceGood && mySettings.UseDivineStar)
        {
            DivineStar.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 2 && Halo.IsSpellUsable && Halo.KnownSpell
                 && Halo.IsHostileDistanceGood && mySettings.UseHalo)
        {
            Halo.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 4 && MindSear.IsSpellUsable && MindSear.KnownSpell
                 && MindSear.IsHostileDistanceGood && !ObjectManager.Me.IsCast && mySettings.UseMindSear)
        {
            MindSear.Launch();
            return;
        }
        else if (ShadowWordDeath.IsSpellUsable && ShadowWordDeath.IsHostileDistanceGood && ShadowWordDeath.KnownSpell
                 && ObjectManager.Target.HealthPercent < 20 && mySettings.UseShadowWordDeath)
        {
            ShadowWordDeath.Launch();
            return;
        }
        else if (ShadowWordPain.KnownSpell && ShadowWordPain.IsSpellUsable
                 && ShadowWordPain.IsHostileDistanceGood && mySettings.UseShadowWordPain
                 && (!ShadowWordPain.TargetHaveBuff || ShadowWordPainTimer.IsReady))
        {
            ShadowWordPain.Launch();
            ShadowWordPainTimer = new Timer(1000*14);
            return;
        }
        else if (PowerWordSolace.KnownSpell && PowerWordSolace.IsHostileDistanceGood
                 && PowerWordSolace.IsSpellUsable && mySettings.UsePowerWordSolace
                 && ObjectManager.Me.ManaPercentage < 50)
        {
            PowerWordSolace.Launch();
            return;
        }
        else if (Penance.IsSpellUsable && Penance.IsHostileDistanceGood && Penance.KnownSpell
                 && mySettings.UsePenance)
        {
            Penance.Launch();
            return;
        }
        else if (HolyFire.IsSpellUsable && HolyFire.IsHostileDistanceGood && HolyFire.KnownSpell
                 && mySettings.UseHolyFire)
        {
            HolyFire.Launch();
            return;
        }
        else if (Smite.IsSpellUsable && Smite.KnownSpell && Smite.IsHostileDistanceGood
                 && mySettings.UseSmite && ShadowWordPain.TargetHaveBuff
                 && ObjectManager.GetNumberAttackPlayer() < 5)
        {
            Smite.Launch();
            return;
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: PriestDisciplineSettings

    [Serializable]
    public class PriestDisciplineSettings : Settings
    {
        public bool DoAvoidMelee = false;
        public int DoAvoidMeleeDistance = 0;
        public bool UseAlchFlask = true;
        public bool UseArcaneTorrentForDecast = true;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public bool UseArcaneTorrentForResource = true;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public bool UseArchangel = true;
        public bool UseBerserking = true;
        public bool UseBloodFury = true;
        public bool UseCascade = true;
        public bool UseDesperatePrayer = true;
        public int UseDesperatePrayerAtPercentage = 65;
        public bool UseDivineStar = true;
        public bool UseEngGlove = true;
        public bool UseFlashHealInCombat = true;
        public int UseFlashHealInCombatAtPercentage = 60;
        public bool UseFlashHealNonCombat = true;
        public int UseFlashHealNonCombatAtPercentage = 95;
        public bool UseGiftoftheNaaru = true;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public bool UseGreaterHeal = true;
        public int UseGreaterHealAtPercentage = 70;
        public bool UseHalo = true;
        public bool UseHeal = true;
        public int UseHealAtPercentage = 70;
        public bool UseHolyFire = true;
        public bool UseHymnofHope = true;
        public int UseHymnofHopeAtPercentage = 40;
        public bool UseInnerFire = true;
        public bool UseInnerFocus = true;
        public int UseInnerFocusAtPercentage = 90;
        public bool UseInnerWill = false;
        public bool UseLevitate = false;
        public bool UseLifeblood = true;
        public bool UseMindSear = true;
        public bool UsePainSuppression = true;
        public int UsePainSuppressionAtPercentage = 70;
        public bool UsePenance = true;
        public bool UsePowerInfusion = true;
        public bool UsePowerWordBarrier = true;
        public int UsePowerWordBarrierAtPercentage = 60;
        public bool UsePowerWordFortitude = true;
        public bool UsePowerWordShield = true;
        public int UsePowerWordShieldAtPercentage = 100;
        public bool UsePowerWordSolace = true;
        public bool UsePrayerofHealing = false;
        public int UsePrayerofHealingAtPercentage = 50;
        public bool UsePrayerofMending = true;
        public int UsePrayerofMendingAtPercentage = 50;
        public bool UsePsychicScream = true;
        public int UsePsychicScreamAtPercentage = 20;
        public bool UsePsyfiend = true;
        public int UsePsyfiendAtPercentage = 35;
        public bool UseRenew = true;
        public int UseRenewAtPercentage = 90;
        public bool UseShadowWordDeath = true;
        public bool UseShadowWordPain = true;
        public bool UseShadowfiend = true;
        public bool UseSmite = true;
        public bool UseSpectralGuise = true;
        public int UseSpectralGuiseAtPercentage = 70;
        public bool UseSpiritShell = true;
        public bool UseStoneform = true;
        public int UseStoneformAtPercentage = 80;
        public bool UseTrinketOne = true;
        public bool UseTrinketTwo = true;
        public bool UseVoidTendrils = true;
        public int UseVoidTendrilsAtPercentage = 35;
        public bool UseWarStomp = true;
        public int UseWarStompAtPercentage = 80;

        public PriestDisciplineSettings()
        {
            ConfigWinForm(new Point(500, 400), "Discipline Priest Settings");
            /* Professions and Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions and Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions and Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions and Racials", "AtPercentage");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions and Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions and Racials", "AtPercentage");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions and Racials", "AtPercentage");
            /* Priest Buffs */
            AddControlInWinForm("Use Inner Fire", "UseInnerFire", "Priest Buffs");
            AddControlInWinForm("Use Inner Will", "UseInnerWill", "Priest Buffs");
            AddControlInWinForm("Use Levitate", "UseLevitate", "Priest Buffs");
            AddControlInWinForm("Use Power Word: Fortitude", "UsePowerWordFortitude", "Priest Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Cascade", "UseCascade", "Offensive Spell");
            AddControlInWinForm("Use Divine Star", "Use Divine Star", "Offensive Spell");
            AddControlInWinForm("Use Halo", "UseHalo", "Offensive Spell");
            AddControlInWinForm("Use Holy Fire", "UseHolyFire", "Offensive Spell");
            AddControlInWinForm("Use Mind Sear", "UseMindSear", "Offensive Spell");
            AddControlInWinForm("Use Penance", "UsePenance", "Offensive Spell");
            AddControlInWinForm("Use Shadow Word: Death", "UseShadowWordDeath", "Offensive Spell");
            AddControlInWinForm("Use Shadow Word: Pain", "UseShadowWordPain", "Offensive Spell");
            AddControlInWinForm("Use Smite", "UseSmite", "Offensive Spell");
            /* Healing Cooldown */
            AddControlInWinForm("Use Archangel", "UseArchangel", "Healing Cooldown");
            AddControlInWinForm("Use Power Infusion", "UsePowerInfusion", "Healing Cooldown");
            AddControlInWinForm("Use Shadowfiend", "UseShadowfiend", "Healing Cooldown");
            AddControlInWinForm("Use Spirit Shell", "UseSpiritShell", "Healing Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Pain Suppression", "UsePainSuppression", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Power Word: Barrier", "UsePowerWordBarrier", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Power Word: Shield", "UsePowerWordShield", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Psychic Scream", "UsePsychicScream", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Psyfiend", "UsePsyfiend", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Spectral Guise", "UseSpectralGuise", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Void Tendrils", "UseVoidTendrils", "Defensive Cooldown", "AtPercentage");
            /* Healing Spell */
            AddControlInWinForm("Use Desperate Prayer", "UseDesperatePrayer", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Flash Heal for Regeneration after combat", "UseFlashHealNonCombat", "Healing Spell",
                                "AtPercentage");
            AddControlInWinForm("Use Flash Heal during combat", "UseFlashHealInCombat", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Greater Heal", "UseGreaterHeal", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Heal", "UseHeal", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Hymn of Hope", "UseHymnofHope", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Inner Focus", "UseInnerFocus", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Prayer of Mending", "UsePrayerofMending", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Renew", "UseRenew", "Healing Spell", "AtPercentage");
            /* Game Settings */
            AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
            AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
            AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
        }

        public static PriestDisciplineSettings CurrentSetting { get; set; }

        public static PriestDisciplineSettings GetSettings()
        {
            string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Priest_Discipline.xml";
            if (File.Exists(currentSettingsFile))
            {
                return
                    CurrentSetting = Load<PriestDisciplineSettings>(currentSettingsFile);
            }
            else
            {
                return new PriestDisciplineSettings();
            }
        }
    }

    #endregion
}

public class PriestHoly
{
    private readonly PriestHolySettings mySettings = PriestHolySettings.GetSettings();

    #region General Timers & Variables

    private Timer AlchFlaskTimer = new Timer(0);
    private Timer EngineeringTimer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer TrinketOneTimer = new Timer(0);
    private Timer TrinketTwoTimer = new Timer(0);

    #endregion

    #region Professions and Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell BloodFury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell WarStomp = new Spell("War Stomp");

    #endregion

    #region Priest Buffs

    private readonly Spell ChakraChastise = new Spell("Chakra: Chastise");
    private readonly Spell ChakraSanctuary = new Spell("Chakra: Sanctuary");
    private readonly Spell ChakraSerenity = new Spell("Chakra: Serenity");
    private readonly Spell InnerFire = new Spell("Inner Fire");
    private readonly Spell InnerWill = new Spell("Inner Will");
    private readonly Spell Levitate = new Spell("Levitate");
    private readonly Spell PowerWordFortitude = new Spell("Power Word: Fortitude");
    private Timer LevitateTimer = new Timer(0);

    #endregion

    #region Offensive Spell

    private readonly Spell Cascade = new Spell("Cascade");
    private readonly Spell DivineStar = new Spell("Divine Star");
    private readonly Spell Halo = new Spell("Halo");
    private readonly Spell HolyWordChastise = new Spell("Holy Word: Chastise");
    private readonly Spell MindSear = new Spell("Mind Sear");
    private readonly Spell PowerWordSolace = new Spell("Power Word: Solace");
    private readonly Spell ShadowWordDeath = new Spell("Shadow Word: Death");
    private readonly Spell ShadowWordPain = new Spell("Shadow Word: Pain");
    private readonly Spell Smite = new Spell("Smite");
    private Timer ShadowWordPainTimer = new Timer(0);

    #endregion

    #region Healing Cooldown

    private readonly Spell DivineHymn = new Spell("Divine Hymn");
    private readonly Spell LightWell = new Spell("Light Well");
    private readonly Spell PowerInfusion = new Spell("Power Infusion");
    private readonly Spell Shadowfiend = new Spell("Shadowfiend");

    #endregion

    #region Defensive Cooldown

    private readonly Spell GuardianSpirit = new Spell("Guardian Spirit");
    private readonly Spell PowerWordShield = new Spell("Power Word: Shield");
    private readonly Spell PsychicScream = new Spell("Psychic Scream");
    private readonly Spell Psyfiend = new Spell("Psyfiend");
    private readonly Spell SpectralGuise = new Spell("Spectral Guise");
    private readonly Spell VoidTendrils = new Spell("Void Tendrils");

    #endregion

    #region Healing Spell

    private readonly Spell CircleofHealing = new Spell("Circle of Healing");
    private readonly Spell DesperatePrayer = new Spell("Desperate Prayer");
    private readonly Spell FlashHeal = new Spell("Flash Heal");
    private readonly Spell GreaterHeal = new Spell("Greater Heal");
    private readonly Spell HealSpell = new Spell("Heal");
    private readonly Spell HolyFire = new Spell("Holy Fire");
    private readonly Spell HymnofHope = new Spell("Hymn of Hope");
    private readonly Spell PrayerofHealing = new Spell("Prayer of Healing");
    private readonly Spell PrayerofMending = new Spell("Prayer of Mending");
    private readonly Spell Renew = new Spell("Renew");
    private Timer RenewTimer = new Timer(0);

    #endregion

    public PriestHoly()
    {
        Main.range = 30.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDead)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        BuffLevitate();
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget &&
                                (HolyFire.IsHostileDistanceGood || ShadowWordPain.IsHostileDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }
                            else
                            {
                                if (ObjectManager.Target.GetDistance < 41)
                                    Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void BuffLevitate()
    {
        if (!Fight.InFight && Levitate.KnownSpell && Levitate.IsSpellUsable && mySettings.UseLevitate
            && (!Levitate.HaveBuff || LevitateTimer.IsReady))
        {
            Levitate.Launch();
            LevitateTimer = new Timer(1000*60*9);
        }
    }

    private void Pull()
    {
        if (HolyFire.IsSpellUsable && HolyFire.KnownSpell && HolyFire.IsHostileDistanceGood
            && mySettings.UseHolyFire)
        {
            HolyFire.Launch();
            return;
        }
        else
        {
            if (ShadowWordPain.IsSpellUsable && ShadowWordPain.KnownSpell && ShadowWordPain.IsHostileDistanceGood
                && mySettings.UseShadowWordPain)
            {
                ShadowWordPain.Launch();
                ShadowWordPainTimer = new Timer(1000*14);
                return;
            }
        }
    }

    private void Combat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        if (OnCD.IsReady)
            DefenseCycle();
        DPSCycle();
        Heal();
        Decast();
        DPSCycle();
        HealingBurst();
        DPSCycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (PowerWordFortitude.KnownSpell && PowerWordFortitude.IsSpellUsable &&
            !PowerWordFortitude.HaveBuff && mySettings.UsePowerWordFortitude)
        {
            PowerWordFortitude.Launch();
            return;
        }
        else if (InnerFire.KnownSpell && InnerFire.IsSpellUsable && !InnerFire.HaveBuff
                 && mySettings.UseInnerFire)
        {
            InnerFire.Launch();
            return;
        }
        else if (InnerWill.KnownSpell && InnerWill.IsSpellUsable && !InnerWill.HaveBuff
                 && !mySettings.UseInnerFire && mySettings.UseInnerWill)
        {
            InnerWill.Launch();
            return;
        }
        else if (ChakraChastise.KnownSpell && ChakraChastise.IsSpellUsable && !ChakraChastise.HaveBuff
                 && mySettings.UseChakraChastise)
        {
            ChakraChastise.Launch();
            return;
        }
        else if (ChakraSanctuary.KnownSpell && ChakraSanctuary.IsSpellUsable && !ChakraSanctuary.HaveBuff
                 && !mySettings.UseChakraChastise && mySettings.UseChakraSanctuary)
        {
            ChakraSanctuary.Launch();
            return;
        }
        else if (ChakraSerenity.KnownSpell && ChakraSerenity.IsSpellUsable && !ChakraSerenity.HaveBuff
                 && !mySettings.UseChakraChastise && !mySettings.UseChakraSanctuary && mySettings.UseChakraSerenity)
        {
            ChakraSerenity.Launch();
            return;
        }
        else
        {
            if (AlchFlaskTimer.IsReady && mySettings.UseAlchFlask
                && ItemsManager.GetItemCountByIdLUA(75525) == 1)
            {
                Logging.WriteFight("Use Alchi Flask");
                Lua.RunMacroText("/use item:75525");
                AlchFlaskTimer = new Timer(1000*60*60*2);
            }
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            var maxTimeTimer = new Timer(1000*2);
            MovementsAction.MoveBackward(true);
            while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                Thread.Sleep(300);
            MovementsAction.MoveBackward(false);
            if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
            {
                MovementsAction.MoveForward(true);
                Thread.Sleep(1000);
                MovementsAction.MoveForward(false);
                MovementManager.Face(ObjectManager.Target.Position);
            }
        }
    }

    private void DefenseCycle()
    {
        if (ObjectManager.Me.HealthPercent <= mySettings.UsePsychicScreamAtPercentage && PsychicScream.IsSpellUsable &&
            PsychicScream.KnownSpell
            && mySettings.UsePsychicScream)
        {
            PsychicScream.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseGuardianSpiritAtPercentage && GuardianSpirit.KnownSpell &&
                 GuardianSpirit.IsSpellUsable
                 && mySettings.UseGuardianSpirit)
        {
            GuardianSpirit.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() >= 2 &&
                 ObjectManager.Me.HealthPercent <= mySettings.UseVoidTendrilsAtPercentage &&
                 VoidTendrils.IsSpellUsable && VoidTendrils.KnownSpell && mySettings.UseVoidTendrils)
        {
            VoidTendrils.Launch();
            OnCD = new Timer(1000*10);
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() >= 2 &&
                 ObjectManager.Me.HealthPercent <= mySettings.UsePsyfiendAtPercentage &&
                 Psyfiend.IsSpellUsable && Psyfiend.KnownSpell && mySettings.UsePsyfiend)
        {
            Psyfiend.Launch();
            OnCD = new Timer(1000*10);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseSpectralGuiseAtPercentage &&
                 SpectralGuise.IsSpellUsable && SpectralGuise.KnownSpell
                 && mySettings.UseSpectralGuise)
        {
            if (Renew.KnownSpell && Renew.IsSpellUsable && mySettings.UseRenew)
            {
                Renew.Launch();
                Thread.Sleep(1500);
            }
            SpectralGuise.Launch();
            OnCD = new Timer(1000*3);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseStoneformAtPercentage &&
                 Stoneform.IsSpellUsable && Stoneform.KnownSpell
                 && mySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent <= mySettings.UseWarStompAtPercentage &&
                WarStomp.IsSpellUsable && WarStomp.KnownSpell
                && mySettings.UseWarStomp)
            {
                WarStomp.Launch();
                OnCD = new Timer(1000*2);
                return;
            }
        }
    }

    private void Heal()
    {
        if (mySettings.UseArcaneTorrentForResource && ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable 
            && ObjectManager.Me.ManaPercentage <= mySettings.UseArcaneTorrentForResourceAtPercentage)
        {
            ArcaneTorrent.Launch();
            return;
        }

        if (ObjectManager.Me.HealthPercent <= mySettings.UseFlashHealNonCombatAtPercentage && !Fight.InFight &&
            ObjectManager.GetNumberAttackPlayer() == 0
            && FlashHeal.KnownSpell && FlashHeal.IsSpellUsable && mySettings.UseFlashHealNonCombat)
        {
            FlashHeal.Launch(false);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseDivineHymnAtPercentage && DivineHymn.KnownSpell &&
                 DivineHymn.IsSpellUsable
                 && mySettings.UseDivineHymn)
        {
            DivineHymn.Launch();
            return;
        }
        else if (!Fight.InFight && ObjectManager.Me.ManaPercentage <= mySettings.UseHymnofHopeAtPercentage &&
                 HymnofHope.KnownSpell
                 && HymnofHope.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() == 0 &&
                 mySettings.UseHymnofHope)
        {
            HymnofHope.Launch(false);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseDesperatePrayerAtPercentage &&
                 DesperatePrayer.KnownSpell && DesperatePrayer.IsSpellUsable
                 && mySettings.UseDesperatePrayer)
        {
            DesperatePrayer.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseFlashHealInCombatAtPercentage &&
                 FlashHeal.KnownSpell && FlashHeal.IsSpellUsable
                 && mySettings.UseFlashHealInCombat)
        {
            FlashHeal.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseGreaterHealAtPercentage &&
                 GreaterHeal.KnownSpell && GreaterHeal.IsSpellUsable
                 && mySettings.UseGreaterHeal)
        {
            GreaterHeal.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseGiftoftheNaaruAtPercentage &&
                 GiftoftheNaaru.IsSpellUsable && GiftoftheNaaru.KnownSpell
                 && mySettings.UseGiftoftheNaaru)
        {
            GiftoftheNaaru.Launch();
            return;
        }
        else if (PowerWordShield.KnownSpell && PowerWordShield.IsSpellUsable
                 && !PowerWordShield.HaveBuff && mySettings.UsePowerWordShield
                 && !ObjectManager.Me.HaveBuff(6788) &&
                 ObjectManager.Me.HealthPercent <= mySettings.UsePowerWordShieldAtPercentage
                 && (ObjectManager.GetNumberAttackPlayer() > 0 || ObjectManager.Me.GetMove))
        {
            PowerWordShield.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UsePrayerofHealingAtPercentage &&
                 PrayerofHealing.KnownSpell && PrayerofHealing.IsSpellUsable
                 && mySettings.UsePrayerofHealing)
        {
            PrayerofHealing.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseCircleofHealingAtPercentage &&
                 CircleofHealing.KnownSpell && CircleofHealing.IsSpellUsable
                 && mySettings.UseCircleofHealing)
        {
            SpellManager.CastSpellByIDAndPosition(34861, ObjectManager.Me.Position);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <=
                 mySettings.UsePrayerofMendingAtPercentage &&
                 PrayerofMending.KnownSpell && PrayerofMending.IsSpellUsable
                 && mySettings.UsePrayerofMending)
        {
            PrayerofMending.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseHealAtPercentage &&
                 HealSpell.KnownSpell && HealSpell.IsSpellUsable
                 && (mySettings.UseHeal || !GreaterHeal.KnownSpell))
        {
            HealSpell.Launch();
            return;
        }
        else if (LightWell.KnownSpell && LightWell.IsSpellUsable &&
                 mySettings.UseGlyphofLightspring
                 &&
                 ObjectManager.Me.HealthPercent <=
                 mySettings.UseLightWellAtPercentage && mySettings.UseLightWell)
        {
            SpellManager.CastSpellByIDAndPosition(724,
                                                  ObjectManager.Target
                                                               .Position);
            return;
        }
        else
        {
            if (Renew.KnownSpell && Renew.IsSpellUsable && !Renew.HaveBuff &&
                ObjectManager.Me.HealthPercent <=
                mySettings.UseRenewAtPercentage && mySettings.UseRenew)
            {
                Renew.Launch();
                return;
            }
        }
    }

    private void Decast()
    {
        if (mySettings.UseArcaneTorrentForDecast && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8 && ArcaneTorrent.IsSpellUsable
            && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
            && ObjectManager.Me.HealthPercent <= mySettings.UseArcaneTorrentForDecastAtPercentage)
        {
            ArcaneTorrent.Launch();
            return;
        }
    }

    private void HealingBurst()
    {
        if (mySettings.UseTrinketOne && TrinketOneTimer.IsReady && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketOneTimer = new Timer(1000*60*2);
        }
        else if (mySettings.UseTrinketTwo && TrinketTwoTimer.IsReady && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketTwoTimer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseBerserking)
            Berserking.Launch();
        else if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseBloodFury)
            BloodFury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (EngineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            EngineeringTimer = new Timer(1000*60);
        }
        else if (PowerInfusion.IsSpellUsable && PowerInfusion.KnownSpell
                 && mySettings.UsePowerInfusion && ObjectManager.Target.GetDistance < 41)
        {
            PowerInfusion.Launch();
            return;
        }
        else
        {
            if (Shadowfiend.IsSpellUsable && Shadowfiend.KnownSpell && Shadowfiend.IsHostileDistanceGood
                && mySettings.UseShadowfiend)
            {
                Shadowfiend.Launch();
                return;
            }
        }
    }

    private void DPSCycle()
    {
        if (ObjectManager.Me.ManaPercentage <= mySettings.UseArcaneTorrentForResourceAtPercentage && ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable
            && mySettings.UseArcaneTorrentForResource)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 2 && Cascade.IsSpellUsable && Cascade.KnownSpell
                 && Cascade.IsHostileDistanceGood && mySettings.UseCascade)
        {
            Cascade.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 2 && DivineStar.IsSpellUsable && DivineStar.KnownSpell
                 && DivineStar.IsHostileDistanceGood && mySettings.UseDivineStar)
        {
            DivineStar.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 2 && Halo.IsSpellUsable && Halo.KnownSpell
                 && Halo.IsHostileDistanceGood && mySettings.UseHalo)
        {
            Halo.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 4 && MindSear.IsSpellUsable && MindSear.KnownSpell
                 && MindSear.IsHostileDistanceGood && !ObjectManager.Me.IsCast && mySettings.UseMindSear)
        {
            MindSear.Launch();
            return;
        }
        else if (ShadowWordDeath.IsSpellUsable && ShadowWordDeath.IsHostileDistanceGood && ShadowWordDeath.KnownSpell
                 && ObjectManager.Target.HealthPercent < 20 && mySettings.UseShadowWordDeath)
        {
            ShadowWordDeath.Launch();
            return;
        }
        else if (ShadowWordPain.KnownSpell && ShadowWordPain.IsSpellUsable
                 && ShadowWordPain.IsHostileDistanceGood && mySettings.UseShadowWordPain
                 && (!ShadowWordPain.TargetHaveBuff || ShadowWordPainTimer.IsReady))
        {
            ShadowWordPain.Launch();
            ShadowWordPainTimer = new Timer(1000*14);
            return;
        }
        else if (PowerWordSolace.KnownSpell && PowerWordSolace.IsHostileDistanceGood
                 && PowerWordSolace.IsSpellUsable && mySettings.UsePowerWordSolace
                 && ObjectManager.Me.ManaPercentage < 50)
        {
            PowerWordSolace.Launch();
            return;
        }
        else if (HolyWordChastise.IsSpellUsable && HolyWordChastise.IsHostileDistanceGood && HolyWordChastise.KnownSpell
                 && mySettings.UseHolyWordChastise)
        {
            HolyWordChastise.Launch();
            return;
        }
        else if (HolyFire.IsSpellUsable && HolyFire.IsHostileDistanceGood && HolyFire.KnownSpell
                 && mySettings.UseHolyFire)
        {
            HolyFire.Launch();
            return;
        }
        else if (Smite.IsSpellUsable && Smite.KnownSpell && Smite.IsHostileDistanceGood
                 && mySettings.UseSmite && ShadowWordPain.TargetHaveBuff
                 && ObjectManager.GetNumberAttackPlayer() < 5)
        {
            Smite.Launch();
            return;
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: PriestHolySettings

    [Serializable]
    public class PriestHolySettings : Settings
    {
        public bool DoAvoidMelee = false;
        public int DoAvoidMeleeDistance = 0;
        public bool UseAlchFlask = true;
        public bool UseArcaneTorrentForDecast = true;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public bool UseArcaneTorrentForResource = true;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public bool UseArchangel = true;
        public bool UseBerserking = true;
        public bool UseBloodFury = true;
        public bool UseCascade = true;
        public bool UseChakraChastise = true;
        public bool UseChakraSanctuary = false;
        public bool UseChakraSerenity = false;
        public bool UseCircleofHealing = false;
        public int UseCircleofHealingAtPercentage = 50;
        public bool UseDesperatePrayer = true;
        public int UseDesperatePrayerAtPercentage = 65;
        public bool UseDivineHymn = true;
        public int UseDivineHymnAtPercentage = 30;
        public bool UseDivineStar = true;
        public bool UseEngGlove = true;
        public bool UseFlashHealInCombat = true;
        public int UseFlashHealInCombatAtPercentage = 60;
        public bool UseFlashHealNonCombat = true;
        public int UseFlashHealNonCombatAtPercentage = 95;
        public bool UseGiftoftheNaaru = true;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public bool UseGlyphofLightspring = false;
        public bool UseGreaterHeal = true;
        public int UseGreaterHealAtPercentage = 70;
        public bool UseGuardianSpirit = true;
        public int UseGuardianSpiritAtPercentage = 20;
        public bool UseHalo = true;
        public bool UseHeal = true;
        public int UseHealAtPercentage = 70;
        public bool UseHolyFire = true;
        public bool UseHolyWordChastise = true;
        public bool UseHymnofHope = true;
        public int UseHymnofHopeAtPercentage = 40;
        public bool UseInnerFire = true;
        public bool UseInnerWill = false;
        public bool UseLevitate = false;
        public bool UseLifeblood = true;
        public bool UseLightWell = true;
        public int UseLightWellAtPercentage = 95;
        public bool UseMindSear = true;
        public bool UsePowerInfusion = true;
        public bool UsePowerWordFortitude = true;
        public bool UsePowerWordShield = true;
        public int UsePowerWordShieldAtPercentage = 100;
        public bool UsePowerWordSolace = true;
        public bool UsePrayerofHealing = false;
        public int UsePrayerofHealingAtPercentage = 50;
        public bool UsePrayerofMending = true;
        public int UsePrayerofMendingAtPercentage = 50;
        public bool UsePsychicScream = true;
        public int UsePsychicScreamAtPercentage = 20;
        public bool UsePsyfiend = true;
        public int UsePsyfiendAtPercentage = 35;
        public bool UseRenew = true;
        public int UseRenewAtPercentage = 90;
        public bool UseShadowWordDeath = true;
        public bool UseShadowWordPain = true;
        public bool UseShadowfiend = true;
        public bool UseSmite = true;
        public bool UseSpectralGuise = true;
        public int UseSpectralGuiseAtPercentage = 70;
        public bool UseStoneform = true;
        public int UseStoneformAtPercentage = 80;
        public bool UseTrinketOne = true;
        public bool UseTrinketTwo = true;
        public bool UseVoidTendrils = true;
        public int UseVoidTendrilsAtPercentage = 35;
        public bool UseWarStomp = true;
        public int UseWarStompAtPercentage = 80;

        public PriestHolySettings()
        {
            ConfigWinForm(new Point(500, 400), "Holy Priest Settings");
            /* Professions and Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions and Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions and Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions and Racials", "AtPercentage");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions and Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions and Racials", "AtPercentage");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions and Racials", "AtPercentage");
            /* Priest Buffs */
            AddControlInWinForm("Use Chakra: Chastise", "UseChakraChastise", "Priest Buffs");
            AddControlInWinForm("Use Chakra: Sanctuary", "UseChakraSanctuary", "Priest Buffs");
            AddControlInWinForm("Use Chakra: Serenity", "UseChakraSerenity", "Priest Buffs");
            AddControlInWinForm("Use Inner Fire", "UseInnerFire", "Priest Buffs");
            AddControlInWinForm("Use Inner Will", "UseInnerWill", "Priest Buffs");
            AddControlInWinForm("Use Levitate", "UseLevitate", "Priest Buffs");
            AddControlInWinForm("Use Power Word: Fortitude", "UsePowerWordFortitude", "Priest Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Cascade", "UseCascade", "Offensive Spell");
            AddControlInWinForm("Use Divine Star", "Use Divine Star", "Offensive Spell");
            AddControlInWinForm("Use Halo", "UseHalo", "Offensive Spell");
            AddControlInWinForm("Use Holy Fire", "UseHolyFire", "Offensive Spell");
            AddControlInWinForm("Use Holy Word: Chastise", "UseHolyWordChastise", "Offensive Spell");
            AddControlInWinForm("Use Mind Sear", "UseMindSear", "Offensive Spell");
            AddControlInWinForm("Use Shadow Word: Death", "UseShadowWordDeath", "Offensive Spell");
            AddControlInWinForm("Use Shadow Word: Pain", "UseShadowWordPain", "Offensive Spell");
            AddControlInWinForm("Use Smite", "UseSmite", "Offensive Spell");
            /* Healing Cooldown */
            AddControlInWinForm("Use Divine Hymn", "UseDivineHymn", "Healing Cooldown", "AtPercentage");
            AddControlInWinForm("Use Light Well", "UseLightWell", "Healing Cooldown", "AtPercentage");
            AddControlInWinForm("Use Power Infusion", "UsePowerInfusion", "Healing Cooldown");
            AddControlInWinForm("Use Shadowfiend", "UseShadowfiend", "Healing Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Guardian Spirit", "UseGuardianSpirit", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Power Word: Shield", "UsePowerWordShield", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Psychic Scream", "UsePsychicScream", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Psyfiend", "UsePsyfiend", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Spectral Guise", "UseSpectralGuise", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Void Tendrils", "UseVoidTendrils", "Defensive Cooldown", "AtPercentage");
            /* Healing Spell */
            AddControlInWinForm("Use Circle of Healing", "UseCircleofHealing", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Desperate Prayer", "UseDesperatePrayer", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Flash Heal for Regeneration after combat", "UseFlashHealNonCombat", "Healing Spell",
                                "AtPercentage");
            AddControlInWinForm("Use Flash Heal during combat", "UseFlashHealInCombat", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Greater Heal", "UseGreaterHeal", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Heal", "UseHeal", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Hymn of Hope", "UseHymnofHope", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Prayer of Mending", "UsePrayerofMending", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Renew", "UseRenew", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
            AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Use Glyph of Lightspring", "UseGlyphofLightspring", "Game Settings");
            AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
            AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
        }

        public static PriestHolySettings CurrentSetting { get; set; }

        public static PriestHolySettings GetSettings()
        {
            string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Priest_Holy.xml";
            if (File.Exists(currentSettingsFile))
            {
                return
                    CurrentSetting = Load<PriestHolySettings>(currentSettingsFile);
            }
            else
            {
                return new PriestHolySettings();
            }
        }
    }

    #endregion
}

#endregion

#region Rogue

public class RogueCombat
{
    private readonly RogueCombatSettings mySettings = RogueCombatSettings.GetSettings();

    #region General Timers & Variables

    private Timer AlchFlaskTimer = new Timer(0);
    public int CP = 0;
    private Timer EngineeringTimer = new Timer(0);
    public int LC = 0;
    private Timer OnCD = new Timer(0);
    private Timer TrinketOneTimer = new Timer(0);
    private Timer TrinketTwoTimer = new Timer(0);

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell BloodFury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell WarStomp = new Spell("War Stomp");

    #endregion

    #region Rogue Buffs

    private readonly Spell BladeFlurry = new Spell("Blade Flurry");
    private readonly Spell BurstofSpeed = new Spell("Burst of Speed");
    private readonly Spell CripplingPoison = new Spell("Crippling Poison");
    private readonly Spell DeadlyPoison = new Spell("Deadly Poison");
    private readonly Spell LeechingPoison = new Spell("Leeching Poison");
    private readonly Spell MindnumbingPoison = new Spell("Mind-numbing Poison");
    private readonly Spell ParalyticPoison = new Spell("Paralytic Poison");
    private readonly Spell SliceandDice = new Spell("Slice and Dice");
    private readonly Spell Sprint = new Spell("Sprint");
    private readonly Spell Stealth = new Spell("Stealth");
    private readonly Spell WoundPoison = new Spell("Wound Poison");
    private Timer SliceandDiceTimer = new Timer(0);

    #endregion

    #region Offensive Spell

    private readonly Spell Ambush = new Spell("Ambush");
    private readonly Spell CrimsonTempest = new Spell("Crimson Tempest");
    private readonly Spell DeadlyThrow = new Spell("Deadly Throw");
    private readonly Spell Eviscerate = new Spell("Eviscerate");
    private readonly Spell ExposeArmor = new Spell("Expose Armor");
    private readonly Spell FanofKnives = new Spell("Fan of Knives");
    private readonly Spell Garrote = new Spell("Garrote");
    private readonly Spell RevealingStrike = new Spell("Revealing Strike");
    private readonly Spell Rupture = new Spell("Rupture");
    private readonly Spell Shiv = new Spell("Shiv");
    private readonly Spell ShurikenToss = new Spell("Shuriken Toss");
    private readonly Spell SinisterStrike = new Spell("Sinister Strike");
    private readonly Spell Throw = new Spell("Throw");
    private Timer RuptureTimer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell AdrenalineRush = new Spell("Adrenaline Rush");
    private readonly Spell KillingSpree = new Spell("Killing Spree");
    private readonly Spell Redirect = new Spell("Redirect");
    private readonly Spell ShadowBlades = new Spell("Shadow Blades");
    private readonly Spell ShadowStep = new Spell("Shadow Step");
    private readonly Spell Vendetta = new Spell("Vendetta");

    #endregion

    #region Defensive Cooldown

    private readonly Spell CheapShot = new Spell("Cheap Shot");
    private readonly Spell CloakofShadows = new Spell("Cloak of Shadows");
    private readonly Spell CombatReadiness = new Spell("Combat Readiness");
    private readonly Spell Dismantle = new Spell("Dismantle");
    private readonly Spell Evasion = new Spell("Evasion");
    private readonly Spell Kick = new Spell("Kick");
    private readonly Spell KidneyShot = new Spell("Kidney Shot");
    private readonly Spell Preparation = new Spell("Preparation");
    private readonly Spell SmokeBomb = new Spell("Smoke Bomb");
    private readonly Spell Vanish = new Spell("Vanish");
    private Timer DismantleTimer = new Timer(0);

    #endregion

    #region Healing Spell

    private readonly Spell Recuperate = new Spell("Recuperate");

    #endregion

    public RogueCombat()
    {
        Main.range = 5.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (Throw.IsHostileDistanceGood || CheapShot.IsHostileDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && mySettings.UseLowCombat)
                            {
                                LC = 1;
                                if (ObjectManager.Target.GetDistance < 30)
                                    LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                if (ObjectManager.Target.GetDistance < 30)
                                    Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(250);
        }
    }

    private void Pull()
    {
        if (Redirect.IsSpellUsable && Redirect.IsHostileDistanceGood && Redirect.KnownSpell
            && mySettings.UseRedirect && ObjectManager.Me.ComboPoint > 0)
        {
            Redirect.Launch();
            Thread.Sleep(200);
        }

        if (((Stealth.KnownSpell && Stealth.IsSpellUsable && !Stealth.HaveBuff && mySettings.UseStealth)
             || Stealth.HaveBuff) && LC != 1)
        {
            if (!Stealth.HaveBuff)
            {
                Stealth.Launch();
                Thread.Sleep(200);
            }

            if (ShadowStep.IsSpellUsable && ShadowStep.IsHostileDistanceGood && ShadowStep.KnownSpell
                && mySettings.UseShadowStep)
            {
                ShadowStep.Launch();
                Thread.Sleep(200);
            }

            if (Garrote.IsSpellUsable && Garrote.IsHostileDistanceGood && Garrote.KnownSpell
                && mySettings.UseGarrote)
            {
                Garrote.Launch();
                return;
            }
            else
            {
                if (CheapShot.IsSpellUsable && CheapShot.IsHostileDistanceGood && CheapShot.KnownSpell
                    && mySettings.UseCheapShot)
                {
                    CheapShot.Launch();
                    return;
                }
            }
        }
        else if (ShurikenToss.IsSpellUsable && ShurikenToss.IsHostileDistanceGood && ShurikenToss.KnownSpell
                 && mySettings.UseShurikenToss && !mySettings.UseStealth)
        {
            ShurikenToss.Launch();
            return;
        }
        else
        {
            if (Throw.IsSpellUsable && Throw.IsHostileDistanceGood && Throw.KnownSpell
                && mySettings.UseThrow && !mySettings.UseStealth)
            {
                MovementManager.StopMove();
                Throw.Launch();
                Thread.Sleep(1000);
                return;
            }
        }
    }

    private void LowCombat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        DefenseCycle();
        Heal();

        if (Throw.IsSpellUsable && Throw.IsHostileDistanceGood && Throw.KnownSpell && !ObjectManager.Target.InCombat
            && mySettings.UseThrow)
        {
            Throw.Launch();
            return;
        }

        if (Eviscerate.KnownSpell && Eviscerate.IsSpellUsable && Eviscerate.IsHostileDistanceGood
            && mySettings.UseEviscerate && ObjectManager.Me.ComboPoint > 4)
        {
            Eviscerate.Launch();
            return;
        }
        else if (RevealingStrike.KnownSpell && RevealingStrike.IsSpellUsable && RevealingStrike.IsHostileDistanceGood
                 && mySettings.UseRevealingStrike)
        {
            RevealingStrike.Launch();
            return;
        }
        else if (SinisterStrike.KnownSpell && SinisterStrike.IsSpellUsable && SinisterStrike.IsHostileDistanceGood
                 && mySettings.UseSinisterStrike)
        {
            SinisterStrike.Launch();
            return;
        }
        else
        {
            if (SliceandDice.KnownSpell && SliceandDice.IsSpellUsable && SliceandDice.IsHostileDistanceGood
                && mySettings.UseSliceandDice && !SliceandDice.HaveBuff)
            {
                CP = ObjectManager.Me.ComboPoint;
                SliceandDice.Launch();
                SliceandDiceTimer = new Timer(1000*(6 + (CP*6)));
                return;
            }
        }

        if (FanofKnives.KnownSpell && FanofKnives.IsSpellUsable && FanofKnives.IsHostileDistanceGood
            && mySettings.UseFanofKnives)
        {
            FanofKnives.Launch();
            return;
        }
    }

    private void Combat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        if (OnCD.IsReady)
            DefenseCycle();
        DPSCycle();
        Heal();
        Decast();
        DPSCycle();
        DPSBurst();
        DPSCycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (mySettings.UseDeadlyPoison && DeadlyPoison.KnownSpell && DeadlyPoison.IsSpellUsable
            && !DeadlyPoison.HaveBuff)
        {
            DeadlyPoison.Launch();
            return;
        }
        else
        {
            if (!WoundPoison.HaveBuff && WoundPoison.KnownSpell && WoundPoison.IsSpellUsable
                && mySettings.UseWoundPoison && !DeadlyPoison.HaveBuff)
            {
                WoundPoison.Launch();
                return;
            }
        }

        if (!LeechingPoison.HaveBuff && LeechingPoison.KnownSpell && LeechingPoison.IsSpellUsable
            && mySettings.UseLeechingPoison)
        {
            LeechingPoison.Launch();
            return;
        }
        else if (!ParalyticPoison.HaveBuff && ParalyticPoison.KnownSpell && ParalyticPoison.IsSpellUsable
                 && mySettings.UseParalyticPoison && !LeechingPoison.HaveBuff)
        {
            ParalyticPoison.Launch();
            return;
        }
        else if (!CripplingPoison.HaveBuff && CripplingPoison.KnownSpell && CripplingPoison.IsSpellUsable
                 && mySettings.UseCripplingPoison && !LeechingPoison.HaveBuff && ParalyticPoison.HaveBuff)
        {
            CripplingPoison.Launch();
            return;
        }
        else
        {
            if (!MindnumbingPoison.HaveBuff && MindnumbingPoison.KnownSpell && MindnumbingPoison.IsSpellUsable
                && mySettings.UseMindnumbingPoison && !CripplingPoison.HaveBuff && !ParalyticPoison.HaveBuff
                && !LeechingPoison.HaveBuff)
            {
                MindnumbingPoison.Launch();
                return;
            }
        }

        if (ObjectManager.GetNumberAttackPlayer() == 0 && BurstofSpeed.IsSpellUsable && BurstofSpeed.KnownSpell
            && mySettings.UseBurstofSpeed && ObjectManager.Me.GetMove)
        {
            BurstofSpeed.Launch();
            return;
        }
        else
        {
            if (ObjectManager.GetNumberAttackPlayer() == 0 && Sprint.IsSpellUsable && Sprint.KnownSpell
                && mySettings.UseSprint && ObjectManager.Me.GetMove)
            {
                Sprint.Launch();
                return;
            }
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            var maxTimeTimer = new Timer(1000*2);
            MovementsAction.MoveBackward(true);
            while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                Thread.Sleep(300);
            MovementsAction.MoveBackward(false);
            if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
            {
                MovementsAction.MoveForward(true);
                Thread.Sleep(1000);
                MovementsAction.MoveForward(false);
                MovementManager.Face(ObjectManager.Target.Position);
            }
        }
    }

    private void DefenseCycle()
    {
        if (ObjectManager.Me.HealthPercent <= 80 && !KidneyShot.TargetHaveBuff && KidneyShot.KnownSpell
            && KidneyShot.IsSpellUsable && KidneyShot.IsHostileDistanceGood && ObjectManager.Me.ComboPoint <= 3
            && Recuperate.HaveBuff && mySettings.UseKidneyShot)
        {
            CP = ObjectManager.Me.ComboPoint;
            KidneyShot.Launch();
            OnCD = new Timer(1000*CP);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= 80 && Evasion.KnownSpell && Evasion.IsSpellUsable
                 && mySettings.UseEvasion)
        {
            Evasion.Launch();
            OnCD = new Timer(1000*15);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= 90 && CombatReadiness.KnownSpell && CombatReadiness.IsSpellUsable
                 && mySettings.UseCombatReadiness)
        {
            CombatReadiness.Launch();
            OnCD = new Timer(1000*20);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= 95 && Dismantle.KnownSpell && Dismantle.IsSpellUsable
                 && mySettings.UseDismantle)
        {
            Dismantle.Launch();
            DismantleTimer = new Timer(1000*60);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable &&
                 WarStomp.KnownSpell
                 && mySettings.UseWarStomp)
        {
            WarStomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable &&
                 Stoneform.KnownSpell
                 && mySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else
        {
            if (ObjectManager.GetNumberAttackPlayer() >= 3 && Vanish.KnownSpell && Vanish.IsSpellUsable
                && mySettings.UseVanish)
            {
                Vanish.Launch();
                Thread.Sleep(5000);
                return;
            }
        }

        if (ObjectManager.Me.HealthPercent <= 70 && Preparation.KnownSpell && Preparation.IsSpellUsable
            && mySettings.UsePreparation && !Evasion.IsSpellUsable)
        {
            Preparation.Launch();
            return;
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (ObjectManager.Me.HealthPercent <= mySettings.UseGiftoftheNaaruAtPercentage && GiftoftheNaaru.KnownSpell &&
            GiftoftheNaaru.IsSpellUsable
            && mySettings.UseGiftoftheNaaru)
        {
            GiftoftheNaaru.Launch();
            return;
        }
        else
        {
            if (!Recuperate.HaveBuff && ObjectManager.Me.ComboPoint > 1 && mySettings.UseRecuperate
                && ObjectManager.Me.HealthPercent <= 90 && Recuperate.KnownSpell && Recuperate.IsSpellUsable)
            {
                Recuperate.Launch();
                return;
            }
        }
    }

    private void Decast()
    {
        if (ObjectManager.Target.IsCast && Kick.KnownSpell && Kick.IsSpellUsable
            && Kick.IsHostileDistanceGood && mySettings.UseKick && ObjectManager.Target.IsTargetingMe)
        {
            Kick.Launch();
            return;
        }
        else if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8
                 && ObjectManager.Me.HealthPercent <= mySettings.UseArcaneTorrentForDecastAtPercentage
                 && mySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast &&
                 ObjectManager.Target.IsTargetingMe)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && CloakofShadows.KnownSpell && CloakofShadows.IsSpellUsable
                 && ObjectManager.Target.IsTargetingMe && mySettings.UseCloakofShadows)
        {
            CloakofShadows.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.IsCast && SmokeBomb.KnownSpell && SmokeBomb.IsSpellUsable
                && ObjectManager.Target.IsTargetingMe && mySettings.UseSmokeBomb
                && !CloakofShadows.HaveBuff)
            {
                SmokeBomb.Launch();
                return;
            }
        }

        if (ObjectManager.Me.HealthPercent <= 70 && Preparation.KnownSpell && Preparation.IsSpellUsable
            && mySettings.UsePreparation && !CloakofShadows.IsSpellUsable && ObjectManager.Target.IsCast
            && ObjectManager.Target.IsTargetingMe)
        {
            Preparation.Launch();
            return;
        }
    }

    private void DPSBurst()
    {
        if (mySettings.UseTrinketOne && TrinketOneTimer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketOneTimer = new Timer(1000*60*2);
        }
        else if (mySettings.UseTrinketTwo && TrinketTwoTimer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketTwoTimer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseBerserking)
            Berserking.Launch();
        else if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseBloodFury)
            BloodFury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (EngineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            EngineeringTimer = new Timer(1000*60);
        }
        else if (AdrenalineRush.KnownSpell && AdrenalineRush.IsSpellUsable
                 && mySettings.UseAdrenalineRush && ObjectManager.Target.GetDistance < 30)
        {
            AdrenalineRush.Launch();
            return;
        }
        else if (KillingSpree.KnownSpell && KillingSpree.IsSpellUsable
                 && mySettings.UseKillingSpree && ObjectManager.Target.GetDistance < 10
                 && ObjectManager.Me.EnergyPercentage < 35)
        {
            KillingSpree.Launch();
            return;
        }
        else
        {
            if (ShadowBlades.KnownSpell && ShadowBlades.IsSpellUsable
                && mySettings.UseShadowBlades && ObjectManager.Target.GetDistance < 30)
            {
                ShadowBlades.Launch();
                return;
            }
        }
    }

    private void DPSCycle()
    {
        if (Garrote.IsSpellUsable && Garrote.IsHostileDistanceGood && Garrote.KnownSpell
            && mySettings.UseGarrote && ObjectManager.Me.HaveBuff(115192))
        {
            Garrote.Launch();
            return;
        }

        if (Throw.IsSpellUsable && Throw.IsHostileDistanceGood && Throw.KnownSpell && !ObjectManager.Target.InCombat
            && mySettings.UseThrow)
        {
            Throw.Launch();
            return;
        }

        if (BladeFlurry.KnownSpell && BladeFlurry.IsSpellUsable && ObjectManager.Target.GetDistance < 10
            && mySettings.UseBladeFlurry && !BladeFlurry.HaveBuff && ObjectManager.GetNumberAttackPlayer() > 1)
        {
            BladeFlurry.Launch();
            return;
        }
        else
        {
            if (BladeFlurry.KnownSpell && BladeFlurry.IsSpellUsable && SinisterStrike.IsHostileDistanceGood
                && BladeFlurry.HaveBuff && ObjectManager.GetNumberAttackPlayer() < 2)
            {
                BladeFlurry.Launch();
                return;
            }
        }

        if (Eviscerate.KnownSpell && Eviscerate.IsSpellUsable && Eviscerate.IsHostileDistanceGood
            && mySettings.UseEviscerate && ObjectManager.Me.ComboPoint > 4)
        {
            Eviscerate.Launch();
            return;
        }
        else if (RevealingStrike.KnownSpell && RevealingStrike.IsSpellUsable && RevealingStrike.IsHostileDistanceGood
                 && mySettings.UseRevealingStrike && !RevealingStrike.TargetHaveBuff)
        {
            RevealingStrike.Launch();
            return;
        }
        else if (SliceandDice.KnownSpell && SliceandDice.IsSpellUsable && SliceandDice.IsHostileDistanceGood
                 && mySettings.UseSliceandDice && !SliceandDice.HaveBuff)
        {
            CP = ObjectManager.Me.ComboPoint;
            SliceandDice.Launch();
            SliceandDiceTimer = new Timer(1000*(6 + (CP*6)));
            return;
        }
        else if (Rupture.KnownSpell && Rupture.IsHostileDistanceGood && Rupture.IsSpellUsable
                 && mySettings.UseRupture && (!Rupture.TargetHaveBuff || RuptureTimer.IsReady))
        {
            CP = ObjectManager.Me.ComboPoint;
            Rupture.Launch();
            RuptureTimer = new Timer(1000*(4 + (CP*4)));
            return;
        }
        else if (ExposeArmor.IsSpellUsable && ExposeArmor.IsHostileDistanceGood && ExposeArmor.KnownSpell
                 && mySettings.UseExposeArmor && !ObjectManager.Target.HaveBuff(113746))
        {
            ExposeArmor.Launch();
            return;
        }
        else if (SinisterStrike.KnownSpell && SinisterStrike.IsSpellUsable && SinisterStrike.IsHostileDistanceGood
                 && mySettings.UseSinisterStrike)
        {
            SinisterStrike.Launch();
            return;
        }
        else
        {
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell
                && mySettings.UseArcaneTorrentForResource)
            {
                ArcaneTorrent.Launch();
                return;
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: RogueCombatSettings

    [Serializable]
    public class RogueCombatSettings : Settings
    {
        public bool DoAvoidMelee = false;
        public int DoAvoidMeleeDistance = 0;
        public bool UseAdrenalineRush = true;
        public bool UseAlchFlask = true;
        public bool UseAmbush = true;
        public bool UseArcaneTorrentForDecast = true;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public bool UseArcaneTorrentForResource = true;
        public bool UseBerserking = true;
        public bool UseBladeFlurry = true;
        public bool UseBloodFury = true;
        public bool UseBurstofSpeed = true;
        public bool UseCheapShot = true;
        public bool UseCloakofShadows = true;
        public bool UseCombatReadiness = true;
        public bool UseCrimsonTempest = true;
        public bool UseCripplingPoison = false;
        public bool UseDeadlyPoison = true;
        public bool UseDeadlyThrow = true;
        public bool UseDismantle = true;
        public bool UseEngGlove = true;
        public bool UseEvasion = true;
        public bool UseEviscerate = true;
        public bool UseExposeArmor = false;
        public bool UseFanofKnives = true;
        public bool UseGarrote = true;
        public bool UseGiftoftheNaaru = true;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public bool UseKick = true;
        public bool UseKidneyShot = true;
        public bool UseKillingSpree = true;
        public bool UseLeechingPoison = true;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMindnumbingPoison = true;
        public bool UseParalyticPoison = false;
        public bool UsePreparation = true;
        public bool UseRecuperate = true;
        public bool UseRedirect = true;
        public bool UseRevealingStrike = true;
        public bool UseRupture = true;
        public bool UseShadowBlades = true;
        public bool UseShadowStep = true;
        public bool UseShiv = true;
        public bool UseShurikenToss = true;
        public bool UseSinisterStrike = true;
        public bool UseSliceandDice = true;
        public bool UseSmokeBomb = true;
        public bool UseSprint = true;
        public bool UseStealth = false;
        public bool UseStoneform = true;
        public int UseStoneformAtPercentage = 80;
        public bool UseThrow = true;
        public bool UseTrinketOne = true;
        public bool UseTrinketTwo = true;
        public bool UseVanish = true;
        public bool UseWarStomp = true;
        public int UseWarStompAtPercentage = 80;
        public bool UseWoundPoison = false;

        public RogueCombatSettings()
        {
            ConfigWinForm(new Point(500, 400), "Rogue Combat Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Rogue Buffs */
            AddControlInWinForm("Use Blade Flurry", "UseBladeFlurry", "Rogue Buffs");
            AddControlInWinForm("Use Burst of Speed", "UseBurstofSpeed", "Rogue Buffs");
            AddControlInWinForm("Use Crippling Poison", "UseCripplingPoison", "Rogue Buffs");
            AddControlInWinForm("Use Deadly Poison", "UseDeadlyPoison", "Rogue Buffs");
            AddControlInWinForm("Use Leeching Poison", "UseLeechingPoison", "Rogue Buffs");
            AddControlInWinForm("Use Mindnumbing Poison", "UseMindnumbingPoison", "Rogue Buffs");
            AddControlInWinForm("Use Paralytic Poison", "UseParalyticPoison", "Rogue Buffs");
            AddControlInWinForm("Use Slice and Dice", "UseSliceandDice", "Rogue Buffs");
            AddControlInWinForm("Use Sprint", "UseSprint", "Rogue Buffs");
            AddControlInWinForm("Use Stealth", "UseStealth", "Rogue Buffs");
            AddControlInWinForm("Use Wound Poison", "UseWoundPoison", "Rogue Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Ambush", "UseAmbush", "Offensive Spell");
            AddControlInWinForm("Use Crimson Tempest", "UseCrimsonTempest", "Offensive Spell");
            AddControlInWinForm("Use Deadly Throw", "UseDeadlyThrow", "Offensive Spell");
            AddControlInWinForm("Use Eviscerate", "UseEviscerate", "Offensive Spell");
            AddControlInWinForm("Use Expose Armor", "UseExposeArmor", "Offensive Spell");
            AddControlInWinForm("Use Fan of Knives", "UseFanofKnives", "Offensive Spell");
            AddControlInWinForm("Use Garrote", "UseGarrote", "Offensive Spell");
            AddControlInWinForm("Use Revealing Strike", "UseRevealingStrike", "Offensive Spell");
            AddControlInWinForm("Use Rupture", "UseRupture", "Offensive Spell");
            AddControlInWinForm("Use Shiv", "UseShiv", "Offensive Spell");
            AddControlInWinForm("Use Shuriken Toss", "UseShurikenToss", "Offensive Spell");
            AddControlInWinForm("Use Sinister Strike", "UseSinisterStrike", "Offensive Spell");
            AddControlInWinForm("Use Throw", "UseThrow", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Adrenaline Rush", "UseAdrenalineRush", "Offensive Cooldown");
            AddControlInWinForm("Use Killing Spree", "UseKillingSpree", "Offensive Cooldown");
            AddControlInWinForm("Use Redirect", "UseRedirect", "Offensive Cooldown");
            AddControlInWinForm("Use Shadow Blades", "UseShadowBlades", "Offensive Cooldown");
            AddControlInWinForm("Use Shadow Step", "UseShadowStep", "Offensive Cooldown");
            AddControlInWinForm("Use Vendetta", "UseVendetta", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use CheapShot", "UseCheapShot", "Defensive Cooldown");
            AddControlInWinForm("Use CloakofShadows", "UseCloakofShadows", "Defensive Cooldown");
            AddControlInWinForm("Use CombatReadiness", "UseCombatReadiness", "Defensive Cooldown");
            AddControlInWinForm("Use Dismantle", "UseDismantle", "Defensive Cooldown");
            AddControlInWinForm("Use Evasion", "UseEvasion", "Defensive Cooldown");
            AddControlInWinForm("Use Kick", "UseKick", "Defensive Cooldown");
            AddControlInWinForm("Use KidneyShot", "UseKidneyShot", "Defensive Cooldown");
            AddControlInWinForm("Use Preparation", "UsePreparation", "Defensive Cooldown");
            AddControlInWinForm("Use SmokeBomb", "UseSmokeBomb", "Defensive Cooldown");
            AddControlInWinForm("Use Vanish", "UseVanish", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Recuperate", "UseRecuperate", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
            AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
            AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
        }

        public static RogueCombatSettings CurrentSetting { get; set; }

        public static RogueCombatSettings GetSettings()
        {
            string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Rogue_Combat.xml";
            if (File.Exists(currentSettingsFile))
            {
                return
                    CurrentSetting = Load<RogueCombatSettings>(currentSettingsFile);
            }
            else
            {
                return new RogueCombatSettings();
            }
        }
    }

    #endregion
}

public class RogueSubtlety
{
    private readonly RogueSubtletySettings mySettings = RogueSubtletySettings.GetSettings();

    #region General Timers & Variables

    private Timer AlchFlaskTimer = new Timer(0);
    public int CP = 0;
    private Timer EngineeringTimer = new Timer(0);
    public int LC = 0;
    private Timer OnCD = new Timer(0);
    private Timer TrinketOneTimer = new Timer(0);
    private Timer TrinketTwoTimer = new Timer(0);

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell BloodFury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell WarStomp = new Spell("War Stomp");

    #endregion

    #region Rogue Buffs

    private readonly Spell BurstofSpeed = new Spell("Burst of Speed");
    private readonly Spell CripplingPoison = new Spell("Crippling Poison");
    private readonly Spell DeadlyPoison = new Spell("Deadly Poison");
    private readonly Spell LeechingPoison = new Spell("Leeching Poison");
    private readonly Spell MindnumbingPoison = new Spell("Mind-numbing Poison");
    private readonly Spell ParalyticPoison = new Spell("Paralytic Poison");
    private readonly Spell SliceandDice = new Spell("Slice and Dice");
    private readonly Spell Sprint = new Spell("Sprint");
    private readonly Spell Stealth = new Spell("Stealth");
    private readonly Spell WoundPoison = new Spell("Wound Poison");
    private Timer SliceandDiceTimer = new Timer(0);

    #endregion

    #region Offensive Spell

    private readonly Spell Ambush = new Spell("Ambush");
    private readonly Spell CrimsonTempest = new Spell("Crimson Tempest");
    private readonly Spell DeadlyThrow = new Spell("Deadly Throw");
    private readonly Spell Eviscerate = new Spell("Eviscerate");
    private readonly Spell ExposeArmor = new Spell("Expose Armor");
    private readonly Spell FanofKnives = new Spell("Fan of Knives");
    private readonly Spell Garrote = new Spell("Garrote");
    private readonly Spell Hemorrhage = new Spell("Hemorrhage");
    private readonly Spell Rupture = new Spell("Rupture");
    private readonly Spell Shiv = new Spell("Shiv");
    private readonly Spell ShurikenToss = new Spell("Shuriken Toss");
    private readonly Spell SinisterStrike = new Spell("Sinister Strike");
    private readonly Spell Throw = new Spell("Throw");
    private Timer RuptureTimer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell Premeditation = new Spell("Premeditation");
    private readonly Spell Redirect = new Spell("Redirect");
    private readonly Spell ShadowBlades = new Spell("Shadow Blades");
    private readonly Spell ShadowDance = new Spell("Shadow Dance");
    private readonly Spell ShadowStep = new Spell("Shadow Step");

    #endregion

    #region Defensive Cooldown

    private readonly Spell CheapShot = new Spell("Cheap Shot");
    private readonly Spell CloakofShadows = new Spell("Cloak of Shadows");
    private readonly Spell CombatReadiness = new Spell("Combat Readiness");
    private readonly Spell Dismantle = new Spell("Dismantle");
    private readonly Spell Evasion = new Spell("Evasion");
    private readonly Spell Kick = new Spell("Kick");
    private readonly Spell KidneyShot = new Spell("Kidney Shot");
    private readonly Spell Preparation = new Spell("Preparation");
    private readonly Spell SmokeBomb = new Spell("Smoke Bomb");
    private readonly Spell Vanish = new Spell("Vanish");
    private Timer DismantleTimer = new Timer(0);

    #endregion

    #region Healing Spell

    private readonly Spell Recuperate = new Spell("Recuperate");

    #endregion

    public RogueSubtlety()
    {
        Main.range = 5.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (Throw.IsHostileDistanceGood || CheapShot.IsHostileDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && mySettings.UseLowCombat)
                            {
                                LC = 1;
                                if (ObjectManager.Target.GetDistance < 30)
                                    LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                if (ObjectManager.Target.GetDistance < 30)
                                    Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(250);
        }
    }

    private void Pull()
    {
        if (Redirect.IsSpellUsable && Redirect.IsHostileDistanceGood && Redirect.KnownSpell
            && mySettings.UseRedirect && ObjectManager.Me.ComboPoint > 0)
        {
            Redirect.Launch();
            Thread.Sleep(200);
        }

        if (((Stealth.KnownSpell && Stealth.IsSpellUsable && !Stealth.HaveBuff && mySettings.UseStealth)
             || Stealth.HaveBuff) && LC != 1)
        {
            if (!Stealth.HaveBuff)
            {
                Stealth.Launch();
                Thread.Sleep(200);
            }

            if (Premeditation.IsSpellUsable && Premeditation.IsHostileDistanceGood && Premeditation.KnownSpell
                && mySettings.UsePremeditation && ObjectManager.Me.ComboPoint == 0)
            {
                Premeditation.Launch();
                Thread.Sleep(200);
            }

            if (ShadowStep.IsSpellUsable && ShadowStep.IsHostileDistanceGood && ShadowStep.KnownSpell
                && mySettings.UseShadowStep)
            {
                ShadowStep.Launch();
                Thread.Sleep(200);
            }

            if (Garrote.IsSpellUsable && Garrote.IsHostileDistanceGood && Garrote.KnownSpell
                && mySettings.UseGarrote)
            {
                Garrote.Launch();
                return;
            }
            else
            {
                if (CheapShot.IsSpellUsable && CheapShot.IsHostileDistanceGood && CheapShot.KnownSpell
                    && mySettings.UseCheapShot)
                {
                    CheapShot.Launch();
                    return;
                }
            }
        }
        else if (ShurikenToss.IsSpellUsable && ShurikenToss.IsHostileDistanceGood && ShurikenToss.KnownSpell
                 && mySettings.UseShurikenToss && !mySettings.UseStealth)
        {
            ShurikenToss.Launch();
            return;
        }
        else
        {
            if (Throw.IsSpellUsable && Throw.IsHostileDistanceGood && Throw.KnownSpell
                && mySettings.UseThrow && !mySettings.UseStealth)
            {
                MovementManager.StopMove();
                Throw.Launch();
                Thread.Sleep(1000);
                return;
            }
        }
    }

    private void LowCombat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        DefenseCycle();
        Heal();

        if (Throw.IsSpellUsable && Throw.IsHostileDistanceGood && Throw.KnownSpell && !ObjectManager.Target.InCombat
            && mySettings.UseThrow)
        {
            Throw.Launch();
            return;
        }

        if (Eviscerate.KnownSpell && Eviscerate.IsSpellUsable && Eviscerate.IsHostileDistanceGood
            && mySettings.UseEviscerate && ObjectManager.Me.ComboPoint > 4)
        {
            Eviscerate.Launch();
            return;
        }
        else if (SliceandDice.KnownSpell && SliceandDice.IsSpellUsable && SliceandDice.IsHostileDistanceGood
                 && mySettings.UseSliceandDice && !SliceandDice.HaveBuff)
        {
            CP = ObjectManager.Me.ComboPoint;
            SliceandDice.Launch();
            SliceandDiceTimer = new Timer(1000*(6 + (CP*6)));
            return;
        }
        else
        {
            // Blizzard API Calls for Hemorrhage using Sinister Strike Function
            if (SinisterStrike.KnownSpell && SinisterStrike.IsSpellUsable && SinisterStrike.IsHostileDistanceGood
                && mySettings.UseHemorrhage)
            {
                SinisterStrike.Launch();
                return;
            }
        }

        if (FanofKnives.KnownSpell && FanofKnives.IsSpellUsable && FanofKnives.IsHostileDistanceGood
            && mySettings.UseFanofKnives)
        {
            FanofKnives.Launch();
            return;
        }
    }

    private void Combat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        if (OnCD.IsReady)
            DefenseCycle();
        DPSCycle();
        Heal();
        Decast();
        DPSCycle();
        DPSBurst();
        DPSCycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (mySettings.UseDeadlyPoison && DeadlyPoison.KnownSpell && DeadlyPoison.IsSpellUsable
            && !DeadlyPoison.HaveBuff)
        {
            DeadlyPoison.Launch();
            return;
        }
        else
        {
            if (!WoundPoison.HaveBuff && WoundPoison.KnownSpell && WoundPoison.IsSpellUsable
                && mySettings.UseWoundPoison && !DeadlyPoison.HaveBuff)
            {
                WoundPoison.Launch();
                return;
            }
        }

        if (!LeechingPoison.HaveBuff && LeechingPoison.KnownSpell && LeechingPoison.IsSpellUsable
            && mySettings.UseLeechingPoison)
        {
            LeechingPoison.Launch();
            return;
        }
        else if (!ParalyticPoison.HaveBuff && ParalyticPoison.KnownSpell && ParalyticPoison.IsSpellUsable
                 && mySettings.UseParalyticPoison && !LeechingPoison.HaveBuff)
        {
            ParalyticPoison.Launch();
            return;
        }
        else if (!CripplingPoison.HaveBuff && CripplingPoison.KnownSpell && CripplingPoison.IsSpellUsable
                 && mySettings.UseCripplingPoison && !LeechingPoison.HaveBuff && ParalyticPoison.HaveBuff)
        {
            CripplingPoison.Launch();
            return;
        }
        else
        {
            if (!MindnumbingPoison.HaveBuff && MindnumbingPoison.KnownSpell && MindnumbingPoison.IsSpellUsable
                && mySettings.UseMindnumbingPoison && !CripplingPoison.HaveBuff && !ParalyticPoison.HaveBuff
                && !LeechingPoison.HaveBuff)
            {
                MindnumbingPoison.Launch();
                return;
            }
        }

        if (ObjectManager.GetNumberAttackPlayer() == 0 && BurstofSpeed.IsSpellUsable && BurstofSpeed.KnownSpell
            && mySettings.UseBurstofSpeed && ObjectManager.Me.GetMove)
        {
            BurstofSpeed.Launch();
            return;
        }
        else
        {
            if (ObjectManager.GetNumberAttackPlayer() == 0 && Sprint.IsSpellUsable && Sprint.KnownSpell
                && mySettings.UseSprint && ObjectManager.Me.GetMove)
            {
                Sprint.Launch();
                return;
            }
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            var maxTimeTimer = new Timer(1000*2);
            MovementsAction.MoveBackward(true);
            while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                Thread.Sleep(300);
            MovementsAction.MoveBackward(false);
            if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
            {
                MovementsAction.MoveForward(true);
                Thread.Sleep(1000);
                MovementsAction.MoveForward(false);
                MovementManager.Face(ObjectManager.Target.Position);
            }
        }
    }

    private void DefenseCycle()
    {
        if (ObjectManager.Me.HealthPercent <= 80 && !KidneyShot.TargetHaveBuff && KidneyShot.KnownSpell
            && KidneyShot.IsSpellUsable && KidneyShot.IsHostileDistanceGood && ObjectManager.Me.ComboPoint <= 3
            && Recuperate.HaveBuff && mySettings.UseKidneyShot)
        {
            CP = ObjectManager.Me.ComboPoint;
            KidneyShot.Launch();
            OnCD = new Timer(1000*CP);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= 80 && Evasion.KnownSpell && Evasion.IsSpellUsable
                 && mySettings.UseEvasion)
        {
            Evasion.Launch();
            OnCD = new Timer(1000*15);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= 90 && CombatReadiness.KnownSpell && CombatReadiness.IsSpellUsable
                 && mySettings.UseCombatReadiness)
        {
            CombatReadiness.Launch();
            OnCD = new Timer(1000*20);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= 95 && Dismantle.KnownSpell && Dismantle.IsSpellUsable
                 && mySettings.UseDismantle)
        {
            Dismantle.Launch();
            DismantleTimer = new Timer(1000*60);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable &&
                 WarStomp.KnownSpell
                 && mySettings.UseWarStomp)
        {
            WarStomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable &&
                 Stoneform.KnownSpell
                 && mySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else
        {
            if (ObjectManager.GetNumberAttackPlayer() >= 3 && Vanish.KnownSpell && Vanish.IsSpellUsable
                && mySettings.UseVanish)
            {
                Vanish.Launch();
                Thread.Sleep(5000);
                return;
            }
        }

        if (ObjectManager.Me.HealthPercent <= 70 && Preparation.KnownSpell && Preparation.IsSpellUsable
            && mySettings.UsePreparation && !Evasion.IsSpellUsable)
        {
            Preparation.Launch();
            return;
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (ObjectManager.Me.HealthPercent <= mySettings.UseGiftoftheNaaruAtPercentage && GiftoftheNaaru.KnownSpell &&
            GiftoftheNaaru.IsSpellUsable
            && mySettings.UseGiftoftheNaaru)
        {
            GiftoftheNaaru.Launch();
            return;
        }
        else
        {
            if (!Recuperate.HaveBuff && ObjectManager.Me.ComboPoint > 1 && mySettings.UseRecuperate
                && ObjectManager.Me.HealthPercent <= 90 && Recuperate.KnownSpell && Recuperate.IsSpellUsable)
            {
                Recuperate.Launch();
                return;
            }
        }
    }

    private void Decast()
    {
        if (ObjectManager.Target.IsCast && Kick.KnownSpell && Kick.IsSpellUsable
            && Kick.IsHostileDistanceGood && mySettings.UseKick && ObjectManager.Target.IsTargetingMe)
        {
            Kick.Launch();
            return;
        }
        else if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8
                 && ObjectManager.Me.HealthPercent <= mySettings.UseArcaneTorrentForDecastAtPercentage
                 && mySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast &&
                 ObjectManager.Target.IsTargetingMe)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && CloakofShadows.KnownSpell && CloakofShadows.IsSpellUsable
                 && ObjectManager.Target.IsTargetingMe && mySettings.UseCloakofShadows)
        {
            CloakofShadows.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.IsCast && SmokeBomb.KnownSpell && SmokeBomb.IsSpellUsable
                && ObjectManager.Target.IsTargetingMe && mySettings.UseSmokeBomb
                && !CloakofShadows.HaveBuff)
            {
                SmokeBomb.Launch();
                return;
            }
        }

        if (ObjectManager.Me.HealthPercent <= 70 && Preparation.KnownSpell && Preparation.IsSpellUsable
            && mySettings.UsePreparation && !CloakofShadows.IsSpellUsable && ObjectManager.Target.IsCast
            && ObjectManager.Target.IsTargetingMe)
        {
            Preparation.Launch();
            return;
        }
    }

    private void DPSBurst()
    {
        if (mySettings.UseTrinketOne && TrinketOneTimer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketOneTimer = new Timer(1000*60*2);
        }
        else if (mySettings.UseTrinketTwo && TrinketTwoTimer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketTwoTimer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseBerserking)
            Berserking.Launch();
        else if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseBloodFury)
            BloodFury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (EngineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            EngineeringTimer = new Timer(1000*60);
        }
        else if (ShadowDance.KnownSpell && ShadowDance.IsSpellUsable
                 && mySettings.UseShadowDance && ObjectManager.Target.GetDistance < 10)
        {
            ShadowDance.Launch();
            return;
        }
        else
        {
            if (ShadowBlades.KnownSpell && ShadowBlades.IsSpellUsable
                && mySettings.UseShadowBlades && ObjectManager.Target.GetDistance < 30)
            {
                ShadowBlades.Launch();
                return;
            }
        }
    }

    private void DPSCycle()
    {
        if (ObjectManager.Me.HaveBuff(115192) || ObjectManager.Me.HaveBuff(51713))
        {
            if (Garrote.IsSpellUsable && Garrote.IsHostileDistanceGood && Garrote.KnownSpell
                && mySettings.UseGarrote && !ObjectManager.Target.HaveBuff(703))
            {
                Garrote.Launch();
                return;
            }
        }

        if (Throw.IsSpellUsable && Throw.IsHostileDistanceGood && Throw.KnownSpell && !ObjectManager.Target.InCombat
            && mySettings.UseThrow)
        {
            Throw.Launch();
            return;
        }

        if (Eviscerate.KnownSpell && Eviscerate.IsSpellUsable && Eviscerate.IsHostileDistanceGood
            && mySettings.UseEviscerate && ObjectManager.Me.ComboPoint > 4)
        {
            Eviscerate.Launch();
            return;
        }
        else if (SliceandDice.KnownSpell && SliceandDice.IsSpellUsable && SliceandDice.IsHostileDistanceGood
                 && mySettings.UseSliceandDice && !SliceandDice.HaveBuff)
        {
            CP = ObjectManager.Me.ComboPoint;
            SliceandDice.Launch();
            SliceandDiceTimer = new Timer(1000*(6 + (CP*6)));
            return;
        }
        else if (Rupture.KnownSpell && Rupture.IsHostileDistanceGood && Rupture.IsSpellUsable
                 && mySettings.UseRupture && (!Rupture.TargetHaveBuff || RuptureTimer.IsReady))
        {
            CP = ObjectManager.Me.ComboPoint;
            Rupture.Launch();
            RuptureTimer = new Timer(1000*(4 + (CP*4)));
            return;
        }
        else if (ExposeArmor.IsSpellUsable && ExposeArmor.IsHostileDistanceGood && ExposeArmor.KnownSpell
                 && mySettings.UseExposeArmor && !ObjectManager.Target.HaveBuff(113746))
        {
            ExposeArmor.Launch();
            return;
        }
        else if (SinisterStrike.KnownSpell && SinisterStrike.IsSpellUsable && SinisterStrike.IsHostileDistanceGood
                 && mySettings.UseHemorrhage)
        {
            SinisterStrike.Launch();
            return;
        }
        else
        {
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell
                && mySettings.UseArcaneTorrentForResource)
            {
                ArcaneTorrent.Launch();
                return;
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: RogueSubtletySettings

    [Serializable]
    public class RogueSubtletySettings : Settings
    {
        public bool DoAvoidMelee = false;
        public int DoAvoidMeleeDistance = 0;
        public bool UseAlchFlask = true;
        public bool UseAmbush = true;
        public bool UseArcaneTorrentForDecast = true;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public bool UseArcaneTorrentForResource = true;
        public bool UseBerserking = true;
        public bool UseBloodFury = true;
        public bool UseBurstofSpeed = true;
        public bool UseCheapShot = true;
        public bool UseCloakofShadows = true;
        public bool UseCombatReadiness = true;
        public bool UseCrimsonTempest = true;
        public bool UseCripplingPoison = false;
        public bool UseDeadlyPoison = true;
        public bool UseDeadlyThrow = true;
        public bool UseDismantle = true;
        public bool UseEngGlove = true;
        public bool UseEvasion = true;
        public bool UseEviscerate = true;
        public bool UseExposeArmor = false;
        public bool UseFanofKnives = true;
        public bool UseGarrote = true;
        public bool UseGiftoftheNaaru = true;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public bool UseHemorrhage = true;
        public bool UseKick = true;
        public bool UseKidneyShot = true;
        public bool UseLeechingPoison = true;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMindnumbingPoison = true;
        public bool UseParalyticPoison = false;
        public bool UsePremeditation = true;
        public bool UsePreparation = true;
        public bool UseRecuperate = true;
        public bool UseRedirect = true;
        public bool UseRupture = true;
        public bool UseShadowBlades = true;
        public bool UseShadowDance = true;
        public bool UseShadowStep = true;
        public bool UseShiv = true;
        public bool UseShurikenToss = true;
        public bool UseSliceandDice = true;
        public bool UseSmokeBomb = true;
        public bool UseSprint = true;
        public bool UseStealth = false;
        public bool UseStoneform = true;
        public int UseStoneformAtPercentage = 80;
        public bool UseThrow = true;
        public bool UseTrinketOne = true;
        public bool UseTrinketTwo = true;
        public bool UseVanish = true;
        public bool UseWarStomp = true;
        public int UseWarStompAtPercentage = 80;
        public bool UseWoundPoison = false;

        public RogueSubtletySettings()
        {
            ConfigWinForm(new Point(500, 400), "Rogue Subtlety Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Rogue Buffs */
            AddControlInWinForm("Use Burst of Speed", "UseBurstofSpeed", "Rogue Buffs");
            AddControlInWinForm("Use Crippling Poison", "UseCripplingPoison", "Rogue Buffs");
            AddControlInWinForm("Use Deadly Poison", "UseDeadlyPoison", "Rogue Buffs");
            AddControlInWinForm("Use Leeching Poison", "UseLeechingPoison", "Rogue Buffs");
            AddControlInWinForm("Use Mindnumbing Poison", "UseMindnumbingPoison", "Rogue Buffs");
            AddControlInWinForm("Use Paralytic Poison", "UseParalyticPoison", "Rogue Buffs");
            AddControlInWinForm("Use Slice and Dice", "UseSliceandDice", "Rogue Buffs");
            AddControlInWinForm("Use Sprint", "UseSprint", "Rogue Buffs");
            AddControlInWinForm("Use Stealth", "UseStealth", "Rogue Buffs");
            AddControlInWinForm("Use Wound Poison", "UseWoundPoison", "Rogue Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Ambush", "UseAmbush", "Offensive Spell");
            AddControlInWinForm("Use Crimson Tempest", "UseCrimsonTempest", "Offensive Spell");
            AddControlInWinForm("Use Deadly Throw", "UseDeadlyThrow", "Offensive Spell");
            AddControlInWinForm("Use Expose Armor", "UseExposeArmor", "Offensive Spell");
            AddControlInWinForm("Use Fan of Knives", "UseFanofKnives", "Offensive Spell");
            AddControlInWinForm("Use Eviscerate", "UseEviscerate", "Offensive Spell");
            AddControlInWinForm("Use Garrote", "UseGarrote", "Offensive Spell");
            AddControlInWinForm("Use Hemorrhage", "UseHemorrhage", "Offensive Spell");
            AddControlInWinForm("Use Rupture", "UseRupture", "Offensive Spell");
            AddControlInWinForm("Use Shiv", "UseShiv", "Offensive Spell");
            AddControlInWinForm("Use Shuriken Toss", "UseShurikenToss", "Offensive Spell");
            AddControlInWinForm("Use Throw", "UseThrow", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Premeditation", "UsePremeditation", "Offensive Cooldown");
            AddControlInWinForm("Use Redirect", "UseRedirect", "Offensive Cooldown");
            AddControlInWinForm("Use Shadow Blades", "UseShadowBlades", "Offensive Cooldown");
            AddControlInWinForm("Use Shadow Dance", "UseShadowDance", "Offensive Cooldown");
            AddControlInWinForm("Use Shadow Step", "UseShadowStep", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use CheapShot", "UseCheapShot", "Defensive Cooldown");
            AddControlInWinForm("Use CloakofShadows", "UseCloakofShadows", "Defensive Cooldown");
            AddControlInWinForm("Use CombatReadiness", "UseCombatReadiness", "Defensive Cooldown");
            AddControlInWinForm("Use Dismantle", "UseDismantle", "Defensive Cooldown");
            AddControlInWinForm("Use Evasion", "UseEvasion", "Defensive Cooldown");
            AddControlInWinForm("Use Kick", "UseKick", "Defensive Cooldown");
            AddControlInWinForm("Use KidneyShot", "UseKidneyShot", "Defensive Cooldown");
            AddControlInWinForm("Use Preparation", "UsePreparation", "Defensive Cooldown");
            AddControlInWinForm("Use SmokeBomb", "UseSmokeBomb", "Defensive Cooldown");
            AddControlInWinForm("Use Vanish", "UseVanish", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Recuperate", "UseRecuperate", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
            AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
            AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
        }

        public static RogueSubtletySettings CurrentSetting { get; set; }

        public static RogueSubtletySettings GetSettings()
        {
            string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Rogue_Subtlety.xml";
            if (File.Exists(currentSettingsFile))
            {
                return
                    CurrentSetting = Load<RogueSubtletySettings>(currentSettingsFile);
            }
            else
            {
                return new RogueSubtletySettings();
            }
        }
    }

    #endregion
}

public class RogueAssassination
{
    private readonly RogueAssassinationSettings mySettings = RogueAssassinationSettings.GetSettings();

    #region General Timers & Variables

    private Timer AlchFlaskTimer = new Timer(0);
    public int CP = 0;
    private Timer EngineeringTimer = new Timer(0);
    public int LC = 0;
    private Timer OnCD = new Timer(0);
    private Timer TrinketOneTimer = new Timer(0);
    private Timer TrinketTwoTimer = new Timer(0);

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell BloodFury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell WarStomp = new Spell("War Stomp");

    #endregion

    #region Rogue Buffs

    private readonly Spell BurstofSpeed = new Spell("Burst of Speed");
    private readonly Spell CripplingPoison = new Spell("Crippling Poison");
    private readonly Spell DeadlyPoison = new Spell("Deadly Poison");
    private readonly Spell LeechingPoison = new Spell("Leeching Poison");
    private readonly Spell MindnumbingPoison = new Spell("Mind-numbing Poison");
    private readonly Spell ParalyticPoison = new Spell("Paralytic Poison");
    private readonly Spell SliceandDice = new Spell("Slice and Dice");
    private readonly Spell Sprint = new Spell("Sprint");
    private readonly Spell Stealth = new Spell("Stealth");
    private readonly Spell WoundPoison = new Spell("Wound Poison");
    private Timer SliceandDiceTimer = new Timer(0);

    #endregion

    #region Offensive Spell

    private readonly Spell Ambush = new Spell("Ambush");
    private readonly Spell CrimsonTempest = new Spell("Crimson Tempest");
    private readonly Spell DeadlyThrow = new Spell("Deadly Throw");
    private readonly Spell Dispatch = new Spell("Dispatch");
    private readonly Spell Envenom = new Spell("Envenom");
    private readonly Spell Eviscerate = new Spell("Eviscerate");
    private readonly Spell ExposeArmor = new Spell("Expose Armor");
    private readonly Spell FanofKnives = new Spell("Fan of Knives");
    private readonly Spell Garrote = new Spell("Garrote");
    private readonly Spell Mutilate = new Spell("Mutilate");
    private readonly Spell Rupture = new Spell("Rupture");
    private readonly Spell Shiv = new Spell("Shiv");
    private readonly Spell ShurikenToss = new Spell("Shuriken Toss");
    private readonly Spell SinisterStrike = new Spell("Sinister Strike");
    private readonly Spell Throw = new Spell("Throw");
    private Timer RuptureTimer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell Redirect = new Spell("Redirect");
    private readonly Spell ShadowBlades = new Spell("Shadow Blades");
    private readonly Spell ShadowStep = new Spell("Shadow Step");
    private readonly Spell Vendetta = new Spell("Vendetta");

    #endregion

    #region Defensive Cooldown

    private readonly Spell CheapShot = new Spell("Cheap Shot");
    private readonly Spell CloakofShadows = new Spell("Cloak of Shadows");
    private readonly Spell CombatReadiness = new Spell("Combat Readiness");
    private readonly Spell Dismantle = new Spell("Dismantle");
    private readonly Spell Evasion = new Spell("Evasion");
    private readonly Spell Kick = new Spell("Kick");
    private readonly Spell KidneyShot = new Spell("Kidney Shot");
    private readonly Spell Preparation = new Spell("Preparation");
    private readonly Spell SmokeBomb = new Spell("Smoke Bomb");
    private readonly Spell Vanish = new Spell("Vanish");
    private Timer DismantleTimer = new Timer(0);

    #endregion

    #region Healing Spell

    private readonly Spell Recuperate = new Spell("Recuperate");

    #endregion

    public RogueAssassination()
    {
        Main.range = 5.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (Throw.IsHostileDistanceGood || CheapShot.IsHostileDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && mySettings.UseLowCombat)
                            {
                                LC = 1;
                                if (ObjectManager.Target.GetDistance < 30)
                                    LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                if (ObjectManager.Target.GetDistance < 30)
                                    Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(250);
        }
    }

    private void Pull()
    {
        if (Redirect.IsSpellUsable && Redirect.IsHostileDistanceGood && Redirect.KnownSpell
            && mySettings.UseRedirect && ObjectManager.Me.ComboPoint > 0)
        {
            Redirect.Launch();
            Thread.Sleep(200);
        }

        if (((Stealth.KnownSpell && Stealth.IsSpellUsable && !Stealth.HaveBuff && mySettings.UseStealth)
             || Stealth.HaveBuff) && LC != 1)
        {
            if (!Stealth.HaveBuff)
            {
                Stealth.Launch();
                Thread.Sleep(200);
            }

            if (ShadowStep.IsSpellUsable && ShadowStep.IsHostileDistanceGood && ShadowStep.KnownSpell
                && mySettings.UseShadowStep)
            {
                ShadowStep.Launch();
                Thread.Sleep(200);
            }

            if (Garrote.IsSpellUsable && Garrote.IsHostileDistanceGood && Garrote.KnownSpell
                && mySettings.UseGarrote)
            {
                Garrote.Launch();
                return;
            }
            else
            {
                if (CheapShot.IsSpellUsable && CheapShot.IsHostileDistanceGood && CheapShot.KnownSpell
                    && mySettings.UseCheapShot)
                {
                    CheapShot.Launch();
                    return;
                }
            }
        }
        else if (ShurikenToss.IsSpellUsable && ShurikenToss.IsHostileDistanceGood && ShurikenToss.KnownSpell
                 && mySettings.UseShurikenToss && !mySettings.UseStealth)
        {
            ShurikenToss.Launch();
            return;
        }
        else
        {
            if (Throw.IsSpellUsable && Throw.IsHostileDistanceGood && Throw.KnownSpell
                && mySettings.UseThrow && !mySettings.UseStealth)
            {
                MovementManager.StopMove();
                Throw.Launch();
                Thread.Sleep(1000);
                return;
            }
        }
    }

    private void LowCombat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        DefenseCycle();
        Heal();

        if (Throw.IsSpellUsable && Throw.IsHostileDistanceGood && Throw.KnownSpell && !ObjectManager.Target.InCombat
            && mySettings.UseThrow)
        {
            Throw.Launch();
            return;
        }
        // Blizzard API Calls for Envenom using Eviscerate Function
        if (Eviscerate.KnownSpell && Eviscerate.IsSpellUsable && Eviscerate.IsHostileDistanceGood
            && mySettings.UseEnvenom && (ObjectManager.Me.ComboPoint > 4
                                         || (SliceandDice.HaveBuff && SliceandDiceTimer.IsReady)))
        {
            Eviscerate.Launch();
            if (SliceandDice.HaveBuff)
                SliceandDiceTimer = new Timer(1000*(6 + (5*6)));
            return;
        }
        // Blizzard API Calls for Dispatch using Sinister Strike Function
        else if (SinisterStrike.KnownSpell && SinisterStrike.IsSpellUsable && SinisterStrike.IsHostileDistanceGood
                 && mySettings.UseDispatch)
        {
            SinisterStrike.Launch();
            return;
        }
        else if (SliceandDice.KnownSpell && SliceandDice.IsSpellUsable && SliceandDice.IsHostileDistanceGood
                 && mySettings.UseSliceandDice && !SliceandDice.HaveBuff)
        {
            CP = ObjectManager.Me.ComboPoint;
            SliceandDice.Launch();
            SliceandDiceTimer = new Timer(1000*(6 + (CP*6)));
            return;
        }
        else
        {
            if (Mutilate.KnownSpell && Mutilate.IsSpellUsable && ObjectManager.Target.HealthPercent > 35
                && mySettings.UseMutilate && Mutilate.IsHostileDistanceGood)
            {
                Mutilate.Launch();
                return;
            }
        }

        if (FanofKnives.KnownSpell && FanofKnives.IsSpellUsable && FanofKnives.IsHostileDistanceGood
            && mySettings.UseFanofKnives)
        {
            FanofKnives.Launch();
            return;
        }
    }

    private void Combat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        if (OnCD.IsReady)
            DefenseCycle();
        DPSCycle();
        Heal();
        Decast();
        DPSCycle();
        DPSBurst();
        DPSCycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (mySettings.UseDeadlyPoison && DeadlyPoison.KnownSpell && DeadlyPoison.IsSpellUsable
            && !DeadlyPoison.HaveBuff)
        {
            DeadlyPoison.Launch();
            return;
        }
        else
        {
            if (!WoundPoison.HaveBuff && WoundPoison.KnownSpell && WoundPoison.IsSpellUsable
                && mySettings.UseWoundPoison && !DeadlyPoison.HaveBuff)
            {
                WoundPoison.Launch();
                return;
            }
        }

        if (!LeechingPoison.HaveBuff && LeechingPoison.KnownSpell && LeechingPoison.IsSpellUsable
            && mySettings.UseLeechingPoison)
        {
            LeechingPoison.Launch();
            return;
        }
        else if (!ParalyticPoison.HaveBuff && ParalyticPoison.KnownSpell && ParalyticPoison.IsSpellUsable
                 && mySettings.UseParalyticPoison && !LeechingPoison.HaveBuff)
        {
            ParalyticPoison.Launch();
            return;
        }
        else if (!CripplingPoison.HaveBuff && CripplingPoison.KnownSpell && CripplingPoison.IsSpellUsable
                 && mySettings.UseCripplingPoison && !LeechingPoison.HaveBuff && ParalyticPoison.HaveBuff)
        {
            CripplingPoison.Launch();
            return;
        }
        else
        {
            if (!MindnumbingPoison.HaveBuff && MindnumbingPoison.KnownSpell && MindnumbingPoison.IsSpellUsable
                && mySettings.UseMindnumbingPoison && !CripplingPoison.HaveBuff && !ParalyticPoison.HaveBuff
                && !LeechingPoison.HaveBuff)
            {
                MindnumbingPoison.Launch();
                return;
            }
        }

        if (ObjectManager.GetNumberAttackPlayer() == 0 && BurstofSpeed.IsSpellUsable && BurstofSpeed.KnownSpell
            && mySettings.UseBurstofSpeed && ObjectManager.Me.GetMove)
        {
            BurstofSpeed.Launch();
            return;
        }
        else
        {
            if (ObjectManager.GetNumberAttackPlayer() == 0 && Sprint.IsSpellUsable && Sprint.KnownSpell
                && mySettings.UseSprint && ObjectManager.Me.GetMove)
            {
                Sprint.Launch();
                return;
            }
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            var maxTimeTimer = new Timer(1000*2);
            MovementsAction.MoveBackward(true);
            while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                Thread.Sleep(300);
            MovementsAction.MoveBackward(false);
            if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
            {
                MovementsAction.MoveForward(true);
                Thread.Sleep(1000);
                MovementsAction.MoveForward(false);
                MovementManager.Face(ObjectManager.Target.Position);
            }
        }
    }

    private void DefenseCycle()
    {
        if (ObjectManager.Me.HealthPercent <= 80 && !KidneyShot.TargetHaveBuff && KidneyShot.KnownSpell
            && KidneyShot.IsSpellUsable && KidneyShot.IsHostileDistanceGood && ObjectManager.Me.ComboPoint <= 3
            && Recuperate.HaveBuff && mySettings.UseKidneyShot)
        {
            CP = ObjectManager.Me.ComboPoint;
            KidneyShot.Launch();
            OnCD = new Timer(1000*CP);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= 80 && Evasion.KnownSpell && Evasion.IsSpellUsable
                 && mySettings.UseEvasion)
        {
            Evasion.Launch();
            OnCD = new Timer(1000*15);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= 90 && CombatReadiness.KnownSpell && CombatReadiness.IsSpellUsable
                 && mySettings.UseCombatReadiness)
        {
            CombatReadiness.Launch();
            OnCD = new Timer(1000*20);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= 95 && Dismantle.KnownSpell && Dismantle.IsSpellUsable
                 && mySettings.UseDismantle)
        {
            Dismantle.Launch();
            DismantleTimer = new Timer(1000*60);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable &&
                 WarStomp.KnownSpell
                 && mySettings.UseWarStomp)
        {
            WarStomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable &&
                 Stoneform.KnownSpell
                 && mySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else
        {
            if (ObjectManager.GetNumberAttackPlayer() >= 3 && Vanish.KnownSpell && Vanish.IsSpellUsable
                && mySettings.UseVanish)
            {
                Vanish.Launch();
                Thread.Sleep(5000);
                return;
            }
        }

        if (ObjectManager.Me.HealthPercent <= 70 && Preparation.KnownSpell && Preparation.IsSpellUsable
            && mySettings.UsePreparation && !Evasion.IsSpellUsable)
        {
            Preparation.Launch();
            return;
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (ObjectManager.Me.HealthPercent <= mySettings.UseGiftoftheNaaruAtPercentage && GiftoftheNaaru.KnownSpell &&
            GiftoftheNaaru.IsSpellUsable
            && mySettings.UseGiftoftheNaaru)
        {
            GiftoftheNaaru.Launch();
            return;
        }
        else
        {
            if (!Recuperate.HaveBuff && ObjectManager.Me.ComboPoint > 1 && mySettings.UseRecuperate
                && ObjectManager.Me.HealthPercent <= 90 && Recuperate.KnownSpell && Recuperate.IsSpellUsable)
            {
                Recuperate.Launch();
                return;
            }
        }
    }

    private void Decast()
    {
        if (ObjectManager.Target.IsCast && Kick.KnownSpell && Kick.IsSpellUsable
            && Kick.IsHostileDistanceGood && mySettings.UseKick && ObjectManager.Target.IsTargetingMe)
        {
            Kick.Launch();
            return;
        }
        else if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8
                 && ObjectManager.Me.HealthPercent <= mySettings.UseArcaneTorrentForDecastAtPercentage
                 && mySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast &&
                 ObjectManager.Target.IsTargetingMe)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && CloakofShadows.KnownSpell && CloakofShadows.IsSpellUsable
                 && ObjectManager.Target.IsTargetingMe && mySettings.UseCloakofShadows)
        {
            CloakofShadows.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.IsCast && SmokeBomb.KnownSpell && SmokeBomb.IsSpellUsable
                && ObjectManager.Target.IsTargetingMe && mySettings.UseSmokeBomb
                && !CloakofShadows.HaveBuff)
            {
                SmokeBomb.Launch();
                return;
            }
        }

        if (ObjectManager.Me.HealthPercent <= 70 && Preparation.KnownSpell && Preparation.IsSpellUsable
            && mySettings.UsePreparation && !CloakofShadows.IsSpellUsable && ObjectManager.Target.IsCast
            && ObjectManager.Target.IsTargetingMe)
        {
            Preparation.Launch();
            return;
        }
    }

    private void DPSBurst()
    {
        if (mySettings.UseTrinketOne && TrinketOneTimer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketOneTimer = new Timer(1000*60*2);
        }
        else if (mySettings.UseTrinketTwo && TrinketTwoTimer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketTwoTimer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseBerserking)
            Berserking.Launch();
        else if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseBloodFury)
            BloodFury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (EngineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            EngineeringTimer = new Timer(1000*60);
        }
        else if (Vendetta.KnownSpell && Vendetta.IsSpellUsable
                 && mySettings.UseVendetta && Vendetta.IsHostileDistanceGood)
        {
            Vendetta.Launch();
            return;
        }
        else
        {
            if (ShadowBlades.KnownSpell && ShadowBlades.IsSpellUsable
                && mySettings.UseShadowBlades && ObjectManager.Target.GetDistance < 30)
            {
                ShadowBlades.Launch();
                return;
            }
        }
    }

    private void DPSCycle()
    {
        if (Mutilate.KnownSpell && Mutilate.IsSpellUsable && mySettings.UseMutilate
            && Mutilate.IsHostileDistanceGood && mySettings.UseShadowFocus && !ObjectManager.Target.InCombat
            && (Stealth.HaveBuff || ObjectManager.Me.HaveBuff(115192)))
        {
            Mutilate.Launch();
            return;
        }

        if (Garrote.IsSpellUsable && Garrote.IsHostileDistanceGood && Garrote.KnownSpell
            && mySettings.UseGarrote && ObjectManager.Me.HaveBuff(115192))
        {
            Garrote.Launch();
            return;
        }

        if (Throw.IsSpellUsable && Throw.IsHostileDistanceGood && Throw.KnownSpell && !ObjectManager.Target.InCombat
            && mySettings.UseThrow)
        {
            Throw.Launch();
            return;
        }

        if (Eviscerate.KnownSpell && Eviscerate.IsSpellUsable && Eviscerate.IsHostileDistanceGood
            && mySettings.UseEnvenom && (ObjectManager.Me.ComboPoint > 4
                                         || (SliceandDice.HaveBuff && SliceandDiceTimer.IsReady)))
        {
            Eviscerate.Launch();
            if (SliceandDice.HaveBuff)
                SliceandDiceTimer = new Timer(1000*(6 + (5*6)));
            return;
        }
        else if (SinisterStrike.KnownSpell && SinisterStrike.IsSpellUsable && SinisterStrike.IsHostileDistanceGood
                 && mySettings.UseDispatch)
        {
            SinisterStrike.Launch();
            return;
        }
        else if (SliceandDice.KnownSpell && SliceandDice.IsSpellUsable && SliceandDice.IsHostileDistanceGood
                 && mySettings.UseSliceandDice && !SliceandDice.HaveBuff)
        {
            CP = ObjectManager.Me.ComboPoint;
            SliceandDice.Launch();
            SliceandDiceTimer = new Timer(1000*(6 + (CP*6)));
            return;
        }
        else if (Rupture.KnownSpell && Rupture.IsHostileDistanceGood && Rupture.IsSpellUsable
                 && mySettings.UseRupture && (!Rupture.TargetHaveBuff || RuptureTimer.IsReady))
        {
            CP = ObjectManager.Me.ComboPoint;
            Rupture.Launch();
            RuptureTimer = new Timer(1000*(4 + (CP*4)));
            return;
        }
        else if (ExposeArmor.IsSpellUsable && ExposeArmor.IsHostileDistanceGood && ExposeArmor.KnownSpell
                 && mySettings.UseExposeArmor && !ObjectManager.Target.HaveBuff(113746))
        {
            ExposeArmor.Launch();
            return;
        }
        else if (Mutilate.KnownSpell && Mutilate.IsSpellUsable && ObjectManager.Target.HealthPercent > 35
                 && mySettings.UseMutilate && Mutilate.IsHostileDistanceGood)
        {
            Mutilate.Launch();
            return;
        }
        else
        {
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell
                && mySettings.UseArcaneTorrentForResource)
            {
                ArcaneTorrent.Launch();
                return;
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: RogueAssassinationSettings

    [Serializable]
    public class RogueAssassinationSettings : Settings
    {
        public bool DoAvoidMelee = false;
        public int DoAvoidMeleeDistance = 0;
        public bool UseAlchFlask = true;
        public bool UseAmbush = true;
        public bool UseArcaneTorrentForDecast = true;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public bool UseArcaneTorrentForResource = true;
        public bool UseBerserking = true;
        public bool UseBloodFury = true;
        public bool UseBurstofSpeed = true;
        public bool UseCheapShot = true;
        public bool UseCloakofShadows = true;
        public bool UseCombatReadiness = true;
        public bool UseCrimsonTempest = true;
        public bool UseCripplingPoison = false;
        public bool UseDeadlyPoison = true;
        public bool UseDeadlyThrow = true;
        public bool UseDismantle = true;
        public bool UseDispatch = true;
        public bool UseEngGlove = true;
        public bool UseEnvenom = true;
        public bool UseEvasion = true;
        public bool UseExposeArmor = false;
        public bool UseFanofKnives = true;
        public bool UseGarrote = true;
        public bool UseGiftoftheNaaru = true;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public bool UseKick = true;
        public bool UseKidneyShot = true;
        public bool UseLeechingPoison = true;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMindnumbingPoison = true;
        public bool UseMutilate = true;
        public bool UseParalyticPoison = false;
        public bool UsePreparation = true;
        public bool UseRecuperate = true;
        public bool UseRedirect = true;
        public bool UseRupture = true;
        public bool UseShadowBlades = true;
        public bool UseShadowFocus = false;
        public bool UseShadowStep = true;
        public bool UseShiv = true;
        public bool UseShurikenToss = true;
        public bool UseSliceandDice = true;
        public bool UseSmokeBomb = true;
        public bool UseSprint = true;
        public bool UseStealth = false;
        public bool UseStoneform = true;
        public int UseStoneformAtPercentage = 80;
        public bool UseThrow = true;
        public bool UseTrinketOne = true;
        public bool UseTrinketTwo = true;
        public bool UseVanish = true;
        public bool UseVendetta = true;
        public bool UseWarStomp = true;
        public int UseWarStompAtPercentage = 80;
        public bool UseWoundPoison = false;

        public RogueAssassinationSettings()
        {
            ConfigWinForm(new Point(500, 400), "Rogue Assassination Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Rogue Buffs */
            AddControlInWinForm("Use Burst of Speed", "UseBurstofSpeed", "Rogue Buffs");
            AddControlInWinForm("Use Crippling Poison", "UseCripplingPoison", "Rogue Buffs");
            AddControlInWinForm("Use Deadly Poison", "UseDeadlyPoison", "Rogue Buffs");
            AddControlInWinForm("Use Leeching Poison", "UseLeechingPoison", "Rogue Buffs");
            AddControlInWinForm("Use Mindnumbing Poison", "UseMindnumbingPoison", "Rogue Buffs");
            AddControlInWinForm("Use Paralytic Poison", "UseParalyticPoison", "Rogue Buffs");
            AddControlInWinForm("Use Slice and Dice", "UseSliceandDice", "Rogue Buffs");
            AddControlInWinForm("Use Sprint", "UseSprint", "Rogue Buffs");
            AddControlInWinForm("Use Stealth", "UseStealth", "Rogue Buffs");
            AddControlInWinForm("Use Wound Poison", "UseWoundPoison", "Rogue Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Ambush", "UseAmbush", "Offensive Spell");
            AddControlInWinForm("Use Crimson Tempest", "UseCrimsonTempest", "Offensive Spell");
            AddControlInWinForm("Use Deadly Throw", "UseDeadlyThrow", "Offensive Spell");
            AddControlInWinForm("Use Dispatch", "UseDispatch", "Offensive Spell");
            AddControlInWinForm("Use Envenom", "UseEnvenom", "Offensive Spell");
            AddControlInWinForm("Use Expose Armor", "UseExposeArmor", "Offensive Spell");
            AddControlInWinForm("Use Fan of Knives", "UseFanofKnives", "Offensive Spell");
            AddControlInWinForm("Use Garrote", "UseGarrote", "Offensive Spell");
            AddControlInWinForm("Use Mutilate", "UseMutilate", "Offensive Spell");
            AddControlInWinForm("Use Rupture", "UseRupture", "Offensive Spell");
            AddControlInWinForm("Use Shiv", "UseShiv", "Offensive Spell");
            AddControlInWinForm("Use Shuriken Toss", "UseShurikenToss", "Offensive Spell");
            AddControlInWinForm("Use Throw", "UseThrow", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Redirect", "UseRedirect", "Offensive Cooldown");
            AddControlInWinForm("Use Shadow Blades", "UseShadowBlades", "Offensive Cooldown");
            AddControlInWinForm("Use Shadow Step", "UseShadowStep", "Offensive Cooldown");
            AddControlInWinForm("Use Vendetta", "UseVendetta", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use CheapShot", "UseCheapShot", "Defensive Cooldown");
            AddControlInWinForm("Use CloakofShadows", "UseCloakofShadows", "Defensive Cooldown");
            AddControlInWinForm("Use CombatReadiness", "UseCombatReadiness", "Defensive Cooldown");
            AddControlInWinForm("Use Dismantle", "UseDismantle", "Defensive Cooldown");
            AddControlInWinForm("Use Evasion", "UseEvasion", "Defensive Cooldown");
            AddControlInWinForm("Use Kick", "UseKick", "Defensive Cooldown");
            AddControlInWinForm("Use KidneyShot", "UseKidneyShot", "Defensive Cooldown");
            AddControlInWinForm("Use Preparation", "UsePreparation", "Defensive Cooldown");
            AddControlInWinForm("Use SmokeBomb", "UseSmokeBomb", "Defensive Cooldown");
            AddControlInWinForm("Use Vanish", "UseVanish", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Recuperate", "UseRecuperate", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
            AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Use Shadow Focus Talent?", "UseShadowFocus", "Game Settings");
            AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
            AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
        }

        public static RogueAssassinationSettings CurrentSetting { get; set; }

        public static RogueAssassinationSettings GetSettings()
        {
            string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Rogue_Assassination.xml";
            if (File.Exists(currentSettingsFile))
            {
                return
                    CurrentSetting = Load<RogueAssassinationSettings>(currentSettingsFile);
            }
            else
            {
                return new RogueAssassinationSettings();
            }
        }
    }

    #endregion
}

#endregion

#region Warrior

public class WarriorArms
{
    private readonly WarriorArmsSettings mySettings = WarriorArmsSettings.GetSettings();

    #region General Timers & Variables

    //private readonly WoWItem FirstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
    //private readonly WoWItem SecondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);

    private Timer AlchFlaskTimer = new Timer(0);
    private Timer EngineeringTimer = new Timer(0);
    public int LC = 0;
    private Timer OnCD = new Timer(0);
    private Timer TrinketOneTimer = new Timer(0);
    private Timer TrinketTwoTimer = new Timer(0);

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell BloodFury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell WarStomp = new Spell("War Stomp");

    #endregion

    #region Warrior Buffs

    private readonly Spell BattleShout = new Spell("Battle Shout");
    private readonly Spell BattleStance = new Spell("Battle Stance");
    private readonly Spell BerserkerStance = new Spell("Berserker Stance");
    private readonly Spell CommandingShout = new Spell("Commanding Shout");
    private readonly Spell DefensiveStance = new Spell("Defensive Stance");

    #endregion

    #region Offensive Spell

    private readonly Spell Avatar = new Spell("Avatar");
    private readonly Spell Bladestorm = new Spell("Bladestorm");
    private readonly Spell Bloodbath = new Spell("Bloodbath");
    private readonly Spell Charge = new Spell("Charge");
    private readonly Spell Cleave = new Spell("Cleave");
    private readonly Spell ColossusSmash = new Spell("Colossus Smash");
    private readonly Spell DragonRoar = new Spell("Dragon Roar");
    private readonly Spell Execute = new Spell("Execute");
    private readonly Spell HeroicLeap = new Spell("Heroic Leap");
    private readonly Spell HeroicStrike = new Spell("Heroic Strike");
    private readonly Spell HeroicThrow = new Spell("Heroic Throw");
    private readonly Spell ImpendingVictory = new Spell("Impending Victory");
    private readonly Spell MortalStrike = new Spell("Mortal Strike");
    private readonly Spell Overpower = new Spell("Overpower");
    private readonly Spell Shockwave = new Spell("Shockwave");
    private readonly Spell Slam = new Spell("Slam");
    private readonly Spell StormBolt = new Spell("Storm Bolt");
    private readonly Spell Taunt = new Spell("Taunt");
    private readonly Spell ThunderClap = new Spell("Thunder Clap");
    private readonly Spell Whirlwind = new Spell("Whirlwind");

    #endregion

    #region Offensive Cooldown

    private readonly Spell BerserkerRage = new Spell("Berserker Rage");
    private readonly Spell DeadlyCalm = new Spell("Deadly Calm");
    private readonly Spell Recklessness = new Spell("Recklessness");
    private readonly Spell ShatteringThrow = new Spell("Shattering Throw");
    private readonly Spell SkullBanner = new Spell("Skull Banner");
    private readonly Spell SweepingStrikes = new Spell("Sweeping Strikes");

    #endregion

    #region Defensive Cooldown

    private readonly Spell DemoralizingBanner = new Spell("Demoralizing Banner");
    private readonly Spell DiebytheSword = new Spell("Die by the Sword");
    private readonly Spell Disarm = new Spell("Disarm");
    private readonly Spell DisruptingShout = new Spell("Disrupting Shout");
    private readonly Spell Hamstring = new Spell("Hamstring");
    private readonly Spell IntimidatingShout = new Spell("Intimidating Shout");
    private readonly Spell MassSpellReflection = new Spell("Mass Spell Reflection");
    private readonly Spell PiercingHowl = new Spell("Piercing Howl");
    private readonly Spell Pummel = new Spell("Pummel");
    private readonly Spell StaggeringShout = new Spell("Staggering Shout");
    private Timer DisarmTimer = new Timer(0);

    #endregion

    #region Healing Spell

    private readonly Spell EnragedRegeneration = new Spell("Enraged Regeneration");
    private readonly Spell RallyingCry = new Spell("Rallying Cry");
    private readonly Spell VictoryRush = new Spell("Victory Rush");

    #endregion

    public WarriorArms()
    {
        Main.range = 5.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && Taunt.IsHostileDistanceGood)
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && mySettings.UseLowCombat)
                            {
                                LC = 1;
                                if (ObjectManager.Target.GetDistance < 30)
                                    LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                if (ObjectManager.Target.GetDistance < 30)
                                    Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void Pull()
    {
        if (HeroicLeap.IsHostileDistanceGood && HeroicLeap.KnownSpell && HeroicLeap.IsSpellUsable
            && mySettings.UseHeroicLeap)
        {
            SpellManager.CastSpellByIDAndPosition(6544, ObjectManager.Target.Position);
            Thread.Sleep(200);
        }

        if (Taunt.IsHostileDistanceGood && Taunt.KnownSpell && Taunt.IsSpellUsable
            && mySettings.UseTaunt && ObjectManager.Target.GetDistance > 20)
        {
            Taunt.Launch();
            return;
        }
    }

    private void LowCombat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        DefenseCycle();
        Heal();

        if (HeroicThrow.KnownSpell && HeroicThrow.IsSpellUsable && HeroicThrow.IsHostileDistanceGood
            && mySettings.UseHeroicThrow && !ObjectManager.Target.InCombat)
        {
            HeroicThrow.Launch();
            return;
        }

        if (Charge.KnownSpell && Charge.IsSpellUsable && Charge.IsHostileDistanceGood
            && mySettings.UseCharge && ObjectManager.Target.GetDistance > Main.range)
        {
            Charge.Launch();
            return;
        }

        if (MortalStrike.KnownSpell && MortalStrike.IsSpellUsable && MortalStrike.IsHostileDistanceGood
            && mySettings.UseMortalStrike)
        {
            MortalStrike.Launch();
            return;
        }
        else if (ColossusSmash.KnownSpell && ColossusSmash.IsHostileDistanceGood && ColossusSmash.IsSpellUsable
                 && mySettings.UseColossusSmash)
        {
            ColossusSmash.Launch();
            return;
        }
        else if (HeroicStrike.KnownSpell && HeroicStrike.IsSpellUsable && HeroicStrike.IsHostileDistanceGood
                 && mySettings.UseHeroicStrike && ObjectManager.GetNumberAttackPlayer() < 3
                 && (ObjectManager.Me.RagePercentage > 90 || ObjectManager.Me.HaveBuff(125831)))
        {
            if (DeadlyCalm.KnownSpell && DeadlyCalm.IsSpellUsable && mySettings.UseDeadlyCalm)
            {
                DeadlyCalm.Launch();
                Thread.Sleep(200);
            }

            HeroicStrike.Launch();
            return;
        }
        else if (Shockwave.KnownSpell && Shockwave.IsSpellUsable && ObjectManager.Target.GetDistance < 10
                 && mySettings.UseShockwave)
        {
            Shockwave.Launch();
            return;
        }
        else if (DragonRoar.KnownSpell && DragonRoar.IsSpellUsable && ObjectManager.Target.GetDistance < 8
                 && mySettings.UseDragonRoar)
        {
            DragonRoar.Launch();
            return;
        }
        else
        {
            if (Bladestorm.KnownSpell && Bladestorm.IsSpellUsable && ObjectManager.Target.GetDistance < 8
                && mySettings.UseBladestorm)
            {
                Bladestorm.Launch();
                return;
            }
        }

        if (ThunderClap.KnownSpell && ThunderClap.IsSpellUsable && ThunderClap.IsHostileDistanceGood
            && mySettings.UseThunderClap)
        {
            ThunderClap.Launch();
            return;
        }
    }

    private void Combat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        if (OnCD.IsReady)
            DefenseCycle();
        DPSCycle();
        Heal();
        Decast();
        DPSCycle();
        DPSBurst();
        DPSCycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (ObjectManager.Me.HealthPercent < 30 && mySettings.UseDefensiveStance
            && DefensiveStance.KnownSpell && DefensiveStance.IsSpellUsable && !DefensiveStance.HaveBuff)
        {
            DefensiveStance.Launch();
            return;
        }
        else if (!BattleStance.HaveBuff && BattleStance.KnownSpell && BattleStance.IsSpellUsable
                 && mySettings.UseBattleStance && ObjectManager.Me.HealthPercent > 50)
        {
            BattleStance.Launch();
            return;
        }
        else if (!BerserkerStance.HaveBuff && BerserkerStance.KnownSpell && BerserkerStance.IsSpellUsable
                 && mySettings.UseBerserkerStance && !mySettings.UseBattleStance && ObjectManager.Me.HealthPercent > 50)
        {
            BerserkerStance.Launch();
            return;
        }
        else if (BattleShout.KnownSpell && BattleShout.IsSpellUsable && !BattleShout.HaveBuff
                 && mySettings.UseBattleShout)
        {
            BattleShout.Launch();
            return;
        }
        else
        {
            if (CommandingShout.KnownSpell && CommandingShout.IsSpellUsable && !CommandingShout.HaveBuff
                && mySettings.UseCommandingShout && !mySettings.UseBattleShout)
            {
                CommandingShout.Launch();
                return;
            }
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            var maxTimeTimer = new Timer(1000*2);
            MovementsAction.MoveBackward(true);
            while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                Thread.Sleep(300);
            MovementsAction.MoveBackward(false);
            if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
            {
                MovementsAction.MoveForward(true);
                Thread.Sleep(1000);
                MovementsAction.MoveForward(false);
                MovementManager.Face(ObjectManager.Target.Position);
            }
        }
    }

    private void DefenseCycle()
    {
        if (ObjectManager.Me.HealthPercent < 95 && mySettings.UseDisarm && Disarm.IsHostileDistanceGood
            && Disarm.KnownSpell && Disarm.IsSpellUsable && DisarmTimer.IsReady)
        {
            Disarm.Launch();
            DisarmTimer = new Timer(1000*60);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 20 && mySettings.UseIntimidatingShout
                 && IntimidatingShout.KnownSpell && IntimidatingShout.IsSpellUsable &&
                 ObjectManager.Target.GetDistance < 8)
        {
            IntimidatingShout.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && mySettings.UseDiebytheSword
                 && DiebytheSword.KnownSpell && DiebytheSword.IsSpellUsable)
        {
            DiebytheSword.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && mySettings.UseDemoralizingBanner
                 && DemoralizingBanner.KnownSpell && DemoralizingBanner.IsSpellUsable &&
                 ObjectManager.Target.GetDistance < 30)
        {
            SpellManager.CastSpellByIDAndPosition(114203, ObjectManager.Target.Position);
            OnCD = new Timer(1000*15);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable &&
                 WarStomp.KnownSpell
                 && mySettings.UseWarStomp)
        {
            WarStomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent <= mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable &&
                Stoneform.KnownSpell
                && mySettings.UseStoneform)
            {
                Stoneform.Launch();
                OnCD = new Timer(1000*8);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (VictoryRush.KnownSpell && VictoryRush.IsSpellUsable && VictoryRush.IsHostileDistanceGood
            && mySettings.UseVictoryRush && ObjectManager.Me.HealthPercent < 90)
        {
            VictoryRush.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 30 && RallyingCry.IsSpellUsable && RallyingCry.KnownSpell
                 && mySettings.UseRallyingCry && Fight.InFight)
        {
            RallyingCry.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseGiftoftheNaaruAtPercentage &&
                 GiftoftheNaaru.IsSpellUsable && GiftoftheNaaru.KnownSpell
                 && mySettings.UseGiftoftheNaaru)
        {
            GiftoftheNaaru.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent < 80 && EnragedRegeneration.IsSpellUsable &&
                EnragedRegeneration.KnownSpell
                && mySettings.UseEnragedRegeneration)
            {
                EnragedRegeneration.Launch();
                return;
            }
        }
    }

    private void Decast()
    {
        if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8
            && ObjectManager.Me.HealthPercent <= mySettings.UseArcaneTorrentForDecastAtPercentage
            && mySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else if (!Hamstring.TargetHaveBuff && mySettings.UseHamstring && Hamstring.KnownSpell
                 && Hamstring.IsSpellUsable && Hamstring.IsHostileDistanceGood)
        {
            Hamstring.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && Pummel.IsHostileDistanceGood
                 && Pummel.KnownSpell && Pummel.IsSpellUsable && mySettings.UsePummel)
        {
            Pummel.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe &&
                 ObjectManager.Target.GetDistance < 10
                 && DisruptingShout.KnownSpell && DisruptingShout.IsSpellUsable && mySettings.UseDisruptingShout)
        {
            DisruptingShout.Launch();
            return;
        }
        else if (ObjectManager.Target.GetMove && !PiercingHowl.TargetHaveBuff && mySettings.UsePiercingHowl
                 && PiercingHowl.KnownSpell && PiercingHowl.IsSpellUsable && ObjectManager.Target.GetDistance < 15)
        {
            PiercingHowl.Launch();
            return;
        }
        else if (Hamstring.TargetHaveBuff && mySettings.UseStaggeringShout && StaggeringShout.KnownSpell
                 && StaggeringShout.IsSpellUsable && ObjectManager.Target.GetDistance < 20)
        {
            StaggeringShout.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe &&
                mySettings.UseMassSpellReflection
                && MassSpellReflection.KnownSpell && MassSpellReflection.IsSpellUsable)
            {
                MassSpellReflection.Launch();
                return;
            }
        }
    }

    private void DPSBurst()
    {
        /*if (mySettings.UseTrinket)
        {
            if (!SpellManager.HaveBuffLua(ItemsManager.GetItemSpellByItemName(FirstTrinket.Name)))
            {
                if (ItemsManager.IsUsableItemByName(FirstTrinket.Name) && !ItemsManager.IsItemOnCooldown((uint) FirstTrinket.Entry))
                {
                    ItemsManager.UseItem(FirstTrinket.Name);
                    Logging.WriteFight("Use First Trinket Slot");
                }
            }
            if (!SpellManager.HaveBuffLua(ItemsManager.GetItemSpellByItemName(SecondTrinket.Name)))
            {
                if (ItemsManager.IsUsableItemByName(SecondTrinket.Name) && !ItemsManager.IsItemOnCooldown((uint)SecondTrinket.Entry))
                {
                    ItemsManager.UseItem(SecondTrinket.Name);
                    Logging.WriteFight("Use Second Trinket Slot");
                }
            }
        }*/
        if (mySettings.UseTrinketOne && TrinketOneTimer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketOneTimer = new Timer(1000*60*2);
        }
        else if (mySettings.UseTrinketTwo && TrinketTwoTimer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketTwoTimer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseBerserking)
            Berserking.Launch();
        else if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseBloodFury)
            BloodFury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (EngineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            EngineeringTimer = new Timer(1000*60);
        }
        else if (BerserkerRage.KnownSpell && BerserkerRage.IsSpellUsable && ObjectManager.Me.RagePercentage < 50
                 && mySettings.UseBerserkerRage && ObjectManager.Target.GetDistance < 30)
        {
            BerserkerRage.Launch();
            return;
        }
        else if (BattleShout.KnownSpell && BattleShout.IsSpellUsable && ObjectManager.Me.RagePercentage < 80
                 && mySettings.UseBattleShout && ObjectManager.Target.GetDistance < 30)
        {
            BattleShout.Launch();
            return;
        }
        else if (CommandingShout.KnownSpell && CommandingShout.IsSpellUsable && ObjectManager.Me.RagePercentage < 80
                 && mySettings.UseCommandingShout && !mySettings.UseBattleShout && ObjectManager.Target.GetDistance < 30)
        {
            CommandingShout.Launch();
            return;
        }
        else if (Recklessness.KnownSpell && Recklessness.IsSpellUsable && mySettings.UseRecklessness
                 && ObjectManager.Target.GetDistance < 30)
        {
            Recklessness.Launch();
            return;
        }
        else if (ShatteringThrow.KnownSpell && ShatteringThrow.IsSpellUsable && ShatteringThrow.IsHostileDistanceGood
                 && mySettings.UseShatteringThrow)
        {
            ShatteringThrow.Launch();
            return;
        }
        else if (SkullBanner.KnownSpell && SkullBanner.IsSpellUsable
                 && mySettings.UseSkullBanner && ObjectManager.Target.GetDistance < 30)
        {
            SkullBanner.Launch();
            return;
        }
        else if (Avatar.KnownSpell && Avatar.IsSpellUsable
                 && mySettings.UseAvatar && ObjectManager.Target.GetDistance < 30)
        {
            Avatar.Launch();
            return;
        }
        else if (Bloodbath.KnownSpell && Bloodbath.IsSpellUsable
                 && mySettings.UseBloodbath && ObjectManager.Target.GetDistance < 30)
        {
            Bloodbath.Launch();
            return;
        }
        else if (DeadlyCalm.KnownSpell && DeadlyCalm.IsSpellUsable && ObjectManager.Me.RagePercentage > 90
                 && mySettings.UseDeadlyCalm && HeroicStrike.IsHostileDistanceGood)
        {
            DeadlyCalm.Launch();
            return;
        }
        else
        {
            if (StormBolt.KnownSpell && StormBolt.IsSpellUsable
                && mySettings.UseStormBolt && StormBolt.IsHostileDistanceGood)
            {
                StormBolt.Launch();
                return;
            }
        }

        if (HeroicStrike.KnownSpell && HeroicStrike.IsSpellUsable && HeroicStrike.IsHostileDistanceGood
            && mySettings.UseHeroicStrike && ObjectManager.Me.Level < 10)
        {
            HeroicStrike.Launch();
            return;
        }
    }

    private void DPSCycle()
    {
        if (HeroicThrow.KnownSpell && HeroicThrow.IsSpellUsable && HeroicThrow.IsHostileDistanceGood
            && mySettings.UseHeroicThrow && !ObjectManager.Target.InCombat)
        {
            HeroicThrow.Launch();
            return;
        }

        if (Charge.KnownSpell && Charge.IsSpellUsable && Charge.IsHostileDistanceGood
            && mySettings.UseCharge && ObjectManager.Target.GetDistance > Main.range)
        {
            Charge.Launch();
            return;
        }

        if (VictoryRush.KnownSpell && VictoryRush.IsSpellUsable && VictoryRush.IsHostileDistanceGood
            && mySettings.UseVictoryRush && ObjectManager.Me.HealthPercent < 90)
        {
            VictoryRush.Launch();
            return;
        }
        else if (SweepingStrikes.KnownSpell && SweepingStrikes.IsSpellUsable &&
                 ObjectManager.GetNumberAttackPlayer() > 1
                 && mySettings.UseSweepingStrikes)
        {
            SweepingStrikes.Launch();
            return;
        }
        else if (ThunderClap.KnownSpell && ThunderClap.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 2
                 && mySettings.UseThunderClap)
        {
            ThunderClap.Launch();
            return;
        }
        else if (Whirlwind.KnownSpell && Whirlwind.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 3
                 && mySettings.UseWhirlwind)
        {
            Whirlwind.Launch();
            return;
        }
        else if (Cleave.KnownSpell && Cleave.IsSpellUsable && Cleave.IsHostileDistanceGood
                 && ObjectManager.GetNumberAttackPlayer() == 3 && mySettings.UseCleave)
        {
            if (DeadlyCalm.KnownSpell && DeadlyCalm.IsSpellUsable && mySettings.UseDeadlyCalm)
            {
                DeadlyCalm.Launch();
                Thread.Sleep(200);
            }

            Cleave.Launch();
            return;
        }
        else if (HeroicStrike.KnownSpell && HeroicStrike.IsSpellUsable && HeroicStrike.IsHostileDistanceGood
                 && mySettings.UseHeroicStrike && ObjectManager.GetNumberAttackPlayer() < 3
                 && (ObjectManager.Me.HaveBuff(125831) || ObjectManager.Me.HaveBuff(85730)))
        {
            if (DeadlyCalm.KnownSpell && DeadlyCalm.IsSpellUsable && mySettings.UseDeadlyCalm)
            {
                DeadlyCalm.Launch();
                Thread.Sleep(200);
            }

            HeroicStrike.Launch();
            return;
        }
        else if (Shockwave.KnownSpell && Shockwave.IsSpellUsable && ObjectManager.Target.GetDistance < 10
                 && mySettings.UseShockwave)
        {
            Shockwave.Launch();
            return;
        }
        else if (DragonRoar.KnownSpell && DragonRoar.IsSpellUsable && ObjectManager.Target.GetDistance < 8
                 && mySettings.UseDragonRoar)
        {
            DragonRoar.Launch();
            return;
        }
        else if (Bladestorm.KnownSpell && Bladestorm.IsSpellUsable && ObjectManager.Target.GetDistance < 8
                 && mySettings.UseBladestorm)
        {
            Bladestorm.Launch();
            return;
        }
        else if (MortalStrike.KnownSpell && MortalStrike.IsSpellUsable && MortalStrike.IsHostileDistanceGood
                 && mySettings.UseMortalStrike && ObjectManager.Me.RagePercentage < 100)
        {
            MortalStrike.Launch();
            return;
        }
        else if (ColossusSmash.KnownSpell && ColossusSmash.IsSpellUsable && ColossusSmash.IsHostileDistanceGood
                 && mySettings.UseColossusSmash)
        {
            ColossusSmash.Launch();
            return;
        }
        else if (Execute.KnownSpell && Execute.IsSpellUsable && Execute.IsHostileDistanceGood
                 && mySettings.UseExecute && ObjectManager.GetNumberAttackPlayer() < 4)
        {
            Execute.Launch();
            return;
        }
        else if (Overpower.KnownSpell && Overpower.IsSpellUsable && Overpower.IsHostileDistanceGood
                 && mySettings.UseOverpower && ObjectManager.Me.RagePercentage < 100)
        {
            Overpower.Launch();
            return;
        }
        else if (Slam.KnownSpell && Slam.IsSpellUsable && Slam.IsHostileDistanceGood && mySettings.UseSlam
                 && ObjectManager.GetNumberAttackPlayer() < 4 && ObjectManager.Target.HealthPercent > 20)
        {
            Slam.Launch();
            return;
        }
        else
        {
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell
                && mySettings.UseArcaneTorrentForResource)
            {
                ArcaneTorrent.Launch();
                return;
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: WarriorArmsSettings

    [Serializable]
    public class WarriorArmsSettings : Settings
    {
        public bool DoAvoidMelee = false;
        public int DoAvoidMeleeDistance = 0;
        public bool UseAlchFlask = true;
        public bool UseArcaneTorrentForDecast = true;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public bool UseArcaneTorrentForResource = true;
        public bool UseAvatar = true;
        public bool UseBattleShout = true;
        public bool UseBattleStance = true;
        public bool UseBerserkerRage = true;
        public bool UseBerserkerStance = false;
        public bool UseBerserking = true;
        public bool UseBladestorm = true;
        public bool UseBloodFury = true;
        public bool UseBloodbath = true;
        public bool UseCharge = true;
        public bool UseCleave = true;
        public bool UseColossusSmash = true;
        public bool UseCommandingShout = false;
        public bool UseDeadlyCalm = true;
        public bool UseDefensiveStance = true;
        public bool UseDemoralizingBanner = true;
        public bool UseDiebytheSword = true;
        public bool UseDisarm = true;
        public bool UseDisruptingShout = true;
        public bool UseDragonRoar = true;
        public bool UseEngGlove = true;
        public bool UseEnragedRegeneration = true;
        public bool UseExecute = true;
        public bool UseGiftoftheNaaru = true;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public bool UseHamstring = false;
        public bool UseHeroicLeap = true;
        public bool UseHeroicStrike = true;
        public bool UseHeroicThrow = true;
        public bool UseIntimidatingShout = true;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMassSpellReflection = true;
        public bool UseMortalStrike = true;
        public bool UseOverpower = true;
        public bool UsePiercingHowl = false;
        public bool UsePummel = true;
        public bool UseRallyingCry = true;
        public bool UseRecklessness = true;
        public bool UseShatteringThrow = true;
        public bool UseShockwave = true;
        public bool UseSkullBanner = true;
        public bool UseSlam = true;
        public bool UseStaggeringShout = true;
        public bool UseStoneform = true;
        public int UseStoneformAtPercentage = 80;
        public bool UseStormBolt = true;
        public bool UseSweepingStrikes = true;
        public bool UseTaunt = true;
        public bool UseThunderClap = true;
        public bool UseTrinketOne = true;
        public bool UseTrinketTwo = true;
        public bool UseVictoryRush = true;
        public bool UseWarStomp = true;
        public int UseWarStompAtPercentage = 80;
        public bool UseWhirlwind = true;

        public WarriorArmsSettings()
        {
            ConfigWinForm(new Point(500, 400), "Warrior Arms Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Warrior Buffs */
            AddControlInWinForm("Use Battle Shout", "UseBattleShout", "Warrior Buffs");
            AddControlInWinForm("Use Battle Stance", "UseBattleStance", "Warrior Buffs");
            AddControlInWinForm("Use Berserker Stance", "UseBerserkerStance", "Warrior Buffs");
            AddControlInWinForm("Use Commanding Shout", "UseCommandingShout", "Warrior Buffs");
            AddControlInWinForm("Use Defensive Stance", "UseDefensiveStance", "Warrior Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Avatar", "UseAvatar", "Offensive Spell");
            AddControlInWinForm("Use Bladestorm", "UseBladestorm", "Offensive Spell");
            AddControlInWinForm("Use Bloodbath", "UseBloodbath", "Offensive Spell");
            AddControlInWinForm("Use Charge", "UseCharge", "Offensive Spell");
            AddControlInWinForm("Use Cleave", "UseCleave", "Offensive Spell");
            AddControlInWinForm("Use Colossus Smash", "UseColossusSmash", "Offensive Spell");
            AddControlInWinForm("Use Dragon Roar", "UseDragonRoar", "Offensive Spell");
            AddControlInWinForm("Use Exectue", "UseExecute", "Offensive Spell");
            AddControlInWinForm("Use Heroic Leap", "UseHeroicLeap", "Offensive Spell");
            AddControlInWinForm("Use Heroic Strike", "UseHeroicStrike", "Offensive Spell");
            AddControlInWinForm("Use Heroic Throw", "UseHeroicThrow", "Offensive Spell");
            AddControlInWinForm("Use Mortal Strike", "UseMortalStrike", "Offensive Spell");
            AddControlInWinForm("Use Overpower", "UseOverpower", "Offensive Spell");
            AddControlInWinForm("Use Shockwave", "UseShockwave", "Offensive Spell");
            AddControlInWinForm("Use Slam", "UseSlam", "Offensive Spell");
            AddControlInWinForm("Use Storm Bolt", "UseStormBolt", "Offensive Spell");
            AddControlInWinForm("Use Taunt", "UseTaunt", "Offensive Spell");
            AddControlInWinForm("Use Thunder Clap", "UseThunderClap", "Offensive Spell");
            AddControlInWinForm("Use Whirlwind", "UseWhirlwind", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Berserker Rage", "UseBerserkerRage", "Offensive Cooldown");
            AddControlInWinForm("Use Deadly Calm", "UseDeadlyCalm", "Offensive Cooldown");
            AddControlInWinForm("Use Recklessness", "UseRecklessness", "Offensive Cooldown");
            AddControlInWinForm("Use Shattering Throw", "UseShatteringThrow", "Offensive Cooldown");
            AddControlInWinForm("Use Sweeping Strikes", "UseSweepingStrikes", "Offensive Cooldown");
            AddControlInWinForm("Use Skull Banner", "UseSkullBanner", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Demoralizing Banner", "UseDemoralizingBanner", "Defensive Cooldown");
            AddControlInWinForm("Use Die by the Sword", "UseDiebytheSword", "Defensive Cooldown");
            AddControlInWinForm("Use Disarm", "UseDisarm", "Defensive Cooldown");
            AddControlInWinForm("Use Disrupting Shout", "UseDisruptingShout", "Defensive Cooldown");
            AddControlInWinForm("Use Hamstring", "UseHamstring", "Defensive Cooldown");
            AddControlInWinForm("Use Intimidating Shout", "UseIntimidatingShout", "Defensive Cooldown");
            AddControlInWinForm("Use Mass Spell Reflection", "UseMassSpellReflection", "Defensive Cooldown");
            AddControlInWinForm("Use Piercing Howl", "UsePiercingHowl", "Defensive Cooldown");
            AddControlInWinForm("Use Pummel", "UsePummel", "Defensive Cooldown");
            AddControlInWinForm("Use Staggering Shout", "UseStaggeringShout", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Enraged Regeneration", "UseEnragedRegeneration", "Healing Spell");
            AddControlInWinForm("Use Rallying Cry", "UseRallyingCry", "Healing Spell");
            AddControlInWinForm("Use Victory Rush", "UseVictoryRush", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
            AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
            AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
        }

        public static WarriorArmsSettings CurrentSetting { get; set; }

        public static WarriorArmsSettings GetSettings()
        {
            string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Warrior_Arms.xml";
            if (File.Exists(currentSettingsFile))
            {
                return
                    CurrentSetting = Load<WarriorArmsSettings>(currentSettingsFile);
            }
            else
            {
                return new WarriorArmsSettings();
            }
        }
    }

    #endregion
}

public class WarriorProtection
{
    private readonly WarriorProtectionSettings mySettings = WarriorProtectionSettings.GetSettings();

    #region General Timers & Variables

    private Timer AlchFlaskTimer = new Timer(0);
    private Timer EngineeringTimer = new Timer(0);
    public int LC = 0;
    private Timer OnCD = new Timer(0);
    private Timer TrinketOneTimer = new Timer(0);
    private Timer TrinketTwoTimer = new Timer(0);

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell BloodFury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell WarStomp = new Spell("War Stomp");

    #endregion

    #region Warrior Buffs

    private readonly Spell BattleShout = new Spell("Battle Shout");
    private readonly Spell BattleStance = new Spell("Battle Stance");
    private readonly Spell BerserkerStance = new Spell("Berserker Stance");
    private readonly Spell CommandingShout = new Spell("Commanding Shout");
    private readonly Spell DefensiveStance = new Spell("Defensive Stance");

    #endregion

    #region Offensive Spell

    private readonly Spell Avatar = new Spell("Avatar");
    private readonly Spell Bladestorm = new Spell("Bladestorm");
    private readonly Spell Bloodbath = new Spell("Bloodbath");
    private readonly Spell Charge = new Spell("Charge");
    private readonly Spell Cleave = new Spell("Cleave");
    private readonly Spell Devastate = new Spell("Devastate");
    private readonly Spell DragonRoar = new Spell("Dragon Roar");
    private readonly Spell Execute = new Spell("Execute");
    private readonly Spell HeroicLeap = new Spell("Heroic Leap");
    private readonly Spell HeroicStrike = new Spell("Heroic Strike");
    private readonly Spell HeroicThrow = new Spell("Heroic Throw");
    private readonly Spell Revenge = new Spell("Revenge");
    private readonly Spell ShieldSlam = new Spell("Shield Slam");
    private readonly Spell Shockwave = new Spell("Shockwave");
    private readonly Spell StormBolt = new Spell("Storm Bolt");
    private readonly Spell SunderArmor = new Spell("Sunder Armor");
    private readonly Spell Taunt = new Spell("Taunt");
    private readonly Spell ThunderClap = new Spell("Thunder Clap");

    #endregion

    #region Offensive Cooldown

    private readonly Spell BerserkerRage = new Spell("Berserker Rage");
    private readonly Spell DeadlyCalm = new Spell("Deadly Calm");
    private readonly Spell Recklessness = new Spell("Recklessness");
    private readonly Spell ShatteringThrow = new Spell("Shattering Throw");
    private readonly Spell SkullBanner = new Spell("Skull Banner");
    private readonly Spell SweepingStrikes = new Spell("Sweeping Strikes");

    #endregion

    #region Defensive Cooldown

    private readonly Spell DemoralizingBanner = new Spell("Demoralizing Banner");
    private readonly Spell DemoralizingShout = new Spell("Demoralizing Shout");
    private readonly Spell Disarm = new Spell("Disarm");
    private readonly Spell DisruptingShout = new Spell("Disrupting Shout");
    private readonly Spell Hamstring = new Spell("Hamstring");
    private readonly Spell IntimidatingShout = new Spell("Intimidating Shout");
    private readonly Spell MassSpellReflection = new Spell("Mass Spell Reflection");
    private readonly Spell PiercingHowl = new Spell("Piercing Howl");
    private readonly Spell Pummel = new Spell("Pummel");
    private readonly Spell ShieldBarrier = new Spell("Shield Barrier");
    private readonly Spell ShieldBlock = new Spell("Shield Block");
    private readonly Spell ShieldWall = new Spell("Shield Wall");
    private readonly Spell SpellReflection = new Spell("Spell Reflection");
    private readonly Spell StaggeringShout = new Spell("Staggering Shout");
    private Timer DisarmTimer = new Timer(0);
    private Timer ShieldBarrierTimer = new Timer(0);

    #endregion

    #region Healing Spell

    private readonly Spell EnragedRegeneration = new Spell("Enraged Regeneration");
    private readonly Spell LastStand = new Spell("Last Stand");
    private readonly Spell RallyingCry = new Spell("Rallying Cry");
    private readonly Spell VictoryRush = new Spell("Victory Rush");

    #endregion

    public WarriorProtection()
    {
        Main.range = 5.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && Taunt.IsHostileDistanceGood)
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && mySettings.UseLowCombat)
                            {
                                LC = 1;
                                if (ObjectManager.Target.GetDistance < 30)
                                    LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                if (ObjectManager.Target.GetDistance < 30)
                                    Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(250);
        }
    }

    private void Pull()
    {
        if (HeroicLeap.IsHostileDistanceGood && HeroicLeap.KnownSpell && HeroicLeap.IsSpellUsable
            && mySettings.UseHeroicLeap)
        {
            SpellManager.CastSpellByIDAndPosition(6544, ObjectManager.Target.Position);
            Thread.Sleep(200);
        }

        if (Taunt.IsHostileDistanceGood && Taunt.KnownSpell && Taunt.IsSpellUsable
            && mySettings.UseTaunt && ObjectManager.Target.GetDistance > 20)
        {
            Taunt.Launch();
            return;
        }
    }

    private void LowCombat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        DefenseCycle();
        Heal();

        if (HeroicThrow.KnownSpell && HeroicThrow.IsSpellUsable && HeroicThrow.IsHostileDistanceGood
            && mySettings.UseHeroicThrow && !ObjectManager.Target.InCombat)
        {
            HeroicThrow.Launch();
            return;
        }

        if (Charge.KnownSpell && Charge.IsSpellUsable && Charge.IsHostileDistanceGood
            && mySettings.UseCharge && ObjectManager.Target.GetDistance > Main.range)
        {
            Charge.Launch();
            return;
        }

        if (ShieldSlam.KnownSpell && ShieldSlam.IsSpellUsable && ShieldSlam.IsHostileDistanceGood
            && ObjectManager.Me.RagePercentage < 95 && mySettings.UseShieldSlam)
        {
            ShieldSlam.Launch();
            return;
        }
        else if (HeroicStrike.KnownSpell && HeroicStrike.IsSpellUsable && HeroicStrike.IsHostileDistanceGood
                 && mySettings.UseHeroicStrike &&
                 (ObjectManager.Me.RagePercentage > 80 || ObjectManager.Me.HaveBuff(122510)))
        {
            if (ObjectManager.Me.HealthPercent > 80)
            {
                if (DeadlyCalm.KnownSpell && DeadlyCalm.IsSpellUsable && mySettings.UseDeadlyCalm)
                {
                    DeadlyCalm.Launch();
                    Thread.Sleep(200);
                }
                HeroicStrike.Launch();
                return;
            }
        }
        else if (Revenge.KnownSpell && Revenge.IsHostileDistanceGood && Revenge.IsSpellUsable
                 && ObjectManager.Me.RagePercentage < 95 && mySettings.UseRevenge)
        {
            Revenge.Launch();
            return;
        }
        else if (Shockwave.KnownSpell && Shockwave.IsSpellUsable && Shockwave.IsHostileDistanceGood
                 && mySettings.UseShockwave)
        {
            Shockwave.Launch();
            return;
        }
        else if (DragonRoar.KnownSpell && DragonRoar.IsSpellUsable && DragonRoar.IsHostileDistanceGood
                 && mySettings.UseDragonRoar)
        {
            DragonRoar.Launch();
            return;
        }
        else if (Bladestorm.KnownSpell && Bladestorm.IsSpellUsable && Bladestorm.IsHostileDistanceGood
                 && mySettings.UseBladestorm)
        {
            Bladestorm.Launch();
            return;
        }
        else
        {
            // Blizzard API Calls for Devastate using Sunder Armor Function
            if (SunderArmor.KnownSpell && SunderArmor.IsSpellUsable && SunderArmor.IsHostileDistanceGood
                && mySettings.UseDevastate)
            {
                SunderArmor.Launch();
                return;
            }
        }

        if (ThunderClap.KnownSpell && ThunderClap.IsSpellUsable && ThunderClap.IsHostileDistanceGood
            && mySettings.UseThunderClap)
        {
            ThunderClap.Launch();
            return;
        }
    }

    private void Combat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        if (OnCD.IsReady)
            DefenseCycle();
        DPSCycle();
        Heal();
        Decast();
        DPSCycle();
        DPSBurst();
        DPSCycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (mySettings.UseDefensiveStance && DefensiveStance.KnownSpell && DefensiveStance.IsSpellUsable
            && !DefensiveStance.HaveBuff && LC != 1)
        {
            DefensiveStance.Launch();
            return;
        }
        else if (!BattleStance.HaveBuff && BattleStance.KnownSpell && BattleStance.IsSpellUsable
                 && mySettings.UseBattleStance && LC == 1)
        {
            BattleStance.Launch();
            return;
        }
        else if (!BerserkerStance.HaveBuff && BerserkerStance.KnownSpell && BerserkerStance.IsSpellUsable
                 && mySettings.UseBerserkerStance && !mySettings.UseBattleStance && !mySettings.UseDefensiveStance)
        {
            BerserkerStance.Launch();
            return;
        }
        else if (BattleShout.KnownSpell && BattleShout.IsSpellUsable && !BattleShout.HaveBuff
                 && mySettings.UseBattleShout)
        {
            BattleShout.Launch();
            return;
        }
        else
        {
            if (CommandingShout.KnownSpell && CommandingShout.IsSpellUsable && !CommandingShout.HaveBuff
                && mySettings.UseCommandingShout && !mySettings.UseBattleShout)
            {
                CommandingShout.Launch();
                return;
            }
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            var maxTimeTimer = new Timer(1000*2);
            MovementsAction.MoveBackward(true);
            while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                Thread.Sleep(300);
            MovementsAction.MoveBackward(false);
            if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
            {
                MovementsAction.MoveForward(true);
                Thread.Sleep(1000);
                MovementsAction.MoveForward(false);
                MovementManager.Face(ObjectManager.Target.Position);
            }
        }
    }

    private void DefenseCycle()
    {
        if (ObjectManager.Me.HealthPercent < 95 && mySettings.UseDisarm && Disarm.IsHostileDistanceGood
            && Disarm.KnownSpell && Disarm.IsSpellUsable && DisarmTimer.IsReady)
        {
            Disarm.Launch();
            DisarmTimer = new Timer(1000*60);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 20 && mySettings.UseIntimidatingShout
                 && IntimidatingShout.KnownSpell && IntimidatingShout.IsSpellUsable &&
                 ObjectManager.Target.GetDistance < 8)
        {
            IntimidatingShout.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 60 && ShieldWall.KnownSpell && ShieldWall.IsSpellUsable
                 && mySettings.UseShieldWall)
        {
            ShieldWall.Launch();
            OnCD = new Timer(1000*12);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && mySettings.UseDemoralizingBanner
                 && DemoralizingBanner.KnownSpell && DemoralizingBanner.IsSpellUsable &&
                 ObjectManager.Target.GetDistance < 30)
        {
            SpellManager.CastSpellByIDAndPosition(114203, ObjectManager.Target.Position);
            OnCD = new Timer(1000*15);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 90 && mySettings.UseDemoralizingShout
                 && DemoralizingShout.KnownSpell && DemoralizingShout.IsSpellUsable &&
                 ObjectManager.Target.GetDistance < 30)
        {
            DemoralizingShout.Launch();
            OnCD = new Timer(1000*10);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable &&
                 WarStomp.KnownSpell
                 && mySettings.UseWarStomp)
        {
            WarStomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable &&
                 Stoneform.KnownSpell
                 && mySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent < 80 && ShieldBlock.KnownSpell && ShieldBlock.IsSpellUsable
                && mySettings.UseShieldBlock)
            {
                ShieldBlock.Launch();
                OnCD = new Timer(1000*6);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (VictoryRush.KnownSpell && VictoryRush.IsSpellUsable && VictoryRush.IsHostileDistanceGood
            && mySettings.UseVictoryRush && ObjectManager.Me.HealthPercent < 90)
        {
            VictoryRush.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 30 && LastStand.IsSpellUsable && LastStand.KnownSpell
                 && mySettings.UseLastStand && Fight.InFight)
        {
            LastStand.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 30 && RallyingCry.IsSpellUsable && RallyingCry.KnownSpell
                 && mySettings.UseRallyingCry && Fight.InFight && !LastStand.HaveBuff)
        {
            RallyingCry.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseGiftoftheNaaruAtPercentage &&
                 GiftoftheNaaru.IsSpellUsable && GiftoftheNaaru.KnownSpell
                 && mySettings.UseGiftoftheNaaru)
        {
            GiftoftheNaaru.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent < 80 && EnragedRegeneration.IsSpellUsable &&
                EnragedRegeneration.KnownSpell
                && mySettings.UseEnragedRegeneration)
            {
                EnragedRegeneration.Launch();
                return;
            }
        }
    }

    private void Decast()
    {
        if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8
            && ObjectManager.Me.HealthPercent <= mySettings.UseArcaneTorrentForDecastAtPercentage
            && mySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else if (!Hamstring.TargetHaveBuff && mySettings.UseHamstring && Hamstring.KnownSpell
                 && Hamstring.IsSpellUsable && Hamstring.IsHostileDistanceGood)
        {
            Hamstring.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && Pummel.IsHostileDistanceGood
                 && Pummel.KnownSpell && Pummel.IsSpellUsable && mySettings.UsePummel)
        {
            Pummel.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe &&
                 ObjectManager.Target.GetDistance < 10
                 && DisruptingShout.KnownSpell && DisruptingShout.IsSpellUsable && mySettings.UseDisruptingShout)
        {
            DisruptingShout.Launch();
            return;
        }
        else if (ObjectManager.Target.GetMove && !PiercingHowl.TargetHaveBuff && mySettings.UsePiercingHowl
                 && PiercingHowl.KnownSpell && PiercingHowl.IsSpellUsable && ObjectManager.Target.GetDistance < 15)
        {
            PiercingHowl.Launch();
            return;
        }
        else if (Hamstring.TargetHaveBuff && mySettings.UseStaggeringShout && StaggeringShout.KnownSpell
                 && StaggeringShout.IsSpellUsable && ObjectManager.Target.GetDistance < 20)
        {
            StaggeringShout.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && SpellReflection.KnownSpell && SpellReflection.IsSpellUsable
                 && mySettings.UseSpellReflection)
        {
            SpellReflection.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe &&
                 mySettings.UseMassSpellReflection
                 && MassSpellReflection.KnownSpell && MassSpellReflection.IsSpellUsable)
        {
            MassSpellReflection.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && ObjectManager.Me.HealthPercent < 80 && ShieldBarrier.KnownSpell
                && ShieldBarrier.IsSpellUsable && mySettings.UseShieldBarrier && ShieldBarrierTimer.IsReady)
            {
                ShieldBarrier.Launch();
                ShieldBarrierTimer = new Timer(1000*6);
                return;
            }
        }
    }

    private void DPSBurst()
    {
        if (mySettings.UseTrinketOne && TrinketOneTimer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketOneTimer = new Timer(1000*60*2);
        }
        else if (mySettings.UseTrinketTwo && TrinketTwoTimer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketTwoTimer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseBerserking)
            Berserking.Launch();
        else if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseBloodFury)
            BloodFury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (EngineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            EngineeringTimer = new Timer(1000*60);
        }
        else if (BerserkerRage.KnownSpell && BerserkerRage.IsSpellUsable && ObjectManager.Me.RagePercentage < 50
                 && mySettings.UseBerserkerRage && ObjectManager.Target.GetDistance < 30)
        {
            BerserkerRage.Launch();
            return;
        }
        else if (BattleShout.KnownSpell && BattleShout.IsSpellUsable && ObjectManager.Me.RagePercentage < 80
                 && mySettings.UseBattleShout && ObjectManager.Target.GetDistance < 30)
        {
            BattleShout.Launch();
            return;
        }
        else if (CommandingShout.KnownSpell && CommandingShout.IsSpellUsable && ObjectManager.Me.RagePercentage < 80
                 && mySettings.UseCommandingShout && !mySettings.UseBattleShout && ObjectManager.Target.GetDistance < 30)
        {
            CommandingShout.Launch();
            return;
        }
        else if (Recklessness.KnownSpell && Recklessness.IsSpellUsable && mySettings.UseRecklessness
                 && ObjectManager.Target.GetDistance < 30)
        {
            Recklessness.Launch();
            return;
        }
        else if (ShatteringThrow.KnownSpell && ShatteringThrow.IsSpellUsable && ShatteringThrow.IsHostileDistanceGood
                 && mySettings.UseShatteringThrow)
        {
            ShatteringThrow.Launch();
            return;
        }
        else if (SkullBanner.KnownSpell && SkullBanner.IsSpellUsable
                 && mySettings.UseSkullBanner && ObjectManager.Target.GetDistance < 30)
        {
            SkullBanner.Launch();
            return;
        }
        else if (Avatar.KnownSpell && Avatar.IsSpellUsable
                 && mySettings.UseAvatar && ObjectManager.Target.GetDistance < 30)
        {
            Avatar.Launch();
            return;
        }
        else if (Bloodbath.KnownSpell && Bloodbath.IsSpellUsable
                 && mySettings.UseBloodbath && ObjectManager.Target.GetDistance < 30)
        {
            Bloodbath.Launch();
            return;
        }
        else
        {
            if (StormBolt.KnownSpell && StormBolt.IsSpellUsable
                && mySettings.UseStormBolt && StormBolt.IsHostileDistanceGood)
            {
                StormBolt.Launch();
                return;
            }
        }
    }

    private void DPSCycle()
    {
        if (HeroicThrow.KnownSpell && HeroicThrow.IsSpellUsable && HeroicThrow.IsHostileDistanceGood
            && mySettings.UseHeroicThrow && !ObjectManager.Target.InCombat)
        {
            HeroicThrow.Launch();
            return;
        }

        if (Charge.KnownSpell && Charge.IsSpellUsable && Charge.IsHostileDistanceGood
            && mySettings.UseCharge && ObjectManager.Target.GetDistance > Main.range)
        {
            Charge.Launch();
            return;
        }

        if (VictoryRush.KnownSpell && VictoryRush.IsSpellUsable && VictoryRush.IsHostileDistanceGood
            && mySettings.UseVictoryRush && ObjectManager.Me.HealthPercent < 90)
        {
            VictoryRush.Launch();
            return;
        }

        if (ObjectManager.GetNumberAttackPlayer() > 2 && ThunderClap.KnownSpell && ThunderClap.IsSpellUsable
            && ThunderClap.IsHostileDistanceGood && mySettings.UseThunderClap)
        {
            ThunderClap.Launch();
            return;
        }

        if (Cleave.KnownSpell && Cleave.IsSpellUsable && Cleave.IsHostileDistanceGood &&
            ObjectManager.GetNumberAttackPlayer() > 2
            && mySettings.UseCleave && (ObjectManager.Me.RagePercentage > 80 || ObjectManager.Me.HaveBuff(122510)))
        {
            if (ObjectManager.Me.HealthPercent > 80)
            {
                if (DeadlyCalm.KnownSpell && DeadlyCalm.IsSpellUsable && mySettings.UseDeadlyCalm)
                {
                    DeadlyCalm.Launch();
                    Thread.Sleep(200);
                }
                Cleave.Launch();
                return;
            }
        }

        else
        {
            if (HeroicStrike.KnownSpell && HeroicStrike.IsSpellUsable && HeroicStrike.IsHostileDistanceGood
                && mySettings.UseHeroicStrike &&
                (ObjectManager.Me.RagePercentage > 80 || ObjectManager.Me.HaveBuff(122510)))
            {
                if (ObjectManager.Me.HealthPercent > 80)
                {
                    if (DeadlyCalm.KnownSpell && DeadlyCalm.IsSpellUsable && mySettings.UseDeadlyCalm)
                    {
                        DeadlyCalm.Launch();
                        Thread.Sleep(200);
                    }
                    HeroicStrike.Launch();
                    return;
                }
            }
        }

        if (ShieldSlam.KnownSpell && ShieldSlam.IsSpellUsable && ShieldSlam.IsHostileDistanceGood
            && mySettings.UseShieldSlam && ObjectManager.Me.RagePercentage < 95)
        {
            ShieldSlam.Launch();
            return;
        }
        else if (Revenge.KnownSpell && Revenge.IsHostileDistanceGood && Revenge.IsSpellUsable
                 && mySettings.UseRevenge && ObjectManager.Me.RagePercentage < 95)
        {
            Revenge.Launch();
            return;
        }
        else if (Shockwave.KnownSpell && Shockwave.IsSpellUsable && Shockwave.IsHostileDistanceGood
                 && mySettings.UseShockwave)
        {
            Shockwave.Launch();
            return;
        }
        else if (DragonRoar.KnownSpell && DragonRoar.IsSpellUsable && DragonRoar.IsHostileDistanceGood
                 && mySettings.UseDragonRoar)
        {
            Shockwave.Launch();
            return;
        }
        else if (Bladestorm.KnownSpell && Bladestorm.IsSpellUsable && Bladestorm.IsHostileDistanceGood
                 && mySettings.UseBladestorm)
        {
            Bladestorm.Launch();
            return;
        }
        else if (ThunderClap.KnownSpell && ThunderClap.IsSpellUsable && ThunderClap.IsHostileDistanceGood
                 && mySettings.UseThunderClap && !ObjectManager.Target.HaveBuff(115798))
        {
            ThunderClap.Launch();
            return;
        }
        else if (BattleShout.KnownSpell && BattleShout.IsSpellUsable && mySettings.UseBattleShout)
        {
            BattleShout.Launch();
            return;
        }
        else if (CommandingShout.KnownSpell && CommandingShout.IsSpellUsable && mySettings.UseCommandingShout
                 && !mySettings.UseBattleShout)
        {
            CommandingShout.Launch();
            return;
        }
        else if (SunderArmor.KnownSpell && SunderArmor.IsSpellUsable && SunderArmor.IsHostileDistanceGood
                 && mySettings.UseDevastate)
        {
            SunderArmor.Launch();
            return;
        }
        else
        {
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell
                && mySettings.UseArcaneTorrentForResource)
            {
                ArcaneTorrent.Launch();
                return;
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: WarriorProtectionSettings

    [Serializable]
    public class WarriorProtectionSettings : Settings
    {
        public bool DoAvoidMelee = false;
        public int DoAvoidMeleeDistance = 0;
        public bool UseAlchFlask = true;
        public bool UseArcaneTorrentForDecast = true;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public bool UseArcaneTorrentForResource = true;
        public bool UseAvatar = true;
        public bool UseBattleShout = true;
        public bool UseBattleStance = true;
        public bool UseBerserkerRage = true;
        public bool UseBerserkerStance = false;
        public bool UseBerserking = true;
        public bool UseBladestorm = true;
        public bool UseBloodFury = true;
        public bool UseBloodbath = true;
        public bool UseCharge = true;
        public bool UseCleave = true;
        public bool UseCommandingShout = false;
        public bool UseDeadlyCalm = true;
        public bool UseDefensiveStance = true;
        public bool UseDemoralizingBanner = true;
        public bool UseDemoralizingShout = true;
        public bool UseDevastate = true;
        public bool UseDisarm = true;
        public bool UseDisruptingShout = true;
        public bool UseDragonRoar = true;
        public bool UseEngGlove = true;
        public bool UseEnragedRegeneration = true;
        public bool UseExecute = true;
        public bool UseGiftoftheNaaru = true;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public bool UseHamstring = false;
        public bool UseHeroicLeap = true;
        public bool UseHeroicStrike = true;
        public bool UseHeroicThrow = true;
        public bool UseIntimidatingShout = true;
        public bool UseLastStand = true;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMassSpellReflection = true;
        public bool UsePiercingHowl = false;
        public bool UsePummel = true;
        public bool UseRallyingCry = true;
        public bool UseRecklessness = true;
        public bool UseRevenge = true;
        public bool UseShatteringThrow = true;
        public bool UseShieldBarrier = true;
        public bool UseShieldBlock = true;
        public bool UseShieldSlam = true;
        public bool UseShieldWall = true;
        public bool UseShockwave = true;
        public bool UseSkullBanner = true;
        public bool UseSpellReflection = true;
        public bool UseStaggeringShout = true;
        public bool UseStoneform = true;
        public int UseStoneformAtPercentage = 80;
        public bool UseStormBolt = true;
        public bool UseSweepingStrikes = true;
        public bool UseTaunt = true;
        public bool UseThunderClap = true;
        public bool UseTrinketOne = true;
        public bool UseTrinketTwo = true;
        public bool UseVictoryRush = true;
        public bool UseWarStomp = true;
        public int UseWarStompAtPercentage = 80;

        public WarriorProtectionSettings()
        {
            ConfigWinForm(new Point(500, 400), "Warrior Protection Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Warrior Buffs */
            AddControlInWinForm("Use Battle Shout", "UseBattleShout", "Warrior Buffs");
            AddControlInWinForm("Use Battle Stance", "UseBattleStance", "Warrior Buffs");
            AddControlInWinForm("Use Berserker Stance", "UseBerserkerStance", "Warrior Buffs");
            AddControlInWinForm("Use Commanding Shout", "UseCommandingShout", "Warrior Buffs");
            AddControlInWinForm("Use Defensive Stance", "UseDefensiveStance", "Warrior Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Avatar", "UseAvatar", "Offensive Spell");
            AddControlInWinForm("Use Bladestorm", "UseBladestorm", "Offensive Spell");
            AddControlInWinForm("Use Bloodbath", "UseBloodbath", "Offensive Spell");
            AddControlInWinForm("Use Charge", "UseCharge", "Offensive Spell");
            AddControlInWinForm("Use Cleave", "UseCleave", "Offensive Spell");
            AddControlInWinForm("Use Devastate", "UseDevastate", "Offensive Spell");
            AddControlInWinForm("Use Dragon Roar", "UseDragonRoar", "Offensive Spell");
            AddControlInWinForm("Use Exectue", "UseExecute", "Offensive Spell");
            AddControlInWinForm("Use Heroic Leap", "UseHeroicLeap", "Offensive Spell");
            AddControlInWinForm("Use Heroic Strike", "UseHeroicStrike", "Offensive Spell");
            AddControlInWinForm("Use Heroic Throw", "UseHeroicThrow", "Offensive Spell");
            AddControlInWinForm("Use Revenge", "UseRevenge", "Offensive Spell");
            AddControlInWinForm("Use Shield Slam", "UseShieldSlam", "Offensive Spell");
            AddControlInWinForm("Use Shockwave", "UseShockwave", "Offensive Spell");
            AddControlInWinForm("Use Storm Bolt", "UseStormBolt", "Offensive Spell");
            AddControlInWinForm("Use Taunt", "UseTaunt", "Offensive Spell");
            AddControlInWinForm("Use Thunder Clap", "UseThunderClap", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Berserker Rage", "UseBerserkerRage", "Offensive Cooldown");
            AddControlInWinForm("Use Deadly Calm", "UseDeadlyCalm", "Offensive Cooldown");
            AddControlInWinForm("Use Recklessness", "UseRecklessness", "Offensive Cooldown");
            AddControlInWinForm("Use Shattering Throw", "UseShatteringThrow", "Offensive Cooldown");
            AddControlInWinForm("Use Sweeping Strikes", "UseSweepingStrikes", "Offensive Cooldown");
            AddControlInWinForm("Use Skull Banner", "UseSkullBanner", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Demoralizing Banner", "UseDemoralizingBanner", "Defensive Cooldown");
            AddControlInWinForm("Use Demoralizing Shout", "UseDemoralizingShout", "Defensive Cooldown");
            AddControlInWinForm("Use Disarm", "UseDisarm", "Defensive Cooldown");
            AddControlInWinForm("Use Disrupting Shout", "UseDisruptingShout", "Defensive Cooldown");
            AddControlInWinForm("Use Hamstring", "UseHamstring", "Defensive Cooldown");
            AddControlInWinForm("Use Intimidating Shout", "UseIntimidatingShout", "Defensive Cooldown");
            AddControlInWinForm("Use Mass Spell Reflection", "UseMassSpellReflection", "Defensive Cooldown");
            AddControlInWinForm("Use Piercing Howl", "UsePiercingHowl", "Defensive Cooldown");
            AddControlInWinForm("Use Pummel", "UsePummel", "Defensive Cooldown");
            AddControlInWinForm("Use Shield Barrier", "UseShieldBarrier", "Defensive Cooldown");
            AddControlInWinForm("Use Shield Block", "UseShieldBlock", "Defensive Cooldown");
            AddControlInWinForm("Use Shield Wall", "UseShieldWall", "Defensive Cooldown");
            AddControlInWinForm("Use Spell Reflection", "UseSpellReflection", "Defensive Cooldown");
            AddControlInWinForm("Use Staggering Shout", "UseStaggeringShout", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Enraged Regeneration", "UseEnragedRegeneration", "Healing Spell");
            AddControlInWinForm("Use Last Stand", "UseLastStand", "Healing Spell");
            AddControlInWinForm("Use Rallying Cry", "UseRallyingCry", "Healing Spell");
            AddControlInWinForm("Use Victory Rush", "UseVictoryRush", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
            AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
            AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
        }

        public static WarriorProtectionSettings CurrentSetting { get; set; }

        public static WarriorProtectionSettings GetSettings()
        {
            string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Warrior_Protection.xml";
            if (File.Exists(currentSettingsFile))
            {
                return
                    CurrentSetting = Load<WarriorProtectionSettings>(currentSettingsFile);
            }
            else
            {
                return new WarriorProtectionSettings();
            }
        }
    }

    #endregion
}

public class WarriorFury
{
    private readonly WarriorFurySettings mySettings = WarriorFurySettings.GetSettings();

    #region General Timers & Variables

    private Timer AlchFlaskTimer = new Timer(0);
    private Timer EngineeringTimer = new Timer(0);
    public int LC = 0;
    private Timer OnCD = new Timer(0);
    private Timer TrinketOneTimer = new Timer(0);
    private Timer TrinketTwoTimer = new Timer(0);

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell BloodFury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell WarStomp = new Spell("War Stomp");

    #endregion

    #region Warrior Buffs

    private readonly Spell BattleShout = new Spell("Battle Shout");
    private readonly Spell BattleStance = new Spell("Battle Stance");
    private readonly Spell BerserkerStance = new Spell("Berserker Stance");
    private readonly Spell CommandingShout = new Spell("Commanding Shout");
    private readonly Spell DefensiveStance = new Spell("Defensive Stance");

    #endregion

    #region Offensive Spell

    private readonly Spell Avatar = new Spell("Avatar");
    private readonly Spell Bladestorm = new Spell("Bladestorm");
    private readonly Spell Bloodbath = new Spell("Bloodbath");
    private readonly Spell Bloodthirst = new Spell("Bloodthirst");
    private readonly Spell Charge = new Spell("Charge");
    private readonly Spell Cleave = new Spell("Cleave");
    private readonly Spell ColossusSmash = new Spell("Colossus Smash");
    private readonly Spell DragonRoar = new Spell("Dragon Roar");
    private readonly Spell Execute = new Spell("Execute");
    private readonly Spell HeroicLeap = new Spell("Heroic Leap");
    private readonly Spell HeroicStrike = new Spell("Heroic Strike");
    private readonly Spell HeroicThrow = new Spell("Heroic Throw");
    private readonly Spell ImpendingVictory = new Spell("Impending Victory");
    private readonly Spell RagingBlow = new Spell("Raging Blow");
    private readonly Spell Shockwave = new Spell("Shockwave");
    private readonly Spell StormBolt = new Spell("Storm Bolt");
    private readonly Spell Taunt = new Spell("Taunt");
    private readonly Spell ThunderClap = new Spell("Thunder Clap");
    private readonly Spell Whirlwind = new Spell("Whirlwind");
    private readonly Spell WildStrike = new Spell("Wild Strike");

    #endregion

    #region Offensive Cooldown

    private readonly Spell BerserkerRage = new Spell("Berserker Rage");
    private readonly Spell DeadlyCalm = new Spell("Deadly Calm");
    private readonly Spell Recklessness = new Spell("Recklessness");
    private readonly Spell ShatteringThrow = new Spell("Shattering Throw");
    private readonly Spell SkullBanner = new Spell("Skull Banner");
    private readonly Spell SweepingStrikes = new Spell("Sweeping Strikes");

    #endregion

    #region Defensive Cooldown

    private readonly Spell DemoralizingBanner = new Spell("Demoralizing Banner");
    private readonly Spell DiebytheSword = new Spell("Die by the Sword");
    private readonly Spell Disarm = new Spell("Disarm");
    private readonly Spell DisruptingShout = new Spell("Disrupting Shout");
    private readonly Spell Hamstring = new Spell("Hamstring");
    private readonly Spell IntimidatingShout = new Spell("Intimidating Shout");
    private readonly Spell MassSpellReflection = new Spell("Mass Spell Reflection");
    private readonly Spell PiercingHowl = new Spell("Piercing Howl");
    private readonly Spell Pummel = new Spell("Pummel");
    private readonly Spell StaggeringShout = new Spell("Staggering Shout");
    private Timer DisarmTimer = new Timer(0);

    #endregion

    #region Healing Spell

    private readonly Spell EnragedRegeneration = new Spell("Enraged Regeneration");
    private readonly Spell RallyingCry = new Spell("Rallying Cry");
    private readonly Spell VictoryRush = new Spell("Victory Rush");

    #endregion

    public WarriorFury()
    {
        Main.range = 5.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && Taunt.IsHostileDistanceGood)
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && mySettings.UseLowCombat)
                            {
                                LC = 1;
                                if (ObjectManager.Target.GetDistance < 30)
                                    LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                if (ObjectManager.Target.GetDistance < 30)
                                    Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(250);
        }
    }

    private void Pull()
    {
        if (HeroicLeap.IsHostileDistanceGood && HeroicLeap.KnownSpell && HeroicLeap.IsSpellUsable
            && mySettings.UseHeroicLeap)
        {
            SpellManager.CastSpellByIDAndPosition(6544, ObjectManager.Target.Position);
            Thread.Sleep(200);
        }

        if (Taunt.IsHostileDistanceGood && Taunt.KnownSpell && Taunt.IsSpellUsable
            && mySettings.UseTaunt && ObjectManager.Target.GetDistance > 20)
        {
            Taunt.Launch();
            return;
        }
    }

    private void LowCombat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        DefenseCycle();
        Heal();

        if (HeroicThrow.KnownSpell && HeroicThrow.IsSpellUsable && HeroicThrow.IsHostileDistanceGood
            && mySettings.UseHeroicThrow && !ObjectManager.Target.InCombat)
        {
            HeroicThrow.Launch();
            return;
        }

        if (Charge.KnownSpell && Charge.IsSpellUsable && Charge.IsHostileDistanceGood
            && mySettings.UseCharge && ObjectManager.Target.GetDistance > Main.range)
        {
            Charge.Launch();
            return;
        }

        if (Bloodthirst.KnownSpell && Bloodthirst.IsSpellUsable && Bloodthirst.IsHostileDistanceGood
            && mySettings.UseBloodthirst)
        {
            Bloodthirst.Launch();
            return;
        }
        else if (ColossusSmash.KnownSpell && ColossusSmash.IsHostileDistanceGood && ColossusSmash.IsSpellUsable
                 && mySettings.UseColossusSmash)
        {
            ColossusSmash.Launch();
            return;
        }
        else if (HeroicStrike.KnownSpell && HeroicStrike.IsSpellUsable && HeroicStrike.IsHostileDistanceGood
                 && mySettings.UseHeroicStrike && ObjectManager.GetNumberAttackPlayer() < 3
                 && ObjectManager.Me.RagePercentage > 80)
        {
            if (DeadlyCalm.KnownSpell && DeadlyCalm.IsSpellUsable && mySettings.UseDeadlyCalm)
            {
                DeadlyCalm.Launch();
                Thread.Sleep(200);
            }

            HeroicStrike.Launch();
            return;
        }
        else if (Shockwave.KnownSpell && Shockwave.IsSpellUsable && ObjectManager.Target.GetDistance < 10
                 && mySettings.UseShockwave)
        {
            Shockwave.Launch();
            return;
        }
        else if (DragonRoar.KnownSpell && DragonRoar.IsSpellUsable && ObjectManager.Target.GetDistance < 8
                 && mySettings.UseDragonRoar)
        {
            DragonRoar.Launch();
            return;
        }
        else
        {
            if (Bladestorm.KnownSpell && Bladestorm.IsSpellUsable && ObjectManager.Target.GetDistance < 8
                && mySettings.UseBladestorm)
            {
                Bladestorm.Launch();
                return;
            }
        }

        if (ThunderClap.KnownSpell && ThunderClap.IsSpellUsable && ThunderClap.IsHostileDistanceGood
            && mySettings.UseThunderClap)
        {
            ThunderClap.Launch();
            return;
        }
    }

    private void Combat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        if (OnCD.IsReady)
            DefenseCycle();
        DPSCycle();
        Heal();
        Decast();
        DPSCycle();
        DPSBurst();
        DPSCycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (ObjectManager.Me.HealthPercent < 30 && mySettings.UseDefensiveStance
            && DefensiveStance.KnownSpell && DefensiveStance.IsSpellUsable && !DefensiveStance.HaveBuff)
        {
            DefensiveStance.Launch();
            return;
        }
        else if (!BattleStance.HaveBuff && BattleStance.KnownSpell && BattleStance.IsSpellUsable
                 && mySettings.UseBattleStance && ObjectManager.Me.HealthPercent > 50)
        {
            BattleStance.Launch();
            return;
        }
        else if (!BerserkerStance.HaveBuff && BerserkerStance.KnownSpell && BerserkerStance.IsSpellUsable
                 && mySettings.UseBerserkerStance && !mySettings.UseBattleStance && ObjectManager.Me.HealthPercent > 50)
        {
            BerserkerStance.Launch();
            return;
        }
        else if (BattleShout.KnownSpell && BattleShout.IsSpellUsable && !BattleShout.HaveBuff
                 && mySettings.UseBattleShout)
        {
            BattleShout.Launch();
            return;
        }
        else
        {
            if (CommandingShout.KnownSpell && CommandingShout.IsSpellUsable && !CommandingShout.HaveBuff
                && mySettings.UseCommandingShout && !mySettings.UseBattleShout)
            {
                CommandingShout.Launch();
                return;
            }
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            var maxTimeTimer = new Timer(1000*2);
            MovementsAction.MoveBackward(true);
            while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                Thread.Sleep(300);
            MovementsAction.MoveBackward(false);
            if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
            {
                MovementsAction.MoveForward(true);
                Thread.Sleep(1000);
                MovementsAction.MoveForward(false);
                MovementManager.Face(ObjectManager.Target.Position);
            }
        }
    }

    private void DefenseCycle()
    {
        if (ObjectManager.Me.HealthPercent < 95 && mySettings.UseDisarm && Disarm.IsHostileDistanceGood
            && Disarm.KnownSpell && Disarm.IsSpellUsable && DisarmTimer.IsReady)
        {
            Disarm.Launch();
            DisarmTimer = new Timer(1000*60);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 20 && mySettings.UseIntimidatingShout
                 && IntimidatingShout.KnownSpell && IntimidatingShout.IsSpellUsable &&
                 ObjectManager.Target.GetDistance < 8)
        {
            IntimidatingShout.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && mySettings.UseDiebytheSword
                 && DiebytheSword.KnownSpell && DiebytheSword.IsSpellUsable)
        {
            DiebytheSword.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && mySettings.UseDemoralizingBanner
                 && DemoralizingBanner.KnownSpell && DemoralizingBanner.IsSpellUsable &&
                 ObjectManager.Target.GetDistance < 30)
        {
            SpellManager.CastSpellByIDAndPosition(114203, ObjectManager.Target.Position);
            OnCD = new Timer(1000*15);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable &&
                 WarStomp.KnownSpell
                 && mySettings.UseWarStomp)
        {
            WarStomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent <= mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable &&
                Stoneform.KnownSpell
                && mySettings.UseStoneform)
            {
                Stoneform.Launch();
                OnCD = new Timer(1000*8);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (VictoryRush.KnownSpell && VictoryRush.IsSpellUsable && VictoryRush.IsHostileDistanceGood
            && mySettings.UseVictoryRush && ObjectManager.Me.HealthPercent < 90)
        {
            VictoryRush.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 30 && RallyingCry.IsSpellUsable && RallyingCry.KnownSpell
                 && mySettings.UseRallyingCry && Fight.InFight)
        {
            RallyingCry.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseGiftoftheNaaruAtPercentage &&
                 GiftoftheNaaru.IsSpellUsable && GiftoftheNaaru.KnownSpell
                 && mySettings.UseGiftoftheNaaru)
        {
            GiftoftheNaaru.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent < 80 && EnragedRegeneration.IsSpellUsable &&
                EnragedRegeneration.KnownSpell
                && mySettings.UseEnragedRegeneration)
            {
                EnragedRegeneration.Launch();
                return;
            }
        }
    }

    private void Decast()
    {
        if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8
            && ObjectManager.Me.HealthPercent <= mySettings.UseArcaneTorrentForDecastAtPercentage
            && mySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else if (!Hamstring.TargetHaveBuff && mySettings.UseHamstring && Hamstring.KnownSpell
                 && Hamstring.IsSpellUsable && Hamstring.IsHostileDistanceGood)
        {
            Hamstring.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && Pummel.IsHostileDistanceGood
                 && Pummel.KnownSpell && Pummel.IsSpellUsable && mySettings.UsePummel)
        {
            Pummel.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe &&
                 ObjectManager.Target.GetDistance < 10
                 && DisruptingShout.KnownSpell && DisruptingShout.IsSpellUsable && mySettings.UseDisruptingShout)
        {
            DisruptingShout.Launch();
            return;
        }
        else if (ObjectManager.Target.GetMove && !PiercingHowl.TargetHaveBuff && mySettings.UsePiercingHowl
                 && PiercingHowl.KnownSpell && PiercingHowl.IsSpellUsable && ObjectManager.Target.GetDistance < 15)
        {
            PiercingHowl.Launch();
            return;
        }
        else if (Hamstring.TargetHaveBuff && mySettings.UseStaggeringShout && StaggeringShout.KnownSpell
                 && StaggeringShout.IsSpellUsable && ObjectManager.Target.GetDistance < 20)
        {
            StaggeringShout.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe &&
                mySettings.UseMassSpellReflection
                && MassSpellReflection.KnownSpell && MassSpellReflection.IsSpellUsable)
            {
                MassSpellReflection.Launch();
                return;
            }
        }
    }

    private void DPSBurst()
    {
        if (mySettings.UseTrinketOne && TrinketOneTimer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketOneTimer = new Timer(1000*60*2);
        }
        else if (mySettings.UseTrinketTwo && TrinketTwoTimer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketTwoTimer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseBerserking)
            Berserking.Launch();
        else if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseBloodFury)
            BloodFury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (EngineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            EngineeringTimer = new Timer(1000*60);
        }
        else if (BerserkerRage.KnownSpell && BerserkerRage.IsSpellUsable && ObjectManager.Me.RagePercentage < 50
                 && mySettings.UseBerserkerRage && ObjectManager.Target.GetDistance < 30)
        {
            BerserkerRage.Launch();
            return;
        }
        else if (BattleShout.KnownSpell && BattleShout.IsSpellUsable && ObjectManager.Me.RagePercentage < 80
                 && mySettings.UseBattleShout && ObjectManager.Target.GetDistance < 30)
        {
            BattleShout.Launch();
            return;
        }
        else if (CommandingShout.KnownSpell && CommandingShout.IsSpellUsable && ObjectManager.Me.RagePercentage < 80
                 && mySettings.UseCommandingShout && !mySettings.UseBattleShout && ObjectManager.Target.GetDistance < 30)
        {
            CommandingShout.Launch();
            return;
        }
        else if (Recklessness.KnownSpell && Recklessness.IsSpellUsable && mySettings.UseRecklessness
                 && ObjectManager.Target.GetDistance < 30)
        {
            Recklessness.Launch();
            return;
        }
        else if (ShatteringThrow.KnownSpell && ShatteringThrow.IsSpellUsable && ShatteringThrow.IsHostileDistanceGood
                 && mySettings.UseShatteringThrow)
        {
            ShatteringThrow.Launch();
            return;
        }
        else if (SkullBanner.KnownSpell && SkullBanner.IsSpellUsable
                 && mySettings.UseSkullBanner && ObjectManager.Target.GetDistance < 30)
        {
            SkullBanner.Launch();
            return;
        }
        else if (Avatar.KnownSpell && Avatar.IsSpellUsable
                 && mySettings.UseAvatar && ObjectManager.Target.GetDistance < 30)
        {
            Avatar.Launch();
            return;
        }
        else if (Bloodbath.KnownSpell && Bloodbath.IsSpellUsable
                 && mySettings.UseBloodbath && ObjectManager.Target.GetDistance < 30)
        {
            Bloodbath.Launch();
            return;
        }
        else
        {
            if (StormBolt.KnownSpell && StormBolt.IsSpellUsable
                && mySettings.UseStormBolt && StormBolt.IsHostileDistanceGood)
            {
                StormBolt.Launch();
                return;
            }
        }
    }

    private void DPSCycle()
    {
        if (HeroicThrow.KnownSpell && HeroicThrow.IsSpellUsable && HeroicThrow.IsHostileDistanceGood
            && mySettings.UseHeroicThrow && !ObjectManager.Target.InCombat)
        {
            HeroicThrow.Launch();
            return;
        }

        if (Charge.KnownSpell && Charge.IsSpellUsable && Charge.IsHostileDistanceGood
            && mySettings.UseCharge && ObjectManager.Target.GetDistance > Main.range)
        {
            Charge.Launch();
            return;
        }

        if (VictoryRush.KnownSpell && VictoryRush.IsSpellUsable && VictoryRush.IsHostileDistanceGood
            && mySettings.UseVictoryRush && ObjectManager.Me.HealthPercent < 90)
        {
            VictoryRush.Launch();
            return;
        }
        else if (Whirlwind.KnownSpell && Whirlwind.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 3
                 && mySettings.UseWhirlwind)
        {
            Whirlwind.Launch();
            return;
        }
        else if (Cleave.KnownSpell && Cleave.IsSpellUsable && Cleave.IsHostileDistanceGood && mySettings.UseCleave
                 && ObjectManager.GetNumberAttackPlayer() > 1 && ObjectManager.GetNumberAttackPlayer() < 4)
        {
            if (DeadlyCalm.KnownSpell && DeadlyCalm.IsSpellUsable && mySettings.UseDeadlyCalm)
            {
                DeadlyCalm.Launch();
                Thread.Sleep(200);
            }

            Cleave.Launch();
            return;
        }
        else if (HeroicStrike.KnownSpell && HeroicStrike.IsSpellUsable && HeroicStrike.IsHostileDistanceGood
                 && mySettings.UseHeroicStrike && ObjectManager.GetNumberAttackPlayer() < 3
                 && ObjectManager.Me.RagePercentage > 80)
        {
            if (DeadlyCalm.KnownSpell && DeadlyCalm.IsSpellUsable && mySettings.UseDeadlyCalm)
            {
                DeadlyCalm.Launch();
                Thread.Sleep(200);
            }

            HeroicStrike.Launch();
            return;
        }
        else if (Shockwave.KnownSpell && Shockwave.IsSpellUsable && ObjectManager.Target.GetDistance < 10
                 && mySettings.UseShockwave)
        {
            Shockwave.Launch();
            return;
        }
        else if (DragonRoar.KnownSpell && DragonRoar.IsSpellUsable && ObjectManager.Target.GetDistance < 8
                 && mySettings.UseDragonRoar)
        {
            DragonRoar.Launch();
            return;
        }
        else if (Bladestorm.KnownSpell && Bladestorm.IsSpellUsable && ObjectManager.Target.GetDistance < 8
                 && mySettings.UseBladestorm)
        {
            Bladestorm.Launch();
            return;
        }
        else if (Bloodthirst.KnownSpell && Bloodthirst.IsSpellUsable && Bloodthirst.IsHostileDistanceGood
                 && mySettings.UseBloodthirst)
        {
            Bloodthirst.Launch();
            return;
        }
        else if (ColossusSmash.KnownSpell && ColossusSmash.IsSpellUsable && ColossusSmash.IsHostileDistanceGood
                 && mySettings.UseColossusSmash)
        {
            ColossusSmash.Launch();
            return;
        }
        else if (Execute.KnownSpell && Execute.IsSpellUsable && Execute.IsHostileDistanceGood
                 && mySettings.UseExecute && ObjectManager.GetNumberAttackPlayer() < 4)
        {
            Execute.Launch();
            return;
        }
        else if (RagingBlow.KnownSpell && RagingBlow.IsSpellUsable && RagingBlow.IsHostileDistanceGood
                 && mySettings.UseRagingBlow)
        {
            RagingBlow.Launch();
            return;
        }
        else if (WildStrike.KnownSpell && WildStrike.IsSpellUsable && WildStrike.IsHostileDistanceGood
                 && mySettings.UseWildStrike && ObjectManager.Me.HaveBuff(46915))
        {
            WildStrike.Launch();
            return;
        }
        else
        {
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell
                && mySettings.UseArcaneTorrentForResource)
            {
                ArcaneTorrent.Launch();
                return;
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: WarriorFurySettings

    [Serializable]
    public class WarriorFurySettings : Settings
    {
        public bool DoAvoidMelee = false;
        public int DoAvoidMeleeDistance = 0;
        public bool UseAlchFlask = true;
        public bool UseArcaneTorrentForDecast = true;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public bool UseArcaneTorrentForResource = true;
        public bool UseAvatar = true;
        public bool UseBattleShout = true;
        public bool UseBattleStance = true;
        public bool UseBerserkerRage = true;
        public bool UseBerserkerStance = false;
        public bool UseBerserking = true;
        public bool UseBladestorm = true;
        public bool UseBloodFury = true;
        public bool UseBloodbath = true;
        public bool UseBloodthirst = true;
        public bool UseCharge = true;
        public bool UseCleave = true;
        public bool UseColossusSmash = true;
        public bool UseCommandingShout = false;
        public bool UseDeadlyCalm = true;
        public bool UseDefensiveStance = true;
        public bool UseDemoralizingBanner = true;
        public bool UseDiebytheSword = true;
        public bool UseDisarm = true;
        public bool UseDisruptingShout = true;
        public bool UseDragonRoar = true;
        public bool UseEngGlove = true;
        public bool UseEnragedRegeneration = true;
        public bool UseExecute = true;
        public bool UseGiftoftheNaaru = true;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public bool UseHamstring = false;
        public bool UseHeroicLeap = true;
        public bool UseHeroicStrike = true;
        public bool UseHeroicThrow = true;
        public bool UseIntimidatingShout = true;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseMassSpellReflection = true;
        public bool UsePiercingHowl = false;
        public bool UsePummel = true;
        public bool UseRagingBlow = true;
        public bool UseRallyingCry = true;
        public bool UseRecklessness = true;
        public bool UseShatteringThrow = true;
        public bool UseShockwave = true;
        public bool UseSkullBanner = true;
        public bool UseStaggeringShout = true;
        public bool UseStoneform = true;
        public int UseStoneformAtPercentage = 80;
        public bool UseStormBolt = true;
        public bool UseSweepingStrikes = true;
        public bool UseTaunt = true;
        public bool UseThunderClap = true;
        public bool UseTrinketOne = true;
        public bool UseTrinketTwo = true;
        public bool UseVictoryRush = true;
        public bool UseWarStomp = true;
        public int UseWarStompAtPercentage = 80;
        public bool UseWhirlwind = true;
        public bool UseWildStrike = true;

        public WarriorFurySettings()
        {
            ConfigWinForm(new Point(500, 400), "Warrior Fury Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Warrior Buffs */
            AddControlInWinForm("Use Battle Shout", "UseBattleShout", "Warrior Buffs");
            AddControlInWinForm("Use Battle Stance", "UseBattleStance", "Warrior Buffs");
            AddControlInWinForm("Use Berserker Stance", "UseBerserkerStance", "Warrior Buffs");
            AddControlInWinForm("Use Commanding Shout", "UseCommandingShout", "Warrior Buffs");
            AddControlInWinForm("Use Defensive Stance", "UseDefensiveStance", "Warrior Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Avatar", "UseAvatar", "Offensive Spell");
            AddControlInWinForm("Use Bladestorm", "UseBladestorm", "Offensive Spell");
            AddControlInWinForm("Use Bloodbath", "UseBloodbath", "Offensive Spell");
            AddControlInWinForm("Use Bloodthirst", "UseBloodthirst", "Offensive Spell");
            AddControlInWinForm("Use Charge", "UseCharge", "Offensive Spell");
            AddControlInWinForm("Use Cleave", "UseCleave", "Offensive Spell");
            AddControlInWinForm("Use Colossus Smash", "UseColossusSmash", "Offensive Spell");
            AddControlInWinForm("Use Dragon Roar", "UseDragonRoar", "Offensive Spell");
            AddControlInWinForm("Use Exectue", "UseExecute", "Offensive Spell");
            AddControlInWinForm("Use Heroic Leap", "UseHeroicLeap", "Offensive Spell");
            AddControlInWinForm("Use Heroic Strike", "UseHeroicStrike", "Offensive Spell");
            AddControlInWinForm("Use Heroic Throw", "UseHeroicThrow", "Offensive Spell");
            AddControlInWinForm("Use Raging Blow", "UseRagingBlow", "Offensive Spell");
            AddControlInWinForm("Use Shockwave", "UseShockwave", "Offensive Spell");
            AddControlInWinForm("Use Storm Bolt", "UseStormBolt", "Offensive Spell");
            AddControlInWinForm("Use Taunt", "UseTaunt", "Offensive Spell");
            AddControlInWinForm("Use Thunder Clap", "UseThunderClap", "Offensive Spell");
            AddControlInWinForm("Use Whirlwind", "UseWhirlwind", "Offensive Spell");
            AddControlInWinForm("Use Wild Strike", "UseWildStrike", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Berserker Rage", "UseBerserkerRage", "Offensive Cooldown");
            AddControlInWinForm("Use Deadly Calm", "UseDeadlyCalm", "Offensive Cooldown");
            AddControlInWinForm("Use Recklessness", "UseRecklessness", "Offensive Cooldown");
            AddControlInWinForm("Use Shattering Throw", "UseShatteringThrow", "Offensive Cooldown");
            AddControlInWinForm("Use Sweeping Strikes", "UseSweepingStrikes", "Offensive Cooldown");
            AddControlInWinForm("Use Skull Banner", "UseSkullBanner", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Demoralizing Banner", "UseDemoralizingBanner", "Defensive Cooldown");
            AddControlInWinForm("Use Die by the Sword", "UseDiebytheSword", "Defensive Cooldown");
            AddControlInWinForm("Use Disarm", "UseDisarm", "Defensive Cooldown");
            AddControlInWinForm("Use Disrupting Shout", "UseDisruptingShout", "Defensive Cooldown");
            AddControlInWinForm("Use Hamstring", "UseHamstring", "Defensive Cooldown");
            AddControlInWinForm("Use Intimidating Shout", "UseIntimidatingShout", "Defensive Cooldown");
            AddControlInWinForm("Use Mass Spell Reflection", "UseMassSpellReflection", "Defensive Cooldown");
            AddControlInWinForm("Use Piercing Howl", "UsePiercingHowl", "Defensive Cooldown");
            AddControlInWinForm("Use Pummel", "UsePummel", "Defensive Cooldown");
            AddControlInWinForm("Use Staggering Shout", "UseStaggeringShout", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Enraged Regeneration", "UseEnragedRegeneration", "Healing Spell");
            AddControlInWinForm("Use Rallying Cry", "UseRallyingCry", "Healing Spell");
            AddControlInWinForm("Use Victory Rush", "UseVictoryRush", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
            AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
            AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
        }

        public static WarriorFurySettings CurrentSetting { get; set; }

        public static WarriorFurySettings GetSettings()
        {
            string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Warrior_Fury.xml";
            if (File.Exists(currentSettingsFile))
            {
                return
                    CurrentSetting = Load<WarriorFurySettings>(currentSettingsFile);
            }
            else
            {
                return new WarriorFurySettings();
            }
        }
    }

    #endregion
}

#endregion

#region Hunter

public class HunterMarksmanship
{
    private readonly HunterMarksmanshipSettings mySettings = HunterMarksmanshipSettings.GetSettings();

    #region General Timers & Variables

    private Timer AlchFlaskTimer = new Timer(0);
    private Timer EngineeringTimer = new Timer(0);
    public int LC = 0;
    private Timer OnCD = new Timer(0);
    private Timer TrinketOneTimer = new Timer(0);
    private Timer TrinketTwoTimer = new Timer(0);

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell BloodFury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell WarStomp = new Spell("War Stomp");

    #endregion

    #region Hunter Buffs

    private readonly Spell AspectoftheHawk = new Spell("Aspect of the Hawk");
    private readonly Spell Camouflage = new Spell("Camouflage");
    private readonly Spell FeignDeath = new Spell("Feign Death");
    private readonly Spell HuntersMark = new Spell("Hunter's Mark");
    private readonly Spell Misdirection = new Spell("Misdirection");
    private readonly Spell SteadyFocus = new Spell("Steady Focus");

    #endregion

    #region Offensive Spell

    private readonly Spell AimedShot = new Spell("Aimed Shot");
    private readonly Spell ArcaneShot = new Spell("Arcane Shot");
    private readonly Spell CallPet1 = new Spell("Call Pet 1");
    private readonly Spell CallPet2 = new Spell("Call Pet 2");
    private readonly Spell CallPet3 = new Spell("Call Pet 3");
    private readonly Spell CallPet4 = new Spell("Call Pet 4");
    private readonly Spell CallPet5 = new Spell("Call Pet 5");
    private readonly Spell ChimeraShot = new Spell("Chimera Shot");
    private readonly Spell ExplosiveTrap = new Spell("Explosive Trap");
    private readonly Spell KillShot = new Spell("Kill Shot");
    private readonly Spell MultiShot = new Spell("Multi-Shot");
    private readonly Spell SerpentSting = new Spell("Serpent Sting");
    private readonly Spell SteadyShot = new Spell("Steady Shot");
    private Timer SerpentStingTimer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell AMurderofCrows = new Spell("A Murder of Crows");
    private readonly Spell Barrage = new Spell("Barrage");
    private readonly Spell BlinkStrike = new Spell("Blink Strike");
    private readonly Spell DireBeast = new Spell("Dire Beast");
    private readonly Spell Fervor = new Spell("Fervor");
    private readonly Spell GlaiveToss = new Spell("Glaive Toss");
    private readonly Spell LynxRush = new Spell("Lynx Rush");
    private readonly Spell Powershot = new Spell("Powershot");
    private readonly Spell RapidFire = new Spell("Rapid Fire");
    private readonly Spell Readiness = new Spell("Readiness");
    private readonly Spell Stampede = new Spell("Stampede");
    private Timer DireBeastTimer = new Timer(0);

    #endregion

    #region Defensive Cooldown

    private readonly Spell BindingShot = new Spell("Binding Shot");
    private readonly Spell ConcussiveShot = new Spell("Concussive Shot");
    private readonly Spell Deterrance = new Spell("Deterrance");
    private readonly Spell Disengage = new Spell("Disengage");
    private readonly Spell FreezingTrap = new Spell("Freezing Trap");
    private readonly Spell IceTrap = new Spell("Ice Trap");
    private readonly Spell ScatterShot = new Spell("Scatter Shot");
    private readonly Spell SilencingShot = new Spell("Silencing Shot");
    private readonly Spell WyvernSting = new Spell("Wyvern Sting");

    #endregion

    #region Healing Spell

    private readonly Spell Exhilaration = new Spell("Exhilaration");
    private readonly Spell FeedPet = new Spell("Feed Pet");
    private readonly Spell MendPet = new Spell("Mend Pet");
    private readonly Spell RevivePet = new Spell("Revive Pet");
    private Timer MendPetTimer = new Timer(0);

    #endregion

    public HunterMarksmanship()
    {
        Main.range = 30.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && SerpentSting.IsHostileDistanceGood)
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && mySettings.UseLowCombat)
                            {
                                LC = 1;
                                if (ObjectManager.Target.GetDistance < 41)
                                    LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                if (ObjectManager.Target.GetDistance < 41)
                                    Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(250);
        }
    }

    private void Pull()
    {
        if (HuntersMark.KnownSpell && HuntersMark.IsSpellUsable && mySettings.UseHuntersMark
            && HuntersMark.IsHostileDistanceGood && !HuntersMark.TargetHaveBuff && LC != 1)
            HuntersMark.Launch();

        if (ObjectManager.Pet.IsAlive)
        {
            Lua.RunMacroText("/petattack");
            Logging.WriteFight("Launch Pet Attack");
        }

        if (ObjectManager.Pet.IsAlive && mySettings.UseMisdirection && Misdirection.KnownSpell
            && Misdirection.IsSpellUsable)
        {
            Lua.RunMacroText("/target pet");
            Thread.Sleep(200);
            Misdirection.Launch();
            Thread.Sleep(200);
        }

        if (SerpentSting.KnownSpell && SerpentSting.IsSpellUsable && SerpentSting.IsHostileDistanceGood
            && mySettings.UseSerpentSting)
        {
            SerpentSting.Launch();
            return;
        }
    }

    private void LowCombat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        DefenseCycle();
        Heal();

        if (GlaiveToss.KnownSpell && GlaiveToss.IsSpellUsable && GlaiveToss.IsHostileDistanceGood
            && mySettings.UseGlaiveToss)
        {
            GlaiveToss.Launch();
            return;
        }
        else if (ArcaneShot.IsSpellUsable && ArcaneShot.IsHostileDistanceGood && ArcaneShot.KnownSpell
                 && mySettings.UseArcaneShot)
        {
            ArcaneShot.Launch();
            return;
        }
        else
        {
            if (SteadyShot.KnownSpell && SteadyShot.IsSpellUsable && SteadyShot.IsHostileDistanceGood
                && mySettings.UseSteadyShot)
            {
                SteadyShot.Launch();
                return;
            }
        }

        if (ExplosiveTrap.KnownSpell && ExplosiveTrap.IsSpellUsable && ExplosiveTrap.IsHostileDistanceGood
            && mySettings.UseExplosiveTrap)
        {
            ExplosiveTrap.Launch();
            return;
        }
    }

    private void Combat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        if (OnCD.IsReady)
            DefenseCycle();
        DPSCycle();
        Heal();
        Decast();
        DPSCycle();
        DPSBurst();
        DPSCycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        Pet();

        if (mySettings.UseAspectoftheHawk && AspectoftheHawk.KnownSpell && AspectoftheHawk.IsSpellUsable
            && !AspectoftheHawk.HaveBuff && !ObjectManager.Me.HaveBuff(109260))
        {
            AspectoftheHawk.Launch();
            return;
        }

        if (mySettings.UseCamouflage && Camouflage.KnownSpell && Camouflage.IsSpellUsable && !Camouflage.HaveBuff
            && !Fight.InFight && ObjectManager.GetNumberAttackPlayer() == 0)
        {
            Camouflage.Launch();
            return;
        }
    }

    private void Pet()
    {
        if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
            && CallPet1.KnownSpell && CallPet1.IsSpellUsable && mySettings.UsePet1 && ObjectManager.GetNumberAttackPlayer() > 0)
        {
            CallPet1.Launch();
            Thread.Sleep(1000);
        }
        else if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                 && CallPet2.KnownSpell && CallPet2.IsSpellUsable && mySettings.UsePet2 && ObjectManager.GetNumberAttackPlayer() > 0)
        {
            CallPet2.Launch();
            Thread.Sleep(1000);
        }
        else if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                 && CallPet3.KnownSpell && CallPet3.IsSpellUsable && mySettings.UsePet3 && ObjectManager.GetNumberAttackPlayer() > 0)
        {
            CallPet3.Launch();
            Thread.Sleep(1000);
        }
        else if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                 && CallPet4.KnownSpell && CallPet4.IsSpellUsable && mySettings.UsePet4 && ObjectManager.GetNumberAttackPlayer() > 0)
        {
            CallPet4.Launch();
            Thread.Sleep(1000);
        }
        else
        {
            if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                && CallPet5.KnownSpell && CallPet5.IsSpellUsable && mySettings.UsePet5 && ObjectManager.GetNumberAttackPlayer() > 0)
            {
                CallPet5.Launch();
                Thread.Sleep(1000);
            }
        }

        if (!ObjectManager.Me.IsCast && (!ObjectManager.Pet.IsAlive || ObjectManager.Pet.Guid == 0)
            && RevivePet.KnownSpell && RevivePet.IsSpellUsable && mySettings.UseRevivePet
            && mySettings.UseCombatRevive && ObjectManager.Target.HealthPercent > 10 && ObjectManager.GetNumberAttackPlayer() > 0)
        {
            RevivePet.Launch();
            Thread.Sleep(1000);
        }
        else if (!ObjectManager.Me.IsCast && !ObjectManager.Pet.IsAlive
                 && RevivePet.KnownSpell && RevivePet.IsSpellUsable && mySettings.UseRevivePet
                 && ObjectManager.GetNumberAttackPlayer() == 0)
        {
            RevivePet.Launch();
            Thread.Sleep(1000);
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            var maxTimeTimer = new Timer(1000*2);
            MovementsAction.MoveBackward(true);
            while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                Thread.Sleep(300);
            MovementsAction.MoveBackward(false);
            if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
            {
                MovementsAction.MoveForward(true);
                Thread.Sleep(1000);
                MovementsAction.MoveForward(false);
                MovementManager.Face(ObjectManager.Target.Position);
            }
        }
    }

    private void DefenseCycle()
    {
        if (ObjectManager.Me.HealthPercent < 20 && mySettings.UseFeignDeath
            && FeignDeath.KnownSpell && FeignDeath.IsSpellUsable)
        {
            FeignDeath.Launch();
            Thread.Sleep(5000);
            if (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                return;
            else
                Thread.Sleep(5000);
        }
        else if (ObjectManager.Me.HealthPercent < 50 && mySettings.UseDeterrance
                 && Deterrance.KnownSpell && Deterrance.IsSpellUsable)
        {
            Deterrance.Launch();
            Thread.Sleep(200);
        }
        else if (mySettings.UseFreezingTrap && ObjectManager.GetNumberAttackPlayer() > 1 && FreezingTrap.KnownSpell
                 && FreezingTrap.IsSpellUsable && ObjectManager.Target.GetDistance > 10)
        {
            FreezingTrap.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && mySettings.UseIceTrap
                 && IceTrap.KnownSpell && IceTrap.IsSpellUsable && ObjectManager.Target.GetDistance < 10
                 && Disengage.KnownSpell && Disengage.IsSpellUsable && mySettings.UseDisengage)
        {
            IceTrap.Launch();
            Thread.Sleep(1000);
            MovementsAction.Jump();
            Disengage.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && mySettings.UseConcussiveShot
                 && ConcussiveShot.KnownSpell && ConcussiveShot.IsSpellUsable && ConcussiveShot.IsHostileDistanceGood
                 && Disengage.KnownSpell && Disengage.IsSpellUsable && mySettings.UseDisengage)
        {
            ConcussiveShot.Launch();
            Thread.Sleep(1000);
            MovementsAction.Jump();
            Disengage.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && mySettings.UseBindingShot
                 && BindingShot.KnownSpell && BindingShot.IsSpellUsable && BindingShot.IsHostileDistanceGood
                 && Disengage.KnownSpell && Disengage.IsSpellUsable && mySettings.UseDisengage)
        {
            BindingShot.Launch();
            Thread.Sleep(1000);
            MovementsAction.Jump();
            Disengage.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable &&
                 WarStomp.KnownSpell
                 && mySettings.UseWarStomp)
        {
            WarStomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent <= mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable &&
                Stoneform.KnownSpell
                && mySettings.UseStoneform)
            {
                Stoneform.Launch();
                OnCD = new Timer(1000*8);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (ObjectManager.Me.HealthPercent <= mySettings.UseGiftoftheNaaruAtPercentage && GiftoftheNaaru.KnownSpell &&
            GiftoftheNaaru.IsSpellUsable
            && mySettings.UseGiftoftheNaaru)
        {
            GiftoftheNaaru.Launch();
            return;
        }
        else if (Exhilaration.KnownSpell && Exhilaration.IsSpellUsable
                 && mySettings.UseExhilaration && ObjectManager.Me.HealthPercent < 70)
        {
            Exhilaration.Launch();
            return;
        }
        else if (ObjectManager.Pet.Health > 0 && ObjectManager.Pet.HealthPercent < 50
                 && FeedPet.KnownSpell && FeedPet.IsSpellUsable && mySettings.UseFeedPet
                 && !Fight.InFight && ObjectManager.GetNumberAttackPlayer() == 0)
        {
            FeedPet.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Pet.Health > 0 && ObjectManager.Pet.HealthPercent < 80
                && MendPet.KnownSpell && MendPet.IsSpellUsable && mySettings.UseMendPet
                && MendPetTimer.IsReady)
            {
                MendPet.Launch();
                MendPetTimer = new Timer(1000*10);
                return;
            }
        }
    }

    private void Decast()
    {
        if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8
            && ObjectManager.Me.HealthPercent <= mySettings.UseArcaneTorrentForDecastAtPercentage
            && mySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && SilencingShot.IsHostileDistanceGood
                 && SilencingShot.KnownSpell && SilencingShot.IsSpellUsable && mySettings.UseSilencingShot)
        {
            SilencingShot.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && ScatterShot.IsHostileDistanceGood
                 && ScatterShot.KnownSpell && ScatterShot.IsSpellUsable && mySettings.UseScatterShot)
        {
            ScatterShot.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && mySettings.UseWyvernSting
                && WyvernSting.KnownSpell && WyvernSting.IsSpellUsable && WyvernSting.IsHostileDistanceGood)
            {
                WyvernSting.Launch();
                return;
            }
        }
    }

    private void DPSBurst()
    {
        if (mySettings.UseTrinketOne && TrinketOneTimer.IsReady && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketOneTimer = new Timer(1000*60*2);
        }
        else if (mySettings.UseTrinketTwo && TrinketTwoTimer.IsReady && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketTwoTimer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseBerserking)
            Berserking.Launch();
        else if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseBloodFury)
            BloodFury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (EngineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            EngineeringTimer = new Timer(1000*60);
        }
        else if (AimedShot.KnownSpell && AimedShot.IsSpellUsable && AimedShot.IsHostileDistanceGood
                 && mySettings.UseAimedShot && ObjectManager.Me.HaveBuff(82926))
        {
            AimedShot.Launch();
            return;
        }
        else if (mySettings.UseSteadyShot && SteadyShot.KnownSpell && SteadyShot.IsHostileDistanceGood && SteadyShot.IsSpellUsable
                 && SteadyFocus.KnownSpell && !ObjectManager.Me.HaveBuff(53220))
        {
            SteadyShot.Launch();
            return;
        }
        else if (AMurderofCrows.KnownSpell && AMurderofCrows.IsSpellUsable && AMurderofCrows.IsHostileDistanceGood
                 && mySettings.UseAMurderofCrows && !AMurderofCrows.TargetHaveBuff)
        {
            AMurderofCrows.Launch();
            return;
        }
        else if (Barrage.KnownSpell && Barrage.IsSpellUsable && mySettings.UseBarrage && Barrage.IsHostileDistanceGood)
        {
            Barrage.Launch();
            return;
        }
        else if (BlinkStrike.KnownSpell && BlinkStrike.IsSpellUsable && ObjectManager.Pet.IsAlive
                 && mySettings.UseBlinkStrike && ObjectManager.Target.GetDistance < 41)
        {
            BlinkStrike.Launch();
            return;
        }
        else if (DireBeast.KnownSpell && DireBeast.IsSpellUsable && mySettings.UseDireBeast
                 && DireBeast.IsHostileDistanceGood && DireBeastTimer.IsReady)
        {
            DireBeast.Launch();
            DireBeastTimer = new Timer(1000*15);
            return;
        }
        else if (Fervor.KnownSpell && Fervor.IsSpellUsable && ObjectManager.Me.Focus < 50
                 && mySettings.UseFervor)
        {
            Fervor.Launch();
            return;
        }
        else if (GlaiveToss.KnownSpell && GlaiveToss.IsSpellUsable && mySettings.UseGlaiveToss &&
                 GlaiveToss.IsHostileDistanceGood)
        {
            GlaiveToss.Launch();
            return;
        }
        else if (LynxRush.KnownSpell && LynxRush.IsSpellUsable && mySettings.UseLynxRush &&
                 ObjectManager.Target.GetDistance < 41)
        {
            LynxRush.Launch();
            return;
        }
        else if (Powershot.KnownSpell && Powershot.IsSpellUsable && mySettings.UsePowershot &&
                 Powershot.IsHostileDistanceGood)
        {
            Powershot.Launch();
            return;
        }
        else if (Stampede.KnownSpell && Stampede.IsSpellUsable && mySettings.UseStampede &&
                 Stampede.IsHostileDistanceGood)
        {
            Stampede.Launch();
            return;
        }
        else if (RapidFire.KnownSpell && RapidFire.IsSpellUsable && mySettings.UseRapidFire
                 && ObjectManager.Target.GetDistance < 41)
        {
            RapidFire.Launch();
            return;
        }
        else
        {
            if (Readiness.KnownSpell && Readiness.IsSpellUsable && mySettings.UseReadiness)
            {
                Readiness.Launch();
                return;
            }
        }
    }

    private void DPSCycle()
    {
        if (SerpentSting.IsSpellUsable && SerpentSting.IsHostileDistanceGood && SerpentSting.KnownSpell
            && mySettings.UseSerpentSting && !SerpentSting.TargetHaveBuff)
        {
            SerpentSting.Launch();
            SerpentStingTimer = new Timer(1000*12);
            return;
        }
        else if (ChimeraShot.KnownSpell && ChimeraShot.IsSpellUsable && ChimeraShot.IsHostileDistanceGood
                 && mySettings.UseChimeraShot)
        {
            ChimeraShot.Launch();
            SerpentStingTimer = new Timer(1000*12);
            return;
        }
        else if (KillShot.KnownSpell && KillShot.IsSpellUsable && KillShot.IsHostileDistanceGood
                 && mySettings.UseKillShot)
        {
            KillShot.Launch();
            return;
        }
        else if (AimedShot.KnownSpell && AimedShot.IsSpellUsable && AimedShot.IsHostileDistanceGood
                 && mySettings.UseAimedShot && ObjectManager.Me.HaveBuff(82926))
        {
            AimedShot.Launch();
            return;
        }
        else if (mySettings.UseSteadyShot && SteadyShot.KnownSpell && SteadyShot.IsHostileDistanceGood && SteadyShot.IsSpellUsable
                 && SteadyFocus.KnownSpell && !ObjectManager.Me.HaveBuff(53220))
        {
            SteadyShot.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 3 && mySettings.UseMultiShot && MultiShot.KnownSpell && MultiShot.IsHostileDistanceGood
                 && MultiShot.IsSpellUsable)
        {
            MultiShot.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 3 && mySettings.UseMultiShot && mySettings.UseSteadyShot && SteadyShot.KnownSpell 
                && SteadyShot.IsHostileDistanceGood && SteadyShot.IsSpellUsable && ObjectManager.Me.FocusPercentage < 40)
        {
            SteadyShot.Launch();
            return;
        }
        else if (ArcaneShot.KnownSpell && ArcaneShot.IsSpellUsable && ArcaneShot.IsHostileDistanceGood
                 && mySettings.UseArcaneShot && ObjectManager.Me.FocusPercentage > 64)
        {
            ArcaneShot.Launch();
            return;
        }
        else if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell
                 && mySettings.UseArcaneTorrentForResource)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else
        {
            if (SteadyShot.KnownSpell && SteadyShot.IsSpellUsable && SteadyShot.IsHostileDistanceGood
                && mySettings.UseSteadyShot && ObjectManager.Me.FocusPercentage < 80)
            {
                SteadyShot.Launch();
                return;
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: HunterMarksmanshipSettings

    [Serializable]
    public class HunterMarksmanshipSettings : Settings
    {
        public bool DoAvoidMelee = false;
        public int DoAvoidMeleeDistance = 0;
        public bool UseAMurderofCrows = true;
        public bool UseAimedShot = true;
        public bool UseAlchFlask = true;
        public bool UseArcaneShot = true;
        public bool UseArcaneTorrentForDecast = true;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public bool UseArcaneTorrentForResource = true;
        public bool UseAspectoftheHawk = true;
        public bool UseBarrage = true;
        public bool UseBerserking = true;
        public bool UseBindingShot = true;
        public bool UseBlinkStrike = true;
        public bool UseBloodFury = true;
        public bool UseCamouflage = false;
        public bool UseChimeraShot = true;
        public bool UseCombatRevive = true;
        public bool UseConcussiveShot = true;
        public bool UseDeterrance = true;
        public bool UseDireBeast = true;
        public bool UseDisengage = true;
        public bool UseEngGlove = true;
        public bool UseExhilaration = true;
        public bool UseExplosiveTrap = true;
        public bool UseFeedPet = true;
        public bool UseFeignDeath = true;
        public bool UseFervor = true;
        public bool UseFreezingTrap = true;
        public bool UseGiftoftheNaaru = true;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public bool UseGlaiveToss = true;
        public bool UseHuntersMark = true;
        public bool UseIceTrap = true;
        public bool UseKillShot = true;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseLynxRush = true;
        public bool UseMendPet = true;
        public bool UseMisdirection = true;
        public bool UseMultiShot = true;
        public bool UsePet1 = true;
        public bool UsePet2 = false;
        public bool UsePet3 = false;
        public bool UsePet4 = false;
        public bool UsePet5 = false;
        public bool UsePowershot = true;
        public bool UseRapidFire = true;
        public bool UseReadiness = true;
        public bool UseRevivePet = true;
        public bool UseScatterShot = true;
        public bool UseSerpentSting = true;
        public bool UseSilencingShot = true;
        public bool UseStampede = true;
        public bool UseSteadyShot = true;
        public bool UseStoneform = true;
        public int UseStoneformAtPercentage = 80;
        public bool UseTrinketOne = true;
        public bool UseTrinketTwo = true;
        public bool UseWarStomp = true;
        public int UseWarStompAtPercentage = 80;
        public bool UseWyvernSting = true;

        public HunterMarksmanshipSettings()
        {
            ConfigWinForm(new Point(500, 400), "Hunter Marksmanship Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Hunter Buffs */
            AddControlInWinForm("Use Aspect of the Hawk", "UseAspectoftheHawk", "Hunter Buffs");
            AddControlInWinForm("Use Camouflage", "UseCamouflage", "Hunter Buffs");
            AddControlInWinForm("Use Feign Death", "UseFeignDeath", "Hunter Buffs");
            AddControlInWinForm("Use Hunter's Mark", "UseHuntersMark", "Hunter Buffs");
            AddControlInWinForm("Use Misdirection", "UseMisdirection", "Hunter Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Aimed Shot", "UseAimedShot", "Offensive Spell");
            AddControlInWinForm("Use Arcane Shot", "UseArcaneShot", "Offensive Spell");
            AddControlInWinForm("Use Pet in Slot 1", "UsePet1", "Offensive Spell");
            AddControlInWinForm("Use Pet in Slot 2", "UsePet2", "Offensive Spell");
            AddControlInWinForm("Use Pet in Slot 3", "UsePet3", "Offensive Spell");
            AddControlInWinForm("Use Pet in Slot 4", "UsePet4", "Offensive Spell");
            AddControlInWinForm("Use Pet in Slot 5", "UsePet5", "Offensive Spell");
            AddControlInWinForm("Use Chimera Shot", "UseChimeraShot", "Offensive Spell");
            AddControlInWinForm("Use Explosive Trap", "UseExplosiveTrap", "Offensive Spell");
            AddControlInWinForm("Use KillShot", "UseKillShot", "Offensive Spell");
            AddControlInWinForm("Use Multi-Shot", "UseMultiShot", "Offensive Spell");
            AddControlInWinForm("Use Serpent Sting", "UseSerpentSting", "Offensive Spell");
            AddControlInWinForm("Use Steady Shot", "UseSteadyShot", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use A Murder of Crows", "UseAMurderofCrows", "Offensive Cooldown");
            AddControlInWinForm("Use Barrage", "UseBarrage", "Offensive Cooldown");
            AddControlInWinForm("Use Blink Strike", "UseBlinkStrike", "Offensive Cooldown");
            AddControlInWinForm("Use Dire Beast", "UseDireBeast", "Offensive Cooldown");
            AddControlInWinForm("Use Fervor", "UseFervor", "Offensive Cooldown");
            AddControlInWinForm("Use Glaive Toss", "UseGlaiveToss", "Offensive Cooldown");
            AddControlInWinForm("Use Lynx Rush", "UseLynxRush", "Offensive Cooldown");
            AddControlInWinForm("Use Powershot", "UsePowershot", "Offensive Cooldown");
            AddControlInWinForm("Use Rapid Fire", "UseRapidFire", "Offensive Cooldown");
            AddControlInWinForm("Use Readiness", "UseReadiness", "Offensive Cooldown");
            AddControlInWinForm("Use Stampede", "UseStampede", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Binding Shot", "UseBindingShot", "Defensive Cooldown");
            AddControlInWinForm("Use Concussive Shot", "UseConcussiveShot", "Defensive Cooldown");
            AddControlInWinForm("Use Deterrance", "UseDeterrance", "Defensive Cooldown");
            AddControlInWinForm("Use Disengage", "UseDisengage", "Defensive Cooldown");
            AddControlInWinForm("Use Freezing Trap", "UseFreezingTrap", "Defensive Cooldown");
            AddControlInWinForm("Use Ice Trap", "UseIceTrap", "Defensive Cooldown");
            AddControlInWinForm("Use Scatter Shot", "UseScatterShot", "Defensive Cooldown");
            AddControlInWinForm("Use Silencing Shot", "UseSilencingShot", "Defensive Cooldown");
            AddControlInWinForm("Use Wyvern Sting", "UseWyvernSting", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Exhilaration", "UseExhilaration", "Healing Spell");
            AddControlInWinForm("Use Feed Pet", "UseFeedPet", "Healing Spell");
            AddControlInWinForm("Use Mend Pet", "UseMendPet", "Healing Spell");
            AddControlInWinForm("Use Revive Pet", "UseRevivePet", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
            AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Use Revive Pet in Combat", "UseCombatRevive", "Game Settings");
            AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
            AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
        }

        public static HunterMarksmanshipSettings CurrentSetting { get; set; }

        public static HunterMarksmanshipSettings GetSettings()
        {
            string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Hunter_Marksmanship.xml";
            if (File.Exists(currentSettingsFile))
            {
                return
                    CurrentSetting = Load<HunterMarksmanshipSettings>(currentSettingsFile);
            }
            else
            {
                return new HunterMarksmanshipSettings();
            }
        }
    }

    #endregion
}

public class HunterBeastMastery
{
    private readonly HunterBeastMasterySettings mySettings = HunterBeastMasterySettings.GetSettings();

    #region General Timers & Variables

    private Timer AlchFlaskTimer = new Timer(0);
    private Timer AncientHysteriaTimer = new Timer(0);
    private Timer BurrowAttackTimer = new Timer(0);
    private Timer EngineeringTimer = new Timer(0);
    private Timer FroststormBreathTimer = new Timer(0);
    public int LC = 0;
    private Timer OnCD = new Timer(0);
    private Timer SpiritMendTimer = new Timer(0);
    private Timer TrinketOneTimer = new Timer(0);
    private Timer TrinketTwoTimer = new Timer(0);

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell BloodFury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell WarStomp = new Spell("War Stomp");

    #endregion

    #region Hunter Buffs

    private readonly Spell AspectoftheHawk = new Spell("Aspect of the Hawk");
    private readonly Spell Camouflage = new Spell("Camouflage");
    private readonly Spell FeignDeath = new Spell("Feign Death");
    private readonly Spell HuntersMark = new Spell("Hunter's Mark");
    private readonly Spell Misdirection = new Spell("Misdirection");

    #endregion

    #region Offensive Spell

    private readonly Spell ArcaneShot = new Spell("Arcane Shot");
    private readonly Spell CallPet1 = new Spell("Call Pet 1");
    private readonly Spell CallPet2 = new Spell("Call Pet 2");
    private readonly Spell CallPet3 = new Spell("Call Pet 3");
    private readonly Spell CallPet4 = new Spell("Call Pet 4");
    private readonly Spell CallPet5 = new Spell("Call Pet 5");
    private readonly Spell CobraShot = new Spell("Cobra Shot");
    private readonly Spell ExplosiveTrap = new Spell("Explosive Trap");
    private readonly Spell KillCommand = new Spell("Kill Command");
    private readonly Spell KillShot = new Spell("Kill Shot");
    private readonly Spell MultiShot = new Spell("Multi-Shot");
    private readonly Spell SerpentSting = new Spell("Serpent Sting");
    private readonly Spell SteadyShot = new Spell("Steady Shot");
    private Timer SerpentStingTimer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell AMurderofCrows = new Spell("A Murder of Crows");
    private readonly Spell Barrage = new Spell("Barrage");
    private readonly Spell BestialWrath = new Spell("Bestial Wrath");
    private readonly Spell BlinkStrike = new Spell("Blink Strike");
    private readonly Spell DireBeast = new Spell("Dire Beast");
    private readonly Spell Fervor = new Spell("Fervor");
    private readonly Spell FocusFire = new Spell("Focus Fire");
    private readonly Spell GlaiveToss = new Spell("Glaive Toss");
    private readonly Spell LynxRush = new Spell("Lynx Rush");
    private readonly Spell Powershot = new Spell("Powershot");
    private readonly Spell RapidFire = new Spell("Rapid Fire");
    private readonly Spell Readiness = new Spell("Readiness");
    private readonly Spell Stampede = new Spell("Stampede");
    private Timer DireBeastTimer = new Timer(0);

    #endregion

    #region Defensive Cooldown

    private readonly Spell BindingShot = new Spell("Binding Shot");
    private readonly Spell ConcussiveShot = new Spell("Concussive Shot");
    private readonly Spell Deterrance = new Spell("Deterrance");
    private readonly Spell Disengage = new Spell("Disengage");
    private readonly Spell FreezingTrap = new Spell("Freezing Trap");
    private readonly Spell IceTrap = new Spell("Ice Trap");
    private readonly Spell Intimidation = new Spell("Intimidation");
    private readonly Spell ScatterShot = new Spell("Scatter Shot");
    private readonly Spell SilencingShot = new Spell("Silencing Shot");
    private readonly Spell WyvernSting = new Spell("Wyvern Sting");

    #endregion

    #region Healing Spell

    private readonly Spell Exhilaration = new Spell("Exhilaration");
    private readonly Spell FeedPet = new Spell("Feed Pet");
    private readonly Spell MendPet = new Spell("Mend Pet");
    private readonly Spell RevivePet = new Spell("Revive Pet");
    private Timer MendPetTimer = new Timer(0);

    #endregion

    public HunterBeastMastery()
    {
        Main.range = 30.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && SerpentSting.IsHostileDistanceGood)
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && mySettings.UseLowCombat)
                            {
                                LC = 1;
                                if (ObjectManager.Target.GetDistance < 41)
                                    LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                if (ObjectManager.Target.GetDistance < 41)
                                    Combat();
                            }
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(250);
        }
    }

    private void Pull()
    {
        if (HuntersMark.KnownSpell && HuntersMark.IsSpellUsable && mySettings.UseHuntersMark
            && HuntersMark.IsHostileDistanceGood && !HuntersMark.TargetHaveBuff && LC != 1)
            HuntersMark.Launch();

        if (ObjectManager.Pet.IsAlive)
        {
            Lua.RunMacroText("/petattack");
            Logging.WriteFight("Launch Pet Attack");
        }

        if (ObjectManager.Pet.IsAlive && mySettings.UseMisdirection && Misdirection.KnownSpell
            && Misdirection.IsSpellUsable)
        {
            Lua.RunMacroText("/target pet");
            Thread.Sleep(200);
            Misdirection.Launch();
            Thread.Sleep(200);
        }

        if (SerpentSting.KnownSpell && SerpentSting.IsSpellUsable && SerpentSting.IsHostileDistanceGood
            && mySettings.UseSerpentSting)
        {
            SerpentSting.Launch();
            return;
        }
    }

    private void LowCombat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        DefenseCycle();
        Heal();

        if (GlaiveToss.KnownSpell && GlaiveToss.IsSpellUsable && GlaiveToss.IsHostileDistanceGood
            && mySettings.UseGlaiveToss)
        {
            GlaiveToss.Launch();
            return;
        }
        else if (ArcaneShot.IsSpellUsable && ArcaneShot.IsHostileDistanceGood && ArcaneShot.KnownSpell
                 && mySettings.UseArcaneShot)
        {
            ArcaneShot.Launch();
            return;
        }
        else
        {
            if (CobraShot.KnownSpell && CobraShot.IsSpellUsable && CobraShot.IsHostileDistanceGood
                && mySettings.UseCobraShot)
            {
                CobraShot.Launch();
                return;
            }
            else
            {
                if (SteadyShot.KnownSpell && SteadyShot.IsSpellUsable && SteadyShot.IsHostileDistanceGood
                    && ObjectManager.Me.FocusPercentage < 60 && (!CobraShot.KnownSpell || !mySettings.UseCobraShot))
                {
                    SteadyShot.Launch();
                    return;
                }
            }
        }

        if (ExplosiveTrap.KnownSpell && ExplosiveTrap.IsSpellUsable && ExplosiveTrap.IsHostileDistanceGood
            && mySettings.UseExplosiveTrap)
        {
            ExplosiveTrap.Launch();
            return;
        }
    }

    private void Combat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        if (OnCD.IsReady)
            DefenseCycle();
        DPSCycle();
        Heal();
        Decast();
        DPSCycle();
        DPSBurst();
        DPSCycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        Pet();

        if (mySettings.UseAspectoftheHawk && AspectoftheHawk.KnownSpell && AspectoftheHawk.IsSpellUsable
            && !AspectoftheHawk.HaveBuff && !ObjectManager.Me.HaveBuff(109260))
        {
            AspectoftheHawk.Launch();
            return;
        }

        if (mySettings.UseCamouflage && Camouflage.KnownSpell && Camouflage.IsSpellUsable && !Camouflage.HaveBuff
            && !Fight.InFight && ObjectManager.GetNumberAttackPlayer() == 0)
        {
            Camouflage.Launch();
            return;
        }
    }

    private void Pet()
    {
        if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
            && CallPet1.KnownSpell && CallPet1.IsSpellUsable && mySettings.UsePet1 && ObjectManager.GetNumberAttackPlayer() > 0)
        {
            CallPet1.Launch();
            Thread.Sleep(1000);
        }
        else if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                 && CallPet2.KnownSpell && CallPet2.IsSpellUsable && mySettings.UsePet2 && ObjectManager.GetNumberAttackPlayer() > 0)
        {
            CallPet2.Launch();
            Thread.Sleep(1000);
        }
        else if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                 && CallPet3.KnownSpell && CallPet3.IsSpellUsable && mySettings.UsePet3 && ObjectManager.GetNumberAttackPlayer() > 0)
        {
            CallPet3.Launch();
            Thread.Sleep(1000);
        }
        else if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                 && CallPet4.KnownSpell && CallPet4.IsSpellUsable && mySettings.UsePet4 && ObjectManager.GetNumberAttackPlayer() > 0)
        {
            CallPet4.Launch();
            Thread.Sleep(1000);
        }
        else
        {
            if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                && CallPet5.KnownSpell && CallPet5.IsSpellUsable && mySettings.UsePet5 && ObjectManager.GetNumberAttackPlayer() > 0)
            {
                CallPet5.Launch();
                Thread.Sleep(1000);
            }
        }

        if (!ObjectManager.Me.IsCast && (!ObjectManager.Pet.IsAlive || ObjectManager.Pet.Guid == 0)
            && RevivePet.KnownSpell && RevivePet.IsSpellUsable && mySettings.UseRevivePet
            && mySettings.UseCombatRevive && ObjectManager.Target.HealthPercent > 10 && ObjectManager.GetNumberAttackPlayer() > 0)
        {
            RevivePet.Launch();
            Thread.Sleep(1000);
        }
        else if (!ObjectManager.Me.IsCast && !ObjectManager.Pet.IsAlive
                 && RevivePet.KnownSpell && RevivePet.IsSpellUsable && mySettings.UseRevivePet
                 && ObjectManager.GetNumberAttackPlayer() == 0)
        {
            RevivePet.Launch();
            Thread.Sleep(1000);
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            var maxTimeTimer = new Timer(1000*2);
            MovementsAction.MoveBackward(true);
            while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                Thread.Sleep(300);
            MovementsAction.MoveBackward(false);
            if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
            {
                MovementsAction.MoveForward(true);
                Thread.Sleep(1000);
                MovementsAction.MoveForward(false);
                MovementManager.Face(ObjectManager.Target.Position);
            }
        }
    }

    private void DefenseCycle()
    {
        if (ObjectManager.Me.HealthPercent < 20 && mySettings.UseFeignDeath
            && FeignDeath.KnownSpell && FeignDeath.IsSpellUsable)
        {
            FeignDeath.Launch();
            Thread.Sleep(5000);
            if (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                return;
            else
                Thread.Sleep(5000);
        }
        else if (ObjectManager.Me.HealthPercent < 50 && mySettings.UseDeterrance
                 && Deterrance.KnownSpell && Deterrance.IsSpellUsable)
        {
            Deterrance.Launch();
            Thread.Sleep(200);
        }
        else if (mySettings.UseFreezingTrap && ObjectManager.GetNumberAttackPlayer() > 1 && FreezingTrap.KnownSpell
                 && FreezingTrap.IsSpellUsable && ObjectManager.Target.GetDistance > 10)
        {
            FreezingTrap.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && mySettings.UseIceTrap
                 && IceTrap.KnownSpell && IceTrap.IsSpellUsable && ObjectManager.Target.GetDistance < 10
                 && Disengage.KnownSpell && Disengage.IsSpellUsable && mySettings.UseDisengage)
        {
            IceTrap.Launch();
            Thread.Sleep(1000);
            MovementsAction.Jump();
            Disengage.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && mySettings.UseConcussiveShot
                 && ConcussiveShot.KnownSpell && ConcussiveShot.IsSpellUsable && ConcussiveShot.IsHostileDistanceGood
                 && Disengage.KnownSpell && Disengage.IsSpellUsable && mySettings.UseDisengage)
        {
            ConcussiveShot.Launch();
            Thread.Sleep(1000);
            MovementsAction.Jump();
            Disengage.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && mySettings.UseBindingShot
                 && BindingShot.KnownSpell && BindingShot.IsSpellUsable && BindingShot.IsHostileDistanceGood
                 && Disengage.KnownSpell && Disengage.IsSpellUsable && mySettings.UseDisengage)
        {
            BindingShot.Launch();
            Thread.Sleep(1000);
            MovementsAction.Jump();
            Disengage.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable &&
                 WarStomp.KnownSpell
                 && mySettings.UseWarStomp)
        {
            WarStomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable &&
                 Stoneform.KnownSpell
                 && mySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else
        {
            if (Intimidation.IsSpellUsable && Intimidation.KnownSpell && mySettings.UseIntimidation
                && (ObjectManager.Me.HealthPercent < 80 || ObjectManager.Pet.Health < 80))
            {
                Intimidation.Launch();
                OnCD = new Timer(1000*3);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (ObjectManager.Me.HealthPercent < 85 && ObjectManager.Pet.IsAlive
            && mySettings.UseSpiritBeastPet && SpiritMendTimer.IsReady)
        {
            Logging.WriteFight("Cast Spirit Mend.");
            Lua.RunMacroText("/target Player");
            Thread.Sleep(200);
            Lua.RunMacroText("/cast Spirit Mend");
            SpiritMendTimer = new Timer(1000*40);
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseGiftoftheNaaruAtPercentage &&
                 GiftoftheNaaru.KnownSpell && GiftoftheNaaru.IsSpellUsable
                 && mySettings.UseGiftoftheNaaru)
        {
            GiftoftheNaaru.Launch();
            return;
        }
        else if (Exhilaration.KnownSpell && Exhilaration.IsSpellUsable
                 && mySettings.UseExhilaration && ObjectManager.Me.HealthPercent < 70)
        {
            Exhilaration.Launch();
            return;
        }
        else if (ObjectManager.Pet.Health > 0 && ObjectManager.Pet.HealthPercent < 50
                 && FeedPet.KnownSpell && FeedPet.IsSpellUsable && mySettings.UseFeedPet
                 && !Fight.InFight && ObjectManager.GetNumberAttackPlayer() == 0)
        {
            FeedPet.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Pet.Health > 0 && ObjectManager.Pet.HealthPercent < 80
                && MendPet.KnownSpell && MendPet.IsSpellUsable && mySettings.UseMendPet
                && MendPetTimer.IsReady)
            {
                MendPet.Launch();
                MendPetTimer = new Timer(1000*10);
                return;
            }
        }
    }

    private void Decast()
    {
        if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8
            && ObjectManager.Me.HealthPercent <= mySettings.UseArcaneTorrentForDecastAtPercentage
            && mySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && SilencingShot.IsHostileDistanceGood
                 && SilencingShot.KnownSpell && SilencingShot.IsSpellUsable && mySettings.UseSilencingShot)
        {
            SilencingShot.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && ScatterShot.IsHostileDistanceGood
                 && ScatterShot.KnownSpell && ScatterShot.IsSpellUsable && mySettings.UseScatterShot)
        {
            ScatterShot.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && mySettings.UseWyvernSting
                && WyvernSting.KnownSpell && WyvernSting.IsSpellUsable && WyvernSting.IsHostileDistanceGood)
            {
                WyvernSting.Launch();
                return;
            }
        }
    }

    private void DPSBurst()
    {
        if (mySettings.UseTrinketOne && TrinketOneTimer.IsReady && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketOneTimer = new Timer(1000*60*2);
        }
        else if (mySettings.UseTrinketTwo && TrinketTwoTimer.IsReady && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketTwoTimer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseBerserking)
            Berserking.Launch();
        else if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseBloodFury)
            BloodFury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (EngineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            EngineeringTimer = new Timer(1000*60);
        }
        else if (AMurderofCrows.KnownSpell && AMurderofCrows.IsSpellUsable && AMurderofCrows.IsHostileDistanceGood
                 && mySettings.UseAMurderofCrows && !AMurderofCrows.TargetHaveBuff)
        {
            AMurderofCrows.Launch();
            return;
        }
        else if (Barrage.KnownSpell && Barrage.IsSpellUsable && mySettings.UseBarrage && Barrage.IsHostileDistanceGood)
        {
            Barrage.Launch();
            return;
        }
        else if (BlinkStrike.KnownSpell && BlinkStrike.IsSpellUsable && ObjectManager.Pet.IsAlive
                 && mySettings.UseBlinkStrike && ObjectManager.Target.GetDistance < 41)
        {
            BlinkStrike.Launch();
            return;
        }
        else if (DireBeast.KnownSpell && DireBeast.IsSpellUsable && mySettings.UseDireBeast
                 && DireBeast.IsHostileDistanceGood && DireBeastTimer.IsReady)
        {
            DireBeast.Launch();
            DireBeastTimer = new Timer(1000*15);
            return;
        }
        else if (Fervor.KnownSpell && Fervor.IsSpellUsable && ObjectManager.Me.Focus < 50
                 && mySettings.UseFervor)
        {
            Fervor.Launch();
            return;
        }
        else if (GlaiveToss.KnownSpell && GlaiveToss.IsSpellUsable && mySettings.UseGlaiveToss &&
                 GlaiveToss.IsHostileDistanceGood)
        {
            GlaiveToss.Launch();
            return;
        }
        else if (LynxRush.KnownSpell && LynxRush.IsSpellUsable && mySettings.UseLynxRush &&
                 ObjectManager.Target.GetDistance < 41)
        {
            LynxRush.Launch();
            return;
        }
        else if (Powershot.KnownSpell && Powershot.IsSpellUsable && mySettings.UsePowershot &&
                 Powershot.IsHostileDistanceGood)
        {
            Powershot.Launch();
            return;
        }
        else if (Stampede.KnownSpell && Stampede.IsSpellUsable && mySettings.UseStampede &&
                 Stampede.IsHostileDistanceGood)
        {
            Stampede.Launch();
            return;
        }
        else if (BestialWrath.KnownSpell && BestialWrath.IsSpellUsable && mySettings.UseBestialWrath
                 && ObjectManager.Target.GetDistance < 41)
        {
            BestialWrath.Launch();
            return;
        }
        else if (RapidFire.KnownSpell && RapidFire.IsSpellUsable && mySettings.UseRapidFire
                 && ObjectManager.Target.GetDistance < 41 && !BestialWrath.HaveBuff)
        {
            RapidFire.Launch();
            return;
        }
        else if (mySettings.UseCoreHoundPet && ObjectManager.Target.GetDistance < 41
                 && AncientHysteriaTimer.IsReady && ObjectManager.Me.HaveBuff(95809)
                 && ObjectManager.Pet.IsAlive && !RapidFire.HaveBuff && !BestialWrath.HaveBuff)
        {
            Lua.RunMacroText("/cast Ancient Hysteria");
            Logging.WriteFight("Launch Core Hound Pet Ancient Hysteria");
            AncientHysteriaTimer = new Timer(1000*60*6);
            return;
        }
        else if (ObjectManager.Pet.BuffStack(19623) == 5 && FocusFire.IsSpellUsable &&
                 FocusFire.KnownSpell
                 && mySettings.UseFocusFire)
        {
            FocusFire.Launch();
            return;
        }
        else
        {
            if (Readiness.KnownSpell && Readiness.IsSpellUsable && mySettings.UseReadiness
                && !RapidFire.IsSpellUsable && !BestialWrath.IsSpellUsable)
            {
                Readiness.Launch();
                return;
            }
        }
    }

    private void DPSCycle()
    {
        if (SerpentSting.IsSpellUsable && SerpentSting.IsHostileDistanceGood && SerpentSting.KnownSpell
            && mySettings.UseSerpentSting && !SerpentSting.TargetHaveBuff)
        {
            SerpentSting.Launch();
            SerpentStingTimer = new Timer(1000*12);
            return;
        }
        else if (CobraShot.KnownSpell && CobraShot.IsSpellUsable && CobraShot.IsHostileDistanceGood
                 && mySettings.UseCobraShot && SerpentStingTimer.IsReady)
        {
            CobraShot.Launch();
            SerpentStingTimer = new Timer(1000*12);
            return;
        }
        else if (KillShot.KnownSpell && KillShot.IsSpellUsable && KillShot.IsHostileDistanceGood
                 && mySettings.UseKillShot)
        {
            KillShot.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 2 && mySettings.UseMultiShot)
        {
            if (MultiShot.KnownSpell && MultiShot.IsSpellUsable && MultiShot.IsHostileDistanceGood)
            {
                MultiShot.Launch();
                return;
            }
            else if (mySettings.UseChimeraPet && ObjectManager.Target.GetDistance < 10
                     && ObjectManager.Pet.Guid == 780 && ObjectManager.Pet.Focus > 29
                     && FroststormBreathTimer.IsReady && ObjectManager.Pet.IsAlive)
            {
                Lua.RunMacroText("/cast Froststorm Breath");
                Logging.WriteFight("Launch Chimera Pet AoE");
                FroststormBreathTimer = new Timer(1000*8);
                return;
            }
            else
            {
                if (mySettings.UseWormPet && ObjectManager.Target.GetDistance < 10
                    && ObjectManager.Pet.Guid == 784 && ObjectManager.Pet.Focus > 29
                    && BurrowAttackTimer.IsReady && ObjectManager.Pet.IsAlive)
                {
                    Lua.RunMacroText("/cast Burrow Attack");
                    Logging.WriteFight("Launch Worm Pet AoE");
                    BurrowAttackTimer = new Timer(1000*20);
                    return;
                }
            }
        }
        else if (KillCommand.KnownSpell && KillCommand.IsSpellUsable && KillCommand.IsHostileDistanceGood
                 && mySettings.UseKillCommand && ObjectManager.Target.GetDistance < 41)
        {
            KillCommand.Launch();
            return;
        }
        else if (ArcaneShot.KnownSpell && ArcaneShot.IsSpellUsable && ArcaneShot.IsHostileDistanceGood
                 && mySettings.UseArcaneShot && ObjectManager.Me.FocusPercentage > 59)
        {
            ArcaneShot.Launch();
            return;
        }
        else if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell
                 && mySettings.UseArcaneTorrentForResource)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else
        {
            if (CobraShot.KnownSpell && CobraShot.IsSpellUsable && CobraShot.IsHostileDistanceGood
                && mySettings.UseCobraShot && ObjectManager.Me.FocusPercentage < 60)
            {
                CobraShot.Launch();
                return;
            }
            else
            {
                if (SteadyShot.KnownSpell && SteadyShot.IsSpellUsable && SteadyShot.IsHostileDistanceGood
                    && ObjectManager.Me.FocusPercentage < 60 && (!CobraShot.KnownSpell || !mySettings.UseCobraShot))
                {
                    SteadyShot.Launch();
                    return;
                }
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: HunterBeastMasterySettings

    [Serializable]
    public class HunterBeastMasterySettings : Settings
    {
        public bool DoAvoidMelee = false;
        public int DoAvoidMeleeDistance = 0;
        public bool UseAMurderofCrows = true;
        public bool UseAlchFlask = true;
        public bool UseArcaneShot = true;
        public bool UseArcaneTorrentForDecast = true;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public bool UseArcaneTorrentForResource = true;
        public bool UseAspectoftheHawk = true;
        public bool UseBarrage = true;
        public bool UseBerserking = true;
        public bool UseBestialWrath = true;
        public bool UseBindingShot = true;
        public bool UseBlinkStrike = true;
        public bool UseBloodFury = true;
        public bool UseCamouflage = false;
        public bool UseChimeraPet = false;
        public bool UseCobraShot = true;
        public bool UseCombatRevive = true;
        public bool UseConcussiveShot = true;
        public bool UseCoreHoundPet = false;
        public bool UseDeterrance = true;
        public bool UseDireBeast = true;
        public bool UseDisengage = true;
        public bool UseEngGlove = true;
        public bool UseExhilaration = true;
        public bool UseExplosiveTrap = true;
        public bool UseFeedPet = true;
        public bool UseFeignDeath = true;
        public bool UseFervor = true;
        public bool UseFocusFire = false;
        public bool UseFreezingTrap = true;
        public bool UseGiftoftheNaaru = true;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public bool UseGlaiveToss = true;
        public bool UseHuntersMark = true;
        public bool UseIceTrap = true;
        public bool UseIntimidation = true;
        public bool UseKillCommand = true;
        public bool UseKillShot = true;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseLynxRush = true;
        public bool UseMendPet = true;
        public bool UseMisdirection = true;
        public bool UseMultiShot = true;
        public bool UsePet1 = true;
        public bool UsePet2 = false;
        public bool UsePet3 = false;
        public bool UsePet4 = false;
        public bool UsePet5 = false;
        public bool UsePowershot = true;
        public bool UseRapidFire = true;
        public bool UseReadiness = true;
        public bool UseRevivePet = true;
        public bool UseScatterShot = true;
        public bool UseSerpentSting = true;
        public bool UseSilencingShot = true;
        public bool UseSpiritBeastPet = false;
        public bool UseStampede = true;
        public bool UseStoneform = true;
        public int UseStoneformAtPercentage = 80;
        public bool UseTrinketOne = true;
        public bool UseTrinketTwo = true;
        public bool UseWarStomp = true;
        public int UseWarStompAtPercentage = 80;
        public bool UseWormPet = false;
        public bool UseWyvernSting = true;

        public HunterBeastMasterySettings()
        {
            ConfigWinForm(new Point(500, 400), "Hunter BeastMastery Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Hunter Buffs */
            AddControlInWinForm("Use Aspect of the Hawk", "UseAspectoftheHawk", "Hunter Buffs");
            AddControlInWinForm("Use Camouflage", "UseCamouflage", "Hunter Buffs");
            AddControlInWinForm("Use Feign Death", "UseFeignDeath", "Hunter Buffs");
            AddControlInWinForm("Use Hunter's Mark", "UseHuntersMark", "Hunter Buffs");
            AddControlInWinForm("Use Misdirection", "UseMisdirection", "Hunter Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Arcane Shot", "UseArcaneShot", "Offensive Spell");
            AddControlInWinForm("Use Pet in Slot 1", "UsePet1", "Offensive Spell");
            AddControlInWinForm("Use Pet in Slot 2", "UsePet2", "Offensive Spell");
            AddControlInWinForm("Use Pet in Slot 3", "UsePet3", "Offensive Spell");
            AddControlInWinForm("Use Pet in Slot 4", "UsePet4", "Offensive Spell");
            AddControlInWinForm("Use Pet in Slot 5", "UsePet5", "Offensive Spell");
            AddControlInWinForm("Use Cobra Shot", "UseCobraShot", "Offensive Spell");
            AddControlInWinForm("Use Explosive Trap", "UseExplosiveTrap", "Offensive Spell");
            AddControlInWinForm("Use Kill Command", "UseKillCommand", "Offensive Spell");
            AddControlInWinForm("Use KillShot", "UseKillShot", "Offensive Spell");
            AddControlInWinForm("Use Multi-Shot", "UseMultiShot", "Offensive Spell");
            AddControlInWinForm("Use Serpent Sting", "UseSerpentSting", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use A Murder of Crows", "UseAMurderofCrows", "Offensive Cooldown");
            AddControlInWinForm("Use Barrage", "UseBarrage", "Offensive Cooldown");
            AddControlInWinForm("Use Bestial Wrath", "UseBestialWrath", "Offensive Cooldown");
            AddControlInWinForm("Use Blink Strike", "UseBlinkStrike", "Offensive Cooldown");
            AddControlInWinForm("Use Dire Beast", "UseDireBeast", "Offensive Cooldown");
            AddControlInWinForm("Use Fervor", "UseFervor", "Offensive Cooldown");
            AddControlInWinForm("Use Focus Fire", "UseFocusFire", "Offensive Cooldown");
            AddControlInWinForm("Use Glaive Toss", "UseGlaiveToss", "Offensive Cooldown");
            AddControlInWinForm("Use Lynx Rush", "UseLynxRush", "Offensive Cooldown");
            AddControlInWinForm("Use Powershot", "UsePowershot", "Offensive Cooldown");
            AddControlInWinForm("Use Rapid Fire", "UseRapidFire", "Offensive Cooldown");
            AddControlInWinForm("Use Readiness", "UseReadiness", "Offensive Cooldown");
            AddControlInWinForm("Use Stampede", "UseStampede", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Binding Shot", "UseBindingShot", "Defensive Cooldown");
            AddControlInWinForm("Use Concussive Shot", "UseConcussiveShot", "Defensive Cooldown");
            AddControlInWinForm("Use Deterrance", "UseDeterrance", "Defensive Cooldown");
            AddControlInWinForm("Use Disengage", "UseDisengage", "Defensive Cooldown");
            AddControlInWinForm("Use Freezing Trap", "UseFreezingTrap", "Defensive Cooldown");
            AddControlInWinForm("Use Ice Trap", "UseIceTrap", "Defensive Cooldown");
            AddControlInWinForm("Use Intimidation", "UseIntimidation", "Defensive Cooldown");
            AddControlInWinForm("Use Scatter Shot", "UseScatterShot", "Defensive Cooldown");
            AddControlInWinForm("Use Silencing Shot", "UseSilencingShot", "Defensive Cooldown");
            AddControlInWinForm("Use Wyvern Sting", "UseWyvernSting", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Exhilaration", "UseExhilaration", "Healing Spell");
            AddControlInWinForm("Use Feed Pet", "UseFeedPet", "Healing Spell");
            AddControlInWinForm("Use Mend Pet", "UseMendPet", "Healing Spell");
            AddControlInWinForm("Use Revive Pet", "UseRevivePet", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
            AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Use Core Hound Pet", "UseCoreHoundPet", "Game Settings");
            AddControlInWinForm("Use Worm Pet", "UseWormPet", "Game Settings");
            AddControlInWinForm("Use Chimera Pet", "UseChimeraPet", "Game Settings");
            AddControlInWinForm("Use Spirit Beast Pet", "UseSpiritBeastPet", "Game Settings");
            AddControlInWinForm("Use Revive Pet in Combat", "UseCombatRevive", "Game Settings");
            AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
            AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
        }

        public static HunterBeastMasterySettings CurrentSetting { get; set; }

        public static HunterBeastMasterySettings GetSettings()
        {
            string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Hunter_BeastMastery.xml";
            if (File.Exists(currentSettingsFile))
            {
                return
                    CurrentSetting = Load<HunterBeastMasterySettings>(currentSettingsFile);
            }
            else
            {
                return new HunterBeastMasterySettings();
            }
        }
    }

    #endregion
}

public class HunterSurvival
{
    private readonly HunterSurvivalSettings mySettings = HunterSurvivalSettings.GetSettings();

    #region General Timers & Variables

    private Timer AlchFlaskTimer = new Timer(0);
    private Timer EngineeringTimer = new Timer(0);
    public int LC = 0;
    private Timer OnCD = new Timer(0);
    private Timer TrinketOneTimer = new Timer(0);
    private Timer TrinketTwoTimer = new Timer(0);

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell BloodFury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell WarStomp = new Spell("War Stomp");

    #endregion

    #region Hunter Buffs

    private readonly Spell AspectoftheHawk = new Spell("Aspect of the Hawk");
    private readonly Spell Camouflage = new Spell("Camouflage");
    private readonly Spell FeignDeath = new Spell("Feign Death");
    private readonly Spell HuntersMark = new Spell("Hunter's Mark");
    private readonly Spell Misdirection = new Spell("Misdirection");

    #endregion

    #region Offensive Spell

    private readonly Spell ArcaneShot = new Spell("Arcane Shot");
    private readonly Spell BlackArrow = new Spell("Black Arrow");
    private readonly Spell CallPet1 = new Spell("Call Pet 1");
    private readonly Spell CallPet2 = new Spell("Call Pet 2");
    private readonly Spell CallPet3 = new Spell("Call Pet 3");
    private readonly Spell CallPet4 = new Spell("Call Pet 4");
    private readonly Spell CallPet5 = new Spell("Call Pet 5");
    private readonly Spell CobraShot = new Spell("Cobra Shot");
    private readonly Spell ExplosiveShot = new Spell("Explosive Shot");
    private readonly Spell ExplosiveTrap = new Spell("Explosive Trap");
    private readonly Spell KillShot = new Spell("Kill Shot");
    private readonly Spell MultiShot = new Spell("Multi-Shot");
    private readonly Spell SerpentSting = new Spell("Serpent Sting");
    private readonly Spell SteadyShot = new Spell("Steady Shot");
    private Timer SerpentStingTimer = new Timer(0);

    #endregion

    #region Offensive Cooldown

    private readonly Spell AMurderofCrows = new Spell("A Murder of Crows");
    private readonly Spell Barrage = new Spell("Barrage");
    private readonly Spell BlinkStrike = new Spell("Blink Strike");
    private readonly Spell DireBeast = new Spell("Dire Beast");
    private readonly Spell Fervor = new Spell("Fervor");
    private readonly Spell GlaiveToss = new Spell("Glaive Toss");
    private readonly Spell LynxRush = new Spell("Lynx Rush");
    private readonly Spell Powershot = new Spell("Powershot");
    private readonly Spell RapidFire = new Spell("Rapid Fire");
    private readonly Spell Readiness = new Spell("Readiness");
    private readonly Spell Stampede = new Spell("Stampede");
    private Timer DireBeastTimer = new Timer(0);

    #endregion

    #region Defensive Cooldown

    private readonly Spell BindingShot = new Spell("Binding Shot");
    private readonly Spell ConcussiveShot = new Spell("Concussive Shot");
    private readonly Spell Deterrance = new Spell("Deterrance");
    private readonly Spell Disengage = new Spell("Disengage");
    private readonly Spell FreezingTrap = new Spell("Freezing Trap");
    private readonly Spell IceTrap = new Spell("Ice Trap");
    private readonly Spell ScatterShot = new Spell("Scatter Shot");
    private readonly Spell SilencingShot = new Spell("Silencing Shot");
    private readonly Spell WyvernSting = new Spell("Wyvern Sting");

    #endregion

    #region Healing Spell

    private readonly Spell Exhilaration = new Spell("Exhilaration");
    private readonly Spell FeedPet = new Spell("Feed Pet");
    private readonly Spell MendPet = new Spell("Mend Pet");
    private readonly Spell RevivePet = new Spell("Revive Pet");
    private Timer MendPetTimer = new Timer(0);

    #endregion

    public HunterSurvival()
    {
        Main.range = 30.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDeadMe)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && SerpentSting.IsHostileDistanceGood)
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && mySettings.UseLowCombat)
                            {
                                LC = 1;
                                if (ObjectManager.Target.GetDistance < 41)
                                    LowCombat();
                            }
                            else
                            {
                                LC = 0;
                                if (ObjectManager.Target.GetDistance < 41)
                                    Combat();
                            }
                        }
                        else
                        {
                            if (!ObjectManager.Me.IsCast)
                                Patrolling();
                        }
                    }
                }
                Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(250);
        }
    }

    private void Pull()
    {
        if (HuntersMark.KnownSpell && HuntersMark.IsSpellUsable && mySettings.UseHuntersMark
            && HuntersMark.IsHostileDistanceGood && !HuntersMark.TargetHaveBuff && LC != 1)
            HuntersMark.Launch();

        if (ObjectManager.Pet.IsAlive)
        {
            Lua.RunMacroText("/petattack");
            Logging.WriteFight("Launch Pet Attack");
        }

        if (ObjectManager.Pet.IsAlive && mySettings.UseMisdirection && Misdirection.KnownSpell
            && Misdirection.IsSpellUsable)
        {
            Lua.RunMacroText("/target pet");
            Thread.Sleep(200);
            Misdirection.Launch();
            Thread.Sleep(200);
        }

        if (SerpentSting.KnownSpell && SerpentSting.IsSpellUsable && SerpentSting.IsHostileDistanceGood
            && mySettings.UseSerpentSting)
        {
            SerpentSting.Launch();
            return;
        }
    }

    private void LowCombat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        DefenseCycle();
        Heal();

        if (GlaiveToss.KnownSpell && GlaiveToss.IsSpellUsable && GlaiveToss.IsHostileDistanceGood
            && mySettings.UseGlaiveToss)
        {
            GlaiveToss.Launch();
            return;
        }
        else if (ArcaneShot.IsSpellUsable && ArcaneShot.IsHostileDistanceGood && ArcaneShot.KnownSpell
                 && mySettings.UseArcaneShot)
        {
            ArcaneShot.Launch();
            return;
        }
        else
        {
            if (CobraShot.KnownSpell && CobraShot.IsSpellUsable && CobraShot.IsHostileDistanceGood
                && mySettings.UseCobraShot)
            {
                CobraShot.Launch();
                return;
            }
            else
            {
                if (SteadyShot.KnownSpell && SteadyShot.IsSpellUsable && SteadyShot.IsHostileDistanceGood
                    && ObjectManager.Me.FocusPercentage < 60 && (!CobraShot.KnownSpell || !mySettings.UseCobraShot))
                {
                    SteadyShot.Launch();
                    return;
                }
            }
        }

        if (ExplosiveTrap.KnownSpell && ExplosiveTrap.IsSpellUsable && ExplosiveTrap.IsHostileDistanceGood
            && mySettings.UseExplosiveTrap)
        {
            ExplosiveTrap.Launch();
            return;
        }
    }

    private void Combat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        if (OnCD.IsReady)
            DefenseCycle();
        DPSCycle();
        Heal();
        Decast();
        DPSCycle();
        DPSBurst();
        DPSCycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        Pet();

        if (mySettings.UseAspectoftheHawk && AspectoftheHawk.KnownSpell && AspectoftheHawk.IsSpellUsable
            && !AspectoftheHawk.HaveBuff && !ObjectManager.Me.HaveBuff(109260))
        {
            AspectoftheHawk.Launch();
            return;
        }

        if (mySettings.UseCamouflage && Camouflage.KnownSpell && Camouflage.IsSpellUsable && !Camouflage.HaveBuff
            && !Fight.InFight && ObjectManager.GetNumberAttackPlayer() == 0)
        {
            Camouflage.Launch();
            return;
        }
    }

    private void Pet()
    {
        if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
            && CallPet1.KnownSpell && CallPet1.IsSpellUsable && mySettings.UsePet1 && ObjectManager.GetNumberAttackPlayer() > 0)
        {
            CallPet1.Launch();
            Thread.Sleep(1000);
        }
        else if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                 && CallPet2.KnownSpell && CallPet2.IsSpellUsable && mySettings.UsePet2 && ObjectManager.GetNumberAttackPlayer() > 0)
        {
            CallPet2.Launch();
            Thread.Sleep(1000);
        }
        else if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                 && CallPet3.KnownSpell && CallPet3.IsSpellUsable && mySettings.UsePet3 && ObjectManager.GetNumberAttackPlayer() > 0)
        {
            CallPet3.Launch();
            Thread.Sleep(1000);
        }
        else if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                 && CallPet4.KnownSpell && CallPet4.IsSpellUsable && mySettings.UsePet4 && ObjectManager.GetNumberAttackPlayer() > 0)
        {
            CallPet4.Launch();
            Thread.Sleep(1000);
        }
        else
        {
            if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                && CallPet5.KnownSpell && CallPet5.IsSpellUsable && mySettings.UsePet5 && ObjectManager.GetNumberAttackPlayer() > 0)
            {
                CallPet5.Launch();
                Thread.Sleep(1000);
            }
        }

        if (!ObjectManager.Me.IsCast && (!ObjectManager.Pet.IsAlive || ObjectManager.Pet.Guid == 0)
            && RevivePet.KnownSpell && RevivePet.IsSpellUsable && mySettings.UseRevivePet
            && mySettings.UseCombatRevive && ObjectManager.Target.HealthPercent > 10 && ObjectManager.GetNumberAttackPlayer() > 0)
        {
            RevivePet.Launch();
            Thread.Sleep(1000);
        }
        else if (!ObjectManager.Me.IsCast && !ObjectManager.Pet.IsAlive
                 && RevivePet.KnownSpell && RevivePet.IsSpellUsable && mySettings.UseRevivePet
                 && ObjectManager.GetNumberAttackPlayer() == 0)
        {
            RevivePet.Launch();
            Thread.Sleep(1000);
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            var maxTimeTimer = new Timer(1000*2);
            MovementsAction.MoveBackward(true);
            while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                Thread.Sleep(300);
            MovementsAction.MoveBackward(false);
            if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
            {
                MovementsAction.MoveForward(true);
                Thread.Sleep(1000);
                MovementsAction.MoveForward(false);
                MovementManager.Face(ObjectManager.Target.Position);
            }
        }
    }

    private void DefenseCycle()
    {
        if (ObjectManager.Me.HealthPercent < 20 && mySettings.UseFeignDeath
            && FeignDeath.KnownSpell && FeignDeath.IsSpellUsable)
        {
            FeignDeath.Launch();
            Thread.Sleep(5000);
            if (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                return;
            else
                Thread.Sleep(5000);
        }
        else if (ObjectManager.Me.HealthPercent < 50 && mySettings.UseDeterrance
                 && Deterrance.KnownSpell && Deterrance.IsSpellUsable)
        {
            Deterrance.Launch();
            Thread.Sleep(200);
        }
        else if (mySettings.UseFreezingTrap && ObjectManager.GetNumberAttackPlayer() > 1 && FreezingTrap.KnownSpell
                 && FreezingTrap.IsSpellUsable && ObjectManager.Target.GetDistance > 10)
        {
            FreezingTrap.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && mySettings.UseIceTrap
                 && IceTrap.KnownSpell && IceTrap.IsSpellUsable && ObjectManager.Target.GetDistance < 10
                 && Disengage.KnownSpell && Disengage.IsSpellUsable && mySettings.UseDisengage)
        {
            IceTrap.Launch();
            Thread.Sleep(1000);
            MovementsAction.Jump();
            Disengage.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && mySettings.UseConcussiveShot
                 && ConcussiveShot.KnownSpell && ConcussiveShot.IsSpellUsable && ConcussiveShot.IsHostileDistanceGood
                 && Disengage.KnownSpell && Disengage.IsSpellUsable && mySettings.UseDisengage)
        {
            ConcussiveShot.Launch();
            Thread.Sleep(1000);
            MovementsAction.Jump();
            Disengage.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && mySettings.UseBindingShot
                 && BindingShot.KnownSpell && BindingShot.IsSpellUsable && BindingShot.IsHostileDistanceGood
                 && Disengage.KnownSpell && Disengage.IsSpellUsable && mySettings.UseDisengage)
        {
            BindingShot.Launch();
            Thread.Sleep(1000);
            MovementsAction.Jump();
            Disengage.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent <= mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable &&
                 WarStomp.KnownSpell
                 && mySettings.UseWarStomp)
        {
            WarStomp.Launch();
            OnCD = new Timer(1000*2);
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent <= mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable &&
                Stoneform.KnownSpell
                && mySettings.UseStoneform)
            {
                Stoneform.Launch();
                OnCD = new Timer(1000*8);
                return;
            }
        }
    }

    private void Heal()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (ObjectManager.Me.HealthPercent <= mySettings.UseGiftoftheNaaruAtPercentage && GiftoftheNaaru.KnownSpell &&
            GiftoftheNaaru.IsSpellUsable
            && mySettings.UseGiftoftheNaaru)
        {
            GiftoftheNaaru.Launch();
            return;
        }
        else if (Exhilaration.KnownSpell && Exhilaration.IsSpellUsable
                 && mySettings.UseExhilaration && ObjectManager.Me.HealthPercent < 70)
        {
            Exhilaration.Launch();
            return;
        }
        else if (ObjectManager.Pet.Health > 0 && ObjectManager.Pet.HealthPercent < 50
                 && FeedPet.KnownSpell && FeedPet.IsSpellUsable && mySettings.UseFeedPet
                 && !Fight.InFight && ObjectManager.GetNumberAttackPlayer() == 0)
        {
            FeedPet.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Pet.Health > 0 && ObjectManager.Pet.HealthPercent < 80
                && MendPet.KnownSpell && MendPet.IsSpellUsable && mySettings.UseMendPet
                && MendPetTimer.IsReady)
            {
                MendPet.Launch();
                MendPetTimer = new Timer(1000*10);
                return;
            }
        }
    }

    private void Decast()
    {
        if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8
            && ObjectManager.Me.HealthPercent <= mySettings.UseArcaneTorrentForDecastAtPercentage
            && mySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && SilencingShot.IsHostileDistanceGood
                 && SilencingShot.KnownSpell && SilencingShot.IsSpellUsable && mySettings.UseSilencingShot)
        {
            SilencingShot.Launch();
            return;
        }
        else if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && ScatterShot.IsHostileDistanceGood
                 && ScatterShot.KnownSpell && ScatterShot.IsSpellUsable && mySettings.UseScatterShot)
        {
            ScatterShot.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && mySettings.UseWyvernSting
                && WyvernSting.KnownSpell && WyvernSting.IsSpellUsable && WyvernSting.IsHostileDistanceGood)
            {
                WyvernSting.Launch();
                return;
            }
        }
    }

    private void DPSBurst()
    {
        if (mySettings.UseTrinketOne && TrinketOneTimer.IsReady && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketOneTimer = new Timer(1000*60*2);
        }
        else if (mySettings.UseTrinketTwo && TrinketTwoTimer.IsReady && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketTwoTimer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseBerserking)
            Berserking.Launch();
        else if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseBloodFury)
            BloodFury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (EngineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            EngineeringTimer = new Timer(1000*60);
        }
        else if (AMurderofCrows.KnownSpell && AMurderofCrows.IsSpellUsable && AMurderofCrows.IsHostileDistanceGood
                 && mySettings.UseAMurderofCrows && !AMurderofCrows.TargetHaveBuff)
        {
            AMurderofCrows.Launch();
            return;
        }
        else if (Barrage.KnownSpell && Barrage.IsSpellUsable && mySettings.UseBarrage && Barrage.IsHostileDistanceGood)
        {
            Barrage.Launch();
            return;
        }
        else if (BlinkStrike.KnownSpell && BlinkStrike.IsSpellUsable && ObjectManager.Pet.IsAlive
                 && mySettings.UseBlinkStrike && ObjectManager.Target.GetDistance < 41)
        {
            BlinkStrike.Launch();
            return;
        }
        else if (DireBeast.KnownSpell && DireBeast.IsSpellUsable && mySettings.UseDireBeast
                 && DireBeast.IsHostileDistanceGood && DireBeastTimer.IsReady)
        {
            DireBeast.Launch();
            DireBeastTimer = new Timer(1000*15);
            return;
        }
        else if (Fervor.KnownSpell && Fervor.IsSpellUsable && ObjectManager.Me.Focus < 50
                 && mySettings.UseFervor)
        {
            Fervor.Launch();
            return;
        }
        else if (GlaiveToss.KnownSpell && GlaiveToss.IsSpellUsable && mySettings.UseGlaiveToss &&
                 GlaiveToss.IsHostileDistanceGood)
        {
            GlaiveToss.Launch();
            return;
        }
        else if (LynxRush.KnownSpell && LynxRush.IsSpellUsable && mySettings.UseLynxRush &&
                 ObjectManager.Target.GetDistance < 41)
        {
            LynxRush.Launch();
            return;
        }
        else if (Powershot.KnownSpell && Powershot.IsSpellUsable && mySettings.UsePowershot &&
                 Powershot.IsHostileDistanceGood)
        {
            Powershot.Launch();
            return;
        }
        else if (Stampede.KnownSpell && Stampede.IsSpellUsable && mySettings.UseStampede &&
                 Stampede.IsHostileDistanceGood)
        {
            Stampede.Launch();
            return;
        }
        else if (RapidFire.KnownSpell && RapidFire.IsSpellUsable && mySettings.UseRapidFire
                 && ObjectManager.Target.GetDistance < 41)
        {
            RapidFire.Launch();
            return;
        }
        else
        {
            if (Readiness.KnownSpell && Readiness.IsSpellUsable && mySettings.UseReadiness)
            {
                Readiness.Launch();
                return;
            }
        }
    }

    private void DPSCycle()
    {
        if (SerpentSting.IsSpellUsable && SerpentSting.IsHostileDistanceGood && SerpentSting.KnownSpell
            && mySettings.UseSerpentSting && !SerpentSting.TargetHaveBuff)
        {
            SerpentSting.Launch();
            SerpentStingTimer = new Timer(1000*12);
            return;
        }
        else if (CobraShot.KnownSpell && CobraShot.IsSpellUsable && CobraShot.IsHostileDistanceGood
                 && mySettings.UseCobraShot && SerpentStingTimer.IsReady)
        {
            CobraShot.Launch();
            SerpentStingTimer = new Timer(1000*12);
            return;
        }
        else if (KillShot.KnownSpell && KillShot.IsSpellUsable && KillShot.IsHostileDistanceGood
                 && mySettings.UseKillShot)
        {
            KillShot.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 4 && mySettings.UseMultiShot && mySettings.UseExplosiveTrap
                 && mySettings.UseExplosiveShot)
        {
            if (MultiShot.KnownSpell && MultiShot.IsSpellUsable && MultiShot.IsHostileDistanceGood)
            {
                MultiShot.Launch();
                return;
            }
            else if (ExplosiveTrap.KnownSpell && ExplosiveTrap.IsSpellUsable && ObjectManager.Target.GetDistance < 10)
            {
                ExplosiveTrap.Launch();
                return;
            }
            else
            {
                if (ExplosiveShot.KnownSpell && ExplosiveShot.IsSpellUsable && ExplosiveShot.IsHostileDistanceGood)
                {
                    ExplosiveShot.Launch();
                    return;
                }
            }
        }
        else if (ExplosiveTrap.KnownSpell && ExplosiveTrap.IsSpellUsable && ObjectManager.Target.GetDistance < 10
                 && mySettings.UseExplosiveTrap && ObjectManager.GetNumberAttackPlayer() < 4 &&
                 ObjectManager.GetNumberAttackPlayer() > 1)
        {
            ExplosiveTrap.Launch();
            return;
        }
        else if (BlackArrow.KnownSpell && BlackArrow.IsSpellUsable && BlackArrow.IsHostileDistanceGood
                 && mySettings.UseBlackArrow)
        {
            BlackArrow.Launch();
            return;
        }
        else if (ExplosiveShot.KnownSpell && ExplosiveShot.IsSpellUsable && ExplosiveShot.IsHostileDistanceGood
                 && mySettings.UseExplosiveShot)
        {
            ExplosiveShot.Launch();
            return;
        }
        else if (MultiShot.KnownSpell && MultiShot.IsSpellUsable && MultiShot.IsHostileDistanceGood
                 && mySettings.UseMultiShot && ObjectManager.Me.FocusPercentage > 79
                 && ObjectManager.GetNumberAttackPlayer() < 4 && ObjectManager.GetNumberAttackPlayer() > 1)
        {
            MultiShot.Launch();
            return;
        }
        else if (ArcaneShot.KnownSpell && ArcaneShot.IsSpellUsable && ArcaneShot.IsHostileDistanceGood
                 && mySettings.UseArcaneShot && ObjectManager.Me.FocusPercentage > 79)
        {
            ArcaneShot.Launch();
            return;
        }
        else if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell
                 && mySettings.UseArcaneTorrentForResource)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else
        {
            if (CobraShot.KnownSpell && CobraShot.IsSpellUsable && CobraShot.IsHostileDistanceGood
                && mySettings.UseCobraShot && ObjectManager.Me.FocusPercentage < 80)
            {
                CobraShot.Launch();
                return;
            }
            else
            {
                if (SteadyShot.KnownSpell && SteadyShot.IsSpellUsable && SteadyShot.IsHostileDistanceGood
                    && ObjectManager.Me.FocusPercentage < 60 && (!CobraShot.KnownSpell || !mySettings.UseCobraShot))
                {
                    SteadyShot.Launch();
                    return;
                }
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: HunterSurvivalSettings

    [Serializable]
    public class HunterSurvivalSettings : Settings
    {
        public bool DoAvoidMelee = false;
        public int DoAvoidMeleeDistance = 0;
        public bool UseAMurderofCrows = true;
        public bool UseAlchFlask = true;
        public bool UseArcaneShot = true;
        public bool UseArcaneTorrentForDecast = true;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public bool UseArcaneTorrentForResource = true;
        public bool UseAspectoftheHawk = true;
        public bool UseBarrage = true;
        public bool UseBerserking = true;
        public bool UseBindingShot = true;
        public bool UseBlackArrow = true;
        public bool UseBlinkStrike = true;
        public bool UseBloodFury = true;
        public bool UseCamouflage = false;
        public bool UseCobraShot = true;
        public bool UseCombatRevive = true;
        public bool UseConcussiveShot = true;
        public bool UseDeterrance = true;
        public bool UseDireBeast = true;
        public bool UseDisengage = true;
        public bool UseEngGlove = true;
        public bool UseExhilaration = true;
        public bool UseExplosiveShot = true;
        public bool UseExplosiveTrap = true;
        public bool UseFeedPet = true;
        public bool UseFeignDeath = true;
        public bool UseFervor = true;
        public bool UseFreezingTrap = true;
        public bool UseGiftoftheNaaru = true;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public bool UseGlaiveToss = true;
        public bool UseHuntersMark = true;
        public bool UseIceTrap = true;
        public bool UseKillShot = true;
        public bool UseLifeblood = true;
        public bool UseLowCombat = true;
        public bool UseLynxRush = true;
        public bool UseMendPet = true;
        public bool UseMisdirection = true;
        public bool UseMultiShot = true;
        public bool UsePet1 = true;
        public bool UsePet2 = false;
        public bool UsePet3 = false;
        public bool UsePet4 = false;
        public bool UsePet5 = false;
        public bool UsePowershot = true;
        public bool UseRapidFire = true;
        public bool UseReadiness = true;
        public bool UseRevivePet = true;
        public bool UseScatterShot = true;
        public bool UseSerpentSting = true;
        public bool UseSilencingShot = true;
        public bool UseStampede = true;
        public bool UseStoneform = true;
        public int UseStoneformAtPercentage = 80;
        public bool UseTrinketOne = true;
        public bool UseTrinketTwo = true;
        public bool UseWarStomp = true;
        public int UseWarStompAtPercentage = 80;
        public bool UseWyvernSting = true;

        public HunterSurvivalSettings()
        {
            ConfigWinForm(new Point(500, 400), "Hunter Survival Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Hunter Buffs */
            AddControlInWinForm("Use Aspect of the Hawk", "UseAspectoftheHawk", "Hunter Buffs");
            AddControlInWinForm("Use Camouflage", "UseCamouflage", "Hunter Buffs");
            AddControlInWinForm("Use Feign Death", "UseFeignDeath", "Hunter Buffs");
            AddControlInWinForm("Use Hunter's Mark", "UseHuntersMark", "Hunter Buffs");
            AddControlInWinForm("Use Misdirection", "UseMisdirection", "Hunter Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Arcane Shot", "UseArcaneShot", "Offensive Spell");
            AddControlInWinForm("Use Black Arrow", "UseBlackArrow", "Offensive Spell");
            AddControlInWinForm("Use Pet in Slot 1", "UsePet1", "Offensive Spell");
            AddControlInWinForm("Use Pet in Slot 2", "UsePet2", "Offensive Spell");
            AddControlInWinForm("Use Pet in Slot 3", "UsePet3", "Offensive Spell");
            AddControlInWinForm("Use Pet in Slot 4", "UsePet4", "Offensive Spell");
            AddControlInWinForm("Use Pet in Slot 5", "UsePet5", "Offensive Spell");
            AddControlInWinForm("Use Cobra Shot", "UseCobraShot", "Offensive Spell");
            AddControlInWinForm("Use Explosive Shot", "UseExplosiveShot", "Offensive Spell");
            AddControlInWinForm("Use Explosive Trap", "UseExplosiveTrap", "Offensive Spell");
            AddControlInWinForm("Use KillShot", "UseKillShot", "Offensive Spell");
            AddControlInWinForm("Use Multi-Shot", "UseMultiShot", "Offensive Spell");
            AddControlInWinForm("Use Serpent Sting", "UseSerpentSting", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use A Murder of Crows", "UseAMurderofCrows", "Offensive Cooldown");
            AddControlInWinForm("Use Barrage", "UseBarrage", "Offensive Cooldown");
            AddControlInWinForm("Use Blink Strike", "UseBlinkStrike", "Offensive Cooldown");
            AddControlInWinForm("Use Dire Beast", "UseDireBeast", "Offensive Cooldown");
            AddControlInWinForm("Use Fervor", "UseFervor", "Offensive Cooldown");
            AddControlInWinForm("Use Glaive Toss", "UseGlaiveToss", "Offensive Cooldown");
            AddControlInWinForm("Use Lynx Rush", "UseLynxRush", "Offensive Cooldown");
            AddControlInWinForm("Use Powershot", "UsePowershot", "Offensive Cooldown");
            AddControlInWinForm("Use Rapid Fire", "UseRapidFire", "Offensive Cooldown");
            AddControlInWinForm("Use Readiness", "UseReadiness", "Offensive Cooldown");
            AddControlInWinForm("Use Stampede", "UseStampede", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Binding Shot", "UseBindingShot", "Defensive Cooldown");
            AddControlInWinForm("Use Concussive Shot", "UseConcussiveShot", "Defensive Cooldown");
            AddControlInWinForm("Use Deterrance", "UseDeterrance", "Defensive Cooldown");
            AddControlInWinForm("Use Disengage", "UseDisengage", "Defensive Cooldown");
            AddControlInWinForm("Use Freezing Trap", "UseFreezingTrap", "Defensive Cooldown");
            AddControlInWinForm("Use Ice Trap", "UseIceTrap", "Defensive Cooldown");
            AddControlInWinForm("Use Scatter Shot", "UseScatterShot", "Defensive Cooldown");
            AddControlInWinForm("Use Silencing Shot", "UseSilencingShot", "Defensive Cooldown");
            AddControlInWinForm("Use Wyvern Sting", "UseWyvernSting", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Exhilaration", "UseExhilaration", "Healing Spell");
            AddControlInWinForm("Use Feed Pet", "UseFeedPet", "Healing Spell");
            AddControlInWinForm("Use Mend Pet", "UseMendPet", "Healing Spell");
            AddControlInWinForm("Use Revive Pet", "UseRevivePet", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
            AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
            AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Use Revive Pet in Combat", "UseCombatRevive", "Game Settings");
            AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
            AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
        }

        public static HunterSurvivalSettings CurrentSetting { get; set; }

        public static HunterSurvivalSettings GetSettings()
        {
            string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Hunter_Survival.xml";
            if (File.Exists(currentSettingsFile))
            {
                return
                    CurrentSetting = Load<HunterSurvivalSettings>(currentSettingsFile);
            }
            else
            {
                return new HunterSurvivalSettings();
            }
        }
    }

    #endregion
}

#endregion

#region Monk

public class MonkBrewmaster
{
    private readonly MonkBrewmasterSettings mySettings = MonkBrewmasterSettings.GetSettings();

    #region General Timers & Variables

    private Timer AlchFlaskTimer = new Timer(0);
    public int ElusiveBrewStack = 0;
    private Timer EngineeringTimer = new Timer(0);
    private Timer GrappleWeaponTimer = new Timer(0);
    private Timer HealingSphereTimer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer StaggerTimer = new Timer(0);
    private Timer TrinketOneTimer = new Timer(0);
    private Timer TrinketTwoTimer = new Timer(0);

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell BloodFury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell WarStomp = new Spell("War Stomp");

    #endregion

    #region Monk Buffs

    private readonly Spell Disable = new Spell("Disable");
    private readonly Spell LegacyoftheEmperor = new Spell("Legacy of the Emperor");
    private readonly Spell StanceoftheFierceTiger = new Spell("Stance of the Fierce Tiger");
    private readonly Spell StanceoftheSturdyOx = new Spell("Stance of the Sturdy Ox");
    private readonly Spell TigersLust = new Spell("Tiger's Lust");

    #endregion

    #region Offensive Spell

    private readonly Spell BlackoutKick = new Spell("Blackout Kick");
    private readonly Spell BreathofFire = new Spell("Breathe of Fire");
    private readonly Spell Clash = new Spell("Clash");
    private readonly Spell CracklingJadeLightning = new Spell("Crackling Jade Lightning");
    private readonly Spell DizzyingHaze = new Spell("Dizzying Haze");
    private readonly Spell Jab = new Spell("Jab");
    private readonly Spell KegSmash = new Spell("Keg Smash");
    private readonly Spell Provoke = new Spell("Provoke");
    private readonly Spell Roll = new Spell("Roll");
    private readonly Spell SpinningCraneKick = new Spell("Spinning Crane Kick");
    private readonly Spell TigerPalm = new Spell("Tiger Palm");
    private readonly Spell TouchofDeath = new Spell("Touch of Death");

    #endregion

    #region Offensive Cooldown

    private readonly Spell ChiBrew = new Spell("Chi Brew");
    private readonly Spell InvokeXuentheWhiteTiger = new Spell("Invoke Xuen, the White Tiger");
    private readonly Spell RushingJadeWind = new Spell("Rushing Jade Wind");

    #endregion

    #region Defensive Cooldown

    private readonly Spell ChargingOxWave = new Spell("Charging Ox Wave");
    private readonly Spell DampenHarm = new Spell("Dampen Harm");
    private readonly Spell DiffuseMagic = new Spell("Diffuse Magic");
    private readonly Spell ElusiveBrew = new Spell("Elusive Brew");
    private readonly Spell FortifyingBrew = new Spell("Fortifying Brew");
    private readonly Spell GrappleWeapon = new Spell("Grapple Weapon");
    private readonly Spell Guard = new Spell("Guard");
    private readonly Spell LegSweep = new Spell("Leg Sweep");
    private readonly Spell PurifyingBrew = new Spell("Purifying Brew");
    private Timer PurifyingBrewTimer = new Timer(0);
    private readonly Spell SpearHandStrike = new Spell("Spear Hand Strike");
    private readonly Spell SummonBlackOxStatue = new Spell("Summon Black Ox Statue");
    private readonly Spell ZenMeditation = new Spell("Zen Meditation");

    #endregion

    #region Healing Spell

    private readonly Spell ChiBurst = new Spell("Chi Burst");
    private readonly Spell ChiWave = new Spell("Chi Wave");
    private readonly Spell ExpelHarm = new Spell("Expel Harm");
    private readonly Spell HealingSphere = new Spell("Healing Sphere");
    private readonly Spell ZenSphere = new Spell("Zen Sphere");

    #endregion

    public MonkBrewmaster()
    {
        Main.range = 5.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDead)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget &&
                                Provoke.IsHostileDistanceGood)
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.GetDistance < 30)
                                Combat();
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void Pull()
    {
        if (mySettings.UseClash && Clash.KnownSpell && Clash.IsHostileDistanceGood && Clash.IsSpellUsable)
            Clash.Launch();

        if (mySettings.UseProvoke && Provoke.KnownSpell && !ObjectManager.Target.InCombat && Provoke.IsHostileDistanceGood && Provoke.IsSpellUsable)
        {
            Provoke.Launch();
            return;
        }
    }

    private void Combat()
    {
        if (!LegacyoftheEmperor.HaveBuff || !ObjectManager.Me.HaveBuff(126119) || (TigersLust.KnownSpell && ObjectManager.GetNumberAttackPlayer() == 0)  
            || (!SummonBlackOxStatue.HaveBuff && ObjectManager.GetNumberAttackPlayer() > 0) || (Roll.KnownSpell && ObjectManager.GetNumberAttackPlayer() == 0) 
            || (ItemsManager.GetItemCountByIdLUA(75525) == 1 && AlchFlaskTimer.IsReady))
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        if (OnCD.IsReady && (ObjectManager.Me.HealthPercent <= mySettings.UseGrappleWeaponAtPercentage || ObjectManager.Me.HealthPercent <= mySettings.UseElusiveBrewAtPercentage
            || ObjectManager.Me.HealthPercent <= mySettings.UseFortifyingBrewAtPercentage || ObjectManager.Me.HealthPercent <= mySettings.UseChargingOxWaveAtPercentage
            || ObjectManager.Me.HealthPercent <= mySettings.UseDampenHarmAtPercentage || ObjectManager.Me.HealthPercent <= mySettings.UseLegSweepAtPercentage
            || ObjectManager.Me.HealthPercent <= mySettings.UseGuardAtPercentage || ObjectManager.Me.HealthPercent <= mySettings.UseStoneformAtPercentage
            || ObjectManager.Me.HealthPercent <= mySettings.UseWarStompAtPercentage))
            DefenseCycle();
        Heal();
        Decast();
        DPSBurst();
        DPSCycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (mySettings.UseLegacyoftheEmperor && LegacyoftheEmperor.KnownSpell && !LegacyoftheEmperor.HaveBuff && LegacyoftheEmperor.IsSpellUsable)
            LegacyoftheEmperor.Launch();
        
        if (mySettings.UseStanceoftheSturdyOx && StanceoftheSturdyOx.KnownSpell && !StanceoftheSturdyOx.HaveBuff && StanceoftheSturdyOx.IsSpellUsable)
            StanceoftheSturdyOx.Launch();
        
        if (mySettings.UseTigersLust && TigersLust.KnownSpell && ObjectManager.GetNumberAttackPlayer() == 0 && ObjectManager.Me.GetMove && TigersLust.IsSpellUsable)
            TigersLust.Launch();

        if (mySettings.UseRoll && ObjectManager.GetNumberAttackPlayer() == 0 && Roll.KnownSpell && ObjectManager.Me.GetMove 
                 && !TigersLust.HaveBuff && Roll.IsSpellUsable && ObjectManager.Target.GetDistance > 14)
            Roll.Launch();

        if (mySettings.UseSummonBlackOxStatue && SummonBlackOxStatue.KnownSpell && !ObjectManager.Me.HaveBuff(126119) && SummonBlackOxStatue.IsSpellUsable
                 && ObjectManager.Target.GetDistance < 30 && ObjectManager.Target.InCombat)
            SpellManager.CastSpellByIDAndPosition(115315, ObjectManager.Target.Position);

        if (mySettings.UseAlchFlask && ItemsManager.GetItemCountByIdLUA(75525) == 1 && AlchFlaskTimer.IsReady)
        {
            Logging.WriteFight("Use Alchi Flask");
            Lua.RunMacroText("/use item:75525");
            AlchFlaskTimer = new Timer(1000*60*60*2);
            return;
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            var maxTimeTimer = new Timer(1000*2);
            MovementsAction.MoveBackward(true);
            while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                Thread.Sleep(300);
            MovementsAction.MoveBackward(false);
            if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
            {
                MovementsAction.MoveForward(true);
                Thread.Sleep(1000);
                MovementsAction.MoveForward(false);
                MovementManager.Face(ObjectManager.Target.Position);
            }
        }
    }

    private void DefenseCycle()
    {
        if (mySettings.UseGrappleWeapon && GrappleWeapon.KnownSpell && GrappleWeapon.IsHostileDistanceGood && ObjectManager.Me.HealthPercent <= mySettings.UseGrappleWeaponAtPercentage
            && GrappleWeaponTimer.IsReady && GrappleWeapon.IsSpellUsable)
        {
            GrappleWeapon.Launch();
            GrappleWeaponTimer = new Timer(1000*60);
            return;
        }
        else if (mySettings.UseElusiveBrew && ElusiveBrew.KnownSpell && ObjectManager.GetNumberAttackPlayer() > 0 && ObjectManager.Me.HealthPercent <= mySettings.UseElusiveBrewAtPercentage 
                 && ElusiveBrew.IsSpellUsable && ObjectManager.Me.BuffStack(128939) > 5)
        {
            ElusiveBrewStack = ObjectManager.Me.BuffStack(128939);
            ElusiveBrew.Launch();
            OnCD = new Timer(1000*ElusiveBrewStack);
            return;
        }
        else if (mySettings.UseFortifyingBrew && FortifyingBrew.KnownSpell && ObjectManager.Me.HealthPercent <= mySettings.UseFortifyingBrewAtPercentage && FortifyingBrew.IsSpellUsable)
        {
            FortifyingBrew.Launch();
            OnCD = new Timer(1000*20);
            return;
        }
        else if (mySettings.UseChargingOxWave && ChargingOxWave.KnownSpell && ChargingOxWave.IsHostileDistanceGood && ObjectManager.Me.HealthPercent <= mySettings.UseChargingOxWaveAtPercentage
                 && ChargingOxWave.IsSpellUsable)
        {
            ChargingOxWave.Launch();
            OnCD = new Timer(1000*3);
            return;
        }
        else if (mySettings.UseDampenHarm && DampenHarm.KnownSpell && DampenHarm.IsSpellUsable && ObjectManager.Me.HealthPercent <= mySettings.UseDampenHarmAtPercentage)
        {
            DampenHarm.Launch();
            OnCD = new Timer(1000*5);
            return;
        }
        else if (mySettings.UseLegSweep && LegSweep.KnownSpell && ObjectManager.Target.GetDistance < 6 && ObjectManager.Me.HealthPercent <= mySettings.UseLegSweepAtPercentage
                 && LegSweep.IsSpellUsable)
        {
            LegSweep.Launch();
            OnCD = new Timer(1000*5);
            return;
        }
        else if (mySettings.UseGuard && Guard.KnownSpell && ObjectManager.Me.HaveBuff(118636) && Guard.IsSpellUsable && ObjectManager.Me.HealthPercent <= mySettings.UseGuardAtPercentage)
        {
            Guard.Launch();
            OnCD = new Timer(1000*5);
            return;
        }
        else if (mySettings.UsePurifyingBrew && PurifyingBrew.KnownSpell && ObjectManager.Me.HaveBuff(124255) && PurifyingBrewTimer.IsReady && PurifyingBrew.IsSpellUsable 
                 && ObjectManager.Me.HealthPercent <= mySettings.UsePurifyingBrewAtPercentage)
        {
            PurifyingBrew.Launch();
            PurifyingBrewTimer = new Timer(1000*10);
            return;
        }
        else if (mySettings.UseStoneform && Stoneform.KnownSpell && Stoneform.IsSpellUsable && ObjectManager.Me.HealthPercent <= mySettings.UseStoneformAtPercentage)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else
        {
            if (mySettings.UseWarStomp && WarStomp.KnownSpell && ObjectManager.Target.GetDistance < 8 && WarStomp.IsSpellUsable && ObjectManager.Me.HealthPercent <= mySettings.UseWarStompAtPercentage)
            {
                WarStomp.Launch();
                OnCD = new Timer(1000*2);
                return;
            }
        }
    }

    private void Heal()
    {
        if (mySettings.UseGiftoftheNaaru && GiftoftheNaaru.KnownSpell && GiftoftheNaaru.IsSpellUsable
            && ObjectManager.Me.HealthPercent <= mySettings.UseGiftoftheNaaruAtPercentage)
        {
            GiftoftheNaaru.Launch();
            return;
        }
        else if (mySettings.UseHealingSphere && HealingSphere.KnownSpell && HealingSphere.IsSpellUsable && HealingSphereTimer.IsReady && ObjectManager.Me.HealthPercent <= mySettings.UseHealingSphereAtPercentage)
        {
            SpellManager.CastSpellByIDAndPosition(115460, ObjectManager.Me.Position);
            HealingSphereTimer = new Timer(1000*8);
            return;
        }
        else if (mySettings.UseChiWave && ChiWave.KnownSpell && ObjectManager.Me.HealthPercent <= mySettings.UseChiWaveAtPercentage && ChiWave.IsSpellUsable)
        {
            ChiWave.Launch();
            return;
        }
        else if (mySettings.UseChiBurst && ChiBurst.KnownSpell && ObjectManager.Me.HealthPercent <= mySettings.UseChiBurstAtPercentage && ChiBurst.IsSpellUsable)
        {
            ChiBurst.Launch();
            return;
        }
        else if (mySettings.UseExpelHarm && ExpelHarm.KnownSpell && ObjectManager.Me.HealthPercent <= mySettings.UseExpelHarmAtPercentage && ExpelHarm.IsSpellUsable)
        {
            ExpelHarm.Launch();
            return;
        }
        else
        {
            if (mySettings.UseZenSphere && ZenSphere.KnownSpell && ObjectManager.Me.HealthPercent <= mySettings.UseZenSphereAtPercentage 
                && !ZenSphere.HaveBuff && ZenSphere.IsSpellUsable)
            {
                ZenSphere.Launch();
                return;
            }
        }
    }

    private void Decast()
    {
        if (mySettings.UseArcaneTorrentForDecast && ArcaneTorrent.KnownSpell && ObjectManager.Me.HealthPercent <= mySettings.UseArcaneTorrentForDecastAtPercentage
            && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && ObjectManager.Target.GetDistance < 8 && ArcaneTorrent.IsSpellUsable)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else if (mySettings.UseDiffuseMagic && DiffuseMagic.KnownSpell && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && DiffuseMagic.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseDiffuseMagicAtPercentage)
        {
            DiffuseMagic.Launch();
            return;
        }
        else
        {
            if (mySettings.UseSpearHandStrike && SpearHandStrike.KnownSpell && ObjectManager.Target.IsCast && SpearHandStrike.IsHostileDistanceGood && SpearHandStrike.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= mySettings.UseSpearHandStrikeAtPercentage)
            {
                SpearHandStrike.Launch();
                return;
            }
        }

        if (mySettings.UseDisable && Disable.KnownSpell && ObjectManager.Target.GetMove && !Disable.TargetHaveBuff && Disable.IsHostileDistanceGood && Disable.IsSpellUsable)
        {
            Disable.Launch();
            return;
        }
    }

    private void DPSBurst()
    {
        if (mySettings.UseTrinketOne && TrinketOneTimer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketOneTimer = new Timer(1000*60*2);
        }
        else if (mySettings.UseTrinketTwo && TrinketTwoTimer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketTwoTimer = new Timer(1000*60*2);
        }

        if (mySettings.UseBerserking && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30 && Berserking.IsSpellUsable)
            Berserking.Launch();
        else if (mySettings.UseBloodFury && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 30 && BloodFury.IsSpellUsable)
            BloodFury.Launch();

        if (mySettings.UseLifeblood && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30 && Lifeblood.IsSpellUsable)
            Lifeblood.Launch();

        if (mySettings.UseEngGlove && Engineering.KnownSpell && EngineeringTimer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            EngineeringTimer = new Timer(1000*60);
        }
        
        if (mySettings.UseChiBrew && ChiBrew.KnownSpell && ObjectManager.Me.Chi == 0 && ChiBrew.IsSpellUsable)
            ChiBrew.Launch();
        
        if (mySettings.UseTouchofDeath && TouchofDeath.KnownSpell && TouchofDeath.IsHostileDistanceGood && TouchofDeath.IsSpellUsable)
            TouchofDeath.Launch();

        if (mySettings.UseInvokeXuentheWhiteTiger && InvokeXuentheWhiteTiger.KnownSpell && InvokeXuentheWhiteTiger.IsHostileDistanceGood && InvokeXuentheWhiteTiger.IsSpellUsable)
            InvokeXuentheWhiteTiger.Launch();

        if (mySettings.UseRushingJadeWind && RushingJadeWind.KnownSpell && RushingJadeWind.IsHostileDistanceGood && RushingJadeWind.IsSpellUsable
                && ObjectManager.GetNumberAttackPlayer() > 3)
        {
            RushingJadeWind.Launch();
            return;
        }
    }

    private void DPSCycle()
    {
        if (ObjectManager.GetNumberAttackPlayer() > 2)
        {
            if (mySettings.UseSpinningCraneKick && SpinningCraneKick.KnownSpell && ObjectManager.GetNumberAttackPlayer() > 5 && !ObjectManager.Me.IsCast
            && ObjectManager.Target.GetDistance < 8 && SpinningCraneKick.IsSpellUsable)
            {
                SpinningCraneKick.Launch();
                return;
            }
            else if (mySettings.UseDizzyingHaze && DizzyingHaze.KnownSpell && !DizzyingHaze.TargetHaveBuff && DizzyingHaze.IsHostileDistanceGood && DizzyingHaze.IsSpellUsable)
            {
                SpellManager.CastSpellByIDAndPosition(115180, ObjectManager.Target.Position);
                return;
            }
            else if (mySettings.UseBreathofFire && BreathofFire.KnownSpell && !BreathofFire.TargetHaveBuff && ObjectManager.Target.GetDistance < 8 && BreathofFire.IsSpellUsable)
            {
                BreathofFire.Launch();
                return;
            }
            else if (mySettings.UseRushingJadeWind && RushingJadeWind.KnownSpell && ObjectManager.Target.GetDistance < 30 && RushingJadeWind.IsSpellUsable)
            {
                RushingJadeWind.Launch();
                return;
            }
        }

        if (mySettings.UseRushingJadeWind && RushingJadeWind.KnownSpell && ObjectManager.Target.GetDistance < 30 && !ObjectManager.Target.HaveBuff(115307) && RushingJadeWind.IsSpellUsable)
        {
            RushingJadeWind.Launch();
            return;
        }
        else if (mySettings.UseBlackoutKick && BlackoutKick.KnownSpell && BlackoutKick.IsHostileDistanceGood && BlackoutKick.IsSpellUsable
                 && (!ObjectManager.Me.HaveBuff(115307) || !StanceoftheSturdyOx.KnownSpell))
        {
            BlackoutKick.Launch();
            return;
        }
        
        if (mySettings.UseTigerPalm && TigerPalm.KnownSpell && TigerPalm.IsHostileDistanceGood && TigerPalm.IsSpellUsable && (!ObjectManager.Me.HaveBuff(125359)
            || (!ObjectManager.Me.HaveBuff(118636) && Guard.IsSpellUsable && ObjectManager.Me.HealthPercent <= mySettings.UseGuardAtPercentage)))
        {
            TigerPalm.Launch();
            return;
        }
        
        if (mySettings.UseKegSmash && KegSmash.KnownSpell && KegSmash.IsHostileDistanceGood && ObjectManager.Me.Chi < 3 && KegSmash.IsSpellUsable)
        {
            KegSmash.Launch();
            return;
        }
        else if (mySettings.UseArcaneTorrentForResource && ArcaneTorrent.KnownSpell && ObjectManager.Me.EnergyPercentage < 40 && ArcaneTorrent.IsSpellUsable
                 && ObjectManager.Me.HealthPercent <= mySettings.UseExpelHarmAtPercentage)
            ArcaneTorrent.Launch();
        else if (mySettings.UseExpelHarm && ExpelHarm.KnownSpell && ObjectManager.Me.HealthPercent <= mySettings.UseExpelHarmAtPercentage && ObjectManager.Me.Chi < 4
                 && ExpelHarm.IsHostileDistanceGood && ExpelHarm.IsSpellUsable)
        {
            ExpelHarm.Launch();
            return;
        }
        else if (mySettings.UseJab && Jab.KnownSpell && ObjectManager.Me.Chi < 4 && Jab.IsHostileDistanceGood && Jab.IsSpellUsable)
        {
            Jab.Launch();
            return;
        }

        if (mySettings.UseTigerPalm && TigerPalm.KnownSpell && TigerPalm.IsHostileDistanceGood && TigerPalm.IsSpellUsable && (ObjectManager.Me.HaveBuff(115307) || !StanceoftheSturdyOx.KnownSpell))
        {
            TigerPalm.Launch();
            return;
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: MonkBrewmasterSettings

    [Serializable]
    public class MonkBrewmasterSettings : Settings
    {
        public bool DoAvoidMelee = false;
        public int DoAvoidMeleeDistance = 0;
        public bool UseAlchFlask = true;
        public bool UseArcaneTorrentForDecast = true;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public bool UseArcaneTorrentForResource = true;
        public bool UseBerserking = true;
        public bool UseBlackoutKick = true;
        public bool UseBloodFury = true;
        public bool UseBreathofFire = true;
        public bool UseChargingOxWave = true;
        public int UseChargingOxWaveAtPercentage = 90;
        public bool UseChiBrew = true;
        public bool UseChiBurst = true;
        public int UseChiBurstAtPercentage = 90;
        public bool UseChiWave = true;
        public int UseChiWaveAtPercentage = 85;
        public bool UseClash = true;
        public bool UseCracklingJadeLightning = true;
        public bool UseDampenHarm = true;
        public int UseDampenHarmAtPercentage = 90;
        public bool UseDiffuseMagic = true;
        public int UseDiffuseMagicAtPercentage = 90;
        public bool UseDisable = false;
        public bool UseDizzyingHaze = true;
        public bool UseElusiveBrew = true;
        public int UseElusiveBrewAtPercentage = 70;
        public bool UseEngGlove = true;
        public bool UseExpelHarm = true;
        public int UseExpelHarmAtPercentage = 90;
        public bool UseFortifyingBrew = true;
        public int UseFortifyingBrewAtPercentage = 80;
        public bool UseGiftoftheNaaru = true;
        public int UseGiftoftheNaaruAtPercentage = 80;
        public bool UseGrappleWeapon = true;
        public int UseGrappleWeaponAtPercentage = 95;
        public bool UseGuard = true;
        public int UseGuardAtPercentage = 95;
        public bool UseHealingSphere = true;
        public int UseHealingSphereAtPercentage = 70;
        public bool UseInvokeXuentheWhiteTiger = true;
        public bool UseJab = true;
        public bool UseKegSmash = true;
        public bool UseLegSweep = true;
        public int UseLegSweepAtPercentage = 90;
        public bool UseLegacyoftheEmperor = true;
        public bool UseLifeblood = true;
        public bool UseProvoke = true;
        public bool UsePurifyingBrew = true;
        public int UsePurifyingBrewAtPercentage = 90;
        public bool UseRoll = true;
        public bool UseRushingJadeWind = true;
        public bool UseSpearHandStrike = true;
        public int UseSpearHandStrikeAtPercentage = 100;
        public bool UseSpinningCraneKick = true;
        public bool UseStanceoftheFierceTiger = true;
        public bool UseStanceoftheSturdyOx = true;
        public bool UseStoneform = true;
        public int UseStoneformAtPercentage = 80;
        public bool UseSummonBlackOxStatue = true;
        public bool UseTigerPalm = true;
        public bool UseTigersLust = true;
        public bool UseTouchofDeath = true;
        public bool UseTrinketOne = true;
        public bool UseTrinketTwo = true;
        public bool UseWarStomp = true;
        public int UseWarStompAtPercentage = 80;
        public bool UseZenMeditation = true;
        public bool UseZenSphere = true;
        public int UseZenSphereAtPercentage = 90;

        public MonkBrewmasterSettings()
        {
            ConfigWinForm(new Point(500, 400), "Brewmaster Monk Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent For Decast", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent For Resource", "UseArcaneTorrentForResource", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials", "AtPercentage");
            /* Monk Buffs */
            AddControlInWinForm("Use Disable", "UseDisable", "Monk Buffs");
            AddControlInWinForm("Use Legacy of the Emperor", "UseLegacyoftheEmperor", "Monk Buffs");
            AddControlInWinForm("Use Stance of the Fierce Tiger", "UseStanceoftheFierceTiger", "Monk Buffs");
            AddControlInWinForm("Use Tiger's Lust", "UseTigersLust", "Monk Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Chi Wave", "UseChiWave", "Offensive Spell", "AtPercentage");
            AddControlInWinForm("Use Blackout Kick", "UseBlackoutKick", "Offensive Spell");
            AddControlInWinForm("Use Breath of Fire", "UseBreathofFire", "Offensive Spell");
            AddControlInWinForm("Use Clash", "UseClash", "Offensive Spell");
            AddControlInWinForm("Use Crackling Jade Lightning", "UseCracklingJadeLightning", "Offensive Spell");
            AddControlInWinForm("Use Dizzying Haze", "UseDizzyingHaze", "Offensive Spell");
            AddControlInWinForm("Use Jab", "UseJab", "Offensive Spell");
            AddControlInWinForm("Use Keg Smash", "UseKegSmash", "Offensive Spell");
            AddControlInWinForm("Use Provoke", "UseProvoke", "Offensive Spell");
            AddControlInWinForm("Use Roll", "UseRoll", "Offensive Spell");
            AddControlInWinForm("Use Spinning Crane Kick", "UseSpinningCraneKick", "Offensive Spell");
            AddControlInWinForm("Use Tiger Palm", "UseTigerPalm", "Offensive Spell");
            AddControlInWinForm("Use Touch of Death", "UseTouchofDeath", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Chi Brew", "UseChiBrew", "Offensive Cooldown");
            AddControlInWinForm("Use Invoke Xuen, the White Tiger", "UseInvokeXuentheWhiteTiger", "Offensive Cooldown");
            AddControlInWinForm("Use Rushing Jade Wind", "UseRushingJadeWind", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Charging Ox Wave", "UseChargingOxWave", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Dampen Harm ", "UseDampenHarm ", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Diffuse Magic", "UseDiffuseMagic", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Elusive Brew", "UseElusiveBrew", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Fortifying Brew", "UseFortifyingBrew", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Grapple Weapon", "UseGrappleWeapon", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Guard", "UseGuard", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Leg Sweep", "UseLegSweep", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Purifying Brew", "UsePurifyingBrew", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Spear Hand Strike", "UseSpearHandStrike", "Defensive Cooldown", "AtPercentage");
            AddControlInWinForm("Use Summon Black Ox Statue", "UseSummonBlackOxStatue", "Defensive Cooldown");
            AddControlInWinForm("Use Zen Meditation", "UseZenMeditation", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Chi Burst", "UseChiBurst", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Expel Harm", "UseExpelHarm", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Healing Sphere", "UseHealingSphere", "Healing Spell", "AtPercentage");
            AddControlInWinForm("Use Zen Sphere", "UseZenSphere", "Healing Spell", "AtPercentage");
            /* Game Settings */
            AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
            AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
            AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
        }

        public static MonkBrewmasterSettings CurrentSetting { get; set; }

        public static MonkBrewmasterSettings GetSettings()
        {
            string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Monk_Brewmaster.xml";
            if (File.Exists(currentSettingsFile))
            {
                return
                    CurrentSetting = Load<MonkBrewmasterSettings>(currentSettingsFile);
            }
            else
            {
                return new MonkBrewmasterSettings();
            }
        }
    }

    #endregion
}

public class MonkWindwalker
{
    private readonly MonkWindwalkerSettings mySettings = MonkWindwalkerSettings.GetSettings();

    #region General Timers & Variables

    private Timer AlchFlaskTimer = new Timer(0);
    private Timer EngineeringTimer = new Timer(0);
    private Timer GrappleWeaponTimer = new Timer(0);
    private Timer HealingSphereTimer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer RisingSunKickTimer = new Timer(0);
    private Timer TigerPowerTimer = new Timer(0);
    private Timer TrinketOneTimer = new Timer(0);
    private Timer TrinketTwoTimer = new Timer(0);

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell BloodFury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell WarStomp = new Spell("War Stomp");

    #endregion

    #region Monk Buffs

    private readonly Spell Disable = new Spell("Disable");
    private readonly Spell LegacyoftheEmperor = new Spell("Legacy of the Emperor");
    private readonly Spell LegacyoftheWhiteTiger = new Spell("Legacy of the White Tiger");
    private readonly Spell StanceoftheFierceTiger = new Spell("Stance of the Fierce Tiger");
    private readonly Spell TigereyeBrew = new Spell("Tigereye Brew");
    private readonly Spell TigersLust = new Spell("Tiger's Lust");

    #endregion

    #region Offensive Spell

    private readonly Spell BlackoutKick = new Spell("Blackout Kick");
    private readonly Spell CracklingJadeLightning = new Spell("Crackling Jade Lightning");
    private readonly Spell FistsofFury = new Spell("Fists of Fury");
    private readonly Spell Jab = new Spell("Jab");
    private readonly Spell Provoke = new Spell("Provoke");
    private readonly Spell RisingSunKick = new Spell("Rising Sun Kick");
    private readonly Spell Roll = new Spell("Roll");
    private readonly Spell SpinningCraneKick = new Spell("Spinning Crane Kick");
    private readonly Spell TigerPalm = new Spell("Tiger Palm");
    private readonly Spell TouchofDeath = new Spell("Touch of Death");

    #endregion

    #region Offensive Cooldown

    private readonly Spell ChiBrew = new Spell("Chi Brew");
    private readonly Spell EnergizingBrew = new Spell("Energizing Brew");
    private readonly Spell InvokeXuentheWhiteTiger = new Spell("Invoke Xuen, the White Tiger");
    private readonly Spell RushingJadeWind = new Spell("Rushing Jade Wind");

    #endregion

    #region Defensive Cooldown

    private readonly Spell ChargingOxWave = new Spell("Charging Ox Wave");
    private readonly Spell DampenHarm = new Spell("Dampen Harm");
    private readonly Spell DiffuseMagic = new Spell("Diffuse Magic");
    private readonly Spell FortifyingBrew = new Spell("Fortifying Brew");
    private readonly Spell GrappleWeapon = new Spell("Grapple Weapon");
    private readonly Spell LegSweep = new Spell("Leg Sweep");
    private readonly Spell SpearHandStrike = new Spell("Spear Hand Strike");
    private readonly Spell TouchofKarma = new Spell("Touch of Karma");
    private readonly Spell ZenMeditation = new Spell("Zen Meditation");

    #endregion

    #region Healing Spell

    private readonly Spell ChiBurst = new Spell("Chi Burst");
    private readonly Spell ChiWave = new Spell("Chi Wave");
    private readonly Spell ExpelHarm = new Spell("Expel Harm");
    private readonly Spell HealingSphere = new Spell("Healing Sphere");
    private readonly Spell ZenSphere = new Spell("Zen Sphere");

    #endregion

    public MonkWindwalker()
    {
        Main.range = 5.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDead)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget &&
                                Provoke.IsHostileDistanceGood)
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.GetDistance < 30)
                                Combat();
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void Pull()
    {
        if (!ObjectManager.Target.InCombat && Provoke.IsSpellUsable && Provoke.IsHostileDistanceGood
            && mySettings.UseProvoke && Provoke.KnownSpell)
        {
            Provoke.Launch();
            return;
        }
    }

    private void Combat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        if (OnCD.IsReady)
            DefenseCycle();
        DPSCycle();
        Heal();
        Decast();
        DPSCycle();
        DPSBurst();
        DPSCycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (LegacyoftheEmperor.KnownSpell && LegacyoftheEmperor.IsSpellUsable &&
            !LegacyoftheEmperor.HaveBuff && mySettings.UseLegacyoftheEmperor)
        {
            LegacyoftheEmperor.Launch();
            return;
        }
        if (LegacyoftheWhiteTiger.KnownSpell && LegacyoftheWhiteTiger.IsSpellUsable &&
            !LegacyoftheWhiteTiger.HaveBuff && mySettings.UseLegacyoftheWhiteTiger)
        {
            LegacyoftheWhiteTiger.Launch();
            return;
        }
        else if (StanceoftheFierceTiger.KnownSpell && StanceoftheFierceTiger.IsSpellUsable && !StanceoftheFierceTiger.HaveBuff
                 && mySettings.UseStanceoftheFierceTiger)
        {
            StanceoftheFierceTiger.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() == 0 && TigersLust.IsSpellUsable && TigersLust.KnownSpell
                 && mySettings.UseTigersLust && ObjectManager.Me.GetMove)
        {
            TigersLust.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() == 0 && Roll.IsSpellUsable && Roll.KnownSpell
                 && mySettings.UseRoll && ObjectManager.Me.GetMove && !TigersLust.HaveBuff
                 && ObjectManager.Target.GetDistance > 14)
        {
            Roll.Launch();
            return;
        }
        else
        {
            if (AlchFlaskTimer.IsReady && mySettings.UseAlchFlask
                && ItemsManager.GetItemCountByIdLUA(75525) == 1)
            {
                Logging.WriteFight("Use Alchi Flask");
                Lua.RunMacroText("/use item:75525");
                AlchFlaskTimer = new Timer(1000*60*60*2);
            }
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            var maxTimeTimer = new Timer(1000*2);
            MovementsAction.MoveBackward(true);
            while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                Thread.Sleep(300);
            MovementsAction.MoveBackward(false);
            if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
            {
                MovementsAction.MoveForward(true);
                Thread.Sleep(1000);
                MovementsAction.MoveForward(false);
                MovementManager.Face(ObjectManager.Target.Position);
            }
        }
    }

    private void DefenseCycle()
    {
        if (ObjectManager.Me.HealthPercent < 95 && mySettings.UseGrappleWeapon && GrappleWeapon.IsHostileDistanceGood
            && GrappleWeapon.KnownSpell && GrappleWeapon.IsSpellUsable && GrappleWeaponTimer.IsReady)
        {
            GrappleWeapon.Launch();
            GrappleWeaponTimer = new Timer(1000*60);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && FortifyingBrew.IsSpellUsable && FortifyingBrew.KnownSpell
                 && mySettings.UseFortifyingBrew)
        {
            FortifyingBrew.Launch();
            OnCD = new Timer(1000*20);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && ZenMeditation.IsSpellUsable && ZenMeditation.KnownSpell
                 && mySettings.UseZenMeditation)
        {
            ZenMeditation.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 90 && ChargingOxWave.IsSpellUsable && ChargingOxWave.KnownSpell
                 && mySettings.UseChargingOxWave && ChargingOxWave.IsHostileDistanceGood)
        {
            ChargingOxWave.Launch();
            OnCD = new Timer(1000*3);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 90 && DampenHarm.IsSpellUsable && DampenHarm.KnownSpell
                 && mySettings.UseDampenHarm)
        {
            DampenHarm.Launch();
            OnCD = new Timer(1000*5);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 90 && LegSweep.IsSpellUsable && LegSweep.KnownSpell
                 && mySettings.UseLegSweep && ObjectManager.Target.GetDistance < 6)
        {
            LegSweep.Launch();
            OnCD = new Timer(1000*5);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 95 && TouchofKarma.IsSpellUsable && TouchofKarma.KnownSpell
                 && mySettings.UseTouchofKarma && TouchofKarma.IsHostileDistanceGood)
        {
            TouchofKarma.Launch();
            OnCD = new Timer(1000*6);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && Stoneform.IsSpellUsable && Stoneform.KnownSpell
                 && mySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent < 80 && WarStomp.IsSpellUsable && WarStomp.KnownSpell
                && mySettings.UseWarStomp)
            {
                WarStomp.Launch();
                OnCD = new Timer(1000*2);
                return;
            }
        }
    }

    private void Heal()
    {
        if (HealingSphere.KnownSpell && HealingSphere.IsSpellUsable && ObjectManager.Me.Energy > 39 &&
            ObjectManager.Me.HealthPercent < 70 && mySettings.UseHealingSphere && HealingSphereTimer.IsReady)
        {
            SpellManager.CastSpellByIDAndPosition(115460, ObjectManager.Me.Position);
            HealingSphereTimer = new Timer(1000*5);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 85 && ChiWave.KnownSpell && ChiWave.IsSpellUsable
                 && mySettings.UseChiWave)
        {
            ChiWave.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 90 && ChiBurst.KnownSpell && ChiBurst.IsSpellUsable
                 && mySettings.UseChiBurst)
        {
            ChiBurst.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent < 95 && ZenSphere.KnownSpell && ZenSphere.IsSpellUsable
                && mySettings.UseZenSphere)
            {
                ZenSphere.Launch();
                return;
            }
        }
    }

    private void Decast()
    {
        if (ArcaneTorrent.KnownSpell && mySettings.UseArcaneTorrentForDecast && ArcaneTorrent.IsSpellUsable && ObjectManager.Me.HealthPercent <= mySettings.UseArcaneTorrentForDecastAtPercentage
            && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && ObjectManager.Target.GetDistance < 8)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else if (DiffuseMagic.KnownSpell && mySettings.UseDiffuseMagic && DiffuseMagic.IsSpellUsable
                 && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
        {
            DiffuseMagic.Launch();
            return;
        }
        else
        {
            if (SpearHandStrike.KnownSpell && mySettings.UseSpearHandStrike && ObjectManager.Target.IsCast
                && SpearHandStrike.IsSpellUsable && SpearHandStrike.IsHostileDistanceGood)
            {
                SpearHandStrike.Launch();
                return;
            }
        }

        if (ObjectManager.Target.GetMove && !Disable.TargetHaveBuff && mySettings.UseDisable
            && Disable.KnownSpell && Disable.IsSpellUsable && Disable.IsHostileDistanceGood)
        {
            Disable.Launch();
            return;
        }
    }

    private void DPSBurst()
    {
        if (mySettings.UseTrinketOne && TrinketOneTimer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketOneTimer = new Timer(1000*60*2);
        }
        else if (mySettings.UseTrinketTwo && TrinketTwoTimer.IsReady && ObjectManager.Target.GetDistance < 30)
        {
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketTwoTimer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseBerserking)
            Berserking.Launch();
        else if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseBloodFury)
            BloodFury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (EngineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                 && mySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            EngineeringTimer = new Timer(1000*60);
        }
        else if (ChiBrew.IsSpellUsable && ChiBrew.KnownSpell
                 && mySettings.UseChiBrew && ObjectManager.Me.Chi == 0)
        {
            ChiBrew.Launch();
            return;
        }
        else if (TouchofDeath.IsSpellUsable && TouchofDeath.KnownSpell && TouchofDeath.IsHostileDistanceGood
                 && mySettings.UseTouchofDeath)
        {
            TouchofDeath.Launch();
            return;
        }
        else if (InvokeXuentheWhiteTiger.IsSpellUsable && InvokeXuentheWhiteTiger.KnownSpell
                 && mySettings.UseInvokeXuentheWhiteTiger && InvokeXuentheWhiteTiger.IsHostileDistanceGood)
        {
            InvokeXuentheWhiteTiger.Launch();
            return;
        }
        else if (EnergizingBrew.IsSpellUsable && EnergizingBrew.KnownSpell && ObjectManager.Me.Energy < 41
                 && mySettings.UseEnergizingBrew && ObjectManager.Target.GetDistance < 30)
        {
            EnergizingBrew.Launch();
            return;
        }
        else if (TigereyeBrew.IsSpellUsable && TigereyeBrew.KnownSpell && ObjectManager.Me.BuffStack(125195) > 9
                 && mySettings.UseTigereyeBrew && ObjectManager.Target.GetDistance < 30)
        {
            TigereyeBrew.Launch();
            return;
        }
        else
        {
            if (RushingJadeWind.IsSpellUsable && RushingJadeWind.KnownSpell && RushingJadeWind.IsHostileDistanceGood
                && mySettings.UseRushingJadeWind && ObjectManager.GetNumberAttackPlayer() > 3)
            {
                RushingJadeWind.Launch();
                return;
            }
        }
    }

    private void DPSCycle()
    {
        if (ObjectManager.GetNumberAttackPlayer() > 3 && RisingSunKick.IsSpellUsable && RisingSunKick.KnownSpell
            && RisingSunKick.IsHostileDistanceGood && !RisingSunKick.TargetHaveBuff && mySettings.UseRisingSunKick)
        {
            RisingSunKick.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 3 && SpinningCraneKick.IsSpellUsable && SpinningCraneKick.KnownSpell
                 && SpinningCraneKick.IsHostileDistanceGood && !ObjectManager.Me.IsCast && mySettings.UseSpinningCraneKick)
        {
            SpinningCraneKick.Launch();
            return;
        }
        else if (RisingSunKick.KnownSpell && RisingSunKick.IsSpellUsable && RisingSunKick.IsHostileDistanceGood
                 && mySettings.UseRisingSunKick)
        {
            RisingSunKick.Launch();
            RisingSunKickTimer = new Timer(1000*4);
            return;
        }
        else if (TigerPalm.IsSpellUsable && TigerPalm.IsHostileDistanceGood && TigerPalm.KnownSpell
                 && mySettings.UseTigerPalm && !ObjectManager.Me.HaveBuff(121125)
                 && (TigerPowerTimer.IsReady || ObjectManager.Me.BuffStack(125359) != 3 || ObjectManager.Me.HaveBuff(118864)))
        {
            TigerPalm.Launch();
            TigerPowerTimer = new Timer(1000*15);
            return;
        }
        else if (FistsofFury.KnownSpell && FistsofFury.IsSpellUsable && FistsofFury.IsHostileDistanceGood && !ObjectManager.Me.HaveBuff(121125)
                 && mySettings.UseFistsofFury && !TigerPowerTimer.IsReady && !RisingSunKickTimer.IsReady
                 && ObjectManager.Me.EnergyPercentage < 81 && ObjectManager.Me.BuffStack(125359) > 2)
        {
            FistsofFury.Launch();
            return;
        }
        else if (BlackoutKick.IsSpellUsable && BlackoutKick.IsHostileDistanceGood && BlackoutKick.KnownSpell && !ObjectManager.Me.HaveBuff(121125)
                 && mySettings.UseBlackoutKick && (ObjectManager.Me.HaveBuff(116768) || ObjectManager.Me.Chi > 2))
        {
            BlackoutKick.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 91 && ExpelHarm.KnownSpell && ExpelHarm.IsSpellUsable
                 && mySettings.UseExpelHarm && ObjectManager.Me.Chi < 3 && ExpelHarm.IsHostileDistanceGood)
        {
            ExpelHarm.Launch();
            return;
        }
        else if (Jab.KnownSpell && Jab.IsSpellUsable && mySettings.UseJab && !ObjectManager.Me.HaveBuff(116768)
                && ObjectManager.Me.Chi < 3 && !ObjectManager.Me.HaveBuff(118864) && Jab.IsHostileDistanceGood)
        {
            Jab.Launch();
            return;
        }
        else
        {
            if (mySettings.UseArcaneTorrentForResource && ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable && ObjectManager.Me.EnergyPercentage < 90)
                ArcaneTorrent.Launch();
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: MonkWindwalkerSettings

    [Serializable]
    public class MonkWindwalkerSettings : Settings
    {
        public bool DoAvoidMelee = false;
        public int DoAvoidMeleeDistance = 0;
        public bool UseAlchFlask = true;
        public bool UseArcaneTorrentForDecast = true;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public bool UseArcaneTorrentForResource = true;
        public bool UseBerserking = true;
        public bool UseBlackoutKick = true;
        public bool UseBloodFury = true;
        public bool UseChargingOxWave = true;
        public bool UseChiBrew = true;
        public bool UseChiBurst = true;
        public bool UseChiWave = true;
        public bool UseDampenHarm = true;
        public bool UseDiffuseMagic = true;
        public bool UseDisable = false;
        public bool UseEnergizingBrew = true;
        public bool UseEngGlove = true;
        public bool UseExpelHarm = true;
        public bool UseFistsofFury = true;
        public bool UseFortifyingBrew = true;
        public bool UseGiftoftheNaaru = true;
        public bool UseGrappleWeapon = true;
        public bool UseHealingSphere = true;
        public bool UseInvokeXuentheWhiteTiger = true;
        public bool UseJab = true;
        public bool UseLegSweep = true;
        public bool UseLegacyoftheEmperor = true;
        public bool UseLegacyoftheWhiteTiger = true;
        public bool UseLifeblood = true;
        public bool UseProvoke = true;
        public bool UseRisingSunKick = true;
        public bool UseRoll = true;
        public bool UseRushingJadeWind = true;
        public bool UseSpearHandStrike = true;
        public bool UseSpinningCraneKick = true;
        public bool UseStanceoftheFierceTiger = true;
        public bool UseStoneform = true;
        public bool UseTigerPalm = true;
        public bool UseTigereyeBrew = true;
        public bool UseTigersLust = true;
        public bool UseTouchofDeath = true;
        public bool UseTouchofKarma = true;
        public bool UseTrinketOne = true;
        public bool UseTrinketTwo = true;
        public bool UseWarStomp = true;
        public bool UseZenMeditation = true;
        public bool UseZenSphere = true;

        public MonkWindwalkerSettings()
        {
            ConfigWinForm(new Point(500, 400), "Windwalker Monk Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent For Decast", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent For Resource", "UseArcaneTorrentForResource", "Professions & Racials");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Monk Buffs */
            AddControlInWinForm("Use Disable", "UseDisable", "Monk Buffs");
            AddControlInWinForm("Use Legacy of the Emperor", "UseLegacyoftheEmperor", "Monk Buffs");
            AddControlInWinForm("Use Legacy of the White Tiger", "UseLegacyoftheWhiteTiger", "Monk Buffs");
            AddControlInWinForm("Use Stance of the Fierce Tiger", "UseStanceoftheFierceTiger", "Monk Buffs");
            AddControlInWinForm("Use Tigereye Brew", "UseTigereBrew", "Monk Buffs");
            AddControlInWinForm("Use Tiger's Lust", "UseTigersLust", "Monk Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Blackout Kick", "UseBlackoutKick", "Offensive Spell");
            AddControlInWinForm("Use Fists of Fury", "UseFistsofFury", "Offensive Spell");
            AddControlInWinForm("Use Jab", "UseJab", "Offensive Spell");
            AddControlInWinForm("Use Path of Blossoms", "UsePathofBlossoms", "Offensive Spell");
            AddControlInWinForm("Use Provoke", "UseProvoke", "Offensive Spell");
            AddControlInWinForm("Use Rising Sun Kick", "UseRisingSunKick", "Offensive Spell");
            AddControlInWinForm("Use Roll", "UseRoll", "Offensive Spell");
            AddControlInWinForm("Use Spinning Crane Kick", "UseSpinningCraneKick", "Offensive Spell");
            AddControlInWinForm("Use Tiger Palm", "UseTigerPalm", "Offensive Spell");
            AddControlInWinForm("Use Touch of Death", "UseTouchofDeath", "Offensive Spell");
            /* Offensive Cooldown */
            AddControlInWinForm("Use Chi Brew", "UseChiBrew", "Offensive Cooldown");
            AddControlInWinForm("Use Energizing Brew", "UseEnergizingBrew", "Offensive Cooldown");
            AddControlInWinForm("Use Invoke Xuen, the White Tiger", "UseInvokeXuentheWhiteTiger", "Offensive Cooldown");
            AddControlInWinForm("Use Rushing Jade Wind", "UseRushingJadeWind", "Offensive Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Charging Ox Wave", "UseChargingOxWave", "Defensive Cooldown");
            AddControlInWinForm("Use Dampen Harm ", "UseDampenHarm ", "Defensive Cooldown");
            AddControlInWinForm("Use Diffuse Magic", "UseDiffuseMagic", "Defensive Cooldown");
            AddControlInWinForm("Use Fortifying Brew", "UseFortifyingBrew", "Defensive Cooldown");
            AddControlInWinForm("Use Grapple Weapon", "UseGrappleWeapon", "Defensive Cooldown");
            AddControlInWinForm("Use Leg Sweep", "UseLegSweep", "Defensive Cooldown");
            AddControlInWinForm("Use Spear Hand Strike", "UseSpearHandStrike", "Defensive Cooldown");
            AddControlInWinForm("Use Touch of Karma", "UseTouchofKarma", "Defensive Cooldown");
            AddControlInWinForm("Use Zen Meditation", "UseZenMeditation", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Chi Burst", "UseChiBurst", "Healing Spell");
            AddControlInWinForm("Use Chi Wave", "UseChiWave", "Healing Spell");
            AddControlInWinForm("Use Expel Harm", "UseExpelHarm", "Healing Spell");
            AddControlInWinForm("Use Healing Sphere", "UseHealingSphere", "Healing Spell");
            AddControlInWinForm("Use Zen Sphere", "UseZenSphere", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
            AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
            AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
        }

        public static MonkWindwalkerSettings CurrentSetting { get; set; }

        public static MonkWindwalkerSettings GetSettings()
        {
            string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Monk_Windwalker.xml";
            if (File.Exists(currentSettingsFile))
            {
                return
                    CurrentSetting = Load<MonkWindwalkerSettings>(currentSettingsFile);
            }
            else
            {
                return new MonkWindwalkerSettings();
            }
        }
    }

    #endregion
}

public class MonkMistweaver
{
    private readonly MonkMistweaverSettings mySettings = MonkMistweaverSettings.GetSettings();

    #region General Timers & Variables

    private Timer AlchFlaskTimer = new Timer(0);
    private Timer EngineeringTimer = new Timer(0);
    private Timer GrappleWeaponTimer = new Timer(0);
    private Timer HealingSphereTimer = new Timer(0);
    private Timer OnCD = new Timer(0);
    private Timer SerpentsZealTimer = new Timer(0);
    private Timer TrinketOneTimer = new Timer(0);
    private Timer TrinketTwoTimer = new Timer(0);

    #endregion

    #region Professions & Racials

    private readonly Spell Alchemy = new Spell("Alchemy");
    private readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
    private readonly Spell Berserking = new Spell("Berserking");
    private readonly Spell BloodFury = new Spell("Blood Fury");
    private readonly Spell Engineering = new Spell("Engineering");
    private readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
    private readonly Spell Lifeblood = new Spell("Lifeblood");
    private readonly Spell Stoneform = new Spell("Stoneform");
    private readonly Spell WarStomp = new Spell("War Stomp");

    #endregion

    #region Monk Buffs

    private readonly Spell Disable = new Spell("Disable");
    private readonly Spell LegacyoftheEmperor = new Spell("Legacy of the Emperor");
    private readonly Spell StanceoftheFierceTiger = new Spell("Stance of the Fierce Tiger");
    private readonly Spell StanceoftheWiseSerpent = new Spell("Stance of the Wise Serpent");
    private readonly Spell SummonJadeSerpentStatue = new Spell("Summon Jade Serpent Statue");
    private readonly Spell TigersLust = new Spell("Tiger's Lust");

    #endregion

    #region Offensive Spell

    private readonly Spell BlackoutKick = new Spell("Blackout Kick");
    private readonly Spell CracklingJadeLightning = new Spell("Crackling Jade Lightning");
    private readonly Spell Jab = new Spell("Jab");
    private readonly Spell PathofBlossoms = new Spell("Path of Blossoms");
    private readonly Spell Provoke = new Spell("Provoke");
    private readonly Spell Roll = new Spell("Roll");
    private readonly Spell SpinningCraneKick = new Spell("Spinning Crane Kick");
    private readonly Spell TigerPalm = new Spell("Tiger Palm");
    private readonly Spell TouchofDeath = new Spell("Touch of Death");

    #endregion

    #region Healing Cooldown

    private readonly Spell ChiBrew = new Spell("Chi Brew");
    private readonly Spell InvokeXuentheWhiteTiger = new Spell("Invoke Xuen, the White Tiger");
    private readonly Spell RushingJadeWind = new Spell("Rushing Jade Wind");
    private readonly Spell ThunderFocusTea = new Spell("Thunder Focus Tea");

    #endregion

    #region Defensive Cooldown

    private readonly Spell ChargingOxWave = new Spell("Charging Ox Wave");
    private readonly Spell DampenHarm = new Spell("Dampen Harm");
    private readonly Spell DiffuseMagic = new Spell("Diffuse Magic");
    private readonly Spell FortifyingBrew = new Spell("Fortifying Brew");
    private readonly Spell GrappleWeapon = new Spell("Grapple Weapon");
    private readonly Spell LegSweep = new Spell("Leg Sweep");
    private readonly Spell LifeCocoon = new Spell("Life Cocoon");
    private readonly Spell SpearHandStrike = new Spell("Spear Hand Strike");
    private readonly Spell ZenMeditation = new Spell("Zen Meditation");

    #endregion

    #region Healing Spell

    private readonly Spell ChiBurst = new Spell("Chi Burst");
    private readonly Spell ChiWave = new Spell("Chi Wave");
    private readonly Spell EnvelopingMist = new Spell("Enveloping Mist");
    private readonly Spell ExpelHarm = new Spell("Expel Harm");
    private readonly Spell HealingSphere = new Spell("Healing Sphere");
    private readonly Spell ManaTea = new Spell("Mana Tea");
    private readonly Spell RenewingMist = new Spell("Renewing Mist");
    private readonly Spell Revival = new Spell("Revival");
    private readonly Spell SoothingMist = new Spell("Soothing Mist");
    private readonly Spell SurgingMist = new Spell("Surging Mist");
    private readonly Spell Uplift = new Spell("Uplift");
    private readonly Spell ZenSphere = new Spell("Zen Sphere");

    #endregion

    public MonkMistweaver()
    {
        Main.range = 30.0f;
        UInt64 lastTarget = 0;

        while (Main.loop)
        {
            try
            {
                if (!ObjectManager.Me.IsDead)
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget &&
                                Provoke.IsHostileDistanceGood)
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.GetDistance < 41)
                                Combat();
                        }
                        else if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                else
                    Thread.Sleep(500);
            }
            catch
            {
            }
            Thread.Sleep(150);
        }
    }

    private void Pull()
    {
        if (!ObjectManager.Target.InCombat && Provoke.IsSpellUsable && Provoke.IsHostileDistanceGood
            && mySettings.UseProvoke && Provoke.KnownSpell)
        {
            Provoke.Launch();
            return;
        }
    }

    private void Combat()
    {
        Buff();
        if (mySettings.DoAvoidMelee)
            AvoidMelee();
        if (OnCD.IsReady)
            DefenseCycle();
        DPSCycle();
        Heal();
        Decast();
        DPSCycle();
        HealingBurst();
        DPSCycle();
    }

    private void Buff()
    {
        if (ObjectManager.Me.IsMounted)
            return;

        if (LegacyoftheEmperor.KnownSpell && LegacyoftheEmperor.IsSpellUsable &&
            !LegacyoftheEmperor.HaveBuff && mySettings.UseLegacyoftheEmperor)
        {
            LegacyoftheEmperor.Launch();
            return;
        }
        else if (StanceoftheWiseSerpent.KnownSpell && StanceoftheWiseSerpent.IsSpellUsable && !StanceoftheWiseSerpent.HaveBuff
                 && mySettings.UseStanceoftheWiseSerpent)
        {
            StanceoftheWiseSerpent.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() == 0 && TigersLust.IsSpellUsable && TigersLust.KnownSpell
                 && mySettings.UseTigersLust && ObjectManager.Me.GetMove)
        {
            TigersLust.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() == 0 && Roll.IsSpellUsable && Roll.KnownSpell
                 && mySettings.UseRoll && ObjectManager.Me.GetMove && !TigersLust.HaveBuff
                 && ObjectManager.Target.GetDistance > 14)
        {
            Roll.Launch();
            return;
        }
        else if (ObjectManager.GetNumberAttackPlayer() > 0 && SummonJadeSerpentStatue.IsSpellUsable && SummonJadeSerpentStatue.KnownSpell
                 && mySettings.UseSummonJadeSerpentStatue && !SummonJadeSerpentStatue.HaveBuff && ObjectManager.Target.GetDistance < 41)
        {
            SummonJadeSerpentStatue.Launch();
            return;
        }
        else
        {
            if (AlchFlaskTimer.IsReady && mySettings.UseAlchFlask
                && ItemsManager.GetItemCountByIdLUA(75525) == 1)
            {
                Logging.WriteFight("Use Alchi Flask");
                Lua.RunMacroText("/use item:75525");
                AlchFlaskTimer = new Timer(1000*60*60*2);
            }
        }
    }

    private void AvoidMelee()
    {
        if (ObjectManager.Target.GetDistance < mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
        {
            Logging.WriteFight("Too Close. Moving Back");
            var maxTimeTimer = new Timer(1000*2);
            MovementsAction.MoveBackward(true);
            while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                Thread.Sleep(300);
            MovementsAction.MoveBackward(false);
            if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
            {
                MovementsAction.MoveForward(true);
                Thread.Sleep(1000);
                MovementsAction.MoveForward(false);
                MovementManager.Face(ObjectManager.Target.Position);
            }
        }
    }

    private void DefenseCycle()
    {
        if (ObjectManager.Me.HealthPercent < 95 && mySettings.UseGrappleWeapon && GrappleWeapon.IsHostileDistanceGood
            && GrappleWeapon.KnownSpell && GrappleWeapon.IsSpellUsable && GrappleWeaponTimer.IsReady)
        {
            GrappleWeapon.Launch();
            GrappleWeaponTimer = new Timer(1000*60);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && FortifyingBrew.IsSpellUsable && FortifyingBrew.KnownSpell
                 && mySettings.UseFortifyingBrew)
        {
            FortifyingBrew.Launch();
            OnCD = new Timer(1000*20);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && LifeCocoon.IsSpellUsable && LifeCocoon.KnownSpell
                 && mySettings.UseLifeCocoon)
        {
            LifeCocoon.Launch();
            OnCD = new Timer(1000*12);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 90 && ChargingOxWave.IsSpellUsable && ChargingOxWave.KnownSpell
                 && mySettings.UseChargingOxWave && ChargingOxWave.IsHostileDistanceGood)
        {
            ChargingOxWave.Launch();
            OnCD = new Timer(1000*3);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 90 && DampenHarm.IsSpellUsable && DampenHarm.KnownSpell
                 && mySettings.UseDampenHarm)
        {
            DampenHarm.Launch();
            OnCD = new Timer(1000*5);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 90 && LegSweep.IsSpellUsable && LegSweep.KnownSpell
                 && mySettings.UseLegSweep && ObjectManager.Target.GetDistance < 6)
        {
            LegSweep.Launch();
            OnCD = new Timer(1000*5);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && ZenMeditation.IsSpellUsable && ZenMeditation.KnownSpell
                 && mySettings.UseZenMeditation)
        {
            ZenMeditation.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && Stoneform.IsSpellUsable && Stoneform.KnownSpell
                 && mySettings.UseStoneform)
        {
            Stoneform.Launch();
            OnCD = new Timer(1000*8);
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent < 80 && WarStomp.IsSpellUsable && WarStomp.KnownSpell
                && mySettings.UseWarStomp)
            {
                WarStomp.Launch();
                OnCD = new Timer(1000*2);
                return;
            }
        }
    }

    private void Heal()
    {
        if (mySettings.UseArcaneTorrentForResource && ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable 
            && ObjectManager.Me.ManaPercentage <= mySettings.UseArcaneTorrentForResourceAtPercentage)
        {
            ArcaneTorrent.Launch();
            return;
        }

        if (ObjectManager.Me.ManaPercentage < 50 && ManaTea.KnownSpell && ManaTea.IsSpellUsable
            && mySettings.UseManaTea && ObjectManager.Me.BuffStack(115867) > 4
            && ObjectManager.GetNumberAttackPlayer() == 0)
        {
            ManaTea.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent < 95 && SurgingMist.KnownSpell && SurgingMist.IsSpellUsable
                && mySettings.UseSurgingMist && ObjectManager.Me.BuffStack(118674) > 4
                && ObjectManager.GetNumberAttackPlayer() == 0)
            {
                SurgingMist.Launch();
                return;
            }
        }

        if (HealingSphere.KnownSpell && HealingSphere.IsSpellUsable && ObjectManager.Me.Energy > 39 &&
            ObjectManager.Me.HealthPercent < 60 && mySettings.UseHealingSphere && HealingSphereTimer.IsReady)
        {
            SpellManager.CastSpellByIDAndPosition(115460, ObjectManager.Me.Position);
            HealingSphereTimer = new Timer(1000*5);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 70 && SurgingMist.KnownSpell && SurgingMist.IsSpellUsable
                 && mySettings.UseSurgingMist)
        {
            SurgingMist.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 85 && Uplift.KnownSpell && Uplift.IsSpellUsable
                 && mySettings.UseUplift && RenewingMist.HaveBuff)
        {
            Uplift.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 85 && ChiWave.KnownSpell && ChiWave.IsSpellUsable
                 && mySettings.UseChiWave)
        {
            ChiWave.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 90 && ChiBurst.KnownSpell && ChiBurst.IsSpellUsable
                 && mySettings.UseChiBurst)
        {
            ChiBurst.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 90 && ExpelHarm.KnownSpell && ExpelHarm.IsSpellUsable
                 && mySettings.UseExpelHarm && ExpelHarm.IsHostileDistanceGood)
        {
            ExpelHarm.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 90 && EnvelopingMist.KnownSpell && EnvelopingMist.IsSpellUsable
                 && mySettings.UseEnvelopingMist && !EnvelopingMist.HaveBuff)
        {
            EnvelopingMist.Launch();
            return;
        }
        if (ObjectManager.Me.HealthPercent < 95 && SurgingMist.KnownSpell && SurgingMist.IsSpellUsable
            && mySettings.UseSurgingMist && ObjectManager.Me.BuffStack(118674) > 4)
        {
            SurgingMist.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 95 && SoothingMist.KnownSpell && SoothingMist.IsSpellUsable
                 && mySettings.UseSoothingMist && !SoothingMist.HaveBuff && !ObjectManager.Me.IsCast)
        {
            SoothingMist.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 95 && RenewingMist.KnownSpell && RenewingMist.IsSpellUsable
                 && mySettings.UseRenewingMist && !RenewingMist.HaveBuff)
        {
            RenewingMist.Launch();
            return;
        }
        else
        {
            if (ObjectManager.Me.HealthPercent < 95 && ZenSphere.KnownSpell && ZenSphere.IsSpellUsable
                && mySettings.UseZenSphere)
            {
                ZenSphere.Launch();
                return;
            }
        }
    }

    private void Decast()
    {
        if (ArcaneTorrent.KnownSpell && mySettings.UseArcaneTorrentForDecast && ArcaneTorrent.IsSpellUsable && ObjectManager.Me.HealthPercent <= mySettings.UseArcaneTorrentForDecastAtPercentage
            && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && ObjectManager.Target.GetDistance < 8)
        {
            ArcaneTorrent.Launch();
            return;
        }
        else if (DiffuseMagic.KnownSpell && mySettings.UseDiffuseMagic && DiffuseMagic.IsSpellUsable
                 && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
        {
            DiffuseMagic.Launch();
            return;
        }
        else
        {
            if (SpearHandStrike.KnownSpell && mySettings.UseSpearHandStrike && ObjectManager.Target.IsCast
                && SpearHandStrike.IsSpellUsable && SpearHandStrike.IsHostileDistanceGood)
            {
                SpearHandStrike.Launch();
                return;
            }
        }

        if (ObjectManager.Target.GetMove && !Disable.TargetHaveBuff && mySettings.UseDisable
            && Disable.KnownSpell && Disable.IsSpellUsable && Disable.IsHostileDistanceGood)
        {
            Disable.Launch();
            return;
        }
    }

    private void HealingBurst()
    {
        if (mySettings.UseTrinketOne && TrinketOneTimer.IsReady && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Trinket 1.");
            Lua.RunMacroText("/use 13");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketOneTimer = new Timer(1000*60*2);
        }
        else if (mySettings.UseTrinketTwo && TrinketTwoTimer.IsReady && ObjectManager.Target.GetDistance < 41)
        {
            Logging.WriteFight("Use Trinket 2.");
            Lua.RunMacroText("/use 14");
            Lua.RunMacroText("/script UIErrorsFrame:Clear()");
            TrinketTwoTimer = new Timer(1000*60*2);
        }
        else if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseBerserking)
            Berserking.Launch();
        else if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseBloodFury)
            BloodFury.Launch();
        else if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseLifeblood)
            Lifeblood.Launch();
        else if (EngineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 41
                 && mySettings.UseEngGlove)
        {
            Logging.WriteFight("Use Engineering Gloves.");
            Lua.RunMacroText("/use 10");
            EngineeringTimer = new Timer(1000*60);
        }
        else if (ChiBrew.IsSpellUsable && ChiBrew.KnownSpell
                 && mySettings.UseChiBrew && ObjectManager.Me.Chi == 0)
        {
            ChiBrew.Launch();
            return;
        }
        else if (TouchofDeath.IsSpellUsable && TouchofDeath.KnownSpell && TouchofDeath.IsHostileDistanceGood
                 && mySettings.UseTouchofDeath)
        {
            TouchofDeath.Launch();
            return;
        }
        else if (InvokeXuentheWhiteTiger.IsSpellUsable && InvokeXuentheWhiteTiger.KnownSpell
                 && mySettings.UseInvokeXuentheWhiteTiger && InvokeXuentheWhiteTiger.IsHostileDistanceGood)
        {
            InvokeXuentheWhiteTiger.Launch();
            return;
        }
        else if (ThunderFocusTea.IsSpellUsable && ThunderFocusTea.KnownSpell
                 && mySettings.UseThunderFocusTea && ObjectManager.Me.HealthPercent < 90)
        {
            ThunderFocusTea.Launch();
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 80 && Revival.KnownSpell && Revival.IsSpellUsable
                 && mySettings.UseRevival)
        {
            Revival.Launch();
            return;
        }
        else
        {
            if (RushingJadeWind.IsSpellUsable && RushingJadeWind.KnownSpell && RushingJadeWind.IsHostileDistanceGood
                && mySettings.UseRushingJadeWind && ObjectManager.GetNumberAttackPlayer() > 3)
            {
                RushingJadeWind.Launch();
                return;
            }
        }
    }

    private void DPSCycle()
    {
        if (ObjectManager.GetNumberAttackPlayer() > 2 && SpinningCraneKick.IsSpellUsable && SpinningCraneKick.KnownSpell
            && SpinningCraneKick.IsHostileDistanceGood && !ObjectManager.Me.IsCast && mySettings.UseSpinningCraneKick)
        {
            SpinningCraneKick.Launch();
            return;
        }
        else if (CracklingJadeLightning.KnownSpell && CracklingJadeLightning.IsSpellUsable
                 && mySettings.UseCracklingJadeLightning && ObjectManager.Me.Chi < 4 && CracklingJadeLightning.IsHostileDistanceGood
                 && !ExpelHarm.IsHostileDistanceGood)
        {
            CracklingJadeLightning.Launch();
            return;
        }
        else if (BlackoutKick.KnownSpell && BlackoutKick.IsSpellUsable && BlackoutKick.IsHostileDistanceGood
                 && mySettings.UseBlackoutKick && (!ObjectManager.Me.HaveBuff(127722) || SerpentsZealTimer.IsReady))
        {
            BlackoutKick.Launch();
            SerpentsZealTimer = new Timer(1000*25);
            return;
        }
        else if (ObjectManager.Me.HealthPercent < 91 && ExpelHarm.KnownSpell && ExpelHarm.IsSpellUsable
                 && mySettings.UseExpelHarm && ObjectManager.Me.Chi < 4 && ExpelHarm.IsHostileDistanceGood)
        {
            ExpelHarm.Launch();
            return;
        }
        else if (Jab.KnownSpell && Jab.IsSpellUsable && mySettings.UseJab && ObjectManager.Me.Chi < 4
                 && Jab.IsHostileDistanceGood)
        {
            Jab.Launch();
            return;
        }
        else
        {
            if (TigerPalm.KnownSpell && TigerPalm.IsSpellUsable && TigerPalm.IsHostileDistanceGood
                && mySettings.UseTigerPalm && ObjectManager.Me.HealthPercent > 90
                && ObjectManager.Me.BuffStack(125359) < 3)
            {
                TigerPalm.Launch();
                return;
            }
        }
    }

    private void Patrolling()
    {
        if (!ObjectManager.Me.IsMounted)
        {
            Buff();
            Heal();
        }
    }

    #region Nested type: MonkMistweaverSettings

    [Serializable]
    public class MonkMistweaverSettings : Settings
    {
        public bool DoAvoidMelee = false;
        public int DoAvoidMeleeDistance = 0;
        public bool UseAlchFlask = true;
        public bool UseArcaneTorrentForDecast = true;
        public int UseArcaneTorrentForDecastAtPercentage = 100;
        public bool UseArcaneTorrentForResource = true;
        public int UseArcaneTorrentForResourceAtPercentage = 80;
        public bool UseBerserking = true;
        public bool UseBlackoutKick = true;
        public bool UseBloodFury = true;
        public bool UseChargingOxWave = true;
        public bool UseChiBrew = true;
        public bool UseChiBurst = true;
        public bool UseChiWave = true;
        public bool UseCracklingJadeLightning = true;
        public bool UseDampenHarm = true;
        public bool UseDiffuseMagic = true;
        public bool UseDisable = false;
        public bool UseEngGlove = true;
        public bool UseEnvelopingMist = true;
        public bool UseExpelHarm = true;
        public bool UseFortifyingBrew = true;
        public bool UseGiftoftheNaaru = true;
        public bool UseGrappleWeapon = true;
        public bool UseHealingSphere = true;
        public bool UseInvokeXuentheWhiteTiger = true;
        public bool UseJab = true;
        public bool UseLegSweep = true;
        public bool UseLegacyoftheEmperor = true;
        public bool UseLifeCocoon = true;
        public bool UseLifeblood = true;
        public bool UseManaTea = true;
        public bool UsePathofBlossoms = true;
        public bool UseProvoke = true;
        public bool UseRenewingMist = true;
        public bool UseRevival = true;
        public bool UseRoll = true;
        public bool UseRushingJadeWind = true;
        public bool UseSoothingMist = false;
        public bool UseSpearHandStrike = true;
        public bool UseSpinningCraneKick = true;
        public bool UseStanceoftheFierceTiger = true;
        public bool UseStanceoftheWiseSerpent = true;
        public bool UseStoneform = true;
        public bool UseSummonJadeSerpentStatue = true;
        public bool UseSurgingMist = true;
        public bool UseThunderFocusTea = true;
        public bool UseTigerPalm = true;
        public bool UseTigersLust = true;
        public bool UseTouchofDeath = true;
        public bool UseTrinketOne = true;
        public bool UseTrinketTwo = true;
        public bool UseUplift = true;
        public bool UseWarStomp = true;
        public bool UseZenMeditation = true;
        public bool UseZenSphere = true;

        public MonkMistweaverSettings()
        {
            ConfigWinForm(new Point(500, 400), "Mistweaver Monk Settings");
            /* Professions & Racials */
            AddControlInWinForm("Use Arcane Torrent For Decast", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Arcane Torrent For Resource", "UseArcaneTorrentForResource", "Professions & Racials", "AtPercentage");
            AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
            AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
            AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
            AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
            AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
            AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
            /* Monk Buffs */
            AddControlInWinForm("Use Disable", "UseDisable", "Monk Buffs");
            AddControlInWinForm("Use Legacy of the Emperor", "UseLegacyoftheEmperor", "Monk Buffs");
            AddControlInWinForm("Use Stance of the Fierce Tiger", "UseStanceoftheFierceTiger", "Monk Buffs");
            AddControlInWinForm("Use Summon Jade Serpent Statue", "UseSummonJadeSerpentStatue", "Monk Buffs");
            AddControlInWinForm("Use Tiger's Lust", "UseTigersLust", "Monk Buffs");
            /* Offensive Spell */
            AddControlInWinForm("Use Chi Wave", "UseChiWave", "Offensive Spell");
            AddControlInWinForm("Use Blackout Kick", "UseBlackoutKick", "Offensive Spell");
            AddControlInWinForm("Use Crackling Jade Lightning", "UseCracklingJadeLightning", "Offensive Spell");
            AddControlInWinForm("Use Jab", "UseJab", "Offensive Spell");
            AddControlInWinForm("Use Path of Blossoms", "UsePathofBlossoms", "Offensive Spell");
            AddControlInWinForm("Use Provoke", "UseProvoke", "Offensive Spell");
            AddControlInWinForm("Use Roll", "UseRoll", "Offensive Spell");
            AddControlInWinForm("Use Spinning Crane Kick", "UseSpinningCraneKick", "Offensive Spell");
            AddControlInWinForm("Use Tiger Palm", "UseTigerPalm", "Offensive Spell");
            AddControlInWinForm("Use Touch of Death", "UseTouchofDeath", "Offensive Spell");
            /* Healing Cooldown */
            AddControlInWinForm("Use Chi Brew", "UseChiBrew", "Healing Cooldown");
            AddControlInWinForm("Use Invoke Xuen, the White Tiger", "UseInvokeXuentheWhiteTiger", "Healing Cooldown");
            AddControlInWinForm("Use Revival", "UseRevival", "Healing Cooldown");
            AddControlInWinForm("Use Rushing Jade Wind", "UseRushingJadeWind", "Healing Cooldown");
            AddControlInWinForm("Use Thunder Focus Tea", "UseThunderFocusTea", "Healing Cooldown");
            /* Defensive Cooldown */
            AddControlInWinForm("Use Charging Ox Wave", "UseChargingOxWave", "Defensive Cooldown");
            AddControlInWinForm("Use Dampen Harm ", "UseDampenHarm ", "Defensive Cooldown");
            AddControlInWinForm("Use Diffuse Magic", "UseDiffuseMagic", "Defensive Cooldown");
            AddControlInWinForm("Use Fortifying Brew", "UseFortifyingBrew", "Defensive Cooldown");
            AddControlInWinForm("Use Grapple Weapon", "UseGrappleWeapon", "Defensive Cooldown");
            AddControlInWinForm("Use Leg Sweep", "UseLegSweep", "Defensive Cooldown");
            AddControlInWinForm("Use Life Cocoon", "UseLifeCocoon", "Defensive Cooldown");
            AddControlInWinForm("Use Spear Hand Strike", "UseSpearHandStrike", "Defensive Cooldown");
            AddControlInWinForm("Use Zen Meditation", "UseZenMeditation", "Defensive Cooldown");
            /* Healing Spell */
            AddControlInWinForm("Use Chi Burst", "UseChiBurst", "Healing Spell");
            AddControlInWinForm("Use Enveloping Mist", "UseEnvelopingMist", "Healing Spell");
            AddControlInWinForm("Use Expel Harm", "UseExpelHarm", "Healing Spell");
            AddControlInWinForm("Use Healing Sphere", "UseHealingSphere", "Healing Spell");
            AddControlInWinForm("Use Mana Tea", "UseManaTea", "Healing Spell");
            AddControlInWinForm("Use Renewing Mist", "UseRenewingMist", "Healing Spell");
            AddControlInWinForm("Use Soothing Mist", "UseSoothingMist", "Healing Spell");
            AddControlInWinForm("Use Surging Mist", "UseSurgingMist", "Healing Spell");
            AddControlInWinForm("Use Uplift", "UseUplift", "Healing Spell");
            AddControlInWinForm("Use Zen Sphere", "UseZenSphere", "Healing Spell");
            /* Game Settings */
            AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
            AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
            AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
            AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
            AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
            AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
        }

        public static MonkMistweaverSettings CurrentSetting { get; set; }

        public static MonkMistweaverSettings GetSettings()
        {
            string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Monk_Mistweaver.xml";
            if (File.Exists(currentSettingsFile))
            {
                return
                    CurrentSetting = Load<MonkMistweaverSettings>(currentSettingsFile);
            }
            else
            {
                return new MonkMistweaverSettings();
            }
        }
    }

    #endregion
}

#endregion