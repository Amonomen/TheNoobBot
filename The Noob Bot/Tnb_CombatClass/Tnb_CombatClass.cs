/*
* CombatClass for TheNoobBot
* Credit : Rival, Geesus, Enelya, Marstor, Vesper, Neo2003, Dreadlocks
* Thanks you !
*/

using System;
using System.IO;
using System.Threading;
using System.Windows.Forms;
using nManager.Helpful;
using nManager.Wow.Class;
using nManager.Wow.Enums;
using nManager.Wow.Helpers;
using nManager.Wow.ObjectManager;
using Point = System.Drawing.Point;
using Timer = nManager.Helpful.Timer;
// ReSharper disable EmptyGeneralCatchClause
// ReSharper disable ObjectCreationAsStatement

namespace CombatClass
{
    public class Main : ICombatClass
    {
        internal static float InternalRange = 5.0f;
        internal static bool InternalLoop = true;

        #region ICombatClass Members

        public float Range
        {
            get { return InternalRange; }
            set { InternalRange = value; }
        }

        public void Initialize()
        {
            Initialize(false);
        }

        public void Dispose()
        {
            Logging.WriteFight("Combat system stopped.");
            InternalLoop = false;
        }

        public void ShowConfiguration()
        {
            Directory.CreateDirectory(Application.StartupPath + "\\CombatClasses\\Settings\\");
            Initialize(true);
        }

        public void ResetConfiguration()
        {
            Directory.CreateDirectory(Application.StartupPath + "\\CombatClasses\\Settings\\");
            Initialize(true, true);
        }

        #endregion

        public void Initialize(bool configOnly, bool resetSettings = false)
        {
            try
            {
                if (!InternalLoop)
                    InternalLoop = true;
                Logging.WriteFight("Loading combat system.");
                switch (ObjectManager.Me.WowClass)
                {
                        #region DeathKnight Specialisation checking

                    case WoWClass.DeathKnight:
                        var bloodRites = new Spell("Blood Rites");
                        var reaping = new Spell("Reaping");
                        var howlingBlast = new Spell("Howling Blast");

                        if (bloodRites.KnownSpell)
                        {
                            if (configOnly)
                            {
                                string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Deathknight_Blood.xml";
                                var currentSetting = new DeathknightBlood.DeathknightBloodSettings();
                                if (File.Exists(currentSettingsFile) && !resetSettings)
                                {
                                    currentSetting =Settings.Load<DeathknightBlood.DeathknightBloodSettings>(currentSettingsFile);
                                }
                                currentSetting.ToForm();
                                currentSetting.Save(currentSettingsFile);
                            }
                            else
                            {
                                Logging.WriteFight("Loading Deathknight Blood Combat class...");
                                InternalRange = 5.0f;
                                new DeathknightBlood();
                            }
                            break;
                        }
                        if (reaping.KnownSpell)
                        {
                            if (configOnly)
                            {
                                string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Deathknight_Unholy.xml";
                                var currentSetting = new DeathknightUnholy.DeathknightUnholySettings();
                                if (File.Exists(currentSettingsFile) && !resetSettings)
                                {
                                    currentSetting =Settings.Load<DeathknightUnholy.DeathknightUnholySettings>(currentSettingsFile);
                                }
                                currentSetting.ToForm();
                                currentSetting.Save(currentSettingsFile);
                            }
                            else
                            {
                                Logging.WriteFight("Loading Deathknight Unholy Combat class...");
                                InternalRange = 5.0f;
                                new DeathknightUnholy();
                            }
                            break;
                        }
                        if (howlingBlast.KnownSpell)
                        {
                            if (configOnly)
                            {
                                string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Deathknight_Frost.xml";
                                var currentSetting = new DeathknightFrost.DeathknightFrostSettings();
                                if (File.Exists(currentSettingsFile) && !resetSettings)
                                {
                                    currentSetting =Settings.Load<DeathknightFrost.DeathknightFrostSettings>(currentSettingsFile);
                                }
                                currentSetting.ToForm();
                                currentSetting.Save(currentSettingsFile);
                            }
                            else
                            {
                                Logging.WriteFight("Loading Deathknight Frost Combat class...");
                                InternalRange = 5.0f;
                                new DeathknightFrost();
                            }
                            break;
                        }
                        if (configOnly)
                        {
                            MessageBox.Show(@"Your specification haven't be found, loading Deathknight Apprentice Settings");
                            string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Deathknight_Apprentice.xml";
                            var currentSetting = new DeathknightApprentice.DeathknightApprenticeSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                currentSetting =Settings.Load<DeathknightApprentice.DeathknightApprenticeSettings>(currentSettingsFile);
                            }
                            currentSetting.ToForm();
                            currentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("No specialisation detected.");
                            Logging.WriteFight("Loading Deathknight Apprentice Combat class...");
                            InternalRange = 5.0f;
                            new DeathknightApprentice();
                        }
                        break;

                        #endregion

                        #region Mage Specialisation checking

                    case WoWClass.Mage:
                        var MageArcaneSpell = new Spell("Arcane Blast");
                        var MageFireSpell = new Spell("Pyroblast");
                        var MageFrostSpell = new Spell("Summon Water Elemental");

                        if (MageArcaneSpell.KnownSpell)
                        {
                            if (configOnly)
                            {
                                string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Mage_Arcane.xml";
                                var currentSetting = new MageArcane.MageArcaneSettings();
                                if (File.Exists(currentSettingsFile) && !resetSettings)
                                {
                                    currentSetting =Settings.Load<MageArcane.MageArcaneSettings>(currentSettingsFile);
                                }
                                currentSetting.ToForm();
                                currentSetting.Save(currentSettingsFile);
                            }
                            else
                            {
                                Logging.WriteFight("Loading Mage Arcane Combat class...");
                                InternalRange = 30.0f;
                                new MageArcane();
                            }
                            break;
                        }
                        if (MageFireSpell.KnownSpell)
                        {
                            if (configOnly)
                            {
                                string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Mage_Fire.xml";
                                var currentSetting = new MageFire.MageFireSettings();
                                if (File.Exists(currentSettingsFile) && !resetSettings)
                                {
                                    currentSetting =Settings.Load<MageFire.MageFireSettings>(currentSettingsFile);
                                }
                                currentSetting.ToForm();
                                currentSetting.Save(currentSettingsFile);
                            }
                            else
                            {
                                Logging.WriteFight("Loading Mage Fire Combat class...");
                                InternalRange = 30.0f;
                                new MageFire();
                            }
                            break;
                        }
                        if (MageFrostSpell.KnownSpell)
                        {
                            if (configOnly)
                            {
                                string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Mage_Frost.xml";
                                var currentSetting = new MageFrost.MageFrostSettings();
                                if (File.Exists(currentSettingsFile) && !resetSettings)
                                {
                                    currentSetting =Settings.Load<MageFrost.MageFrostSettings>(currentSettingsFile);
                                }
                                currentSetting.ToForm();
                                currentSetting.Save(currentSettingsFile);
                            }
                            else
                            {
                                Logging.WriteFight("Loading Mage Frost Combat class...");
                                InternalRange = 30.0f;
                                new MageFrost();
                            }
                            break;
                        }
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Mage_Frost.xml";
                            var currentSetting = new MageFrost.MageFrostSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                currentSetting =Settings.Load<MageFrost.MageFrostSettings>(currentSettingsFile);
                            }
                            currentSetting.ToForm();
                            currentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Mage without Spec");
                            Logging.WriteFight("Loading Mage Frost Combat class...");
                            InternalRange = 30.0f;
                            new MageFrost();
                        }
                        break;

                        #endregion

                        #region Warlock Specialisation checking

                    case WoWClass.Warlock:
                        var WarlockDemonologySpell = new Spell("Summon Felguard");
                        var WarlockAfflictionSpell = new Spell("Unstable Affliction");
                        var WarlockDestructionSpell = new Spell("Conflagrate");

                        if (WarlockDemonologySpell.KnownSpell)
                        {
                            if (configOnly)
                            {
                                string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Warlock_Demonology.xml";
                                var currentSetting = new WarlockDemonology.WarlockDemonologySettings();
                                if (File.Exists(currentSettingsFile) && !resetSettings)
                                {
                                    currentSetting =Settings.Load<WarlockDemonology.WarlockDemonologySettings>(currentSettingsFile);
                                }
                                currentSetting.ToForm();
                                currentSetting.Save(currentSettingsFile);
                            }
                            else
                            {
                                Logging.WriteFight("Loading Warlock Demonology Combat class...");
                                InternalRange = 30.0f;
                                new WarlockDemonology();
                            }
                            break;
                        }
                        if (WarlockAfflictionSpell.KnownSpell)
                        {
                            if (configOnly)
                            {
                                string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Warlock_Affliction.xml";
                                var currentSetting = new WarlockAffliction.WarlockAfflictionSettings();
                                if (File.Exists(currentSettingsFile) && !resetSettings)
                                {
                                    currentSetting =Settings.Load<WarlockAffliction.WarlockAfflictionSettings>(currentSettingsFile);
                                }
                                currentSetting.ToForm();
                                currentSetting.Save(currentSettingsFile);
                            }
                            else
                            {
                                Logging.WriteFight("Loading Warlock Affliction Combat class...");
                                InternalRange = 30.0f;
                                new WarlockAffliction();
                            }
                            break;
                        }
                        if (WarlockDestructionSpell.KnownSpell)
                        {
                            if (configOnly)
                            {
                                string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Warlock_Destruction.xml";
                                var currentSetting = new WarlockDestruction.WarlockDestructionSettings();
                                if (File.Exists(currentSettingsFile) && !resetSettings)
                                {
                                    currentSetting =Settings.Load<WarlockDestruction.WarlockDestructionSettings>(currentSettingsFile);
                                }
                                currentSetting.ToForm();
                                currentSetting.Save(currentSettingsFile);
                            }
                            else
                            {
                                Logging.WriteFight("Loading Warlock Destruction Combat class...");
                                InternalRange = 30.0f;
                                new WarlockDestruction();
                            }
                            break;
                        }
                        if (configOnly)
                        {
                            MessageBox.Show(@"Your specification haven't be found, loading Warlock Demonology Settings");
                            string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Warlock_Demonology.xml";
                            var currentSetting = new WarlockDemonology.WarlockDemonologySettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                currentSetting =Settings.Load<WarlockDemonology.WarlockDemonologySettings>(currentSettingsFile);
                            }
                            currentSetting.ToForm();
                            currentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("No specialisation detected.");
                            Logging.WriteFight("Loading Warlock Demonology Combat class...");
                            InternalRange = 30.0f;
                            new WarlockDemonology();
                        }
                        break;

                        #endregion

                        #region Druid Specialisation checking

                    case WoWClass.Druid:
                        var DruidFeralSpell = new Spell("Tiger's Fury");
                        var DruidGuardianSpell = new Spell("Savage Defense");
                        var DruidBalanceSpell = new Spell("Eclipse");
                        var DruidRestorationSpell = new Spell("Swiftmend");

                        if (DruidFeralSpell.KnownSpell)
                        {
                            if (configOnly)
                            {
                                string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Druid_Feral.xml";
                                var currentSetting = new DruidFeral.DruidFeralSettings();
                                if (File.Exists(currentSettingsFile) && !resetSettings)
                                {
                                    currentSetting =Settings.Load<DruidFeral.DruidFeralSettings>(currentSettingsFile);
                                }
                                currentSetting.ToForm();
                                currentSetting.Save(currentSettingsFile);
                            }
                            else
                            {
                                Logging.WriteFight("Druid Feral Found");
                                new DruidFeral();
                            }
                            break;
                        }
                        if (DruidGuardianSpell.KnownSpell)
                        {
                            if (configOnly)
                            {
                                string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Druid_Guardian.xml";
                                var currentSetting = new DruidGuardian.DruidGuardianSettings();
                                if (File.Exists(currentSettingsFile) && !resetSettings)
                                {
                                    currentSetting =Settings.Load<DruidGuardian.DruidGuardianSettings>(currentSettingsFile);
                                }
                                currentSetting.ToForm();
                                currentSetting.Save(currentSettingsFile);
                            }
                            else
                            {
                                Logging.WriteFight("Feral Guardian Found");
                                new DruidGuardian();
                            }
                            break;
                        }
                        if (DruidBalanceSpell.KnownSpell)
                        {
                            if (configOnly)
                            {
                                string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Druid_Balance.xml";
                                var currentSetting = new DruidBalance.DruidBalanceSettings();
                                if (File.Exists(currentSettingsFile) && !resetSettings)
                                {
                                    currentSetting =Settings.Load<DruidBalance.DruidBalanceSettings>(currentSettingsFile);
                                }
                                currentSetting.ToForm();
                                currentSetting.Save(currentSettingsFile);
                            }
                            else
                            {
                                Logging.WriteFight("Druid Balance Found");
                                InternalRange = 30.0f;
                                new DruidBalance();
                            }
                            break;
                        }
                        if (DruidRestorationSpell.KnownSpell)
                        {
                            if (configOnly)
                            {
                                string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Druid_Restoration.xml";
                                var currentSetting = new DruidRestoration.DruidRestorationSettings();
                                if (File.Exists(currentSettingsFile) && !resetSettings)
                                {
                                    currentSetting =Settings.Load<DruidRestoration.DruidRestorationSettings>(currentSettingsFile);
                                }
                                currentSetting.ToForm();
                                currentSetting.Save(currentSettingsFile);
                            }
                            else
                            {
                                Logging.WriteFight("Druid Restoration Found");
                                InternalRange = 30.0f;
                                new DruidRestoration();
                            }
                            break;
                        }
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Druid_Balance.xml";
                            var currentSetting = new DruidBalance.DruidBalanceSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                currentSetting =Settings.Load<DruidBalance.DruidBalanceSettings>(currentSettingsFile);
                            }
                            currentSetting.ToForm();
                            currentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("No specialisation detected.");
                            Logging.WriteFight("Loading Druid Balance Combat class...");
                            InternalRange = 30.0f;
                            new DruidBalance();
                        }
                        break;

                        #endregion

                        #region Paladin Specialisation checking

                    case WoWClass.Paladin:
                        var paladinRetributionSpell = new Spell("Templar's Verdict");
                        var paladinProtectionSpell = new Spell("Avenger's Shield");
                        var paladinHolySpell = new Spell("Holy Shock");
                        if (paladinRetributionSpell.KnownSpell)
                        {
                            if (configOnly)
                            {
                                string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Paladin_Retribution.xml";
                                var currentSetting = new PaladinRetribution.PaladinRetributionSettings();
                                if (File.Exists(currentSettingsFile) && !resetSettings)
                                {
                                    currentSetting =Settings.Load<PaladinRetribution.PaladinRetributionSettings>(currentSettingsFile);
                                }
                                currentSetting.ToForm();
                                currentSetting.Save(currentSettingsFile);
                            }
                            else
                            {
                                Logging.WriteFight("Loading Paladin Retribution Combat class...");
                                new PaladinRetribution();
                            }
                            break;
                        }
                        if (paladinProtectionSpell.KnownSpell)
                        {
                            if (configOnly)
                            {
                                string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Paladin_Protection.xml";
                                var currentSetting = new PaladinProtection.PaladinProtectionSettings();
                                if (File.Exists(currentSettingsFile) && !resetSettings)
                                {
                                    currentSetting =Settings.Load<PaladinProtection.PaladinProtectionSettings>(currentSettingsFile);
                                }
                                currentSetting.ToForm();
                                currentSetting.Save(currentSettingsFile);
                            }
                            else
                            {
                                Logging.WriteFight("Loading Paladin Protection Combat class...");
                                new PaladinProtection();
                            }
                            break;
                        }
                        if (paladinHolySpell.KnownSpell)
                        {
                            if (configOnly)
                            {
                                string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Paladin_Holy.xml";
                                var currentSetting = new PaladinHoly.PaladinHolySettings();
                                if (File.Exists(currentSettingsFile) && !resetSettings)
                                {
                                    currentSetting = Settings.Load<PaladinHoly.PaladinHolySettings>(currentSettingsFile);
                                }
                                currentSetting.ToForm();
                                currentSetting.Save(currentSettingsFile);
                            }
                            else
                            {
                                Logging.WriteFight("Loading Paladin Holy Combat class...");
                                InternalRange = 30.0f;
                                new PaladinHoly();
                            }
                            break;
                        }
                        if (configOnly)
                        {
                            MessageBox.Show(@"Your specification haven't be found, loading Paladin Retribution Settings");
                            string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Paladin_Retribution.xml";
                            var currentSetting = new PaladinRetribution.PaladinRetributionSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                currentSetting =Settings.Load<PaladinRetribution.PaladinRetributionSettings>(currentSettingsFile);
                            }
                            currentSetting.ToForm();
                            currentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("No specialisation detected.");
                            Logging.WriteFight("Loading Paladin Retribution Combat class...");
                            new PaladinRetribution();
                        }
                        break;

                        #endregion

                        #region Shaman Specialisation checking

                    case WoWClass.Shaman:
                        var ShamanEnhancementSpell = new Spell("Lava Lash");
                        var ShamanElementalSpell = new Spell("Thunderstorm");
                        var ShamanRestorationSpell = new Spell("Riptide");

                        if (ShamanEnhancementSpell.KnownSpell)
                        {
                            if (configOnly)
                            {
                                string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Shaman_Enhancement.xml";
                                var currentSetting = new ShamanEnhancement.ShamanEnhancementSettings();
                                if (File.Exists(currentSettingsFile) && !resetSettings)
                                {
                                    currentSetting =Settings.Load<ShamanEnhancement.ShamanEnhancementSettings>(currentSettingsFile);
                                }
                                currentSetting.ToForm();
                                currentSetting.Save(currentSettingsFile);
                            }
                            else
                            {
                                Logging.WriteFight("Loading Shaman Enhancement Combat class...");
                                new ShamanEnhancement();
                            }
                            break;
                        }
                        if (ShamanElementalSpell.KnownSpell)
                        {
                            if (configOnly)
                            {
                                string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Shaman_Elemental.xml";
                                var currentSetting = new ShamanElemental.ShamanElementalSettings();
                                if (File.Exists(currentSettingsFile) && !resetSettings)
                                {
                                    currentSetting =Settings.Load<ShamanElemental.ShamanElementalSettings>(currentSettingsFile);
                                }
                                currentSetting.ToForm();
                                currentSetting.Save(currentSettingsFile);
                            }
                            else
                            {
                                Logging.WriteFight("Loading Shaman Elemental Combat class...");
                                InternalRange = 30.0f;
                                new ShamanElemental();
                            }
                            break;
                        }
                        if (ShamanRestorationSpell.KnownSpell)
                        {
                            if (configOnly)
                            {
                                string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Shaman_Restoration.xml";
                                var currentSetting = new ShamanRestoration.ShamanRestorationSettings();
                                if (File.Exists(currentSettingsFile) && !resetSettings)
                                {
                                    currentSetting =Settings.Load<ShamanRestoration.ShamanRestorationSettings>(currentSettingsFile);
                                }
                                currentSetting.ToForm();
                                currentSetting.Save(currentSettingsFile);
                            }
                            else
                            {
                                Logging.WriteFight("Loading Shaman Restoration Combat class...");
                                InternalRange = 30.0f;
                                new ShamanRestoration();
                            }
                            break;
                        }
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Shaman_Restoration.xml";
                            var currentSetting = new ShamanRestoration.ShamanRestorationSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                currentSetting =Settings.Load<ShamanRestoration.ShamanRestorationSettings>(currentSettingsFile);
                            }
                            currentSetting.ToForm();
                            currentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Shaman without Spec");
                            InternalRange = 30.0f;
                            new ShamanRestoration();
                        }
                        break;

                        #endregion

                        #region Priest Specialisation checking

                    case WoWClass.Priest:
                        var priestShadowSpell = new Spell("Mind Flay");
                        var priestDisciplineSpell = new Spell("Penance");
                        var priestHolySpell = new Spell("Holy Word: Chastise");
                        if (priestShadowSpell.KnownSpell)
                        {
                            if (configOnly)
                            {
                                string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Priest_Shadow.xml";
                                var currentSetting = new PriestShadow.PriestShadowSettings();
                                if (File.Exists(currentSettingsFile) && !resetSettings)
                                {
                                    currentSetting =Settings.Load<PriestShadow.PriestShadowSettings>(currentSettingsFile);
                                }
                                currentSetting.ToForm();
                                currentSetting.Save(currentSettingsFile);
                            }
                            else
                            {
                                Logging.WriteFight("Loading Priest Shadow Combat class...");
                                InternalRange = 30.0f;
                                new PriestShadow();
                            }
                            break;
                        }
                        if (priestDisciplineSpell.KnownSpell)
                        {
                            if (configOnly)
                            {
                                string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Priest_Discipline.xml";
                                var currentSetting = new PriestDiscipline.PriestDisciplineSettings();
                                if (File.Exists(currentSettingsFile) && !resetSettings)
                                {
                                    currentSetting =Settings.Load<PriestDiscipline.PriestDisciplineSettings>(currentSettingsFile);
                                }
                                currentSetting.ToForm();
                                currentSetting.Save(currentSettingsFile);
                            }
                            else
                            {
                                Logging.WriteFight("Loading Priest Discipline Combat class...");
                                InternalRange = 30.0f;
                                new PriestDiscipline();
                            }
                            break;
                        }
                        if (priestHolySpell.KnownSpell)
                        {
                            if (configOnly)
                            {
                                string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Priest_Holy.xml";
                                var currentSetting = new PriestHoly.PriestHolySettings();
                                if (File.Exists(currentSettingsFile) && !resetSettings)
                                {
                                    currentSetting =Settings.Load<PriestHoly.PriestHolySettings>(currentSettingsFile);
                                }
                                currentSetting.ToForm();
                                currentSetting.Save(currentSettingsFile);
                            }
                            else
                            {
                                Logging.WriteFight("Loading Priest Holy Combat class...");
                                InternalRange = 30.0f;
                                new PriestHoly();
                            }
                            break;
                        }
                        if (configOnly)
                        {
                            MessageBox.Show(@"Your specification haven't be found, loading Priest Shadow Settings");
                            string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Priest_Shadow.xml";
                            var currentSetting = new PriestShadow.PriestShadowSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                currentSetting =Settings.Load<PriestShadow.PriestShadowSettings>(currentSettingsFile);
                            }
                            currentSetting.ToForm();
                            currentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("No specialisation detected.");
                            Logging.WriteFight("Loading Priest Shadow Combat class...");
                            InternalRange = 30.0f;
                            new PriestShadow();
                        }
                        break;

                        #endregion

                        #region Rogue Specialisation checking

                    case WoWClass.Rogue:
                        var rogueCombatSpell = new Spell("Blade Flurry");
                        var rogueAssassinationSpell = new Spell("Mutilate");
                        var rogueSubtletySpell = new Spell("Master of Subtlety");

                        if (rogueCombatSpell.KnownSpell)
                        {
                            if (configOnly)
                            {
                                string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Rogue_Combat.xml";
                                var currentSetting = new RogueCombat.RogueCombatSettings();
                                if (File.Exists(currentSettingsFile) && !resetSettings)
                                {
                                    currentSetting =Settings.Load<RogueCombat.RogueCombatSettings>(currentSettingsFile);
                                }
                                currentSetting.ToForm();
                                currentSetting.Save(currentSettingsFile);
                            }
                            else
                            {
                                Logging.WriteFight("Loading Rogue Combat Combat class...");
                                new RogueCombat();
                            }
                            break;
                        }
                        if (rogueAssassinationSpell.KnownSpell)
                        {
                            if (configOnly)
                            {
                                string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Rogue_Assassination.xml";
                                var currentSetting = new RogueAssassination.RogueAssassinationSettings();
                                if (File.Exists(currentSettingsFile) && !resetSettings)
                                {
                                    currentSetting =Settings.Load<RogueAssassination.RogueAssassinationSettings>(currentSettingsFile);
                                }
                                currentSetting.ToForm();
                                currentSetting.Save(currentSettingsFile);
                            }
                            else
                            {
                                Logging.WriteFight("Loading Rogue Assassination Combat class...");
                                new RogueAssassination();
                            }
                            break;
                        }
                        if (rogueSubtletySpell.KnownSpell)
                        {
                            if (configOnly)
                            {
                                string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Rogue_Subtlety.xml";
                                var currentSetting = new RogueSubtlety.RogueSubtletySettings();
                                if (File.Exists(currentSettingsFile) && !resetSettings)
                                {
                                    currentSetting =Settings.Load<RogueSubtlety.RogueSubtletySettings>(currentSettingsFile);
                                }
                                currentSetting.ToForm();
                                currentSetting.Save(currentSettingsFile);
                            }
                            else
                            {
                                Logging.WriteFight("Loading Rogue Subtlety Combat class...");
                                new RogueSubtlety();
                            }
                            break;
                        }
                        if (configOnly)
                        {
                            string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Rogue_Combat.xml";
                            var currentSetting = new RogueCombat.RogueCombatSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                currentSetting =Settings.Load<RogueCombat.RogueCombatSettings>(currentSettingsFile);
                            }
                            currentSetting.ToForm();
                            currentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("Rogue without Spec");
                            new RogueCombat();
                        }
                        break;

                        #endregion

                        #region Warrior Specialisation checking

                    case WoWClass.Warrior:
                        var WarriorArmsSpell = new Spell("Mortal Strike");
                        var WarriorFurySpell = new Spell("Bloodthirst");
                        var WarriorProtectionSpell = new Spell("Shield Slam");

                        if (WarriorArmsSpell.KnownSpell)
                        {
                            if (configOnly)
                            {
                                string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Warrior_Arms.xml";
                                var currentSetting = new WarriorArms.WarriorArmsSettings();
                                if (File.Exists(currentSettingsFile) && !resetSettings)
                                {
                                    currentSetting =Settings.Load<WarriorArms.WarriorArmsSettings>(currentSettingsFile);
                                }
                                currentSetting.ToForm();
                                currentSetting.Save(currentSettingsFile);
                            }
                            else
                            {
                                Logging.WriteFight("Loading Warrior Arms Combat class...");
                                new WarriorArms();
                            }
                            break;
                        }
                        if (WarriorFurySpell.KnownSpell)
                        {
                            if (configOnly)
                            {
                                string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Warrior_Fury.xml";
                                var currentSetting = new WarriorFury.WarriorFurySettings();
                                if (File.Exists(currentSettingsFile) && !resetSettings)
                                {
                                    currentSetting =Settings.Load<WarriorFury.WarriorFurySettings>(currentSettingsFile);
                                }
                                currentSetting.ToForm();
                                currentSetting.Save(currentSettingsFile);
                            }
                            else
                            {
                                Logging.WriteFight("Loading Warrior Fury Combat class...");
                                new WarriorFury();
                            }
                            break;
                        }
                        if (WarriorProtectionSpell.KnownSpell)
                        {
                            if (configOnly)
                            {
                                string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Warrior_Protection.xml";
                                var currentSetting = new WarriorProtection.WarriorProtectionSettings();
                                if (File.Exists(currentSettingsFile) && !resetSettings)
                                {
                                    currentSetting =Settings.Load<WarriorProtection.WarriorProtectionSettings>(currentSettingsFile);
                                }
                                currentSetting.ToForm();
                                currentSetting.Save(currentSettingsFile);
                            }
                            else
                            {
                                Logging.WriteFight("Loading Warrior Protection Combat class...");
                                new WarriorProtection();
                            }
                            break;
                        }
                        if (configOnly)
                        {
                            MessageBox.Show(@"Your specification haven't be found, loading Warrior Arms Settings");
                            string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Warrior_Arms.xml";
                            var currentSetting = new WarriorArms.WarriorArmsSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                currentSetting =Settings.Load<WarriorArms.WarriorArmsSettings>(currentSettingsFile);
                            }
                            currentSetting.ToForm();
                            currentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("No specialisation detected.");
                            Logging.WriteFight("Loading Warrior Arms Combat class...");
                            new WarriorArms();
                        }
                        break;

                        #endregion

                        #region Hunter Specialisation checking

                    case WoWClass.Hunter:
                        var hunterMarksmanshipSpell = new Spell("Aimed Shot");
                        var hunterSurvivalSpell = new Spell("Explosive Shot");
                        var hunterBeastMasterySpell = new Spell("Kill Command");

                        if (hunterMarksmanshipSpell.KnownSpell)
                        {
                            if (configOnly)
                            {
                                string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Hunter_Marksmanship.xml";
                                var currentSetting = new HunterMarksmanship.HunterMarksmanshipSettings();
                                if (File.Exists(currentSettingsFile) && !resetSettings)
                                {
                                    currentSetting =Settings.Load<HunterMarksmanship.HunterMarksmanshipSettings>(currentSettingsFile);
                                }
                                currentSetting.ToForm();
                                currentSetting.Save(currentSettingsFile);
                            }
                            else
                            {
                                Logging.WriteFight("Loading Hunter Marksmanship Combat class...");
                                InternalRange = 30.0f;
                                new HunterMarksmanship();
                            }
                            break;
                        }
                        if (hunterSurvivalSpell.KnownSpell)
                        {
                            if (configOnly)
                            {
                                string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Hunter_Survival.xml";
                                var currentSetting = new HunterSurvival.HunterSurvivalSettings();
                                if (File.Exists(currentSettingsFile) && !resetSettings)
                                {
                                    currentSetting =Settings.Load<HunterSurvival.HunterSurvivalSettings>(currentSettingsFile);
                                }
                                currentSetting.ToForm();
                                currentSetting.Save(currentSettingsFile);
                            }
                            else
                            {
                                Logging.WriteFight("Loading Hunter Survival Combat class...");
                                InternalRange = 30.0f;
                                new HunterSurvival();
                            }
                            break;
                        }
                        if (hunterBeastMasterySpell.KnownSpell)
                        {
                            if (configOnly)
                            {
                                string currentSettingsFile = Application.StartupPath +
                                                             "\\CombatClasses\\Settings\\Hunter_BeastMastery.xml";
                                HunterBeastMastery.HunterBeastMasterySettings currentSetting;
                                currentSetting = new HunterBeastMastery.HunterBeastMasterySettings();
                                if (File.Exists(currentSettingsFile) && !resetSettings)
                                {
                                    currentSetting =
                                        Settings.Load<HunterBeastMastery.HunterBeastMasterySettings>(currentSettingsFile);
                                }
                                currentSetting.ToForm();
                                currentSetting.Save(currentSettingsFile);
                            }
                            else
                            {
                                Logging.WriteFight("Loading Hunter BeastMastery Combat class...");
                                InternalRange = 30.0f;
                                new HunterBeastMastery();
                            }
                            break;
                        }
                        if (configOnly)
                        {
                            MessageBox.Show(
                                "Your specification haven't be found, loading Hunter Marksmanship Settings");
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Hunter_Marksmanship.xml";
                            HunterMarksmanship.HunterMarksmanshipSettings currentSetting;
                            currentSetting = new HunterMarksmanship.HunterMarksmanshipSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                currentSetting =
                                    Settings.Load<HunterMarksmanship.HunterMarksmanshipSettings>(currentSettingsFile);
                            }
                            currentSetting.ToForm();
                            currentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("No specialisation detected.");
                            Logging.WriteFight("Loading Hunter Marksmanship Combat class...");
                            InternalRange = 30.0f;
                            new HunterMarksmanship();
                        }
                        break;

                        #endregion

                        #region Monk Specialisation checking

                    case WoWClass.Monk:
                        var MonkBrewmasterSpell = new Spell("Dizzying Haze");
                        var MonkWindwalkerSpell = new Spell("Fists of Fury");
                        var MonkMistweaverSpell = new Spell("Soothing Mist");
                        if (MonkBrewmasterSpell.KnownSpell)
                        {
                            if (configOnly)
                            {
                                string currentSettingsFile = Application.StartupPath +
                                                             "\\CombatClasses\\Settings\\Monk_Brewmaster.xml";
                                MonkBrewmaster.MonkBrewmasterSettings currentSetting;
                                currentSetting = new MonkBrewmaster.MonkBrewmasterSettings();
                                if (File.Exists(currentSettingsFile) && !resetSettings)
                                {
                                    currentSetting =
                                        Settings.Load<MonkBrewmaster.MonkBrewmasterSettings>(currentSettingsFile);
                                }
                                currentSetting.ToForm();
                                currentSetting.Save(currentSettingsFile);
                            }
                            else
                            {
                                Logging.WriteFight("Loading Monk Brewmaster Combat class...");
                                new MonkBrewmaster();
                            }
                            break;
                        }
                        if (MonkWindwalkerSpell.KnownSpell)
                        {
                            if (configOnly)
                            {
                                string currentSettingsFile = Application.StartupPath +
                                                             "\\CombatClasses\\Settings\\Monk_Windwalker.xml";
                                MonkWindwalker.MonkWindwalkerSettings currentSetting;
                                currentSetting = new MonkWindwalker.MonkWindwalkerSettings();
                                if (File.Exists(currentSettingsFile) && !resetSettings)
                                {
                                    currentSetting =
                                        Settings.Load<MonkWindwalker.MonkWindwalkerSettings>(currentSettingsFile);
                                }
                                currentSetting.ToForm();
                                currentSetting.Save(currentSettingsFile);
                            }
                            else
                            {
                                Logging.WriteFight("Loading Monk Windwalker Combat class...");
                                new MonkWindwalker();
                            }
                            break;
                        }
                        if (MonkMistweaverSpell.KnownSpell)
                        {
                            if (configOnly)
                            {
                                string currentSettingsFile = Application.StartupPath +
                                                             "\\CombatClasses\\Settings\\Monk_Mistweaver.xml";
                                MonkMistweaver.MonkMistweaverSettings currentSetting;
                                currentSetting = new MonkMistweaver.MonkMistweaverSettings();
                                if (File.Exists(currentSettingsFile) && !resetSettings)
                                {
                                    currentSetting =
                                        Settings.Load<MonkMistweaver.MonkMistweaverSettings>(currentSettingsFile);
                                }
                                currentSetting.ToForm();
                                currentSetting.Save(currentSettingsFile);
                            }
                            else
                            {
                                Logging.WriteFight("Loading Monk Mistweaver Combat class...");
                                InternalRange = 30.0f;
                                new MonkMistweaver();
                            }
                            break;
                        }
                        if (configOnly)
                        {
                            MessageBox.Show(
                                "Your specification haven't be found, loading Monk Brewmaster Settings");
                            string currentSettingsFile = Application.StartupPath +
                                                         "\\CombatClasses\\Settings\\Monk_Brewmaster.xml";
                            MonkBrewmaster.MonkBrewmasterSettings currentSetting;
                            currentSetting = new MonkBrewmaster.MonkBrewmasterSettings();
                            if (File.Exists(currentSettingsFile) && !resetSettings)
                            {
                                currentSetting =
                                    Settings.Load<MonkBrewmaster.MonkBrewmasterSettings>(currentSettingsFile);
                            }
                            currentSetting.ToForm();
                            currentSetting.Save(currentSettingsFile);
                        }
                        else
                        {
                            Logging.WriteFight("No specialisation detected.");
                            Logging.WriteFight("Loading Monk Brewmaster Combat class...");
                            new MonkBrewmaster();
                        }
                        break;

                        #endregion

                    default:
                        Dispose();
                        break;
                }
            }
            catch
            {
            }
            Logging.WriteFight("Combat system stopped.");
        }
    }

    #region Deathknight

    public class DeathknightApprentice
    {
        private readonly DeathknightApprenticeSettings _mySettings = DeathknightApprenticeSettings.GetSettings();

        #region Professions & Racials

        public readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
        public readonly Spell Berserking = new Spell("Berserking");
        public readonly Spell BloodFury = new Spell("Blood Fury");
        public readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
        public readonly Spell Lifeblood = new Spell("Lifeblood");
        public readonly Spell Stoneform = new Spell("Stoneform");
        public readonly Spell WarStomp = new Spell("War Stomp");

        #endregion

        #region Deathknight Presence & Buffs

        public readonly Spell BloodPlague = new Spell("Blood Plague");
        public readonly Spell BloodPresence = new Spell("Blood Presence");
        public readonly Spell FrostFever = new Spell("Frost Fever");
        public readonly Spell FrostPresence = new Spell("Frost Presence");
        private Timer BloodPlagueTimer = new Timer(0);
        private Timer FrostFeverTimer = new Timer(0);

        #endregion

        #region Offensive Spell

        public readonly Spell BloodBoil = new Spell("Blood Boil");
        public readonly Spell BloodStrike = new Spell("Blood Strike");
        public readonly Spell DeathCoil = new Spell("Death Coil");
        public readonly Spell IcyTouch = new Spell("Icy Touch");
        public readonly Spell PlagueStrike = new Spell("Plague Strike");

        #endregion

        #region Offensive Cooldown

        public readonly Spell DeathGrip = new Spell("Death Grip");
        public readonly Spell Pestilence = new Spell("Pestilence");
        public readonly Spell RaiseDead = new Spell("Raise Dead");
        private Timer PestilenceTimer = new Timer(0);

        #endregion

        #region Defensive Cooldown

        public readonly Spell ChainsofIce = new Spell("Chains of Ice");
        public readonly Spell MindFreeze = new Spell("Mind Freeze");

        #endregion

        #region Healing Spell

        public readonly Spell DeathStrike = new Spell("Death Strike");

        #endregion

        public DeathknightApprentice()
        {
            Main.InternalRange = 5.0f;
            UInt64 lastTarget = 0;

            while (Main.InternalLoop)
            {
                try
                {
                    if (!ObjectManager.Me.IsDeadMe)
                    {
                        if (!ObjectManager.Me.IsMounted)
                        {
                            if (Fight.InFight && ObjectManager.Me.Target > 0)
                            {
                                if (ObjectManager.Me.Target != lastTarget && (DeathGrip.IsHostileDistanceGood || IcyTouch.IsHostileDistanceGood))
                                {
                                    Pull();
                                    lastTarget = ObjectManager.Me.Target;
                                }

                                if (ObjectManager.Target.GetDistance < 30)
                                {
                                    Combat();
                                }
                                break;
                            }
                            if (!ObjectManager.Me.IsCast)
                            {
                                Patrolling();
                            }
                        }
                    }
                    else
                    {
                        Thread.Sleep(500);
                    }
                }
                catch
                {
                }
                Thread.Sleep(150);
            }
        }

        private void Pull()
        {
            if (_mySettings.UseDeathGrip && DeathGrip.KnownSpell && DeathGrip.IsHostileDistanceGood && ObjectManager.Target.GetDistance > Main.InternalRange && DeathGrip.IsSpellUsable)
            {
                DeathGrip.Launch();
                MovementManager.StopMove();
                return;
            }

            if (_mySettings.UseIcyTouch && IcyTouch.KnownSpell && IcyTouch.IsHostileDistanceGood && IcyTouch.IsSpellUsable)
            {
                IcyTouch.Launch();
                }
        }

        private void Combat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
            {
                AvoidMelee();
            }
            DPSCycle();
            DefenseCycle();
            Heal();
            Decast();
            DPSBurst();
            DPSCycle();
        }

        private void Buff()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (_mySettings.UseBloodPresence && BloodPresence.KnownSpell && !BloodPresence.HaveBuff && (ObjectManager.GetNumberAttackPlayer() >= 3
                                                                                                       || ObjectManager.Me.HealthPercent <= _mySettings.UseBloodPresenceAtPercentage) &&
                BloodPresence.IsSpellUsable)
            {
                BloodPresence.Launch();
                return;
            }

            if (_mySettings.UseFrostPresence && FrostPresence.KnownSpell && !FrostPresence.HaveBuff && FrostPresence.IsSpellUsable
                && ObjectManager.Me.HealthPercent > _mySettings.UseBloodPresenceAtPercentage + 10)
            {
                FrostPresence.Launch();
                }
        }

        private void AvoidMelee()
        {
            if (ObjectManager.Target.GetDistance < _mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
            {
                Logging.WriteFight("Too Close. Moving Back");
                var maxTimeTimer = new Timer(1000*2);
                MovementsAction.MoveBackward(true);
                while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                {
                    Thread.Sleep(300);
                }
                MovementsAction.MoveBackward(false);
                if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
                {
                    MovementsAction.MoveForward(true);
                    Thread.Sleep(1000);
                    MovementsAction.MoveForward(false);
                    MovementManager.Face(ObjectManager.Target.Position);
                }
            }
        }

        private void DefenseCycle()
        {
            if (_mySettings.UseStoneform && Stoneform.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable)
            {
                Stoneform.Launch();
                return;
            }

            if (_mySettings.UseWarStomp && WarStomp.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseWarStompAtPercentage && ObjectManager.Target.GetDistance < 8
                && WarStomp.IsSpellUsable)
            {
                WarStomp.Launch();
                
            }
        }

        private void Heal()
        {
            if (_mySettings.UseGiftoftheNaaru && GiftoftheNaaru.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseGiftoftheNaaruAtPercentage && GiftoftheNaaru.IsSpellUsable)
            {
                GiftoftheNaaru.Launch();
                return;
            }

            if (_mySettings.UseDeathStrike && DeathStrike.KnownSpell && ObjectManager.Target.IsValid && ObjectManager.Target.IsAlive &&
                ObjectManager.Me.HealthPercent <= _mySettings.UseDeathStrikeAtPercentage
                && DeathStrike.IsHostileDistanceGood && DeathStrike.IsSpellUsable)
            {
                DeathStrike.Launch();
                }
        }

        private void Decast()
        {
            if (_mySettings.UseArcaneTorrentForDecast && ArcaneTorrent.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseArcaneTorrentForDecastAtPercentage
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && ObjectManager.Target.GetDistance < 8 && ArcaneTorrent.IsSpellUsable)
            {
                ArcaneTorrent.Launch();
                return;
            }

            if (_mySettings.UseMindFreeze && MindFreeze.KnownSpell && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && ObjectManager.Me.HealthPercent <= _mySettings.UseMindFreezeAtPercentage && MindFreeze.IsHostileDistanceGood && MindFreeze.IsSpellUsable)
            {
                MindFreeze.Launch();
                return;
            }

            if (_mySettings.UseChainsofIce && ChainsofIce.KnownSpell && ObjectManager.Target.GetMove && !ChainsofIce.TargetHaveBuff && ChainsofIce.IsHostileDistanceGood &&
                ChainsofIce.IsSpellUsable)
            {
                ChainsofIce.Launch();
                }
        }

        private void DPSBurst()
        {
            if (_mySettings.UseRaiseDead && RaiseDead.KnownSpell && ObjectManager.Target.GetDistance < 30 && RaiseDead.IsSpellUsable)
            {
                RaiseDead.Launch();
            }

            if (_mySettings.UseLifeblood && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30 && Lifeblood.IsSpellUsable)
            {
                Lifeblood.Launch();
            }

            if (_mySettings.UseBerserking && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30 && Berserking.IsSpellUsable)
            {
                Berserking.Launch();
            }

            if (_mySettings.UseBloodFury && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 30 && BloodFury.IsSpellUsable)
            {
                BloodFury.Launch();
            }
        }

        private void DPSCycle()
        {
            if (_mySettings.UseIcyTouch && IcyTouch.KnownSpell && (!FrostFever.TargetHaveBuff || FrostFeverTimer.IsReady) && IcyTouch.IsHostileDistanceGood && IcyTouch.IsSpellUsable)
            {
                IcyTouch.Launch();
                FrostFeverTimer = new Timer(1000*27);
                return;
            }

            if (_mySettings.UsePlagueStrike && PlagueStrike.KnownSpell && (!BloodPlague.TargetHaveBuff || BloodPlagueTimer.IsReady) && PlagueStrike.IsHostileDistanceGood &&
                PlagueStrike.IsSpellUsable)
            {
                PlagueStrike.Launch();
                BloodPlagueTimer = new Timer(1000*27);
                return;
            }

            if (_mySettings.UsePestilence && Pestilence.KnownSpell && BloodPlague.TargetHaveBuff && FrostFever.TargetHaveBuff && ObjectManager.GetNumberAttackPlayer() > 1 &&
                PestilenceTimer.IsReady
                && Pestilence.IsHostileDistanceGood && Pestilence.IsSpellUsable)
            {
                Pestilence.Launch();
                PestilenceTimer = new Timer(1000*30);
                return;
            }

            if (_mySettings.UseBloodBoil && BloodBoil.KnownSpell && BloodPlague.TargetHaveBuff && FrostFever.TargetHaveBuff && ObjectManager.GetNumberAttackPlayer() > 2
                && ObjectManager.Target.GetDistance < 11 && BloodBoil.IsSpellUsable)
            {
                BloodBoil.Launch();
                return;
            }

            if (_mySettings.UseDeathCoil && DeathCoil.KnownSpell && DeathCoil.IsHostileDistanceGood && DeathCoil.IsSpellUsable)
            {
                DeathCoil.Launch();
                return;
            }

            if (_mySettings.UseBloodStrike && BloodStrike.KnownSpell && BloodStrike.IsHostileDistanceGood && BloodStrike.IsSpellUsable)
            {
                BloodStrike.Launch();
                return;
            }

            if (_mySettings.UseIcyTouch && IcyTouch.KnownSpell && IcyTouch.IsHostileDistanceGood && IcyTouch.IsSpellUsable)
            {
                IcyTouch.Launch();
                return;
            }

            if (_mySettings.UsePlagueStrike && PlagueStrike.KnownSpell && PlagueStrike.IsHostileDistanceGood && PlagueStrike.IsSpellUsable)
            {
                PlagueStrike.Launch();
                return;
            }

            if (_mySettings.UseArcaneTorrentForResource && ArcaneTorrent.KnownSpell && ObjectManager.Me.RunicPowerPercentage < 86 && ArcaneTorrent.IsSpellUsable)
            {
                ArcaneTorrent.Launch();
                }
        }

        private void Patrolling()
        {
            if (!ObjectManager.Me.IsMounted)
            {
                Buff();
                Heal();
            }
        }

        #region Nested type: DeathknightApprenticeSettings

        [Serializable]
        public class DeathknightApprenticeSettings : Settings
        {
            public bool DoAvoidMelee = false;
            public int DoAvoidMeleeDistance = 0;
            public bool UseArcaneTorrentForDecast = true;
            public int UseArcaneTorrentForDecastAtPercentage = 100;
            public bool UseArcaneTorrentForResource = true;
            public bool UseBerserking = true;
            public bool UseBloodBoil = true;
            public bool UseBloodFury = true;
            public bool UseBloodPresence = true;
            public int UseBloodPresenceAtPercentage = 50;
            public bool UseBloodStrike = true;
            public bool UseChainsofIce = false;
            public bool UseDeathCoil = true;
            public bool UseDeathGrip = true;
            public bool UseDeathStrike = true;
            public int UseDeathStrikeAtPercentage = 80;
            public bool UseFrostPresence = true;
            public bool UseGiftoftheNaaru = true;
            public int UseGiftoftheNaaruAtPercentage = 80;
            public bool UseIcyTouch = true;
            public bool UseLifeblood = true;
            public bool UseMindFreeze = true;
            public int UseMindFreezeAtPercentage = 100;
            public bool UsePestilence = true;
            public bool UsePlagueStrike = true;
            public bool UseRaiseDead = true;
            public bool UseStoneform = true;
            public int UseStoneformAtPercentage = 80;
            public bool UseWarStomp = true;
            public int UseWarStompAtPercentage = 80;

            public DeathknightApprenticeSettings()
            {
                ConfigWinForm(new Point(500, 400), "Deathknight Apprentice Settings");
                /* Professions & Racials */
                AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials");
                AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
                AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
                AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
                AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials", "AtPercentage");
                /* Deathknight Presence & Buffs */
                AddControlInWinForm("Use Frost Presence", "UseFrostPresence", "Deathknight Presence & Buffs");
                AddControlInWinForm("Use Blood Presence", "UseBloodPresence", "Deathknight Presence & Buffs", "AtPercentage");
                /* Offensive Spell */
                AddControlInWinForm("Use Blood Boil", "UseBloodBoil", "Offensive Spell");
                AddControlInWinForm("Use Blood Strike", "UseBloodStrike", "Offensive Spell");
                AddControlInWinForm("Use Death Coil", "UseDeathCoil", "Offensive Spell");
                AddControlInWinForm("Use Icy Touch", "UseIcyTouch", "Offensive Spell");
                AddControlInWinForm("Use Plague Strike", "UsePlagueStrike", "Offensive Spell");
                /* Offensive Cooldown */
                AddControlInWinForm("Use Death Grip", "UseDeathGrip", "Offensive Cooldown");
                AddControlInWinForm("Use Pestilence", "UsePestilence", "Offensive Cooldown");
                AddControlInWinForm("Use Raise Dead", "UseRaiseDead", "Offensive Cooldown");
                /* Defensive Cooldown */
                AddControlInWinForm("Use Chains of Ice", "UseChainsofIce", "Defensive Cooldown");
                AddControlInWinForm("Use Mind Freeze", "UseMindFreeze", "Defensive Cooldown", "AtPercentage");
                /* Healing Spell */
                AddControlInWinForm("Use Death Strike", "UseDeathStrike", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
                AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
            }

            public static DeathknightApprenticeSettings currentSetting { get; set; }

            public static DeathknightApprenticeSettings GetSettings()
            {
                string currentSettingsFile = Application.StartupPath +"\\CombatClasses\\Settings\\Deathknight_Apprentice.xml";
                if (File.Exists(currentSettingsFile))
                {
                    return
                        currentSetting =Load<DeathknightApprenticeSettings>(currentSettingsFile);
                }
                return new DeathknightApprenticeSettings();
            }
        }

        #endregion
    }

    public class DeathknightBlood
    {
        private readonly DeathknightBloodSettings _mySettings = DeathknightBloodSettings.GetSettings();

        #region General Timers & Variables

        private readonly WoWItem _firstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
        private readonly WoWItem _secondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);
        public int DRW = 1;
        public int DecastHP = 100;
        public int DefenseHP = 100;
        private Timer _engineeringTimer = new Timer(0);
        public int HealHP = 100;
        public int LC = 0;
        private Timer _onCd = new Timer(0);

        #endregion

        #region Professions & Racials

        public readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
        public readonly Spell Berserking = new Spell("Berserking");
        public readonly Spell BloodFury = new Spell("Blood Fury");
        public readonly Spell Engineering = new Spell("Engineering");
        public readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
        public readonly Spell Lifeblood = new Spell("Lifeblood");
        public readonly Spell Stoneform = new Spell("Stoneform");
        public readonly Spell WarStomp = new Spell("War Stomp");

        #endregion

        #region Deathknight Presence & Buffs

        public readonly Spell BloodPlague = new Spell("Blood Plague");
        public readonly Spell BloodPresence = new Spell("Blood Presence");
        public readonly Spell FrostFever = new Spell("Frost Fever");
        public readonly Spell FrostPresence = new Spell("Frost Presence");
        public readonly Spell HornofWinter = new Spell("Horn of Winter");
        public readonly Spell PathofFrost = new Spell("Path of Frost");
        public readonly Spell RoilingBlood = new Spell("Roiling Blood");
        public readonly Spell UnholyPresence = new Spell("Unholy Presence");
        private Timer BloodPlagueTimer = new Timer(0);
        private Timer FrostFeverTimer = new Timer(0);
        private Timer PathofFrostBuffTimer = new Timer(0);
        private Timer PathofFrostTimer = new Timer(0);

        #endregion

        #region Offensive Spell

        public readonly Spell BloodBoil = new Spell("Blood Boil");
        public readonly Spell BloodStrike = new Spell("Blood Strike");
        public readonly Spell DeathCoil = new Spell("Death Coil");
        public readonly Spell DeathStrike = new Spell("Death Strike");
        public readonly Spell DeathandDecay = new Spell("Death and Decay");
        public readonly Spell HeartStrike = new Spell("Heart Strike");
        public readonly Spell IcyTouch = new Spell("Icy Touch");
        public readonly Spell PlagueLeech = new Spell("Plague Leech");
        public readonly Spell PlagueStrike = new Spell("Plague Strike");
        public readonly Spell RuneStrike = new Spell("Rune Strike");
        public readonly Spell SoulReaper = new Spell("Soul Reaper");
        public readonly Spell UnholyBlight = new Spell("Unholy Blight");

        #endregion

        #region Offensive Cooldown

        public readonly Spell BloodTap = new Spell("Blood Tap");
        public readonly Spell DancingRuneWeapon = new Spell("Dancing Rune Weapon");
        public readonly Spell DeathGrip = new Spell("Death Grip");
        public readonly Spell EmpowerRuneWeapon = new Spell("Empower Rune Weapon");
        public readonly Spell Outbreak = new Spell("Outbreak");
        public readonly Spell Pestilence = new Spell("Pestilence");
        public readonly Spell RaiseDead = new Spell("Raise Dead");
        private Timer DancingRuneWeaponTimer = new Timer(0);
        private Timer PestilenceTimer = new Timer(0);

        #endregion

        #region Defensive Cooldown

        public readonly Spell AntiMagicShell = new Spell("Anti-Magic Shell");
        public readonly Spell AntiMagicZone = new Spell("Anti-Magic Zone");
        public readonly Spell ArmyoftheDead = new Spell("Army of the Dead");
        public readonly Spell Asphyxiate = new Spell("Asphyxiate");
        public readonly Spell BoneShield = new Spell("Bone Shield");
        public readonly Spell ChainsofIce = new Spell("Chains of Ice");
        public readonly Spell DeathsAdvance = new Spell("Death's Advance");
        public readonly Spell IceboundFortitude = new Spell("Icebound Fortitude");
        public readonly Spell MindFreeze = new Spell("Mind Freeze");
        public readonly Spell RemorselessWinter = new Spell("Remorseless Winter");
        public readonly Spell Strangulate = new Spell("Strangulate");
        public readonly Spell VampiricBlood = new Spell("Vampiric Blood");

        #endregion

        #region Healing Spell

        public readonly Spell Conversion = new Spell("Conversion");
        public readonly Spell DeathPact = new Spell("Death Pact");
        public readonly Spell DeathSiphon = new Spell("Death Siphon");
        public readonly Spell Lichborne = new Spell("Lichborne");
        public readonly Spell RuneTap = new Spell("Rune Tap");

        #endregion

        public DeathknightBlood()
        {
            Main.InternalRange = 5.0f;
            UInt64 lastTarget = 0;
            LowHP();

            while (Main.InternalLoop)
            {
                try
                {
                    if (!ObjectManager.Me.IsDeadMe)
                    {
                        BuffPath();
                        if (!ObjectManager.Me.IsMounted)
                        {
                            if (Fight.InFight && ObjectManager.Me.Target > 0)
                            {
                                if (ObjectManager.Me.Target != lastTarget && (DeathGrip.IsHostileDistanceGood || IcyTouch.IsHostileDistanceGood))
                                {
                                    Pull();
                                    lastTarget = ObjectManager.Me.Target;
                                }

                                if (_mySettings.UseLowCombat && ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84)
                                {
                                    LC = 1;
                                    if (ObjectManager.Target.GetDistance < 30)
                                    {
                                        LowCombat();
                                    }
                                }
                                else
                                {
                                    LC = 0;
                                    if (ObjectManager.Target.GetDistance < 30)
                                    {
                                        Combat();
                                    }
                                }
                                break;
                            }
                            if (!ObjectManager.Me.IsCast)
                            {
                                Patrolling();
                            }
                        }
                    }
                    else
                    {
                        Thread.Sleep(500);
                    }
                }
                catch
                {
                }
                Thread.Sleep(150);
            }
        }

        private void LowHP()
        {
            if (_mySettings.UseBoneShieldAtPercentage < DefenseHP)
            {
                DefenseHP = _mySettings.UseBoneShieldAtPercentage;
            }

            if (_mySettings.UseIceboundFortitudeAtPercentage < DefenseHP)
            {
                DefenseHP = _mySettings.UseIceboundFortitudeAtPercentage;
            }

            if (_mySettings.UseAsphyxiateAtPercentage < DefenseHP)
            {
                DefenseHP = _mySettings.UseAsphyxiateAtPercentage;
            }

            if (_mySettings.UseStoneformAtPercentage < DefenseHP)
            {
                DefenseHP = _mySettings.UseStoneformAtPercentage;
            }

            if (_mySettings.UseWarStompAtPercentage < DefenseHP)
            {
                DefenseHP = _mySettings.UseWarStompAtPercentage;
            }

            if (_mySettings.UseRemorselessWinterAtPercentage < DefenseHP)
            {
                DefenseHP = _mySettings.UseRemorselessWinterAtPercentage;
            }

            if (_mySettings.UseGiftoftheNaaruAtPercentage < HealHP)
            {
                HealHP = _mySettings.UseGiftoftheNaaruAtPercentage;
            }

            if (_mySettings.UseDeathPactAtPercentage < HealHP)
            {
                HealHP = _mySettings.UseDeathPactAtPercentage;
            }

            if (_mySettings.UseLichborneAtPercentage < HealHP)
            {
                HealHP = _mySettings.UseLichborneAtPercentage;
            }

            if (_mySettings.UseConversionAtPercentage < HealHP)
            {
                HealHP = _mySettings.UseConversionAtPercentage;
            }

            if (_mySettings.UseDeathSiphonAtPercentage < HealHP)
            {
                HealHP = _mySettings.UseDeathSiphonAtPercentage;
            }

            if (_mySettings.UseVampiricBloodAtPercentage < HealHP)
            {
                HealHP = _mySettings.UseVampiricBloodAtPercentage;
            }

            if (_mySettings.UseRuneTapAtPercentage < HealHP)
            {
                HealHP = _mySettings.UseRuneTapAtPercentage;
            }

            if (_mySettings.UseMindFreezeAtPercentage < DecastHP)
            {
                DecastHP = _mySettings.UseMindFreezeAtPercentage;
            }

            if (_mySettings.UseArcaneTorrentForDecastAtPercentage < DecastHP)
            {
                DecastHP = _mySettings.UseArcaneTorrentForDecastAtPercentage;
            }

            if (_mySettings.UseAntiMagicShellAtPercentage < DecastHP)
            {
                DecastHP = _mySettings.UseAntiMagicShellAtPercentage;
            }

            if (_mySettings.UseStrangulateAtPercentage < DecastHP)
            {
                DecastHP = _mySettings.UseStrangulateAtPercentage;
            }

            if (_mySettings.UseAsphyxiateAtPercentage < DecastHP)
            {
                DecastHP = _mySettings.UseAsphyxiateAtPercentage;
            }

            if (_mySettings.UseAntiMagicZoneAtPercentage < DecastHP)
            {
                DecastHP = _mySettings.UseAntiMagicZoneAtPercentage;
            }
        }

        private void BuffPath()
        {
            if (_mySettings.UsePathofFrost && PathofFrost.KnownSpell && !ObjectManager.Me.InCombat && (!PathofFrost.HaveBuff || PathofFrostTimer.IsReady) && PathofFrostBuffTimer.IsReady &&
                PathofFrost.IsSpellUsable)
            {
                PathofFrost.Launch();
                PathofFrostBuffTimer = new Timer(1000*10);
                PathofFrostTimer = new Timer(1000*60*9.5);
                }
        }

        private void Pull()
        {
            if (_mySettings.UseDeathGrip && DeathGrip.KnownSpell && DeathGrip.IsHostileDistanceGood && ObjectManager.Target.GetDistance > Main.InternalRange && DeathGrip.IsSpellUsable)
            {
                DeathGrip.Launch();
                MovementManager.StopMove();
                return;
            }

            if (_mySettings.UseIcyTouch && IcyTouch.KnownSpell && IcyTouch.IsHostileDistanceGood && IcyTouch.IsSpellUsable)
            {
                IcyTouch.Launch();
                FrostFeverTimer = new Timer(1000*27);
                
            }
        }

        private void LowCombat()
        {
            Buff();

            if (_mySettings.DoAvoidMelee)
            {
                AvoidMelee();
            }
            if (_onCd.IsReady)
            {
                DefenseCycle();
            }

            Heal();

            if (_mySettings.UseIcyTouch && IcyTouch.KnownSpell && IcyTouch.IsHostileDistanceGood && IcyTouch.IsSpellUsable)
            {
                IcyTouch.Launch();
                return;
            }

            if (_mySettings.UseDeathCoil && DeathCoil.KnownSpell && DeathCoil.IsHostileDistanceGood && ObjectManager.Target.GetDistance > Main.InternalRange && DeathCoil.IsSpellUsable)
            {
                DeathCoil.Launch();
                return;
            }

            if (_mySettings.UseRuneStrike && RuneStrike.KnownSpell && RuneStrike.IsHostileDistanceGood && RuneStrike.IsSpellUsable)
            {
                RuneStrike.Launch();
                return;
            }

            if (_mySettings.UsePlagueStrike && PlagueStrike.KnownSpell && PlagueStrike.IsHostileDistanceGood && PlagueStrike.IsSpellUsable)
            {
                PlagueStrike.Launch();
                return;
            }

            if (_mySettings.UseBloodBoil && BloodBoil.KnownSpell && ObjectManager.Target.GetDistance < 11 && BloodBoil.IsSpellUsable)
            {
                BloodBoil.Launch();
                }
        }

        private void Combat()
        {
            Buff();

            if (_mySettings.DoAvoidMelee)
            {
                AvoidMelee();
            }

            DPSCycle();

            if (_onCd.IsReady && ObjectManager.Me.HealthPercent <= DefenseHP)
            {
                DefenseCycle();
            }

            if (ObjectManager.Me.HealthPercent <= HealHP)
            {
                Heal();
            }

            if (ObjectManager.Me.HealthPercent <= DecastHP || (_mySettings.UseChainsofIce && ObjectManager.Target.GetMove))
            {
                Decast();
            }

            DPSBurst();
            DPSCycle();
        }

        private void Buff()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (_mySettings.UseUnholyPresence && LC == 1 && UnholyPresence.KnownSpell && UnholyPresence.IsSpellUsable
                && !UnholyPresence.HaveBuff && ObjectManager.Me.HealthPercent > _mySettings.UseBloodPresenceAtPercentage + 10)
            {
                UnholyPresence.Launch();
            }

            if (_mySettings.UseFrostPresence && !_mySettings.UseUnholyPresence && LC == 1 && FrostPresence.KnownSpell && !FrostPresence.HaveBuff && FrostPresence.IsSpellUsable
                && ObjectManager.Me.HealthPercent > _mySettings.UseBloodPresenceAtPercentage + 10)
            {
                FrostPresence.Launch();
            }

            if (_mySettings.UseBloodPresence && BloodPresence.KnownSpell && !BloodPresence.HaveBuff && BloodPresence.IsSpellUsable
                && (LC != 1 || (!_mySettings.UseUnholyPresence && !_mySettings.UseFrostPresence)))
            {
                BloodPresence.Launch();
            }

            if (_mySettings.UseHornofWinter && HornofWinter.KnownSpell && !HornofWinter.HaveBuff && HornofWinter.IsSpellUsable)
            {
                HornofWinter.Launch();
            }

            if (_mySettings.UseDeathsAdvance && DeathsAdvance.KnownSpell && !ObjectManager.Me.InCombat && DeathsAdvance.IsSpellUsable
                && ObjectManager.Me.GetMove)
            {
                DeathsAdvance.Launch();
            }

            if (_mySettings.UseAlchFlask && ItemsManager.GetItemCountByIdLUA(75525) > 0 && !ObjectManager.Me.HaveBuff(79638) && !ObjectManager.Me.HaveBuff(79640) &&
                !ObjectManager.Me.HaveBuff(79639)
                && !ItemsManager.IsItemOnCooldown(75525))
            {
                ItemsManager.UseItem(75525);
            }
        }

        private void AvoidMelee()
        {
            if (ObjectManager.Target.GetDistance < _mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
            {
                Logging.WriteFight("Too Close. Moving Back");
                var maxTimeTimer = new Timer(1000*2);
                MovementsAction.MoveBackward(true);
                while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                {
                    Thread.Sleep(300);
                }
                MovementsAction.MoveBackward(false);
                if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
                {
                    MovementsAction.MoveForward(true);
                    Thread.Sleep(1000);
                    MovementsAction.MoveForward(false);
                    MovementManager.Face(ObjectManager.Target.Position);
                }
            }
        }

        private void DefenseCycle()
        {
            if (_mySettings.UseBoneShield && BoneShield.KnownSpell && !BoneShield.HaveBuff && ObjectManager.Me.HealthPercent <= _mySettings.UseBoneShieldAtPercentage &&
                BoneShield.IsSpellUsable)
            {
                BoneShield.Launch();
                return;
            }

            if (_mySettings.UseIceboundFortitude && IceboundFortitude.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseIceboundFortitudeAtPercentage &&
                IceboundFortitude.IsSpellUsable)
            {
                IceboundFortitude.Launch();
                _onCd = new Timer(1000*12);
                return;
            }

            if (_mySettings.UseAsphyxiate && Strangulate.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseAsphyxiateAtPercentage && Strangulate.IsHostileDistanceGood &&
                Strangulate.IsSpellUsable)
            {
                Strangulate.Launch();
                _onCd = new Timer(1000*5);
                return;
            }

            if (_mySettings.UseStoneform && Stoneform.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable)
            {
                Stoneform.Launch();
                _onCd = new Timer(1000*8);
                return;
            }

            if (_mySettings.UseWarStomp && WarStomp.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseWarStompAtPercentage && ObjectManager.Target.GetDistance < 8 &&
                WarStomp.IsSpellUsable)
            {
                WarStomp.Launch();
                _onCd = new Timer(1000*2);
                return;
            }

            if (_mySettings.UseRemorselessWinter && RemorselessWinter.KnownSpell &&
                (ObjectManager.Me.HealthPercent <= _mySettings.UseRemorselessWinterAtPercentage || ObjectManager.GetNumberAttackPlayer() > 1)
                && ObjectManager.Target.GetDistance < 8 && RemorselessWinter.IsSpellUsable)
            {
                RemorselessWinter.Launch();
                _onCd = new Timer(1000*8);
                }
        }

        private void Heal()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (_mySettings.UseGiftoftheNaaru && GiftoftheNaaru.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseGiftoftheNaaruAtPercentage && GiftoftheNaaru.IsSpellUsable)
            {
                GiftoftheNaaru.Launch();
                return;
            }

            if (_mySettings.UseDeathPact && DeathPact.KnownSpell && (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0)
                && ObjectManager.Me.HealthPercent <= _mySettings.UseDeathPactAtPercentage && DeathPact.IsSpellUsable)
            {
                DeathPact.Launch();
                return;
            }

            if (_mySettings.UseDeathPact && DeathPact.KnownSpell && RaiseDead.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseDeathPactAtPercentage &&
                RaiseDead.IsSpellUsable && DeathPact.IsSpellUsable)
            {
                for (int i = 0; i < 3; i++)
                {
                    RaiseDead.Launch();
                    DeathPact.Launch();
                    if (!DeathPact.IsSpellUsable)
                        break;
                }
                return;
            }

            if (_mySettings.UseLichborne && Lichborne.KnownSpell && DeathCoil.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseLichborneAtPercentage
                && ObjectManager.Me.RunicPower > 39 && Lichborne.IsSpellUsable)
            {
                Lichborne.Launch();
                return;
            }

            if (_mySettings.UseConversion && Conversion.KnownSpell && ObjectManager.Me.RunicPower > 10 && ObjectManager.Me.HealthPercent <= _mySettings.UseConversionAtPercentage &&
                Conversion.IsSpellUsable)
            {
                Conversion.Launch();
                while (ObjectManager.Me.IsCast && (ObjectManager.Me.RunicPower > 0 || ObjectManager.Me.HealthPercent < 100))
                {
                    Thread.Sleep(200);
                }
                return;
            }

            if (_mySettings.UseDeathSiphon && DeathSiphon.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseDeathSiphonAtPercentage && DeathSiphon.IsHostileDistanceGood &&
                DeathSiphon.IsSpellUsable)
            {
                DeathSiphon.Launch();
                return;
            }

            if (_mySettings.UseVampiricBlood && VampiricBlood.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseVampiricBloodAtPercentage && VampiricBlood.IsSpellUsable)
            {
                VampiricBlood.Launch();
                Thread.Sleep(200);
            }

            if (_mySettings.UseBloodTapToHeal && BloodTap.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseRuneTapAtPercentage && !RuneTap.IsSpellUsable &&
                BloodTap.IsSpellUsable)
            {
                BloodTap.Launch();
                Thread.Sleep(200);
            }

            if (_mySettings.UseRuneTap && RuneTap.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseRuneTapAtPercentage && RuneTap.IsSpellUsable)
            {
                RuneTap.Launch();
                return;
            }
        }

        private void Decast()
        {
            if (_mySettings.UseMindFreeze && MindFreeze.KnownSpell && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe &&
                ObjectManager.Me.HealthPercent <= _mySettings.UseMindFreezeAtPercentage
                && MindFreeze.IsHostileDistanceGood && MindFreeze.IsSpellUsable)
            {
                MindFreeze.Launch();
                return;
            }

            if (_mySettings.UseArcaneTorrentForDecast && ArcaneTorrent.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseArcaneTorrentForDecastAtPercentage
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && ObjectManager.Target.GetDistance < 8 && ArcaneTorrent.IsSpellUsable)
            {
                ArcaneTorrent.Launch();
                return;
            }

            if (_mySettings.UseAntiMagicShell && AntiMagicShell.KnownSpell && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && ObjectManager.Me.HealthPercent <= _mySettings.UseAntiMagicShellAtPercentage && AntiMagicShell.IsSpellUsable)
            {
                AntiMagicShell.Launch();
                return;
            }

            if (Strangulate.KnownSpell && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe &&
                (_mySettings.UseStrangulate && ObjectManager.Me.HealthPercent <= _mySettings.UseStrangulateAtPercentage
                 || _mySettings.UseAsphyxiate && ObjectManager.Me.HealthPercent <= _mySettings.UseAsphyxiateAtPercentage) && Strangulate.IsHostileDistanceGood &&
                Strangulate.IsSpellUsable)
            {
                Strangulate.Launch();
                return;
            }

            if (_mySettings.UseAntiMagicZone && AntiMagicZone.KnownSpell && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && ObjectManager.Me.HealthPercent <= _mySettings.UseAntiMagicZoneAtPercentage && AntiMagicZone.IsSpellUsable)
            {
                SpellManager.CastSpellByIDAndPosition(51052, ObjectManager.Me.Position);
                return;
            }

            if (_mySettings.UseChainsofIce && ChainsofIce.KnownSpell && ObjectManager.Target.GetMove && !ChainsofIce.TargetHaveBuff && ChainsofIce.IsHostileDistanceGood &&
                ChainsofIce.IsSpellUsable)
            {
                ChainsofIce.Launch();
                return;
            }
        }

        private void DPSBurst()
        {
            if (_mySettings.UseTrinketOne && !ItemsManager.IsItemOnCooldown(_firstTrinket.Entry) && ItemsManager.IsUsableItemById(_firstTrinket.Entry))
            {
                ItemsManager.UseItem(_firstTrinket.Name);
                Logging.WriteFight("Use First Trinket Slot");
            }

            if (_mySettings.UseTrinketTwo && !ItemsManager.IsItemOnCooldown(_secondTrinket.Entry) && ItemsManager.IsUsableItemById(_secondTrinket.Entry))
            {
                ItemsManager.UseItem(_secondTrinket.Name);
                Logging.WriteFight("Use Second Trinket Slot");
            }

            if (_mySettings.UseBerserking && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30 && Berserking.IsSpellUsable)
            {
                Berserking.Launch();
            }
            if (_mySettings.UseBloodFury && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 30 && BloodFury.IsSpellUsable)
            {
                BloodFury.Launch();
            }
            if (_mySettings.UseLifeblood && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30 && Lifeblood.IsSpellUsable)
            {
                Lifeblood.Launch();
            }
            if (_mySettings.UseBloodTapForDPS && BloodTap.KnownSpell && ObjectManager.Target.GetDistance < 30 && BloodTap.IsSpellUsable)
            {
                BloodTap.Launch();
            }

            if (_mySettings.UseEngGlove && _engineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30)
            {
                Logging.WriteFight("Use Engineering Gloves.");
                Lua.RunMacroText("/use 10");
                _engineeringTimer = new Timer(1000*60);
            }

            if (_mySettings.UseRaiseDeadForDPS && !DeathPact.KnownSpell && RaiseDead.KnownSpell && ObjectManager.Target.GetDistance < 30 && RaiseDead.IsSpellUsable)
            {
                RaiseDead.Launch();
            }

            if (DancingRuneWeaponTimer.IsReady && DRW == 0)
            {
                DRW = 1;
            }

            if (_mySettings.UseDancingRuneWeapon && DancingRuneWeapon.KnownSpell && DancingRuneWeapon.IsHostileDistanceGood && DRW == 1 && DancingRuneWeapon.IsSpellUsable)
            {
                DancingRuneWeapon.Launch();
                DancingRuneWeaponTimer = new Timer(1000*60*1.5);
                DRW = 0;
            }
        }

        private void DPSCycle()
        {
            if (DeathCoil.KnownSpell && Lichborne.HaveBuff && ObjectManager.Me.HealthPercent < 85 && DeathCoil.IsSpellUsable)
            {
                Lua.RunMacroText("/target Player");
                DeathCoil.Launch();
                return;
            }

            if (_mySettings.UsePlagueLeech && _mySettings.UseOutbreak && PlagueLeech.KnownSpell && Outbreak.KnownSpell && PlagueLeech.IsHostileDistanceGood
                && BloodPlagueTimer.IsReady && BloodPlague.TargetHaveBuff && FrostFeverTimer.IsReady && FrostFever.TargetHaveBuff && Outbreak.IsSpellUsable && PlagueLeech.IsSpellUsable)
            {
                PlagueLeech.Launch();
                Thread.Sleep(400);
                if (Outbreak.IsHostileDistanceGood && Outbreak.IsSpellUsable)
                {
                    Outbreak.Launch();
                    BloodPlagueTimer = new Timer(1000*27);
                    FrostFeverTimer = new Timer(1000*27);
                }
                return;
            }

            if (_mySettings.UseUnholyBlight && UnholyBlight.KnownSpell && ObjectManager.Target.GetDistance < 9 && (!BloodPlague.TargetHaveBuff
                                                                                                                  || BloodPlagueTimer.IsReady || !FrostFever.TargetHaveBuff ||
                                                                                                                  FrostFeverTimer.IsReady) && UnholyBlight.IsSpellUsable)
            {
                UnholyBlight.Launch();
                BloodPlagueTimer = new Timer(1000*27);
                FrostFeverTimer = new Timer(1000*27);
                return;
            }

            if (_mySettings.UseOutbreak && Outbreak.KnownSpell && Outbreak.IsHostileDistanceGood && (BloodPlagueTimer.IsReady
                                                                                                    || FrostFeverTimer.IsReady || !BloodPlague.TargetHaveBuff ||
                                                                                                    !FrostFever.TargetHaveBuff) && Outbreak.IsSpellUsable)
            {
                Outbreak.Launch();
                BloodPlagueTimer = new Timer(1000*27);
                FrostFeverTimer = new Timer(1000*27);
                return;
            }

            if (_mySettings.UseBloodBoil && RoilingBlood.KnownSpell && BloodBoil.KnownSpell && ObjectManager.Target.GetDistance < 9
                && ((BloodPlagueTimer.IsReady && BloodPlague.TargetHaveBuff) || (FrostFeverTimer.IsReady && FrostFever.TargetHaveBuff)) && BloodBoil.IsSpellUsable)
            {
                BloodBoil.Launch();
                if (BloodPlague.TargetHaveBuff)
                    BloodPlagueTimer = new Timer(1000*27);
                if (FrostFever.TargetHaveBuff)
                    FrostFeverTimer = new Timer(1000*27);
                return;
            }

            if (_mySettings.UsePlagueStrike && PlagueStrike.KnownSpell && PlagueStrike.IsHostileDistanceGood && (BloodPlagueTimer.IsReady || !BloodPlague.TargetHaveBuff)
                && !Outbreak.IsSpellUsable && !UnholyBlight.IsSpellUsable && PlagueStrike.IsSpellUsable)
            {
                PlagueStrike.Launch();
                BloodPlagueTimer = new Timer(1000*27);
                return;
            }

            if (_mySettings.UseIcyTouch && IcyTouch.KnownSpell && IcyTouch.IsHostileDistanceGood && (FrostFeverTimer.IsReady || !FrostFever.TargetHaveBuff)
                && !Outbreak.IsSpellUsable && !UnholyBlight.IsSpellUsable && IcyTouch.IsSpellUsable)
            {
                IcyTouch.Launch();
                FrostFeverTimer = new Timer(1000*27);
                return;
            }

            if (ObjectManager.GetNumberAttackPlayer() > 1 || ObjectManager.Me.HaveBuff(81141))
            {
                if (_mySettings.UseBloodBoil && BloodBoil.KnownSpell && BloodBoil.IsHostileDistanceGood
                    && (ObjectManager.GetNumberAttackPlayer() > 3 || ObjectManager.Me.HaveBuff(81141)) && BloodBoil.IsSpellUsable)
                {
                    BloodBoil.Launch();
                    if (RoilingBlood.KnownSpell && BloodPlague.TargetHaveBuff)
                        BloodPlagueTimer = new Timer(1000*27);

                    if (RoilingBlood.KnownSpell && FrostFever.TargetHaveBuff)
                        FrostFeverTimer = new Timer(1000*27);
                    return;
                }

                if (_mySettings.UsePestilence && (!RoilingBlood.KnownSpell || !_mySettings.UseBloodBoil) && Pestilence.KnownSpell && Pestilence.IsHostileDistanceGood
                    && FrostFever.TargetHaveBuff && BloodPlague.TargetHaveBuff && ObjectManager.GetNumberAttackPlayer() > 2 && Pestilence.IsSpellUsable)
                {
                    Pestilence.Launch();
                    PestilenceTimer = new Timer(1000*30);
                    return;
                }

                if (_mySettings.UseDeathandDecay && DeathandDecay.KnownSpell && DeathandDecay.IsHostileDistanceGood
                    && ObjectManager.GetNumberAttackPlayer() > 2 && DeathandDecay.IsSpellUsable)
                {
                    SpellManager.CastSpellByIDAndPosition(43265, ObjectManager.Target.Position);
                    return;
                }

                // Blizzard API Calls for Heart Strike using Blood Strike Function
                if (_mySettings.UseHeartStrike && BloodStrike.KnownSpell && BloodStrike.IsHostileDistanceGood
                    && ObjectManager.GetNumberAttackPlayer() < 4 && ObjectManager.GetNumberAttackPlayer() > 1 && BloodStrike.IsSpellUsable)
                {
                    BloodStrike.Launch();
                    return;
                }

                if (_mySettings.UseArmyoftheDead && ArmyoftheDead.KnownSpell && ObjectManager.GetNumberAttackPlayer() > 3 && ArmyoftheDead.IsSpellUsable)
                {
                    ArmyoftheDead.Launch();
                    Thread.Sleep(4000);
                    return;
                }
            }

            if (_mySettings.UseSoulReaper && SoulReaper.KnownSpell && SoulReaper.IsHostileDistanceGood && ObjectManager.Target.HealthPercent < 35
                && (ObjectManager.Me.HealthPercent > 90 || !_mySettings.UseDeathStrike) && SoulReaper.IsSpellUsable)
            {
                SoulReaper.Launch();
                return;
            }

            if (_mySettings.UseDeathStrike && DeathStrike.KnownSpell && DeathStrike.IsHostileDistanceGood && DeathStrike.IsSpellUsable)
            {
                DeathStrike.Launch();
                return;
            }

            if (_mySettings.UseRuneStrike && RuneStrike.KnownSpell && RuneStrike.IsHostileDistanceGood && DRW == 0 && RuneStrike.IsSpellUsable)
            {
                if ((_mySettings.UseLichborne && ObjectManager.Me.HealthPercent <= _mySettings.UseLichborneAtPercentage && Lichborne.KnownSpell)
                    || (_mySettings.UseConversion && ObjectManager.Me.HealthPercent <= _mySettings.UseConversionAtPercentage && Conversion.KnownSpell))
                    return;
                RuneStrike.Launch();
                return;
            }

            // Blizzard API Calls for Heart Strike using Blood Strike Function

            if (_mySettings.UseHeartStrike && BloodStrike.KnownSpell && BloodStrike.IsHostileDistanceGood && BloodStrike.IsSpellUsable)
            {
                BloodStrike.Launch();
                return;
            }

            if (_mySettings.UseHornofWinter && HornofWinter.KnownSpell && ObjectManager.Me.RunicPowerPercentage < 90 && HornofWinter.IsSpellUsable)
            {
                HornofWinter.Launch();
                return;
            }

            if (_mySettings.UseArcaneTorrentForResource && ArcaneTorrent.KnownSpell && ObjectManager.Me.RunicPowerPercentage < 85 && ArcaneTorrent.IsSpellUsable)
            {
                ArcaneTorrent.Launch();
                return;
            }

            if (_mySettings.UseEmpowerRuneWeapon && EmpowerRuneWeapon.KnownSpell && ObjectManager.Me.RunicPowerPercentage < 75 && EmpowerRuneWeapon.IsSpellUsable)
            {
                EmpowerRuneWeapon.Launch();
                return;
            }
        }

        private void Patrolling()
        {
            if (!ObjectManager.Me.IsMounted)
            {
                Buff();
                Heal();
            }
        }

        #region Nested type: DeathknightBloodSettings

        [Serializable]
        public class DeathknightBloodSettings : Settings
        {
            public bool DoAvoidMelee = false;
            public int DoAvoidMeleeDistance = 0;
            public bool UseAlchFlask = true;
            public bool UseAntiMagicShell = true;
            public int UseAntiMagicShellAtPercentage = 100;
            public bool UseAntiMagicZone = true;
            public int UseAntiMagicZoneAtPercentage = 100;
            public bool UseArcaneTorrentForDecast = true;
            public int UseArcaneTorrentForDecastAtPercentage = 100;
            public bool UseArcaneTorrentForResource = true;
            public bool UseArmyoftheDead = true;
            public bool UseAsphyxiate = true;
            public int UseAsphyxiateAtPercentage = 90;
            public bool UseBerserking = true;
            public bool UseBloodBoil = true;
            public bool UseBloodFury = true;
            public bool UseBloodPresence = true;
            public int UseBloodPresenceAtPercentage = 50;
            public bool UseBloodTapForDPS = true;
            public bool UseBloodTapToHeal = true;
            public bool UseBoneShield = true;
            public int UseBoneShieldAtPercentage = 100;
            public bool UseChainsofIce = false;
            public bool UseConversion = true;
            public int UseConversionAtPercentage = 45;
            public bool UseDancingRuneWeapon = true;
            public bool UseDeathCoil = true;
            public bool UseDeathGrip = true;
            public bool UseDeathPact = true;
            public int UseDeathPactAtPercentage = 55;
            public bool UseDeathSiphon = true;
            public int UseDeathSiphonAtPercentage = 80;
            public bool UseDeathStrike = true;
            public bool UseDeathandDecay = true;
            public bool UseDeathsAdvance = true;
            public bool UseEmpowerRuneWeapon = true;
            public bool UseEngGlove = true;
            public bool UseFrostPresence = true;
            public bool UseGiftoftheNaaru = true;
            public int UseGiftoftheNaaruAtPercentage = 80;
            public bool UseHeartStrike = true;
            public bool UseHornofWinter = true;
            public bool UseIceboundFortitude = true;
            public int UseIceboundFortitudeAtPercentage = 80;
            public bool UseIcyTouch = true;
            public bool UseLichborne = true;
            public int UseLichborneAtPercentage = 45;
            public bool UseLifeblood = true;
            public bool UseLowCombat = true;
            public bool UseMindFreeze = true;
            public int UseMindFreezeAtPercentage = 100;
            public bool UseOutbreak = true;
            public bool UsePathofFrost = true;
            public bool UsePestilence = true;
            public bool UsePlagueLeech = true;
            public bool UsePlagueStrike = true;
            public bool UseRaiseDeadForDPS = true;
            public bool UseRemorselessWinter = true;
            public int UseRemorselessWinterAtPercentage = 70;
            public bool UseRuneStrike = true;
            public bool UseRuneTap = true;
            public int UseRuneTapAtPercentage = 70;
            public bool UseSoulReaper = true;
            public bool UseStoneform = true;
            public int UseStoneformAtPercentage = 80;
            public bool UseStrangulate = true;
            public int UseStrangulateAtPercentage = 100;
            public bool UseTrinketOne = true;
            public bool UseTrinketTwo = true;
            public bool UseUnholyBlight = true;
            public bool UseUnholyPresence = true;
            public bool UseVampiricBlood = true;
            public int UseVampiricBloodAtPercentage = 70;
            public bool UseWarStomp = true;
            public int UseWarStompAtPercentage = 80;

            public DeathknightBloodSettings()
            {
                ConfigWinForm(new Point(500, 400), "Deathknight Blood Settings");
                /* Professions & Racials */
                AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials");
                AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
                AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
                AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
                AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials", "AtPercentage");
                /* Deathknight Presence & Buffs */
                AddControlInWinForm("Use Frost Presence", "UseFrostPresence", "Deathknight Presence & Buffs");
                AddControlInWinForm("Use Blood Presence", "UseBloodPresence", "Deathknight Presence & Buffs", "AtPercentage");
                AddControlInWinForm("Use Horn of Winter", "UseHornofWinter", "Deathknight Presence & Buffs");
                AddControlInWinForm("Use Path of Frost", "UsePathofFrost", "Deathknight Presence & Buffs");
                AddControlInWinForm("Use Unholy Presence", "UseUnholyPresence", "Deathknight Presence & Buffs");
                /* Offensive Spell */
                AddControlInWinForm("Use Blood Boil", "UseBloodBoil", "Offensive Spell");
                AddControlInWinForm("Use Death Coil", "UseDeathCoil", "Offensive Spell");
                AddControlInWinForm("Use Death and Decay", "UseDeathandDecay", "Offensive Spell");
                AddControlInWinForm("Use Death Strike", "UseDeathStrike", "Offensive Spell");
                AddControlInWinForm("Use Heart Strike", "UseHeartStrike", "Offensive Spell");
                AddControlInWinForm("Use Icy Touch", "UseIcyTouch", "Offensive Spell");
                AddControlInWinForm("Use Plague Leech", "UsePlagueLeech", "Offensive Spell");
                AddControlInWinForm("Use Plague Strike", "UsePlagueStrike", "Offensive Spell");
                AddControlInWinForm("Use Rune Strike", "UseRuneStrike", "Offensive Spell");
                AddControlInWinForm("Use Soul Reaper", "UseSoulReaper", "Offensive Spell");
                AddControlInWinForm("Use Unholy Blight", "UseUnholyBlight", "Offensive Spell");
                /* Offensive Cooldown */
                AddControlInWinForm("Use Blood Tap for Healing", "UseBloodTapForHeal", "Offensive Cooldown");
                AddControlInWinForm("Use Blood Tap for DPS", "UseBloodTapForDPS", "Offensive Cooldown");
                AddControlInWinForm("Use Dancing Rune Weapon", "UseDancingRuneWeapon", "Offensive Cooldown");
                AddControlInWinForm("Use Death Grip", "UseDeathGrip", "Offensive Cooldown");
                AddControlInWinForm("Use Empower Rune Weapon", "UseEmpowerRuneWeapon", "Offensive Cooldown");
                AddControlInWinForm("Use Outbreak", "UseOutbreak", "Offensive Cooldown");
                AddControlInWinForm("Use Pestilence", "UsePestilence", "Offensive Cooldown");
                AddControlInWinForm("Use Raise Dead For DPS", "UseRaiseDeadForDPS", "Offensive Cooldown");
                /* Defensive Cooldown */
                AddControlInWinForm("Use Anti-Magic Shell", "UseAntiMagicShell", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Anti-Magic Zone", "UseAntiMagicZone", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Army of the Dead", "UseArmyoftheDead", "Defensive Cooldown");
                AddControlInWinForm("Use Asphyxiate", "UseAsphyxiate", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Bone Shield", "UseBoneShield", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Chains of Ice", "UseChainsofIce", "Defensive Cooldown");
                AddControlInWinForm("Use Death's Advance", "UseDeathsAdvance", "Defensive Cooldown");
                AddControlInWinForm("Use Icebound Fortitude", "UseIceboundFortitude", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Mind Freeze", "UseMindFreeze", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Remorseless Winter", "UseRemorseless Winter", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Strangulate", "UseStrangulate", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Vampiric Blood", "UseVampiricBlood", "Defensive Cooldown", "AtPercentage");
                /* Healing Spell */
                AddControlInWinForm("Use Conversion", "UseConversion", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Death Pact", "UseDeathPact", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Death Siphon", "UseDeathSiphon", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Lichborne", "UseLichborne", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Rune Tap", "UseRuneTap", "Healing Spell", "AtPercentage");
                /* Game Settings */
                AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
                AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
                AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
                AddControlInWinForm("Use Engineer Gloves", "UseEngGlove", "Game Settings");
                AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
                AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
                AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
            }

            public static DeathknightBloodSettings currentSetting { get; set; }

            public static DeathknightBloodSettings GetSettings()
            {
                string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Deathknight_Blood.xml";
                if (File.Exists(currentSettingsFile))
                {
                    return
                        currentSetting = Load<DeathknightBloodSettings>(currentSettingsFile);
                }
                return new DeathknightBloodSettings();
            }
        }

        #endregion
    }

    public class DeathknightUnholy
    {
        private readonly DeathknightUnholySettings _mySettings = DeathknightUnholySettings.GetSettings();

        #region General Timers & Variables

        private readonly WoWItem _firstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
        private readonly WoWItem _secondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);
        public int DT = 1;
        public int DecastHP = 100;
        public int DefenseHP = 100;
        private Timer _engineeringTimer = new Timer(0);
        public int HealHP = 100;
        public int LC = 0;
        private Timer _onCd = new Timer(0);

        #endregion

        #region Professions & Racials

        public readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
        public readonly Spell Berserking = new Spell("Berserking");
        public readonly Spell BloodFury = new Spell("Blood Fury");
        public readonly Spell Engineering = new Spell("Engineering");
        public readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
        public readonly Spell Lifeblood = new Spell("Lifeblood");
        public readonly Spell Stoneform = new Spell("Stoneform");
        public readonly Spell WarStomp = new Spell("War Stomp");

        #endregion

        #region Deathknight Presence & Buffs

        public readonly Spell BloodPlague = new Spell("Blood Plague");
        public readonly Spell BloodPresence = new Spell("Blood Presence");
        public readonly Spell FrostFever = new Spell("Frost Fever");
        public readonly Spell FrostPresence = new Spell("Frost Presence");
        public readonly Spell HornofWinter = new Spell("Horn of Winter");
        public readonly Spell PathofFrost = new Spell("Path of Frost");
        public readonly Spell RoilingBlood = new Spell("Roiling Blood");
        public readonly Spell UnholyPresence = new Spell("Unholy Presence");
        private Timer BloodPlagueTimer = new Timer(0);
        private Timer FrostFeverTimer = new Timer(0);
        private Timer PathofFrostBuffTimer = new Timer(0);
        private Timer PathofFrostTimer = new Timer(0);

        #endregion

        #region Offensive Spell

        public readonly Spell BloodBoil = new Spell("Blood Boil");
        public readonly Spell BloodStrike = new Spell("Blood Strike");
        public readonly Spell DarkTransformation = new Spell("Dark Transformation");
        public readonly Spell DeathCoil = new Spell("Death Coil");
        public readonly Spell DeathandDecay = new Spell("Death and Decay");
        public readonly Spell FesteringStrike = new Spell("Festering Strike");
        public readonly Spell IcyTouch = new Spell("Icy Touch");
        public readonly Spell PlagueLeech = new Spell("Plague Leech");
        public readonly Spell PlagueStrike = new Spell("Plague Strike");
        public readonly Spell ScourgeStrike = new Spell("Scourge Strike");
        public readonly Spell SoulReaper = new Spell("Soul Reaper");
        public readonly Spell UnholyBlight = new Spell("Unholy Blight");
        private Timer DarkTransformationTimer = new Timer(0);

        #endregion

        #region Offensive Cooldown

        public readonly Spell BloodTap = new Spell("Blood Tap");
        public readonly Spell DeathGrip = new Spell("Death Grip");
        public readonly Spell EmpowerRuneWeapon = new Spell("Empower Rune Weapon");
        public readonly Spell Outbreak = new Spell("Outbreak");
        public readonly Spell Pestilence = new Spell("Pestilence");
        public readonly Spell RaiseDead = new Spell("Raise Dead");
        public readonly Spell SummonGargoyle = new Spell("Summon Gargoyle");
        public readonly Spell UnholyFrenzy = new Spell("Unholy Frenzy");
        private Timer PestilenceTimer = new Timer(0);

        #endregion

        #region Defensive Cooldown

        public readonly Spell AntiMagicShell = new Spell("Anti-Magic Shell");
        public readonly Spell AntiMagicZone = new Spell("Anti-Magic Zone");
        public readonly Spell ArmyoftheDead = new Spell("Army of the Dead");
        public readonly Spell Asphyxiate = new Spell("Asphyxiate");
        public readonly Spell ChainsofIce = new Spell("Chains of Ice");
        public readonly Spell DeathsAdvance = new Spell("Death's Advance");
        public readonly Spell IceboundFortitude = new Spell("Icebound Fortitude");
        public readonly Spell MindFreeze = new Spell("Mind Freeze");
        public readonly Spell RemorselessWinter = new Spell("Remorseless Winter");
        public readonly Spell Strangulate = new Spell("Strangulate");

        #endregion

        #region Healing Spell

        public readonly Spell Conversion = new Spell("Conversion");
        public readonly Spell DeathPact = new Spell("Death Pact");
        public readonly Spell DeathSiphon = new Spell("Death Siphon");
        public readonly Spell DeathStrike = new Spell("Death Strike");
        public readonly Spell Lichborne = new Spell("Lichborne");

        #endregion

        public DeathknightUnholy()
        {
            Main.InternalRange = 5.0f;
            UInt64 lastTarget = 0;
            LowHP();

            while (Main.InternalLoop)
            {
                try
                {
                    if (!ObjectManager.Me.IsDeadMe)
                    {
                        BuffPath();
                        if (!ObjectManager.Me.IsMounted)
                        {
                            if (Fight.InFight && ObjectManager.Me.Target > 0)
                            {
                                if (ObjectManager.Me.Target != lastTarget && (DeathGrip.IsHostileDistanceGood || IcyTouch.IsHostileDistanceGood))
                                {
                                    Pull();
                                    lastTarget = ObjectManager.Me.Target;
                                }

                                if (_mySettings.UseLowCombat && ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84)
                                {
                                    LC = 1;
                                    if (ObjectManager.Target.GetDistance < 30)
                                    {
                                        LowCombat();
                                    }
                                }
                                else
                                {
                                    LC = 0;
                                    if (ObjectManager.Target.GetDistance < 30)
                                    {
                                        Combat();
                                    }
                                }
                                break;
                            }
                            if (!ObjectManager.Me.IsCast)
                            {
                                Patrolling();
                            }
                        }
                    }
                    else
                    {
                        Thread.Sleep(500);
                    }
                }
                catch
                {
                }
                Thread.Sleep(150);
            }
        }

        private void LowHP()
        {
            if (_mySettings.UseIceboundFortitudeAtPercentage < DefenseHP)
            {
                DefenseHP = _mySettings.UseIceboundFortitudeAtPercentage;
            }

            if (_mySettings.UseAsphyxiateAtPercentage < DefenseHP)
            {
                DefenseHP = _mySettings.UseAsphyxiateAtPercentage;
            }

            if (_mySettings.UseStoneformAtPercentage < DefenseHP)
            {
                DefenseHP = _mySettings.UseStoneformAtPercentage;
            }

            if (_mySettings.UseWarStompAtPercentage < DefenseHP)
            {
                DefenseHP = _mySettings.UseWarStompAtPercentage;
            }

            if (_mySettings.UseRemorselessWinterAtPercentage < DefenseHP)
            {
                DefenseHP = _mySettings.UseRemorselessWinterAtPercentage;
            }

            if (_mySettings.UseGiftoftheNaaruAtPercentage < HealHP)
            {
                HealHP = _mySettings.UseGiftoftheNaaruAtPercentage;
            }

            if (_mySettings.UseDeathPactAtPercentage < HealHP)
            {
                HealHP = _mySettings.UseDeathPactAtPercentage;
            }

            if (_mySettings.UseLichborneAtPercentage < HealHP)
            {
                HealHP = _mySettings.UseLichborneAtPercentage;
            }

            if (_mySettings.UseConversionAtPercentage < HealHP)
            {
                HealHP = _mySettings.UseConversionAtPercentage;
            }

            if (_mySettings.UseDeathSiphonAtPercentage < HealHP)
            {
                HealHP = _mySettings.UseDeathSiphonAtPercentage;
            }

            if (_mySettings.UseDeathStrikeAtPercentage < HealHP)
            {
                HealHP = _mySettings.UseDeathStrikeAtPercentage;
            }

            if (_mySettings.UseMindFreezeAtPercentage < DecastHP)
            {
                DecastHP = _mySettings.UseMindFreezeAtPercentage;
            }

            if (_mySettings.UseArcaneTorrentForDecastAtPercentage < DecastHP)
            {
                DecastHP = _mySettings.UseArcaneTorrentForDecastAtPercentage;
            }

            if (_mySettings.UseAntiMagicShellAtPercentage < DecastHP)
            {
                DecastHP = _mySettings.UseAntiMagicShellAtPercentage;
            }

            if (_mySettings.UseStrangulateAtPercentage < DecastHP)
            {
                DecastHP = _mySettings.UseStrangulateAtPercentage;
            }

            if (_mySettings.UseAsphyxiateAtPercentage < DecastHP)
            {
                DecastHP = _mySettings.UseAsphyxiateAtPercentage;
            }

            if (_mySettings.UseAntiMagicZoneAtPercentage < DecastHP)
            {
                DecastHP = _mySettings.UseAntiMagicZoneAtPercentage;
            }
        }

        private void BuffPath()
        {
            if (_mySettings.UsePathofFrost && PathofFrost.KnownSpell && !ObjectManager.Me.InCombat
                && (!PathofFrost.HaveBuff || PathofFrostTimer.IsReady) && PathofFrostBuffTimer.IsReady && PathofFrost.IsSpellUsable)
            {
                PathofFrost.Launch();
                PathofFrostBuffTimer = new Timer(1000*10);
                PathofFrostTimer = new Timer(1000*60*9.5);
            }
        }

        private void Pull()
        {
            if (_mySettings.UseDeathGrip && DeathGrip.KnownSpell && DeathGrip.IsHostileDistanceGood && ObjectManager.Target.GetDistance > Main.InternalRange && DeathGrip.IsSpellUsable)
            {
                DeathGrip.Launch();
                MovementManager.StopMove();
                return;
            }

            if (_mySettings.UseIcyTouch && IcyTouch.KnownSpell && IcyTouch.IsHostileDistanceGood && IcyTouch.IsSpellUsable)
            {
                IcyTouch.Launch();
                FrostFeverTimer = new Timer(1000*27);
               }
        }

        private void LowCombat()
        {
            Buff();

            if (_mySettings.DoAvoidMelee)
            {
                AvoidMelee();
            }

            if (_onCd.IsReady)
            {
                DefenseCycle();
            }

            Heal();

            if (_mySettings.UseIcyTouch && IcyTouch.KnownSpell && IcyTouch.IsHostileDistanceGood && IcyTouch.IsSpellUsable)
            {
                IcyTouch.Launch();
                return;
            }

            if (_mySettings.UseDeathCoil && DeathCoil.KnownSpell && DeathCoil.IsHostileDistanceGood && DeathCoil.IsSpellUsable)
            {
                DeathCoil.Launch();
                return;
            }

            if (_mySettings.UseScourgeStrike && ScourgeStrike.KnownSpell && ScourgeStrike.IsHostileDistanceGood && ScourgeStrike.IsSpellUsable)
            {
                ScourgeStrike.Launch();
                return;
            }

            if (_mySettings.UseBloodBoil && BloodBoil.KnownSpell && ObjectManager.Target.GetDistance < 10 && BloodBoil.IsSpellUsable)
            {
                BloodBoil.Launch();
                return;
            }
        }

        private void Combat()
        {
            Buff();

            if (_mySettings.DoAvoidMelee)
            {
                AvoidMelee();
            }

            DPSCycle();

            if (_onCd.IsReady && ObjectManager.Me.HealthPercent <= DefenseHP)
            {
                DefenseCycle();
            }

            if (ObjectManager.Me.HealthPercent <= HealHP)
            {
                Heal();
            }

            if (ObjectManager.Me.HealthPercent <= DecastHP || (_mySettings.UseChainsofIce && ObjectManager.Target.GetMove))
            {
                Decast();
            }

            DPSBurst();
            DPSCycle();
        }

        private void Buff()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (_mySettings.UseRaiseDead && RaiseDead.KnownSpell && ObjectManager.Me.InCombat && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0) &&
                RaiseDead.IsSpellUsable)
            {
                Logging.WriteFight(" - PET DEAD - ");
                Logging.WriteFight(" - SUMMONING PET - ");
                RaiseDead.Launch();
            }

            if (_mySettings.UseUnholyPresence && UnholyPresence.KnownSpell && !UnholyPresence.HaveBuff && ObjectManager.Me.HealthPercent > _mySettings.UseBloodPresenceAtPercentage + 10 &&
                UnholyPresence.IsSpellUsable)
            {
                UnholyPresence.Launch();
            }

            if (_mySettings.UseFrostPresence && !_mySettings.UseUnholyPresence && FrostPresence.KnownSpell && !FrostPresence.HaveBuff
                && ObjectManager.Me.HealthPercent > _mySettings.UseBloodPresenceAtPercentage + 10 && FrostPresence.IsSpellUsable)
            {
                FrostPresence.Launch();
            }

            if (_mySettings.UseBloodPresence && BloodPresence.KnownSpell && !BloodPresence.HaveBuff && ObjectManager.Me.HealthPercent <= _mySettings.UseBloodPresenceAtPercentage &&
                BloodPresence.IsSpellUsable)
            {
                BloodPresence.Launch();
            }

            if (_mySettings.UseHornofWinter && HornofWinter.KnownSpell && !HornofWinter.HaveBuff && HornofWinter.IsSpellUsable)
            {
                HornofWinter.Launch();
            }

            if (_mySettings.UseDeathsAdvance && DeathsAdvance.KnownSpell && !ObjectManager.Me.InCombat && ObjectManager.Me.GetMove && DeathsAdvance.IsSpellUsable)
            {
                DeathsAdvance.Launch();
            }

            if (_mySettings.UseAlchFlask && ItemsManager.GetItemCountByIdLUA(75525) > 0 && !ObjectManager.Me.HaveBuff(79638) && !ObjectManager.Me.HaveBuff(79640) &&
                !ObjectManager.Me.HaveBuff(79639)
                && !ItemsManager.IsItemOnCooldown(75525))
            {
                ItemsManager.UseItem(75525);
            }
        }

        private void AvoidMelee()
        {
            if (ObjectManager.Target.GetDistance < _mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
            {
                Logging.WriteFight("Too Close. Moving Back");
                var maxTimeTimer = new Timer(1000*2);
                MovementsAction.MoveBackward(true);
                while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                {
                    Thread.Sleep(300);
                }
                MovementsAction.MoveBackward(false);
                if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
                {
                    MovementsAction.MoveForward(true);
                    Thread.Sleep(1000);
                    MovementsAction.MoveForward(false);
                    MovementManager.Face(ObjectManager.Target.Position);
                }
            }
        }

        private void DefenseCycle()
        {
            if (_mySettings.UseIceboundFortitude && IceboundFortitude.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseIceboundFortitudeAtPercentage &&
                IceboundFortitude.IsSpellUsable)
            {
                IceboundFortitude.Launch();
                _onCd = new Timer(1000*12);
                return;
            }

            if (_mySettings.UseAsphyxiate && Strangulate.KnownSpell && Strangulate.IsHostileDistanceGood && ObjectManager.Me.HealthPercent <= _mySettings.UseAsphyxiateAtPercentage &&
                Strangulate.IsSpellUsable)
            {
                Strangulate.Launch();
                _onCd = new Timer(1000*5);
                return;
            }

            if (_mySettings.UseStoneform && Stoneform.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable)
            {
                Stoneform.Launch();
                _onCd = new Timer(1000*8);
                return;
            }

            if (_mySettings.UseWarStomp && WarStomp.KnownSpell && ObjectManager.Target.GetDistance < 8 && ObjectManager.Me.HealthPercent <= _mySettings.UseWarStompAtPercentage &&
                WarStomp.IsSpellUsable)
            {
                WarStomp.Launch();
                _onCd = new Timer(1000*2);
                return;
            }

            if (_mySettings.UseRemorselessWinter && RemorselessWinter.KnownSpell && ObjectManager.Target.GetDistance < 8
                && (ObjectManager.Me.HealthPercent <= _mySettings.UseRemorselessWinterAtPercentage || ObjectManager.GetNumberAttackPlayer() > 1) && RemorselessWinter.IsSpellUsable)
            {
                RemorselessWinter.Launch();
                _onCd = new Timer(1000*8);
                }
        }

        private void Heal()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (_mySettings.UseGiftoftheNaaru && GiftoftheNaaru.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseGiftoftheNaaruAtPercentage && GiftoftheNaaru.IsSpellUsable)
            {
                GiftoftheNaaru.Launch();
                return;
            }

            if (_mySettings.UseDeathPact && DeathPact.KnownSpell && (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0)
                && ObjectManager.Me.HealthPercent <= _mySettings.UseDeathPactAtPercentage && DeathPact.IsSpellUsable)
            {
                DeathPact.Launch();
                return;
            }

            if (_mySettings.UseDeathPact && DeathPact.KnownSpell && RaiseDead.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseDeathPactAtPercentage &&
                RaiseDead.IsSpellUsable && DeathPact.IsSpellUsable)
            {
                for (int i = 0; i < 3; i++)
                {
                    RaiseDead.Launch();
                    DeathPact.Launch();
                    if (!DeathPact.IsSpellUsable)
                        break;
                }
                return;
            }

            if (_mySettings.UseLichborne && Lichborne.KnownSpell && DeathCoil.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseLichborneAtPercentage
                && ObjectManager.Me.RunicPower > 39 && Lichborne.IsSpellUsable)
            {
                Lichborne.Launch();
                return;
            }

            if (_mySettings.UseConversion && Conversion.KnownSpell && ObjectManager.Me.RunicPower > 10 && ObjectManager.Me.HealthPercent <= _mySettings.UseConversionAtPercentage &&
                Conversion.IsSpellUsable)
            {
                Conversion.Launch();
                while (ObjectManager.Me.IsCast && (ObjectManager.Me.RunicPower > 0 || ObjectManager.Me.HealthPercent < 100))
                {
                    Thread.Sleep(200);
                }
                return;
            }

            if (_mySettings.UseDeathSiphon && DeathSiphon.KnownSpell && DeathSiphon.IsHostileDistanceGood && ObjectManager.Me.HealthPercent <= _mySettings.UseDeathSiphonAtPercentage &&
                DeathSiphon.IsSpellUsable)
            {
                DeathSiphon.Launch();
                return;
            }
            if (_mySettings.UseDeathStrike && DeathStrike.KnownSpell && DeathStrike.IsHostileDistanceGood && ObjectManager.Target.IsValid && ObjectManager.Target.IsAlive
                && ObjectManager.Me.HealthPercent <= _mySettings.UseDeathStrikeAtPercentage && DeathStrike.IsSpellUsable)
            {
                DeathStrike.Launch();
            }
        }

        private void Decast()
        {
            if (_mySettings.UseMindFreeze && MindFreeze.KnownSpell && MindFreeze.IsHostileDistanceGood && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && ObjectManager.Me.HealthPercent <= _mySettings.UseMindFreezeAtPercentage && MindFreeze.IsSpellUsable)
            {
                MindFreeze.Launch();
                return;
            }

            if (_mySettings.UseArcaneTorrentForDecast && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8 &&
                ObjectManager.Me.HealthPercent <= _mySettings.UseArcaneTorrentForDecastAtPercentage
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && ArcaneTorrent.IsSpellUsable)
            {
                ArcaneTorrent.Launch();
                return;
            }

            if (_mySettings.UseAntiMagicShell && AntiMagicShell.KnownSpell && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && ObjectManager.Me.HealthPercent <= _mySettings.UseAntiMagicShellAtPercentage && AntiMagicShell.IsSpellUsable)
            {
                AntiMagicShell.Launch();
                return;
            }

            if (Strangulate.KnownSpell && Strangulate.IsHostileDistanceGood && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && (_mySettings.UseStrangulate && ObjectManager.Me.HealthPercent <= _mySettings.UseStrangulateAtPercentage
                    || _mySettings.UseAsphyxiate && ObjectManager.Me.HealthPercent <= _mySettings.UseAsphyxiateAtPercentage) && Strangulate.IsSpellUsable)
            {
                Strangulate.Launch();
                return;
            }

            if (_mySettings.UseAntiMagicZone && AntiMagicZone.KnownSpell && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && ObjectManager.Me.HealthPercent <= _mySettings.UseAntiMagicZoneAtPercentage && AntiMagicZone.IsSpellUsable)
            {
                SpellManager.CastSpellByIDAndPosition(51052, ObjectManager.Me.Position);
                return;
            }

            if (_mySettings.UseChainsofIce && ChainsofIce.KnownSpell && ChainsofIce.IsHostileDistanceGood && ObjectManager.Target.GetMove && !ChainsofIce.TargetHaveBuff &&
                ChainsofIce.IsSpellUsable)
            {
                ChainsofIce.Launch();
                return;
            }
        }

        private void DPSBurst()
        {
            if (_mySettings.UseTrinketOne && !ItemsManager.IsItemOnCooldown(_firstTrinket.Entry) && ItemsManager.IsUsableItemById(_firstTrinket.Entry))
            {
                ItemsManager.UseItem(_firstTrinket.Name);
                Logging.WriteFight("Use First Trinket Slot");
            }

            if (_mySettings.UseTrinketTwo && !ItemsManager.IsItemOnCooldown(_secondTrinket.Entry) && ItemsManager.IsUsableItemById(_secondTrinket.Entry))
            {
                ItemsManager.UseItem(_secondTrinket.Name);
                Logging.WriteFight("Use Second Trinket Slot");
                return;
            }
            if (_mySettings.UseBerserking && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30 && Berserking.IsSpellUsable)
            {
                Berserking.Launch();
                return;
            }
            if (_mySettings.UseBloodFury && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 30 && BloodFury.IsSpellUsable)
            {
                BloodFury.Launch();
                return;
            }
            if (_mySettings.UseLifeblood && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30 && Lifeblood.IsSpellUsable)
            {
                Lifeblood.Launch();
                return;
            }
            if (_mySettings.UseBloodTap && BloodTap.KnownSpell && ObjectManager.Target.GetDistance < 30 && BloodTap.IsSpellUsable)
            {
                BloodTap.Launch();
                return;
            }
            if (_mySettings.UseEngGlove && _engineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30)
            {
                Logging.WriteFight("Use Engineering Gloves.");
                Lua.RunMacroText("/use 10");
                _engineeringTimer = new Timer(1000*60);
                return;
            }
            if (_mySettings.UseUnholyFrenzy && UnholyFrenzy.KnownSpell && ObjectManager.Target.GetDistance < 30 && UnholyFrenzy.IsSpellUsable)
            {
                UnholyFrenzy.Launch();
            }
            if (_mySettings.UseSummonGargoyle && SummonGargoyle.KnownSpell && ObjectManager.Target.GetDistance < 30 && SummonGargoyle.IsSpellUsable)
            {
                SummonGargoyle.Launch();
            }
            if (DarkTransformationTimer.IsReady && DT == 0)
            {
                DT++;
            }
            if (_mySettings.UseDarkTransformation && DarkTransformation.KnownSpell && DT == 1 && DarkTransformation.IsSpellUsable)
            {
                DarkTransformation.Launch();
                DarkTransformationTimer = new Timer(1000*30);
                DT--;
            }
        }

        private void DPSCycle()
        {
            if (DeathCoil.KnownSpell && Lichborne.HaveBuff && ObjectManager.Me.HealthPercent < 85 && DeathCoil.IsSpellUsable)
            {
                Lua.RunMacroText("/target Player");
                DeathCoil.Launch();
                return;
            }

            if (_mySettings.UsePlagueLeech && _mySettings.UseOutbreak && PlagueLeech.KnownSpell && Outbreak.KnownSpell && PlagueLeech.IsHostileDistanceGood
                && BloodPlague.TargetHaveBuff && FrostFever.TargetHaveBuff && Outbreak.IsSpellUsable && PlagueLeech.IsSpellUsable)
            {
                PlagueLeech.Launch();
                Thread.Sleep(400);
                if (Outbreak.IsHostileDistanceGood && Outbreak.IsSpellUsable)
                {
                    Outbreak.Launch();
                    return;
                }
            }

            if (_mySettings.UseUnholyBlight && UnholyBlight.KnownSpell && ObjectManager.Target.GetDistance < 9 && (!BloodPlague.TargetHaveBuff || !FrostFever.TargetHaveBuff) &&
                UnholyBlight.IsSpellUsable)
            {
                UnholyBlight.Launch();
                return;
            }

            if (_mySettings.UseOutbreak && Outbreak.KnownSpell && Outbreak.IsHostileDistanceGood && (!BloodPlague.TargetHaveBuff || !FrostFever.TargetHaveBuff) && Outbreak.IsSpellUsable)
            {
                Outbreak.Launch();
                return;
            }

            if (_mySettings.UsePlagueStrike && PlagueStrike.KnownSpell && PlagueStrike.IsHostileDistanceGood && (!BloodPlague.TargetHaveBuff || !FrostFever.TargetHaveBuff)
                && !Outbreak.IsSpellUsable && !UnholyBlight.IsSpellUsable && PlagueStrike.IsSpellUsable)
            {
                PlagueStrike.Launch();
                return;
            }

            if (_mySettings.UsePestilence && (!RoilingBlood.KnownSpell || !_mySettings.UseBloodBoil) && Pestilence.KnownSpell && Pestilence.IsHostileDistanceGood
                && FrostFever.TargetHaveBuff && BloodPlague.TargetHaveBuff && ObjectManager.GetNumberAttackPlayer() > 2 && Pestilence.IsSpellUsable)
            {
                Pestilence.Launch();
                PestilenceTimer = new Timer(1000*30);
                return;
            }

            if (_mySettings.UseDarkTransformation && DarkTransformationTimer.IsReady && DT == 1)
            {
                if (_mySettings.UseDeathCoil && DeathCoil.KnownSpell && DeathCoil.IsHostileDistanceGood && DeathCoil.IsSpellUsable)
                {
                    if ((_mySettings.UseLichborne && ObjectManager.Me.HealthPercent <= _mySettings.UseLichborneAtPercentage && Lichborne.KnownSpell)
                        || (_mySettings.UseConversion && ObjectManager.Me.HealthPercent <= _mySettings.UseConversionAtPercentage && Conversion.KnownSpell))
                        return;
                    else
                    {
                        DeathCoil.Launch();
                        return;
                    }
                }
            }

            if (ObjectManager.GetNumberAttackPlayer() > 2)
            {
                if (_mySettings.UseDeathandDecay && DeathandDecay.KnownSpell && DeathandDecay.IsHostileDistanceGood && ObjectManager.GetNumberAttackPlayer() > 2 &&
                    DeathandDecay.IsSpellUsable)
                {
                    SpellManager.CastSpellByIDAndPosition(43265, ObjectManager.Target.Position);
                    return;
                }

                if (_mySettings.UseArmyoftheDead && ArmyoftheDead.KnownSpell && ObjectManager.GetNumberAttackPlayer() > 3 && ArmyoftheDead.IsSpellUsable)
                {
                    ArmyoftheDead.Launch();
                    Thread.Sleep(4000);
                    return;
                }

                if (_mySettings.UseBloodBoil && BloodBoil.KnownSpell && ObjectManager.Target.GetDistance < 9 && ObjectManager.GetNumberAttackPlayer() > 2 && BloodBoil.IsSpellUsable)
                {
                    BloodBoil.Launch();
                    return;
                }
            }

            if (_mySettings.UseSoulReaper && SoulReaper.KnownSpell && SoulReaper.IsHostileDistanceGood && ObjectManager.Target.HealthPercent < 35
                && (ObjectManager.Me.HealthPercent > _mySettings.UseDeathStrikeAtPercentage || !_mySettings.UseDeathStrike) && SoulReaper.IsSpellUsable)
            {
                SoulReaper.Launch();
                return;
            }

            if (_mySettings.UseScourgeStrike && ScourgeStrike.KnownSpell && ScourgeStrike.IsHostileDistanceGood && ObjectManager.Me.RunicPowerPercentage < 90 &&
                ScourgeStrike.IsSpellUsable)
            {
                ScourgeStrike.Launch();
                return;
            }

            if (_mySettings.UseFesteringStrike && FesteringStrike.KnownSpell && FesteringStrike.IsHostileDistanceGood && ObjectManager.Me.RunicPowerPercentage < 90 &&
                FesteringStrike.IsSpellUsable)
            {
                FesteringStrike.Launch();
                return;
            }

            if (_mySettings.UseDeathCoil && DeathCoil.KnownSpell && DeathCoil.IsHostileDistanceGood && (ObjectManager.Me.RunicPowerPercentage > 89 || ObjectManager.Me.HaveBuff(81340)) &&
                DeathCoil.IsSpellUsable)
            {
                DeathCoil.Launch();
                return;
            }

            if (_mySettings.UseHornofWinter && HornofWinter.KnownSpell && ObjectManager.Me.RunicPowerPercentage < 90 && HornofWinter.IsSpellUsable)
            {
                HornofWinter.Launch();
                return;
            }

            if (_mySettings.UseArcaneTorrentForResource && ArcaneTorrent.KnownSpell && ObjectManager.Me.RunicPowerPercentage < 85 && ArcaneTorrent.IsSpellUsable)
            {
                ArcaneTorrent.Launch();
                return;
            }

            if (_mySettings.UseEmpowerRuneWeapon && EmpowerRuneWeapon.KnownSpell && ObjectManager.Me.RunicPowerPercentage < 75 && EmpowerRuneWeapon.IsSpellUsable)
            {
                EmpowerRuneWeapon.Launch();
                return;
            }

            if (_mySettings.UseDeathCoil && DeathCoil.KnownSpell && DeathCoil.IsHostileDistanceGood && DeathCoil.IsSpellUsable)
            {
                DeathCoil.Launch();
                return;
            }
        }

        private void Patrolling()
        {
            if (!ObjectManager.Me.IsMounted)
            {
                Buff();
                Heal();
            }
        }

        #region Nested type: DeathknightUnholySettings

        [Serializable]
        public class DeathknightUnholySettings : Settings
        {
            public bool DoAvoidMelee = false;
            public int DoAvoidMeleeDistance = 0;
            public bool UseAlchFlask = true;
            public bool UseAntiMagicShell = true;
            public int UseAntiMagicShellAtPercentage = 100;
            public bool UseAntiMagicZone = true;
            public int UseAntiMagicZoneAtPercentage = 100;
            public bool UseArcaneTorrentForDecast = true;
            public int UseArcaneTorrentForDecastAtPercentage = 100;
            public bool UseArcaneTorrentForResource = true;
            public bool UseArmyoftheDead = true;
            public bool UseAsphyxiate = true;
            public int UseAsphyxiateAtPercentage = 90;
            public bool UseBerserking = true;
            public bool UseBloodBoil = true;
            public bool UseBloodFury = true;
            public bool UseBloodPresence = true;
            public int UseBloodPresenceAtPercentage = 50;
            public bool UseBloodTap = true;
            public bool UseChainsofIce = false;
            public bool UseConversion = true;
            public int UseConversionAtPercentage = 45;
            public bool UseDarkTransformation = true;
            public bool UseDeathCoil = true;
            public bool UseDeathGrip = true;
            public bool UseDeathPact = true;
            public int UseDeathPactAtPercentage = 55;
            public bool UseDeathSiphon = true;
            public int UseDeathSiphonAtPercentage = 80;
            public bool UseDeathStrike = true;
            public int UseDeathStrikeAtPercentage = 80;
            public bool UseDeathandDecay = true;
            public bool UseDeathsAdvance = true;
            public bool UseEmpowerRuneWeapon = true;
            public bool UseEngGlove = true;
            public bool UseFesteringStrike = true;
            public bool UseFrostPresence = true;
            public bool UseGiftoftheNaaru = true;
            public int UseGiftoftheNaaruAtPercentage = 80;
            public bool UseHornofWinter = true;
            public bool UseIceboundFortitude = true;
            public int UseIceboundFortitudeAtPercentage = 80;
            public bool UseIcyTouch = true;
            public bool UseLichborne = true;
            public int UseLichborneAtPercentage = 45;
            public bool UseLifeblood = true;
            public bool UseLowCombat = true;
            public bool UseMindFreeze = true;
            public int UseMindFreezeAtPercentage = 100;
            public bool UseOutbreak = true;
            public bool UsePathofFrost = true;
            public bool UsePestilence = true;
            public bool UsePlagueLeech = true;
            public bool UsePlagueStrike = true;
            public bool UseRaiseDead = true;
            public bool UseRemorselessWinter = true;
            public int UseRemorselessWinterAtPercentage = 70;
            public bool UseScourgeStrike = true;
            public bool UseSoulReaper = true;
            public bool UseStoneform = true;
            public int UseStoneformAtPercentage = 80;
            public bool UseStrangulate = true;
            public int UseStrangulateAtPercentage = 100;
            public bool UseSummonGargoyle = true;
            public bool UseTrinketOne = true;
            public bool UseTrinketTwo = true;
            public bool UseUnholyBlight = true;
            public bool UseUnholyFrenzy = true;
            public bool UseUnholyPresence = true;
            public bool UseWarStomp = true;
            public int UseWarStompAtPercentage = 80;

            public DeathknightUnholySettings()
            {
                ConfigWinForm(new Point(500, 400), "Deathknight Unholy Settings");
                /* Professions & Racials */
                AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials");
                AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
                AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
                AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
                AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials", "AtPercentage");
                /* Deathknight Presence & Buffs */
                AddControlInWinForm("Use Frost Presence", "UseFrostPresence", "Deathknight Presence & Buffs");
                AddControlInWinForm("Use Blood Presence", "UseBloodPresence", "Deathknight Presence & Buffs", "AtPercentage");
                AddControlInWinForm("Use Horn of Winter", "UseHornofWinter", "Deathknight Presence & Buffs");
                AddControlInWinForm("Use Path of Frost", "UsePathofFrost", "Deathknight Presence & Buffs");
                AddControlInWinForm("Use Unholy Presence", "UseUnholyPresence", "Deathknight Presence & Buffs");
                /* Offensive Spell */
                AddControlInWinForm("Use Blood Boil", "UseBloodBoil", "Offensive Spell");
                AddControlInWinForm("Use Dark Transformation", "UseDarkTransformation", "Offensive Spell");
                AddControlInWinForm("Use Death Coil", "UseDeathCoil", "Offensive Spell");
                AddControlInWinForm("Use Death and Decay", "UseDeathandDecay", "Offensive Spell");
                AddControlInWinForm("Use Festering Strike", "UseFesteringStrike", "Offensive Spell");
                AddControlInWinForm("Use Icy Touch", "UseIcyTouch", "Offensive Spell");
                AddControlInWinForm("Use Plague Leech", "UsePlagueLeech", "Offensive Spell");
                AddControlInWinForm("Use Plague Strike", "UsePlagueStrike", "Offensive Spell");
                AddControlInWinForm("Use Soul Reaper", "UseSoulReaper", "Offensive Spell");
                AddControlInWinForm("Use Scourge Strike", "UseScourgeStrike", "Offensive Spell");
                AddControlInWinForm("Use Unholy Blight", "UseUnholyBlight", "Offensive Spell");
                /* Offensive Cooldown */
                AddControlInWinForm("Use Blood Tap", "UseBloodTap", "Offensive Cooldown");
                AddControlInWinForm("Use Death Grip", "UseDeathGrip", "Offensive Cooldown");
                AddControlInWinForm("Use Empower Rune Weapon", "UseEmpowerRuneWeapon", "Offensive Cooldown");
                AddControlInWinForm("Use Outbreak", "UseOutbreak", "Offensive Cooldown");
                AddControlInWinForm("Use Pestilence", "UsePestilence", "Offensive Cooldown");
                AddControlInWinForm("Use Raise Dead", "UseRaiseDead", "Offensive Cooldown");
                AddControlInWinForm("Use Summon Gargoyle", "UseSummonGargoyle", "Offensive Cooldown");
                AddControlInWinForm("Use Unholy Frenzy", "UseUnholyFrenzy", "Offensive Cooldown");
                /* Defensive Cooldown */
                AddControlInWinForm("Use Anti-Magic Shell", "UseAntiMagicShell", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Anti-Magic Zone", "UseAntiMagicZone", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Army of the Dead", "UseArmyoftheDead", "Defensive Cooldown");
                AddControlInWinForm("Use Asphyxiate", "UseAsphyxiate", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Chains of Ice", "UseChainsofIce", "Defensive Cooldown");
                AddControlInWinForm("Use Death's Advance", "UseDeathsAdvance", "Defensive Cooldown");
                AddControlInWinForm("Use Icebound Fortitude", "UseIceboundFortitude", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Mind Freeze", "UseMindFreeze", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Remorseless Winter", "UseRemorseless Winter", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Strangulate", "UseStrangulate", "Defensive Cooldown", "AtPercentage");
                /* Healing Spell */
                AddControlInWinForm("Use Conversion", "UseConversion", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Death Pact", "UseDeathPact", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Death Siphon", "UseDeathSiphon", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Death Strike", "UseDeathStrike", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Lichborne", "UseLichborne", "Healing Spell", "AtPercentage");
                /* Game Settings */
                AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
                AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
                AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
                AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
                AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
                AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
                AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
            }

            public static DeathknightUnholySettings currentSetting { get; set; }

            public static DeathknightUnholySettings GetSettings()
            {
                string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Deathknight_Unholy.xml";
                if (File.Exists(currentSettingsFile))
                {
                    return
                        currentSetting = Load<DeathknightUnholySettings>(currentSettingsFile);
                }
                return new DeathknightUnholySettings();
            }
        }

        #endregion
    }

    public class DeathknightFrost
    {
        private readonly DeathknightFrostSettings _mySettings = DeathknightFrostSettings.GetSettings();

        #region General Timers & Variables

        private readonly WoWItem _firstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
        private readonly WoWItem _secondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);
        public int DecastHP = 100;
        public int DefenseHP = 100;
        private Timer _engineeringTimer = new Timer(0);
        public int HealHP = 100;
        public int LC = 0;
        private Timer _onCd = new Timer(0);

        #endregion

        #region Professions & Racials

        public readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
        public readonly Spell Berserking = new Spell("Berserking");
        public readonly Spell BloodFury = new Spell("Blood Fury");
        public readonly Spell Engineering = new Spell("Engineering");
        public readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
        public readonly Spell Lifeblood = new Spell("Lifeblood");
        public readonly Spell Stoneform = new Spell("Stoneform");
        public readonly Spell WarStomp = new Spell("War Stomp");

        #endregion

        #region Deathknight Presence & Buffs

        public readonly Spell BloodPlague = new Spell("Blood Plague");
        public readonly Spell BloodPresence = new Spell("Blood Presence");
        public readonly Spell FreezingFog = new Spell(59052);
        public readonly Spell FrostFever = new Spell("Frost Fever");
        public readonly Spell FrostPresence = new Spell("Frost Presence");
        public readonly Spell HornofWinter = new Spell("Horn of Winter");
        public readonly Spell PathofFrost = new Spell("Path of Frost");
        public readonly Spell RoilingBlood = new Spell("Roiling Blood");
        public readonly Spell UnholyPresence = new Spell("Unholy Presence");
        private Timer BloodPlagueTimer = new Timer(0);
        private Timer FrostFeverTimer = new Timer(0);
        private Timer PathofFrostBuffTimer = new Timer(0);
        private Timer PathofFrostTimer = new Timer(0);

        #endregion

        #region Offensive Spell

        public readonly Spell BloodBoil = new Spell("Blood Boil");
        public readonly Spell BloodStrike = new Spell("Blood Strike");
        public readonly Spell DeathCoil = new Spell("Death Coil");
        public readonly Spell DeathandDecay = new Spell("Death and Decay");
        public readonly Spell FrostStrike = new Spell("Frost Strike");
        public readonly Spell HowlingBlast = new Spell("Howling Blast");
        public readonly Spell IcyTouch = new Spell("Icy Touch");
        public readonly Spell Obliterate = new Spell("Obliterate");
        public readonly Spell PlagueLeech = new Spell("Plague Leech");
        public readonly Spell PlagueStrike = new Spell("Plague Strike");
        public readonly Spell SoulReaper = new Spell("Soul Reaper");
        public readonly Spell UnholyBlight = new Spell("Unholy Blight");

        #endregion

        #region Offensive Cooldown

        public readonly Spell BloodTap = new Spell("Blood Tap");
        public readonly Spell DeathGrip = new Spell("Death Grip");
        public readonly Spell EmpowerRuneWeapon = new Spell("Empower Rune Weapon");
        public readonly Spell Outbreak = new Spell("Outbreak");
        public readonly Spell Pestilence = new Spell("Pestilence");
        public readonly Spell PillarofFrost = new Spell("Pillar of Frost");
        public readonly Spell RaiseDead = new Spell("Raise Dead");
        private Timer PestilenceTimer = new Timer(0);

        #endregion

        #region Defensive Cooldown

        public readonly Spell AntiMagicShell = new Spell("Anti-Magic Shell");
        public readonly Spell AntiMagicZone = new Spell("Anti-Magic Zone");
        public readonly Spell ArmyoftheDead = new Spell("Army of the Dead");
        public readonly Spell Asphyxiate = new Spell("Asphyxiate");
        public readonly Spell ChainsofIce = new Spell("Chains of Ice");
        public readonly Spell DeathsAdvance = new Spell("Death's Advance");
        public readonly Spell IceboundFortitude = new Spell("Icebound Fortitude");
        public readonly Spell MindFreeze = new Spell("Mind Freeze");
        public readonly Spell RemorselessWinter = new Spell("Remorseless Winter");
        public readonly Spell Strangulate = new Spell("Strangulate");

        #endregion

        #region Healing Spell

        public readonly Spell Conversion = new Spell("Conversion");
        public readonly Spell DeathPact = new Spell("Death Pact");
        public readonly Spell DeathSiphon = new Spell("Death Siphon");
        public readonly Spell DeathStrike = new Spell("Death Strike");
        public readonly Spell Lichborne = new Spell("Lichborne");

        #endregion

        public DeathknightFrost()
        {
            Main.InternalRange = 5.0f;
            UInt64 lastTarget = 0;
            LowHP();

            while (Main.InternalLoop)
            {
                try
                {
                    if (!ObjectManager.Me.IsDeadMe)
                    {
                        BuffPath();
                        if (!ObjectManager.Me.IsMounted)
                        {
                            if (Fight.InFight && ObjectManager.Me.Target > 0)
                            {
                                if (ObjectManager.Me.Target != lastTarget && (DeathGrip.IsHostileDistanceGood || IcyTouch.IsHostileDistanceGood))
                                {
                                    Pull();
                                    lastTarget = ObjectManager.Me.Target;
                                }

                                if (_mySettings.UseLowCombat && ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84)
                                {
                                    LC = 1;
                                    if (ObjectManager.Target.GetDistance < 30)
                                    {
                                        LowCombat();
                                    }
                                }
                                else
                                {
                                    LC = 0;
                                    if (ObjectManager.Target.GetDistance < 30)
                                    {
                                        Combat();
                                    }
                                }
                                break;
                            }
                            if (!ObjectManager.Me.IsCast)
                            {
                                Patrolling();
                            }
                        }
                    }
                    else
                    {
                        Thread.Sleep(500);
                    }
                }
                catch
                {
                }
                Thread.Sleep(250);
            }
        }

        private void LowHP()
        {
            if (_mySettings.UseIceboundFortitudeAtPercentage < DefenseHP)
            {
                DefenseHP = _mySettings.UseIceboundFortitudeAtPercentage;
            }

            if (_mySettings.UseAsphyxiateAtPercentage < DefenseHP)
            {
                DefenseHP = _mySettings.UseAsphyxiateAtPercentage;
            }

            if (_mySettings.UseStoneformAtPercentage < DefenseHP)
            {
                DefenseHP = _mySettings.UseStoneformAtPercentage;
            }

            if (_mySettings.UseWarStompAtPercentage < DefenseHP)
            {
                DefenseHP = _mySettings.UseWarStompAtPercentage;
            }

            if (_mySettings.UseRemorselessWinterAtPercentage < DefenseHP)
            {
                DefenseHP = _mySettings.UseRemorselessWinterAtPercentage;
            }

            if (_mySettings.UseGiftoftheNaaruAtPercentage < HealHP)
            {
                HealHP = _mySettings.UseGiftoftheNaaruAtPercentage;
            }

            if (_mySettings.UseDeathPactAtPercentage < HealHP)
            {
                HealHP = _mySettings.UseDeathPactAtPercentage;
            }

            if (_mySettings.UseLichborneAtPercentage < HealHP)
            {
                HealHP = _mySettings.UseLichborneAtPercentage;
            }

            if (_mySettings.UseConversionAtPercentage < HealHP)
            {
                HealHP = _mySettings.UseConversionAtPercentage;
            }

            if (_mySettings.UseDeathSiphonAtPercentage < HealHP)
            {
                HealHP = _mySettings.UseDeathSiphonAtPercentage;
            }

            if (_mySettings.UseDeathStrikeAtPercentage < HealHP)
            {
                HealHP = _mySettings.UseDeathStrikeAtPercentage;
            }

            if (_mySettings.UseMindFreezeAtPercentage < DecastHP)
            {
                DecastHP = _mySettings.UseMindFreezeAtPercentage;
            }

            if (_mySettings.UseArcaneTorrentForDecastAtPercentage < DecastHP)
            {
                DecastHP = _mySettings.UseArcaneTorrentForDecastAtPercentage;
            }

            if (_mySettings.UseAntiMagicShellAtPercentage < DecastHP)
            {
                DecastHP = _mySettings.UseAntiMagicShellAtPercentage;
            }

            if (_mySettings.UseStrangulateAtPercentage < DecastHP)
            {
                DecastHP = _mySettings.UseStrangulateAtPercentage;
            }

            if (_mySettings.UseAsphyxiateAtPercentage < DecastHP)
            {
                DecastHP = _mySettings.UseAsphyxiateAtPercentage;
            }

            if (_mySettings.UseAntiMagicZoneAtPercentage < DecastHP)
            {
                DecastHP = _mySettings.UseAntiMagicZoneAtPercentage;
            }
        }

        private void BuffPath()
        {
            if (_mySettings.UsePathofFrost && PathofFrost.KnownSpell && !ObjectManager.Me.InCombat && (!PathofFrost.HaveBuff || PathofFrostTimer.IsReady) && PathofFrostBuffTimer.IsReady &&
                PathofFrost.IsSpellUsable)
            {
                PathofFrost.Launch();
                PathofFrostBuffTimer = new Timer(1000*10);
                PathofFrostTimer = new Timer(1000*60*9.5);
                }
        }

        private void Pull()
        {
            if (_mySettings.UseDeathGrip && DeathGrip.KnownSpell && DeathGrip.IsHostileDistanceGood && ObjectManager.Target.GetDistance > Main.InternalRange && DeathGrip.IsSpellUsable)
            {
                DeathGrip.Launch();
                MovementManager.StopMove();
                return;
            }

            if (_mySettings.UseIcyTouch && IcyTouch.KnownSpell && IcyTouch.IsHostileDistanceGood && IcyTouch.IsSpellUsable)
            {
                IcyTouch.Launch();
                FrostFeverTimer = new Timer(1000*27);
                return;
            }
        }

        private void LowCombat()
        {
            Buff();

            if (_mySettings.DoAvoidMelee)
            {
                AvoidMelee();
            }

            if (_onCd.IsReady)
            {
                DefenseCycle();
            }

            Heal();

            if (_mySettings.UseHowlingBlast && HowlingBlast.KnownSpell && HowlingBlast.IsHostileDistanceGood && HowlingBlast.IsSpellUsable)
            {
                HowlingBlast.Launch();
                return;
            }

            // Blizzard API Calls for Frost Strike using Blood Strike Function
            if (_mySettings.UseFrostStrike && BloodStrike.KnownSpell && BloodStrike.IsHostileDistanceGood && BloodStrike.IsSpellUsable)
            {
                BloodStrike.Launch();
                return;
            }

            if (_mySettings.UseDeathCoil && DeathCoil.KnownSpell && ObjectManager.Target.GetDistance > Main.InternalRange && DeathCoil.IsSpellUsable)
            {
                DeathCoil.Launch();
                return;
            }

            if (_mySettings.UsePlagueStrike && PlagueStrike.KnownSpell && PlagueStrike.IsHostileDistanceGood && PlagueStrike.IsSpellUsable)
            {
                PlagueStrike.Launch();
                return;
            }

            if (_mySettings.UseBloodBoil && BloodBoil.KnownSpell && ObjectManager.Target.GetDistance < 10 && BloodBoil.IsSpellUsable)
            {
                BloodBoil.Launch();
                return;
            }
        }

        private void Combat()
        {
            Buff();

            if (_mySettings.DoAvoidMelee)
            {
                AvoidMelee();
            }

            DPSCycle();

            if (_onCd.IsReady && ObjectManager.Me.HealthPercent <= DefenseHP)
            {
                DefenseCycle();
            }

            if (ObjectManager.Me.HealthPercent <= HealHP)
            {
                Heal();
            }

            if (ObjectManager.Me.HealthPercent <= DecastHP || (_mySettings.UseChainsofIce && ObjectManager.Target.GetMove))
            {
                Decast();
            }

            DPSBurst();
            DPSCycle();
        }

        private void Buff()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (_mySettings.UseFrostPresence && LC != 1 && FrostPresence.KnownSpell && !FrostPresence.HaveBuff &&
                ObjectManager.Me.HealthPercent > _mySettings.UseBloodPresenceAtPercentage + 10
                && FrostPresence.IsSpellUsable)
            {
                FrostPresence.Launch();
            }

            if (_mySettings.UseUnholyPresence && _mySettings.UseLowCombat && UnholyPresence.KnownSpell && !UnholyPresence.HaveBuff && LC == 1
                && ObjectManager.Me.HealthPercent > _mySettings.UseBloodPresenceAtPercentage + 10 && UnholyPresence.IsSpellUsable)
            {
                UnholyPresence.Launch();
            }

            if (_mySettings.UseBloodPresence && BloodPresence.KnownSpell && !BloodPresence.HaveBuff && ObjectManager.Me.HealthPercent <= _mySettings.UseBloodPresenceAtPercentage &&
                BloodPresence.IsSpellUsable)
            {
                BloodPresence.Launch();
            }

            if (_mySettings.UseHornofWinter && HornofWinter.KnownSpell && !HornofWinter.HaveBuff && HornofWinter.IsSpellUsable)
            {
                HornofWinter.Launch();
            }

            if (_mySettings.UseDeathsAdvance && DeathsAdvance.KnownSpell && !ObjectManager.Me.InCombat && ObjectManager.Me.GetMove && DeathsAdvance.IsSpellUsable)
            {
                DeathsAdvance.Launch();
            }

            if (_mySettings.UseAlchFlask && ItemsManager.GetItemCountByIdLUA(75525) > 0 && !ObjectManager.Me.HaveBuff(79638) && !ObjectManager.Me.HaveBuff(79640) &&
                !ObjectManager.Me.HaveBuff(79639)
                && !ItemsManager.IsItemOnCooldown(75525))
            {
                ItemsManager.UseItem(75525);
            }
        }

        private void AvoidMelee()
        {
            if (ObjectManager.Target.GetDistance < _mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
            {
                Logging.WriteFight("Too Close. Moving Back");
                var maxTimeTimer = new Timer(1000*2);
                MovementsAction.MoveBackward(true);
                while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                {
                    Thread.Sleep(300);
                }
                MovementsAction.MoveBackward(false);
                if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
                {
                    MovementsAction.MoveForward(true);
                    Thread.Sleep(1000);
                    MovementsAction.MoveForward(false);
                    MovementManager.Face(ObjectManager.Target.Position);
                }
            }
        }

        private void DefenseCycle()
        {
            if (_mySettings.UseIceboundFortitude && IceboundFortitude.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseIceboundFortitudeAtPercentage &&
                IceboundFortitude.IsSpellUsable)
            {
                IceboundFortitude.Launch();
                _onCd = new Timer(1000*12);
                return;
            }

            if (_mySettings.UseAsphyxiate && Strangulate.KnownSpell && Strangulate.IsHostileDistanceGood && ObjectManager.Me.HealthPercent <= _mySettings.UseAsphyxiateAtPercentage &&
                Strangulate.IsSpellUsable)
            {
                Strangulate.Launch();
                _onCd = new Timer(1000*5);
                return;
            }

            if (_mySettings.UseStoneform && Stoneform.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable)
            {
                Stoneform.Launch();
                _onCd = new Timer(1000*8);
                return;
            }

            if (_mySettings.UseWarStomp && WarStomp.KnownSpell && ObjectManager.Target.GetDistance < 8 && ObjectManager.Me.HealthPercent <= _mySettings.UseWarStompAtPercentage &&
                WarStomp.IsSpellUsable)
            {
                WarStomp.Launch();
                _onCd = new Timer(1000*2);
                return;
            }

            if (_mySettings.UseRemorselessWinter && RemorselessWinter.KnownSpell && ObjectManager.Target.GetDistance < 8
                && (ObjectManager.Me.HealthPercent <= _mySettings.UseRemorselessWinterAtPercentage || ObjectManager.GetNumberAttackPlayer() > 1) && RemorselessWinter.IsSpellUsable)
            {
                RemorselessWinter.Launch();
                _onCd = new Timer(1000*8);
                return;
            }
        }

        private void Heal()
        {
            if (ObjectManager.Me.IsMounted)
                return;
            if (_mySettings.UseGiftoftheNaaru && GiftoftheNaaru.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseGiftoftheNaaruAtPercentage && GiftoftheNaaru.IsSpellUsable)
            {
                GiftoftheNaaru.Launch();
                return;
            }
            if (_mySettings.UseDeathPact && DeathPact.KnownSpell && (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0)
                && ObjectManager.Me.HealthPercent <= _mySettings.UseDeathPactAtPercentage && DeathPact.IsSpellUsable)
            {
                DeathPact.Launch();
                return;
            }
            if (_mySettings.UseDeathPact && DeathPact.KnownSpell && RaiseDead.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseDeathPactAtPercentage &&
                RaiseDead.IsSpellUsable && DeathPact.IsSpellUsable)
            {
                for (int i = 0; i < 3; i++)
                {
                    RaiseDead.Launch();
                    DeathPact.Launch();
                    if (!DeathPact.IsSpellUsable)
                        break;
                }
                return;
            }
            if (_mySettings.UseLichborne && Lichborne.KnownSpell && DeathCoil.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseLichborneAtPercentage
                && ObjectManager.Me.RunicPower > 39 && Lichborne.IsSpellUsable)
            {
                Lichborne.Launch();
                return;
            }
            if (_mySettings.UseConversion && Conversion.KnownSpell && ObjectManager.Me.RunicPower > 10 && ObjectManager.Me.HealthPercent <= _mySettings.UseConversionAtPercentage &&
                Conversion.IsSpellUsable)
            {
                Conversion.Launch();
                while (ObjectManager.Me.IsCast && (ObjectManager.Me.RunicPower > 0 || ObjectManager.Me.HealthPercent < 100))
                {
                    Thread.Sleep(200);
                }
                return;
            }
            if (_mySettings.UseDeathSiphon && DeathSiphon.KnownSpell && DeathSiphon.IsHostileDistanceGood && ObjectManager.Me.HealthPercent <= _mySettings.UseDeathSiphonAtPercentage &&
                DeathSiphon.IsSpellUsable)
            {
                DeathSiphon.Launch();
                return;
            }
        }

        private void Decast()
        {
            if (_mySettings.UseMindFreeze && MindFreeze.KnownSpell && MindFreeze.IsHostileDistanceGood && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && ObjectManager.Me.HealthPercent <= _mySettings.UseMindFreezeAtPercentage && MindFreeze.IsSpellUsable)
            {
                MindFreeze.Launch();
                return;
            }
            if (_mySettings.UseArcaneTorrentForDecast && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8
                && ObjectManager.Me.HealthPercent <= _mySettings.UseArcaneTorrentForDecastAtPercentage && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe &&
                ArcaneTorrent.IsSpellUsable)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (_mySettings.UseAntiMagicShell && AntiMagicShell.KnownSpell && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && ObjectManager.Me.HealthPercent <= _mySettings.UseAntiMagicShellAtPercentage && AntiMagicShell.IsSpellUsable)
            {
                AntiMagicShell.Launch();
                return;
            }
            if (Strangulate.KnownSpell && Strangulate.IsHostileDistanceGood && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && (_mySettings.UseStrangulate && ObjectManager.Me.HealthPercent <= _mySettings.UseStrangulateAtPercentage
                    || _mySettings.UseAsphyxiate && ObjectManager.Me.HealthPercent <= _mySettings.UseAsphyxiateAtPercentage) && Strangulate.IsSpellUsable)
            {
                Strangulate.Launch();
            }
            if (_mySettings.UseAntiMagicZone && AntiMagicZone.KnownSpell && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && ObjectManager.Me.HealthPercent <= _mySettings.UseAntiMagicZoneAtPercentage && AntiMagicZone.IsSpellUsable)
            {
                SpellManager.CastSpellByIDAndPosition(51052, ObjectManager.Me.Position);
                return;
            }
            if (_mySettings.UseChainsofIce && ChainsofIce.KnownSpell && ChainsofIce.IsHostileDistanceGood && ObjectManager.Target.GetMove && !ChainsofIce.TargetHaveBuff &&
                ChainsofIce.IsSpellUsable)
            {
                ChainsofIce.Launch();
            }
        }

        private void DPSBurst()
        {
            if (_mySettings.UseTrinketOne && !ItemsManager.IsItemOnCooldown(_firstTrinket.Entry) && ItemsManager.IsUsableItemById(_firstTrinket.Entry))
            {
                ItemsManager.UseItem(_firstTrinket.Name);
                Logging.WriteFight("Use First Trinket Slot");
            }
            if (_mySettings.UseTrinketTwo && !ItemsManager.IsItemOnCooldown(_secondTrinket.Entry) && ItemsManager.IsUsableItemById(_secondTrinket.Entry))
            {
                ItemsManager.UseItem(_secondTrinket.Name);
                Logging.WriteFight("Use Second Trinket Slot");
            }
            if (_mySettings.UseBerserking && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30 && Berserking.IsSpellUsable)
            {
                Berserking.Launch();
                return;
            }
            if (_mySettings.UseBloodFury && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 30 && BloodFury.IsSpellUsable)
            {
                BloodFury.Launch();
                return;
            }
            if (_mySettings.UseLifeblood && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30 && Lifeblood.IsSpellUsable)
            {
                Lifeblood.Launch();
                return;
            }
            if (_mySettings.UseEngGlove && _engineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30)
            {
                Logging.WriteFight("Use Engineering Gloves.");
                Lua.RunMacroText("/use 10");
                _engineeringTimer = new Timer(1000*60);
                return;
            }
            if (_mySettings.UseBloodTap && BloodTap.KnownSpell && ObjectManager.Target.GetDistance < 30 && BloodTap.IsSpellUsable)
            {
                BloodTap.Launch();
            }
            if (_mySettings.UsePillarofFrost && PillarofFrost.KnownSpell && ObjectManager.Target.GetDistance < 30 && PillarofFrost.IsSpellUsable)
            {
                PillarofFrost.Launch();
            }
            if (_mySettings.UseRaiseDeadForDPS && RaiseDead.KnownSpell && ObjectManager.Target.GetDistance < 30 && RaiseDead.IsSpellUsable)
            {
                RaiseDead.Launch();
            }
        }

        private void DPSCycle()
        {
            if (DeathCoil.KnownSpell && Lichborne.HaveBuff && ObjectManager.Me.HealthPercent < 85 && DeathCoil.IsSpellUsable)
            {
                Lua.RunMacroText("/target Player");
                DeathCoil.Launch();
                return;
            }

            if (_mySettings.UsePlagueLeech && _mySettings.UseOutbreak && PlagueLeech.KnownSpell && Outbreak.KnownSpell && PlagueLeech.IsHostileDistanceGood
                && BloodPlagueTimer.IsReady && BloodPlague.TargetHaveBuff && FrostFeverTimer.IsReady && FrostFever.TargetHaveBuff && Outbreak.IsSpellUsable && PlagueLeech.IsSpellUsable)
            {
                PlagueLeech.Launch();
                Thread.Sleep(400);
                if (Outbreak.IsHostileDistanceGood && Outbreak.IsSpellUsable)
                {
                    Outbreak.Launch();
                    BloodPlagueTimer = new Timer(1000*27);
                    FrostFeverTimer = new Timer(1000*27);
                }
                return;
            }

            if (_mySettings.UseUnholyBlight && UnholyBlight.KnownSpell && ObjectManager.Target.GetDistance < 9
                && (!BloodPlague.TargetHaveBuff || BloodPlagueTimer.IsReady || !FrostFever.TargetHaveBuff || FrostFeverTimer.IsReady) && UnholyBlight.IsSpellUsable)
            {
                UnholyBlight.Launch();
                BloodPlagueTimer = new Timer(1000*27);
                FrostFeverTimer = new Timer(1000*27);
                return;
            }

            if (_mySettings.UseOutbreak && Outbreak.KnownSpell && Outbreak.IsHostileDistanceGood
                && (BloodPlagueTimer.IsReady || FrostFeverTimer.IsReady || !BloodPlague.TargetHaveBuff || !FrostFever.TargetHaveBuff) && Outbreak.IsSpellUsable)
            {
                Outbreak.Launch();
                BloodPlagueTimer = new Timer(1000*27);
                FrostFeverTimer = new Timer(1000*27);
                return;
            }

            if (_mySettings.UseBloodBoil && RoilingBlood.KnownSpell && BloodBoil.KnownSpell && ObjectManager.Target.GetDistance < 9
                && ((BloodPlagueTimer.IsReady && BloodPlague.TargetHaveBuff) || (FrostFeverTimer.IsReady && FrostFever.TargetHaveBuff)) && BloodBoil.IsSpellUsable)
            {
                BloodBoil.Launch();
                if (BloodPlague.TargetHaveBuff)
                    BloodPlagueTimer = new Timer(1000*27);
                if (FrostFever.TargetHaveBuff)
                    FrostFeverTimer = new Timer(1000*27);
                return;
            }

            if (_mySettings.UsePlagueStrike && PlagueStrike.KnownSpell && PlagueStrike.IsHostileDistanceGood && (BloodPlagueTimer.IsReady || !BloodPlague.TargetHaveBuff)
                && !Outbreak.IsSpellUsable && !UnholyBlight.IsSpellUsable && PlagueStrike.IsSpellUsable)
            {
                PlagueStrike.Launch();
                BloodPlagueTimer = new Timer(1000*27);
                return;
            }

            if (_mySettings.UseHowlingBlast && HowlingBlast.KnownSpell && HowlingBlast.IsHostileDistanceGood && (FrostFeverTimer.IsReady || !FrostFever.TargetHaveBuff)
                && !Outbreak.IsSpellUsable && !UnholyBlight.IsSpellUsable && HowlingBlast.IsSpellUsable)
            {
                HowlingBlast.Launch();
                FrostFeverTimer = new Timer(1000*27);
                return;
            }

            if (_mySettings.UseIcyTouch && !_mySettings.UseHowlingBlast && IcyTouch.KnownSpell && IcyTouch.IsHostileDistanceGood &&
                (FrostFeverTimer.IsReady || !FrostFever.TargetHaveBuff)
                && !Outbreak.IsSpellUsable && !UnholyBlight.IsSpellUsable && IcyTouch.IsSpellUsable)
            {
                IcyTouch.Launch();
                FrostFeverTimer = new Timer(1000*27);
                return;
            }

            if (ObjectManager.GetNumberAttackPlayer() > 2)
            {
                if (_mySettings.UsePestilence && (!RoilingBlood.KnownSpell || !_mySettings.UseBloodBoil) && Pestilence.KnownSpell && Pestilence.IsHostileDistanceGood
                    && FrostFever.TargetHaveBuff && BloodPlague.TargetHaveBuff && ObjectManager.GetNumberAttackPlayer() > 2 && Pestilence.IsSpellUsable)
                {
                    Pestilence.Launch();
                    PestilenceTimer = new Timer(1000*30);
                    return;
                }

                if (_mySettings.UseDeathandDecay && DeathandDecay.KnownSpell && DeathandDecay.IsHostileDistanceGood && ObjectManager.GetNumberAttackPlayer() > 2 &&
                    DeathandDecay.IsSpellUsable)
                {
                    SpellManager.CastSpellByIDAndPosition(43265, ObjectManager.Target.Position);
                    return;
                }

                if (_mySettings.UseArmyoftheDead && ArmyoftheDead.KnownSpell && ObjectManager.GetNumberAttackPlayer() > 3 && ArmyoftheDead.IsSpellUsable)
                {
                    ArmyoftheDead.Launch();
                    Thread.Sleep(4000);
                    return;
                }
            }

            if (_mySettings.UseHowlingBlast && FreezingFog.HaveBuff && HowlingBlast.KnownSpell && HowlingBlast.IsHostileDistanceGood && ObjectManager.Me.RunicPowerPercentage < 90 &&
                HowlingBlast.IsSpellUsable)
            {
                HowlingBlast.Launch();
                FrostFeverTimer = new Timer(1000*27);
                return;
            }

            // Blizzard API Calls for Frost Strike using Blood Strike Function
            if (_mySettings.UseFrostStrike && BloodStrike.KnownSpell && BloodStrike.IsHostileDistanceGood && ObjectManager.Me.RunicPowerPercentage >= 80 && BloodStrike.IsSpellUsable)
            {
                BloodStrike.Launch();
                return;
            }

            if (_mySettings.UseSoulReaper && SoulReaper.KnownSpell && SoulReaper.IsHostileDistanceGood && ObjectManager.Target.HealthPercent < 35
                && (ObjectManager.Me.HealthPercent > _mySettings.UseDeathStrikeAtPercentage || !_mySettings.UseDeathStrike) && SoulReaper.IsSpellUsable)
            {
                SoulReaper.Launch();
                return;
            }

            if (_mySettings.UseDuelWield)
            {
                if (_mySettings.UseFrostStrike && BloodStrike.KnownSpell && BloodStrike.IsHostileDistanceGood && ObjectManager.Me.HaveBuff(51124) && BloodStrike.IsSpellUsable)
                {
                    if ((_mySettings.UseLichborne && ObjectManager.Me.HealthPercent <= _mySettings.UseLichborneAtPercentage && Lichborne.KnownSpell)
                        || (_mySettings.UseConversion && ObjectManager.Me.HealthPercent <= _mySettings.UseConversionAtPercentage && Conversion.KnownSpell))
                        return;
                    else
                    {
                        BloodStrike.Launch();
                        return;
                    }
                }

                if (_mySettings.UseObliterate && Obliterate.KnownSpell && Obliterate.IsHostileDistanceGood && ObjectManager.Me.HaveBuff(51124) && Obliterate.IsSpellUsable)
                {
                    if (_mySettings.UseDeathStrike && DeathStrike.KnownSpell && DeathStrike.IsHostileDistanceGood &&
                        ObjectManager.Me.HealthPercent <= _mySettings.UseDeathStrikeAtPercentage
                        && DeathStrike.IsSpellUsable)
                    {
                        DeathStrike.Launch();
                        return;
                    }
                    else
                    {
                        Obliterate.Launch();
                        return;
                    }
                }
            }

            if (_mySettings.UseTwoHander)
            {
                if (_mySettings.UseObliterate && Obliterate.KnownSpell && Obliterate.IsHostileDistanceGood && ObjectManager.Me.HaveBuff(51124) && Obliterate.IsSpellUsable)
                {
                    if (_mySettings.UseDeathStrike && DeathStrike.KnownSpell && DeathStrike.IsHostileDistanceGood &&
                        ObjectManager.Me.HealthPercent <= _mySettings.UseDeathStrikeAtPercentage
                        && DeathStrike.IsSpellUsable)
                    {
                        DeathStrike.Launch();
                        return;
                    }
                    else
                    {
                        Obliterate.Launch();
                        return;
                    }
                }

                if (_mySettings.UseFrostStrike && BloodStrike.KnownSpell && BloodStrike.IsHostileDistanceGood && ObjectManager.Me.HaveBuff(51124) && BloodStrike.IsSpellUsable)
                {
                    if ((_mySettings.UseLichborne && ObjectManager.Me.HealthPercent <= _mySettings.UseLichborneAtPercentage && Lichborne.KnownSpell)
                        || (_mySettings.UseConversion && ObjectManager.Me.HealthPercent <= _mySettings.UseConversionAtPercentage && Conversion.KnownSpell))
                        return;
                    else
                    {
                        BloodStrike.Launch();
                        return;
                    }
                }
            }

            if (_mySettings.UseObliterate && Obliterate.KnownSpell && Obliterate.IsHostileDistanceGood && Obliterate.IsSpellUsable)
            {
                if (_mySettings.UseDeathStrike && DeathStrike.KnownSpell && DeathStrike.IsHostileDistanceGood && ObjectManager.Me.HealthPercent <= _mySettings.UseDeathStrikeAtPercentage
                    && DeathStrike.IsSpellUsable)
                {
                    DeathStrike.Launch();
                    return;
                }
                else
                {
                    Obliterate.Launch();
                    return;
                }
            }

            if (_mySettings.UseFrostStrike && BloodStrike.KnownSpell && BloodStrike.IsHostileDistanceGood && BloodStrike.IsSpellUsable)
            {
                if ((_mySettings.UseLichborne && ObjectManager.Me.HealthPercent <= _mySettings.UseLichborneAtPercentage && Lichborne.KnownSpell)
                    || (_mySettings.UseConversion && ObjectManager.Me.HealthPercent <= _mySettings.UseConversionAtPercentage && Conversion.KnownSpell))
                    return;
                else
                {
                    BloodStrike.Launch();
                    return;
                }
            }

            if (_mySettings.UseHornofWinter && HornofWinter.KnownSpell && ObjectManager.Me.RunicPowerPercentage < 90 && HornofWinter.IsSpellUsable)
            {
                HornofWinter.Launch();
                return;
            }

            if (_mySettings.UseArcaneTorrentForResource && ArcaneTorrent.KnownSpell && ObjectManager.Me.RunicPowerPercentage < 85 && ArcaneTorrent.IsSpellUsable)
            {
                ArcaneTorrent.Launch();
                return;
            }

            if (_mySettings.UseEmpowerRuneWeapon && EmpowerRuneWeapon.KnownSpell && ObjectManager.Me.RunicPowerPercentage < 75 && EmpowerRuneWeapon.IsSpellUsable)
            {
                EmpowerRuneWeapon.Launch();
                return;
            }

            if (_mySettings.UseHowlingBlast && _mySettings.UseDuelWield && HowlingBlast.KnownSpell && HowlingBlast.IsHostileDistanceGood
                && !FrostStrike.IsSpellUsable && !Obliterate.IsSpellUsable && ObjectManager.Me.RunicPowerPercentage < 20 && HowlingBlast.IsSpellUsable)
            {
                HowlingBlast.Launch();
                FrostFeverTimer = new Timer(1000*27);
            }
        }

        private void Patrolling()
        {
            if (!ObjectManager.Me.IsMounted)
            {
                Buff();
                Heal();
            }
        }

        #region Nested type: DeathknightFrostSettings

        [Serializable]
        public class DeathknightFrostSettings : Settings
        {
            public bool DoAvoidMelee = false;
            public int DoAvoidMeleeDistance = 0;
            public bool UseAlchFlask = true;
            public bool UseAntiMagicShell = true;
            public int UseAntiMagicShellAtPercentage = 95;
            public bool UseAntiMagicZone = true;
            public int UseAntiMagicZoneAtPercentage = 95;
            public bool UseArcaneTorrentForDecast = true;
            public int UseArcaneTorrentForDecastAtPercentage = 95;
            public bool UseArcaneTorrentForResource = true;
            public bool UseArmyoftheDead = true;
            public bool UseAsphyxiate = true;
            public int UseAsphyxiateAtPercentage = 90;
            public bool UseBerserking = true;
            public bool UseBloodBoil = true;
            public bool UseBloodFury = true;
            public bool UseBloodPresence = true;
            public int UseBloodPresenceAtPercentage = 50;
            public bool UseBloodTap = true;
            public bool UseChainsofIce = false;
            public bool UseConversion = true;
            public int UseConversionAtPercentage = 45;
            public bool UseDeathCoil = true;
            public bool UseDeathGrip = true;
            public bool UseDeathPact = true;
            public int UseDeathPactAtPercentage = 55;
            public bool UseDeathSiphon = true;
            public int UseDeathSiphonAtPercentage = 80;
            public bool UseDeathStrike = true;
            public int UseDeathStrikeAtPercentage = 80;
            public bool UseDeathandDecay = true;
            public bool UseDeathsAdvance = true;
            public bool UseDuelWield = false;
            public bool UseEmpowerRuneWeapon = true;
            public bool UseEngGlove = true;
            public bool UseFrostPresence = true;
            public bool UseFrostStrike = true;
            public bool UseGiftoftheNaaru = true;
            public int UseGiftoftheNaaruAtPercentage = 80;
            public bool UseHornofWinter = true;
            public bool UseHowlingBlast = true;
            public bool UseIceboundFortitude = true;
            public int UseIceboundFortitudeAtPercentage = 80;
            public bool UseIcyTouch = true;
            public bool UseLichborne = true;
            public int UseLichborneAtPercentage = 45;
            public bool UseLifeblood = true;
            public bool UseLowCombat = true;
            public bool UseMindFreeze = true;
            public int UseMindFreezeAtPercentage = 100;
            public bool UseObliterate = true;
            public bool UseOutbreak = true;
            public bool UsePathofFrost = true;
            public bool UsePestilence = true;
            public bool UsePillarofFrost = true;
            public bool UsePlagueLeech = true;
            public bool UsePlagueStrike = true;
            public bool UseRaiseDeadForDPS = true;
            public bool UseRemorselessWinter = true;
            public int UseRemorselessWinterAtPercentage = 70;
            public bool UseSoulReaper = true;
            public bool UseStoneform = true;
            public int UseStoneformAtPercentage = 80;
            public bool UseStrangulate = true;
            public int UseStrangulateAtPercentage = 100;
            public bool UseTrinketOne = true;
            public bool UseTrinketTwo = true;
            public bool UseTwoHander = true;
            public bool UseUnholyBlight = true;
            public bool UseUnholyPresence = true;
            public bool UseWarStomp = true;
            public int UseWarStompAtPercentage = 80;

            public DeathknightFrostSettings()
            {
                ConfigWinForm(new Point(500, 400), "Deathknight Frost Settings");
                /* Professions & Racials */
                AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials");
                AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
                AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
                AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
                AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials", "AtPercentage");
                /* Deathknight Presence & Buffs */
                AddControlInWinForm("Use Frost Presence", "UseFrostPresence", "Deathknight Presence & Buffs");
                AddControlInWinForm("Use Blood Presence", "UseBloodPresence", "Deathknight Presence & Buffs", "AtPercentage");
                AddControlInWinForm("Use Horn of Winter", "UseHornofWinter", "Deathknight Presence & Buffs");
                AddControlInWinForm("Use Path of Frost", "UsePathofFrost", "Deathknight Presence & Buffs");
                AddControlInWinForm("Use Unholy Presence", "UseUnholyPresence", "Deathknight Presence & Buffs");
                /* Offensive Spell */
                AddControlInWinForm("Use Blood Boil", "UseBloodBoil", "Offensive Spell");
                AddControlInWinForm("Use Dark Transformation", "UseDarkTransformation", "Offensive Spell");
                AddControlInWinForm("Use Death Coil", "UseDeathCoil", "Offensive Spell");
                AddControlInWinForm("Use Death and Decay", "UseDeathandDecay", "Offensive Spell");
                AddControlInWinForm("Use Frost Strike", "UseFrostStrike", "Offensive Spell");
                AddControlInWinForm("Use Howling Blast", "UseHowlingBlast", "Offensive Spell");
                AddControlInWinForm("Use Icy Touch", "UseIcyTouch", "Offensive Spell");
                AddControlInWinForm("Use Plague Leech", "UsePlagueLeech", "Offensive Spell");
                AddControlInWinForm("Use Plague Strike", "UsePlagueStrike", "Offensive Spell");
                AddControlInWinForm("Use Obliterate", "UseObliterate", "Offensive Spell");
                AddControlInWinForm("Use Soul Reaper", "UseSoulReaper", "Offensive Spell");
                AddControlInWinForm("Use Unholy Blight", "UseUnholyBlight", "Offensive Spell");
                /* Offensive Cooldown */
                AddControlInWinForm("Use Blood Tap", "UseBloodTap", "Offensive Cooldown");
                AddControlInWinForm("Use Death Grip", "UseDeathGrip", "Offensive Cooldown");
                AddControlInWinForm("Use Empower Rune Weapon", "UseEmpowerRuneWeapon", "Offensive Cooldown");
                AddControlInWinForm("Use Outbreak", "UseOutbreak", "Offensive Cooldown");
                AddControlInWinForm("Use Pestilence", "UsePestilence", "Offensive Cooldown");
                AddControlInWinForm("Use Pillar of Frost", "UsePillarofFrost", "Offensive Cooldown");
                AddControlInWinForm("Use Raise Dead For DPS", "UseRaiseDeadForDPS", "Offensive Cooldown");
                /* Defensive Cooldown */
                AddControlInWinForm("Use Anti-Magic Shell", "UseAntiMagicShell", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Anti-Magic Zone", "UseAntiMagicZone", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Army of the Dead", "UseArmyoftheDead", "Defensive Cooldown");
                AddControlInWinForm("Use Asphyxiate", "UseAsphyxiate", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Chains of Ice", "UseChainsofIce", "Defensive Cooldown");
                AddControlInWinForm("Use Death's Advance", "UseDeathsAdvance", "Defensive Cooldown");
                AddControlInWinForm("Use Icebound Fortitude", "UseIceboundFortitude", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Mind Freeze", "UseMindFreeze", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Remorseless Winter", "UseRemorseless Winter", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Strangulate", "UseStrangulate", "Defensive Cooldown", "AtPercentage");
                /* Healing Spell */
                AddControlInWinForm("Use Conversion", "UseConversion", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Death Pact", "UseDeathPact", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Death Siphon", "UseDeathSiphon", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Death Strike", "UseDeathStrike", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Lichborne", "UseLichborne", "Healing Spell", "AtPercentage");
                /* Game Settings */
                AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
                AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
                AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
                AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
                AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
                AddControlInWinForm("Use Duel Wield", "UseDuelWield", "Game Settings");
                AddControlInWinForm("Use Two Hander", "UseTwoHander", "Game Settings");
                AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
                AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
            }

            public static DeathknightFrostSettings CurrentSetting { get; set; }

            public static DeathknightFrostSettings GetSettings()
            {
                string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Deathknight_Frost.xml";
                if (File.Exists(currentSettingsFile))
                {
                    return
                        CurrentSetting = Load<DeathknightFrostSettings>(currentSettingsFile);
                }
                return new DeathknightFrostSettings();
            }
        }

        #endregion
    }

    #endregion

    #region Mage

    public class MageArcane
    {
        private readonly MageArcaneSettings _mySettings = MageArcaneSettings.GetSettings();

        #region General Timers & Variables

        private readonly WoWItem _firstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
        private readonly WoWItem _secondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);
        private Timer _engineeringTimer = new Timer(0);
        public int LC = 0;
        private Timer _onCd = new Timer(0);

        #endregion

        #region Professions & Racials

        public readonly Spell Alchemy = new Spell("Alchemy");
        public readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
        public readonly Spell Berserking = new Spell("Berserking");
        public readonly Spell BloodFury = new Spell("Blood Fury");
        public readonly Spell Engineering = new Spell("Engineering");
        public readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
        public readonly Spell Lifeblood = new Spell("Lifeblood");
        public readonly Spell Stoneform = new Spell("Stoneform");
        public readonly Spell WarStomp = new Spell("War Stomp");

        #endregion

        #region Mage Buffs

        public readonly Spell ArcaneBrilliance = new Spell("Arcane Brilliance");
        public readonly Spell BlazingSpeed = new Spell("Blazing Speed");
        public readonly Spell FrostArmor = new Spell("Frost Armor");
        public readonly Spell IceFloes = new Spell("Ice Floes");
        public readonly Spell MageArmor = new Spell("Mage Armor");
        public readonly Spell MoltenArmor = new Spell("Molten Armor");

        #endregion

        #region Offensive Spell

        public readonly Spell ArcaneBarrage = new Spell("Arcane Barrage");
        public readonly Spell ArcaneBlast = new Spell("Arcane Blast");
        public readonly Spell ArcaneExplosion = new Spell("Arcane Explosion");
        public readonly Spell ArcaneMissiles = new Spell("Arcane Missiles");
        public readonly Spell Flamestrike = new Spell("Flamestrike");
        public readonly Spell Scorch = new Spell("Scorch");
        private Timer FlamestrikeTimer = new Timer(0);

        #endregion

        #region Offensive Cooldown

        public readonly Spell AlterTime = new Spell("Alter Time");
        public readonly Spell ArcanePower = new Spell("Arcane Power");
        public readonly Spell FrozenOrb = new Spell("Frozen Orb");
        public readonly Spell MageBomb = new Spell("Mage Bomb");
        public readonly Spell MirrorImage = new Spell("Mirror Image");
        public readonly Spell PresenceofMind = new Spell("Presence of Mind");
        public readonly Spell TimeWarp = new Spell("Time Warp");
        private Timer AlterTimeTimer = new Timer(0);

        #endregion

        #region Defensive Cooldown

        public readonly Spell Blink = new Spell("Blink");
        public readonly Spell ColdSnap = new Spell("Cold Snap");
        public readonly Spell ConeofCold = new Spell("Cone of Cold");
        public readonly Spell Counterspell = new Spell("Counterspell");
        public readonly Spell DeepFreeze = new Spell("Deep Freeze");
        public readonly Spell FrostNova = new Spell("Frost Nova");
        public readonly Spell Frostjaw = new Spell("Frostjaw");
        public readonly Spell IceBarrier = new Spell("Ice Barrier");
        public readonly Spell IceBlock = new Spell("Ice Block");
        public readonly Spell IceWard = new Spell("Ice Ward");
        public readonly Spell IncantersWard = new Spell("Incanter's Ward");
        public readonly Spell Invisibility = new Spell("Invisibility");
        public readonly Spell RingofFrost = new Spell("Ring of Frost");
        public readonly Spell Slow = new Spell("Slow");
        public readonly Spell TemporalShield = new Spell("Temporal Shield");

        #endregion

        #region Healing Spell

        public readonly Spell ConjureManaGem = new Spell("Conjure Mana Gem");
        public readonly Spell ConjureRefreshment = new Spell("Conjure Refreshment");
        public readonly Spell Evocation = new Spell("Evocation");
        private Timer ConjureManaGemTimer = new Timer(0);
        private Timer ConjureRefreshmentTimer = new Timer(0);

        #endregion

        public MageArcane()
        {
            Main.InternalRange = 30.0f;
            UInt64 lastTarget = 0;

            while (Main.InternalLoop)
            {
                try
                {
                    if (!ObjectManager.Me.IsDeadMe)
                    {
                        if (!ObjectManager.Me.IsMounted)
                        {
                            if (Fight.InFight && ObjectManager.Me.Target > 0)
                            {
                                if (ObjectManager.Me.Target != lastTarget
                                    && (ArcaneBarrage.IsHostileDistanceGood || Scorch.IsHostileDistanceGood))
                                {
                                    Pull();
                                    lastTarget = ObjectManager.Me.Target;
                                }

                                if (_mySettings.UseLowCombat && ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84)
                                {
                                    LC = 1;
                                    if (ObjectManager.Target.GetDistance < 41)
                                        LowCombat();
                                }
                                else
                                {
                                    LC = 0;
                                    if (ObjectManager.Target.GetDistance < 41)
                                        Combat();
                                }
                                break;
                            }
                            if (!ObjectManager.Me.IsCast)
                                Patrolling();
                        }
                    }
                    else
                        Thread.Sleep(500);
                }
                catch
                {
                }
                Thread.Sleep(250);
            }
        }

        private void Pull()
        {
            if (_mySettings.UseArcaneBarrage && ArcaneBarrage.KnownSpell && ArcaneBarrage.IsHostileDistanceGood && ArcaneBarrage.IsSpellUsable)
                ArcaneBarrage.Launch();
            else
            {
                if (_mySettings.UseArcaneBlast && ArcaneBlast.KnownSpell && ArcaneBlast.IsHostileDistanceGood && ArcaneBlast.IsSpellUsable)
                    ArcaneBlast.Launch();
            }
        }

        private void LowCombat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            if (_onCd.IsReady)
                DefenseCycle();
            Heal();

            if (_mySettings.UseArcaneBarrage && ArcaneBarrage.KnownSpell && ArcaneBarrage.IsHostileDistanceGood && ArcaneBarrage.IsSpellUsable)
            {
                ArcaneBarrage.Launch();
                return;
            }
            if (_mySettings.UseArcaneMissiles && ArcaneMissiles.KnownSpell && ArcaneMissiles.IsHostileDistanceGood && ArcaneMissiles.IsSpellUsable)
            {
                ArcaneMissiles.Launch();
                return;
            }
            if (_mySettings.UseArcaneBlast && ArcaneBlast.KnownSpell && ArcaneBlast.IsHostileDistanceGood && ArcaneBlast.IsSpellUsable)
            {
                ArcaneBlast.Launch();
                return;
            }
            if (_mySettings.UseArcaneExplosion && ArcaneExplosion.KnownSpell && ArcaneExplosion.IsHostileDistanceGood && ArcaneExplosion.IsSpellUsable)
            {
                ArcaneExplosion.Launch();
            }
        }

        private void Combat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            DPSCycle();
            if (_onCd.IsReady)
                DefenseCycle();
            Heal();
            Decast();
            DPSBurst();
            DPSCycle();
        }

        private void Buff()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (_mySettings.UseIceBlock && IceBlock.KnownSpell && ObjectManager.Me.HaveBuff(87023) && !ObjectManager.Me.HaveBuff(41425))
            {
                if (_mySettings.UseColdSnap && ColdSnap.KnownSpell && !IceBlock.IsSpellUsable && ColdSnap.IsSpellUsable)
                {
                    ColdSnap.Launch();
                    Thread.Sleep(400);
                }

                if (IceBlock.IsSpellUsable)
                {
                    IceBlock.Launch();
                    _onCd = new Timer(1000*10);
                    return;
                }
            }

            if (_mySettings.UseArcaneBrilliance && ArcaneBrilliance.KnownSpell && !ArcaneBrilliance.HaveBuff && ArcaneBrilliance.IsSpellUsable
                && !ObjectManager.Me.HaveBuff(61316))
                ArcaneBrilliance.Launch();

            if (_mySettings.UseMageArmor && MageArmor.KnownSpell && !MageArmor.HaveBuff && MageArmor.IsSpellUsable)
            {
                MageArmor.Launch();
                return;
            }
            if (_mySettings.UseFrostArmor && !_mySettings.UseMageArmor && FrostArmor.KnownSpell && !FrostArmor.HaveBuff && FrostArmor.IsSpellUsable)
            {
                FrostArmor.Launch();
                return;
            }
            if (_mySettings.UseMoltenArmor && !_mySettings.UseFrostArmor && !_mySettings.UseMageArmor
                && MoltenArmor.KnownSpell && !MoltenArmor.HaveBuff && MoltenArmor.IsSpellUsable)
            {
                MoltenArmor.Launch();
                return;
            }

            if (_mySettings.UseBlazingSpeed && BlazingSpeed.KnownSpell && ObjectManager.Me.GetMove && BlazingSpeed.IsSpellUsable)
            {
                BlazingSpeed.Launch();
                return;
            }

            if (_mySettings.UseAlchFlask && !ObjectManager.Me.HaveBuff(79638) && !ObjectManager.Me.HaveBuff(79640) && !ObjectManager.Me.HaveBuff(79639)
                && !ItemsManager.IsItemOnCooldown(75525) && ItemsManager.GetItemCountByIdLUA(75525) > 0)
                ItemsManager.UseItem(75525);
        }

        private void AvoidMelee()
        {
            if (ObjectManager.Target.GetDistance < _mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
            {
                Logging.WriteFight("Too Close. Moving Back");
                var maxTimeTimer = new Timer(1000*2);
                MovementsAction.MoveBackward(true);
                while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                    Thread.Sleep(300);
                MovementsAction.MoveBackward(false);
                if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
                {
                    MovementsAction.MoveForward(true);
                    Thread.Sleep(1000);
                    MovementsAction.MoveForward(false);
                    MovementManager.Face(ObjectManager.Target.Position);
                }
            }
        }

        private void DefenseCycle()
        {
            if (_mySettings.UseIncantersWard && IncantersWard.KnownSpell && !IncantersWard.HaveBuff && IncantersWard.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseIncantersWardAtPercentage && ObjectManager.Me.InCombat)
            {
                IncantersWard.Launch();
                return;
            }

            if (_mySettings.UseRingofFrost && RingofFrost.KnownSpell && ObjectManager.GetNumberAttackPlayer() > 2 && RingofFrost.IsSpellUsable
                && ObjectManager.Target.GetDistance < 10)
            {
                SpellManager.CastSpellByIDAndPosition(113724, ObjectManager.Target.Position);
                _onCd = new Timer(1000*10);
                return;
            }
            if (_mySettings.UseFrostNova && FrostNova.KnownSpell && ObjectManager.Target.GetDistance < 12
                && ObjectManager.Me.HealthPercent <= _mySettings.UseFrostNovaAtPercentage)
            {
                if (_mySettings.UseColdSnap && ColdSnap.KnownSpell && !FrostNova.IsSpellUsable && ColdSnap.IsSpellUsable)
                {
                    ColdSnap.Launch();
                    Thread.Sleep(200);
                }

                if (FrostNova.IsSpellUsable)
                {
                    FrostNova.Launch();
                    _onCd = new Timer(1000*8);
                }
                return;
            }
            if (_mySettings.UseIceWard && IceWard.KnownSpell && ObjectManager.Target.GetDistance < 10 && IceWard.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseIceWardAtPercentage)
            {
                IceWard.Launch();
                _onCd = new Timer(1000*5);
                return;
            }
            if (_mySettings.UseConeofCold && ConeofCold.KnownSpell && ObjectManager.Target.GetDistance < 10 && ConeofCold.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseConeofColdAtPercentage)
            {
                ConeofCold.Launch();
                return;
            }
            if (_mySettings.UseBlink && Blink.KnownSpell && ObjectManager.Target.GetDistance < 11 && Blink.IsSpellUsable
                && (FrostNova.TargetHaveBuff || ConeofCold.TargetHaveBuff || IceWard.TargetHaveBuff))
            {
                Blink.Launch();
                return;
            }
            if (_mySettings.UseDeepFreeze && DeepFreeze.KnownSpell && DeepFreeze.IsHostileDistanceGood && DeepFreeze.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseDeepFreezeAtPercentage)
            {
                DeepFreeze.Launch();
                _onCd = new Timer(1000*5);
                return;
            }
            if (_mySettings.UseIceBarrier && IceBarrier.KnownSpell && !IceBarrier.HaveBuff && IceBarrier.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseIceBarrierAtPercentage)
            {
                IceBarrier.Launch();
                return;
            }
            if (_mySettings.UseTemporalShield && TemporalShield.KnownSpell && !TemporalShield.HaveBuff && TemporalShield.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseTemporalShieldAtPercentage && ObjectManager.Me.InCombat)
            {
                TemporalShield.Launch();
                _onCd = new Timer(1000*4);
                return;
            }
            if (_mySettings.UseWarStomp && WarStomp.KnownSpell && WarStomp.IsHostileDistanceGood && WarStomp.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseWarStompAtPercentage)
            {
                WarStomp.Launch();
                _onCd = new Timer(1000*2);
                return;
            }
            if (_mySettings.UseStoneform && Stoneform.KnownSpell && Stoneform.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseStoneformAtPercentage)
            {
                Stoneform.Launch();
                _onCd = new Timer(1000*8);
                return;
            }
            if (_mySettings.UseInvisibility && Invisibility.KnownSpell && Invisibility.IsSpellUsable
                && ObjectManager.GetNumberAttackPlayer() > 3)
            {
                Invisibility.Launch();
                Thread.Sleep(5000);
            }
        }

        private void Heal()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (_mySettings.UseArcaneTorrentForResource && ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable
                && ObjectManager.Me.ManaPercentage <= _mySettings.UseArcaneTorrentForResourceAtPercentage)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (_mySettings.UseGiftoftheNaaru && GiftoftheNaaru.KnownSpell && GiftoftheNaaru.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseGiftoftheNaaruAtPercentage)
            {
                GiftoftheNaaru.Launch();
                return;
            }
            if (_mySettings.UseColdSnap && ColdSnap.KnownSpell && ColdSnap.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseColdSnapAtPercentage)
            {
                ColdSnap.Launch();
                return;
            }
            if (_mySettings.UseConjureManaGem && ObjectManager.Me.ManaPercentage <= _mySettings.UseConjureManaGemAtPercentage
                && ItemsManager.GetItemCountByIdLUA(36799) > 0)
            {
                Logging.WriteFight("Use Mana Gem.");
                Lua.RunMacroText("/use item:36799");
                return;
            }
            if (_mySettings.UseEvocationForHP && _mySettings.UseEvocationGlyph && Evocation.KnownSpell && Evocation.IsSpellUsable
                && !_mySettings.UseRuneofPowerTalent && !_mySettings.UseInvocationTalent
                && ObjectManager.Me.HealthPercent <= _mySettings.UseEvocationForHPAtPercentage)
            {
                Evocation.Launch();
                return;
            }
            if (_mySettings.UseEvocationForMana && Evocation.KnownSpell && !ObjectManager.Me.InCombat && Evocation.IsSpellUsable
                && !_mySettings.UseInvocationTalent && !_mySettings.UseRuneofPowerTalent
                && ObjectManager.Me.ManaPercentage <= _mySettings.UseEvocationForManaAtPercentage)
            {
                Evocation.Launch();
                return;
            }
            if (_mySettings.UseConjureManaGem && ConjureManaGem.KnownSpell && ItemsManager.GetItemCountByIdLUA(36799) == 0
                && ConjureManaGemTimer.IsReady && ConjureManaGem.IsSpellUsable)
            {
                ConjureManaGem.Launch();
                ConjureManaGemTimer = new Timer(1000*60*5);
                return;
            }
            if (_mySettings.UseConjureRefreshment && ConjureRefreshment.KnownSpell && ConjureRefreshmentTimer.IsReady && ConjureRefreshment.IsSpellUsable
                && ItemsManager.GetItemCountByIdLUA(80610) == 0 // 90
                && ItemsManager.GetItemCountByIdLUA(65499) == 0 // 85-89
                && ItemsManager.GetItemCountByIdLUA(43523) == 0 // 84-80
                && ItemsManager.GetItemCountByIdLUA(43518) == 0 // 79-74
                && ItemsManager.GetItemCountByIdLUA(65517) == 0 // 73-64
                && ItemsManager.GetItemCountByIdLUA(65516) == 0 // 63-54
                && ItemsManager.GetItemCountByIdLUA(65515) == 0 // 53-44
                && ItemsManager.GetItemCountByIdLUA(65500) == 0) // 43-38
            {
                ConjureRefreshment.Launch();
                ConjureRefreshmentTimer = new Timer(1000*60*10);
            }
        }

        private void Decast()
        {
            if (_mySettings.UseCounterspell && Counterspell.KnownSpell && Counterspell.IsHostileDistanceGood && Counterspell.IsSpellUsable
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && ObjectManager.Me.HealthPercent <= _mySettings.UseCounterspellAtPercentage)
            {
                Counterspell.Launch();
                return;
            }
            if (_mySettings.UseArcaneTorrentForDecast && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8 && ArcaneTorrent.IsSpellUsable
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && ObjectManager.Me.HealthPercent <= _mySettings.UseArcaneTorrentForDecastAtPercentage)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (_mySettings.UseFrostjaw && Frostjaw.KnownSpell && Frostjaw.IsHostileDistanceGood && Frostjaw.IsSpellUsable
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && ObjectManager.Me.HealthPercent <= _mySettings.UseFrostjawAtPercentage)
            {
                Frostjaw.Launch();
                _onCd = new Timer(1000*8);
                return;
            }

            if (_mySettings.UseSlow && Slow.KnownSpell && Slow.IsHostileDistanceGood && Slow.IsSpellUsable
                && ObjectManager.Target.GetMove && !Slow.TargetHaveBuff)
            {
                Slow.Launch();
                return;
            }
        }

        private void DPSBurst()
        {
            if (_mySettings.UseAlterTime && AlterTime.KnownSpell && ObjectManager.Target.GetDistance < 41 && AlterTime.IsSpellUsable && !AlterTime.HaveBuff
                && ObjectManager.Target.InCombat && ArcanePower.HaveBuff && ObjectManager.Me.BuffStack(114664) > 3)
            {
                AlterTime.Launch();
                AlterTimeTimer = new Timer(1000*4);
                return;
            }
            if (_mySettings.UseAlterTime && _mySettings.UseArcaneBarrage && AlterTime.KnownSpell && ObjectManager.Target.GetDistance < 41 && AlterTime.IsSpellUsable
                && AlterTime.HaveBuff && ObjectManager.Target.InCombat && ObjectManager.Me.BuffStack(114664) > 3 && AlterTimeTimer.IsReady)
            {
                if (ArcaneBarrage.KnownSpell && ArcaneBarrage.IsHostileDistanceGood && ArcaneBarrage.IsSpellUsable)
                {
                    ArcaneBarrage.Launch();
                    return;
                }
            }
            if (_mySettings.UseTrinketOne && !ItemsManager.IsItemOnCooldown(_firstTrinket.Entry) && ItemsManager.IsUsableItemById(_firstTrinket.Entry))
            {
                ItemsManager.UseItem(_firstTrinket.Name);
                Logging.WriteFight("Use First Trinket Slot");
            }
            if (_mySettings.UseTrinketTwo && !ItemsManager.IsItemOnCooldown(_secondTrinket.Entry) && ItemsManager.IsUsableItemById(_secondTrinket.Entry))
            {
                ItemsManager.UseItem(_secondTrinket.Name);
                Logging.WriteFight("Use Second Trinket Slot");
                return;
            }
            if (_mySettings.UseBerserking && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 41 && Berserking.IsSpellUsable)
            {
                Berserking.Launch();
                return;
            }
            if (_mySettings.UseBloodFury && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 41 && BloodFury.IsSpellUsable)
            {
                BloodFury.Launch();
            }
            if (_mySettings.UseLifeblood && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 41 && Lifeblood.IsSpellUsable)
            {
                Lifeblood.Launch();
            }
            if (_mySettings.UseEngGlove && _engineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 41)
            {
                Logging.WriteFight("Use Engineering Gloves.");
                Lua.RunMacroText("/use 10");
                _engineeringTimer = new Timer(1000*60);
            }
            if (_mySettings.UseInvocationTalent && Evocation.KnownSpell && ObjectManager.Target.GetDistance < 41 && Evocation.IsSpellUsable
                && !ObjectManager.Me.HaveBuff(116257))
            {
                Evocation.Launch();
                return;
            }
            if (_mySettings.UseRuneofPowerTalent && Evocation.KnownSpell && ObjectManager.Target.GetDistance < 41 && Evocation.IsSpellUsable && !ObjectManager.Me.HaveBuff(116014))
            {
                SpellManager.CastSpellByIDAndPosition(116011, ObjectManager.Me.Position);
            }
            if (_mySettings.UseArcanePower && ArcanePower.KnownSpell && ObjectManager.Target.GetDistance < 41 && ArcanePower.IsSpellUsable)
            {
                ArcanePower.Launch();
            }
            if (_mySettings.UseMirrorImage && MirrorImage.KnownSpell && ObjectManager.Target.GetDistance < 41 && MirrorImage.IsSpellUsable)
            {
                MirrorImage.Launch();
            }
            if (_mySettings.UseTimeWarp && TimeWarp.IsSpellUsable && TimeWarp.KnownSpell && ObjectManager.Target.GetDistance < 41
                && !ObjectManager.Me.HaveBuff(80354) && !ObjectManager.Me.HaveBuff(57724) && !ObjectManager.Me.HaveBuff(57723)
                && !ObjectManager.Me.HaveBuff(95809))
            {
                {
                    TimeWarp.Launch();
                }
            }
        }

        private void DPSCycle()
        {
            if (_mySettings.UseIceFloes && IceFloes.KnownSpell && ObjectManager.Me.GetMove && IceFloes.IsSpellUsable)
            {
                IceFloes.Launch();
                return;
            }

            if (_mySettings.UseFlamestrike && Flamestrike.KnownSpell && Flamestrike.IsHostileDistanceGood && Flamestrike.IsSpellUsable
                && ObjectManager.GetNumberAttackPlayer() > 1 && FlamestrikeTimer.IsReady)
            {
                SpellManager.CastSpellByIDAndPosition(2120, ObjectManager.Target.Position);
                FlamestrikeTimer = new Timer(1000*8);
                return;
            }
            if (_mySettings.UseArcaneExplosion && ArcaneExplosion.KnownSpell && ArcaneExplosion.IsHostileDistanceGood && ArcaneExplosion.IsSpellUsable
                && ObjectManager.GetNumberAttackPlayer() > 4)
            {
                ArcaneExplosion.Launch();
                return;
            }

            if (_mySettings.UseTierFive && MageBomb.KnownSpell && ObjectManager.Target.GetDistance < 41 && MageBomb.IsSpellUsable
                && !ObjectManager.Target.HaveBuff(114954) && !ObjectManager.Target.HaveBuff(44457))
            {
                MageBomb.Launch();
                return;
            }
            if (_mySettings.UseArcaneMissiles && ArcaneMissiles.KnownSpell && ArcaneMissiles.IsHostileDistanceGood && ArcaneMissiles.IsSpellUsable
                && ObjectManager.Me.BuffStack(79683) > 1)
            {
                ArcaneMissiles.Launch();
                return;
            }
            if (_mySettings.UseArcaneMissiles && ArcaneMissiles.KnownSpell && ArcaneMissiles.IsHostileDistanceGood && ArcaneMissiles.IsSpellUsable
                && ObjectManager.Me.BuffStack(114664) > 3)
            {
                ArcaneMissiles.Launch();
                return;
            }
            if (ArcaneBarrage.IsSpellUsable && ArcaneBarrage.KnownSpell && ArcaneBarrage.IsHostileDistanceGood
                && _mySettings.UseArcaneBarrage && ObjectManager.Me.BuffStack(114664) > 3)
            {
                ArcaneBarrage.Launch();
                return;
            }
            if (_mySettings.UsePresenceofMind && PresenceofMind.KnownSpell && ArcaneBlast.IsHostileDistanceGood && PresenceofMind.IsSpellUsable)
            {
                PresenceofMind.Launch();
                Thread.Sleep(400);
                if (_mySettings.UseArcaneBlast && ArcaneBlast.KnownSpell && ArcaneBlast.IsHostileDistanceGood && ArcaneBlast.IsSpellUsable)
                    ArcaneBlast.Launch();
                return;
            }
            if (_mySettings.UseArcaneBlast && ArcaneBlast.KnownSpell && ArcaneBlast.IsHostileDistanceGood && ArcaneBlast.IsSpellUsable
                && ObjectManager.Me.BuffStack(114664) < 4)
            {
                ArcaneBlast.Launch();
            }
        }

        private void Patrolling()
        {
            if (ObjectManager.Me.IsMounted) return;
            Buff();
            Heal();
        }

        #region Nested type: MageArcaneSettings

        [Serializable]
        public class MageArcaneSettings : Settings
        {
            public bool DoAvoidMelee = false;
            public int DoAvoidMeleeDistance = 0;
            public bool UseAlchFlask = true;
            public bool UseAlterTime = true;
            public bool UseArcaneBarrage = true;
            public bool UseArcaneBlast = true;
            public bool UseArcaneBrilliance = true;
            public bool UseArcaneExplosion = true;
            public bool UseArcaneMissiles = true;
            public bool UseArcanePower = true;
            public bool UseArcaneTorrentForDecast = true;
            public int UseArcaneTorrentForDecastAtPercentage = 100;
            public bool UseArcaneTorrentForResource = true;
            public int UseArcaneTorrentForResourceAtPercentage = 80;
            public bool UseBerserking = true;
            public bool UseBlazingSpeed = true;
            public bool UseBlink = true;
            public bool UseBloodFury = true;
            public bool UseColdSnap = true;
            public int UseColdSnapAtPercentage = 70;
            public bool UseConeofCold = true;
            public int UseConeofColdAtPercentage = 45;
            public bool UseConjureManaGem = true;
            public int UseConjureManaGemAtPercentage = 40;
            public bool UseConjureRefreshment = true;
            public bool UseCounterspell = true;
            public int UseCounterspellAtPercentage = 100;
            public bool UseDeepFreeze = true;
            public int UseDeepFreezeAtPercentage = 50;
            public bool UseEngGlove = true;
            public bool UseEvocationForHP = true;
            public int UseEvocationForHPAtPercentage = 40;
            public bool UseEvocationForMana = true;
            public int UseEvocationForManaAtPercentage = 60;
            public bool UseEvocationGlyph = false;
            public bool UseFlamestrike = true;
            public bool UseFrostArmor = false;
            public bool UseFrostNova = true;
            public int UseFrostNovaAtPercentage = 50;
            public bool UseFrostjaw = true;
            public int UseFrostjawAtPercentage = 40;
            public bool UseGiftoftheNaaru = true;
            public int UseGiftoftheNaaruAtPercentage = 80;
            public bool UseIceBarrier = true;
            public int UseIceBarrierAtPercentage = 95;
            public bool UseIceBlock = true;
            public bool UseIceFloes = true;
            public bool UseIceWard = true;
            public int UseIceWardAtPercentage = 45;
            public bool UseIncantersWard = true;
            public int UseIncantersWardAtPercentage = 95;
            public bool UseInvisibility = true;
            public bool UseInvocationTalent = false;
            public bool UseLifeblood = true;
            public bool UseLowCombat = true;
            public bool UseMageArmor = true;
            public bool UseMirrorImage = true;
            public bool UseMoltenArmor = false;
            public bool UsePresenceofMind = true;
            public bool UseRingofFrost = true;
            public bool UseRuneofPowerTalent = false;
            public bool UseScorch = true;
            public bool UseSlow = false;
            public bool UseStoneform = true;
            public int UseStoneformAtPercentage = 80;
            public bool UseTemporalShield = true;
            public int UseTemporalShieldAtPercentage = 95;
            public bool UseTierFive = true;
            public bool UseTimeWarp = true;
            public bool UseTrinketOne = true;
            public bool UseTrinketTwo = true;
            public bool UseWarStomp = true;
            public int UseWarStompAtPercentage = 80;

            public MageArcaneSettings()
            {
                ConfigWinForm(new Point(500, 400), "Mage Arcane Settings");
                /* Professions & Racials */
                AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
                AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
                AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
                AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
                AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials", "AtPercentage");
                /* Mage Buffs */
                AddControlInWinForm("Use Arcane Brilliance", "UseArcaneBrilliance", "Mage Buffs");
                AddControlInWinForm("Use Blazing Speed", "UseBlazingSpeed", "Mage Buffs");
                AddControlInWinForm("Use Frost Armor", "UseFrostArmor", "Mage Buffs");
                AddControlInWinForm("Use Ice Floes", "UseIceFloes", "Mage Buffs");
                AddControlInWinForm("Use Mage Armor", "UseMageArmor", "Mage Buffs");
                AddControlInWinForm("Use Molten Armor", "UseMoltenArmor", "Mage Buffs");
                /* Offensive Spell */
                AddControlInWinForm("Use Arcane Barrage", "UseArcaneBarrage", "Offensive Spell");
                AddControlInWinForm("Use Arcane Blast", "UseArcaneBlast", "Offensive Spell");
                AddControlInWinForm("Use Arcane Explosion", "UseArcaneExplosion", "Offensive Spell");
                AddControlInWinForm("Use Arcane Missiles", "UseArcaneMissiles", "Offensive Spell");
                AddControlInWinForm("Use Flamestrike", "UseFlamestrike", "Offensive Spell");
                /* Offensive Cooldown */
                AddControlInWinForm("Use Alter Time", "UseAlterTime", "Offensive Cooldown");
                AddControlInWinForm("Use Arcane Power", "UseArcanePower", "Offensive Cooldown");
                AddControlInWinForm("Use Mirror Image", "UseMirrorImage", "Offensive Cooldown");
                AddControlInWinForm("Use Presence of Mind", "UsePresenceofMind", "Offensive Cooldown");
                AddControlInWinForm("Use Tier Five Talent", "UseTierFive", "Offensive Cooldown");
                AddControlInWinForm("Use Time Warp", "UseTimeWarp", "Offensive Cooldown");
                /* Defensive Cooldown */
                AddControlInWinForm("Use Blink", "UseBlink", "Defensive Cooldown");
                AddControlInWinForm("Use Cone of Cold", "UseConeofCold", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Counterspell", "UseCounterspell", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Deep Freeze", "UseDeepFreeze", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Frostjaw", "UseFrostjaw", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Frost Nova", "UseFrostNova", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Ice Barrier", "UseIceBarrier", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Ice Block", "UseIceBlock", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Ice Ward", "UseIceWard", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Incanter's Ward", "UseIncantersWard", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Invisibility", "UseInvisibility", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Ring of Frost", "UseRingofFrost", "Defensive Cooldown");
                AddControlInWinForm("Use Slow", "UseSlow", "Defensive Cooldown");
                AddControlInWinForm("Use Temporal Shield", "UseTemporalShield", "Defensive Cooldown", "AtPercentage");
                /* Healing Spell */
                AddControlInWinForm("Use Cold Snap", "UseColdSnap", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Conjure Mana Gem", "UseConjureManaGem", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Conjure Refreshment", "UseConjureRefreshment", "Healing Spell");
                AddControlInWinForm("Use Evocation to regen Health", "UseEvocationForHP", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Evocation to regen Mana", "UseEvocationForMana", "Healing Spell", "AtPercentage");
                /* Game Settings */
                AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
                AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
                AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
                AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
                AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
                AddControlInWinForm("Use Evocation Glyph", "UseEvocationGlyph", "Game Settings");
                AddControlInWinForm("Use Invocation Talent", "UseInvocationTalent", "Game Settings");
                AddControlInWinForm("Use Rune of Power Talent", "UseRuneofPowerTalent", "Game Settings");
                AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
                AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
            }

            public static MageArcaneSettings currentSetting { get; set; }

            public static MageArcaneSettings GetSettings()
            {
                string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Mage_Arcane.xml";
                if (File.Exists(currentSettingsFile))
                {
                    return
                        currentSetting = Load<MageArcaneSettings>(currentSettingsFile);
                }
                return new MageArcaneSettings();
            }
        }

        #endregion
    }

    public class MageFrost
    {
        private readonly MageFrostSettings _mySettings = MageFrostSettings.GetSettings();

        #region General Timers & Variables

        private readonly WoWItem _firstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
        private readonly WoWItem _secondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);
        private Timer _engineeringTimer = new Timer(0);
        private Timer FreezeTimer = new Timer(0);
        public int LC = 0;
        private Timer _onCd = new Timer(0);

        #endregion

        #region Professions & Racials

        public readonly Spell Alchemy = new Spell("Alchemy");
        public readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
        public readonly Spell Berserking = new Spell("Berserking");
        public readonly Spell BloodFury = new Spell("Blood Fury");
        public readonly Spell Engineering = new Spell("Engineering");
        public readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
        public readonly Spell Lifeblood = new Spell("Lifeblood");
        public readonly Spell Stoneform = new Spell("Stoneform");
        public readonly Spell WarStomp = new Spell("War Stomp");

        #endregion

        #region Mage Buffs

        public readonly Spell ArcaneBrilliance = new Spell("Arcane Brilliance");
        public readonly Spell BlazingSpeed = new Spell("Blazing Speed");
        public readonly Spell FrostArmor = new Spell("Frost Armor");
        public readonly Spell IceFloes = new Spell("Ice Floes");
        public readonly Spell MageArmor = new Spell("Mage Armor");
        public readonly Spell MoltenArmor = new Spell("Molten Armor");

        #endregion

        #region Offensive Spell

        public readonly Spell ArcaneExplosion = new Spell("Arcane Explosion");
        public readonly Spell Blizzard = new Spell("Blizzard");
        public readonly Spell ConeofCold = new Spell("Cone of Cold");
        public readonly Spell FireBlast = new Spell("Fire Blast");
        public readonly Spell Flamestrike = new Spell("Flamestrike");
        public readonly Spell Frostbolt = new Spell("Frostbolt");
        public readonly Spell FrostfireBolt = new Spell("Frostfire Bolt");
        public readonly Spell IceLance = new Spell("Ice Lance");
        public readonly Spell Scorch = new Spell("Scorch");
        public readonly Spell SummonWaterElemental = new Spell("Summon Water Elemental");
        private Timer FlamestrikeTimer = new Timer(0);

        #endregion

        #region Offensive Cooldown

        public readonly Spell AlterTime = new Spell("Alter Time");
        public readonly Spell FrozenOrb = new Spell("Frozen Orb");
        public readonly Spell IcyVeins = new Spell("Icy Veins");
        public readonly Spell MageBomb = new Spell("Mage Bomb");
        public readonly Spell MirrorImage = new Spell("Mirror Image");
        public readonly Spell PresenceofMind = new Spell("Presence of Mind");
        public readonly Spell TimeWarp = new Spell("Time Warp");

        #endregion

        #region Defensive Cooldown

        public readonly Spell Blink = new Spell("Blink");
        public readonly Spell ColdSnap = new Spell("Cold Snap");
        public readonly Spell Counterspell = new Spell("Counterspell");
        public readonly Spell DeepFreeze = new Spell("Deep Freeze");
        public readonly Spell FrostNova = new Spell("Frost Nova");
        public readonly Spell Frostjaw = new Spell("Frostjaw");
        public readonly Spell IceBarrier = new Spell("Ice Barrier");
        public readonly Spell IceBlock = new Spell("Ice Block");
        public readonly Spell IceWard = new Spell("Ice Ward");
        public readonly Spell IncantersWard = new Spell("Incanter's Ward");
        public readonly Spell Invisibility = new Spell("Invisibility");
        public readonly Spell RingofFrost = new Spell("Ring of Frost");
        public readonly Spell TemporalShield = new Spell("Temporal Shield");

        #endregion

        #region Healing Spell

        public readonly Spell ConjureManaGem = new Spell("Conjure Mana Gem");
        public readonly Spell ConjureRefreshment = new Spell("Conjure Refreshment");
        public readonly Spell Evocation = new Spell("Evocation");
        private Timer ConjureManaGemTimer = new Timer(0);
        private Timer ConjureRefreshmentTimer = new Timer(0);

        #endregion

        public MageFrost()
        {
            Main.InternalRange = 30.0f;
            UInt64 lastTarget = 0;

            while (Main.InternalLoop)
            {
                try
                {
                    if (!ObjectManager.Me.IsDeadMe)
                    {
                        if (!ObjectManager.Me.IsMounted)
                        {
                            if (Fight.InFight && ObjectManager.Me.Target > 0)
                            {
                                if (ObjectManager.Me.Target != lastTarget
                                    && (Frostbolt.IsHostileDistanceGood || IceLance.IsHostileDistanceGood))
                                {
                                    Pull();
                                    lastTarget = ObjectManager.Me.Target;
                                }

                                if (_mySettings.UseLowCombat && ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84)
                                {
                                    LC = 1;
                                    if (ObjectManager.Target.GetDistance < 41)
                                        LowCombat();
                                }
                                else
                                {
                                    LC = 0;
                                    if (ObjectManager.Target.GetDistance < 41)
                                        Combat();
                                }
                                break;
                            }
                            if (!ObjectManager.Me.IsCast)
                                Patrolling();
                        }
                    }
                    else
                        Thread.Sleep(500);
                }
                catch
                {
                }
                Thread.Sleep(150);
            }
        }

        private void Pull()
        {
            if (ObjectManager.Pet.IsAlive)
            {
                Lua.RunMacroText("/petattack");
                Logging.WriteFight("Launch Pet Attack");
            }

            if (_mySettings.UseIceLance && IceLance.KnownSpell && IceLance.IsHostileDistanceGood && IceLance.IsSpellUsable)
                IceLance.Launch();

            if (_mySettings.UseFreeze && ObjectManager.Me.Level > 9 && FreezeTimer.IsReady && ObjectManager.Target.GetDistance < 41
                && (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0))
            {
                SpellManager.CastSpellByIDAndPosition(33395, ObjectManager.Target.Position);
                FreezeTimer = new Timer(1000*25);
                Thread.Sleep(400);
                if (_mySettings.UseDeepFreeze && DeepFreeze.KnownSpell && DeepFreeze.IsHostileDistanceGood && DeepFreeze.IsSpellUsable)
                {
                    DeepFreeze.Launch();
                    return;
                }
            }
        }

        private void LowCombat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            if (_onCd.IsReady)
                DefenseCycle();
            Heal();

            if (_mySettings.UseIceLance && IceLance.KnownSpell && IceLance.IsHostileDistanceGood && IceLance.IsSpellUsable
                && ObjectManager.Me.HaveBuff(44544))
            {
                IceLance.Launch();
                return;
            }
            if (_mySettings.UseFrostfireBolt && FrostfireBolt.KnownSpell && FrostfireBolt.IsHostileDistanceGood && FrostfireBolt.IsSpellUsable
                && ObjectManager.Me.HaveBuff(57761))
            {
                FrostfireBolt.Launch();
                return;
            }
            if (_mySettings.UseFrostbolt && Frostbolt.KnownSpell && Frostbolt.IsHostileDistanceGood && Frostbolt.IsSpellUsable)
            {
                Frostbolt.Launch();
                return;
            }
            if (_mySettings.UseArcaneExplosion && ArcaneExplosion.KnownSpell && ArcaneExplosion.IsHostileDistanceGood && ArcaneExplosion.IsSpellUsable)
            {
                ArcaneExplosion.Launch();
            }
        }

        private void Combat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            DPSCycle();
            if (_onCd.IsReady)
                DefenseCycle();
            Heal();
            Decast();
            DPSBurst();
            DPSCycle();
        }

        private void Buff()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (_mySettings.UseSummonWaterElemental && SummonWaterElemental.IsSpellUsable && SummonWaterElemental.KnownSpell
                && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0) && ObjectManager.Me.InCombat)
            {
                Logging.WriteFight(" - PET DEAD - ");
                SummonWaterElemental.Launch();
            }

            if (_mySettings.UseIceBlock && IceBlock.KnownSpell && ObjectManager.Me.HaveBuff(87023) && !ObjectManager.Me.HaveBuff(41425))
            {
                if (_mySettings.UseColdSnap && ColdSnap.KnownSpell && !IceBlock.IsSpellUsable && ColdSnap.IsSpellUsable)
                {
                    ColdSnap.Launch();
                    Thread.Sleep(400);
                }

                if (IceBlock.IsSpellUsable)
                {
                    IceBlock.Launch();
                    _onCd = new Timer(1000*10);
                    return;
                }

                if (_mySettings.UseAlchFlask && !ObjectManager.Me.HaveBuff(79638) && !ObjectManager.Me.HaveBuff(79640) && !ObjectManager.Me.HaveBuff(79639)
                    && !ItemsManager.IsItemOnCooldown(75525) && ItemsManager.GetItemCountByIdLUA(75525) > 0)
                    ItemsManager.UseItem(75525);
            }

            if (_mySettings.UseArcaneBrilliance && ArcaneBrilliance.KnownSpell && !ArcaneBrilliance.HaveBuff && ArcaneBrilliance.IsSpellUsable
                && !ObjectManager.Me.HaveBuff(61316))
                ArcaneBrilliance.Launch();

            if (_mySettings.UseFrostArmor && FrostArmor.KnownSpell && !FrostArmor.HaveBuff && FrostArmor.IsSpellUsable)
            {
                FrostArmor.Launch();
                return;
            }
            if (_mySettings.UseMoltenArmor && !_mySettings.UseFrostArmor && MoltenArmor.KnownSpell && !MoltenArmor.HaveBuff && MoltenArmor.IsSpellUsable)
            {
                MoltenArmor.Launch();
                return;
            }
            if (_mySettings.UseMageArmor && MageArmor.KnownSpell && !_mySettings.UseFrostArmor && !_mySettings.UseMoltenArmor
                && !MageArmor.HaveBuff && MageArmor.IsSpellUsable)
            {
                MageArmor.Launch();
                return;
            }

            if (_mySettings.UseBlazingSpeed && BlazingSpeed.KnownSpell && BlazingSpeed.IsSpellUsable && ObjectManager.Me.GetMove)
            {
                BlazingSpeed.Launch();
            }
        }

        private void AvoidMelee()
        {
            if (ObjectManager.Target.GetDistance < _mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
            {
                Logging.WriteFight("Too Close. Moving Back");
                var maxTimeTimer = new Timer(1000*2);
                MovementsAction.MoveBackward(true);
                while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                    Thread.Sleep(300);
                MovementsAction.MoveBackward(false);
                if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
                {
                    MovementsAction.MoveForward(true);
                    Thread.Sleep(1000);
                    MovementsAction.MoveForward(false);
                    MovementManager.Face(ObjectManager.Target.Position);
                }
            }
        }

        private void DefenseCycle()
        {
            if (_mySettings.UseIncantersWard && IncantersWard.KnownSpell && !IncantersWard.HaveBuff && IncantersWard.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseIncantersWardAtPercentage && ObjectManager.Me.InCombat)
            {
                IncantersWard.Launch();
                return;
            }

            if (_mySettings.UseRingofFrost && RingofFrost.KnownSpell && ObjectManager.GetNumberAttackPlayer() > 2 && RingofFrost.IsSpellUsable
                && ObjectManager.Target.GetDistance < 10)
            {
                SpellManager.CastSpellByIDAndPosition(113724, ObjectManager.Target.Position);
                _onCd = new Timer(1000*10);
                return;
            }
            if (_mySettings.UseFrostNova && FrostNova.KnownSpell && ObjectManager.Target.GetDistance < 12
                && ObjectManager.Me.HealthPercent <= _mySettings.UseFrostNovaAtPercentage)
            {
                if (_mySettings.UseColdSnap && ColdSnap.KnownSpell && !FrostNova.IsSpellUsable && ColdSnap.IsSpellUsable)
                {
                    ColdSnap.Launch();
                    Thread.Sleep(200);
                }

                if (FrostNova.IsSpellUsable)
                {
                    FrostNova.Launch();
                    _onCd = new Timer(1000*8);
                }
                return;
            }
            if (_mySettings.UseIceWard && IceWard.KnownSpell && ObjectManager.Target.GetDistance < 10 && IceWard.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseIceWardAtPercentage)
            {
                IceWard.Launch();
                _onCd = new Timer(1000*5);
                return;
            }
            if (_mySettings.UseConeofCold && ConeofCold.KnownSpell && ObjectManager.Target.GetDistance < 10 && ConeofCold.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseConeofColdAtPercentage)
            {
                ConeofCold.Launch();
                return;
            }
            if (_mySettings.UseBlink && Blink.KnownSpell && ObjectManager.Target.GetDistance < 11 && Blink.IsSpellUsable
                && (FrostNova.TargetHaveBuff || ConeofCold.TargetHaveBuff || IceWard.TargetHaveBuff))
            {
                Blink.Launch();
                return;
            }
            if (_mySettings.UseDeepFreeze && DeepFreeze.KnownSpell && DeepFreeze.IsHostileDistanceGood && DeepFreeze.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseDeepFreezeAtPercentage)
            {
                DeepFreeze.Launch();
                _onCd = new Timer(1000*5);
                return;
            }
            if (_mySettings.UseIceBarrier && IceBarrier.KnownSpell && !IceBarrier.HaveBuff && IceBarrier.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseIceBarrierAtPercentage)
            {
                IceBarrier.Launch();
                return;
            }
            if (_mySettings.UseTemporalShield && TemporalShield.KnownSpell && !TemporalShield.HaveBuff && TemporalShield.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseTemporalShieldAtPercentage && ObjectManager.Me.InCombat)
            {
                TemporalShield.Launch();
                _onCd = new Timer(1000*4);
                return;
            }
            if (_mySettings.UseWarStomp && WarStomp.KnownSpell && WarStomp.IsHostileDistanceGood && WarStomp.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseWarStompAtPercentage)
            {
                WarStomp.Launch();
                _onCd = new Timer(1000*2);
                return;
            }
            if (_mySettings.UseStoneform && Stoneform.KnownSpell && Stoneform.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseStoneformAtPercentage)
            {
                Stoneform.Launch();
                _onCd = new Timer(1000*8);
                return;
            }
            if (_mySettings.UseInvisibility && Invisibility.KnownSpell && Invisibility.IsSpellUsable
                && ObjectManager.GetNumberAttackPlayer() > 3)
            {
                Invisibility.Launch();
                Thread.Sleep(5000);
            }
        }

        private void Heal()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (_mySettings.UseArcaneTorrentForResource && ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable
                && ObjectManager.Me.ManaPercentage <= _mySettings.UseArcaneTorrentForResourceAtPercentage)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (_mySettings.UseGiftoftheNaaru && GiftoftheNaaru.KnownSpell && GiftoftheNaaru.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseGiftoftheNaaruAtPercentage)
            {
                GiftoftheNaaru.Launch();
                return;
            }
            if (_mySettings.UseColdSnap && ColdSnap.KnownSpell && ColdSnap.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseColdSnapAtPercentage)
            {
                ColdSnap.Launch();
                return;
            }
            if (_mySettings.UseConjureManaGem && ObjectManager.Me.ManaPercentage <= _mySettings.UseConjureManaGemAtPercentage
                && ItemsManager.GetItemCountByIdLUA(36799) > 0)
            {
                Logging.WriteFight("Use Mana Gem.");
                Lua.RunMacroText("/use item:36799");
                return;
            }
            if (_mySettings.UseEvocationForHP && _mySettings.UseEvocationGlyph && Evocation.KnownSpell && Evocation.IsSpellUsable
                && !_mySettings.UseRuneofPowerTalent && !_mySettings.UseInvocationTalent
                && ObjectManager.Me.HealthPercent <= _mySettings.UseEvocationForHPAtPercentage)
            {
                Evocation.Launch();
                return;
            }
            if (_mySettings.UseEvocationForMana && Evocation.KnownSpell && !ObjectManager.Me.InCombat && Evocation.IsSpellUsable
                && !_mySettings.UseInvocationTalent && !_mySettings.UseRuneofPowerTalent
                && ObjectManager.Me.ManaPercentage <= _mySettings.UseEvocationForManaAtPercentage)
            {
                Evocation.Launch();
                return;
            }
            if (_mySettings.UseConjureManaGem && ConjureManaGem.KnownSpell && ItemsManager.GetItemCountByIdLUA(36799) == 0
                && ConjureManaGemTimer.IsReady && ConjureManaGem.IsSpellUsable)
            {
                ConjureManaGem.Launch();
                ConjureManaGemTimer = new Timer(1000*60*5);
                return;
            }
            if (_mySettings.UseConjureRefreshment && ConjureRefreshment.KnownSpell && ConjureRefreshmentTimer.IsReady && ConjureRefreshment.IsSpellUsable
                && ItemsManager.GetItemCountByIdLUA(80610) == 0 // 90
                && ItemsManager.GetItemCountByIdLUA(65499) == 0 // 85-89
                && ItemsManager.GetItemCountByIdLUA(43523) == 0 // 84-80
                && ItemsManager.GetItemCountByIdLUA(43518) == 0 // 79-74
                && ItemsManager.GetItemCountByIdLUA(65517) == 0 // 73-64
                && ItemsManager.GetItemCountByIdLUA(65516) == 0 // 63-54
                && ItemsManager.GetItemCountByIdLUA(65515) == 0 // 53-44
                && ItemsManager.GetItemCountByIdLUA(65500) == 0) // 43-38
            {
                ConjureRefreshment.Launch();
                ConjureRefreshmentTimer = new Timer(1000*60*10);
            }
        }

        private void Decast()
        {
            if (_mySettings.UseCounterspell && Counterspell.KnownSpell && Counterspell.IsHostileDistanceGood && Counterspell.IsSpellUsable
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && ObjectManager.Me.HealthPercent <= _mySettings.UseCounterspellAtPercentage)
            {
                Counterspell.Launch();
                return;
            }
            if (_mySettings.UseArcaneTorrentForDecast && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8 && ArcaneTorrent.IsSpellUsable
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && ObjectManager.Me.HealthPercent <= _mySettings.UseArcaneTorrentForDecastAtPercentage)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (_mySettings.UseFrostjaw && Frostjaw.KnownSpell && Frostjaw.IsHostileDistanceGood && Frostjaw.IsSpellUsable
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && ObjectManager.Me.HealthPercent <= _mySettings.UseFrostjawAtPercentage)
            {
                Frostjaw.Launch();
                _onCd = new Timer(1000*8);
            }
        }

        private void DPSBurst()
        {
            if (_mySettings.UseAlterTime && AlterTime.KnownSpell && ObjectManager.Target.GetDistance < 41 && AlterTime.IsSpellUsable && !AlterTime.HaveBuff
                && ObjectManager.Target.InCombat && IcyVeins.HaveBuff && ObjectManager.Me.HaveBuff(57761) && ObjectManager.Me.BuffStack(44544) > 1)
                AlterTime.Launch();

            if (_mySettings.UseTrinketOne && !ItemsManager.IsItemOnCooldown(_firstTrinket.Entry) && ItemsManager.IsUsableItemById(_firstTrinket.Entry))
            {
                ItemsManager.UseItem(_firstTrinket.Name);
                Logging.WriteFight("Use First Trinket Slot");
            }

            if (_mySettings.UseTrinketTwo && !ItemsManager.IsItemOnCooldown(_secondTrinket.Entry) && ItemsManager.IsUsableItemById(_secondTrinket.Entry))
            {
                ItemsManager.UseItem(_secondTrinket.Name);
                Logging.WriteFight("Use Second Trinket Slot");
            }

            if (_mySettings.UseBerserking && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 41 && Berserking.IsSpellUsable)
            {
                Berserking.Launch();
                return;
            }
            if (_mySettings.UseBloodFury && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 41 && BloodFury.IsSpellUsable)
            {
                BloodFury.Launch();
            }

            if (_mySettings.UseLifeblood && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 41 && Lifeblood.IsSpellUsable)
            {
                Lifeblood.Launch();
            }

            if (_mySettings.UseEngGlove && _engineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 41)
            {
                Logging.WriteFight("Use Engineering Gloves.");
                Lua.RunMacroText("/use 10");
                _engineeringTimer = new Timer(1000*60);
                return;
            }

            if (FrozenOrb.IsSpellUsable && FrozenOrb.KnownSpell && FrozenOrb.IsHostileDistanceGood
                && _mySettings.UseFrozenOrb)
            {
                FrozenOrb.Launch();
            }

            if (_mySettings.UseInvocationTalent && Evocation.KnownSpell && ObjectManager.Target.GetDistance < 41 && Evocation.IsSpellUsable && !ObjectManager.Me.HaveBuff(116257))
            {
                Evocation.Launch();
                return;
            }
            if (_mySettings.UseRuneofPowerTalent && Evocation.KnownSpell && ObjectManager.Target.GetDistance < 41 && Evocation.IsSpellUsable
                && !ObjectManager.Me.HaveBuff(116014))
            {
                SpellManager.CastSpellByIDAndPosition(116011, ObjectManager.Me.Position);
            }
            if (_mySettings.UseIcyVeins && IcyVeins.KnownSpell && ObjectManager.Target.GetDistance < 41 && IcyVeins.IsSpellUsable
                && !TimeWarp.HaveBuff)
            {
                IcyVeins.Launch();
            }
            if (_mySettings.UseMirrorImage && MirrorImage.KnownSpell && ObjectManager.Target.GetDistance < 41 && MirrorImage.IsSpellUsable)
            {
                MirrorImage.Launch();
            }
            if (_mySettings.UseTimeWarp && TimeWarp.IsSpellUsable && TimeWarp.KnownSpell && ObjectManager.Target.GetDistance < 41
                && !ObjectManager.Me.HaveBuff(80354) && !ObjectManager.Me.HaveBuff(57724) && !ObjectManager.Me.HaveBuff(57723)
                && !ObjectManager.Me.HaveBuff(95809))
            {
                TimeWarp.Launch();
            }
        }

        private void DPSCycle()
        {
            if (_mySettings.UseIceFloes && IceFloes.KnownSpell && ObjectManager.Me.GetMove && IceFloes.IsSpellUsable)
            {
                IceFloes.Launch();
                return;
            }

            if (_mySettings.UseFlamestrike && Flamestrike.KnownSpell && Flamestrike.IsHostileDistanceGood && Flamestrike.IsSpellUsable
                && FlamestrikeTimer.IsReady && ObjectManager.GetNumberAttackPlayer() > 4)
            {
                SpellManager.CastSpellByIDAndPosition(2120, ObjectManager.Target.Position);
                FlamestrikeTimer = new Timer(1000*8);
                return;
            }
            if (_mySettings.UseArcaneExplosion && ArcaneExplosion.KnownSpell && ArcaneExplosion.IsHostileDistanceGood && ArcaneExplosion.IsSpellUsable
                && ObjectManager.GetNumberAttackPlayer() > 4)
            {
                ArcaneExplosion.Launch();
                return;
            }

            if (_mySettings.UseTierFive && MageBomb.KnownSpell && ObjectManager.Target.GetDistance < 41 && MageBomb.IsSpellUsable
                && !ObjectManager.Target.HaveBuff(114923) && !ObjectManager.Target.HaveBuff(44457))
            {
                MageBomb.Launch();
                return;
            }
            if (_mySettings.UseFreeze && ObjectManager.Me.Level > 9 && FreezeTimer.IsReady && ObjectManager.Target.GetDistance < 41
                && (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0))
            {
                SpellManager.CastSpellByIDAndPosition(33395, ObjectManager.Target.Position);
                FreezeTimer = new Timer(1000*25);
                Thread.Sleep(400);
                return;
            }
            if (_mySettings.UseFrostfireBolt && FrostfireBolt.KnownSpell && FrostfireBolt.IsHostileDistanceGood && FrostfireBolt.IsSpellUsable
                && ObjectManager.Me.HaveBuff(57761))
            {
                FrostfireBolt.Launch();
                return;
            }
            if (_mySettings.UseIceLance && IceLance.KnownSpell && IceLance.IsHostileDistanceGood && IceLance.IsSpellUsable
                && ObjectManager.Me.HaveBuff(44544))
            {
                IceLance.Launch();
                return;
            }
            if (_mySettings.UsePresenceofMind && PresenceofMind.KnownSpell && Frostbolt.IsHostileDistanceGood && PresenceofMind.IsSpellUsable)
            {
                PresenceofMind.Launch();
                Thread.Sleep(400);
                if (_mySettings.UseFrostbolt && Frostbolt.KnownSpell && Frostbolt.IsHostileDistanceGood && Frostbolt.IsSpellUsable)
                    Frostbolt.Launch();
                return;
            }
            if (_mySettings.UseFrostbolt && Frostbolt.KnownSpell && Frostbolt.IsHostileDistanceGood && Frostbolt.IsSpellUsable)
            {
                Frostbolt.Launch();
                return;
            }

            if (_mySettings.UseFrostfireBolt && FrostfireBolt.KnownSpell && FrostfireBolt.IsHostileDistanceGood && FrostfireBolt.IsSpellUsable
                && !Frostbolt.KnownSpell)
            {
                FrostfireBolt.Launch();
            }
        }

        private void Patrolling()
        {
            if (ObjectManager.Me.IsMounted) return;
            Buff();
            Heal();
        }

        #region Nested type: MageFrostSettings

        [Serializable]
        public class MageFrostSettings : Settings
        {
            public bool DoAvoidMelee = false;
            public int DoAvoidMeleeDistance = 0;
            public bool UseAlchFlask = true;
            public bool UseAlterTime = true;
            public bool UseArcaneBrilliance = true;
            public bool UseArcaneExplosion = true;
            public bool UseArcaneTorrentForDecast = true;
            public int UseArcaneTorrentForDecastAtPercentage = 100;
            public bool UseArcaneTorrentForResource = true;
            public int UseArcaneTorrentForResourceAtPercentage = 80;
            public bool UseBerserking = true;
            public bool UseBlazingSpeed = true;
            public bool UseBlink = true;
            public bool UseBlizzard = true;
            public bool UseBloodFury = true;
            public bool UseColdSnap = true;
            public int UseColdSnapAtPercentage = 70;
            public bool UseConeofCold = true;
            public int UseConeofColdAtPercentage = 45;
            public bool UseConjureManaGem = true;
            public int UseConjureManaGemAtPercentage = 40;
            public bool UseConjureRefreshment = true;
            public bool UseCounterspell = true;
            public int UseCounterspellAtPercentage = 100;
            public bool UseDeepFreeze = true;
            public int UseDeepFreezeAtPercentage = 50;
            public bool UseEngGlove = true;
            public bool UseEvocationForHP = true;
            public int UseEvocationForHPAtPercentage = 40;
            public bool UseEvocationForMana = true;
            public int UseEvocationForManaAtPercentage = 60;
            public bool UseEvocationGlyph = false;
            public bool UseFlamestrike = true;
            public bool UseFreeze = true;
            public bool UseFrostArmor = true;
            public bool UseFrostNova = true;
            public int UseFrostNovaAtPercentage = 50;
            public bool UseFrostbolt = true;
            public bool UseFrostfireBolt = true;
            public bool UseFrostjaw = true;
            public int UseFrostjawAtPercentage = 40;
            public bool UseFrozenOrb = true;
            public bool UseGiftoftheNaaru = true;
            public int UseGiftoftheNaaruAtPercentage = 80;
            public bool UseIceBarrier = true;
            public int UseIceBarrierAtPercentage = 95;
            public bool UseIceBlock = true;
            public bool UseIceFloes = true;
            public bool UseIceLance = true;
            public bool UseIceWard = true;
            public int UseIceWardAtPercentage = 45;
            public bool UseIcyVeins = true;
            public bool UseIncantersWard = true;
            public int UseIncantersWardAtPercentage = 95;
            public bool UseInvisibility = true;
            public bool UseInvocationTalent = false;
            public bool UseLifeblood = true;
            public bool UseLowCombat = true;
            public bool UseMageArmor = false;
            public bool UseMirrorImage = true;
            public bool UseMoltenArmor = false;
            public bool UsePresenceofMind = true;
            public bool UseRingofFrost = true;
            public bool UseRuneofPowerTalent = false;
            public bool UseScorch = true;
            public bool UseStoneform = true;
            public int UseStoneformAtPercentage = 80;
            public bool UseSummonWaterElemental = true;
            public bool UseTemporalShield = true;
            public int UseTemporalShieldAtPercentage = 95;
            public bool UseTierFive = true;
            public bool UseTimeWarp = true;
            public bool UseTrinketOne = true;
            public bool UseTrinketTwo = true;
            public bool UseWarStomp = true;
            public int UseWarStompAtPercentage = 80;

            public MageFrostSettings()
            {
                ConfigWinForm(new Point(500, 400), "Mage Frost Settings");
                /* Professions & Racials */
                AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
                AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
                AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
                AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials", "AtPercentage");
                /* Mage Buffs */
                AddControlInWinForm("Use Arcane Brilliance", "UseArcaneBrilliance", "Mage Buffs");
                AddControlInWinForm("Use Blazing Speed", "UseBlazingSpeed", "Mage Buffs");
                AddControlInWinForm("Use Frost Armor", "UseFrostArmor", "Mage Buffs");
                AddControlInWinForm("Use Ice Floes", "UseIceFloes", "Mage Buffs");
                AddControlInWinForm("Use Mage Armor", "UseMageArmor", "Mage Buffs");
                AddControlInWinForm("Use Molten Armor", "UseMoltenArmor", "Mage Buffs");
                /* Offensive Spell */
                AddControlInWinForm("Use Arcane Explosion", "UseArcaneExplosion", "Offensive Spell");
                AddControlInWinForm("Use Blizzard", "UseBlizzard", "Offensive Spell");
                AddControlInWinForm("Use Flamestrike", "UseFlamestrike", "Offensive Spell");
                AddControlInWinForm("Use Pet Freeze Ability", "UseFreeze", "Offensive Spell");
                AddControlInWinForm("Use Frostbolt", "UseFrostbolt", "Offensive Spell");
                AddControlInWinForm("Use Frostfire Bolt", "UseFrostfireBolt", "Offensive Spell");
                AddControlInWinForm("Use Ice Lance", "UseIceLance", "Offensive Spell");
                AddControlInWinForm("Use Summon Water Elemental", "UseSummonWaterElemental", "Offensive Spell");
                /* Offensive Cooldown */
                AddControlInWinForm("Use Alter Time", "UseAlterTime", "Offensive Cooldown");
                AddControlInWinForm("Use Frozen Orb", "UseFrozenOrb", "Offensive Cooldown");
                AddControlInWinForm("Use Icy Veins", "UseIcyVeins", "Offensive Cooldown");
                AddControlInWinForm("Use Mirror Image", "UseMirrorImage", "Offensive Cooldown");
                AddControlInWinForm("Use Presence of Mind", "UsePresenceofMind", "Offensive Cooldown");
                AddControlInWinForm("Use Tier Five Ability", "UseTierFive", "Offensive Cooldown");
                AddControlInWinForm("Use Time Warp", "UseTimeWarp", "Offensive Cooldown");
                /* Defensive Cooldown */
                AddControlInWinForm("Use Blink", "UseBlink", "Defensive Cooldown");
                AddControlInWinForm("Use Cone of Cold", "UseConeofCold", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Counterspell", "UseCounterspell", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Deep Freeze", "UseDeepFreeze", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Frostjaw", "UseFrostjaw", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Frost Nova", "UseFrostNova", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Ice Barrier", "UseIceBarrier", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Ice Block", "UseIceBlock", "Defensive Cooldown");
                AddControlInWinForm("Use Ice Ward", "UseIceWard", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Incanter's Ward", "UseIncantersWard", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Invisibility", "UseInvisibility", "Defensive Cooldown");
                AddControlInWinForm("Use Ring of Frost", "UseRingofFrost", "Defensive Cooldown");
                AddControlInWinForm("Use Temporal Shield", "UseTemporalShield", "Defensive Cooldown", "AtPercentage");
                /* Healing Spell */
                AddControlInWinForm("Use Cold Snap", "UseColdSnap", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Conjure Mana Gem", "UseConjureManaGem", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Conjure Refreshment", "UseConjureRefreshment", "Healing Spell");
                AddControlInWinForm("Use Evocation to regen Health", "UseEvocationForHP", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Evocation to regen Mana", "UseEvocationForMana", "Healing Spell", "AtPercentage");
                /* Game Settings */
                AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
                AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
                AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
                AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
                AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
                AddControlInWinForm("Use Evocation Glyph", "UseEvocationGlyph", "Game Settings");
                AddControlInWinForm("Use Invocation Talent", "UseInvocationTalent", "Game Settings");
                AddControlInWinForm("Use Rune of Power Talent", "UseRuneofPowerTalent", "Game Settings");
                AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
                AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
            }

            public static MageFrostSettings CurrentSetting { get; set; }

            public static MageFrostSettings GetSettings()
            {
                string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Mage_Frost.xml";
                if (File.Exists(currentSettingsFile))
                {
                    return
                        CurrentSetting = Load<MageFrostSettings>(currentSettingsFile);
                }
                return new MageFrostSettings();
            }
        }

        #endregion
    }

    public class MageFire
    {
        private readonly MageFireSettings _mySettings = MageFireSettings.GetSettings();

        #region General Timers & Variables

        private readonly WoWItem _firstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
        private readonly WoWItem _secondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);
        private Timer _engineeringTimer = new Timer(0);
        public int LC = 0;
        private Timer _onCd = new Timer(0);

        #endregion

        #region Professions & Racials

        public readonly Spell Alchemy = new Spell("Alchemy");
        public readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
        public readonly Spell Berserking = new Spell("Berserking");
        public readonly Spell BloodFury = new Spell("Blood Fury");
        public readonly Spell Engineering = new Spell("Engineering");
        public readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
        public readonly Spell Lifeblood = new Spell("Lifeblood");
        public readonly Spell Stoneform = new Spell("Stoneform");
        public readonly Spell WarStomp = new Spell("War Stomp");

        #endregion

        #region Mage Buffs

        public readonly Spell ArcaneBrilliance = new Spell("Arcane Brilliance");
        public readonly Spell BlazingSpeed = new Spell("Blazing Speed");
        public readonly Spell FrostArmor = new Spell("Frost Armor");
        public readonly Spell IceFloes = new Spell("Ice Floes");
        public readonly Spell MageArmor = new Spell("Mage Armor");
        public readonly Spell MoltenArmor = new Spell("Molten Armor");

        #endregion

        #region Offensive Spell

        public readonly Spell ArcaneExplosion = new Spell("Arcane Explosion");
        public readonly Spell DragonsBreath = new Spell("Dragon's Breath");
        public readonly Spell FireBlast = new Spell("Fire Blast");
        public readonly Spell Fireball = new Spell("Fireball");
        public readonly Spell Flamestrike = new Spell("Flamestrike");
        public readonly Spell InfernoBlast = new Spell("Inferno Blast");
        public readonly Spell Pyroblast = new Spell("Pyroblast");
        public readonly Spell Scorch = new Spell("Scorch");
        private Timer FlamestrikeTimer = new Timer(0);

        #endregion

        #region Offensive Cooldown

        public readonly Spell AlterTime = new Spell("Alter Time");
        public readonly Spell Combustion = new Spell("Combustion");
        public readonly Spell FrostBomb = new Spell("Frost Bomb");
        public readonly Spell MageBomb = new Spell("Mage Bomb");
        public readonly Spell MirrorImage = new Spell("Mirror Image");
        public readonly Spell PresenceofMind = new Spell("Presence of Mind");
        public readonly Spell TimeWarp = new Spell("Time Warp");

        #endregion

        #region Defensive Cooldown

        public readonly Spell Blink = new Spell("Blink");
        public readonly Spell ColdSnap = new Spell("Cold Snap");
        public readonly Spell ConeofCold = new Spell("Cone of Cold");
        public readonly Spell Counterspell = new Spell("Counterspell");
        public readonly Spell DeepFreeze = new Spell("Deep Freeze");
        public readonly Spell FrostNova = new Spell("Frost Nova");
        public readonly Spell Frostjaw = new Spell("Frostjaw");
        public readonly Spell IceBarrier = new Spell("Ice Barrier");
        public readonly Spell IceBlock = new Spell("Ice Block");
        public readonly Spell IceWard = new Spell("Ice Ward");
        public readonly Spell IncantersWard = new Spell("Incanter's Ward");
        public readonly Spell Invisibility = new Spell("Invisibility");
        public readonly Spell RingofFrost = new Spell("Ring of Frost");
        public readonly Spell TemporalShield = new Spell("Temporal Shield");

        #endregion

        #region Healing Spell

        public readonly Spell ConjureManaGem = new Spell("Conjure Mana Gem");
        public readonly Spell ConjureRefreshment = new Spell("Conjure Refreshment");
        public readonly Spell Evocation = new Spell("Evocation");
        private Timer ConjureManaGemTimer = new Timer(0);
        private Timer ConjureRefreshmentTimer = new Timer(0);

        #endregion

        public MageFire()
        {
            Main.InternalRange = 30.0f;
            UInt64 lastTarget = 0;

            while (Main.InternalLoop)
            {
                try
                {
                    if (!ObjectManager.Me.IsDeadMe)
                    {
                        if (!ObjectManager.Me.IsMounted)
                        {
                            if (Fight.InFight && ObjectManager.Me.Target > 0)
                            {
                                if (ObjectManager.Me.Target != lastTarget
                                    && (Scorch.IsHostileDistanceGood || Fireball.IsHostileDistanceGood))
                                {
                                    Pull();
                                    lastTarget = ObjectManager.Me.Target;
                                }

                                if (_mySettings.UseLowCombat && ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84)
                                {
                                    LC = 1;
                                    if (ObjectManager.Target.GetDistance < 41)
                                        LowCombat();
                                }
                                else
                                {
                                    LC = 0;
                                    if (ObjectManager.Target.GetDistance < 41)
                                        Combat();
                                }
                            }
                            else
                            {
                                if (!ObjectManager.Me.IsCast)
                                    Patrolling();
                            }
                        }
                    }
                    else
                        Thread.Sleep(500);
                }
                catch
                {
                }
                Thread.Sleep(150);
            }
        }

        private void Pull()
        {
            if (_mySettings.UsePyroblast && Pyroblast.KnownSpell && Pyroblast.IsHostileDistanceGood && Pyroblast.IsSpellUsable
                && ObjectManager.Me.HaveBuff(48108))
            {
                Pyroblast.Launch();
                return;
            }
            if (_mySettings.UsePyroblast && Pyroblast.KnownSpell && Pyroblast.IsHostileDistanceGood && Pyroblast.IsSpellUsable
                && ObjectManager.Me.HaveBuff(48108))
            {
                Pyroblast.Launch();
                return;
            }
            if (_mySettings.UseScorch && Scorch.KnownSpell && Scorch.IsHostileDistanceGood && Scorch.IsSpellUsable)
            {
                Scorch.Launch();
                return;
            }
            if (_mySettings.UseFireball && Fireball.KnownSpell && Fireball.IsHostileDistanceGood && Fireball.IsSpellUsable)
            {
                Fireball.Launch();
            }
        }

        private void LowCombat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            if (_onCd.IsReady)
                DefenseCycle();
            Heal();

            if (_mySettings.UsePyroblast && Pyroblast.KnownSpell && Pyroblast.IsHostileDistanceGood && Pyroblast.IsSpellUsable
                && ObjectManager.Me.HaveBuff(48108))
            {
                Pyroblast.Launch();
                return;
            }
            //Blizzard API calls for Inferno Blast using the Fire Blast function.
            if (_mySettings.UseInfernoBlast && FireBlast.KnownSpell && FireBlast.IsHostileDistanceGood && FireBlast.IsSpellUsable)
            {
                FireBlast.Launch();
                return;
            }
            if (_mySettings.UseFireball && Fireball.KnownSpell && Fireball.IsHostileDistanceGood && Fireball.IsSpellUsable)
            {
                Fireball.Launch();
                return;
            }
            if (_mySettings.UseArcaneExplosion && ArcaneExplosion.KnownSpell && ArcaneExplosion.IsHostileDistanceGood && ArcaneExplosion.IsSpellUsable)
            {
                ArcaneExplosion.Launch();
            }
        }

        private void Combat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            DPSCycle();
            if (_onCd.IsReady)
                DefenseCycle();
            Heal();
            Decast();
            DPSBurst();
            DPSCycle();
        }

        private void Buff()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (_mySettings.UseIceBlock && IceBlock.KnownSpell && ObjectManager.Me.HaveBuff(87023) && !ObjectManager.Me.HaveBuff(41425))
            {
                if (_mySettings.UseColdSnap && ColdSnap.KnownSpell && !IceBlock.IsSpellUsable && ColdSnap.IsSpellUsable)
                {
                    ColdSnap.Launch();
                    Thread.Sleep(400);
                }

                if (IceBlock.IsSpellUsable)
                {
                    IceBlock.Launch();
                    _onCd = new Timer(1000*10);
                    return;
                }
            }

            if (_mySettings.UseArcaneBrilliance && ArcaneBrilliance.KnownSpell && !ArcaneBrilliance.HaveBuff && ArcaneBrilliance.IsSpellUsable
                && !ObjectManager.Me.HaveBuff(61316))
                ArcaneBrilliance.Launch();

            if (_mySettings.UseMoltenArmor && MoltenArmor.KnownSpell && !MoltenArmor.HaveBuff && MoltenArmor.IsSpellUsable)
            {
                MoltenArmor.Launch();
                return;
            }
            if (_mySettings.UseFrostArmor && !_mySettings.UseMoltenArmor && FrostArmor.KnownSpell && !FrostArmor.HaveBuff && FrostArmor.IsSpellUsable)
            {
                FrostArmor.Launch();
                return;
            }
            if (_mySettings.UseMageArmor && MageArmor.KnownSpell && !_mySettings.UseMoltenArmor && !_mySettings.UseFrostArmor
                && !MageArmor.HaveBuff && MageArmor.IsSpellUsable)
            {
                MageArmor.Launch();
            }
            if (_mySettings.UseBlazingSpeed && BlazingSpeed.KnownSpell && ObjectManager.Me.GetMove && BlazingSpeed.IsSpellUsable)
            {
                BlazingSpeed.Launch();
                return;
            }
            if (_mySettings.UseAlchFlask && !ObjectManager.Me.HaveBuff(79638) && !ObjectManager.Me.HaveBuff(79640) && !ObjectManager.Me.HaveBuff(79639) &&
                !ItemsManager.IsItemOnCooldown(75525) && ItemsManager.GetItemCountByIdLUA(75525) > 0)
            {
                ItemsManager.UseItem(75525);
            }
        }

        private void AvoidMelee()
        {
            if (ObjectManager.Target.GetDistance < _mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
            {
                Logging.WriteFight("Too Close. Moving Back");
                var maxTimeTimer = new Timer(1000*2);
                MovementsAction.MoveBackward(true);
                while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                    Thread.Sleep(300);
                MovementsAction.MoveBackward(false);
                if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
                {
                    MovementsAction.MoveForward(true);
                    Thread.Sleep(1000);
                    MovementsAction.MoveForward(false);
                    MovementManager.Face(ObjectManager.Target.Position);
                }
            }
        }

        private void DefenseCycle()
        {
            if (_mySettings.UseIncantersWard && IncantersWard.KnownSpell && !IncantersWard.HaveBuff && IncantersWard.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseIncantersWardAtPercentage && ObjectManager.Me.InCombat)
            {
                IncantersWard.Launch();
                return;
            }

            if (_mySettings.UseRingofFrost && RingofFrost.KnownSpell && ObjectManager.GetNumberAttackPlayer() > 2 && RingofFrost.IsSpellUsable
                && ObjectManager.Target.GetDistance < 10)
            {
                SpellManager.CastSpellByIDAndPosition(113724, ObjectManager.Target.Position);
                _onCd = new Timer(1000*10);
                return;
            }
            if (_mySettings.UseFrostNova && FrostNova.KnownSpell && ObjectManager.Target.GetDistance < 12
                && ObjectManager.Me.HealthPercent <= _mySettings.UseFrostNovaAtPercentage)
            {
                if (_mySettings.UseColdSnap && ColdSnap.KnownSpell && !FrostNova.IsSpellUsable && ColdSnap.IsSpellUsable)
                {
                    ColdSnap.Launch();
                    Thread.Sleep(200);
                }

                if (FrostNova.IsSpellUsable)
                {
                    FrostNova.Launch();
                    _onCd = new Timer(1000*8);
                }
                return;
            }
            if (_mySettings.UseIceWard && IceWard.KnownSpell && ObjectManager.Target.GetDistance < 10 && IceWard.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseIceWardAtPercentage)
            {
                IceWard.Launch();
                _onCd = new Timer(1000*5);
                return;
            }
            if (_mySettings.UseConeofCold && ConeofCold.KnownSpell && ObjectManager.Target.GetDistance < 10 && ConeofCold.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseConeofColdAtPercentage)
            {
                ConeofCold.Launch();
                return;
            }
            if (_mySettings.UseBlink && Blink.KnownSpell && ObjectManager.Target.GetDistance < 11 && Blink.IsSpellUsable
                && (FrostNova.TargetHaveBuff || ConeofCold.TargetHaveBuff || IceWard.TargetHaveBuff))
            {
                Blink.Launch();
                return;
            }
            if (_mySettings.UseDeepFreeze && DeepFreeze.KnownSpell && DeepFreeze.IsHostileDistanceGood && DeepFreeze.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseDeepFreezeAtPercentage)
            {
                DeepFreeze.Launch();
                _onCd = new Timer(1000*5);
                return;
            }
            if (_mySettings.UseIceBarrier && IceBarrier.KnownSpell && !IceBarrier.HaveBuff && IceBarrier.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseIceBarrierAtPercentage)
            {
                IceBarrier.Launch();
                return;
            }
            if (_mySettings.UseTemporalShield && TemporalShield.KnownSpell && !TemporalShield.HaveBuff && TemporalShield.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseTemporalShieldAtPercentage && ObjectManager.Me.InCombat)
            {
                TemporalShield.Launch();
                _onCd = new Timer(1000*4);
                return;
            }
            if (_mySettings.UseWarStomp && WarStomp.KnownSpell && WarStomp.IsHostileDistanceGood && WarStomp.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseWarStompAtPercentage)
            {
                WarStomp.Launch();
                _onCd = new Timer(1000*2);
                return;
            }
            if (_mySettings.UseStoneform && Stoneform.KnownSpell && Stoneform.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseStoneformAtPercentage)
            {
                Stoneform.Launch();
                _onCd = new Timer(1000*8);
                return;
            }
            if (_mySettings.UseInvisibility && Invisibility.KnownSpell && Invisibility.IsSpellUsable
                && ObjectManager.GetNumberAttackPlayer() > 3)
            {
                Invisibility.Launch();
                Thread.Sleep(5000);
            }
        }

        private void Heal()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (_mySettings.UseArcaneTorrentForResource && ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable
                && ObjectManager.Me.ManaPercentage <= _mySettings.UseArcaneTorrentForResourceAtPercentage)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (_mySettings.UseGiftoftheNaaru && GiftoftheNaaru.KnownSpell && GiftoftheNaaru.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseGiftoftheNaaruAtPercentage)
            {
                GiftoftheNaaru.Launch();
                return;
            }
            if (_mySettings.UseColdSnap && ColdSnap.KnownSpell && ColdSnap.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseColdSnapAtPercentage)
            {
                ColdSnap.Launch();
                return;
            }
            if (_mySettings.UseConjureManaGem && ObjectManager.Me.ManaPercentage <= _mySettings.UseConjureManaGemAtPercentage
                && ItemsManager.GetItemCountByIdLUA(36799) > 0)
            {
                Logging.WriteFight("Use Mana Gem.");
                Lua.RunMacroText("/use item:36799");
                return;
            }
            if (_mySettings.UseEvocationForHP && _mySettings.UseEvocationGlyph && Evocation.KnownSpell && Evocation.IsSpellUsable
                && !_mySettings.UseRuneofPowerTalent && !_mySettings.UseInvocationTalent
                && ObjectManager.Me.HealthPercent <= _mySettings.UseEvocationForHPAtPercentage)
            {
                Evocation.Launch();
                return;
            }
            if (_mySettings.UseEvocationForMana && Evocation.KnownSpell && !ObjectManager.Me.InCombat && Evocation.IsSpellUsable
                && !_mySettings.UseInvocationTalent && !_mySettings.UseRuneofPowerTalent
                && ObjectManager.Me.ManaPercentage <= _mySettings.UseEvocationForManaAtPercentage)
            {
                Evocation.Launch();
                return;
            }
            if (_mySettings.UseConjureManaGem && ConjureManaGem.KnownSpell && ItemsManager.GetItemCountByIdLUA(36799) == 0
                && ConjureManaGemTimer.IsReady && ConjureManaGem.IsSpellUsable)
            {
                ConjureManaGem.Launch();
                ConjureManaGemTimer = new Timer(1000*60*5);
                return;
            }
            if (_mySettings.UseConjureRefreshment && ConjureRefreshment.KnownSpell && ConjureRefreshmentTimer.IsReady && ConjureRefreshment.IsSpellUsable
                && ItemsManager.GetItemCountByIdLUA(80610) == 0 // 90
                && ItemsManager.GetItemCountByIdLUA(65499) == 0 // 85-89
                && ItemsManager.GetItemCountByIdLUA(43523) == 0 // 84-80
                && ItemsManager.GetItemCountByIdLUA(43518) == 0 // 79-74
                && ItemsManager.GetItemCountByIdLUA(65517) == 0 // 73-64
                && ItemsManager.GetItemCountByIdLUA(65516) == 0 // 63-54
                && ItemsManager.GetItemCountByIdLUA(65515) == 0 // 53-44
                && ItemsManager.GetItemCountByIdLUA(65500) == 0) // 43-38
            {
                ConjureRefreshment.Launch();
                ConjureRefreshmentTimer = new Timer(1000*60*10);
            }
        }

        private void Decast()
        {
            if (_mySettings.UseCounterspell && Counterspell.KnownSpell && Counterspell.IsHostileDistanceGood && Counterspell.IsSpellUsable
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && ObjectManager.Me.HealthPercent <= _mySettings.UseCounterspellAtPercentage)
            {
                Counterspell.Launch();
                return;
            }
            if (_mySettings.UseArcaneTorrentForDecast && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8 && ArcaneTorrent.IsSpellUsable
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && ObjectManager.Me.HealthPercent <= _mySettings.UseArcaneTorrentForDecastAtPercentage)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (_mySettings.UseFrostjaw && Frostjaw.KnownSpell && Frostjaw.IsHostileDistanceGood && Frostjaw.IsSpellUsable
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && ObjectManager.Me.HealthPercent <= _mySettings.UseFrostjawAtPercentage)
            {
                Frostjaw.Launch();
                _onCd = new Timer(1000*8);
            }
        }

        private void DPSBurst()
        {
            if (_mySettings.UseAlterTime && AlterTime.KnownSpell && ObjectManager.Target.GetDistance < 41 && AlterTime.IsSpellUsable && !AlterTime.HaveBuff &&
                ObjectManager.Target.InCombat && ObjectManager.Me.HaveBuff(48108))
            {
                AlterTime.Launch();
            }

            if (_mySettings.UseTrinketOne && !ItemsManager.IsItemOnCooldown(_firstTrinket.Entry) && ItemsManager.IsUsableItemById(_firstTrinket.Entry))
            {
                ItemsManager.UseItem(_firstTrinket.Name);
                Logging.WriteFight("Use First Trinket Slot");
            }

            if (_mySettings.UseTrinketTwo && !ItemsManager.IsItemOnCooldown(_secondTrinket.Entry) && ItemsManager.IsUsableItemById(_secondTrinket.Entry))
            {
                ItemsManager.UseItem(_secondTrinket.Name);
                Logging.WriteFight("Use Second Trinket Slot");
            }

            if (_mySettings.UseBerserking && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 41 && Berserking.IsSpellUsable)
            {
                Berserking.Launch();
            }
            else if (_mySettings.UseBloodFury && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 41 && BloodFury.IsSpellUsable)
            {
                BloodFury.Launch();
            }
            if (_mySettings.UseLifeblood && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 41 && Lifeblood.IsSpellUsable)
            {
                Lifeblood.Launch();
            }
            if (_mySettings.UseEngGlove && _engineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 41)
            {
                Logging.WriteFight("Use Engineering Gloves.");
                Lua.RunMacroText("/use 10");
                _engineeringTimer = new Timer(1000*60);
            }
            if (_mySettings.UseInvocationTalent && Evocation.KnownSpell && ObjectManager.Target.GetDistance < 41 && Evocation.IsSpellUsable && !ObjectManager.Me.HaveBuff(116257))
            {
                Evocation.Launch();
                return;
            }
            if (_mySettings.UseRuneofPowerTalent && Evocation.KnownSpell && ObjectManager.Target.GetDistance < 41 && Evocation.IsSpellUsable
                && !ObjectManager.Me.HaveBuff(116014))
            {
                SpellManager.CastSpellByIDAndPosition(116011, ObjectManager.Me.Position);
            }
            if (_mySettings.UseCombustion && Combustion.KnownSpell && Combustion.IsHostileDistanceGood && Combustion.IsSpellUsable
                && ObjectManager.Target.HaveBuff(12654))
            {
                Combustion.Launch();
            }
            if (_mySettings.UseMirrorImage && MirrorImage.KnownSpell && ObjectManager.Target.GetDistance < 41 && MirrorImage.IsSpellUsable)
            {
                MirrorImage.Launch();
            }
            if (_mySettings.UseTimeWarp && TimeWarp.IsSpellUsable && TimeWarp.KnownSpell && ObjectManager.Target.GetDistance < 41
                && !ObjectManager.Me.HaveBuff(80354) && !ObjectManager.Me.HaveBuff(57724) && !ObjectManager.Me.HaveBuff(57723)
                && !ObjectManager.Me.HaveBuff(95809))
            {
                TimeWarp.Launch();
            }
        }

        private void DPSCycle()
        {
            if (_mySettings.UseIceFloes && IceFloes.KnownSpell && ObjectManager.Me.GetMove && IceFloes.IsSpellUsable)
            {
                IceFloes.Launch();
                return;
            }

            if (_mySettings.UseFlamestrike && Flamestrike.KnownSpell && Flamestrike.IsHostileDistanceGood && Flamestrike.IsSpellUsable
                && ObjectManager.GetNumberAttackPlayer() > 4 && FlamestrikeTimer.IsReady)
            {
                SpellManager.CastSpellByIDAndPosition(2120, ObjectManager.Target.Position);
                FlamestrikeTimer = new Timer(1000*8);
                return;
            }
            if (_mySettings.UseArcaneExplosion && ArcaneExplosion.KnownSpell && ArcaneExplosion.IsHostileDistanceGood && ArcaneExplosion.IsSpellUsable
                && ObjectManager.GetNumberAttackPlayer() > 4)
            {
                ArcaneExplosion.Launch();
                return;
            }

            if (_mySettings.UseTierFive && MageBomb.KnownSpell && ObjectManager.Target.GetDistance < 41 && MageBomb.IsSpellUsable
                && !ObjectManager.Target.HaveBuff(114954) && !ObjectManager.Target.HaveBuff(44457))
            {
                MageBomb.Launch();
                return;
            }
            if (_mySettings.UsePyroblast && Pyroblast.KnownSpell && Pyroblast.IsHostileDistanceGood && Pyroblast.IsSpellUsable
                && ObjectManager.Me.HaveBuff(48108))
            {
                Pyroblast.Launch();
                return;
            }
            if (_mySettings.UsePresenceofMind && PresenceofMind.KnownSpell && Pyroblast.IsHostileDistanceGood && PresenceofMind.IsSpellUsable)
            {
                PresenceofMind.Launch();
                Thread.Sleep(400);
                if (_mySettings.UsePyroblast && Pyroblast.KnownSpell && Pyroblast.IsHostileDistanceGood && Pyroblast.IsSpellUsable)
                    Pyroblast.Launch();
                return;
            }
            //Blizzard API calls for Inferno Blast using the Fire Blast function.
            if (_mySettings.UseInfernoBlast && FireBlast.KnownSpell && FireBlast.IsHostileDistanceGood && FireBlast.IsSpellUsable
                && ObjectManager.Me.HaveBuff(48107))
            {
                FireBlast.Launch();
                return;
            }
            if (_mySettings.UseScorch && Scorch.KnownSpell && Scorch.IsHostileDistanceGood && Scorch.IsSpellUsable
                && ObjectManager.Me.GetMove && !IceFloes.HaveBuff)
            {
                Scorch.Launch();
                return;
            }
            if (_mySettings.UseFireball && Fireball.KnownSpell && Fireball.IsHostileDistanceGood && Fireball.IsSpellUsable
                && (!ObjectManager.Me.HaveBuff(48107) || !_mySettings.UseInfernoBlast || !InfernoBlast.IsSpellUsable)
                && (!ObjectManager.Me.HaveBuff(48108) || !_mySettings.UsePyroblast))
            {
                Fireball.Launch();
            }
        }

        private void Patrolling()
        {
            if (ObjectManager.Me.IsMounted) return;
            Buff();
            Heal();
        }

        #region Nested type: MageFireSettings

        [Serializable]
        public class MageFireSettings : Settings
        {
            public bool DoAvoidMelee = false;
            public int DoAvoidMeleeDistance = 0;
            public bool UseAlchFlask = true;
            public bool UseAlterTime = true;
            public bool UseArcaneBrilliance = true;
            public bool UseArcaneExplosion = true;
            public bool UseArcaneTorrentForDecast = true;
            public int UseArcaneTorrentForDecastAtPercentage = 100;
            public bool UseArcaneTorrentForResource = true;
            public int UseArcaneTorrentForResourceAtPercentage = 80;
            public bool UseBerserking = true;
            public bool UseBlazingSpeed = true;
            public bool UseBlink = true;
            public bool UseBloodFury = true;
            public bool UseColdSnap = true;
            public int UseColdSnapAtPercentage = 70;
            public bool UseCombustion = true;
            public bool UseConeofCold = true;
            public int UseConeofColdAtPercentage = 45;
            public bool UseConjureManaGem = true;
            public int UseConjureManaGemAtPercentage = 40;
            public bool UseConjureRefreshment = true;
            public bool UseCounterspell = true;
            public int UseCounterspellAtPercentage = 100;
            public bool UseDeepFreeze = true;
            public int UseDeepFreezeAtPercentage = 50;
            public bool UseDragonsBreath = true;
            public bool UseEngGlove = true;
            public bool UseEvocationForHP = true;
            public int UseEvocationForHPAtPercentage = 40;
            public bool UseEvocationForMana = true;
            public int UseEvocationForManaAtPercentage = 60;
            public bool UseEvocationGlyph = false;
            public bool UseFireball = true;
            public bool UseFlamestrike = true;
            public bool UseFrostArmor = false;
            public bool UseFrostNova = true;
            public int UseFrostNovaAtPercentage = 50;
            public bool UseFrostjaw = true;
            public int UseFrostjawAtPercentage = 40;
            public bool UseFrozenOrb = true;
            public bool UseGiftoftheNaaru = true;
            public int UseGiftoftheNaaruAtPercentage = 80;
            public bool UseIceBarrier = true;
            public int UseIceBarrierAtPercentage = 95;
            public bool UseIceBlock = true;
            public bool UseIceFloes = false;
            public bool UseIceWard = true;
            public int UseIceWardAtPercentage = 45;
            public bool UseIncantersWard = true;
            public int UseIncantersWardAtPercentage = 95;
            public bool UseInfernoBlast = true;
            public bool UseInvisibility = true;
            public bool UseInvocationTalent = false;
            public bool UseLifeblood = true;
            public bool UseLowCombat = true;
            public bool UseMageArmor = false;
            public bool UseMirrorImage = true;
            public bool UseMoltenArmor = true;
            public bool UsePresenceofMind = true;
            public bool UsePyroblast = true;
            public bool UseRingofFrost = true;
            public bool UseRuneofPowerTalent = false;
            public bool UseScorch = true;
            public bool UseStoneform = true;
            public int UseStoneformAtPercentage = 80;
            public bool UseTemporalShield = true;
            public int UseTemporalShieldAtPercentage = 95;
            public bool UseTierFive = true;
            public bool UseTimeWarp = true;
            public bool UseTrinketOne = true;
            public bool UseTrinketTwo = true;
            public bool UseWarStomp = true;
            public int UseWarStompAtPercentage = 80;

            public MageFireSettings()
            {
                ConfigWinForm(new Point(500, 400), "Mage Fire Settings");
                /* Professions & Racials */
                AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
                AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
                AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
                AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials", "AtPercentage");
                /* Mage Buffs */
                AddControlInWinForm("Use Arcane Brilliance", "UseArcaneBrilliance", "Mage Buffs");
                AddControlInWinForm("Use Blazing Speed", "UseBlazingSpeed", "Mage Buffs");
                AddControlInWinForm("Use Frost Armor", "UseFrostArmor", "Mage Buffs");
                AddControlInWinForm("Use Ice Floes", "UseIceFloes", "Mage Buffs");
                AddControlInWinForm("Use Mage Armor", "UseMageArmor", "Mage Buffs");
                AddControlInWinForm("Use Molten Armor", "UseMoltenArmor", "Mage Buffs");
                /* Offensive Spell */
                AddControlInWinForm("Use Arcane Explosion", "UseArcaneExplosion", "Offensive Spell");
                AddControlInWinForm("Use Dragon's Breath", "UseDragonsBreath", "Offensive Spell");
                AddControlInWinForm("Use Fireball", "UseFireball", "Offensive Spell");
                AddControlInWinForm("Use Flamestrike", "UseFlamestrike", "Offensive Spell");
                AddControlInWinForm("Use Inferno Blast", "UseInfernoBlast", "Offensive Spell");
                AddControlInWinForm("Use Pyroblast", "UsePyroblast", "Offensive Spell");
                AddControlInWinForm("Use Scorch", "UseScorch", "Offensive Spell");
                /* Offensive Cooldown */
                AddControlInWinForm("Use Alter Time", "UseAlterTime", "Offensive Cooldown");
                AddControlInWinForm("Use Combustion", "UseCombustion", "Offensive Cooldown");
                AddControlInWinForm("Use Frozen Orb", "UseFrozenOrb", "Offensive Cooldown");
                AddControlInWinForm("Use Mirror Image", "UseMirrorImage", "Offensive Cooldown");
                AddControlInWinForm("Use Presence of Mind", "UsePresenceofMind", "Offensive Cooldown");
                AddControlInWinForm("Use Tier Five Talent", "UseTierFive", "Offensive Cooldown");
                AddControlInWinForm("Use Time Warp", "UseTimeWarp", "Offensive Cooldown");
                /* Defensive Cooldown */
                AddControlInWinForm("Use Blink", "UseBlink", "Defensive Cooldown");
                AddControlInWinForm("Use Cone of Cold", "UseConeofCold", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Counterspell", "UseCounterspell", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use DeepFreeze", "UseDeepFreeze", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Frostjaw", "UseFrostjaw", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Fros Nova", "UseFrostNova", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Ice Barrier", "UseIceBarrier", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Ice Block", "UseIceBlock", "Defensive Cooldown");
                AddControlInWinForm("Use Ice Ward", "UseIceWard", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Incanter's Ward", "UseIncantersWard", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Invisibility", "UseInvisibility", "Defensive Cooldown");
                AddControlInWinForm("Use Ring of Frost", "UseRingofFrost", "Defensive Cooldown");
                AddControlInWinForm("Use Temporal Shield", "UseTemporalShield", "Defensive Cooldown", "AtPercentage");
                /* Healing Spell */
                AddControlInWinForm("Use Cold Snap", "UseColdSnap", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Conjure Mana Gem", "UseConjureManaGem", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Conjure Refreshment", "UseConjureRefreshment", "Healing Spell");
                AddControlInWinForm("Use Evocation to regen Health", "UseEvocationForHP", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Evocation to regen Mana", "UseEvocationForMana", "Healing Spell", "AtPercentage");
                /* Game Settings */
                AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
                AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
                AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
                AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
                AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
                AddControlInWinForm("Use Evocation Glyph", "UseEvocationGlyph", "Game Settings");
                AddControlInWinForm("Use Invocation Talent", "UseInvocationTalent", "Game Settings");
                AddControlInWinForm("Use Rune of Power Talent", "UseRuneofPowerTalent", "Game Settings");
                AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
                AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
            }

            public static MageFireSettings currentSetting { get; set; }

            public static MageFireSettings GetSettings()
            {
                string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Mage_Fire.xml";
                if (File.Exists(currentSettingsFile))
                {
                    return
                        currentSetting = Load<MageFireSettings>(currentSettingsFile);
                }
                return new MageFireSettings();
            }
        }

        #endregion
    }

    #endregion

    #region Warlock

    public class WarlockDemonology
    {
        private readonly WarlockDemonologySettings _mySettings = WarlockDemonologySettings.GetSettings();

        #region General Timers & Variables

        private readonly WoWItem _firstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
        private readonly WoWItem _secondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);
        private Timer _engineeringTimer = new Timer(0);
        public int LC = 0;
        private Timer _onCd = new Timer(0);

        #endregion

        #region Professions & Racials

        public readonly Spell Alchemy = new Spell("Alchemy");
        public readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
        public readonly Spell Berserking = new Spell("Berserking");
        public readonly Spell BloodFury = new Spell("Blood Fury");
        public readonly Spell Engineering = new Spell("Engineering");
        public readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
        public readonly Spell Lifeblood = new Spell("Lifeblood");
        public readonly Spell Stoneform = new Spell("Stoneform");
        public readonly Spell WarStomp = new Spell("War Stomp");

        #endregion

        #region Warlock Buffs

        public readonly Spell CurseofEnfeeblement = new Spell("Curse of Enfeeblement");
        public readonly Spell CurseoftheElements = new Spell("Curse of the Elements");
        public readonly Spell DarkIntent = new Spell("Dark Intent");
        public readonly Spell GrimoireofSacrifice = new Spell("Grimoire of Sacrifice");
        public readonly Spell Metamorphosis = new Spell("Metamorphosis");
        public readonly Spell SoulLink = new Spell("Soul Link");
        public readonly Spell Soulstone = new Spell("Soulstone");

        #endregion

        #region Offensive Spell

        public readonly Spell CarrionSwarm = new Spell("Carrion Swarm");
        public readonly Spell CommandDemon = new Spell("Command Demon");
        public readonly Spell Corruption = new Spell("Corruption");
        public readonly Spell Doom = new Spell("Doom");
        public readonly Spell FelFlame = new Spell("Fel Flame");
        public readonly Spell HandofGuldan = new Spell("Hand of Gul'dan");
        public readonly Spell HarvestLife = new Spell("Harvest Life");
        public readonly Spell Hellfire = new Spell("Hellfire");
        public readonly Spell ImmolationAura = new Spell("Immolation Aura");
        public readonly Spell ShadowBolt = new Spell("Shadow Bolt");
        public readonly Spell SoulFire = new Spell("Soul Fire");
        public readonly Spell SummonFelguard = new Spell("Summon Felguard");
        public readonly Spell SummonFelhunter = new Spell("Summon Felhunter");
        public readonly Spell SummonImp = new Spell("Summon Imp");
        public readonly Spell SummonSuccubus = new Spell("Summon Succubus");
        public readonly Spell SummonVoidwalker = new Spell("Summon Voidwalker");
        public readonly Spell TouchofChaos = new Spell("Touch of Chaos");
        public readonly Spell VoidRay = new Spell("Void Ray");
        private Timer DoomTimer = new Timer(0);

        #endregion

        #region Offensive Cooldown

        public readonly Spell ArchimondesVengeance = new Spell("Archimonde's Vengeance");
        public readonly Spell DarkSoul = new Spell("Dark Soul");
        public readonly Spell GrimoireofService = new Spell("Grimoire of Service");
        public readonly Spell SummonDoomguard = new Spell("Summon Doomguard");
        public readonly Spell SummonInfernal = new Spell("Summon Infernal");

        #endregion

        #region Defensive Cooldown

        public readonly Spell DarkBargain = new Spell("Dark Bargain");
        public readonly Spell HowlofTerror = new Spell("HowlofTerror");
        public readonly Spell SacrificialPact = new Spell("Sacrificial Pact");
        public readonly Spell Shadowfury = new Spell("Shadowfury");
        public readonly Spell TwilightWard = new Spell("Twilight Ward");
        public readonly Spell UnboundWill = new Spell("Unbound Will");
        public readonly Spell UnendingResolve = new Spell("Unending Resolve");

        #endregion

        #region Healing Spell

        public readonly Spell CreateHealthstone = new Spell("Create Healthstone");
        public readonly Spell DarkRegeneration = new Spell("Dark Regeneration");
        public readonly Spell DrainLife = new Spell("Drain Life");
        public readonly Spell HealthFunnel = new Spell("Health Funnel");
        public readonly Spell LifeTap = new Spell("Life Tap");
        public readonly Spell MortalCoil = new Spell("Mortal Coil");
        private Timer HealthstoneTimer = new Timer(0);

        #endregion

        public WarlockDemonology()
        {
            Main.InternalRange = 30.0f;
            UInt64 lastTarget = 0;

            while (Main.InternalLoop)
            {
                try
                {
                    if (!ObjectManager.Me.IsDeadMe)
                    {
                        if (!ObjectManager.Me.IsMounted)
                        {
                            if (Fight.InFight && ObjectManager.Me.Target > 0)
                            {
                                if (ObjectManager.Me.Target != lastTarget
                                    && (Doom.IsHostileDistanceGood || Corruption.IsHostileDistanceGood))
                                {
                                    Pull();
                                    lastTarget = ObjectManager.Me.Target;
                                }

                                if (_mySettings.UseLowCombat && ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84)
                                {
                                    LC = 1;
                                    if (ObjectManager.Target.GetDistance < 41)
                                        LowCombat();
                                }
                                else
                                {
                                    LC = 0;
                                    if (ObjectManager.Target.GetDistance < 41)
                                        Combat();
                                }
                                break;
                            }
                            if (!ObjectManager.Me.IsCast)
                                Patrolling();
                        }
                    }
                    else
                        Thread.Sleep(500);
                }
                catch
                {
                }
                Thread.Sleep(250);
            }
        }

        private void Pull()
        {
            //Blizzard API calls for Doom using the Corruption Function
            if (_mySettings.UseDoom && Corruption.KnownSpell && Corruption.IsHostileDistanceGood && Corruption.IsSpellUsable
                && ObjectManager.Me.DemonicFury > 199)
            {
                if (_mySettings.UseMetamorphosis && Metamorphosis.KnownSpell && !Metamorphosis.HaveBuff && Metamorphosis.IsSpellUsable)
                {
                    Metamorphosis.Launch();
                    Thread.Sleep(400);
                    Corruption.Launch();
                    DoomTimer = new Timer(1000*60);
                }

                if (Metamorphosis.HaveBuff)
                {
                    Thread.Sleep(2500);
                    Metamorphosis.Launch();
                }
                return;
            }
        }

        private void LowCombat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            if (_onCd.IsReady)
                DefenseCycle();
            Heal();

            if (_mySettings.UseLifeTap && LifeTap.KnownSpell && LifeTap.IsSpellUsable
                && ObjectManager.Me.ManaPercentage <= _mySettings.UseLifeTapAtPercentage)
            {
                LifeTap.Launch();
                return;
            }
            if (_mySettings.UseFelFlame && FelFlame.KnownSpell && FelFlame.IsHostileDistanceGood && FelFlame.IsSpellUsable)
            {
                FelFlame.Launch();
                return;
            }
            if (_mySettings.UseHellfire && Hellfire.KnownSpell && Hellfire.IsHostileDistanceGood && Hellfire.IsSpellUsable)
            {
                Hellfire.Launch();
                Thread.Sleep(200);
                while (ObjectManager.Me.IsCast && ObjectManager.Target.HealthPercent > 0)
                    Thread.Sleep(200);
            }
        }

        private void Combat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            DPSCycle();
            if (_onCd.IsReady && (ObjectManager.Me.HealthPercent <= _mySettings.UseUnendingResolveAtPercentage || ObjectManager.Me.HealthPercent <= _mySettings.UseHowlofTerrorAtPercentage
                                 || ObjectManager.Me.HealthPercent <= _mySettings.UseDarkBargainAtPercentage ||
                                 ObjectManager.Me.HealthPercent <= _mySettings.UseSacrificialPactAtPercentage
                                 || ObjectManager.Me.HealthPercent <= _mySettings.UseShadowfuryAtPercentage || ObjectManager.Me.HealthPercent <= _mySettings.UseWarStompAtPercentage
                                 || ObjectManager.Me.HealthPercent <= _mySettings.UseStoneformAtPercentage))
                DefenseCycle();
            if (ObjectManager.Me.ManaPercentage <= _mySettings.UseArcaneTorrentForResourceAtPercentage || ObjectManager.Me.HealthPercent <= _mySettings.UseGiftoftheNaaruAtPercentage
                || ObjectManager.Me.HealthPercent <= _mySettings.UseDarkRegenerationAtPercentage || ObjectManager.Me.HealthPercent <= _mySettings.UseCreateHealthstoneAtPercentage
                || ObjectManager.Me.HealthPercent <= _mySettings.UseMortalCoilAtPercentage || ObjectManager.Me.HealthPercent <= _mySettings.UseDrainLifeAtPercentage)
                Heal();
            Decast();
            DPSBurst();
            DPSCycle();
        }

        private void Buff()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            Pet();

            if (_mySettings.UseDarkIntent && DarkIntent.KnownSpell && !DarkIntent.HaveBuff && DarkIntent.IsSpellUsable)
                DarkIntent.Launch();

            if (_mySettings.UseSoulLink && SoulLink.KnownSpell && !SoulLink.HaveBuff && SoulLink.IsSpellUsable
                && (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0) && ObjectManager.Me.InCombat)
                SoulLink.Launch();

            if (_mySettings.UseSoulstone && Soulstone.KnownSpell && !Soulstone.HaveBuff && Soulstone.IsSpellUsable)
                Soulstone.Launch();

            if (_mySettings.UseCreateHealthstone && CreateHealthstone.KnownSpell && CreateHealthstone.IsSpellUsable
                && ItemsManager.GetItemCountByIdLUA(5512) == 0)
            {
                Logging.WriteFight(" - Create Healthstone - ");
                CreateHealthstone.Launch();
                while (ObjectManager.Me.IsCast)
                    Thread.Sleep(200);
            }

            if (_mySettings.UseAlchFlask && !ObjectManager.Me.HaveBuff(79638) && !ObjectManager.Me.HaveBuff(79640) && !ObjectManager.Me.HaveBuff(79639)
                && !ItemsManager.IsItemOnCooldown(75525) && ItemsManager.GetItemCountByIdLUA(75525) > 0)
                ItemsManager.UseItem(75525);
        }

        private void Pet()
        {
            if (_mySettings.UseHealthFunnel && HealthFunnel.KnownSpell && ObjectManager.Pet.HealthPercent > 0 && HealthFunnel.IsSpellUsable
                && ObjectManager.Pet.HealthPercent < 50)
            {
                HealthFunnel.Launch();
                while (ObjectManager.Me.IsCast)
                {
                    if (ObjectManager.Pet.HealthPercent > 85 || ObjectManager.Pet.IsDead)
                        break;
                    Thread.Sleep(100);
                }
            }

            if (_mySettings.UseSummonFelhunter && SummonFelhunter.KnownSpell && !GrimoireofSacrifice.HaveBuff && SummonFelhunter.IsSpellUsable
                && ObjectManager.Me.InCombat && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0))
            {
                Logging.WriteFight(" - PET DEAD - ");
                SummonFelhunter.Launch();
            }
            else if (_mySettings.UseSummonFelguard && SummonFelguard.KnownSpell && !GrimoireofSacrifice.HaveBuff && SummonFelguard.IsSpellUsable
                     && ObjectManager.Me.InCombat && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0))
            {
                Logging.WriteFight(" - PET DEAD - ");
                SummonFelguard.Launch();
            }
            else if (_mySettings.UseSummonImp && SummonImp.KnownSpell && !GrimoireofSacrifice.HaveBuff && SummonImp.IsSpellUsable
                     && ObjectManager.Me.InCombat && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0))
            {
                Logging.WriteFight(" - PET DEAD - ");
                SummonImp.Launch();
            }
            else if (_mySettings.UseSummonVoidwalker && SummonVoidwalker.KnownSpell && !GrimoireofSacrifice.HaveBuff && SummonVoidwalker.IsSpellUsable
                     && ObjectManager.Me.InCombat && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0))
            {
                Logging.WriteFight(" - PET DEAD - ");
                SummonVoidwalker.Launch();
            }
            else if (_mySettings.UseSummonSuccubus && SummonSuccubus.KnownSpell && !GrimoireofSacrifice.HaveBuff && SummonSuccubus.IsSpellUsable
                     && ObjectManager.Me.InCombat && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0))
            {
                Logging.WriteFight(" - PET DEAD - ");
                SummonSuccubus.Launch();
            }
            Thread.Sleep(200);
            if (_mySettings.UseGrimoireofSacrifice && GrimoireofSacrifice.KnownSpell && !GrimoireofSacrifice.HaveBuff && GrimoireofSacrifice.IsSpellUsable
                && (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0))
            {
                GrimoireofSacrifice.Launch();
            }
        }

        private void AvoidMelee()
        {
            if (ObjectManager.Target.GetDistance < _mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
            {
                Logging.WriteFight("Too Close. Moving Back");
                var maxTimeTimer = new Timer(1000*2);
                MovementsAction.MoveBackward(true);
                while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                    Thread.Sleep(300);
                MovementsAction.MoveBackward(false);
                if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
                {
                    MovementsAction.MoveForward(true);
                    Thread.Sleep(1000);
                    MovementsAction.MoveForward(false);
                    MovementManager.Face(ObjectManager.Target.Position);
                }
            }
        }

        private void DefenseCycle()
        {
            if (_mySettings.UseUnendingResolve && UnendingResolve.KnownSpell && UnendingResolve.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseUnendingResolveAtPercentage)
            {
                UnendingResolve.Launch();
                _onCd = new Timer(1000*8);
                return;
            }
            if (_mySettings.UseHowlofTerror && HowlofTerror.KnownSpell && ObjectManager.Target.GetDistance < 8 && HowlofTerror.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseHowlofTerrorAtPercentage)
            {
                HowlofTerror.Launch();
                return;
            }
            if (_mySettings.UseDarkBargain && DarkBargain.KnownSpell && DarkBargain.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseDarkBargainAtPercentage)
            {
                DarkBargain.Launch();
                _onCd = new Timer(1000*8);
                return;
            }
            if (_mySettings.UseSacrificialPact && SacrificialPact.KnownSpell && SacrificialPact.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseSacrificialPactAtPercentage
                && (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0))
            {
                SacrificialPact.Launch();
                _onCd = new Timer(1000*10);
                return;
            }
            if (_mySettings.UseShadowfury && Shadowfury.KnownSpell && Shadowfury.IsHostileDistanceGood && Shadowfury.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseShadowfuryAtPercentage)
            {
                SpellManager.CastSpellByIDAndPosition(30283, ObjectManager.Target.Position);
                _onCd = new Timer(1000*3);
                return;
            }
            if (_mySettings.UseWarStomp && WarStomp.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable)
            {
                WarStomp.Launch();
                _onCd = new Timer(1000*2);
                return;
            }
            if (_mySettings.UseStoneform && Stoneform.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable)
            {
                Stoneform.Launch();
                _onCd = new Timer(1000*8);
            }
        }

        private void Heal()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (_mySettings.UseArcaneTorrentForResource && ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable
                && ObjectManager.Me.ManaPercentage <= _mySettings.UseArcaneTorrentForResourceAtPercentage)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (_mySettings.UseGiftoftheNaaru && GiftoftheNaaru.KnownSpell && GiftoftheNaaru.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseGiftoftheNaaruAtPercentage)
            {
                GiftoftheNaaru.Launch();
                return;
            }
            if (_mySettings.UseDarkRegeneration && DarkRegeneration.KnownSpell && DarkRegeneration.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseDarkRegenerationAtPercentage)
            {
                DarkRegeneration.Launch();
                return;
            }
            if (_mySettings.UseCreateHealthstone && HealthstoneTimer.IsReady && ItemsManager.GetItemCountByIdLUA(5512) > 0
                && ObjectManager.Me.HealthPercent <= _mySettings.UseCreateHealthstoneAtPercentage)
            {
                Logging.WriteFight("Use Healthstone.");
                ItemsManager.UseItem("Healthstone");
                HealthstoneTimer = new Timer(1000*60*2);
                return;
            }
            if (_mySettings.UseMortalCoil && MortalCoil.KnownSpell && MortalCoil.IsHostileDistanceGood && MortalCoil.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseMortalCoilAtPercentage)
            {
                MortalCoil.Launch();
                return;
            }
            if (_mySettings.UseDrainLife && DrainLife.KnownSpell && DrainLife.IsHostileDistanceGood && DrainLife.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseDrainLifeAtPercentage)
            {
                DrainLife.Launch();
                while (ObjectManager.Me.IsCast)
                    Thread.Sleep(200);
            }
        }

        private void Decast()
        {
            if (_mySettings.UseArcaneTorrentForDecast && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8 && ArcaneTorrent.IsSpellUsable
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && ObjectManager.Me.HealthPercent <= _mySettings.UseArcaneTorrentForDecastAtPercentage)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (_mySettings.UseTwilightWard && TwilightWard.KnownSpell && TwilightWard.IsSpellUsable
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && ObjectManager.Me.HealthPercent <= _mySettings.UseTwilightWardAtPercentage)
            {
                TwilightWard.Launch();
                return;
            }
            if (_mySettings.UseCommandDemon && _mySettings.UseSummonFelhunter && CommandDemon.KnownSpell && ObjectManager.Target.GetDistance < 41 && CommandDemon.IsSpellUsable
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
            {
                CommandDemon.Launch();
            }
        }

        private void DPSBurst()
        {
            if (_mySettings.UseTrinketOne && !ItemsManager.IsItemOnCooldown(_firstTrinket.Entry) && ItemsManager.IsUsableItemById(_firstTrinket.Entry))
            {
                ItemsManager.UseItem(_firstTrinket.Name);
                Logging.WriteFight("Use First Trinket Slot");
            }

            if (_mySettings.UseTrinketTwo && !ItemsManager.IsItemOnCooldown(_secondTrinket.Entry) && ItemsManager.IsUsableItemById(_secondTrinket.Entry))
            {
                ItemsManager.UseItem(_secondTrinket.Name);
                Logging.WriteFight("Use Second Trinket Slot");
            }

            if (_mySettings.UseBerserking && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 41 && Berserking.IsSpellUsable)
            {
                Berserking.Launch();
                return;
            }
            if (_mySettings.UseBloodFury && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 41 && BloodFury.IsSpellUsable)
            {
                BloodFury.Launch();
            }

            if (_mySettings.UseLifeblood && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 41 && Lifeblood.IsSpellUsable)
            {
                Lifeblood.Launch();
            }

            if (_mySettings.UseEngGlove && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 41 && _engineeringTimer.IsReady)
            {
                Logging.WriteFight("Use Engineering Gloves.");
                Lua.RunMacroText("/use 10");
                _engineeringTimer = new Timer(1000*60);
            }

            if (DarkSoul.KnownSpell && DarkSoul.IsSpellUsable
                && _mySettings.UseDarkSoul && ObjectManager.Target.GetDistance < 41)
            {
                DarkSoul.Launch();
            }

            if (_mySettings.UseSummonDoomguard && SummonDoomguard.KnownSpell && SummonDoomguard.IsHostileDistanceGood && SummonDoomguard.IsSpellUsable)
            {
                SummonDoomguard.Launch();
                return;
            }
            if (_mySettings.UseSummonInfernal && SummonInfernal.KnownSpell && SummonInfernal.IsHostileDistanceGood && SummonInfernal.IsSpellUsable)
            {
                SpellManager.CastSpellByIDAndPosition(1122, ObjectManager.Target.Position);
            }
            if (_mySettings.UseArchimondesVengeance && ArchimondesVengeance.KnownSpell && ObjectManager.Target.GetDistance < 41 && ArchimondesVengeance.IsSpellUsable)
            {
                ArchimondesVengeance.Launch();
            }
            if (_mySettings.UseGrimoireofService && GrimoireofService.KnownSpell && ObjectManager.Target.GetDistance < 41 && GrimoireofService.IsSpellUsable)
            {
                GrimoireofService.Launch();
            }
        }

        private void DPSCycle()
        {
            if (ObjectManager.Me.DemonicFury > 899 || (DoomTimer.IsReady || !ObjectManager.Target.HaveBuff(603)))
            {
                if (ObjectManager.Me.DemonicFury > 199)
                {
                    if (_mySettings.UseCorruption && Corruption.KnownSpell && Corruption.IsHostileDistanceGood && Corruption.IsSpellUsable)
                    {
                        Corruption.Launch();
                    }

                    if (_mySettings.UseMetamorphosis)
                    {
                        MetamorphosisCombat();
                    }
                }
            }

            if (Metamorphosis.HaveBuff)
            {
                MetamorphosisCombat();
            }

            if (_mySettings.UseCurseoftheElements && CurseoftheElements.KnownSpell && !CurseoftheElements.TargetHaveBuff && CurseoftheElements.IsSpellUsable
                && CurseoftheElements.IsHostileDistanceGood)
            {
                CurseoftheElements.Launch();
                return;
            }
            if (_mySettings.UseCurseofEnfeeblement && !_mySettings.UseCurseoftheElements && CurseofEnfeeblement.KnownSpell && CurseofEnfeeblement.IsSpellUsable
                && CurseofEnfeeblement.IsHostileDistanceGood && !CurseofEnfeeblement.TargetHaveBuff)
            {
                CurseofEnfeeblement.Launch();
                return;
            }
            if (_mySettings.UseLifeTap && LifeTap.KnownSpell && ObjectManager.Me.ManaPercentage <= _mySettings.UseLifeTapAtPercentage && LifeTap.IsSpellUsable)
            {
                LifeTap.Launch();
                return;
            }
            if (_mySettings.UseHarvestLife && ObjectManager.GetNumberAttackPlayer() > 4 && HarvestLife.KnownSpell && HarvestLife.IsSpellUsable
                && HarvestLife.IsHostileDistanceGood)
            {
                HarvestLife.Launch();
                while (ObjectManager.Me.IsCast)
                    Thread.Sleep(200);
                return;
            }
            if (_mySettings.UseHarvestLife && ObjectManager.GetNumberAttackPlayer() > 4 && DrainLife.KnownSpell && DrainLife.IsSpellUsable
                && DrainLife.IsHostileDistanceGood && !HarvestLife.KnownSpell)
            {
                DrainLife.Launch();
                while (ObjectManager.Me.IsCast)
                    Thread.Sleep(200);
                return;
            }
            if (_mySettings.UseCommandDemon && _mySettings.UseSummonFelguard && CommandDemon.KnownSpell && ObjectManager.GetNumberAttackPlayer() > 2 && CommandDemon.IsSpellUsable
                && CommandDemon.IsHostileDistanceGood && ObjectManager.Pet.Health > 0)
            {
                CommandDemon.Launch();
                return;
            }
            if (_mySettings.UseHellfire && (!HarvestLife.KnownSpell || !_mySettings.UseHarvestLife) && ObjectManager.GetNumberAttackPlayer() > 4
                && Hellfire.KnownSpell && ObjectManager.Target.GetDistance < 20 && Hellfire.IsSpellUsable)
            {
                Hellfire.Launch();
                Thread.Sleep(200);
                while (ObjectManager.Me.IsCast && ObjectManager.Target.HealthPercent > 0)
                    Thread.Sleep(200);
                return;
            }
            if (_mySettings.UseCorruption && Corruption.KnownSpell && Corruption.IsHostileDistanceGood && Corruption.IsSpellUsable
                && !Corruption.TargetHaveBuff)
            {
                Corruption.Launch();
                return;
            }
            if (_mySettings.UseHandofGuldan && HandofGuldan.KnownSpell && HandofGuldan.IsHostileDistanceGood && HandofGuldan.IsSpellUsable
                && !ObjectManager.Target.HaveBuff(47960))
            {
                HandofGuldan.Launch();
                return;
            }
            if (_mySettings.UseSoulFire && SoulFire.KnownSpell && SoulFire.IsHostileDistanceGood && SoulFire.IsSpellUsable
                && ObjectManager.Me.HaveBuff(122355))
            {
                SoulFire.Launch();
                return;
            }
            if (_mySettings.UseShadowBolt && ShadowBolt.KnownSpell && ShadowBolt.IsHostileDistanceGood && ShadowBolt.IsSpellUsable)
            {
                ShadowBolt.Launch();
            }
        }

        private void MetamorphosisCombat()
        {
            while (ObjectManager.Me.DemonicFury > 100)
            {
                if (_mySettings.UseMetamorphosis && Metamorphosis.KnownSpell && !Metamorphosis.HaveBuff && Metamorphosis.IsSpellUsable)
                {
                    Metamorphosis.Launch();
                    Thread.Sleep(700);
                }

                if (ObjectManager.GetNumberAttackPlayer() > 2)
                {
                    if (_mySettings.UseImmolationAura && Hellfire.KnownSpell && Metamorphosis.HaveBuff && Hellfire.IsSpellUsable
                        && ObjectManager.Target.GetDistance < 20)
                    {
                        Hellfire.Launch();
                        Thread.Sleep(200);
                        return;
                    }
                    if (_mySettings.UseCarrionSwarm && CarrionSwarm.KnownSpell && Metamorphosis.HaveBuff && CarrionSwarm.IsSpellUsable
                        && ObjectManager.Target.GetDistance < 20)
                    {
                        CarrionSwarm.Launch();
                        Thread.Sleep(200);
                        return;
                    }
                    if (_mySettings.UseVoidRay && FelFlame.KnownSpell && FelFlame.IsHostileDistanceGood && FelFlame.IsSpellUsable
                        && Metamorphosis.HaveBuff)
                    {
                        FelFlame.Launch();
                        Thread.Sleep(200);
                    }
                    return;
                }
                if (_mySettings.UseDoom && Corruption.KnownSpell && Corruption.IsHostileDistanceGood && Metamorphosis.HaveBuff
                    && Corruption.IsSpellUsable && (DoomTimer.IsReady || !ObjectManager.Target.HaveBuff(603)))
                {
                    Corruption.Launch();
                    DoomTimer = new Timer(1000*60);
                    Thread.Sleep(200);
                }
                if (_mySettings.UseTouchofChaos && ShadowBolt.KnownSpell && ShadowBolt.IsHostileDistanceGood && ShadowBolt.IsSpellUsable
                    && Metamorphosis.HaveBuff)
                {
                    ShadowBolt.Launch();
                    Thread.Sleep(200);
                }
            }

            Thread.Sleep(700);
            if (Metamorphosis.HaveBuff)
            {
                Metamorphosis.Launch();
            }
        }

        private void Patrolling()
        {
            if (!ObjectManager.Me.IsMounted)
            {
                Buff();
                Heal();
            }
        }

        #region Nested type: WarlockDemonologySettings

        [Serializable]
        public class WarlockDemonologySettings : Settings
        {
            public bool DoAvoidMelee = false;
            public int DoAvoidMeleeDistance = 0;
            public bool UseAlchFlask = true;
            public bool UseArcaneTorrentForDecast = true;
            public int UseArcaneTorrentForDecastAtPercentage = 100;
            public bool UseArcaneTorrentForResource = true;
            public int UseArcaneTorrentForResourceAtPercentage = 80;
            public bool UseArchimondesVengeance = true;
            public bool UseBerserking = true;
            public bool UseBloodFury = true;
            public bool UseCarrionSwarm = true;
            public bool UseCommandDemon = true;
            public bool UseCorruption = true;
            public bool UseCreateHealthstone = true;
            public int UseCreateHealthstoneAtPercentage = 75;
            public bool UseCurseofEnfeeblement = false;
            public bool UseCurseoftheElements = true;
            public bool UseDarkBargain = true;
            public int UseDarkBargainAtPercentage = 40;
            public bool UseDarkIntent = true;
            public bool UseDarkRegeneration = true;
            public int UseDarkRegenerationAtPercentage = 65;
            public bool UseDarkSoul = true;
            public bool UseDoom = true;
            public bool UseDrainLife = true;
            public int UseDrainLifeAtPercentage = 70;
            public bool UseEngGlove = true;
            public bool UseFelFlame = true;
            public bool UseGiftoftheNaaru = true;
            public int UseGiftoftheNaaruAtPercentage = 80;
            public bool UseGrimoireofSacrifice = true;
            public bool UseGrimoireofService = true;
            public bool UseHandofGuldan = true;
            public bool UseHarvestLife = false;
            public bool UseHealthFunnel = true;
            public bool UseHellfire = true;
            public bool UseHowlofTerror = true;
            public int UseHowlofTerrorAtPercentage = 20;
            public bool UseImmolationAura = true;
            public bool UseLifeTap = true;
            public int UseLifeTapAtPercentage = 75;
            public bool UseLifeblood = true;
            public bool UseLowCombat = true;
            public bool UseMetamorphosis = true;
            public bool UseMortalCoil = true;
            public int UseMortalCoilAtPercentage = 85;
            public bool UseSacrificialPact = true;
            public int UseSacrificialPactAtPercentage = 95;
            public bool UseShadowBolt = true;
            public bool UseShadowfury = true;
            public int UseShadowfuryAtPercentage = 90;
            public bool UseSoulFire = true;
            public bool UseSoulLink = true;
            public bool UseSoulstone = true;
            public int UseSpellLockAtPercentage = 100;
            public bool UseStoneform = true;
            public int UseStoneformAtPercentage = 80;
            public bool UseSummonDoomguard = true;
            public bool UseSummonFelguard = true;
            public bool UseSummonFelhunter = false;
            public bool UseSummonImp = false;
            public bool UseSummonInfernal = false;
            public bool UseSummonSuccubus = false;
            public bool UseSummonVoidwalker = false;
            public bool UseTouchofChaos = true;
            public bool UseTrinketOne = true;
            public bool UseTrinketTwo = true;
            public bool UseTwilightWard = true;
            public int UseTwilightWardAtPercentage = 100;
            public bool UseUnboundWill = true;
            public bool UseUnendingResolve = true;
            public int UseUnendingResolveAtPercentage = 70;
            public bool UseVoidRay = true;
            public bool UseWarStomp = true;
            public int UseWarStompAtPercentage = 80;

            public WarlockDemonologySettings()
            {
                ConfigWinForm(new Point(500, 400), "Warlock Demonology Settings");
                /* Professions & Racials */
                AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
                AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
                AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
                AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials", "AtPercentage");
                /* Warlock Buffs */
                AddControlInWinForm("Use Curse of Enfeeblement", "UseCurseofEnfeeblement", "Warlock Buffs");
                AddControlInWinForm("Use Curse of the Elements", "UseCurseoftheElements", "Warlock Buffs");
                AddControlInWinForm("Use Dark Intent", "UseDarkIntent", "Warlock Buffs");
                AddControlInWinForm("Use Grimoire of Sacrifice", "UseGrimoireofSacrifice", "Warlock Buffs");
                AddControlInWinForm("Use Metamorphosis", "UseMetamorphosis", "Warlock Buffs");
                AddControlInWinForm("Use Soul Link ", "UseSoulLink ", "Warlock Buffs");
                AddControlInWinForm("Use Soulstone", "UseSoulstone", "Warlock Buffs");
                /* Offensive Spell */
                AddControlInWinForm("Use Carrion Swarm", "UseCarrionSwarm", "Offensive Spell");
                AddControlInWinForm("Use Command Demon", "UseCommandDemon", "Offensive Spell");
                AddControlInWinForm("Use Corruption", "UseCorruption", "Offensive Spell");
                AddControlInWinForm("Use Doom", "UseDoom", "Offensive Spell");
                AddControlInWinForm("Use Fel Flame", "UseFelFlame", "Offensive Spell");
                AddControlInWinForm("Use Hand of Guldan", "UseHandofGuldan", "Offensive Spell");
                AddControlInWinForm("Use Harvest Life", "UseHarvestLife", "Offensive Spell");
                AddControlInWinForm("Use Hellfire", "UseHellfire", "Offensive Spell");
                AddControlInWinForm("Use Immolation Aura", "UseImmolationAura", "Offensive Spell");
                AddControlInWinForm("Use Shadow Bolt", "UseShadowBolt", "Offensive Spell");
                AddControlInWinForm("Use Soul Fire", "UseSoulFire", "Offensive Spell");
                AddControlInWinForm("Use Summon Imp", "UseSummonImp", "Offensive Spell");
                AddControlInWinForm("Use Summon Voidwalker", "UseSummonVoidwalker", "Offensive Spell");
                AddControlInWinForm("Use Summon Felhunter", "UseSummonFelhunter", "Offensive Spell");
                AddControlInWinForm("Use Summon Succubus", "UseSummonSuccubus", "Offensive Spell");
                AddControlInWinForm("Use Summon Felguard", "UseSummonFelguard", "Offensive Spell");
                AddControlInWinForm("Use Touch of Chaos", "UseTouchofChaos", "Offensive Spell");
                AddControlInWinForm("Use Void Ray", "UseVoidRay", "Offensive Spell");
                /* Offensive Cooldown */
                AddControlInWinForm("Use Archimonde's Vengeance", "UseArchimondesVengeance", "Offensive Cooldown");
                AddControlInWinForm("Use Dark Soul", "UseDarkSoul", "Offensive Cooldown");
                AddControlInWinForm("Use Grimoire of Service", "UseGrimoireofService", "Offensive Cooldown");
                AddControlInWinForm("Use Summon Doomguard", "UseSummonDoomguard", "Offensive Cooldown");
                AddControlInWinForm("Use Summon Infernal", "UseSummonInfernal", "Offensive Cooldown");
                /* Defensive Cooldown */
                AddControlInWinForm("Use Dark Bargain", "UseDarkBargain", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Howl of Terror", "UseHowlofTerror", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Sacrificial Pact", "UseSacrificialPact", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Shadowfury", "UseShadowfury", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Twilight Ward", "UseTwilightWard", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Unbound Will", "UseUnboundWill", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Unending Resolve", "UseUnendingResolve", "Defensive Cooldown", "AtPercentage");
                /* Healing Spell */
                AddControlInWinForm("Use Create Healthstone", "UseCreateHealthstone", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Dark Regeneration", "UseDarkRegeneration", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Drain Life", "UseDrainLife", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Health Funnel", "UseHealthFunnel", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Life Tap", "UseLifeTap", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Mortal Coil", "UseMortalCoil", "Healing Spell", "AtPercentage");
                /* Game Settings */
                AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
                AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
                AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
                AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
                AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
                AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
                AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
            }

            public static WarlockDemonologySettings currentSetting { get; set; }

            public static WarlockDemonologySettings GetSettings()
            {
                string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Warlock_Demonology.xml";
                if (File.Exists(currentSettingsFile))
                {
                    return 
                        currentSetting = Load<WarlockDemonologySettings>(currentSettingsFile);
                }
                return new WarlockDemonologySettings();
            }
        }

        #endregion
    }

    public class WarlockDestruction
    {
        private readonly WarlockDestructionSettings _mySettings = WarlockDestructionSettings.GetSettings();

        #region General Timers & Variables

        private readonly WoWItem _firstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
        private readonly WoWItem _secondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);
        private Timer _engineeringTimer = new Timer(0);
        public int LC = 0;
        private Timer _onCd = new Timer(0);

        #endregion

        #region Professions & Racials

        public readonly Spell Alchemy = new Spell("Alchemy");
        public readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
        public readonly Spell Berserking = new Spell("Berserking");
        public readonly Spell BloodFury = new Spell("Blood Fury");
        public readonly Spell Engineering = new Spell("Engineering");
        public readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
        public readonly Spell Lifeblood = new Spell("Lifeblood");
        public readonly Spell Stoneform = new Spell("Stoneform");
        public readonly Spell WarStomp = new Spell("War Stomp");

        #endregion

        #region Warlock Buffs

        public readonly Spell CurseofEnfeeblement = new Spell("Curse of Enfeeblement");
        public readonly Spell CurseoftheElements = new Spell("Curse of the Elements");
        public readonly Spell DarkIntent = new Spell("Dark Intent");
        public readonly Spell GrimoireofSacrifice = new Spell("Grimoire of Sacrifice");
        public readonly Spell SoulLink = new Spell("Soul Link");
        public readonly Spell Soulstone = new Spell("Soulstone");

        #endregion

        #region Offensive Spell

        public readonly Spell ChaosBolt = new Spell("Chaos Bolt");
        public readonly Spell CommandDemon = new Spell("Command Demon");
        public readonly Spell Conflagrate = new Spell("Conflagrate");
        public readonly Spell Corruption = new Spell("Corruption");
        public readonly Spell FelFlame = new Spell("Fel Flame");
        public readonly Spell FireandBrimstone = new Spell("Fire and Brimstone");
        public readonly Spell HarvestLife = new Spell("Harvest Life");
        public readonly Spell Immolate = new Spell("Immolate");
        public readonly Spell Incinerate = new Spell("Incinerate");
        public readonly Spell RainofFire = new Spell("Rain of Fire");
        public readonly Spell ShadowBolt = new Spell("Shadow Bolt");
        public readonly Spell Shadowburn = new Spell("Shadowburn");
        public readonly Spell SummonFelhunter = new Spell("Summon Felhunter");
        public readonly Spell SummonImp = new Spell("Summon Imp");
        public readonly Spell SummonSuccubus = new Spell("Summon Succubus");
        public readonly Spell SummonVoidwalker = new Spell("Summon Voidwalker");
        private Timer ImmolateTimer = new Timer(0);

        #endregion

        #region Offensive Cooldown

        public readonly Spell ArchimondesVengeance = new Spell("Archimonde's Vengeance");
        public readonly Spell DarkSoul = new Spell("Dark Soul");
        public readonly Spell GrimoireofService = new Spell("Grimoire of Service");
        public readonly Spell SummonDoomguard = new Spell("Summon Doomguard");
        public readonly Spell SummonInfernal = new Spell("Summon Infernal");

        #endregion

        #region Defensive Cooldown

        public readonly Spell DarkBargain = new Spell("Dark Bargain");
        public readonly Spell HowlofTerror = new Spell("HowlofTerror");
        public readonly Spell SacrificialPact = new Spell("Sacrificial Pact");
        public readonly Spell Shadowfury = new Spell("Shadowfury");
        public readonly Spell TwilightWard = new Spell("Twilight Ward");
        public readonly Spell UnboundWill = new Spell("Unbound Will");
        public readonly Spell UnendingResolve = new Spell("Unending Resolve");

        #endregion

        #region Healing Spell

        public readonly Spell CreateHealthstone = new Spell("Create Healthstone");
        public readonly Spell DarkRegeneration = new Spell("Dark Regeneration");
        public readonly Spell DrainLife = new Spell("Drain Life");
        public readonly Spell EmberTap = new Spell("Ember Tap");
        public readonly Spell FlamesofXoroth = new Spell("Flames of Xoroth");
        public readonly Spell HealthFunnel = new Spell("Health Funnel");
        public readonly Spell LifeTap = new Spell("Life Tap");
        public readonly Spell MortalCoil = new Spell("Mortal Coil");
        private Timer HealthstoneTimer = new Timer(0);

        #endregion

        public WarlockDestruction()
        {
            Main.InternalRange = 30.0f;
            UInt64 lastTarget = 0;

            while (Main.InternalLoop)
            {
                try
                {
                    if (!ObjectManager.Me.IsDeadMe)
                    {
                        if (!ObjectManager.Me.IsMounted)
                        {
                            if (Fight.InFight && ObjectManager.Me.Target > 0)
                            {
                                if (ObjectManager.Me.Target != lastTarget
                                    && (CurseoftheElements.IsHostileDistanceGood))
                                {
                                    Pull();
                                    lastTarget = ObjectManager.Me.Target;
                                }

                                if (_mySettings.UseLowCombat && ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84)
                                {
                                    LC = 1;
                                    if (ObjectManager.Target.GetDistance < 41)
                                        LowCombat();
                                }
                                else
                                {
                                    LC = 0;
                                    if (ObjectManager.Target.GetDistance < 41)
                                        Combat();
                                }
                                break;
                            }
                            if (!ObjectManager.Me.IsCast)
                                Patrolling();
                        }
                    }
                    Thread.Sleep(500);
                }
                catch
                {
                }
                Thread.Sleep(250);
            }
        }

        private void Pull()
        {
            if (_mySettings.UseCurseoftheElements && CurseoftheElements.KnownSpell && CurseoftheElements.IsSpellUsable
                && CurseoftheElements.IsHostileDistanceGood && !CurseoftheElements.TargetHaveBuff)
            {
                CurseoftheElements.Launch();
                return;
            }
        }

        private void LowCombat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            if (_onCd.IsReady)
                DefenseCycle();
            Heal();

            // Blizzard API Calls for Incinerate using Shadow Bolt Function
            if (_mySettings.UseIncinerate && ShadowBolt.KnownSpell && ShadowBolt.IsHostileDistanceGood && ShadowBolt.IsSpellUsable)
            {
                ShadowBolt.Launch();
                return;
            }
            if (_mySettings.UseRainofFire && RainofFire.KnownSpell && RainofFire.IsHostileDistanceGood && RainofFire.IsSpellUsable)
            {
                SpellManager.CastSpellByIDAndPosition(5740, ObjectManager.Target.Position);
            }
        }

        private void Combat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            DPSCycle();
            if (_onCd.IsReady && (ObjectManager.Me.HealthPercent <= _mySettings.UseUnendingResolveAtPercentage || ObjectManager.Me.HealthPercent <= _mySettings.UseHowlofTerrorAtPercentage
                                 || ObjectManager.Me.HealthPercent <= _mySettings.UseDarkBargainAtPercentage ||
                                 ObjectManager.Me.HealthPercent <= _mySettings.UseSacrificialPactAtPercentage
                                 || ObjectManager.Me.HealthPercent <= _mySettings.UseShadowfuryAtPercentage || ObjectManager.Me.HealthPercent <= _mySettings.UseWarStompAtPercentage
                                 || ObjectManager.Me.HealthPercent <= _mySettings.UseStoneformAtPercentage))
                DefenseCycle();
            if (ObjectManager.Me.ManaPercentage <= _mySettings.UseArcaneTorrentForResourceAtPercentage || ObjectManager.Me.HealthPercent <= _mySettings.UseGiftoftheNaaruAtPercentage
                || ObjectManager.Me.HealthPercent <= _mySettings.UseDarkRegenerationAtPercentage || ObjectManager.Me.HealthPercent <= _mySettings.UseCreateHealthstoneAtPercentage
                || ObjectManager.Me.HealthPercent <= _mySettings.UseMortalCoilAtPercentage || ObjectManager.Me.HealthPercent <= _mySettings.UseDrainLifeAtPercentage
                || ObjectManager.Me.HealthPercent <= _mySettings.UseEmberTapAtPercentage && EmberTap.IsSpellUsable)
                Heal();
            Decast();
            DPSBurst();
            DPSCycle();
        }

        private void Buff()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            Pet();

            if (_mySettings.UseDarkIntent && DarkIntent.KnownSpell && !DarkIntent.HaveBuff && DarkIntent.IsSpellUsable)
                DarkIntent.Launch();

            if (_mySettings.UseSoulLink && SoulLink.KnownSpell && !SoulLink.HaveBuff && SoulLink.IsSpellUsable && (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0) &&
                ObjectManager.Me.InCombat)
                SoulLink.Launch();

            if (_mySettings.UseSoulstone && Soulstone.KnownSpell && !Soulstone.HaveBuff && Soulstone.IsSpellUsable)
                Soulstone.Launch();

            if (_mySettings.UseCreateHealthstone && CreateHealthstone.KnownSpell && CreateHealthstone.IsSpellUsable && ItemsManager.GetItemCountByIdLUA(5512) == 0)
            {
                Logging.WriteFight(" - Create Healthstone - ");
                CreateHealthstone.Launch();
                while (ObjectManager.Me.IsCast)
                    Thread.Sleep(200);
            }

            if (_mySettings.UseAlchFlask && !ObjectManager.Me.HaveBuff(79638) && !ObjectManager.Me.HaveBuff(79640) && !ObjectManager.Me.HaveBuff(79639) &&
                !ItemsManager.IsItemOnCooldown(75525) && ItemsManager.GetItemCountByIdLUA(75525) > 0)
                ItemsManager.UseItem(75525);
        }

        private void Pet()
        {
            if (_mySettings.UseHealthFunnel && HealthFunnel.KnownSpell && ObjectManager.Pet.HealthPercent > 0 && HealthFunnel.IsSpellUsable && ObjectManager.Pet.HealthPercent < 50)
            {
                HealthFunnel.Launch();
                while (ObjectManager.Me.IsCast)
                {
                    if (ObjectManager.Pet.HealthPercent > 85 || ObjectManager.Pet.IsDead)
                        break;
                    Thread.Sleep(100);
                }
            }

            if (_mySettings.UseFlamesofXoroth && FlamesofXoroth.KnownSpell && ObjectManager.Me.InCombat && FlamesofXoroth.IsSpellUsable &&
                (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0) && !GrimoireofSacrifice.HaveBuff)
            {
                FlamesofXoroth.Launch();
                Logging.WriteFight(" - PET DEAD - ");
            }
            else if (_mySettings.UseSummonFelhunter && SummonFelhunter.KnownSpell && !GrimoireofSacrifice.HaveBuff && SummonFelhunter.IsSpellUsable && ObjectManager.Me.InCombat &&
                     (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0))
            {
                Logging.WriteFight(" - PET DEAD - ");
                SummonFelhunter.Launch();
            }
            else if (_mySettings.UseSummonImp && SummonImp.KnownSpell && !GrimoireofSacrifice.HaveBuff && SummonImp.IsSpellUsable && ObjectManager.Me.InCombat &&
                     (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0))
            {
                Logging.WriteFight(" - PET DEAD - ");
                SummonImp.Launch();
            }
            else if (_mySettings.UseSummonVoidwalker && SummonVoidwalker.KnownSpell && !GrimoireofSacrifice.HaveBuff && SummonVoidwalker.IsSpellUsable &&
                     ObjectManager.Me.InCombat && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0))
            {
                Logging.WriteFight(" - PET DEAD - ");
                SummonVoidwalker.Launch();
            }
            else if (_mySettings.UseSummonSuccubus && SummonSuccubus.KnownSpell && !GrimoireofSacrifice.HaveBuff && SummonSuccubus.IsSpellUsable && ObjectManager.Me.InCombat &&
                     (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0))
            {
                Logging.WriteFight(" - PET DEAD - ");
                SummonSuccubus.Launch();
            }
            Thread.Sleep(200);
            if (_mySettings.UseGrimoireofSacrifice && GrimoireofSacrifice.KnownSpell && !GrimoireofSacrifice.HaveBuff && GrimoireofSacrifice.IsSpellUsable &&
                (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0))
            {
                GrimoireofSacrifice.Launch();
            }
        }

        private void AvoidMelee()
        {
            if (ObjectManager.Target.GetDistance < _mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
            {
                Logging.WriteFight("Too Close. Moving Back");
                var maxTimeTimer = new Timer(1000*2);
                MovementsAction.MoveBackward(true);
                while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                    Thread.Sleep(300);
                MovementsAction.MoveBackward(false);
                if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
                {
                    MovementsAction.MoveForward(true);
                    Thread.Sleep(1000);
                    MovementsAction.MoveForward(false);
                    MovementManager.Face(ObjectManager.Target.Position);
                }
            }
        }

        private void DefenseCycle()
        {
            if (_mySettings.UseUnendingResolve && UnendingResolve.KnownSpell && UnendingResolve.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseUnendingResolveAtPercentage)
            {
                UnendingResolve.Launch();
                _onCd = new Timer(1000*8);
                return;
            }
            if (_mySettings.UseHowlofTerror && HowlofTerror.KnownSpell && ObjectManager.Target.GetDistance < 8 && HowlofTerror.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseHowlofTerrorAtPercentage)
            {
                HowlofTerror.Launch();
                return;
            }
            if (_mySettings.UseDarkBargain && DarkBargain.KnownSpell && DarkBargain.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseDarkBargainAtPercentage)
            {
                DarkBargain.Launch();
                _onCd = new Timer(1000*8);
                return;
            }
            if (_mySettings.UseSacrificialPact && SacrificialPact.KnownSpell && SacrificialPact.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseSacrificialPactAtPercentage
                && (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0))
            {
                SacrificialPact.Launch();
                _onCd = new Timer(1000*10);
                return;
            }
            if (_mySettings.UseShadowfury && Shadowfury.KnownSpell && Shadowfury.IsHostileDistanceGood && Shadowfury.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseShadowfuryAtPercentage)
            {
                SpellManager.CastSpellByIDAndPosition(30283, ObjectManager.Target.Position);
                _onCd = new Timer(1000*3);
                return;
            }
            if (_mySettings.UseWarStomp && WarStomp.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable)
            {
                WarStomp.Launch();
                _onCd = new Timer(1000*2);
                return;
            }
            if (_mySettings.UseStoneform && Stoneform.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable)
            {
                Stoneform.Launch();
                _onCd = new Timer(1000*8);
            }
        }

        private void Heal()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (_mySettings.UseArcaneTorrentForResource && ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable
                && ObjectManager.Me.ManaPercentage <= _mySettings.UseArcaneTorrentForResourceAtPercentage)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (_mySettings.UseGiftoftheNaaru && GiftoftheNaaru.KnownSpell && GiftoftheNaaru.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseGiftoftheNaaruAtPercentage)
            {
                GiftoftheNaaru.Launch();
                return;
            }
            if (_mySettings.UseEmberTap && EmberTap.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseEmberTapAtPercentage && EmberTap.IsSpellUsable)
            {
                EmberTap.Launch();
                return;
            }
            if (_mySettings.UseDarkRegeneration && DarkRegeneration.KnownSpell && DarkRegeneration.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseDarkRegenerationAtPercentage)
            {
                DarkRegeneration.Launch();
                return;
            }
            if (_mySettings.UseCreateHealthstone && HealthstoneTimer.IsReady && ItemsManager.GetItemCountByIdLUA(5512) > 0
                && ObjectManager.Me.HealthPercent <= _mySettings.UseCreateHealthstoneAtPercentage)
            {
                Logging.WriteFight("Use Healthstone.");
                ItemsManager.UseItem("Healthstone");
                HealthstoneTimer = new Timer(1000*60*2);
                return;
            }
            if (_mySettings.UseMortalCoil && MortalCoil.KnownSpell && MortalCoil.IsHostileDistanceGood && MortalCoil.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseMortalCoilAtPercentage)
            {
                MortalCoil.Launch();
                return;
            }
            if (_mySettings.UseDrainLife && DrainLife.KnownSpell && DrainLife.IsHostileDistanceGood && DrainLife.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseDrainLifeAtPercentage)
            {
                DrainLife.Launch();
                while (ObjectManager.Me.IsCast)
                    Thread.Sleep(200);
            }
        }

        private void Decast()
        {
            if (_mySettings.UseArcaneTorrentForDecast && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8 && ArcaneTorrent.IsSpellUsable
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && ObjectManager.Me.HealthPercent <= _mySettings.UseArcaneTorrentForDecastAtPercentage)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (_mySettings.UseTwilightWard && TwilightWard.KnownSpell && TwilightWard.IsSpellUsable
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && ObjectManager.Me.HealthPercent <= _mySettings.UseTwilightWardAtPercentage)
            {
                TwilightWard.Launch();
                return;
            }
            if (_mySettings.UseCommandDemon && _mySettings.UseSummonFelhunter && CommandDemon.KnownSpell && ObjectManager.Target.GetDistance < 41 && CommandDemon.IsSpellUsable
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
            {
                CommandDemon.Launch();
            }
        }

        private void DPSBurst()
        {
            if (_mySettings.UseTrinketOne && !ItemsManager.IsItemOnCooldown(_firstTrinket.Entry) && ItemsManager.IsUsableItemById(_firstTrinket.Entry))
            {
                ItemsManager.UseItem(_firstTrinket.Name);
                Logging.WriteFight("Use First Trinket Slot");
            }

            if (_mySettings.UseTrinketTwo && !ItemsManager.IsItemOnCooldown(_secondTrinket.Entry) && ItemsManager.IsUsableItemById(_secondTrinket.Entry))
            {
                ItemsManager.UseItem(_secondTrinket.Name);
                Logging.WriteFight("Use Second Trinket Slot");
            }

            if (_mySettings.UseBerserking && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 41 && Berserking.IsSpellUsable)
            {
                Berserking.Launch();
                return;
            }
            if (_mySettings.UseBloodFury && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 41 && BloodFury.IsSpellUsable)
            {
                BloodFury.Launch();
            }
            if (_mySettings.UseLifeblood && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 41 && Lifeblood.IsSpellUsable)
            {
                Lifeblood.Launch();
            }
            if (_mySettings.UseEngGlove && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 41 && _engineeringTimer.IsReady)
            {
                Logging.WriteFight("Use Engineering Gloves.");
                Lua.RunMacroText("/use 10");
                _engineeringTimer = new Timer(1000*60);
            }
            if (DarkSoul.KnownSpell && DarkSoul.IsSpellUsable
                && _mySettings.UseDarkSoul && ObjectManager.Target.GetDistance < 41)
            {
                DarkSoul.Launch();
            }
            if (_mySettings.UseSummonDoomguard && SummonDoomguard.KnownSpell && SummonDoomguard.IsHostileDistanceGood && SummonDoomguard.IsSpellUsable)
            {
                SummonDoomguard.Launch();
            }
            else if (_mySettings.UseSummonInfernal && SummonInfernal.KnownSpell && SummonInfernal.IsHostileDistanceGood && SummonInfernal.IsSpellUsable)
            {
                SpellManager.CastSpellByIDAndPosition(1122, ObjectManager.Target.Position);
            }
            if (_mySettings.UseArchimondesVengeance && ArchimondesVengeance.KnownSpell && ObjectManager.Target.GetDistance < 41 && ArchimondesVengeance.IsSpellUsable)
            {
                ArchimondesVengeance.Launch();
            }
            if (_mySettings.UseGrimoireofService && GrimoireofService.KnownSpell && ObjectManager.Target.GetDistance < 41 && GrimoireofService.IsSpellUsable)
            {
                GrimoireofService.Launch();
            }
        }

        private void DPSCycle()
        {
            if (_mySettings.UseCurseoftheElements && CurseoftheElements.KnownSpell && CurseoftheElements.IsHostileDistanceGood && CurseoftheElements.IsSpellUsable
                && !CurseoftheElements.TargetHaveBuff)
            {
                CurseoftheElements.Launch();
                return;
            }
            if (_mySettings.UseCurseofEnfeeblement && !_mySettings.UseCurseoftheElements && CurseofEnfeeblement.KnownSpell && CurseofEnfeeblement.IsHostileDistanceGood &&
                CurseofEnfeeblement.IsSpellUsable
                && !CurseofEnfeeblement.TargetHaveBuff)
            {
                CurseofEnfeeblement.Launch();
                return;
            }

            if (ObjectManager.GetNumberAttackPlayer() > 4)
            {
                // Blizzard API Calls for Immolate using Corruption Function
                if (_mySettings.UseFireandBrimstone && _mySettings.UseImmolate && FireandBrimstone.KnownSpell && FireandBrimstone.IsSpellUsable
                    && !ObjectManager.Target.HaveBuff(348) && Corruption.KnownSpell && Corruption.IsHostileDistanceGood && Corruption.IsSpellUsable)
                {
                    FireandBrimstone.Launch();
                    Thread.Sleep(200);
                    Corruption.Launch();
                    ImmolateTimer = new Timer(1000*12);
                    return;
                }
                if (_mySettings.UseHarvestLife && ObjectManager.Target.HaveBuff(348) && HarvestLife.KnownSpell
                    && HarvestLife.IsHostileDistanceGood && HarvestLife.IsSpellUsable)
                {
                    HarvestLife.Launch();
                    while (ObjectManager.Me.IsCast)
                        Thread.Sleep(200);
                    return;
                }
                if (_mySettings.UseHarvestLife && ObjectManager.Target.HaveBuff(348) && DrainLife.KnownSpell
                    && DrainLife.IsHostileDistanceGood && DrainLife.IsSpellUsable && !HarvestLife.KnownSpell)
                {
                    DrainLife.Launch();
                    while (ObjectManager.Me.IsCast)
                        Thread.Sleep(200);
                    return;
                }
                // Blizzard API Calls for Incinerate using Shadow Bolt Function
                if (_mySettings.UseFireandBrimstone && _mySettings.UseIncinerate && FireandBrimstone.KnownSpell && FireandBrimstone.IsSpellUsable
                    && ShadowBolt.KnownSpell && ShadowBolt.IsHostileDistanceGood && ShadowBolt.IsSpellUsable)
                {
                    FireandBrimstone.Launch();
                    Thread.Sleep(200);
                    ShadowBolt.Launch();
                    return;
                }
                if (_mySettings.UseRainofFire && RainofFire.KnownSpell && RainofFire.IsHostileDistanceGood && RainofFire.IsSpellUsable)
                {
                    SpellManager.CastSpellByIDAndPosition(5740, ObjectManager.Target.Position);
                    return;
                }
            }

            if (_mySettings.UseConflagrate && Conflagrate.KnownSpell && Conflagrate.IsHostileDistanceGood && Conflagrate.IsSpellUsable && ObjectManager.Me.BurningEmbers < 31
                && ObjectManager.Me.BuffStack(117828) < 1)
            {
                Conflagrate.Launch();
                return;
            }
            if (_mySettings.UseImmolate && Corruption.KnownSpell && Corruption.IsHostileDistanceGood && Corruption.IsSpellUsable
                && !ObjectManager.Target.HaveBuff(348) || ImmolateTimer.IsReady)
            {
                Corruption.Launch();
                ImmolateTimer = new Timer(1000*12);
                return;
            }
            if (ObjectManager.Target.HealthPercent < 20 && Shadowburn.KnownSpell && Shadowburn.IsSpellUsable && Shadowburn.IsHostileDistanceGood
                && _mySettings.UseShadowburn)
            {
                Shadowburn.Launch();
                return;
            }
            if (_mySettings.UseChaosBolt && ChaosBolt.KnownSpell && ChaosBolt.IsHostileDistanceGood && ChaosBolt.IsSpellUsable
                && (!ObjectManager.Me.HaveBuff(117828) || ObjectManager.Me.HaveBuff(113858)))
            {
                ChaosBolt.Launch();
                return;
            }
            if (_mySettings.UseIncinerate && ShadowBolt.KnownSpell && ShadowBolt.IsSpellUsable && ShadowBolt.IsHostileDistanceGood)
            {
                ShadowBolt.Launch();
            }
        }

        private void Patrolling()
        {
            if (ObjectManager.Me.IsMounted) return;
            Buff();
            Heal();
        }

        #region Nested type: WarlockDestructionSettings

        [Serializable]
        public class WarlockDestructionSettings : Settings
        {
            public bool DoAvoidMelee = false;
            public int DoAvoidMeleeDistance = 0;
            public bool UseAlchFlask = true;
            public bool UseArcaneTorrentForDecast = true;
            public int UseArcaneTorrentForDecastAtPercentage = 100;
            public bool UseArcaneTorrentForResource = true;
            public int UseArcaneTorrentForResourceAtPercentage = 80;
            public bool UseArchimondesVengeance = true;
            public bool UseBerserking = true;
            public bool UseBloodFury = true;
            public bool UseChaosBolt = true;
            public bool UseCommandDemon = true;
            public bool UseConflagrate = true;
            public bool UseCreateHealthstone = true;
            public int UseCreateHealthstoneAtPercentage = 75;
            public bool UseCurseofEnfeeblement = false;
            public bool UseCurseoftheElements = true;
            public bool UseDarkBargain = true;
            public int UseDarkBargainAtPercentage = 40;
            public bool UseDarkIntent = true;
            public bool UseDarkRegeneration = true;
            public int UseDarkRegenerationAtPercentage = 65;
            public bool UseDarkSoul = true;
            public bool UseDrainLife = true;
            public int UseDrainLifeAtPercentage = 70;
            public bool UseEmberTap = true;
            public int UseEmberTapAtPercentage = 60;
            public bool UseEngGlove = true;
            public bool UseFelFlame = true;
            public bool UseFireandBrimstone = true;
            public bool UseFlamesofXoroth = true;
            public bool UseGiftoftheNaaru = true;
            public int UseGiftoftheNaaruAtPercentage = 80;
            public bool UseGrimoireofSacrifice = true;
            public bool UseGrimoireofService = true;
            public bool UseHarvestLife = false;
            public bool UseHealthFunnel = true;
            public bool UseHowlofTerror = true;
            public int UseHowlofTerrorAtPercentage = 20;
            public bool UseImmolate = true;
            public bool UseIncinerate = true;
            public bool UseLifeTap = true;
            public int UseLifeTapAtPercentage = 75;
            public bool UseLifeblood = true;
            public bool UseLowCombat = true;
            public bool UseMortalCoil = true;
            public int UseMortalCoilAtPercentage = 85;
            public bool UseRainofFire = true;
            public bool UseSacrificialPact = true;
            public int UseSacrificialPactAtPercentage = 95;
            public bool UseShadowburn = true;
            public bool UseShadowfury = true;
            public int UseShadowfuryAtPercentage = 90;
            public bool UseSoulLink = true;
            public bool UseSoulstone = true;
            public int UseSpellLockAtPercentage = 100;
            public bool UseStoneform = true;
            public int UseStoneformAtPercentage = 80;
            public bool UseSummonDoomguard = true;
            public bool UseSummonFelhunter = true;
            public bool UseSummonImp = false;
            public bool UseSummonInfernal = false;
            public bool UseSummonSuccubus = false;
            public bool UseSummonVoidwalker = false;
            public bool UseTrinketOne = true;
            public bool UseTrinketTwo = true;
            public bool UseTwilightWard = true;
            public int UseTwilightWardAtPercentage = 100;
            public bool UseUnboundWill = true;
            public bool UseUnendingResolve = true;
            public int UseUnendingResolveAtPercentage = 70;
            public bool UseWarStomp = true;
            public int UseWarStompAtPercentage = 80;

            public WarlockDestructionSettings()
            {
                /* Professions & Racials */
                AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
                AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
                AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
                AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials", "AtPercentage");
                /* Warlock Buffs */
                AddControlInWinForm("Use Curse of Enfeeblement", "UseCurseofEnfeeblement", "Warlock Buffs");
                AddControlInWinForm("Use Curse of the Elements", "UseCurseoftheElements", "Warlock Buffs");
                AddControlInWinForm("Use Dark Intent", "UseDarkIntent", "Warlock Buffs");
                AddControlInWinForm("Use Grimoire of Sacrifice", "UseGrimoireofSacrifice", "Warlock Buffs");
                AddControlInWinForm("Use Soul Link ", "UseSoulLink ", "Warlock Buffs");
                AddControlInWinForm("Use Soulstone", "UseSoulstone", "Warlock Buffs");
                /* Offensive Spell */
                AddControlInWinForm("Use Chaos Bolt", "UseChaosBolt", "Offensive Spell");
                AddControlInWinForm("Use Command Demon", "UseCommandDemon", "Offensive Spell");
                AddControlInWinForm("Use Conflagrate", "UseConflagrate", "Offensive Spell");
                AddControlInWinForm("Use Fel Flame", "UseFelFlame", "Offensive Spell");
                AddControlInWinForm("Use Fire and Brimstone", "UseFireandBrimstone", "Offensive Spell");
                AddControlInWinForm("Use Harvest Life", "UseHarvestLife", "Offensive Spell");
                AddControlInWinForm("Use Immolate", "UseImmolate", "Offensive Spell");
                AddControlInWinForm("Use Incinerate", "UseIncinerate", "Offensive Spell");
                AddControlInWinForm("Use Rain of Fire", "UseRainofFire", "Offensive Spell");
                AddControlInWinForm("Use Shadowburn", "UseShadowburn", "Offensive Spell");
                AddControlInWinForm("Use Summon Imp", "UseSummonImp", "Offensive Spell");
                AddControlInWinForm("Use Summon Voidwalker", "UseSummonVoidwalker", "Offensive Spell");
                AddControlInWinForm("Use Summon Felhunter", "UseSummonFelhunter", "Offensive Spell");
                AddControlInWinForm("Use Summon Succubus", "UseSummonSuccubus", "Offensive Spell");
                /* Offensive Cooldown */
                AddControlInWinForm("Use Archimonde's Vengeance", "UseArchimondesVengeance", "Offensive Cooldown");
                AddControlInWinForm("Use Dark Soul", "UseDarkSoul", "Offensive Cooldown");
                AddControlInWinForm("Use Grimoire of Service", "UseGrimoireofService", "Offensive Cooldown");
                AddControlInWinForm("Use Summon Doomguard", "UseSummonDoomguard", "Offensive Cooldown");
                AddControlInWinForm("Use Summon Infernal", "UseSummonInfernal", "Offensive Cooldown");
                /* Defensive Cooldown */
                AddControlInWinForm("Use Dark Bargain", "UseDarkBargain", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Howl of Terror", "UseHowlofTerror", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Sacrificial Pact", "UseSacrificialPact", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Shadowfury", "UseShadowfury", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Spell Lock", "UseSpellLock", "Offensive Spell", "AtPercentage");
                AddControlInWinForm("Use Twilight Ward", "UseTwilightWard", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Unbound Will", "UseUnboundWill", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Unending Resolve", "UseUnendingResolve", "Defensive Cooldown", "AtPercentage");
                /* Healing Spell */
                AddControlInWinForm("Use Create Healthstone", "UseCreateHealthstone", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Dark Regeneration", "UseDarkRegeneration", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Drain Life", "UseDrainLife", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Ember Tap", "UseEmberTap", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Flames of Xoroth", "UseFlamesofXoroth", "Healing Spell");
                AddControlInWinForm("Use Health Funnel", "UseHealthFunnel", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Life Tap", "UseLifeTap", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Mortal Coil", "UseMortalCoil", "Healing Spell", "AtPercentage");
                /* Game Settings */
                AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
                AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
                AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
                AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
                AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
                AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
                AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
            }

            public static WarlockDestructionSettings currentSetting { get; set; }

            public static WarlockDestructionSettings GetSettings()
            {
                string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Warlock_Destruction.xml";
                if (File.Exists(currentSettingsFile))
                {
                    return
                        currentSetting = Load<WarlockDestructionSettings>(currentSettingsFile);
                }
                return new WarlockDestructionSettings();
            }
        }

        #endregion
    }

    public class WarlockAffliction
    {
        private readonly WarlockAfflictionSettings _mySettings = WarlockAfflictionSettings.GetSettings();

        #region General Timers & Variables

        private readonly WoWItem _firstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
        private readonly WoWItem _secondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);
        private Timer _engineeringTimer = new Timer(0);
        public int LC = 0;
        private Timer _onCd = new Timer(0);

        #endregion

        #region Professions & Racials

        public readonly Spell Alchemy = new Spell("Alchemy");
        public readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
        public readonly Spell Berserking = new Spell("Berserking");
        public readonly Spell BloodFury = new Spell("Blood Fury");
        public readonly Spell Engineering = new Spell("Engineering");
        public readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
        public readonly Spell Lifeblood = new Spell("Lifeblood");
        public readonly Spell Stoneform = new Spell("Stoneform");
        public readonly Spell WarStomp = new Spell("War Stomp");

        #endregion

        #region Warlock Buffs

        public readonly Spell CurseofEnfeeblement = new Spell("Curse of Enfeeblement");
        public readonly Spell CurseofExhaustion = new Spell("Curse of Exhaustion");
        public readonly Spell CurseoftheElements = new Spell("Curse of the Elements");
        public readonly Spell DarkIntent = new Spell("Dark Intent");
        public readonly Spell GrimoireofSacrifice = new Spell("Grimoire of Sacrifice");
        public readonly Spell SoulLink = new Spell("Soul Link");
        public readonly Spell Soulstone = new Spell("Soulstone");

        #endregion

        #region Offensive Spell

        public readonly Spell Agony = new Spell("Agony");
        public readonly Spell CommandDemon = new Spell("Command Demon");
        public readonly Spell Corruption = new Spell("Corruption");
        public readonly Spell DrainSoul = new Spell("Drain Soul");
        public readonly Spell FelFlame = new Spell("Fel Flame");
        public readonly Spell HarvestLife = new Spell("Harvest Life");
        public readonly Spell Haunt = new Spell("Haunt");
        public readonly Spell MaleficGrasp = new Spell("Malefic Grasp");
        public readonly Spell RainofFire = new Spell("Rain of Fire");
        public readonly Spell SeedofCorruption = new Spell("Seed of Corruption");
        public readonly Spell ShadowBolt = new Spell("Shadow Bolt");
        public readonly Spell SoulSwap = new Spell("Soul Swap");
        public readonly Spell Soulburn = new Spell("Soulburn");
        public readonly Spell SummonFelguard = new Spell("Summon Felguard");
        public readonly Spell SummonFelhunter = new Spell("Summon Felhunter");
        public readonly Spell SummonImp = new Spell("Summon Imp");
        public readonly Spell SummonSuccubus = new Spell("Summon Succubus");
        public readonly Spell SummonVoidwalker = new Spell("Summon Voidwalker");
        public readonly Spell UnstableAffliction = new Spell("Unstable Affliction");
        private Timer _agonyTimer = new Timer(0);
        private Timer _corruptionTimer = new Timer(0);
        private Timer _unstableAfflictionTimer = new Timer(0);

        #endregion

        #region Offensive Cooldown

        public readonly Spell ArchimondesVengeance = new Spell("Archimonde's Vengeance");
        public readonly Spell DarkSoul = new Spell("Dark Soul");
        public readonly Spell GrimoireofService = new Spell("Grimoire of Service");
        public readonly Spell SummonDoomguard = new Spell("Summon Doomguard");
        public readonly Spell SummonInfernal = new Spell("Summon Infernal");

        #endregion

        #region Defensive Cooldown

        public readonly Spell DarkBargain = new Spell("Dark Bargain");
        public readonly Spell HowlofTerror = new Spell("HowlofTerror");
        public readonly Spell SacrificialPact = new Spell("Sacrificial Pact");
        public readonly Spell Shadowfury = new Spell("Shadowfury");
        public readonly Spell TwilightWard = new Spell("Twilight Ward");
        public readonly Spell UnboundWill = new Spell("Unbound Will");
        public readonly Spell UnendingResolve = new Spell("Unending Resolve");

        #endregion

        #region Healing Spell

        public readonly Spell CreateHealthstone = new Spell("Create Healthstone");
        public readonly Spell DarkRegeneration = new Spell("Dark Regeneration");
        public readonly Spell DrainLife = new Spell("Drain Life");
        public readonly Spell HealthFunnel = new Spell("Health Funnel");
        public readonly Spell LifeTap = new Spell("Life Tap");
        public readonly Spell MortalCoil = new Spell("Mortal Coil");
        private Timer _healthstoneTimer = new Timer(0);

        #endregion

        public WarlockAffliction()
        {
            Main.InternalRange = 30.0f;
            UInt64 lastTarget = 0;

            while (Main.InternalLoop)
            {
                try
                {
                    if (!ObjectManager.Me.IsDeadMe)
                    {
                        if (!ObjectManager.Me.IsMounted)
                        {
                            if (Fight.InFight && ObjectManager.Me.Target > 0)
                            {
                                if (ObjectManager.Me.Target != lastTarget
                                    && (SoulSwap.IsHostileDistanceGood || Agony.IsHostileDistanceGood))
                                {
                                    Pull();
                                    lastTarget = ObjectManager.Me.Target;
                                }

                                if (_mySettings.UseLowCombat && ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84)
                                {
                                    LC = 1;
                                    if (ObjectManager.Target.GetDistance < 41)
                                        LowCombat();
                                }
                                else
                                {
                                    LC = 0;
                                    if (ObjectManager.Target.GetDistance < 41)
                                        Combat();
                                }
                                break;
                            }
                            if (!ObjectManager.Me.IsCast)
                                Patrolling();
                        }
                    }
                    Thread.Sleep(500);
                }
                catch
                {
                }
                Thread.Sleep(250);
            }
        }

        private void Pull()
        {
            if (!Agony.TargetHaveBuff && !Corruption.TargetHaveBuff && !UnstableAffliction.TargetHaveBuff)
            {
                if (_mySettings.UseSoulSwap && _mySettings.UseSoulburn && Soulburn.KnownSpell && SoulSwap.KnownSpell && Soulburn.IsSpellUsable && SoulSwap.IsSpellUsable
                    && SoulSwap.IsHostileDistanceGood)
                {
                    if (!Soulburn.HaveBuff)
                    {
                        Soulburn.Launch();
                        Thread.Sleep(200);
                    }

                    SoulSwap.Launch();
                    _agonyTimer = new Timer(1000*21);
                    _corruptionTimer = new Timer(1000*15);
                    _unstableAfflictionTimer = new Timer(1000*11);
                }
            }
            return;
        }

        private void LowCombat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            if (_onCd.IsReady)
                DefenseCycle();
            Heal();

            if (_mySettings.UseLifeTap && LifeTap.KnownSpell && ObjectManager.Me.ManaPercentage < 75 && LifeTap.IsSpellUsable)
            {
                LifeTap.Launch();
                return;
            }

            if (_mySettings.UseMaleficGrasp && MaleficGrasp.KnownSpell && MaleficGrasp.IsHostileDistanceGood && MaleficGrasp.IsSpellUsable)
            {
                MaleficGrasp.Launch();
                Thread.Sleep(200);
                while (ObjectManager.Me.IsCast)
                    Thread.Sleep(200);
            }
            else
            {
                if (_mySettings.UseRainofFire && RainofFire.KnownSpell && RainofFire.IsHostileDistanceGood && RainofFire.IsSpellUsable)
                {
                    SpellManager.CastSpellByIDAndPosition(5740, ObjectManager.Target.Position);
                    while (ObjectManager.Me.IsCast)
                        Thread.Sleep(200);
                    return;
                }
            }
        }

        private void Combat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            DPSCycle();
            if (_onCd.IsReady && (ObjectManager.Me.HealthPercent <= _mySettings.UseUnendingResolveAtPercentage || ObjectManager.Me.HealthPercent <= _mySettings.UseHowlofTerrorAtPercentage
                                 || ObjectManager.Me.HealthPercent <= _mySettings.UseDarkBargainAtPercentage ||
                                 ObjectManager.Me.HealthPercent <= _mySettings.UseSacrificialPactAtPercentage
                                 || ObjectManager.Me.HealthPercent <= _mySettings.UseShadowfuryAtPercentage || ObjectManager.Me.HealthPercent <= _mySettings.UseWarStompAtPercentage
                                 || ObjectManager.Me.HealthPercent <= _mySettings.UseStoneformAtPercentage))
                DefenseCycle();
            if (ObjectManager.Me.ManaPercentage <= _mySettings.UseArcaneTorrentForResourceAtPercentage || ObjectManager.Me.HealthPercent <= _mySettings.UseGiftoftheNaaruAtPercentage
                || ObjectManager.Me.HealthPercent <= _mySettings.UseDarkRegenerationAtPercentage || ObjectManager.Me.HealthPercent <= _mySettings.UseCreateHealthstoneAtPercentage
                || ObjectManager.Me.HealthPercent <= _mySettings.UseMortalCoilAtPercentage || ObjectManager.Me.HealthPercent <= _mySettings.UseDrainLifeAtPercentage)
                Heal();
            Decast();
            DPSBurst();
            DPSCycle();
        }

        private void Buff()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            Pet();

            if (_mySettings.UseDarkIntent && DarkIntent.KnownSpell && !DarkIntent.HaveBuff && DarkIntent.IsSpellUsable)
                DarkIntent.Launch();

            if (_mySettings.UseSoulLink && SoulLink.KnownSpell && !SoulLink.HaveBuff && SoulLink.IsSpellUsable
                && (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0) && ObjectManager.Me.InCombat)
                SoulLink.Launch();

            if (_mySettings.UseSoulstone && Soulstone.KnownSpell && !Soulstone.HaveBuff && Soulstone.IsSpellUsable)
                Soulstone.Launch();

            if (_mySettings.UseCreateHealthstone && CreateHealthstone.KnownSpell && CreateHealthstone.IsSpellUsable
                && ItemsManager.GetItemCountByIdLUA(5512) == 0)
            {
                Logging.WriteFight(" - Create Healthstone - ");
                CreateHealthstone.Launch();
                while (ObjectManager.Me.IsCast)
                    Thread.Sleep(200);
            }

            if (_mySettings.UseAlchFlask && !ObjectManager.Me.HaveBuff(79638) && !ObjectManager.Me.HaveBuff(79640) && !ObjectManager.Me.HaveBuff(79639)
                && !ItemsManager.IsItemOnCooldown(75525) && ItemsManager.GetItemCountByIdLUA(75525) > 0)
                ItemsManager.UseItem(75525);
        }

        private void Pet()
        {
            if (_mySettings.UseHealthFunnel && HealthFunnel.KnownSpell && ObjectManager.Pet.HealthPercent > 0 && HealthFunnel.IsSpellUsable
                && ObjectManager.Pet.HealthPercent < 50)
            {
                HealthFunnel.Launch();
                while (ObjectManager.Me.IsCast)
                {
                    if (ObjectManager.Pet.HealthPercent > 85 || ObjectManager.Pet.IsDead)
                        break;
                    Thread.Sleep(100);
                }
            }

            if (_mySettings.UseSummonFelhunter && SummonFelhunter.KnownSpell && !GrimoireofSacrifice.HaveBuff && SummonFelhunter.IsSpellUsable
                && ObjectManager.Me.InCombat && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0))
            {
                Logging.WriteFight(" - PET DEAD - ");
                SummonFelhunter.Launch();
            }
            else if (_mySettings.UseSummonImp && SummonImp.KnownSpell && !GrimoireofSacrifice.HaveBuff && SummonImp.IsSpellUsable
                     && ObjectManager.Me.InCombat && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0))
            {
                Logging.WriteFight(" - PET DEAD - ");
                SummonImp.Launch();
            }
            else if (_mySettings.UseSummonVoidwalker && SummonVoidwalker.KnownSpell && !GrimoireofSacrifice.HaveBuff && SummonVoidwalker.IsSpellUsable
                     && ObjectManager.Me.InCombat && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0))
            {
                Logging.WriteFight(" - PET DEAD - ");
                SummonVoidwalker.Launch();
            }
            else if (_mySettings.UseSummonSuccubus && SummonSuccubus.KnownSpell && !GrimoireofSacrifice.HaveBuff && SummonSuccubus.IsSpellUsable
                     && ObjectManager.Me.InCombat && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0))
            {
                Logging.WriteFight(" - PET DEAD - ");
                SummonSuccubus.Launch();
            }

            Thread.Sleep(200);
            if (_mySettings.UseGrimoireofSacrifice && GrimoireofSacrifice.KnownSpell && !GrimoireofSacrifice.HaveBuff && GrimoireofSacrifice.IsSpellUsable
                && (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0))
                GrimoireofSacrifice.Launch();
        }

        private void AvoidMelee()
        {
            if (ObjectManager.Target.GetDistance < _mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
            {
                Logging.WriteFight("Too Close. Moving Back");
                var maxTimeTimer = new Timer(1000*2);
                MovementsAction.MoveBackward(true);
                while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                    Thread.Sleep(300);
                MovementsAction.MoveBackward(false);
                if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
                {
                    MovementsAction.MoveForward(true);
                    Thread.Sleep(1000);
                    MovementsAction.MoveForward(false);
                    MovementManager.Face(ObjectManager.Target.Position);
                }
            }
        }

        private void DefenseCycle()
        {
            if (_mySettings.UseUnendingResolve && UnendingResolve.KnownSpell && UnendingResolve.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseUnendingResolveAtPercentage)
            {
                UnendingResolve.Launch();
                _onCd = new Timer(1000*8);
                return;
            }
            if (_mySettings.UseHowlofTerror && HowlofTerror.KnownSpell && ObjectManager.Target.GetDistance < 8 && HowlofTerror.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseHowlofTerrorAtPercentage)
            {
                HowlofTerror.Launch();
                return;
            }
            if (_mySettings.UseDarkBargain && DarkBargain.KnownSpell && DarkBargain.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseDarkBargainAtPercentage)
            {
                DarkBargain.Launch();
                _onCd = new Timer(1000*8);
                return;
            }
            if (_mySettings.UseSacrificialPact && SacrificialPact.KnownSpell && SacrificialPact.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseSacrificialPactAtPercentage
                && (ObjectManager.Pet.Health != 0 || ObjectManager.Pet.Guid != 0))
            {
                SacrificialPact.Launch();
                _onCd = new Timer(1000*10);
                return;
            }
            if (_mySettings.UseShadowfury && Shadowfury.KnownSpell && Shadowfury.IsHostileDistanceGood && Shadowfury.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseShadowfuryAtPercentage)
            {
                SpellManager.CastSpellByIDAndPosition(30283, ObjectManager.Target.Position);
                _onCd = new Timer(1000*3);
                return;
            }
            if (_mySettings.UseWarStomp && WarStomp.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable)
            {
                WarStomp.Launch();
                _onCd = new Timer(1000*2);
                return;
            }
            if (_mySettings.UseStoneform && Stoneform.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable)
            {
                Stoneform.Launch();
                _onCd = new Timer(1000*8);
            }
        }

        private void Heal()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (_mySettings.UseArcaneTorrentForResource && ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable
                && ObjectManager.Me.ManaPercentage <= _mySettings.UseArcaneTorrentForResourceAtPercentage)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (_mySettings.UseGiftoftheNaaru && GiftoftheNaaru.KnownSpell && GiftoftheNaaru.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseGiftoftheNaaruAtPercentage)
            {
                GiftoftheNaaru.Launch();
                return;
            }
            if (_mySettings.UseDarkRegeneration && DarkRegeneration.KnownSpell && DarkRegeneration.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseDarkRegenerationAtPercentage)
            {
                DarkRegeneration.Launch();
                return;
            }
            if (_mySettings.UseCreateHealthstone && _healthstoneTimer.IsReady && ItemsManager.GetItemCountByIdLUA(5512) > 0
                && ObjectManager.Me.HealthPercent <= _mySettings.UseCreateHealthstoneAtPercentage)
            {
                Logging.WriteFight("Use Healthstone.");
                ItemsManager.UseItem("Healthstone");
                _healthstoneTimer = new Timer(1000*60*2);
                return;
            }
            if (_mySettings.UseMortalCoil && MortalCoil.KnownSpell && MortalCoil.IsHostileDistanceGood && MortalCoil.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseMortalCoilAtPercentage)
            {
                MortalCoil.Launch();
                return;
            }
            if (_mySettings.UseDrainLife && DrainLife.KnownSpell && DrainLife.IsHostileDistanceGood && DrainLife.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseDrainLifeAtPercentage)
            {
                DrainLife.Launch();
                while (ObjectManager.Me.IsCast)
                    Thread.Sleep(200);
            }
        }

        private void Decast()
        {
            if (_mySettings.UseArcaneTorrentForDecast && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8 && ArcaneTorrent.IsSpellUsable
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && ObjectManager.Me.HealthPercent <= _mySettings.UseArcaneTorrentForDecastAtPercentage)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (_mySettings.UseTwilightWard && TwilightWard.KnownSpell && TwilightWard.IsSpellUsable
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && ObjectManager.Me.HealthPercent <= _mySettings.UseTwilightWardAtPercentage)
            {
                TwilightWard.Launch();
                return;
            }
            if (_mySettings.UseCommandDemon && _mySettings.UseSummonFelhunter && CommandDemon.KnownSpell && ObjectManager.Target.GetDistance < 41 && CommandDemon.IsSpellUsable
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
            {
                CommandDemon.Launch();
            }
        }

        private void DPSBurst()
        {
            if (_mySettings.UseTrinketOne && !ItemsManager.IsItemOnCooldown(_firstTrinket.Entry) && ItemsManager.IsUsableItemById(_firstTrinket.Entry))
            {
                ItemsManager.UseItem(_firstTrinket.Name);
                Logging.WriteFight("Use First Trinket Slot");
            }
            if (_mySettings.UseTrinketTwo && !ItemsManager.IsItemOnCooldown(_secondTrinket.Entry) && ItemsManager.IsUsableItemById(_secondTrinket.Entry))
            {
                ItemsManager.UseItem(_secondTrinket.Name);
                Logging.WriteFight("Use Second Trinket Slot");
            }
            if (_mySettings.UseBerserking && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 41 && Berserking.IsSpellUsable)
            {
                Berserking.Launch();
                return;
            }
            if (_mySettings.UseBloodFury && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 41 && BloodFury.IsSpellUsable)
            {
                BloodFury.Launch();
            }
            if (_mySettings.UseLifeblood && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 41 && Lifeblood.IsSpellUsable)
            {
                Lifeblood.Launch();
            }
            if (_mySettings.UseEngGlove && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 41 && _engineeringTimer.IsReady)
            {
                Logging.WriteFight("Use Engineering Gloves.");
                Lua.RunMacroText("/use 10");
                _engineeringTimer = new Timer(1000*60);
            }
            if (DarkSoul.KnownSpell && DarkSoul.IsSpellUsable
                && _mySettings.UseDarkSoul && ObjectManager.Target.GetDistance < 41)
            {
                DarkSoul.Launch();
            }
            if (_mySettings.UseSummonDoomguard && SummonDoomguard.KnownSpell && SummonDoomguard.IsHostileDistanceGood && SummonDoomguard.IsSpellUsable)
            {
                SummonDoomguard.Launch();
                return;
            }
            if (_mySettings.UseSummonInfernal && SummonInfernal.KnownSpell && SummonInfernal.IsHostileDistanceGood && SummonInfernal.IsSpellUsable)
            {
                SpellManager.CastSpellByIDAndPosition(1122, ObjectManager.Target.Position);
            }
            if (_mySettings.UseArchimondesVengeance && ArchimondesVengeance.KnownSpell && ObjectManager.Target.GetDistance < 41 && ArchimondesVengeance.IsSpellUsable)
            {
                ArchimondesVengeance.Launch();
            }
            if (_mySettings.UseGrimoireofService && GrimoireofService.KnownSpell && ObjectManager.Target.GetDistance < 41 && GrimoireofService.IsSpellUsable)
            {
                GrimoireofService.Launch();
            }
        }

        private void DPSCycle()
        {
            if (_mySettings.UseCurseoftheElements && CurseoftheElements.KnownSpell && CurseoftheElements.IsHostileDistanceGood && CurseoftheElements.IsSpellUsable
                && !CurseoftheElements.TargetHaveBuff)
            {
                CurseoftheElements.Launch();
                return;
            }
            if (_mySettings.UseCurseofEnfeeblement && !_mySettings.UseCurseoftheElements && CurseofEnfeeblement.KnownSpell && CurseofEnfeeblement.IsSpellUsable
                && CurseofEnfeeblement.IsHostileDistanceGood && !CurseofEnfeeblement.TargetHaveBuff)
            {
                CurseofEnfeeblement.Launch();
                return;
            }
            if (_mySettings.UseCurseofExhaustion && !_mySettings.UseCurseoftheElements && !_mySettings.UseCurseofEnfeeblement && CurseofExhaustion.KnownSpell &&
                CurseofExhaustion.IsSpellUsable
                && CurseofExhaustion.IsHostileDistanceGood && !CurseofExhaustion.TargetHaveBuff)
            {
                CurseofExhaustion.Launch();
                return;
            }

            if (_mySettings.UseLifeTap && LifeTap.KnownSpell && ObjectManager.Me.ManaPercentage <= _mySettings.UseLifeTapAtPercentage && LifeTap.IsSpellUsable)
            {
                LifeTap.Launch();
                return;
            }

            if (ObjectManager.Target.HealthPercent < 20 && _mySettings.UseDrainSoul)
            {
                if (DrainSoul.KnownSpell && DrainSoul.IsHostileDistanceGood && DrainSoul.IsSpellUsable)
                {
                    DrainSoul.Launch();
                    while (ObjectManager.Me.IsCast && !_agonyTimer.IsReady && !_corruptionTimer.IsReady && !_unstableAfflictionTimer.IsReady)
                        Thread.Sleep(200);
                }

                if (_agonyTimer.IsReady || _corruptionTimer.IsReady || _unstableAfflictionTimer.IsReady)
                {
                    if (_mySettings.UseSoulburn && _mySettings.UseSoulSwap && Soulburn.KnownSpell && SoulSwap.KnownSpell && Soulburn.IsSpellUsable && SoulSwap.IsSpellUsable
                        && SoulSwap.IsHostileDistanceGood)
                    {
                        Soulburn.Launch();
                        Thread.Sleep(200);
                        SoulSwap.Launch();
                        _agonyTimer = new Timer(1000*21);
                        _corruptionTimer = new Timer(1000*15);
                        _unstableAfflictionTimer = new Timer(1000*11);
                    }
                }
            }

            if (ObjectManager.GetNumberAttackPlayer() > 4)
            {
                if (_mySettings.UseSoulburn && _mySettings.UseSeedofCorruption && Soulburn.KnownSpell && SeedofCorruption.KnownSpell
                    && !Corruption.TargetHaveBuff && Soulburn.IsSpellUsable && SeedofCorruption.IsSpellUsable && SeedofCorruption.IsHostileDistanceGood)
                {
                    Soulburn.Launch();
                    Thread.Sleep(200);
                    SeedofCorruption.Launch();
                    return;
                }
                if (_mySettings.UseHarvestLife && HarvestLife.KnownSpell && HarvestLife.IsHostileDistanceGood && HarvestLife.IsSpellUsable)
                {
                    HarvestLife.Launch();
                    while (ObjectManager.Me.IsCast)
                        Thread.Sleep(200);
                    return;
                }
                if (_mySettings.UseHarvestLife && DrainLife.KnownSpell && DrainLife.IsSpellUsable && DrainLife.IsHostileDistanceGood && !HarvestLife.KnownSpell)
                {
                    DrainLife.Launch();
                    while (ObjectManager.Me.IsCast)
                        Thread.Sleep(200);
                    return;
                }
                if (_mySettings.UseRainofFire && RainofFire.KnownSpell && RainofFire.IsHostileDistanceGood && RainofFire.IsSpellUsable)
                {
                    SpellManager.CastSpellByIDAndPosition(5740, ObjectManager.Target.Position);
                    while (ObjectManager.Me.IsCast)
                        Thread.Sleep(200);
                    return;
                }
            }

            if (_mySettings.UseAgony && Agony.KnownSpell && Agony.IsHostileDistanceGood && Agony.IsSpellUsable && (!Agony.TargetHaveBuff || _agonyTimer.IsReady))
            {
                Agony.Launch();
                _agonyTimer = new Timer(1000*21);
            }

            if (_mySettings.UseCorruption && Corruption.KnownSpell && Corruption.IsHostileDistanceGood && Corruption.IsSpellUsable
                && (!Corruption.TargetHaveBuff || _corruptionTimer.IsReady))
            {
                Corruption.Launch();
                _corruptionTimer = new Timer(1000*15);
            }

            if (_mySettings.UseUnstableAffliction && UnstableAffliction.KnownSpell && UnstableAffliction.IsHostileDistanceGood && UnstableAffliction.IsSpellUsable
                && (!UnstableAffliction.TargetHaveBuff || _unstableAfflictionTimer.IsReady))
            {
                UnstableAffliction.Launch();
                _unstableAfflictionTimer = new Timer(1000*11);
            }

            if (_mySettings.UseHaunt && Haunt.KnownSpell && Haunt.IsHostileDistanceGood && !Haunt.TargetHaveBuff && Haunt.IsSpellUsable)
            {
                Haunt.Launch();
                return;
            }
            // Blizzard API Calls for Malefic Grasp using Shadow Bolt Function
            if (_mySettings.UseMaleficGrasp && !ObjectManager.Me.IsCast && ShadowBolt.KnownSpell && ShadowBolt.IsHostileDistanceGood && ShadowBolt.IsSpellUsable
                && !_agonyTimer.IsReady && !_corruptionTimer.IsReady && !_unstableAfflictionTimer.IsReady)
            {
                ShadowBolt.Launch();
            }
        }

        private void Patrolling()
        {
            if (ObjectManager.Me.IsMounted) return;
            Buff();
            Heal();
        }

        #region Nested type: WarlockAfflictionSettings

        [Serializable]
        public class WarlockAfflictionSettings : Settings
        {
            public bool DoAvoidMelee = false;
            public int DoAvoidMeleeDistance = 0;
            public bool UseAgony = true;
            public bool UseAlchFlask = true;
            public bool UseArcaneTorrentForDecast = true;
            public int UseArcaneTorrentForDecastAtPercentage = 100;
            public bool UseArcaneTorrentForResource = true;
            public int UseArcaneTorrentForResourceAtPercentage = 80;
            public bool UseArchimondesVengeance = true;
            public bool UseBerserking = true;
            public bool UseBloodFury = true;
            public bool UseCommandDemon = true;
            public bool UseCorruption = true;
            public bool UseCreateHealthstone = true;
            public int UseCreateHealthstoneAtPercentage = 75;
            public bool UseCurseofEnfeeblement = false;
            public bool UseCurseofExhaustion = false;
            public bool UseCurseoftheElements = true;
            public bool UseDarkBargain = true;
            public int UseDarkBargainAtPercentage = 40;
            public bool UseDarkIntent = true;
            public bool UseDarkRegeneration = true;
            public int UseDarkRegenerationAtPercentage = 65;
            public bool UseDarkSoul = true;
            public bool UseDrainLife = true;
            public int UseDrainLifeAtPercentage = 70;
            public bool UseDrainSoul = true;
            public bool UseEngGlove = true;
            public bool UseFelFlame = true;
            public bool UseGiftoftheNaaru = true;
            public int UseGiftoftheNaaruAtPercentage = 80;
            public bool UseGrimoireofSacrifice = true;
            public bool UseGrimoireofService = true;
            public bool UseHarvestLife = false;
            public bool UseHaunt = true;
            public bool UseHealthFunnel = true;
            public bool UseHowlofTerror = true;
            public int UseHowlofTerrorAtPercentage = 20;
            public bool UseLifeTap = true;
            public int UseLifeTapAtPercentage = 75;
            public bool UseLifeblood = true;
            public bool UseLowCombat = true;
            public bool UseMaleficGrasp = true;
            public bool UseMortalCoil = true;
            public int UseMortalCoilAtPercentage = 85;
            public bool UseRainofFire = true;
            public bool UseSacrificialPact = true;
            public int UseSacrificialPactAtPercentage = 95;
            public bool UseSeedofCorruption = true;
            public bool UseShadowBolt = true;
            public bool UseShadowfury = true;
            public int UseShadowfuryAtPercentage = 90;
            public bool UseSoulLink = true;
            public bool UseSoulSwap = true;
            public bool UseSoulburn = true;
            public bool UseSoulstone = true;
            public bool UseStoneform = true;
            public int UseStoneformAtPercentage = 80;
            public bool UseSummonDoomguard = true;
            public bool UseSummonFelhunter = true;
            public bool UseSummonImp = false;
            public bool UseSummonInfernal = false;
            public bool UseSummonSuccubus = false;
            public bool UseSummonVoidwalker = false;
            public bool UseTrinketOne = true;
            public bool UseTrinketTwo = true;
            public bool UseTwilightWard = true;
            public int UseTwilightWardAtPercentage = 100;
            public bool UseUnboundWill = true;
            public bool UseUnendingResolve = true;
            public int UseUnendingResolveAtPercentage = 70;
            public bool UseUnstableAffliction = true;
            public bool UseWarStomp = true;
            public int UseWarStompAtPercentage = 80;

            public WarlockAfflictionSettings()
            {
                ConfigWinForm(new Point(500, 400), "Warlock Affliction Settings");
                /* Professions & Racials */
                AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
                AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
                AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
                AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
                AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
                AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
                /* Warlock Buffs */
                AddControlInWinForm("Use Curse of Enfeeblement", "UseCurseofEnfeeblement", "Warlock Buffs");
                AddControlInWinForm("Use Curse of Exhaustion", "UseCurseofExhaustion", "Warlock Buffs");
                AddControlInWinForm("Use Curse of the Elements", "UseCurseoftheElements", "Warlock Buffs");
                AddControlInWinForm("Use Dark Intent", "UseDarkIntent", "Warlock Buffs");
                AddControlInWinForm("Use Grimoire of Sacrifice", "UseGrimoireofSacrifice", "Warlock Buffs");
                AddControlInWinForm("Use Soul Link ", "UseSoulLink ", "Warlock Buffs");
                AddControlInWinForm("Use Soulstone", "UseSoulstone", "Warlock Buffs");
                /* Offensive Spell */
                AddControlInWinForm("Use Agony", "UseAgony", "Offensive Spell");
                AddControlInWinForm("Use Command Demon", "UseCommandDemon", "Offensive Spell");
                AddControlInWinForm("Use Corruption", "UseCorruption", "Offensive Spell");
                AddControlInWinForm("Use Drain Soul", "UseDrainSoul", "Offensive Spell");
                AddControlInWinForm("Use Fel Flame", "UseFelFlame", "Offensive Spell");
                AddControlInWinForm("Use Harvest Life", "UseHarvestLife", "Offensive Spell");
                AddControlInWinForm("Use Haunt", "UseHaunt", "Offensive Spell");
                AddControlInWinForm("Use Malefic Grasp", "UseMaleficGrasp", "Offensive Spell");
                AddControlInWinForm("Use Rain of Fire", "UseRainofFire", "Offensive Spell");
                AddControlInWinForm("Use Seed of Corruption", "UseSeedofCorruption", "Offensive Spell");
                AddControlInWinForm("Use Shadow Bolt", "UseShadowBolt", "Offensive Spell");
                AddControlInWinForm("Use Soul Swap", "UseSoulSwap", "Offensive Spell");
                AddControlInWinForm("Use Soulburn", "UseSoulburn", "Offensive Spell");
                AddControlInWinForm("Use Summon Imp", "UseSummonImp", "Offensive Spell");
                AddControlInWinForm("Use Summon Voidwalker", "UseSummonVoidwalker", "Offensive Spell");
                AddControlInWinForm("Use Summon Felhunter", "UseSummonFelhunter", "Offensive Spell");
                AddControlInWinForm("Use Summon Succubus", "UseSummonSuccubus", "Offensive Spell");
                AddControlInWinForm("Use Unstable Affliction", "UseUnstableAffliction", "Offensive Spell");
                /* Offensive Cooldown */
                AddControlInWinForm("Use Archimonde's Vengeance", "UseArchimondesVengeance", "Offensive Cooldown");
                AddControlInWinForm("Use Dark Soul", "UseDarkSoul", "Offensive Cooldown");
                AddControlInWinForm("Use Grimoire of Service", "UseGrimoireofService", "Offensive Cooldown");
                AddControlInWinForm("Use Summon Doomguard", "UseSummonDoomguard", "Offensive Cooldown");
                AddControlInWinForm("Use Summon Infernal", "UseSummonInfernal", "Offensive Cooldown");
                /* Defensive Cooldown */
                AddControlInWinForm("Use Dark Bargain", "UseDarkBargain", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Howl of Terror", "UseHowlofTerror", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Sacrificial Pact", "UseSacrificialPact", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Shadowfury", "UseShadowfury", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Twilight Ward", "UseTwilightWard", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Unbound Will", "UseUnboundWill", "Defensive Cooldown");
                AddControlInWinForm("Use Unending Resolve", "UseUnendingResolve", "Defensive Cooldown", "AtPercentage");
                /* Healing Spell */
                AddControlInWinForm("Use Create Healthstone", "UseCreateHealthstone", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Dark Regeneration", "UseDarkRegeneration", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Drain Life", "UseDrainLife", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Health Funnel", "UseHealthFunnel", "Healing Spell");
                AddControlInWinForm("Use Life Tap", "UseLifeTap", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Mortal Coil", "UseMortalCoil", "Healing Spell", "AtPercentage");
                /* Game Settings */
                AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
                AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
                AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
                AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
                AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
                AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
                AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
            }

            public static WarlockAfflictionSettings currentSetting { get; set; }

            public static WarlockAfflictionSettings GetSettings()
            {
                string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Warlock_Affliction.xml";
                if (File.Exists(currentSettingsFile))
                {
                    return
                        currentSetting = Load<WarlockAfflictionSettings>(currentSettingsFile);
                }
                return new WarlockAfflictionSettings();
            }
        }

        #endregion
    }

    #endregion

    #region Druid

    public class DruidBalance
    {
        private readonly DruidBalanceSettings _mySettings = DruidBalanceSettings.GetSettings();

        #region General Timers & Variables

        private readonly WoWItem _firstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
        private readonly WoWItem _secondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);
        private Timer _engineeringTimer = new Timer(0);
        private Timer _onCd = new Timer(0);

        #endregion

        #region Professions & Racials

        public readonly Spell Alchemy = new Spell("Alchemy");
        public readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
        public readonly Spell Berserking = new Spell("Berserking");
        public readonly Spell BloodFury = new Spell("Blood Fury");
        public readonly Spell Engineering = new Spell("Engineering");
        public readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
        public readonly Spell Lifeblood = new Spell("Lifeblood");
        public readonly Spell Stoneform = new Spell("Stoneform");
        public readonly Spell WarStomp = new Spell("War Stomp");

        #endregion

        #region Druid Buffs

        public readonly Spell Dash = new Spell("Dash");
        public readonly Spell FaerieFire = new Spell("Faerie Fire");
        public readonly Spell MarkoftheWild = new Spell("Mark of the Wild");
        public readonly Spell MoonkinForm = new Spell("Moonkin Form");
        public readonly Spell StampedingRoar = new Spell("Stampeding Roar");

        #endregion

        #region Offensive Spell

        public readonly Spell Hurricane = new Spell("Hurricane");
        public readonly Spell Moonfire = new Spell("Moonfire");
        public readonly Spell Starfall = new Spell("Starfall");
        public readonly Spell Starfire = new Spell("Starfire");
        public readonly Spell Starsurge = new Spell("Starsurge");
        public readonly Spell Sunfire = new Spell("Sunfire");
        public readonly Spell WildMushroom = new Spell("Wild Mushroom");
        public readonly Spell WildMushroomDetonate = new Spell("Wild Mushroom: Detonate");
        public readonly Spell Wrath = new Spell("Wrath");
        private Timer MoonfireTimer = new Timer(0);
        private bool StarfireUse;
        private Timer SunfireTimer = new Timer(0);

        #endregion

        #region Offensive Cooldown

        public readonly Spell AstralCommunion = new Spell("Astral Communion");
        public readonly Spell CelestialAlignment = new Spell("Celestial Alignment");
        public readonly Spell ForceofNature = new Spell("Force of Nature");
        public readonly Spell HeartoftheWild = new Spell("Heart of the Wild");
        public readonly Spell Incarnation = new Spell("Incarnation");
        public readonly Spell NaturesVigil = new Spell("Nature's Vigil");

        #endregion

        #region Defensive Cooldown

        public readonly Spell Barkskin = new Spell("Barkskin");
        public readonly Spell DisorientingRoar = new Spell("Disorienting Roar");
        public readonly Spell EntanglingRoots = new Spell("Entangling Roots");
        public readonly Spell MassEntanglement = new Spell("Mass Entanglement");
        public readonly Spell MightyBash = new Spell("Mighty Bash");
        public readonly Spell NaturesGrasp = new Spell("Nature's Grasp");
        public readonly Spell SolarBeam = new Spell("Solar Beam");
        public readonly Spell Typhoon = new Spell("Typhoon");
        public readonly Spell UrsolsVortex = new Spell("Ursol's Vortex");
        public readonly Spell WildCharge = new Spell("Wild Charge");

        #endregion

        #region Healing Spell

        public readonly Spell CenarionWard = new Spell("Cenarion Ward");
        public readonly Spell HealingTouch = new Spell("Healing Touch");
        public readonly Spell Innervate = new Spell("Innervate");
        public readonly Spell MightofUrsoc = new Spell("Might of Ursoc");
        public readonly Spell NaturesSwiftness = new Spell("Nature's Swiftness");
        public readonly Spell Rejuvenation = new Spell("Rejuvenation");
        public readonly Spell Renewal = new Spell("Renewal");
        public readonly Spell Tranquility = new Spell("Tranquility");
        private Timer HealingTouchTimer = new Timer(0);

        #endregion

        public DruidBalance()
        {
            Main.InternalRange = 30.0f;
            UInt64 lastTarget = 0;

            while (Main.InternalLoop)
            {
                try
                {
                    if (!ObjectManager.Me.IsMounted)
                    {
                        if (Fight.InFight && ObjectManager.Me.Target > 0)
                        {
                            if (ObjectManager.Me.Target != lastTarget
                                && (Moonfire.IsHostileDistanceGood || Sunfire.IsHostileDistanceGood))
                            {
                                Pull();
                                lastTarget = ObjectManager.Me.Target;
                            }

                            if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                && _mySettings.UseLowCombat)
                            {
                                if (ObjectManager.Target.GetDistance < 41)
                                    LowCombat();
                            }
                            else
                            {
                                if (ObjectManager.Target.GetDistance < 41)
                                    Combat();
                            }
                            break;
                        }
                        if (!ObjectManager.Me.IsCast)
                            Patrolling();
                    }
                }
                catch
                {
                }
                Thread.Sleep(250);
            }
        }

        private void Pull()
        {
            if (!ObjectManager.Me.HaveBuff(24858) && _mySettings.UseMoonkinForm)
            {
                MoonkinForm.Launch();
            }

            if (Moonfire.KnownSpell && Moonfire.IsHostileDistanceGood && Moonfire.IsSpellUsable
                && _mySettings.UseMoonfire)
            {
                Moonfire.Launch();
                MoonfireTimer = new Timer(1000*11);
                return;
            }
            else
            {
                if (Sunfire.KnownSpell && Sunfire.IsHostileDistanceGood && Sunfire.IsSpellUsable
                    && _mySettings.UseSunfire)
                {
                    Sunfire.Launch();
                    SunfireTimer = new Timer(1000*11);
                    return;
                }
            }
        }

        private void LowCombat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            DefenseCycle();
            Heal();

            if (ObjectManager.Me.HaveBuff(48518))
                StarfireUse = true;

            if (ObjectManager.Me.HaveBuff(48517))
                StarfireUse = false;

            if (!ObjectManager.Me.HaveBuff(24858) && _mySettings.UseMoonkinForm)
            {
                MoonkinForm.Launch();
                return;
            }

            if (Starsurge.KnownSpell && Starsurge.IsHostileDistanceGood && Starsurge.IsSpellUsable
                && ObjectManager.Me.HaveBuff(93400) && _mySettings.UseStarsurge)
            {
                Starsurge.Launch();
                return;
            }
            if (Moonfire.KnownSpell && Moonfire.IsHostileDistanceGood && Moonfire.IsSpellUsable
                && !Moonfire.TargetHaveBuff && _mySettings.UseMoonfire)
            {
                Moonfire.Launch();
                return;
            }
            if (Sunfire.KnownSpell && Sunfire.IsHostileDistanceGood && Sunfire.IsSpellUsable
                && !Sunfire.TargetHaveBuff && _mySettings.UseSunfire)
            {
                Sunfire.Launch();
                return;
            }
            if (Starsurge.KnownSpell && Starsurge.IsHostileDistanceGood && Starsurge.IsSpellUsable
                && _mySettings.UseStarsurge)
            {
                Starsurge.Launch();
                return;
            }
            if (Starfire.KnownSpell && Starfire.IsHostileDistanceGood && Starfire.IsSpellUsable
                && StarfireUse && _mySettings.UseStarfire)
            {
                Starfire.Launch();
                return;
            }
            if (Wrath.KnownSpell && Wrath.IsHostileDistanceGood && Wrath.IsSpellUsable
                && _mySettings.UseWrath)
            {
                Wrath.Launch();
                return;
            }

            if (Hurricane.KnownSpell && Hurricane.IsHostileDistanceGood && Hurricane.IsSpellUsable
                && _mySettings.UseHurricane)
            {
                Hurricane.Launch();
            }
        }

        private void Combat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            if (_onCd.IsReady)
                DefenseCycle();
            DPSCycle();
            Heal();
            Decast();
            DPSCycle();
            DPSBurst();
            DPSCycle();
        }

        private void Buff()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (AstralCommunion.KnownSpell && AstralCommunion.IsSpellUsable && _mySettings.UseAstralCommunion
                && !ObjectManager.Me.HaveBuff(48518) && !ObjectManager.Me.HaveBuff(48517)
                && !ObjectManager.Me.InCombat)
            {
                AstralCommunion.Launch();
                while (ObjectManager.Me.IsCast)
                {
                    Thread.Sleep(200);
                }
                return;
            }
            if (_mySettings.UseAlchFlask && !ObjectManager.Me.HaveBuff(79638) && !ObjectManager.Me.HaveBuff(79640) && !ObjectManager.Me.HaveBuff(79639)
                && !ItemsManager.IsItemOnCooldown(75525) && ItemsManager.GetItemCountByIdLUA(75525) > 0)
            {
                ItemsManager.UseItem(75525);
                return;
            }
            if (MarkoftheWild.KnownSpell && MarkoftheWild.IsSpellUsable && !MarkoftheWild.HaveBuff
                && _mySettings.UseMarkoftheWild)
            {
                MarkoftheWild.Launch();
                return;
            }
            if (!ObjectManager.Me.InCombat && _mySettings.UseDash
                && Dash.KnownSpell && Dash.IsSpellUsable && !Dash.HaveBuff && !StampedingRoar.HaveBuff
                && ObjectManager.Me.GetMove)
            {
                Dash.Launch();
                return;
            }
            if (!ObjectManager.Me.InCombat && _mySettings.UseStampedingRoar
                && StampedingRoar.KnownSpell && StampedingRoar.IsSpellUsable && !Dash.HaveBuff
                && !StampedingRoar.HaveBuff && ObjectManager.Me.GetMove)
            {
                StampedingRoar.Launch();
            }
        }

        private void AvoidMelee()
        {
            if (ObjectManager.Target.GetDistance < _mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
            {
                Logging.WriteFight("Too Close. Moving Back");
                var maxTimeTimer = new Timer(1000*2);
                MovementsAction.MoveBackward(true);
                while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                    Thread.Sleep(300);
                MovementsAction.MoveBackward(false);
                if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
                {
                    MovementsAction.MoveForward(true);
                    Thread.Sleep(1000);
                    MovementsAction.MoveForward(false);
                    MovementManager.Face(ObjectManager.Target.Position);
                }
            }
        }

        private void DefenseCycle()
        {
            if (!ObjectManager.Me.HaveBuff(24858) && _mySettings.UseMoonkinForm)
            {
                MoonkinForm.Launch();
            }

            if (ObjectManager.Me.HealthPercent <= _mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable &&
                Stoneform.KnownSpell
                && _mySettings.UseStoneform)
            {
                Stoneform.Launch();
                _onCd = new Timer(1000*8);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 80 && Barkskin.KnownSpell && Barkskin.IsSpellUsable
                && _mySettings.UseBarkskin)
            {
                Barkskin.Launch();
                _onCd = new Timer(1000*12);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 80 && MightyBash.KnownSpell && MightyBash.IsSpellUsable
                && _mySettings.UseMightyBash && MightyBash.IsHostileDistanceGood)
            {
                MightyBash.Launch();
                _onCd = new Timer(1000*5);
                return;
            }
            if (MassEntanglement.KnownSpell && MassEntanglement.IsSpellUsable && MassEntanglement.IsHostileDistanceGood
                && _mySettings.UseMassEntanglement && ObjectManager.Me.HealthPercent < 80)
            {
                MassEntanglement.Launch();

                if (WildCharge.KnownSpell && WildCharge.IsHostileDistanceGood && WildCharge.IsSpellUsable
                    && _mySettings.UseWildCharge)
                {
                    Thread.Sleep(200);
                    WildCharge.Launch();
                }
                return;
            }
            if (UrsolsVortex.KnownSpell && UrsolsVortex.IsSpellUsable && UrsolsVortex.IsHostileDistanceGood
                && _mySettings.UseUrsolsVortex && ObjectManager.Me.HealthPercent < 80)
            {
                UrsolsVortex.Launch();

                if (WildCharge.KnownSpell && WildCharge.IsHostileDistanceGood && WildCharge.IsSpellUsable
                    && _mySettings.UseWildCharge)
                {
                    Thread.Sleep(200);
                    WildCharge.Launch();
                }
                return;
            }
            if (NaturesGrasp.KnownSpell && NaturesGrasp.IsSpellUsable
                && ObjectManager.Target.IsCast && _mySettings.UseNaturesGrasp && ObjectManager.Me.HealthPercent < 80)
            {
                NaturesGrasp.Launch();

                if (WildCharge.KnownSpell && WildCharge.IsHostileDistanceGood && WildCharge.IsSpellUsable
                    && _mySettings.UseWildCharge)
                {
                    Thread.Sleep(200);
                    WildCharge.Launch();
                }
                return;
            }
            if (Typhoon.KnownSpell && Typhoon.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 2
                && ObjectManager.Target.GetDistance < 41 && ObjectManager.Me.HealthPercent < 70
                && _mySettings.UseTyphoon)
            {
                Typhoon.Launch();
                return;
            }
            if (DisorientingRoar.KnownSpell && DisorientingRoar.IsSpellUsable &&
                ObjectManager.GetNumberAttackPlayer() > 2
                && ObjectManager.Target.GetDistance < 10 && ObjectManager.Me.HealthPercent < 70
                && _mySettings.UseDisorientingRoar)
            {
                DisorientingRoar.Launch();
                _onCd = new Timer(1000*3);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable &&
                WarStomp.KnownSpell
                && _mySettings.UseWarStomp)
            {
                WarStomp.Launch();
                _onCd = new Timer(1000*2);
            }
        }

        private void Heal()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell &&
                ObjectManager.Me.ManaPercentage <= _mySettings.UseArcaneTorrentForResourceAtPercentage
                && _mySettings.UseArcaneTorrentForResource)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 80 && NaturesSwiftness.IsSpellUsable && NaturesSwiftness.KnownSpell
                && _mySettings.UseNaturesSwiftness && _mySettings.UseHealingTouch)
            {
                NaturesSwiftness.Launch();
                Thread.Sleep(400);
                HealingTouch.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 70 && Renewal.IsSpellUsable && Renewal.KnownSpell
                && _mySettings.UseRenewal)
            {
                Renewal.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 95 && !ObjectManager.Me.InCombat
                && HealingTouch.IsSpellUsable && HealingTouch.KnownSpell && _mySettings.UseHealingTouch)
            {
                HealingTouch.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 90 && CenarionWard.IsSpellUsable && CenarionWard.KnownSpell
                && _mySettings.UseCenarionWard)
            {
                CenarionWard.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseGiftoftheNaaruAtPercentage &&
                GiftoftheNaaru.IsSpellUsable && GiftoftheNaaru.KnownSpell
                && _mySettings.UseGiftoftheNaaru)
            {
                GiftoftheNaaru.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 70 && Rejuvenation.IsSpellUsable && Rejuvenation.KnownSpell
                && !Rejuvenation.HaveBuff && _mySettings.UseRejuvenation)
            {
                Rejuvenation.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 40 && HealingTouch.IsSpellUsable && HealingTouch.KnownSpell
                && HealingTouchTimer.IsReady && _mySettings.UseHealingTouch)
            {
                HealingTouch.Launch();
                HealingTouchTimer = new Timer(1000*15);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 35 && MightofUrsoc.IsSpellUsable && MightofUrsoc.KnownSpell
                && _mySettings.UseMightofUrsoc)
            {
                MightofUrsoc.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 30 && Tranquility.IsSpellUsable && Tranquility.KnownSpell
                && _mySettings.UseTranquility)
            {
                Tranquility.Launch();
                while (ObjectManager.Me.IsCast)
                {
                    Thread.Sleep(100);
                    Thread.Sleep(100);
                }
                return;
            }

            if (ObjectManager.Me.ManaPercentage < 50 && _mySettings.UseInnervate)
            {
                Innervate.Launch();
            }
        }

        private void Decast()
        {
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && SolarBeam.KnownSpell && SolarBeam.IsSpellUsable && SolarBeam.IsHostileDistanceGood
                && _mySettings.UseSolarBeam)
            {
                if (EntanglingRoots.KnownSpell && EntanglingRoots.IsHostileDistanceGood && EntanglingRoots.IsSpellUsable
                    && _mySettings.UseEntanglingRoots)
                {
                    EntanglingRoots.Launch();
                    Thread.Sleep(200);
                }

                SolarBeam.Launch();
                return;
            }
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8
                && ObjectManager.Me.HealthPercent <= _mySettings.UseArcaneTorrentForDecastAtPercentage
                && _mySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast &&
                ObjectManager.Target.IsTargetingMe)
            {
                ArcaneTorrent.Launch();
                }
        }

        private void DPSBurst()
        {
            if (_mySettings.UseTrinketOne && !ItemsManager.IsItemOnCooldown(_firstTrinket.Entry) && ItemsManager.IsUsableItemById(_firstTrinket.Entry))
            {
                ItemsManager.UseItem(_firstTrinket.Name);
                Logging.WriteFight("Use First Trinket Slot");
            }

            if (_mySettings.UseTrinketTwo && !ItemsManager.IsItemOnCooldown(_secondTrinket.Entry) && ItemsManager.IsUsableItemById(_secondTrinket.Entry))
            {
                ItemsManager.UseItem(_secondTrinket.Name);
                Logging.WriteFight("Use Second Trinket Slot");
                return;
            }
            if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseBerserking)
            {
                Berserking.Launch();
                return;
            }
            if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseBloodFury)
            {
                BloodFury.Launch();
                return;
            }
            if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseLifeblood)
            {
                Lifeblood.Launch();
                return;
            }
            if (_engineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseEngGlove)
            {
                Logging.WriteFight("Use Engineering Gloves.");
                Lua.RunMacroText("/use 10");
                _engineeringTimer = new Timer(1000*60);
                return;
            }
            if (ForceofNature.IsSpellUsable && ForceofNature.KnownSpell && ForceofNature.IsHostileDistanceGood
                && _mySettings.UseForceofNature)
            {
                SpellManager.CastSpellByIDAndPosition(106737, ObjectManager.Target.Position);
                return;
            }
            if (Incarnation.IsSpellUsable && Incarnation.KnownSpell && _mySettings.UseIncarnation
                && ObjectManager.Target.GetDistance < 41)
            {
                Incarnation.Launch();
                return;
            }
            if (HeartoftheWild.IsSpellUsable && HeartoftheWild.KnownSpell && _mySettings.UseHeartoftheWild
                && ObjectManager.Target.GetDistance < 41)
            {
                HeartoftheWild.Launch();
                return;
            }
            if (NaturesVigil.IsSpellUsable && NaturesVigil.KnownSpell && _mySettings.UseNaturesVigil
                && ObjectManager.Target.GetDistance < 41)
            {
                NaturesVigil.Launch();
                return;
            }
            if (CelestialAlignment.KnownSpell && _mySettings.UseCelestialAlignment &&
                ObjectManager.Target.GetDistance < 41
                && (CelestialAlignment.IsSpellUsable || ObjectManager.Me.HaveBuff(112071)))
            {
                if (!ObjectManager.Me.HaveBuff(112071))
                    CelestialAlignment.Launch();
                CelestialAlignmentCombat();
            }
        }

        private void DPSCycle()
        {
            if (ObjectManager.Me.HaveBuff(48518))
                StarfireUse = true;

            if (ObjectManager.Me.HaveBuff(48517))
                StarfireUse = false;

            if (!ObjectManager.Me.HaveBuff(24858) && _mySettings.UseMoonkinForm)
            {
                MoonkinForm.Launch();
                return;
            }

            if (Moonfire.KnownSpell && Moonfire.IsHostileDistanceGood && Moonfire.IsSpellUsable
                && _mySettings.UseMoonfire && (!Moonfire.TargetHaveBuff || MoonfireTimer.IsReady))
            {
                Moonfire.Launch();
                MoonfireTimer = new Timer(1000*11);
                return;
            }
            if (Sunfire.KnownSpell && Sunfire.IsHostileDistanceGood && Sunfire.IsSpellUsable
                && _mySettings.UseSunfire && (!Sunfire.TargetHaveBuff || SunfireTimer.IsReady))
            {
                Sunfire.Launch();
                SunfireTimer = new Timer(1000*11);
                return;
            }
            if (Starsurge.IsHostileDistanceGood && Starsurge.IsSpellUsable
                && Starsurge.KnownSpell && _mySettings.UseStarsurge)
            {
                Starsurge.Launch();
                return;
            }
            if (Starfall.KnownSpell && Starfall.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 2 &&
                ObjectManager.Target.GetDistance < 41 && _mySettings.UseStarfall)
            {
                Starfall.Launch();
                return;
            }
            if (WildMushroom.KnownSpell && WildMushroom.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 3
                && ObjectManager.Target.GetDistance < 41 && WildMushroomDetonate.KnownSpell &&
                WildMushroom.IsSpellUsable
                && _mySettings.UseWildMushroom)
            {
                for (int i = 0; i < 3; i++)
                {
                    SpellManager.CastSpellByIDAndPosition(88747, ObjectManager.Target.Position);
                    Thread.Sleep(200);
                }

                WildMushroomDetonate.Launch();
                return;
            }
            if (Hurricane.KnownSpell && Hurricane.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 2 &&
                ObjectManager.Target.GetDistance < 41 && _mySettings.UseHurricane)
            {
                SpellManager.CastSpellByIDAndPosition(16914, ObjectManager.Target.Position);
                return;
            }
            if (Starfire.KnownSpell && Starfire.IsSpellUsable && Starfire.IsHostileDistanceGood
                && StarfireUse && _mySettings.UseStarfire)
            {
                Starfire.Launch();
                return;
            }
            if (Wrath.KnownSpell && Wrath.IsSpellUsable && Wrath.IsHostileDistanceGood
                && _mySettings.UseWrath)
            {
                Wrath.Launch();
            }
        }

        public void CelestialAlignmentCombat()
        {
            while (ObjectManager.Me.HaveBuff(112071))
            {
                if (!Moonfire.TargetHaveBuff || MoonfireTimer.IsReady || !Sunfire.TargetHaveBuff || SunfireTimer.IsReady)
                {
                    Moonfire.Launch();
                    MoonfireTimer = new Timer(1000*11);
                    SunfireTimer = new Timer(1000*11);
                }

                if (Wrath.KnownSpell && Wrath.IsHostileDistanceGood && Wrath.IsSpellUsable)
                    Wrath.Launch();
            }
        }

        private void Patrolling()
        {
            if (!ObjectManager.Me.IsMounted)
            {
                Buff();
                Heal();
            }
        }

        #region Nested type: DruidBalanceSettings

        [Serializable]
        public class DruidBalanceSettings : Settings
        {
            public bool DoAvoidMelee = false;
            public int DoAvoidMeleeDistance = 0;
            public bool UseAlchFlask = true;
            public bool UseArcaneTorrentForDecast = true;
            public int UseArcaneTorrentForDecastAtPercentage = 100;
            public bool UseArcaneTorrentForResource = true;
            public int UseArcaneTorrentForResourceAtPercentage = 80;
            public bool UseAstralCommunion = true;
            public bool UseBarkskin = true;
            public bool UseBerserking = true;
            public bool UseBloodFury = true;
            public bool UseCelestialAlignment = true;
            public bool UseCenarionWard = true;
            public bool UseDash = true;
            public bool UseDisorientingRoar = true;
            public bool UseEngGlove = true;
            public bool UseEntanglingRoots = true;
            public bool UseFaerieFire = true;
            public bool UseForceofNature = true;
            public bool UseGiftoftheNaaru = true;
            public int UseGiftoftheNaaruAtPercentage = 80;
            public bool UseHealingTouch = true;
            public bool UseHeartoftheWild = true;
            public bool UseHurricane = true;
            public bool UseIncarnation = true;
            public bool UseInnervate = true;
            public bool UseLifeblood = true;
            public bool UseLowCombat = true;
            public bool UseMarkoftheWild = true;
            public bool UseMassEntanglement = true;
            public bool UseMightofUrsoc = true;
            public bool UseMightyBash = true;
            public bool UseMoonfire = true;
            public bool UseMoonkinForm = true;
            public bool UseNaturesGrasp = true;
            public bool UseNaturesSwiftness = true;
            public bool UseNaturesVigil = true;
            public bool UseRejuvenation = true;
            public bool UseRenewal = true;
            public bool UseSolarBeam = true;
            public bool UseStampedingRoar = true;
            public bool UseStarfall = true;
            public bool UseStarfire = true;
            public bool UseStarsurge = true;
            public bool UseStoneform = true;
            public int UseStoneformAtPercentage = 80;
            public bool UseSunfire = true;
            public bool UseTranquility = true;
            public bool UseTrinketOne = true;
            public bool UseTrinketTwo = true;
            public bool UseTyphoon = true;
            public bool UseUrsolsVortex = true;
            public bool UseWarStomp = true;
            public int UseWarStompAtPercentage = 80;
            public bool UseWildCharge = true;
            public bool UseWildMushroom = true;
            public bool UseWrath = true;

            public DruidBalanceSettings()
            {
                ConfigWinForm(new Point(500, 400), "Druid Balance Settings");
                /* Professions & Racials */
                AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
                AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
                AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
                AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
                AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
                AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
                /* Druid Buffs */
                AddControlInWinForm("Use Dash", "UseDash", "Druid Buffs");
                AddControlInWinForm("Use Faerie Fire", "UseFaerieFire", "Druid Buffs");
                AddControlInWinForm("Use Mark of the Wild", "UseMarkoftheWild", "Druid Buffs");
                AddControlInWinForm("Use Moonkin Form", "UseMoonkinForm", "Druid Buffs");
                AddControlInWinForm("Use Stampeding Roar", "UseStampedingRoar", "Druid Buffs");
                /* Offensive Spell */
                AddControlInWinForm("Use Hurricane", "UseHurricane", "Offensive Spell");
                AddControlInWinForm("Use Moonfire", "UseMoonfire", "Offensive Spell");
                AddControlInWinForm("Use Starfall", "UseStarfall", "Offensive Spell");
                AddControlInWinForm("Use Starfire", "UseStarfire", "Offensive Spell");
                AddControlInWinForm("Use Starsurge", "UseStarsurge", "Offensive Spell");
                AddControlInWinForm("Use Sunfire", "UseSunfire", "Offensive Spell");
                AddControlInWinForm("Use WildMushroom", "UseWildMushroom", "Offensive Spell");
                AddControlInWinForm("Use Wrath", "UseWrath", "Offensive Spell");
                /* Offensive Cooldown */
                AddControlInWinForm("Use Astral Communion", "UseAstralCommunion", "Offensive Cooldown");
                AddControlInWinForm("Use Celestial Alignment", "UseCelestialAlignment", "Offensive Cooldown");
                AddControlInWinForm("Use Force of Nature", "UseForceofNature", "Offensive Cooldown");
                AddControlInWinForm("Use Heart of the Wild", "UseHeartoftheWild", "Offensive Cooldown");
                AddControlInWinForm("Use Incarnation", "UseIncarnation", "Offensive Cooldown");
                AddControlInWinForm("Use Nature's Vigil", "UseNaturesVigil", "Offensive Cooldown");
                /* Defensive Cooldown */
                AddControlInWinForm("Use Barkskin", "UseBarkskin", "Defensive Cooldown");
                AddControlInWinForm("Use Disorienting Roar", "UseDisorientingRoar", "Defensive Cooldown");
                AddControlInWinForm("Use Entangling Roots", "UseEntanglingRoots", "Defensive Cooldown");
                AddControlInWinForm("Use Mass Entanglement", "UseMassEntanglement", "Defensive Cooldown");
                AddControlInWinForm("Use Mighty Bash", "UseMightyBash", "Defensive Cooldown");
                AddControlInWinForm("Use Nature's Grasp", "UseNaturesGrasp", "Defensive Cooldown");
                AddControlInWinForm("Use Solar Beam", "UseSolarBeam", "Defensive Cooldown");
                AddControlInWinForm("Use Typhoon", "UseTyphoon", "Defensive Cooldown");
                AddControlInWinForm("Use Ursol's Vortex", "UseUrsolsVortex", "Defensive Cooldown");
                AddControlInWinForm("Use Wild Charge", "UseWildCharge", "Defensive Cooldown");
                /* Healing Spell */
                AddControlInWinForm("Use Cenarion Ward", "UseCenarionWard", "Healing Spell");
                AddControlInWinForm("Use Healing Touch", "UseHealingTouch", "Healing Spell");
                AddControlInWinForm("Use Innervate", "UseInnervate", "Healing Spell");
                AddControlInWinForm("Use Might of Ursoc", "UseMightofUrsoc", "Healing Spell");
                AddControlInWinForm("Use Nature's Swiftness", "UseNaturesSwiftness", "Healing Spell");
                AddControlInWinForm("Use Rejuvenation", "UseRejuvenation", "Healing Spell");
                AddControlInWinForm("Use Renewal", "UseRenewal", "Healing Spell");
                AddControlInWinForm("Use Tranquility", "UseTranquility", "Healing Spell");
                /* Game Settings */
                AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
                AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
                AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
                AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
                AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
                AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
                AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
            }

            public static DruidBalanceSettings CurrentSetting { get; set; }

            public static DruidBalanceSettings GetSettings()
            {
                string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Druid_Balance.xml";
                if (File.Exists(currentSettingsFile))
                {
                    return
                        CurrentSetting = Load<DruidBalanceSettings>(currentSettingsFile);
                }
                return new DruidBalanceSettings();
            }
        }

        #endregion
    }

    public class DruidFeral
    {
        private readonly DruidFeralSettings _mySettings = DruidFeralSettings.GetSettings();

        #region General Timers & Variables

        private readonly WoWItem _firstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
        private readonly WoWItem _secondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);
        private int CP;
        private Timer _engineeringTimer = new Timer(0);
        private Timer _onCd = new Timer(0);

        #endregion

        #region Professions & Racials

        public readonly Spell Alchemy = new Spell("Alchemy");
        public readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
        public readonly Spell Berserking = new Spell("Berserking");
        public readonly Spell BloodFury = new Spell("Blood Fury");
        public readonly Spell Engineering = new Spell("Engineering");
        public readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
        public readonly Spell Lifeblood = new Spell("Lifeblood");
        public readonly Spell Stoneform = new Spell("Stoneform");
        public readonly Spell WarStomp = new Spell("War Stomp");

        #endregion

        #region Druid Buffs

        public readonly Spell CatForm = new Spell("Cat Form");
        public readonly Spell Dash = new Spell("Dash");
        public readonly Spell DisplacerBeast = new Spell("Displacer Beast");
        public readonly Spell FaerieFire = new Spell("Faerie Fire");
        public readonly Spell MarkoftheWild = new Spell("Mark of the Wild");
        public readonly Spell Prowl = new Spell("Prowl");
        public readonly Spell SavageRoar = new Spell("Savage Roar");
        public readonly Spell StampedingRoar = new Spell("Stampeding Roar");
        private bool FivePtSav;
        private Timer SavageRoarTimer = new Timer(0);

        #endregion

        #region Offensive Spell

        public readonly Spell FerociousBite = new Spell("Ferocious Bite");
        public readonly Spell Maim = new Spell("Maim");
        public readonly Spell Mangle = new Spell("Mangle");
        public readonly Spell Pounce = new Spell("Pounce");
        public readonly Spell Rake = new Spell("Rake");
        public readonly Spell Ravage = new Spell("Ravage");
        public readonly Spell Rip = new Spell("Rip");
        public readonly Spell Shred = new Spell("Shred");
        public readonly Spell Swipe = new Spell("Swipe");
        public readonly Spell Thrash = new Spell("Thrash");
        private bool FivePtFer;
        private bool FivePtRip;
        private Timer RakeTimer = new Timer(0);
        private Timer RipTimer = new Timer(0);

        #endregion

        #region Offensive Cooldown

        public readonly Spell Berserk = new Spell("Berserk");
        public readonly Spell ForceofNature = new Spell("Force of Nature");
        public readonly Spell HeartoftheWild = new Spell("Heart of the Wild");
        public readonly Spell Incarnation = new Spell("Incarnation");
        public readonly Spell NaturesVigil = new Spell("Nature's Vigil");
        public readonly Spell TigersFury = new Spell("Tiger's Fury");

        #endregion

        #region Defensive Cooldown

        public readonly Spell Barkskin = new Spell("Barkskin");
        public readonly Spell DisorientingRoar = new Spell("Disorienting Roar");
        public readonly Spell MassEntanglement = new Spell("Mass Entanglement");
        public readonly Spell MightyBash = new Spell("Mighty Bash");
        public readonly Spell NaturesGrasp = new Spell("Nature's Grasp");
        public readonly Spell SkullBash = new Spell("Skull Bash");
        public readonly Spell SurvivalInstincts = new Spell("Survival Instincts");
        public readonly Spell Typhoon = new Spell("Typhoon");
        public readonly Spell UrsolsVortex = new Spell("Ursol's Vortex");
        public readonly Spell WildCharge = new Spell("Wild Charge");

        #endregion

        #region Healing Spell

        public readonly Spell CenarionWard = new Spell("Cenarion Ward");
        public readonly Spell HealingTouch = new Spell("Healing Touch");
        public readonly Spell Innervate = new Spell("Innervate");
        public readonly Spell MightofUrsoc = new Spell("Might of Ursoc");
        public readonly Spell NaturesSwiftness = new Spell("Nature's Swiftness");
        public readonly Spell Rejuvenation = new Spell("Rejuvenation");
        public readonly Spell Renewal = new Spell("Renewal");
        public readonly Spell Tranquility = new Spell("Tranquility");
        private Timer HealingTouchTimer = new Timer(0);

        #endregion

        public DruidFeral()
        {
            Main.InternalRange = 5.0f;
            UInt64 lastTarget = 0;

            while (Main.InternalLoop)
            {
                try
                {
                    if (!ObjectManager.Me.IsDeadMe)
                    {
                        if (!ObjectManager.Me.IsMounted)
                        {
                            if (Fight.InFight && ObjectManager.Me.Target > 0)
                            {
                                if (ObjectManager.Me.Target != lastTarget
                                    && (FaerieFire.IsHostileDistanceGood || WildCharge.IsHostileDistanceGood))
                                {
                                    Pull();
                                    lastTarget = ObjectManager.Me.Target;
                                }

                                if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                    && _mySettings.UseLowCombat)
                                {
                                    if (ObjectManager.Target.GetDistance < 30)
                                        LowCombat();
                                }
                                else
                                {
                                    if (ObjectManager.Target.GetDistance < 30)
                                        Combat();
                                }
                                break;
                            }
                            if (!ObjectManager.Me.IsCast)
                                Patrolling();
                        }
                    }
                    Thread.Sleep(500);
                }
                catch
                {
                }
                Thread.Sleep(150);
            }
        }

        private void Pull()
        {
            if (!ObjectManager.Me.HaveBuff(768) && _mySettings.UseCatForm)
                CatForm.Launch();

            if (!SavageRoar.HaveBuff && _mySettings.UseSavageRoar && SavageRoar.IsSpellUsable && SavageRoar.KnownSpell
                && ObjectManager.Target.GetDistance < 30)
            {
                SavageRoar.Launch();
                SavageRoarTimer = new Timer(1000*12);
            }

            if (Prowl.IsSpellUsable && Prowl.KnownSpell && Prowl.IsHostileDistanceGood
                && _mySettings.UseProwl && !ObjectManager.Me.InCombat)
            {
                if (DisplacerBeast.IsSpellUsable && DisplacerBeast.KnownSpell && DisplacerBeast.IsHostileDistanceGood
                    && _mySettings.UseDisplacerBeast)
                {
                    DisplacerBeast.Launch();
                    Thread.Sleep(200);
                }

                if (Pounce.IsSpellUsable && Pounce.KnownSpell && Pounce.IsHostileDistanceGood
                    && _mySettings.UsePounce)
                {
                    Pounce.Launch();
                    return;
                }
            }
            else
            {
                if (WildCharge.KnownSpell && WildCharge.IsSpellUsable && WildCharge.IsHostileDistanceGood
                    && _mySettings.UseWildCharge && ObjectManager.Target.GetDistance > Main.InternalRange)
                {
                    WildCharge.Launch();
                    return;
                }

                else
                {
                    if (FaerieFire.KnownSpell && FaerieFire.IsSpellUsable && FaerieFire.IsHostileDistanceGood
                        && _mySettings.UseFaerieFire)
                    {
                        FaerieFire.Launch();
                        return;
                    }
                }
            }
        }

        private void LowCombat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            DefenseCycle();
            Heal();

            if (!ObjectManager.Me.HaveBuff(768) && _mySettings.UseCatForm)
            {
                CatForm.Launch();
                return;
            }

            if (Mangle.IsSpellUsable && Mangle.KnownSpell && Mangle.IsHostileDistanceGood
                && _mySettings.UseMangle)
            {
                Mangle.Launch();
                if (ObjectManager.Target.HealthPercent < 50 && ObjectManager.Target.HealthPercent > 0)
                {
                    Mangle.Launch();
                    return;
                }
            }
            else
            {
                if (Swipe.IsSpellUsable && Swipe.KnownSpell && Swipe.IsHostileDistanceGood
                    && _mySettings.UseSwipe)
                {
                    Swipe.Launch();
                    return;
                }
            }
        }

        private void Combat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            if (_onCd.IsReady)
                DefenseCycle();
            DPSCycle();
            Heal();
            Decast();
            DPSCycle();
            DPSBurst();
            DPSCycle();
        }

        private void Buff()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (MarkoftheWild.KnownSpell && MarkoftheWild.IsSpellUsable && !MarkoftheWild.HaveBuff)
            {
                MarkoftheWild.Launch();
                return;
            }
            if (_mySettings.UseAlchFlask && !ObjectManager.Me.HaveBuff(79638) && !ObjectManager.Me.HaveBuff(79640) && !ObjectManager.Me.HaveBuff(79639)
                && !ItemsManager.IsItemOnCooldown(75525) && ItemsManager.GetItemCountByIdLUA(75525) > 0)
            {
                ItemsManager.UseItem(75525);
                return;
            }
            if (!ObjectManager.Me.InCombat && _mySettings.UseDash
                && Dash.KnownSpell && Dash.IsSpellUsable && !Dash.HaveBuff && !StampedingRoar.HaveBuff
                && ObjectManager.Me.GetMove)
            {
                Dash.Launch();
                return;
            }
            if (!ObjectManager.Me.InCombat && _mySettings.UseStampedingRoar
                && StampedingRoar.KnownSpell && StampedingRoar.IsSpellUsable && !Dash.HaveBuff
                && !StampedingRoar.HaveBuff && ObjectManager.Me.GetMove)
            {
                StampedingRoar.Launch();
            }
        }

        private void AvoidMelee()
        {
            if (ObjectManager.Target.GetDistance < _mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
            {
                Logging.WriteFight("Too Close. Moving Back");
                var maxTimeTimer = new Timer(1000*2);
                MovementsAction.MoveBackward(true);
                while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                    Thread.Sleep(300);
                MovementsAction.MoveBackward(false);
                if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
                {
                    MovementsAction.MoveForward(true);
                    Thread.Sleep(1000);
                    MovementsAction.MoveForward(false);
                    MovementManager.Face(ObjectManager.Target.Position);
                }
            }
        }

        private void DefenseCycle()
        {
            if (ObjectManager.Me.HealthPercent < 80 && _mySettings.UseBarkskin
                && Barkskin.KnownSpell && Barkskin.IsSpellUsable)
            {
                Barkskin.Launch();
                _onCd = new Timer(1000*12);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 90 && MightyBash.IsHostileDistanceGood
                && MightyBash.KnownSpell && MightyBash.IsSpellUsable && _mySettings.UseMightyBash)
            {
                MightyBash.Launch();
                _onCd = new Timer(1000*5);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 70 && ObjectManager.Me.ComboPoint > 2
                && Maim.KnownSpell && Maim.IsSpellUsable && _mySettings.UseMaim && Maim.IsHostileDistanceGood)
            {
                CP = ObjectManager.Me.ComboPoint;
                Maim.Launch();
                _onCd = new Timer(1000*CP);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 70 && _mySettings.UseSurvivalInstincts
                && SurvivalInstincts.KnownSpell && SurvivalInstincts.IsSpellUsable)
            {
                SurvivalInstincts.Launch();
                _onCd = new Timer(1000*12);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable &&
                Stoneform.KnownSpell
                && _mySettings.UseStoneform)
            {
                Stoneform.Launch();
                _onCd = new Timer(1000*8);
                return;
            }
            if (MassEntanglement.KnownSpell && MassEntanglement.IsSpellUsable && MassEntanglement.IsHostileDistanceGood
                && ObjectManager.Target.IsCast && _mySettings.UseMassEntanglement &&
                ObjectManager.GetNumberAttackPlayer() > 2
                && ObjectManager.Me.HealthPercent < 70)
            {
                if (Typhoon.KnownSpell && Typhoon.IsSpellUsable && _mySettings.UseTyphoon
                    && ObjectManager.Target.GetDistance < 41 && _mySettings.UseTyphoon)
                {
                    Typhoon.Launch();
                    Thread.Sleep(200);
                }

                MassEntanglement.Launch();
                return;
            }
            if (UrsolsVortex.KnownSpell && UrsolsVortex.IsSpellUsable && UrsolsVortex.IsHostileDistanceGood
                && _mySettings.UseUrsolsVortex && ObjectManager.Me.HealthPercent < 80
                && ObjectManager.GetNumberAttackPlayer() > 2)
            {
                UrsolsVortex.Launch();

                if (WildCharge.KnownSpell && WildCharge.IsHostileDistanceGood && WildCharge.IsSpellUsable
                    && _mySettings.UseWildCharge && ObjectManager.Target.GetDistance > Main.InternalRange)
                {
                    Thread.Sleep(200);
                    WildCharge.Launch();
                }
                return;
            }
            if (NaturesGrasp.KnownSpell && NaturesGrasp.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 2
                && ObjectManager.Target.IsCast && _mySettings.UseNaturesGrasp && ObjectManager.Me.HealthPercent < 80)
            {
                NaturesGrasp.Launch();
                return;
            }
            if (Typhoon.KnownSpell && Typhoon.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 2
                && ObjectManager.Target.GetDistance < 41 && ObjectManager.Me.HealthPercent < 70
                && _mySettings.UseTyphoon)
            {
                Typhoon.Launch();
                return;
            }
            if (DisorientingRoar.KnownSpell && DisorientingRoar.IsSpellUsable &&
                ObjectManager.GetNumberAttackPlayer() > 2
                && ObjectManager.Target.GetDistance < 10 && ObjectManager.Me.HealthPercent < 70
                && _mySettings.UseDisorientingRoar)
            {
                DisorientingRoar.Launch();
                _onCd = new Timer(1000*3);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable &&
                WarStomp.KnownSpell
                && _mySettings.UseWarStomp)
            {
                WarStomp.Launch();
                _onCd = new Timer(1000*2);
            }
        }

        private void Heal()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (ObjectManager.Me.HealthPercent < 80 && NaturesSwiftness.IsSpellUsable && NaturesSwiftness.KnownSpell
                && _mySettings.UseNaturesSwiftness && _mySettings.UseHealingTouch)
            {
                NaturesSwiftness.Launch();
                Thread.Sleep(400);
                HealingTouch.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 70 && Renewal.IsSpellUsable && Renewal.KnownSpell
                && _mySettings.UseRenewal)
            {
                Renewal.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 90 && CenarionWard.IsSpellUsable && CenarionWard.KnownSpell
                && _mySettings.UseCenarionWard)
            {
                CenarionWard.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 50 && !ObjectManager.Me.InCombat
                && HealingTouch.IsSpellUsable && HealingTouch.KnownSpell && _mySettings.UseHealingTouch)
            {
                while (ObjectManager.Me.HealthPercent < 95 && HealingTouch.IsSpellUsable)
                {
                    HealingTouch.Launch();
                    Thread.Sleep(1500);
                }
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseGiftoftheNaaruAtPercentage &&
                GiftoftheNaaru.IsSpellUsable && GiftoftheNaaru.KnownSpell)
            {
                GiftoftheNaaru.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 70 && HealingTouch.IsSpellUsable && HealingTouch.KnownSpell
                && ObjectManager.Me.HaveBuff(69369) && _mySettings.UseHealingTouch)
            {
                HealingTouch.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 50 && Rejuvenation.IsSpellUsable && Rejuvenation.KnownSpell
                && !Rejuvenation.HaveBuff && _mySettings.UseRejuvenation)
            {
                Rejuvenation.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 40 && HealingTouch.IsSpellUsable && HealingTouch.KnownSpell
                && HealingTouchTimer.IsReady && _mySettings.UseHealingTouch)
            {
                HealingTouch.Launch();
                HealingTouchTimer = new Timer(1000*15);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 35 && MightofUrsoc.IsSpellUsable && MightofUrsoc.KnownSpell
                && _mySettings.UseMightofUrsoc)
            {
                MightofUrsoc.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 30 && Tranquility.IsSpellUsable && Tranquility.KnownSpell
                && _mySettings.UseTranquility)
            {
                Tranquility.Launch();
                while (ObjectManager.Me.IsCast)
                {
                    Thread.Sleep(100);
                    Thread.Sleep(100);
                }
                return;
            }
            if (ObjectManager.Me.ManaPercentage < 10 && _mySettings.UseInnervate)
            {
                Innervate.Launch();
            }
        }

        private void Decast()
        {
            if (ObjectManager.Target.IsCast && _mySettings.UseSkullBash
                && ObjectManager.Target.IsTargetingMe
                && SkullBash.KnownSpell && SkullBash.IsSpellUsable && SkullBash.IsHostileDistanceGood)
            {
                SkullBash.Launch();
                return;
            }
            else
            {
                if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8
                    && ObjectManager.Me.HealthPercent <= _mySettings.UseArcaneTorrentForDecastAtPercentage
                    && _mySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast &&
                    ObjectManager.Target.IsTargetingMe)
                {
                    ArcaneTorrent.Launch();
                    return;
                }
            }
        }

        private void DPSBurst()
        {
            if (_mySettings.UseTrinketOne && !ItemsManager.IsItemOnCooldown(_firstTrinket.Entry) && ItemsManager.IsUsableItemById(_firstTrinket.Entry))
            {
                ItemsManager.UseItem(_firstTrinket.Name);
                Logging.WriteFight("Use First Trinket Slot");
            }

            if (_mySettings.UseTrinketTwo && !ItemsManager.IsItemOnCooldown(_secondTrinket.Entry) && ItemsManager.IsUsableItemById(_secondTrinket.Entry))
            {
                ItemsManager.UseItem(_secondTrinket.Name);
                Logging.WriteFight("Use Second Trinket Slot");
                return;
            }
            if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                && _mySettings.UseBerserking)
            {
                Berserking.Launch();
                return;
            }
            if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 30
                && _mySettings.UseBloodFury)
            {
                BloodFury.Launch();
                return;
            }
            if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                && _mySettings.UseLifeblood)
            {
                Lifeblood.Launch();
                return;
            }
            if (_engineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                && _mySettings.UseEngGlove)
            {
                Logging.WriteFight("Use Engineering Gloves.");
                Lua.RunMacroText("/use 10");
                _engineeringTimer = new Timer(1000*60);
                return;
            }
            if (ForceofNature.IsSpellUsable && ForceofNature.KnownSpell && ForceofNature.IsHostileDistanceGood
                && _mySettings.UseForceofNature)
            {
                SpellManager.CastSpellByIDAndPosition(106737, ObjectManager.Target.Position);
                return;
            }
            if (Incarnation.IsSpellUsable && Incarnation.KnownSpell && _mySettings.UseIncarnation
                && ObjectManager.Target.GetDistance < 30)
            {
                Incarnation.Launch();
                return;
            }
            if (HeartoftheWild.IsSpellUsable && HeartoftheWild.KnownSpell && _mySettings.UseHeartoftheWild
                && ObjectManager.Target.GetDistance < 30)
            {
                HeartoftheWild.Launch();
                return;
            }
            if (NaturesVigil.IsSpellUsable && NaturesVigil.KnownSpell && _mySettings.UseNaturesVigil
                && ObjectManager.Target.GetDistance < 30)
            {
                NaturesVigil.Launch();
                return;
            }
            if (TigersFury.KnownSpell && TigersFury.IsSpellUsable && ObjectManager.Me.Energy < 35
                && !Berserk.HaveBuff && _mySettings.UseTigersFury && ObjectManager.Target.GetDistance < 30)
            {
                TigersFury.Launch();
                return;
            }
            if (Berserk.KnownSpell && Berserk.IsSpellUsable && _mySettings.UseBerserk
                && ObjectManager.Target.GetDistance < 30)
            {
                Berserk.Launch();
            }
        }

        private void DPSCycle()
        {
            if (!ObjectManager.Me.HaveBuff(768) && _mySettings.UseCatForm)
            {
                CatForm.Launch();
                return;
            }

            if (FaerieFire.KnownSpell && FaerieFire.IsSpellUsable && FaerieFire.IsHostileDistanceGood
                && _mySettings.UseFaerieFire && (!FaerieFire.TargetHaveBuff || !ObjectManager.Target.HaveBuff(113746)))
            {
                FaerieFire.Launch();
                return;
            }
            if (ObjectManager.GetNumberAttackPlayer() > 2 && Thrash.IsSpellUsable && Thrash.KnownSpell
                && Thrash.IsHostileDistanceGood && !Thrash.TargetHaveBuff && _mySettings.UseThrash)
            {
                Thrash.Launch();
                return;
            }
            if (ObjectManager.GetNumberAttackPlayer() > 2 && Swipe.IsSpellUsable && Swipe.KnownSpell
                && Swipe.IsHostileDistanceGood && _mySettings.UseSwipe)
            {
                Swipe.Launch();
                return;
            }
            if (FerociousBite.IsSpellUsable && FerociousBite.KnownSpell && FerociousBite.IsHostileDistanceGood
                && _mySettings.UseFerociousBite && !RipTimer.IsReady && ObjectManager.Me.ComboPoint > 4
                && ObjectManager.Target.HealthPercent > 24 && !SavageRoarTimer.IsReady
                && ObjectManager.Me.Energy > 49 && FivePtRip)
            {
                FerociousBite.Launch();
                return;
            }
            if (SavageRoar.IsSpellUsable && SavageRoar.KnownSpell && SavageRoar.IsHostileDistanceGood && !FivePtSav
                && ObjectManager.Me.ComboPoint > 4 && _mySettings.UseSavageRoar)
            {
                CP = ObjectManager.Me.ComboPoint;
                SavageRoar.Launch();
                SavageRoarTimer = new Timer(1000*(12 + (6*CP)));
                FivePtSav = true;
                return;
            }
            if (SavageRoar.IsSpellUsable && SavageRoar.KnownSpell && SavageRoar.IsHostileDistanceGood
                && (!SavageRoar.HaveBuff || SavageRoarTimer.IsReady) && _mySettings.UseSavageRoar
                && ObjectManager.Me.ComboPoint < 5)
            {
                CP = ObjectManager.Me.ComboPoint;
                SavageRoar.Launch();
                SavageRoarTimer = new Timer(1000*(12 + (6*CP)));
                FivePtSav = false;
                return;
            }
            if (Rake.IsSpellUsable && Rake.KnownSpell && Rake.IsHostileDistanceGood && !Rake.TargetHaveBuff
                && _mySettings.UseRake)
            {
                Rake.Launch();
                return;
            }

            if (ObjectManager.Target.HealthPercent > 24)
            {
                if (Rip.IsSpellUsable && Rip.KnownSpell && Rip.IsHostileDistanceGood && !FivePtRip
                    && ObjectManager.Me.ComboPoint > 4 && _mySettings.UseRip)
                {
                    Rip.Launch();
                    RipTimer = new Timer(1000*13);
                    FivePtRip = true;
                    return;
                }

                if (Rip.IsSpellUsable && Rip.KnownSpell && Rip.IsHostileDistanceGood && _mySettings.UseRip
                    && (!Rip.TargetHaveBuff || RipTimer.IsReady))
                {
                    Rip.Launch();
                    RipTimer = new Timer(1000*19);
                    FivePtRip = false;
                    return;
                }
            }
            else
            {
                if (Rip.IsSpellUsable && Rip.KnownSpell && Rip.IsHostileDistanceGood && !Rip.TargetHaveBuff
                    && _mySettings.UseRip)
                {
                    CP = ObjectManager.Me.ComboPoint;
                    Rip.Launch();
                    RipTimer = new Timer(1000*19);
                    FivePtFer = CP == 5;
                    return;
                }

                if (FerociousBite.IsSpellUsable && FerociousBite.KnownSpell && FerociousBite.IsHostileDistanceGood
                    && !FivePtFer && ObjectManager.Me.ComboPoint > 4 && _mySettings.UseFerociousBite)
                {
                    FerociousBite.Launch();
                    RipTimer = new Timer(1000*19);
                    FivePtFer = true;
                    return;
                }

                if (FerociousBite.IsSpellUsable && FerociousBite.KnownSpell && FerociousBite.IsHostileDistanceGood
                    && _mySettings.UseFerociousBite && RipTimer.IsReady && ObjectManager.Me.ComboPoint < 5)
                {
                    FerociousBite.Launch();
                    RipTimer = new Timer(1000*19);
                    FivePtFer = false;
                    return;
                }
            }

            if (ObjectManager.Me.HaveBuff(102543) && Ravage.KnownSpell && Ravage.IsSpellUsable && Ravage.IsHostileDistanceGood && _mySettings.UseRavage)
            {
                Ravage.Launch();
                return;
            }
            if (Shred.KnownSpell && Shred.IsSpellUsable && Shred.IsHostileDistanceGood
                && _mySettings.UseShred && _mySettings.UseGlyphofShred
                && (TigersFury.HaveBuff || Berserk.HaveBuff))
            {
                Shred.Launch();
                return;
            }
            if (Mangle.KnownSpell && Mangle.IsSpellUsable && Mangle.IsHostileDistanceGood
                && _mySettings.UseMangle)
            {
                Mangle.Launch();
                return;
            }

            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell
                && _mySettings.UseArcaneTorrentForResource)
            {
                ArcaneTorrent.Launch();
            }
        }

        private void Patrolling()
        {
            if (ObjectManager.Me.IsMounted) return;
            Buff();
            Heal();
        }

        #region Nested type: DruidFeralSettings

        [Serializable]
        public class DruidFeralSettings : Settings
        {
            public bool DoAvoidMelee = false;
            public int DoAvoidMeleeDistance = 0;
            public bool UseAlchFlask = true;
            public bool UseArcaneTorrentForDecast = true;
            public int UseArcaneTorrentForDecastAtPercentage = 100;
            public bool UseArcaneTorrentForResource = true;
            public bool UseBarkskin = true;
            public bool UseBerserk = true;
            public bool UseBerserking = true;
            public bool UseBloodFury = true;
            public bool UseCatForm = true;
            public bool UseCenarionWard = true;
            public bool UseDash = true;
            public bool UseDisorientingRoar = true;
            public bool UseDisplacerBeast = false;
            public bool UseEngGlove = true;
            public bool UseFaerieFire = true;
            public bool UseFerociousBite = true;
            public bool UseForceofNature = true;
            public bool UseGiftoftheNaaru = true;
            public int UseGiftoftheNaaruAtPercentage = 80;
            public bool UseGlyphofShred = false;
            public bool UseHealingTouch = true;
            public bool UseHeartoftheWild = true;
            public bool UseIncarnation = true;
            public bool UseInnervate = true;
            public bool UseLifeblood = true;
            public bool UseLowCombat = true;
            public bool UseMaim = true;
            public bool UseMangle = true;
            public bool UseMarkoftheWild = true;
            public bool UseMassEntanglement = true;
            public bool UseMightofUrsoc = true;
            public bool UseMightyBash = true;
            public bool UseNaturesGrasp = true;
            public bool UseNaturesSwiftness = true;
            public bool UseNaturesVigil = true;
            public bool UsePounce = true;
            public bool UseProwl = false;
            public bool UseRake = true;
            public bool UseRavage = true;
            public bool UseRejuvenation = true;
            public bool UseRenewal = true;
            public bool UseRip = true;
            public bool UseSavageRoar = true;
            public bool UseShred = true;
            public bool UseSkullBash = true;
            public bool UseStampedingRoar = true;
            public bool UseStoneform = true;
            public int UseStoneformAtPercentage = 80;
            public bool UseSurvivalInstincts = true;
            public bool UseSwipe = true;
            public bool UseThrash = true;
            public bool UseTigersFury = true;
            public bool UseTranquility = true;
            public bool UseTrinketOne = true;
            public bool UseTrinketTwo = true;
            public bool UseTyphoon = true;
            public bool UseUrsolsVortex = true;
            public bool UseWarStomp = true;
            public int UseWarStompAtPercentage = 80;
            public bool UseWildCharge = true;

            public DruidFeralSettings()
            {
                ConfigWinForm(new Point(500, 400), "Druid Feral Settings");
                /* Professions & Racials */
                AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials");
                AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
                AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
                AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
                AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
                AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
                AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
                /* Druid Buffs */
                AddControlInWinForm("Use Cat Form", "UseCatForm", "Druid Buffs");
                AddControlInWinForm("Use Dash", "UseDash", "Druid Buffs");
                AddControlInWinForm("Use Displacer Beast", "UseDisplacerBeast", "Druid Buffs");
                AddControlInWinForm("Use Faerie Fire", "UseFaerieFire", "Druid Buffs");
                AddControlInWinForm("Use Mark of the Wild", "UseMarkoftheWild", "Druid Buffs");
                AddControlInWinForm("Use Prowl", "UseProwl", "Druid Buffs");
                AddControlInWinForm("Use Savage Roar", "UseSavageRoar", "Druid Buffs");
                AddControlInWinForm("Use Stampeding Roar", "UseStampedingRoar", "Druid Buffs");
                /* Offensive Spell */
                AddControlInWinForm("Use Ferocious Bite", "UseFerociousBite", "Offensive Spell");
                AddControlInWinForm("Use Maim ", "UseMaim ", "Offensive Spell");
                AddControlInWinForm("Use Mangle", "UseMangle", "Offensive Spell");
                AddControlInWinForm("Use Pounce", "UsePounce", "Offensive Spell");
                AddControlInWinForm("Use Rake", "UseRake", "Offensive Spell");
                AddControlInWinForm("Use Ravage", "UseRavage", "Offensive Spell");
                AddControlInWinForm("Use Rip", "UseRip", "Offensive Spell");
                AddControlInWinForm("Use Shred", "UseShred", "Offensive Spell");
                AddControlInWinForm("Use Swipe", "UseSwipe", "Offensive Spell");
                AddControlInWinForm("Use Thrash", "UseThrash", "Offensive Spell");
                /* Offensive Cooldown */
                AddControlInWinForm("Use Berserk", "UseBerserk", "Offensive Cooldown");
                AddControlInWinForm("Use Force of Nature", "UseForceofNature", "Offensive Cooldown");
                AddControlInWinForm("Use Heart of the Wild", "UseHeartoftheWild", "Offensive Cooldown");
                AddControlInWinForm("Use Incarnation", "UseIncarnation", "Offensive Cooldown");
                AddControlInWinForm("Use Nature's Vigil", "UseNaturesVigil", "Offensive Cooldown");
                AddControlInWinForm("Use Tiger's Fury", "UseTigersFury", "Offensive Cooldown");
                /* Defensive Cooldown */
                AddControlInWinForm("Use Barkskin", "UseBarkskin", "Defensive Cooldown");
                AddControlInWinForm("Use Disorienting Roar", "UseDisorientingRoar", "Defensive Cooldown");
                AddControlInWinForm("Use Mass Entanglement", "UseMassEntanglement", "Defensive Cooldown");
                AddControlInWinForm("Use Mighty Bash", "UseMightyBash", "Defensive Cooldown");
                AddControlInWinForm("Use Nature's Grasp", "UseNaturesGrasp", "Defensive Cooldown");
                AddControlInWinForm("Use Skull Bash", "UseSkullBash", "Defensive Cooldown");
                AddControlInWinForm("Use Survival Instincts", "UseSurvivalInstincts", "Defensive Cooldown");
                AddControlInWinForm("Use Typhoon", "UseTyphoon", "Defensive Cooldown");
                AddControlInWinForm("Use Ursol's Vortex", "UseUrsolsVortex", "Defensive Cooldown");
                AddControlInWinForm("Use Wild Charge", "UseWildCharge", "Defensive Cooldown");
                /* Healing Spell */
                AddControlInWinForm("Use Cenarion Ward", "UseCenarionWard", "Healing Spell");
                AddControlInWinForm("Use Healing Touch", "UseHealingTouch", "Healing Spell");
                AddControlInWinForm("Use Innervate", "UseInnervate", "Healing Spell");
                AddControlInWinForm("Use Might of Ursoc", "UseMightofUrsoc", "Healing Spell");
                AddControlInWinForm("Use Nature's Swiftness", "UseNaturesSwiftness", "Healing Spell");
                AddControlInWinForm("Use Rejuvenation", "UseRejuvenation", "Healing Spell");
                AddControlInWinForm("Use Renewal", "UseRenewal", "Healing Spell");
                AddControlInWinForm("Use Tranquility", "UseTranquility", "Healing Spell");
                /* Game Settings */
                AddControlInWinForm("Using Glyph of Shred?", "UseGlyphofShred", "Game Settings");
                AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
                AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
                AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
                AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
                AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
                AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
                AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
            }

            public static DruidFeralSettings currentSetting { get; set; }

            public static DruidFeralSettings GetSettings()
            {
                string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Druid_Feral.xml";
                if (File.Exists(currentSettingsFile))
                {
                    return
                        currentSetting = Load<DruidFeralSettings>(currentSettingsFile);
                }
                return new DruidFeralSettings();
            }
        }

        #endregion
    }

    public class DruidRestoration
    {
        private readonly DruidRestorationSettings _mySettings = DruidRestorationSettings.GetSettings();

        #region General Timers & Variables

        private readonly WoWItem _firstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
        private readonly WoWItem _secondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);
        private Timer _engineeringTimer = new Timer(0);
        private Timer _onCd = new Timer(0);

        #endregion

        #region Professions & Racials

        public readonly Spell Alchemy = new Spell("Alchemy");
        public readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
        public readonly Spell Berserking = new Spell("Berserking");
        public readonly Spell BloodFury = new Spell("Blood Fury");
        public readonly Spell Engineering = new Spell("Engineering");
        public readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
        public readonly Spell Lifeblood = new Spell("Lifeblood");
        public readonly Spell Stoneform = new Spell("Stoneform");
        public readonly Spell WarStomp = new Spell("War Stomp");

        #endregion

        #region Druid Buffs

        public readonly Spell Dash = new Spell("Dash");
        public readonly Spell FaerieFire = new Spell("Faerie Fire");
        public readonly Spell MarkoftheWild = new Spell("Mark of the Wild");
        public readonly Spell StampedingRoar = new Spell("Stampeding Roar");

        #endregion

        #region Offensive Spell

        public readonly Spell Hurricane = new Spell("Hurricane");
        public readonly Spell Moonfire = new Spell("Moonfire");
        public readonly Spell Wrath = new Spell("Wrath");
        private Timer _moonfireTimer = new Timer(0);

        #endregion

        #region Healing Cooldown

        public readonly Spell ForceofNature = new Spell("Force of Nature");
        public readonly Spell Incarnation = new Spell("Incarnation");

        #endregion

        #region Defensive Cooldown

        public readonly Spell Barkskin = new Spell("Barkskin");
        public readonly Spell DisorientingRoar = new Spell("Disorienting Roar");
        public readonly Spell EntanglingRoots = new Spell("Entangling Roots");
        public readonly Spell Ironbark = new Spell("Ironbark");
        public readonly Spell MassEntanglement = new Spell("Mass Entanglement");
        public readonly Spell MightyBash = new Spell("Mighty Bash");
        public readonly Spell NaturesGrasp = new Spell("Nature's Grasp");
        public readonly Spell SolarBeam = new Spell("Solar Beam");
        public readonly Spell Typhoon = new Spell("Typhoon");
        public readonly Spell UrsolsVortex = new Spell("Ursol's Vortex");
        public readonly Spell WildCharge = new Spell("Wild Charge");

        #endregion

        #region Healing Spell

        public readonly Spell CenarionWard = new Spell("Cenarion Ward");
        public readonly Spell HealingTouch = new Spell("Healing Touch");
        public readonly Spell Innervate = new Spell("Innervate");
        public readonly Spell Lifebloom = new Spell("Lifebloom");
        public readonly Spell MightofUrsoc = new Spell("Might of Ursoc");
        public readonly Spell NaturesSwiftness = new Spell("Nature's Swiftness");
        public readonly Spell Nourish = new Spell("Nourish");
        public readonly Spell Regrowth = new Spell("Regrowth");
        public readonly Spell Rejuvenation = new Spell("Rejuvenation");
        public readonly Spell Renewal = new Spell("Renewal");
        public readonly Spell Swiftmend = new Spell("Swiftmend");
        public readonly Spell Tranquility = new Spell("Tranquility");
        public readonly Spell WildGrowth = new Spell("Wild Growth");
        public readonly Spell WildMushroom = new Spell("Wild Mushroom");
        public readonly Spell WildMushroomBloom = new Spell("Wild Mushroom: Bloom");
        private Timer HealingTouchTimer = new Timer(0);
        private Timer NourishTimer = new Timer(0);

        #endregion

        public DruidRestoration()
        {
            Main.InternalRange = 30.0f;
            UInt64 lastTarget = 0;

            while (Main.InternalLoop)
            {
                try
                {
                    if (!ObjectManager.Me.IsDeadMe)
                    {
                        if (!ObjectManager.Me.IsMounted)
                        {
                            if (Fight.InFight && ObjectManager.Me.Target > 0)
                            {
                                if (ObjectManager.Me.Target != lastTarget
                                    && (Moonfire.IsHostileDistanceGood || Wrath.IsHostileDistanceGood))
                                {
                                    Pull();
                                    lastTarget = ObjectManager.Me.Target;
                                }

                                if (ObjectManager.Target.GetDistance < 41)
                                    Combat();
                                break;
                            }
                            if (!ObjectManager.Me.IsCast)
                                Patrolling();
                        }
                    }
                    Thread.Sleep(500);
                }
                catch
                {
                }
                Thread.Sleep(250);
            }
        }

        private void Pull()
        {
            if (Moonfire.KnownSpell && Moonfire.IsHostileDistanceGood && Moonfire.IsSpellUsable
                && _mySettings.UseMoonfire)
            {
                Moonfire.Launch();
                _moonfireTimer = new Timer(1000*11);
                return;
            }
            else
            {
                if (Wrath.KnownSpell && Wrath.IsHostileDistanceGood && Wrath.IsSpellUsable
                    && _mySettings.UseWrath)
                {
                    Wrath.Launch();
                    return;
                }
            }
        }

        private void Combat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            if (_onCd.IsReady)
                DefenseCycle();
            DPSCycle();
            Heal();
            Decast();
            DPSCycle();
            HealingBurst();
            DPSCycle();
        }

        private void Buff()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (_mySettings.UseAlchFlask && !ObjectManager.Me.HaveBuff(79638) && !ObjectManager.Me.HaveBuff(79640) && !ObjectManager.Me.HaveBuff(79639)
                && !ItemsManager.IsItemOnCooldown(75525) && ItemsManager.GetItemCountByIdLUA(75525) > 0)
            {
                ItemsManager.UseItem(75525);
                return;
            }
            if (MarkoftheWild.KnownSpell && MarkoftheWild.IsSpellUsable && !MarkoftheWild.HaveBuff
                && _mySettings.UseMarkoftheWild)
            {
                MarkoftheWild.Launch();
                return;
            }
            if (!ObjectManager.Me.InCombat && _mySettings.UseDash
                && Dash.KnownSpell && Dash.IsSpellUsable && !Dash.HaveBuff && !StampedingRoar.HaveBuff
                && ObjectManager.Me.GetMove)
            {
                Dash.Launch();
                return;
            }
            if (!ObjectManager.Me.InCombat && _mySettings.UseStampedingRoar
                && StampedingRoar.KnownSpell && StampedingRoar.IsSpellUsable && !Dash.HaveBuff
                && !StampedingRoar.HaveBuff && ObjectManager.Me.GetMove)
            {
                StampedingRoar.Launch();
            }
        }

        private void AvoidMelee()
        {
            if (ObjectManager.Target.GetDistance < _mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
            {
                Logging.WriteFight("Too Close. Moving Back");
                var maxTimeTimer = new Timer(1000*2);
                MovementsAction.MoveBackward(true);
                while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                    Thread.Sleep(300);
                MovementsAction.MoveBackward(false);
                if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
                {
                    MovementsAction.MoveForward(true);
                    Thread.Sleep(1000);
                    MovementsAction.MoveForward(false);
                    MovementManager.Face(ObjectManager.Target.Position);
                }
            }
        }

        private void DefenseCycle()
        {
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable &&
                Stoneform.KnownSpell
                && _mySettings.UseStoneform)
            {
                Stoneform.Launch();
                _onCd = new Timer(1000*8);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 80 && Barkskin.KnownSpell && Barkskin.IsSpellUsable
                && _mySettings.UseBarkskin)
            {
                Barkskin.Launch();
                _onCd = new Timer(1000*12);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 80 && Ironbark.KnownSpell && Ironbark.IsSpellUsable
                && _mySettings.UseIronbark)
            {
                Ironbark.Launch();
                _onCd = new Timer(1000*12);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 80 && MightyBash.KnownSpell && MightyBash.IsSpellUsable
                && _mySettings.UseMightyBash && MightyBash.IsHostileDistanceGood)
            {
                MightyBash.Launch();
                _onCd = new Timer(1000*5);
                return;
            }
            if (MassEntanglement.KnownSpell && MassEntanglement.IsSpellUsable && MassEntanglement.IsHostileDistanceGood
                && _mySettings.UseMassEntanglement && ObjectManager.Me.HealthPercent < 80)
            {
                MassEntanglement.Launch();

                if (WildCharge.KnownSpell && WildCharge.IsHostileDistanceGood && WildCharge.IsSpellUsable
                    && _mySettings.UseWildCharge)
                {
                    Thread.Sleep(200);
                    WildCharge.Launch();
                }
                return;
            }
            if (UrsolsVortex.KnownSpell && UrsolsVortex.IsSpellUsable && UrsolsVortex.IsHostileDistanceGood
                && _mySettings.UseUrsolsVortex && ObjectManager.Me.HealthPercent < 80)
            {
                UrsolsVortex.Launch();

                if (WildCharge.KnownSpell && WildCharge.IsHostileDistanceGood && WildCharge.IsSpellUsable
                    && _mySettings.UseWildCharge)
                {
                    Thread.Sleep(200);
                    WildCharge.Launch();
                }
                return;
            }
            if (NaturesGrasp.KnownSpell && NaturesGrasp.IsSpellUsable
                && ObjectManager.Target.IsCast && _mySettings.UseNaturesGrasp && ObjectManager.Me.HealthPercent < 80)
            {
                NaturesGrasp.Launch();

                if (WildCharge.KnownSpell && WildCharge.IsHostileDistanceGood && WildCharge.IsSpellUsable
                    && _mySettings.UseWildCharge)
                {
                    Thread.Sleep(200);
                    WildCharge.Launch();
                }
                return;
            }
            if (Typhoon.KnownSpell && Typhoon.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 2
                && ObjectManager.Target.GetDistance < 41 && ObjectManager.Me.HealthPercent < 70
                && _mySettings.UseTyphoon)
            {
                Typhoon.Launch();
                return;
            }
            if (DisorientingRoar.KnownSpell && DisorientingRoar.IsSpellUsable &&
                ObjectManager.GetNumberAttackPlayer() > 2
                && ObjectManager.Target.GetDistance < 10 && ObjectManager.Me.HealthPercent < 70
                && _mySettings.UseDisorientingRoar)
            {
                DisorientingRoar.Launch();
                _onCd = new Timer(1000*3);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable &&
                WarStomp.KnownSpell
                && _mySettings.UseWarStomp)
            {
                WarStomp.Launch();
                _onCd = new Timer(1000*2);
            }
        }

        private void Heal()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell &&
                ObjectManager.Me.ManaPercentage <= _mySettings.UseArcaneTorrentForResourceAtPercentage
                && _mySettings.UseArcaneTorrentForResource)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 80 && NaturesSwiftness.IsSpellUsable && NaturesSwiftness.KnownSpell
                && _mySettings.UseNaturesSwiftness && _mySettings.UseHealingTouch)
            {
                NaturesSwiftness.Launch();
                Thread.Sleep(400);
                HealingTouch.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 70 && Renewal.IsSpellUsable && Renewal.KnownSpell
                && _mySettings.UseRenewal)
            {
                Renewal.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 95 && !ObjectManager.Me.InCombat && HealingTouch.IsSpellUsable && HealingTouch.KnownSpell && _mySettings.UseHealingTouch)
            {
                HealingTouch.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 90 && CenarionWard.IsSpellUsable && CenarionWard.KnownSpell
                && _mySettings.UseCenarionWard)
            {
                CenarionWard.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseGiftoftheNaaruAtPercentage &&
                GiftoftheNaaru.IsSpellUsable && GiftoftheNaaru.KnownSpell
                && _mySettings.UseGiftoftheNaaru)
            {
                GiftoftheNaaru.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 90 && Rejuvenation.IsSpellUsable && Rejuvenation.KnownSpell
                && !Rejuvenation.HaveBuff && _mySettings.UseRejuvenation)
            {
                Rejuvenation.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 60 && Regrowth.IsSpellUsable && Regrowth.KnownSpell
                && !Regrowth.HaveBuff && _mySettings.UseRegrowth)
            {
                Regrowth.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 80 && Swiftmend.IsSpellUsable && Swiftmend.KnownSpell
                && _mySettings.UseSwiftmend)
            {
                Swiftmend.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 50 && WildGrowth.IsSpellUsable && WildGrowth.KnownSpell
                && _mySettings.UseWildGrowth)
            {
                WildGrowth.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 40 && HealingTouch.IsSpellUsable && HealingTouch.KnownSpell
                && HealingTouchTimer.IsReady && _mySettings.UseHealingTouch)
            {
                HealingTouch.Launch();
                HealingTouchTimer = new Timer(1000*15);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 40 && Nourish.IsSpellUsable && Nourish.KnownSpell
                && NourishTimer.IsReady && _mySettings.UseNourish && !_mySettings.UseHealingTouch)
            {
                Nourish.Launch();
                NourishTimer = new Timer(1000*15);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 35 && MightofUrsoc.IsSpellUsable && MightofUrsoc.KnownSpell
                && _mySettings.UseMightofUrsoc)
            {
                MightofUrsoc.Launch();
                return;
            }
            if (WildMushroom.KnownSpell && WildMushroom.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 3
                && WildMushroomBloom.KnownSpell && WildMushroom.IsSpellUsable && _mySettings.UseWildMushroom
                && ObjectManager.Me.HealthPercent < 80)
            {
                for (int i = 0; i < 3; i++)
                {
                    SpellManager.CastSpellByIDAndPosition(88747, ObjectManager.Target.Position);
                    Thread.Sleep(200);
                }

                WildMushroomBloom.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 30 && Tranquility.IsSpellUsable && Tranquility.KnownSpell
                && _mySettings.UseTranquility)
            {
                Tranquility.Launch();
                while (ObjectManager.Me.IsCast)
                {
                    Thread.Sleep(100);
                    Thread.Sleep(100);
                }
                return;
            }

            if (ObjectManager.Me.ManaPercentage < 50 && _mySettings.UseInnervate)
            {
                Innervate.Launch();
            }
        }

        private void Decast()
        {
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8
                && ObjectManager.Me.HealthPercent <= _mySettings.UseArcaneTorrentForDecastAtPercentage
                && _mySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
            {
                ArcaneTorrent.Launch();
            }
        }

        public void HealingBurst()
        {
            if (_mySettings.UseTrinketOne && !ItemsManager.IsItemOnCooldown(_firstTrinket.Entry) && ItemsManager.IsUsableItemById(_firstTrinket.Entry))
            {
                ItemsManager.UseItem(_firstTrinket.Name);
                Logging.WriteFight("Use First Trinket Slot");
            }

            if (_mySettings.UseTrinketTwo && !ItemsManager.IsItemOnCooldown(_secondTrinket.Entry) && ItemsManager.IsUsableItemById(_secondTrinket.Entry))
            {
                ItemsManager.UseItem(_secondTrinket.Name);
                Logging.WriteFight("Use Second Trinket Slot");
                return;
            }
            if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseBerserking)
            {
                Berserking.Launch();
                return;
            }
            if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseBloodFury)
            {
                BloodFury.Launch();
                return;
            }
            if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseLifeblood)
            {
                Lifeblood.Launch();
                return;
            }
            if (_engineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseEngGlove)
            {
                Logging.WriteFight("Use Engineering Gloves.");
                Lua.RunMacroText("/use 10");
                _engineeringTimer = new Timer(1000*60);
                return;
            }
            if (ForceofNature.IsSpellUsable && ForceofNature.KnownSpell && ForceofNature.IsHostileDistanceGood
                && _mySettings.UseForceofNature)
            {
                SpellManager.CastSpellByIDAndPosition(106737, ObjectManager.Target.Position);
                return;
            }
            if (Incarnation.IsSpellUsable && Incarnation.KnownSpell && _mySettings.UseIncarnation
                && ObjectManager.Target.GetDistance < 41)
            {
                Incarnation.Launch();
            }
        }

        private void DPSCycle()
        {
            if (Moonfire.KnownSpell && Moonfire.IsHostileDistanceGood && Moonfire.IsSpellUsable
                && _mySettings.UseMoonfire && (!Moonfire.TargetHaveBuff || _moonfireTimer.IsReady))
            {
                Moonfire.Launch();
                _moonfireTimer = new Timer(1000*11);
                return;
            }
            if (Hurricane.KnownSpell && Hurricane.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 2 &&
                ObjectManager.Target.GetDistance < 41 && _mySettings.UseHurricane)
            {
                SpellManager.CastSpellByIDAndPosition(16914, ObjectManager.Target.Position);
                return;
            }
            if (Wrath.KnownSpell && Wrath.IsSpellUsable && Wrath.IsHostileDistanceGood
                && _mySettings.UseWrath)
            {
                Wrath.Launch();
            }
        }

        private void Patrolling()
        {
            if (ObjectManager.Me.IsMounted) return;
            Buff();
            Heal();
        }

        #region Nested type: DruidRestorationSettings

        [Serializable]
        public class DruidRestorationSettings : Settings
        {
            public bool DoAvoidMelee = false;
            public int DoAvoidMeleeDistance = 0;
            public bool UseAlchFlask = true;
            public bool UseArcaneTorrentForDecast = true;
            public int UseArcaneTorrentForDecastAtPercentage = 100;
            public bool UseArcaneTorrentForResource = true;
            public int UseArcaneTorrentForResourceAtPercentage = 80;
            public bool UseBarkskin = true;
            public bool UseBerserking = true;
            public bool UseBloodFury = true;
            public bool UseCenarionWard = true;
            public bool UseDash = true;
            public bool UseDisorientingRoar = true;
            public bool UseEngGlove = true;
            public bool UseEntanglingRoots = true;
            public bool UseFaerieFire = true;
            public bool UseForceofNature = true;
            public bool UseGiftoftheNaaru = true;
            public int UseGiftoftheNaaruAtPercentage = 80;
            public bool UseHealingTouch = true;
            public bool UseHurricane = true;
            public bool UseIncarnation = true;
            public bool UseInnervate = true;
            public bool UseIronbark = true;
            public bool UseLifeblood = true;
            public bool UseLifebloom = true;
            public bool UseLowCombat = true;
            public bool UseMarkoftheWild = true;
            public bool UseMassEntanglement = true;
            public bool UseMightofUrsoc = true;
            public bool UseMightyBash = true;
            public bool UseMoonfire = true;
            public bool UseNaturesGrasp = true;
            public bool UseNaturesSwiftness = true;
            public bool UseNourish = false;
            public bool UseRegrowth = true;
            public bool UseRejuvenation = true;
            public bool UseRenewal = true;
            public bool UseSolarBeam = true;
            public bool UseStampedingRoar = true;
            public bool UseStoneform = true;
            public int UseStoneformAtPercentage = 80;
            public bool UseSwiftmend = true;
            public bool UseTranquility = true;
            public bool UseTrinketOne = true;
            public bool UseTrinketTwo = true;
            public bool UseTyphoon = true;
            public bool UseUrsolsVortex = true;
            public bool UseWarStomp = true;
            public int UseWarStompAtPercentage = 80;
            public bool UseWildCharge = true;
            public bool UseWildGrowth = true;
            public bool UseWildMushroom = false;
            public bool UseWrath = true;

            public DruidRestorationSettings()
            {
                ConfigWinForm(new Point(500, 400), "Druid Restoration Settings");
                /* Professions & Racials */
                AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
                AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
                AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
                AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
                AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
                AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
                /* Druid Buffs */
                AddControlInWinForm("Use Dash", "UseDash", "Druid Buffs");
                AddControlInWinForm("Use Faerie Fire", "UseFaerieFire", "Druid Buffs");
                AddControlInWinForm("Use Mark of the Wild", "UseMarkoftheWild", "Druid Buffs");
                AddControlInWinForm("Use Stampeding Roar", "UseStampedingRoar", "Druid Buffs");
                /* Offensive Spell */
                AddControlInWinForm("Use Hurricane", "UseHurricane", "Offensive Spell");
                AddControlInWinForm("Use Moonfire", "UseMoonfire", "Offensive Spell");
                AddControlInWinForm("Use Wrath", "UseWrath", "Offensive Spell");
                /* Healing Cooldown */
                AddControlInWinForm("Use Force of Nature", "UseForceofNature", "Offensive Cooldown");
                AddControlInWinForm("Use Incarnation", "UseIncarnation", "Offensive Cooldown");
                /* Defensive Cooldown */
                AddControlInWinForm("Use Barkskin", "UseBarkskin", "Defensive Cooldown");
                AddControlInWinForm("Use Disorienting Roar", "UseDisorientingRoar", "Defensive Cooldown");
                AddControlInWinForm("Use Entangling Roots", "UseEntanglingRoots", "Defensive Cooldown");
                AddControlInWinForm("Use Ironbark", "UseIronbark", "Defensive Cooldown");
                AddControlInWinForm("Use Mass Entanglement", "UseMassEntanglement", "Defensive Cooldown");
                AddControlInWinForm("Use Mighty Bash", "UseMightyBash", "Defensive Cooldown");
                AddControlInWinForm("Use Nature's Grasp", "UseNaturesGrasp", "Defensive Cooldown");
                AddControlInWinForm("Use Solar Beam", "UseSolarBeam", "Defensive Cooldown");
                AddControlInWinForm("Use Typhoon", "UseTyphoon", "Defensive Cooldown");
                AddControlInWinForm("Use Ursol's Vortex", "UseUrsolsVortex", "Defensive Cooldown");
                AddControlInWinForm("Use Wild Charge", "UseWildCharge", "Defensive Cooldown");
                /* Healing Spell */
                AddControlInWinForm("Use Cenarion Ward", "UseCenarionWard", "Healing Spell");
                AddControlInWinForm("Use Healing Touch", "UseHealingTouch", "Healing Spell");
                AddControlInWinForm("Use Innervate", "UseInnervate", "Healing Spell");
                AddControlInWinForm("Use Lifebloom", "UseLifebloom", "Offensive Spell");
                AddControlInWinForm("Use Might of Ursoc", "UseMightofUrsoc", "Healing Spell");
                AddControlInWinForm("Use Nature's Swiftness", "UseNaturesSwiftness", "Healing Spell");
                AddControlInWinForm("Use Nourish", "UseNourish", "Offensive Spell");
                AddControlInWinForm("Use Regrowth", "UseRegrowth", "Offensive Spell");
                AddControlInWinForm("Use Rejuvenation", "UseRejuvenation", "Healing Spell");
                AddControlInWinForm("Use Renewal", "UseRenewal", "Healing Spell");
                AddControlInWinForm("Use Swiftmend", "UseSwiftmend", "Offensive Spell");
                AddControlInWinForm("Use Tranquility", "UseTranquility", "Healing Spell");
                AddControlInWinForm("Use Wild Growth", "UseWildGrowth", "Offensive Spell");
                AddControlInWinForm("Use WildMushroom", "UseWildMushroom", "Offensive Spell");
                /* Game Settings */
                AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
                AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
                AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
                AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
                AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
                AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
                AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
            }

            public static DruidRestorationSettings CurrentSetting { get; set; }

            public static DruidRestorationSettings GetSettings()
            {
                string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Druid_Restoration.xml";
                if (File.Exists(currentSettingsFile))
                {
                    return
                        CurrentSetting = Load<DruidRestorationSettings>(currentSettingsFile);
                }
                return new DruidRestorationSettings();
            }
        }

        #endregion
    }

    public class DruidGuardian
    {
        private readonly DruidGuardianSettings _mySettings = DruidGuardianSettings.GetSettings();

        #region General Timers & Variables

        private readonly WoWItem _firstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
        private readonly WoWItem _secondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);
        private Timer _engineeringTimer = new Timer(0);
        private Timer _onCd = new Timer(0);

        #endregion

        #region Professions & Racials

        public readonly Spell Alchemy = new Spell("Alchemy");
        public readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
        public readonly Spell Berserking = new Spell("Berserking");
        public readonly Spell BloodFury = new Spell("Blood Fury");
        public readonly Spell Engineering = new Spell("Engineering");
        public readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
        public readonly Spell Lifeblood = new Spell("Lifeblood");
        public readonly Spell Stoneform = new Spell("Stoneform");
        public readonly Spell WarStomp = new Spell("War Stomp");

        #endregion

        #region Druid Buffs

        public readonly Spell BearForm = new Spell("Bear Form");
        public readonly Spell Dash = new Spell("Dash");
        public readonly Spell FaerieFire = new Spell("Faerie Fire");
        public readonly Spell MarkoftheWild = new Spell("Mark of the Wild");
        public readonly Spell StampedingRoar = new Spell("Stampeding Roar");

        #endregion

        #region Offensive Spell

        public readonly Spell Growl = new Spell("Growl");
        public readonly Spell Lacerate = new Spell("Lacerate");
        public readonly Spell Mangle = new Spell("Mangle");
        public readonly Spell Maul = new Spell("Maul");
        public readonly Spell Swipe = new Spell("Swipe");
        public readonly Spell Thrash = new Spell("Thrash");

        #endregion

        #region Offensive Cooldown

        public readonly Spell Berserk = new Spell("Berserk");
        public readonly Spell Enrage = new Spell("Enrage");
        public readonly Spell ForceofNature = new Spell("Force of Nature");
        public readonly Spell HeartoftheWild = new Spell("Heart of the Wild");
        public readonly Spell Incarnation = new Spell("Incarnation");
        public readonly Spell NaturesVigil = new Spell("Nature's Vigil");

        #endregion

        #region Defensive Cooldown

        public readonly Spell Barkskin = new Spell("Barkskin");
        public readonly Spell BearHug = new Spell("Bear Hug");
        public readonly Spell DisorientingRoar = new Spell("Disorienting Roar");
        public readonly Spell MassEntanglement = new Spell("Mass Entanglement");
        public readonly Spell MightyBash = new Spell("Mighty Bash");
        public readonly Spell NaturesGrasp = new Spell("Nature's Grasp");
        public readonly Spell SavageDefense = new Spell("Savage Defense");
        public readonly Spell SkullBash = new Spell("Skull Bash");
        public readonly Spell SurvivalInstincts = new Spell("Survival Instincts");
        public readonly Spell Typhoon = new Spell("Typhoon");
        public readonly Spell UrsolsVortex = new Spell("Ursol's Vortex");
        public readonly Spell WildCharge = new Spell("Wild Charge");

        #endregion

        #region Healing Spell

        public readonly Spell CenarionWard = new Spell("Cenarion Ward");
        public readonly Spell FrenziedRegeneration = new Spell("FrenziedRegeneration");
        public readonly Spell HealingTouch = new Spell("Healing Touch");
        public readonly Spell Innervate = new Spell("Innervate");
        public readonly Spell MightofUrsoc = new Spell("Might of Ursoc");
        public readonly Spell NaturesSwiftness = new Spell("Nature's Swiftness");
        public readonly Spell Rejuvenation = new Spell("Rejuvenation");
        public readonly Spell Renewal = new Spell("Renewal");
        public readonly Spell Tranquility = new Spell("Tranquility");
        private Timer HealingTouchTimer = new Timer(0);

        #endregion

        public DruidGuardian()
        {
            Main.InternalRange = 5.0f;
            UInt64 lastTarget = 0;

            while (Main.InternalLoop)
            {
                try
                {
                    if (!ObjectManager.Me.IsDeadMe)
                    {
                        if (!ObjectManager.Me.IsMounted)
                        {
                            if (Fight.InFight && ObjectManager.Me.Target > 0)
                            {
                                if (ObjectManager.Me.Target != lastTarget
                                    && (FaerieFire.IsHostileDistanceGood || WildCharge.IsHostileDistanceGood))
                                {
                                    Pull();
                                    lastTarget = ObjectManager.Me.Target;
                                }

                                if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                    && _mySettings.UseLowCombat)
                                {
                                    if (ObjectManager.Target.GetDistance < 30)
                                        LowCombat();
                                }
                                else
                                {
                                    if (ObjectManager.Target.GetDistance < 30)
                                        Combat();
                                }
                                break;
                            }
                            if (!ObjectManager.Me.IsCast)
                                Patrolling();
                        }
                    }
                    Thread.Sleep(500);
                }
                catch
                {
                }
                Thread.Sleep(150);
            }
        }

        private void Pull()
        {
            if (!ObjectManager.Me.HaveBuff(5487) && _mySettings.UseBearForm)
                BearForm.Launch();

            if (WildCharge.KnownSpell && WildCharge.IsSpellUsable && WildCharge.IsHostileDistanceGood
                && _mySettings.UseWildCharge && ObjectManager.Target.GetDistance > Main.InternalRange)
            {
                WildCharge.Launch();
                return;
            }
            if (FaerieFire.KnownSpell && FaerieFire.IsSpellUsable && FaerieFire.IsHostileDistanceGood
                && _mySettings.UseFaerieFire)
            {
                FaerieFire.Launch();
            }
        }

        private void LowCombat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            DefenseCycle();
            Heal();

            if (!ObjectManager.Me.HaveBuff(5487) && _mySettings.UseBearForm)
            {
                BearForm.Launch();
                return;
            }

            if (Mangle.IsSpellUsable && Mangle.KnownSpell && Mangle.IsHostileDistanceGood
                && _mySettings.UseMangle)
            {
                Mangle.Launch();
                if (ObjectManager.Target.HealthPercent < 50 && ObjectManager.Target.HealthPercent > 0)
                {
                    Mangle.Launch();
                }
                return;
            }
            if (Maul.IsSpellUsable && Maul.KnownSpell && Maul.IsHostileDistanceGood
                && _mySettings.UseMaul)
            {
                Maul.Launch();
                return;
            }
            if (Swipe.IsSpellUsable && Swipe.KnownSpell && Swipe.IsHostileDistanceGood
                && _mySettings.UseSwipe)
            {
                Swipe.Launch();
            }
        }

        private void Combat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            if (_onCd.IsReady)
                DefenseCycle();
            DPSCycle();
            Heal();
            Decast();
            DPSCycle();
            DPSBurst();
            DPSCycle();
        }

        private void Buff()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (MarkoftheWild.KnownSpell && MarkoftheWild.IsSpellUsable && !MarkoftheWild.HaveBuff)
            {
                MarkoftheWild.Launch();
                return;
            }
            if (_mySettings.UseAlchFlask && !ObjectManager.Me.HaveBuff(79638) && !ObjectManager.Me.HaveBuff(79640) && !ObjectManager.Me.HaveBuff(79639)
                && !ItemsManager.IsItemOnCooldown(75525) && ItemsManager.GetItemCountByIdLUA(75525) > 0)
            {
                ItemsManager.UseItem(75525);
                return;
            }
            if (!ObjectManager.Me.InCombat && _mySettings.UseDash
                && Dash.KnownSpell && Dash.IsSpellUsable && !Dash.HaveBuff && !StampedingRoar.HaveBuff
                && ObjectManager.Me.GetMove)
            {
                Dash.Launch();
                return;
            }
            if (!ObjectManager.Me.InCombat && _mySettings.UseStampedingRoar
                && StampedingRoar.KnownSpell && StampedingRoar.IsSpellUsable && !Dash.HaveBuff
                && !StampedingRoar.HaveBuff && ObjectManager.Me.GetMove)
            {
                StampedingRoar.Launch();
            }
        }

        private void AvoidMelee()
        {
            if (ObjectManager.Target.GetDistance < _mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
            {
                Logging.WriteFight("Too Close. Moving Back");
                var maxTimeTimer = new Timer(1000*2);
                MovementsAction.MoveBackward(true);
                while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                    Thread.Sleep(300);
                MovementsAction.MoveBackward(false);
                if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
                {
                    MovementsAction.MoveForward(true);
                    Thread.Sleep(1000);
                    MovementsAction.MoveForward(false);
                    MovementManager.Face(ObjectManager.Target.Position);
                }
            }
        }

        private void Heal()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (ObjectManager.Me.HealthPercent < 80 && NaturesSwiftness.IsSpellUsable && NaturesSwiftness.KnownSpell
                && _mySettings.UseNaturesSwiftness && _mySettings.UseHealingTouch)
            {
                NaturesSwiftness.Launch();
                Thread.Sleep(400);
                HealingTouch.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 75 && FrenziedRegeneration.IsSpellUsable &&
                FrenziedRegeneration.KnownSpell
                && _mySettings.UseFrenziedRegeneration)
            {
                FrenziedRegeneration.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 70 && Renewal.IsSpellUsable && Renewal.KnownSpell
                && _mySettings.UseRenewal)
            {
                Renewal.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 90 && CenarionWard.IsSpellUsable && CenarionWard.KnownSpell
                && _mySettings.UseCenarionWard)
            {
                CenarionWard.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 50 && !ObjectManager.Me.InCombat
                && HealingTouch.IsSpellUsable && HealingTouch.KnownSpell && _mySettings.UseHealingTouch)
            {
                while (ObjectManager.Me.HealthPercent < 95 && HealingTouch.IsSpellUsable)
                {
                    HealingTouch.Launch();
                    Thread.Sleep(1500);
                }
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseGiftoftheNaaruAtPercentage &&
                GiftoftheNaaru.IsSpellUsable && GiftoftheNaaru.KnownSpell)
            {
                GiftoftheNaaru.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 50 && Rejuvenation.IsSpellUsable && Rejuvenation.KnownSpell
                && !Rejuvenation.HaveBuff && _mySettings.UseRejuvenation)
            {
                Rejuvenation.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 40 && HealingTouch.IsSpellUsable && HealingTouch.KnownSpell
                && HealingTouchTimer.IsReady && _mySettings.UseHealingTouch)
            {
                HealingTouch.Launch();
                HealingTouchTimer = new Timer(1000*15);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 35 && MightofUrsoc.IsSpellUsable && MightofUrsoc.KnownSpell
                && _mySettings.UseMightofUrsoc)
            {
                MightofUrsoc.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 30 && Tranquility.IsSpellUsable && Tranquility.KnownSpell
                && _mySettings.UseTranquility)
            {
                Tranquility.Launch();
                while (ObjectManager.Me.IsCast)
                {
                    Thread.Sleep(100);
                    Thread.Sleep(100);
                }
                return;
            }
            if (ObjectManager.Me.ManaPercentage < 10 && _mySettings.UseInnervate)
            {
                Innervate.Launch();
            }
        }

        private void DefenseCycle()
        {
            if (ObjectManager.Me.HealthPercent < 80 && _mySettings.UseBarkskin
                && Barkskin.KnownSpell && Barkskin.IsSpellUsable)
            {
                Barkskin.Launch();
                _onCd = new Timer(1000*12);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 90 && _mySettings.UseSavageDefense
                && SavageDefense.KnownSpell && SavageDefense.IsSpellUsable)
            {
                SavageDefense.Launch();
                _onCd = new Timer(1000*6);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 90 && MightyBash.IsHostileDistanceGood
                && MightyBash.KnownSpell && MightyBash.IsSpellUsable && _mySettings.UseMightyBash)
            {
                MightyBash.Launch();
                _onCd = new Timer(1000*5);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 70 && BearHug.KnownSpell && BearHug.IsSpellUsable
                && _mySettings.UseBearHug && BearHug.IsHostileDistanceGood)
            {
                BearHug.Launch();
                _onCd = new Timer(1000*3);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 70 && _mySettings.UseSurvivalInstincts
                && SurvivalInstincts.KnownSpell && SurvivalInstincts.IsSpellUsable)
            {
                SurvivalInstincts.Launch();
                _onCd = new Timer(1000*12);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable &&
                Stoneform.KnownSpell
                && _mySettings.UseStoneform)
            {
                Stoneform.Launch();
                _onCd = new Timer(1000*8);
                return;
            }
            if (MassEntanglement.KnownSpell && MassEntanglement.IsSpellUsable && MassEntanglement.IsHostileDistanceGood
                && ObjectManager.Target.IsCast && _mySettings.UseMassEntanglement &&
                ObjectManager.GetNumberAttackPlayer() > 2
                && ObjectManager.Me.HealthPercent < 70)
            {
                if (Typhoon.KnownSpell && Typhoon.IsSpellUsable && _mySettings.UseTyphoon
                    && ObjectManager.Target.GetDistance < 41 && _mySettings.UseTyphoon)
                {
                    Typhoon.Launch();
                    Thread.Sleep(200);
                }

                MassEntanglement.Launch();
                return;
            }
            if (UrsolsVortex.KnownSpell && UrsolsVortex.IsSpellUsable && UrsolsVortex.IsHostileDistanceGood
                && _mySettings.UseUrsolsVortex && ObjectManager.Me.HealthPercent < 80
                && ObjectManager.GetNumberAttackPlayer() > 2)
            {
                UrsolsVortex.Launch();

                if (WildCharge.KnownSpell && WildCharge.IsHostileDistanceGood && WildCharge.IsSpellUsable
                    && _mySettings.UseWildCharge && ObjectManager.Target.GetDistance > Main.InternalRange)
                {
                    Thread.Sleep(200);
                    WildCharge.Launch();
                }
                return;
            }
            if (NaturesGrasp.KnownSpell && NaturesGrasp.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 2
                && ObjectManager.Target.IsCast && _mySettings.UseNaturesGrasp && ObjectManager.Me.HealthPercent < 80)
            {
                NaturesGrasp.Launch();
                return;
            }
            if (Typhoon.KnownSpell && Typhoon.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 2
                && ObjectManager.Target.GetDistance < 41 && ObjectManager.Me.HealthPercent < 70
                && _mySettings.UseTyphoon)
            {
                Typhoon.Launch();
                return;
            }
            if (DisorientingRoar.KnownSpell && DisorientingRoar.IsSpellUsable &&
                ObjectManager.GetNumberAttackPlayer() > 2
                && ObjectManager.Target.GetDistance < 10 && ObjectManager.Me.HealthPercent < 70
                && _mySettings.UseDisorientingRoar)
            {
                DisorientingRoar.Launch();
                _onCd = new Timer(1000*3);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable &&
                WarStomp.KnownSpell
                && _mySettings.UseWarStomp)
            {
                WarStomp.Launch();
                _onCd = new Timer(1000*2);
            }
        }

        private void Decast()
        {
            if (ObjectManager.Target.IsCast && _mySettings.UseSkullBash
                && ObjectManager.Target.IsTargetingMe
                && SkullBash.KnownSpell && SkullBash.IsSpellUsable && SkullBash.IsHostileDistanceGood)
            {
                SkullBash.Launch();
                return;
            }
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8
                && ObjectManager.Me.HealthPercent <= _mySettings.UseArcaneTorrentForDecastAtPercentage
                && _mySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast &&
                ObjectManager.Target.IsTargetingMe)
            {
                ArcaneTorrent.Launch();
            }
        }

        private void DPSBurst()
        {
            if (_mySettings.UseTrinketOne && !ItemsManager.IsItemOnCooldown(_firstTrinket.Entry) && ItemsManager.IsUsableItemById(_firstTrinket.Entry))
            {
                ItemsManager.UseItem(_firstTrinket.Name);
                Logging.WriteFight("Use First Trinket Slot");
            }

            if (_mySettings.UseTrinketTwo && !ItemsManager.IsItemOnCooldown(_secondTrinket.Entry) && ItemsManager.IsUsableItemById(_secondTrinket.Entry))
            {
                ItemsManager.UseItem(_secondTrinket.Name);
                Logging.WriteFight("Use Second Trinket Slot");
                return;
            }
            if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30 && _mySettings.UseBerserking)
            {
                Berserking.Launch();
                return;
            }
            if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 30 && _mySettings.UseBloodFury)
            {
                BloodFury.Launch();
                return;
            }
            if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30 && _mySettings.UseLifeblood)
            {
                Lifeblood.Launch();
                return;
            }
            if (_engineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30 && _mySettings.UseEngGlove)
            {
                Logging.WriteFight("Use Engineering Gloves.");
                Lua.RunMacroText("/use 10");
                _engineeringTimer = new Timer(1000*60);
                return;
            }
            if (Enrage.IsSpellUsable && Enrage.KnownSpell && Enrage.IsHostileDistanceGood
                && _mySettings.UseEnrage && ObjectManager.Me.RagePercentage < 70)
            {
                Enrage.Launch();
                return;
            }
            if (ForceofNature.IsSpellUsable && ForceofNature.KnownSpell && ForceofNature.IsHostileDistanceGood
                && _mySettings.UseForceofNature)
            {
                SpellManager.CastSpellByIDAndPosition(106737, ObjectManager.Target.Position);
                return;
            }
            if (Incarnation.IsSpellUsable && Incarnation.KnownSpell && _mySettings.UseIncarnation
                && ObjectManager.Target.GetDistance < 30)
            {
                Incarnation.Launch();
                return;
            }
            if (HeartoftheWild.IsSpellUsable && HeartoftheWild.KnownSpell && _mySettings.UseHeartoftheWild
                && ObjectManager.Target.GetDistance < 30)
            {
                HeartoftheWild.Launch();
                return;
            }
            if (NaturesVigil.IsSpellUsable && NaturesVigil.KnownSpell && _mySettings.UseNaturesVigil
                && ObjectManager.Target.GetDistance < 30)
            {
                NaturesVigil.Launch();
                return;
            }
            if (Berserk.KnownSpell && Berserk.IsSpellUsable && _mySettings.UseBerserk
                && ObjectManager.Target.GetDistance < 30)
            {
                Berserk.Launch();
            }
        }

        private void DPSCycle()
        {
            if (!ObjectManager.Me.HaveBuff(5487) && _mySettings.UseBearForm)
            {
                BearForm.Launch();
                return;
            }
            if (FaerieFire.KnownSpell && FaerieFire.IsSpellUsable && FaerieFire.IsHostileDistanceGood
                && _mySettings.UseFaerieFire && (!FaerieFire.TargetHaveBuff || !ObjectManager.Target.HaveBuff(113746)))
            {
                FaerieFire.Launch();
                return;
            }
            if (Growl.KnownSpell && Growl.IsSpellUsable && Growl.IsHostileDistanceGood
                && _mySettings.UseGrowl && !ObjectManager.Target.InCombat)
            {
                Growl.Launch();
                return;
            }
            if (Mangle.KnownSpell && Mangle.IsSpellUsable && Mangle.IsHostileDistanceGood
                && _mySettings.UseMangle)
            {
                Mangle.Launch();
                return;
            }
            if (Thrash.IsSpellUsable && Thrash.KnownSpell
                && Thrash.IsHostileDistanceGood && !Thrash.TargetHaveBuff && _mySettings.UseThrash)
            {
                Thrash.Launch();
                return;
            }
            if (ObjectManager.GetNumberAttackPlayer() > 1 && Swipe.IsSpellUsable && Swipe.KnownSpell
                && Swipe.IsHostileDistanceGood && _mySettings.UseSwipe)
            {
                Swipe.Launch();
                return;
            }
            if (Lacerate.KnownSpell && Lacerate.IsSpellUsable && Lacerate.IsHostileDistanceGood
                && _mySettings.UseLacerate)
            {
                Lacerate.Launch();
                return;
            }
            if (Maul.KnownSpell && Maul.IsSpellUsable && Maul.IsHostileDistanceGood
                && _mySettings.UseMaul && ObjectManager.Me.RagePercentage > 90
                && ObjectManager.Me.HealthPercent > 90)
            {
                Maul.Launch();
                return;
            }
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell
                && _mySettings.UseArcaneTorrentForResource)
            {
                ArcaneTorrent.Launch();
            }
        }

        private void Patrolling()
        {
            if (ObjectManager.Me.IsMounted) return;
            Buff();
            Heal();
        }

        #region Nested type: DruidGuardianSettings

        [Serializable]
        public class DruidGuardianSettings : Settings
        {
            public bool DoAvoidMelee = false;
            public int DoAvoidMeleeDistance = 0;
            public bool UseAlchFlask = true;
            public bool UseArcaneTorrentForDecast = true;
            public int UseArcaneTorrentForDecastAtPercentage = 100;
            public bool UseArcaneTorrentForResource = true;
            public bool UseBarkskin = true;
            public bool UseBearForm = true;
            public bool UseBearHug = true;
            public bool UseBerserk = true;
            public bool UseBerserking = true;
            public bool UseBloodFury = true;
            public bool UseCenarionWard = true;
            public bool UseDash = true;
            public bool UseDisorientingRoar = true;
            public bool UseEngGlove = true;
            public bool UseEnrage = true;
            public bool UseFaerieFire = true;
            public bool UseForceofNature = true;
            public bool UseFrenziedRegeneration = true;
            public bool UseGiftoftheNaaru = true;
            public int UseGiftoftheNaaruAtPercentage = 80;
            public bool UseGrowl = true;
            public bool UseHealingTouch = true;
            public bool UseHeartoftheWild = true;
            public bool UseIncarnation = true;
            public bool UseInnervate = true;
            public bool UseLacerate = true;
            public bool UseLifeblood = true;
            public bool UseLowCombat = true;
            public bool UseMangle = true;
            public bool UseMarkoftheWild = true;
            public bool UseMassEntanglement = true;
            public bool UseMaul = true;
            public bool UseMightofUrsoc = true;
            public bool UseMightyBash = true;
            public bool UseNaturesGrasp = true;
            public bool UseNaturesSwiftness = true;
            public bool UseNaturesVigil = true;
            public bool UseRejuvenation = true;
            public bool UseRenewal = true;
            public bool UseSavageDefense = true;
            public bool UseSkullBash = true;
            public bool UseStampedingRoar = true;
            public bool UseStoneform = true;
            public int UseStoneformAtPercentage = 80;
            public bool UseSurvivalInstincts = true;
            public bool UseSwipe = true;
            public bool UseThrash = true;
            public bool UseTranquility = true;
            public bool UseTrinketOne = true;
            public bool UseTrinketTwo = true;
            public bool UseTyphoon = true;
            public bool UseUrsolsVortex = true;
            public bool UseWarStomp = true;
            public int UseWarStompAtPercentage = 80;
            public bool UseWildCharge = true;

            public DruidGuardianSettings()
            {
                ConfigWinForm(new Point(500, 400), "Druid Guardian Settings");
                /* Professions & Racials */
                AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials");
                AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
                AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
                AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
                AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
                AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
                AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
                /* Druid Buffs */
                AddControlInWinForm("Use Bear Form", "UseBearForm", "Druid Buffs");
                AddControlInWinForm("Use Dash", "UseDash", "Druid Buffs");
                AddControlInWinForm("Use Faerie Fire", "UseFaerieFire", "Druid Buffs");
                AddControlInWinForm("Use Mark of the Wild", "UseMarkoftheWild", "Druid Buffs");
                AddControlInWinForm("Use Stampeding Roar", "UseStampedingRoar", "Druid Buffs");
                /* Offensive Spell */
                AddControlInWinForm("Use Growl", "UseGrowl", "Offensive Spell");
                AddControlInWinForm("Use Lacerate", "UseLacerate", "Offensive Spell");
                AddControlInWinForm("Use Mangle", "UseMangle", "Offensive Spell");
                AddControlInWinForm("Use Maul", "UseMaul", "Offensive Spell");
                AddControlInWinForm("Use Swipe", "UseSwipe", "Offensive Spell");
                AddControlInWinForm("Use Thrash", "UseThrash", "Offensive Spell");
                /* Offensive Cooldown */
                AddControlInWinForm("Use Berserk", "UseBerserk", "Offensive Cooldown");
                AddControlInWinForm("Use Enrage", "UseEnrage", "Offensive Cooldown");
                AddControlInWinForm("Use Force of Nature", "UseForceofNature", "Offensive Cooldown");
                AddControlInWinForm("Use Heart of the Wild", "UseHeartoftheWild", "Offensive Cooldown");
                AddControlInWinForm("Use Incarnation", "UseIncarnation", "Offensive Cooldown");
                AddControlInWinForm("Use Nature's Vigil", "UseNaturesVigil", "Offensive Cooldown");
                /* Defensive Cooldown */
                AddControlInWinForm("Use Bear Hug", "UseBearHug", "Defensive Cooldown");
                AddControlInWinForm("Use Barkskin", "UseBarkskin", "Defensive Cooldown");
                AddControlInWinForm("Use Disorienting Roar", "UseDisorientingRoar", "Defensive Cooldown");
                AddControlInWinForm("Use Mass Entanglement", "UseMassEntanglement", "Defensive Cooldown");
                AddControlInWinForm("Use Mighty Bash", "UseMightyBash", "Defensive Cooldown");
                AddControlInWinForm("Use Nature's Grasp", "UseNaturesGrasp", "Defensive Cooldown");
                AddControlInWinForm("Use Savage Defense", "UseSavageDefense", "Defensive Cooldown");
                AddControlInWinForm("Use Skull Bash", "UseSkullBash", "Defensive Cooldown");
                AddControlInWinForm("Use Survival Instincts", "UseSurvivalInstincts", "Defensive Cooldown");
                AddControlInWinForm("Use Typhoon", "UseTyphoon", "Defensive Cooldown");
                AddControlInWinForm("Use Ursol's Vortex", "UseUrsolsVortex", "Defensive Cooldown");
                AddControlInWinForm("Use Wild Charge", "UseWildCharge", "Defensive Cooldown");
                /* Healing Spell */
                AddControlInWinForm("Use Cenarion Ward", "UseCenarionWard", "Healing Spell");
                AddControlInWinForm("Use Frenzied Regeneration", "UseFrenziedRegeneration", "Healing Spell");
                AddControlInWinForm("Use Healing Touch", "UseHealingTouch", "Healing Spell");
                AddControlInWinForm("Use Innervate", "UseInnervate", "Healing Spell");
                AddControlInWinForm("Use Might of Ursoc", "UseMightofUrsoc", "Healing Spell");
                AddControlInWinForm("Use Nature's Swiftness", "UseNaturesSwiftness", "Healing Spell");
                AddControlInWinForm("Use Rejuvenation", "UseRejuvenation", "Healing Spell");
                AddControlInWinForm("Use Renewal", "UseRenewal", "Healing Spell");
                AddControlInWinForm("Use Tranquility", "UseTranquility", "Healing Spell");
                /* Game Settings */
                AddControlInWinForm("Using Glyph of Shred?", "UseGlyphofShred", "Game Settings");
                AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
                AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
                AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
                AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
                AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
                AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
                AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
            }

            public static DruidGuardianSettings currentSetting { get; set; }

            public static DruidGuardianSettings GetSettings()
            {
                string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Druid_Guardian.xml";
                if (File.Exists(currentSettingsFile))
                {
                    return
                        currentSetting = Load<DruidGuardianSettings>(currentSettingsFile);
                }
                return new DruidGuardianSettings();
            }
        }

        #endregion
    }

    #endregion

    #region Paladin

    public class PaladinHoly
    {
        private readonly PaladinHolySettings _mySettings = PaladinHolySettings.GetSettings();

        #region Professions & Racial

        public readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
        public readonly Spell Berserking = new Spell("Berserking");
        private readonly WoWItem _firstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
        public readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
        public readonly Spell Lifeblood = new Spell("Lifeblood");
        private readonly WoWItem _secondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);
        public readonly Spell Stoneform = new Spell("Stoneform");
        public readonly Spell WarStomp = new Spell("War Stomp");

        #endregion

        #region Paladin Seals & Buffs

        public readonly Spell BlessingOfKings = new Spell("Blessing of Kings");
        public readonly Spell BlessingOfMight = new Spell("Blessing of Might");
        public readonly Spell SealOfInsight = new Spell("Seal of Insight");
        public readonly Spell SealOfTheRighteousness = new Spell("Seal of Righteousness");
        public readonly Spell SealOfTruth = new Spell("Seal of Truth");

        #endregion

        #region Offensive Spell

        public readonly Spell Denounce = new Spell("Denounce");
        public readonly Spell HammerOfJustice = new Spell("Hammer of Justice");
        public readonly Spell HammerOfWrath = new Spell("Hammer of Wrath");
        public readonly Spell HolyShock = new Spell("Holy Shock");

        #endregion

        #region Offensive Cooldown

        public readonly Spell AvengingWrath = new Spell("Avenging Wrath");
        public readonly Spell DivineFavor = new Spell("Divine Favor");
        public readonly Spell HolyAvenger = new Spell("HolyAvenger");

        #endregion

        #region Defensive Cooldown

        public readonly Spell DevotionAura = new Spell("Devotion Aura");
        public readonly Spell DivineProtection = new Spell("Divine Protection");
        public readonly Spell DivineShield = new Spell("Divine Shield");
        public readonly Spell HandOfProtection = new Spell("Hand of Protection");
        public readonly Spell HandOfPurity = new Spell("Hand of Purity");
        public readonly Spell SacredShield = new Spell("Sacred Shield");

        #endregion

        #region Healing Spell

        public readonly Spell BeaconOfLight = new Spell("Beacon of Light");
        public readonly Spell DivineLight = new Spell("Divine Light");
        public readonly Spell DivinePlea = new Spell("Divine Plea");
        public readonly Spell FlashOfLight = new Spell("Flash of Light");
        public readonly Spell GlyphOfHarshWords = new Spell("Glyph of Harsh Words");
        public readonly Spell HolyLight = new Spell("Holy Light");
        public readonly Spell HolyRadiance = new Spell("Holy Radiance");
        public readonly Spell LayOnHands = new Spell("Lay on Hands");
        public readonly Spell WordOfGlory = new Spell("Word of Glory");

        #endregion

        public PaladinHoly()
        {
            Main.InternalRange = 30f;

            UInt64 lastTarget = 0;

            while (Main.InternalLoop)
            {
                try
                {
                    if (!ObjectManager.Me.IsDeadMe)
                    {
                        if (!ObjectManager.Me.IsMounted)
                        {
                            if (Fight.InFight && ObjectManager.Me.Target > 0)
                            {
                                if (ObjectManager.Me.Target != lastTarget && HolyShock.IsHostileDistanceGood)
                                {
                                    Pull();
                                    lastTarget = ObjectManager.Me.Target;
                                }
                                if (ObjectManager.Target.GetDistance < 41)
                                    Combat();
                                break;
                            }
                            if (!ObjectManager.Me.IsCast)
                                Patrolling();
                        }
                    }
                    else
                        Thread.Sleep(500);
                }
                catch
                {
                }
                Thread.Sleep(150);
            }
        }

        private void Pull()
        {
            if (HolyShock.KnownSpell && HolyShock.IsHostileDistanceGood && HolyShock.IsSpellUsable && _mySettings.UseHolyShock)
            {
                HolyShock.Launch();
                return;
            }
        }

        private void Combat()
        {
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            DPSCycle();
            DPSBurst();
            DPSCycle();
            Heal();
            DPSCycle();
            Buffs();
        }

        private void Patrolling()
        {
            if (!ObjectManager.Me.IsMounted)
            {
                Blessing();
                Heal();
            }

            Seal();
        }

        private void Buffs()
        {
            if (!ObjectManager.Me.IsMounted)
            {
                Blessing();
                if (_mySettings.UseAlchFlask && !ObjectManager.Me.HaveBuff(79638) && !ObjectManager.Me.HaveBuff(79640) && !ObjectManager.Me.HaveBuff(79639)
                    && !ItemsManager.IsItemOnCooldown(75525) && ItemsManager.GetItemCountByIdLUA(75525) > 0)
                    ItemsManager.UseItem(75525);
            }

            Seal();
        }

        private void Seal()
        {
            if (SealOfInsight.KnownSpell && _mySettings.UseSealOfInsight)
            {
                if (!SealOfInsight.HaveBuff && SealOfInsight.IsSpellUsable)
                {
                    SealOfInsight.Launch();
                }
                return;
            }
            if (SealOfTruth.KnownSpell && _mySettings.UseSealOfTruth)
            {
                if (!SealOfTruth.HaveBuff && SealOfTruth.IsSpellUsable)
                {
                    SealOfTruth.Launch();
                }
                return;
            }
            if (SealOfTheRighteousness.KnownSpell && _mySettings.UseSealOfTheRighteousness)
            {
                if (!SealOfTheRighteousness.HaveBuff && SealOfTheRighteousness.IsSpellUsable)
                {
                    SealOfTheRighteousness.Launch();
                }
            }
        }

        private void Blessing()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (BlessingOfKings.KnownSpell && _mySettings.UseBlessingOfKings)
            {
                if (!BlessingOfKings.HaveBuff && BlessingOfKings.IsSpellUsable)
                {
                    BlessingOfKings.Launch();
                }
                return;
            }
            if (BlessingOfMight.KnownSpell && _mySettings.UseBlessingOfMight)
            {
                if (!BlessingOfMight.HaveBuff && BlessingOfMight.IsSpellUsable)
                {
                    BlessingOfMight.Launch();
                }
                return;
            }
            if (BeaconOfLight.KnownSpell && _mySettings.UseBeaconOfLight)
            {
                if (!BeaconOfLight.HaveBuff && BeaconOfLight.IsSpellUsable)
                {
                    BeaconOfLight.Launch();
                }
            }
        }

        private void Heal()
        {
            if (ObjectManager.Me.HealthPercent < 95 && !ObjectManager.Me.InCombat)
            {
                if (DivineLight.KnownSpell && DivineLight.IsSpellUsable && _mySettings.UseDivineLight)
                {
                    DivineLight.Launch(true, true, true);
                    return;
                }
                if (FlashOfLight.KnownSpell && FlashOfLight.IsSpellUsable && _mySettings.UseFlashOfLight)
                {
                    FlashOfLight.Launch(true, true, true);
                    return;
                }
                if (HolyLight.KnownSpell && HolyLight.IsSpellUsable && _mySettings.UseHolyLight)
                {
                    HolyLight.Launch(true, true, true);
                    return;
                }
            }
            if (!ObjectManager.Me.HaveBuff(25771))
            {
                if (DivineShield.KnownSpell && ObjectManager.Me.HealthPercent > 0 && ObjectManager.Me.HealthPercent <= 20 &&
                    DivineShield.IsSpellUsable && _mySettings.UseDivineShield)
                {
                    DivineShield.Launch();
                    return;
                }
                if (LayOnHands.KnownSpell && ObjectManager.Me.HealthPercent > 0 && ObjectManager.Me.HealthPercent <= 20 &&
                    LayOnHands.IsSpellUsable && _mySettings.UseLayOnHands)
                {
                    LayOnHands.Launch();
                    return;
                }
                if (HandOfProtection.KnownSpell && ObjectManager.Me.HealthPercent > 0 &&
                    ObjectManager.Me.HealthPercent <= 20 &&
                    HandOfProtection.IsSpellUsable && _mySettings.UseHandOfProtection)
                {
                    HandOfProtection.Launch();
                    return;
                }
            }
            if (ObjectManager.Me.ManaPercentage < 30)
            {
                if (ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable && _mySettings.UseArcaneTorrentForResource)
                    ArcaneTorrent.Launch();
                if (DivinePlea.KnownSpell && DivinePlea.IsSpellUsable && _mySettings.UseHandOfProtection)
                {
                    DivinePlea.Launch();
                    return;
                }
            }
            if (ObjectManager.Me.HealthPercent > 0 && ObjectManager.Me.HealthPercent < 50)
            {
                if (WordOfGlory.KnownSpell && WordOfGlory.IsSpellUsable &&
                    (!GlyphOfHarshWords.KnownSpell /* || cast on me */) && _mySettings.UseWordOfGlory)
                    WordOfGlory.Launch();
                if (DivineLight.KnownSpell && DivineLight.IsSpellUsable && _mySettings.UseDivineLight)
                {
                    DivineLight.Launch();
                    return;
                }
                if (FlashOfLight.KnownSpell && FlashOfLight.IsSpellUsable && _mySettings.UseFlashOfLight)
                {
                    FlashOfLight.Launch();
                    return;
                }
                if (HolyLight.KnownSpell && HolyLight.IsSpellUsable && _mySettings.UseHolyLight)
                {
                    HolyLight.Launch();
                    return;
                }
            }
            if (ObjectManager.Me.HealthPercent >= 0 && ObjectManager.Me.HealthPercent < 30)
            {
                if (WordOfGlory.KnownSpell && WordOfGlory.IsSpellUsable &&
                    (!GlyphOfHarshWords.KnownSpell /* || cast on me */) && _mySettings.UseWordOfGlory)
                    WordOfGlory.Launch();
                if (DivineProtection.KnownSpell && DivineProtection.IsSpellUsable && _mySettings.UseDivineProtection)
                    DivineProtection.Launch();
                if (FlashOfLight.KnownSpell && FlashOfLight.IsSpellUsable && _mySettings.UseFlashOfLight)
                {
                    FlashOfLight.Launch();
                    return;
                }
                if (HolyLight.KnownSpell && HolyLight.IsSpellUsable && _mySettings.UseHolyLight)
                {
                    HolyLight.Launch();
                    return;
                }
                if (DivineLight.KnownSpell && DivineLight.IsSpellUsable && _mySettings.UseDivineLight)
                {
                    DivineLight.Launch();
                }
            }
        }

        private void DPSBurst()
        {
            if (DivineFavor.KnownSpell && DivineFavor.IsSpellUsable)
            {
                if (AvengingWrath.KnownSpell && AvengingWrath.IsSpellUsable && _mySettings.UseAvengingWrath)
                {
                    AvengingWrath.Launch();
                }
                if (Lifeblood.KnownSpell && Lifeblood.IsSpellUsable && _mySettings.UseLifeblood)
                {
                    Lifeblood.Launch();
                }
                if (HolyAvenger.KnownSpell && HolyAvenger.IsSpellUsable && _mySettings.UseHolyAvenger)
                {
                    HolyAvenger.Launch();
                }
                if (_mySettings.UseDivineFavor)
                    DivineFavor.Launch();
                return;
            }
            if (Lifeblood.KnownSpell && Lifeblood.IsSpellUsable && _mySettings.UseLifeblood)
            {
                Lifeblood.Launch();
                return;
            }
            if (_mySettings.UseTrinketOne && !ItemsManager.IsItemOnCooldown(_firstTrinket.Entry) && ItemsManager.IsUsableItemById(_firstTrinket.Entry))
            {
                ItemsManager.UseItem(_firstTrinket.Name);
                Logging.WriteFight("Use First Trinket Slot");
                return;
            }
            if (_mySettings.UseTrinketTwo && !ItemsManager.IsItemOnCooldown(_secondTrinket.Entry) && ItemsManager.IsUsableItemById(_secondTrinket.Entry))
            {
                ItemsManager.UseItem(_secondTrinket.Name);
                Logging.WriteFight("Use Second Trinket Slot");
            }
        }

        private void DPSCycle()
        {
            if (HolyShock.KnownSpell && HolyShock.IsHostileDistanceGood && HolyShock.IsSpellUsable && _mySettings.UseHolyShock)
            {
                HolyShock.Launch();
                return;
            }
            if (HammerOfWrath.KnownSpell && HammerOfWrath.IsHostileDistanceGood && HammerOfWrath.IsSpellUsable &&
                _mySettings.UseHammerOfWrath)
            {
                HammerOfWrath.Launch();
                return;
            }
            if (HammerOfJustice.KnownSpell && HammerOfJustice.IsHostileDistanceGood && HammerOfJustice.IsSpellUsable &&
                _mySettings.UseHammerOfJustice)
            {
                HammerOfJustice.Launch();
                return;
            }
            if (Denounce.KnownSpell && Denounce.IsHostileDistanceGood && Denounce.IsSpellUsable && _mySettings.UseDenounce)
            {
                Denounce.Launch();
                }
        }

        private void AvoidMelee()
        {
            if (ObjectManager.Target.GetDistance < _mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
            {
                Logging.WriteFight("Too Close. Moving Back");
                var maxTimeTimer = new Timer(1000*2);
                MovementsAction.MoveBackward(true);
                while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                    Thread.Sleep(300);
                MovementsAction.MoveBackward(false);
                if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
                {
                    MovementsAction.MoveForward(true);
                    Thread.Sleep(1000);
                    MovementsAction.MoveForward(false);
                    MovementManager.Face(ObjectManager.Target.Position);
                }
            }
        }

        #region Nested type: PaladinHolySettings

        [Serializable]
        public class PaladinHolySettings : Settings
        {
            public bool DoAvoidMelee = false;
            public int DoAvoidMeleeDistance = 0;
            public bool UseAlchFlask = true;
            public bool UseArcaneTorrentForDecast = true;
            public int UseArcaneTorrentForDecastAtPercentage = 100;
            public bool UseArcaneTorrentForResource = true;
            public int UseArcaneTorrentForResourceAtPercentage = 80;
            public bool UseAvengingWrath = true;
            public bool UseBeaconOfLight = true;
            public bool UseBerserking = true;
            public bool UseBlessingOfKings = true;
            public bool UseBlessingOfMight = true;
            public bool UseDenounce = true;
            public bool UseDevotionAura = true;
            public bool UseDivineFavor = true;
            public bool UseDivineLight = true;
            public bool UseDivinePlea = true;
            public bool UseDivineProtection = true;
            public bool UseDivineShield = true;
            public bool UseFlashOfLight = true;
            public bool UseGiftoftheNaaru = true;
            public int UseGiftoftheNaaruAtPercentage = 80;
            public bool UseHammerOfJustice = true;
            public bool UseHammerOfWrath = true;
            public bool UseHandOfProtection = true;
            public bool UseHandOfPurity = true;
            public bool UseHolyAvenger = true;
            public bool UseHolyLight = true;
            public bool UseHolyRadiance = true;
            public bool UseHolyShock = true;
            public bool UseLayOnHands = true;
            public bool UseLifeblood = true;
            public bool UseSacredShield = true;
            public bool UseSealOfInsight = true;
            public bool UseSealOfTheRighteousness = true;
            public bool UseSealOfTruth = true;
            public bool UseStoneform = true;
            public int UseStoneformAtPercentage = 80;
            public bool UseTrinketOne = true;
            public bool UseTrinketTwo = true;
            public bool UseWarStomp = true;
            public int UseWarStompAtPercentage = 80;
            public bool UseWordOfGlory = true;

            public PaladinHolySettings()
            {
                ConfigWinForm(new Point(500, 400), "Paladin Protection Settings");
                /* Professions & Racials */
                AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
                AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
                AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
                AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
                AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
                AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
                /* Paladin Seals & Buffs */
                AddControlInWinForm("Use Seal of the Righteousness", "UseSealOfTheRighteousness", "Paladin Seals & Buffs");
                AddControlInWinForm("Use Seal of Truth", "UseSealOfTruth", "Paladin Seals & Buffs");
                AddControlInWinForm("Use Seal of Insight", "UseSealOfInsight", "Paladin Seals & Buffs");
                AddControlInWinForm("Use Blessing of Might", "UseBlessingOfMight", "Paladin Seals & Buffs");
                AddControlInWinForm("Use Blessing of Kings", "UseBlessingOfKings", "Paladin Seals & Buffs");
                /* Offensive Spell */
                AddControlInWinForm("Use Holy Shock", "UseHolyShock", "Offensive Spell");
                AddControlInWinForm("Use Denounce", "UseDenounce", "Offensive Spell");
                AddControlInWinForm("Use Hammer of Justice", "UseHammerOfJustice", "Offensive Spell");
                AddControlInWinForm("Use Hammer of Wrath", "UseHammerOfWrath", "Offensive Spell");
                /* Offensive Cooldown */
                AddControlInWinForm("Use Divine Favor", "UseDivineFavor", "Offensive Cooldown");
                AddControlInWinForm("Use Holy Avenger", "UseHolyAvenger", "Offensive Cooldown");
                AddControlInWinForm("Use Avenging Wrath", "UseAvengingWrath", "Offensive Cooldown");
                /* Defensive Cooldown */
                AddControlInWinForm("Use Sacred Shield", "UseSacredShield", "Defensive Cooldown");
                AddControlInWinForm("Use Hand of Purity", "UseHandOfPurity", "Defensive Cooldown");
                AddControlInWinForm("Use Devotion Aura", "UseDevotionAura", "Defensive Cooldown");
                AddControlInWinForm("Use Divine Protection", "UseDivineProtection", "Defensive Cooldown");
                AddControlInWinForm("Use Divine Shield", "UseDivineShield", "Defensive Cooldown");
                AddControlInWinForm("Use Hand of Protection", "UseHandOfProtection", "Defensive Cooldown");
                /* Healing Spell */
                AddControlInWinForm("Use Divine Plea", "UseDivinePlea", "Healing Spell");
                AddControlInWinForm("Use Divine Light", "UseDivineLight", "Healing Spell");
                AddControlInWinForm("Use Holy Radiance", "UseHolyRadiance", "Healing Spell");
                AddControlInWinForm("Use Flash of Light", "UseFlashOfLight", "Healing Spell");
                AddControlInWinForm("Use Holy Light", "UseHolyLight", "Healing Spell");
                AddControlInWinForm("Use Lay on Hands", "UseLayOnHands", "Healing Spell");
                AddControlInWinForm("Use Word of Glory", "UseWordOfGlory", "Healing Spell");
                AddControlInWinForm("Use Beacon of Light", "UseBeaconOfLight", "Healing Spell");
                AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
                AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
                AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
                AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
            }

            public static PaladinHolySettings currentSetting { get; set; }

            public static PaladinHolySettings GetSettings()
            {
                string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Paladin_Holy.xml";
                if (File.Exists(currentSettingsFile))
                {
                    return 
                        currentSetting = Load<PaladinHolySettings>(currentSettingsFile);
                }
                return new PaladinHolySettings();
            }
        }

        #endregion
    }

    public class PaladinProtection
    {
        private readonly PaladinProtectionSettings _mySettings = PaladinProtectionSettings.GetSettings();

        #region Professions & Racial

        public readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
        public readonly Spell Berserking = new Spell("Berserking");
        private readonly WoWItem _firstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
        public readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
        public readonly Spell Lifeblood = new Spell("Lifeblood");
        private readonly WoWItem _secondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);
        public readonly Spell Stoneform = new Spell("Stoneform");
        public readonly Spell WarStomp = new Spell("War Stomp");

        #endregion

        #region Paladin Seals & Buffs

        public readonly Spell BlessingOfKings = new Spell("Blessing of Kings");
        public readonly Spell BlessingOfMight = new Spell("Blessing of Might");
        public readonly Spell SealOfInsight = new Spell("Seal of Insight");
        public readonly Spell SealOfTheRighteousness = new Spell("Seal of Righteousness");
        public readonly Spell SealOfTruth = new Spell("Seal of Truth");

        #endregion

        #region Offensive Spell

        public readonly Spell AvengersShield = new Spell("Avenger's Shield");
        public readonly Spell Consecration = new Spell("Consecration");
        public readonly Spell CrusaderStrike = new Spell("Crusader Strike");
        public readonly Spell HammerOfJustice = new Spell("Hammer of Justice");
        public readonly Spell HammerOfTheRighteous = new Spell("Hammer of the Righteous"); // 115798 = Weakened Blows
        public readonly Spell HammerOfWrath = new Spell("Hammer of Wrath");
        public readonly Spell HolyWrath = new Spell("Holy Wrath");
        public readonly Spell Judgment = new Spell("Judgment");
        public readonly Spell ShieldOfTheRighteous = new Spell("Shield of the Righteous");

        #endregion

        #region Offensive Cooldown

        public readonly Spell AvengingWrath = new Spell("Avenging Wrath");
        public readonly Spell HolyAvenger = new Spell("Holy Avenger");

        #endregion

        #region Defensive Cooldown

        public readonly Spell ArdentDefender = new Spell("Ardent Defender");
        public readonly Spell DevotionAura = new Spell("Devotion Aura");
        public readonly Spell DivineProtection = new Spell("Divine Protection");
        public readonly Spell DivineShield = new Spell("Divine Shield");
        public readonly Spell GuardianOfAncientKings = new Spell("Guardian of Ancient Kings");
        public readonly Spell HandOfProtection = new Spell("Hand of Protection");
        public readonly Spell HandOfPurity = new Spell("Hand Of Purity");
        public readonly Spell SacredShield = new Spell("Sacred Shield");
        private Timer _onCd = new Timer(0);

        #endregion

        #region Healing Spell

        public readonly Spell FlashOfLight = new Spell("Flash of Light");
        public readonly Spell LayOnHands = new Spell("Lay on Hands");
        public readonly Spell WordOfGlory = new Spell("Word of Glory");

        #endregion

        public PaladinProtection()
        {
            Main.InternalRange = 5.0f;

            UInt64 lastTarget = 0;

            while (Main.InternalLoop)
            {
                try
                {
                    if (!ObjectManager.Me.IsDeadMe)
                    {
                        if (!ObjectManager.Me.IsMounted)
                        {
                            if (Fight.InFight && ObjectManager.Me.Target > 0)
                            {
                                if (ObjectManager.Me.Target != lastTarget && Judgment.IsHostileDistanceGood)
                                {
                                    Pull();
                                    lastTarget = ObjectManager.Me.Target;
                                }
                                if (ObjectManager.Target.GetDistance < 41)
                                    Combat();
                                break;
                            }
                            if (!ObjectManager.Me.IsCast)
                                Patrolling();
                        }
                    }
                    Thread.Sleep(500);
                }
                catch
                {
                }
                Thread.Sleep(150);
            }
        }

        private void Pull()
        {
            if (AvengersShield.KnownSpell && _mySettings.UseAvengersShield && AvengersShield.IsHostileDistanceGood &&
                AvengersShield.IsSpellUsable)
            {
                AvengersShield.Launch();
            }
            if (Judgment.KnownSpell && _mySettings.UseJudgment && Judgment.IsHostileDistanceGood && Judgment.IsSpellUsable)
            {
                Judgment.Launch();
                Thread.Sleep(1000);
            }
            DPSBurst();
        }

        private void Combat()
        {
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            if (_onCd.IsReady)
                DefenseCycle();
            DPSCycle();
            DPSBurst();
            DPSCycle();
            Heal();
            DPSCycle();
            Buffs();
        }

        private void Patrolling()
        {
            if (!ObjectManager.Me.IsMounted)
            {
                Blessing();
                Heal();
            }
            Seal();
        }

        private void Buffs()
        {
            if (!ObjectManager.Me.IsMounted)
            {
                Blessing();
                if (_mySettings.UseAlchFlask && !ObjectManager.Me.HaveBuff(79638) && !ObjectManager.Me.HaveBuff(79640) && !ObjectManager.Me.HaveBuff(79639)
                    && !ItemsManager.IsItemOnCooldown(75525) && ItemsManager.GetItemCountByIdLUA(75525) > 0)
                    ItemsManager.UseItem(75525);
            }
            Seal();
        }

        private void Seal()
        {
            if (ObjectManager.Me.IsMounted)
                return;
            if (SealOfTruth.KnownSpell && _mySettings.UseSealOfTruth &&
                (ObjectManager.GetNumberAttackPlayer() <= 7 || !_mySettings.UseSealOfTheRighteousness))
            {
                if (!SealOfTruth.HaveBuff && SealOfTruth.IsSpellUsable)
                {
                    SealOfTruth.Launch();
                }
                return;
            }
            if (SealOfTheRighteousness.KnownSpell && _mySettings.UseSealOfTheRighteousness)
            {
                if (!SealOfTheRighteousness.HaveBuff && SealOfTheRighteousness.IsSpellUsable)
                {
                    SealOfTheRighteousness.Launch();
                }
                return;
            }
            if (SealOfInsight.KnownSpell && _mySettings.UseSealOfInsight)
            {
                if (!SealOfInsight.HaveBuff && SealOfInsight.IsSpellUsable)
                {
                    SealOfInsight.Launch();
                }
            }
        }

        private void Blessing()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (BlessingOfMight.KnownSpell && _mySettings.UseBlessingOfMight)
            {
                if (!BlessingOfMight.HaveBuff && BlessingOfMight.IsSpellUsable)
                {
                    BlessingOfMight.Launch();
                }
                return;
            }
            if (BlessingOfKings.KnownSpell && _mySettings.UseBlessingOfKings)
            {
                if (!BlessingOfKings.HaveBuff && BlessingOfKings.IsSpellUsable)
                {
                    BlessingOfKings.Launch();
                }
            }
        }

        private void Heal()
        {
            if (ObjectManager.Me.HealthPercent < 95 && !ObjectManager.Me.InCombat)
            {
                if (FlashOfLight.KnownSpell && FlashOfLight.IsSpellUsable && _mySettings.UseFlashOfLight)
                {
                    FlashOfLight.Launch(true, true, true);
                    return;
                }
            }
            if (DivineShield.KnownSpell && _mySettings.UseDivineShield && ObjectManager.Me.HealthPercent > 0 &&
                ObjectManager.Me.HealthPercent <= 20 && !ObjectManager.Me.HaveBuff(25771) && DivineShield.IsSpellUsable)
            {
                DivineShield.Launch();
                return;
            }
            if (LayOnHands.KnownSpell && _mySettings.UseLayOnHands && ObjectManager.Me.HealthPercent > 0 &&
                ObjectManager.Me.HealthPercent <= 20 && !ObjectManager.Me.HaveBuff(25771) && LayOnHands.IsSpellUsable)
            {
                LayOnHands.Launch();
                return;
            }
            if (HandOfProtection.KnownSpell && _mySettings.UseHandOfProtection && ObjectManager.Me.HealthPercent > 0 &&
                ObjectManager.Me.HealthPercent <= 20 && !ObjectManager.Me.HaveBuff(25771) && HandOfProtection.IsSpellUsable)
            {
                HandOfProtection.Launch();
                return;
            }
            if (ObjectManager.Me.ManaPercentage < 10)
            {
                if (ArcaneTorrent.KnownSpell && _mySettings.UseArcaneTorrentForResource && ArcaneTorrent.IsSpellUsable)
                {
                    ArcaneTorrent.Launch();
                    return;
                }
            }
            if (ObjectManager.Me.HealthPercent > 0 && ObjectManager.Me.HealthPercent < 50)
            {
                if (WordOfGlory.KnownSpell && _mySettings.UseWordOfGlory && WordOfGlory.IsSpellUsable)
                    WordOfGlory.Launch();
                if (FlashOfLight.KnownSpell && _mySettings.UseFlashOfLight && FlashOfLight.IsSpellUsable)
                {
                    FlashOfLight.Launch();
                    return;
                }
            }
            if (ObjectManager.Me.HealthPercent >= 0 && ObjectManager.Me.HealthPercent < 30)
            {
                if (WordOfGlory.KnownSpell && _mySettings.UseWordOfGlory && WordOfGlory.IsSpellUsable)
                    WordOfGlory.Launch();
                if (DivineProtection.KnownSpell && _mySettings.UseDivineProtection && DivineProtection.IsSpellUsable)
                    DivineProtection.Launch();
                if (FlashOfLight.KnownSpell && _mySettings.UseFlashOfLight && FlashOfLight.IsSpellUsable)
                {
                    FlashOfLight.Launch();
                }
            }
        }

        private void DPSBurst()
        {
            if (HolyAvenger.KnownSpell && _mySettings.UseHolyAvenger && HolyAvenger.IsSpellUsable)
            {
                HolyAvenger.Launch();
            }
            if (AvengingWrath.KnownSpell && _mySettings.UseAvengingWrath && AvengingWrath.IsSpellUsable)
            {
                AvengingWrath.Launch();
            }
            if (_mySettings.UseTrinketOne && !ItemsManager.IsItemOnCooldown(_firstTrinket.Entry) && ItemsManager.IsUsableItemById(_firstTrinket.Entry))
            {
                ItemsManager.UseItem(_firstTrinket.Name);
                Logging.WriteFight("Use First Trinket Slot");
            }
            if (_mySettings.UseTrinketTwo && !ItemsManager.IsItemOnCooldown(_secondTrinket.Entry) && ItemsManager.IsUsableItemById(_secondTrinket.Entry))
            {
                ItemsManager.UseItem(_secondTrinket.Name);
                Logging.WriteFight("Use Second Trinket Slot");
            }
        }

        private void DefenseCycle()
        {
            if (HandOfPurity.KnownSpell && _mySettings.UseHandOfPurity && HandOfPurity.IsSpellUsable && !HandOfPurity.HaveBuff)
            {
                HandOfPurity.Launch();
                _onCd = new Timer(1000*6);
                return;
            }
            if (HammerOfJustice.KnownSpell && _mySettings.UseHammerOfJustice && HammerOfJustice.IsSpellUsable)
            {
                HammerOfJustice.Launch();
                _onCd = new Timer(1000*6);
                return;
            }
            if (DivineProtection.KnownSpell && _mySettings.UseDivineProtection && DivineProtection.IsSpellUsable)
            {
                DivineProtection.Launch();
                _onCd = new Timer(1000*10);
                return;
            }
            if (DevotionAura.KnownSpell && _mySettings.UseDevotionAura && DevotionAura.IsSpellUsable)
            {
                DevotionAura.Launch();
                _onCd = new Timer(1000*6);
                return;
            }
            if (GuardianOfAncientKings.KnownSpell && _mySettings.UseGuardianOfAncientKings &&
                GuardianOfAncientKings.IsSpellUsable)
            {
                GuardianOfAncientKings.Launch();
                _onCd = new Timer(1000*12);
                return;
            }
            if (ArdentDefender.KnownSpell && _mySettings.UseArdentDefender &&
                ArdentDefender.IsSpellUsable)
            {
                ArdentDefender.Launch();
                _onCd = new Timer(1000*10);
                return;
            }
            if (WordOfGlory.KnownSpell && _mySettings.UseWordOfGlory && WordOfGlory.IsSpellUsable)
            {
                WordOfGlory.Launch();
                _onCd = new Timer(1000*5);
            }
        }

        private void DPSCycle()
        {
            if (ShieldOfTheRighteous.KnownSpell && _mySettings.UseShieldOfTheRighteous && ShieldOfTheRighteous.IsSpellUsable &&
                ShieldOfTheRighteous.IsHostileDistanceGood && (ObjectManager.Me.HaveBuff(90174) || ObjectManager.Me.HolyPower >= 3))
            {
                ShieldOfTheRighteous.Launch();
                return;
            }
            if ((ObjectManager.GetNumberAttackPlayer() >= 2 || !ObjectManager.Target.HaveBuff(115798)) &&
                !ObjectManager.Me.HaveBuff(90174) && ObjectManager.Me.HolyPower < 3)
            {
                if (HammerOfTheRighteous.KnownSpell && _mySettings.UseHammerOfTheRighteous &&
                    HammerOfTheRighteous.IsHostileDistanceGood && HammerOfTheRighteous.IsSpellUsable)
                {
                    HammerOfTheRighteous.Launch();
                    return;
                }
            }
            else
            {
                if (CrusaderStrike.KnownSpell && _mySettings.UseCrusaderStrike && CrusaderStrike.IsHostileDistanceGood &&
                    CrusaderStrike.IsSpellUsable && !ObjectManager.Me.HaveBuff(90174) && ObjectManager.Me.HolyPower < 3)
                {
                    CrusaderStrike.Launch();
                    return;
                }
            }
            if (AvengersShield.KnownSpell && _mySettings.UseAvengersShield && AvengersShield.IsHostileDistanceGood &&
                AvengersShield.IsSpellUsable && !ObjectManager.Me.HaveBuff(90174) && ObjectManager.Me.HolyPower < 3)
            {
                AvengersShield.Launch();
                return;
            }
            if (HammerOfWrath.KnownSpell && _mySettings.UseHammerOfWrath && HammerOfWrath.IsHostileDistanceGood &&
                HammerOfWrath.IsSpellUsable && !ObjectManager.Me.HaveBuff(90174) && ObjectManager.Me.HolyPower < 3)
            {
                HammerOfWrath.Launch();
                return;
            }
            if (Judgment.KnownSpell && _mySettings.UseJudgment && Judgment.IsHostileDistanceGood && Judgment.IsSpellUsable &&
                !ObjectManager.Me.HaveBuff(90174) && ObjectManager.Me.HolyPower < 3)
            {
                Judgment.Launch();
                return;
            }
            if (Consecration.KnownSpell && _mySettings.UseConsecration && Consecration.IsSpellUsable &&
                !ObjectManager.Me.HaveBuff(90174) && ObjectManager.Me.HolyPower < 3)
            {
                SpellManager.CastSpellByIDAndPosition(Consecration.Id, ObjectManager.Target.Position);
                return;
            }
            if (HolyWrath.KnownSpell && _mySettings.UseHolyWrath && HolyWrath.IsSpellUsable &&
                !ObjectManager.Me.HaveBuff(90174) && ObjectManager.Me.HolyPower < 3 && !Judgment.IsSpellUsable &&
                !CrusaderStrike.IsSpellUsable && !Consecration.IsSpellUsable)
            {
                HolyWrath.Launch();
                }
        }

        private void AvoidMelee()
        {
            if (ObjectManager.Target.GetDistance < _mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
            {
                Logging.WriteFight("Too Close. Moving Back");
                var maxTimeTimer = new Timer(1000*2);
                MovementsAction.MoveBackward(true);
                while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                    Thread.Sleep(300);
                MovementsAction.MoveBackward(false);
                if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
                {
                    MovementsAction.MoveForward(true);
                    Thread.Sleep(1000);
                    MovementsAction.MoveForward(false);
                    MovementManager.Face(ObjectManager.Target.Position);
                }
            }
        }

        #region Nested type: PaladinProtectionSettings

        [Serializable]
        public class PaladinProtectionSettings : Settings
        {
            public bool DoAvoidMelee = false;
            public int DoAvoidMeleeDistance = 0;
            public bool UseAlchFlask = true;
            public bool UseArcaneTorrentForDecast = true;
            public int UseArcaneTorrentForDecastAtPercentage = 100;
            public bool UseArcaneTorrentForResource = true;
            public int UseArcaneTorrentForResourceAtPercentage = 80;
            public bool UseArdentDefender = true;
            public bool UseAvengersShield = true;
            public bool UseAvengingWrath = true;
            public bool UseBerserking = true;
            public bool UseBlessingOfKings = true;
            public bool UseBlessingOfMight = true;
            public bool UseConsecration = true;
            public bool UseCrusaderStrike = true;
            public bool UseDevotionAura = true;
            public bool UseDivineProtection = true;
            public bool UseDivineShield = true;
            public bool UseFlashOfLight = true;
            public bool UseGiftoftheNaaru = true;
            public int UseGiftoftheNaaruAtPercentage = 80;
            public bool UseGuardianOfAncientKings = true;
            public bool UseHammerOfJustice = true;
            public bool UseHammerOfTheRighteous = true;
            public bool UseHammerOfWrath = true;
            public bool UseHandOfProtection = true;
            public bool UseHandOfPurity = true;
            public bool UseHolyAvenger = true;
            public bool UseHolyWrath = true;
            public bool UseJudgment = true;
            public bool UseLayOnHands = true;
            public bool UseLifeblood = true;
            public bool UseSacredShield = true;
            public bool UseSealOfInsight = false;
            public bool UseSealOfTheRighteousness = true;
            public bool UseSealOfTruth = true;
            public bool UseShieldOfTheRighteous = true;
            public bool UseStoneform = true;
            public int UseStoneformAtPercentage = 80;
            public bool UseTrinketOne = true;
            public bool UseTrinketTwo = true;
            public bool UseWarStomp = true;
            public int UseWarStompAtPercentage = 80;
            public bool UseWordOfGlory = true;

            public PaladinProtectionSettings()
            {
                ConfigWinForm(new Point(500, 400), "Paladin Protection Settings");
                /* Professions & Racials */
                AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
                AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
                AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
                AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
                AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
                AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
                /* Paladin Seals & Buffs */
                AddControlInWinForm("Use Seal of the Righteousness", "UseSealOfTheRighteousness", "Paladin Seals & Buffs");
                AddControlInWinForm("Use Seal of Truth", "UseSealOfTruth", "Paladin Seals & Buffs");
                AddControlInWinForm("Use Seal of Insight", "UseSealOfInsight", "Paladin Seals & Buffs");
                AddControlInWinForm("Use Blessing of Might", "UseBlessingOfMight", "Paladin Seals & Buffs");
                AddControlInWinForm("Use Blessing of Kings", "UseBlessingOfKings", "Paladin Seals & Buffs");
                /* Offensive Spell */
                AddControlInWinForm("Use Shield of the Righteous", "UseShieldOfTheRighteous", "Offensive Spell");
                AddControlInWinForm("Use Consecration", "UseConsecration", "Offensive Spell");
                AddControlInWinForm("Use Avenger's Shield", "UseAvengersShield", "Offensive Spell");
                AddControlInWinForm("Use Hammer of Wrath", "UseHammerOfWrath", "Offensive Spell");
                AddControlInWinForm("Use Crusader Strike", "UseCrusaderStrike", "Offensive Spell");
                AddControlInWinForm("Use Hammer of the Righteous", "UseHammerOfTheRighteous", "Offensive Spell");
                AddControlInWinForm("Use Judgment", "UseJudgment", "Offensive Spell");
                AddControlInWinForm("Use Hammer of Justice", "UseHammerOfJustice", "Offensive Spell");
                AddControlInWinForm("Use Holy Wrath", "UseHolyWrath", "Offensive Spell");
                /* Offensive Cooldown */
                AddControlInWinForm("Use Holy Avenger", "UseHolyAvenger", "Offensive Cooldown");
                AddControlInWinForm("Use Avenging Wrath", "UseAvengingWrath", "Offensive Cooldown");
                /* Defensive Cooldown */
                AddControlInWinForm("Use Guardian of Ancient Kings", "UseGuardianOfAncientKings", "Defensive Cooldown");
                AddControlInWinForm("Use Ardent Defender", "UseArdentDefender", "Defensive Cooldown");
                AddControlInWinForm("Use Sacred Shield", "UseSacredShield", "Defensive Cooldown");
                AddControlInWinForm("Use Hand of Purity", "UseHandOfPurity", "Defensive Cooldown");
                AddControlInWinForm("Use Devotion Aura", "UseDevotionAura", "Defensive Cooldown");
                AddControlInWinForm("Use Divine Protection", "UseDivineProtection", "Defensive Cooldown");
                AddControlInWinForm("Use Divine Shield", "UseDivineShield", "Defensive Cooldown");
                AddControlInWinForm("Use Hand of Protection", "UseHandOfProtection", "Defensive Cooldown");
                /* Healing Spell */
                AddControlInWinForm("Use Flash of Light", "UseFlashOfLight", "Healing Spell");
                AddControlInWinForm("Use Lay on Hands", "UseLayOnHands", "Healing Spell");
                AddControlInWinForm("Use Word of Glory", "UseWordOfGlory", "Healing Spell");
                AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
                AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
                AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
                AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
            }

            public static PaladinProtectionSettings CurrentSetting { get; set; }

            public static PaladinProtectionSettings GetSettings()
            {
                string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Paladin_Protection.xml";
                if (File.Exists(currentSettingsFile))
                {
                    return 
                        CurrentSetting = Load<PaladinProtectionSettings>(currentSettingsFile);
                }
                return new PaladinProtectionSettings();
            }
        }

        #endregion
    }

    public class PaladinRetribution
    {
        private static readonly PaladinRetributionSettings _mySettings = PaladinRetributionSettings.GetSettings();

        #region Professions & Racials

        public readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
        public readonly Spell Berserking = new Spell("Berserking");
        public readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
        public readonly Spell Lifeblood = new Spell("Lifeblood");
        public readonly Spell Stoneform = new Spell("Stoneform");
        public readonly Spell WarStomp = new Spell("War Stomp");

        #endregion

        #region Paladin Seals & Buffs

        public readonly Spell BlessingOfKings = new Spell("Blessing of Kings");
        public readonly Spell BlessingOfMight = new Spell("Blessing of Might");
        public readonly Spell SealOfCommand = new Spell("Seal of Command");
        public readonly Spell SealOfInsight = new Spell("Seal of Insight");
        public readonly Spell SealOfJustice = new Spell("Seal of Justice");
        public readonly Spell SealOfTheRighteousness = new Spell("Seal of Righteousness");
        public readonly Spell SealOfTruth = new Spell("Seal of Truth");

        #endregion

        #region Offensive Spell

        public readonly Spell BoundlessConviction = new Spell("Boundless Conviction");
        public readonly Spell CrusaderStrike = new Spell("Crusader Strike");
        public readonly Spell DivineStorm = new Spell("Divine Storm");
        public readonly Spell Exorcism = new Spell("Exorcism");
        public readonly Spell HammerOfJustice = new Spell("Hammer of Justice");
        public readonly Spell HammerOfTheRighteous = new Spell("Hammer of the Righteous");
        public readonly Spell HammerOfWrath = new Spell("Hammer of Wrath");
        public readonly Spell Judgment = new Spell("Judgment");
        public readonly Spell TemplarsVerdict = new Spell("Templar's Verdict");

        #endregion

        #region Offensive Cooldown

        public readonly Spell AvengingWrath = new Spell("Avenging Wrath");
        public readonly Spell GuardianOfAncientKings = new Spell("Guardian of Ancient Kings");
        public readonly Spell HolyAvenger = new Spell("Holy Avenger");
        public readonly Spell Inquisition = new Spell("Inquisition");
        private Timer BurstTime = new Timer(0);
        private Timer InquisitionToUseInPriotiy = new Timer(0);

        #endregion

        #region Defensive Cooldown

        public readonly Spell DevotionAura = new Spell("Devotion Aura");
        public readonly Spell DivineProtection = new Spell("Divine Protection");
        public readonly Spell DivineShield = new Spell("Divine Shield");
        public readonly Spell HandOfProtection = new Spell("Hand of Protection");
        public readonly Spell Reckoning = new Spell("Reckoning");
        public readonly Spell SacredShield = new Spell("Sacred Shield");

        #endregion

        #region Healing Spell

        public readonly Spell FlashOfLight = new Spell("Flash of Light");
        public readonly Spell LayOnHands = new Spell("Lay on Hands");
        public readonly Spell WordOfGlory = new Spell("Word of Glory");

        #endregion

        #region Flask & Potion Management

        private readonly int CombatPotion = ItemsManager.GetIdByName(_mySettings.CombatPotion);
        private readonly WoWItem _firstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
        private readonly int FlaskOrBattleElixir = ItemsManager.GetIdByName(_mySettings.FlaskOrBattleElixir);
        private readonly int GuardianElixir = ItemsManager.GetIdByName(_mySettings.GuardianElixir);

        private readonly WoWItem Hands = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_HAND);
        private readonly WoWItem _secondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);
        private readonly int TeasureFindingPotion = ItemsManager.GetIdByName(_mySettings.TeasureFindingPotion);
        private readonly int WellFedBuff = ItemsManager.GetIdByName(_mySettings.WellFedBuff);

        #endregion

        public PaladinRetribution()
        {
            Main.InternalRange = 5.0f;

            UInt64 lastTarget = 0;

            while (Main.InternalLoop)
            {
                try
                {
                    if (!ObjectManager.Me.IsDeadMe)
                    {
                        if (!ObjectManager.Me.IsMounted)
                        {
                            if (Fight.InFight && ObjectManager.Me.Target > 0)
                            {
                                if (ObjectManager.Me.Target != lastTarget
                                    && (Judgment.IsHostileDistanceGood || Exorcism.IsHostileDistanceGood))
                                {
                                    Pull();
                                    lastTarget = ObjectManager.Me.Target;
                                }
                                if (ObjectManager.Target.GetDistance < 41)
                                    Combat();
                                break;
                            }
                            if (!ObjectManager.Me.IsCast)
                                Patrolling();
                        }
                    }
                    else
                        Thread.Sleep(500);
                }
                catch
                {
                }
                Thread.Sleep(150);
            }
        }

        private void Pull()
        {
            if (_mySettings.UseExorcism && Exorcism.KnownSpell && Exorcism.IsSpellUsable && Exorcism.IsHostileDistanceGood)
            {
                Exorcism.Launch();
                return;
            }
            if (_mySettings.UseJudgment && Judgment.KnownSpell && Judgment.IsSpellUsable && Judgment.IsHostileDistanceGood)
            {
                Judgment.Launch();
                return;
            }
            if (_mySettings.UseReckoning && Reckoning.KnownSpell && Reckoning.IsSpellUsable && Reckoning.IsHostileDistanceGood)
            {
                Reckoning.Launch();
            }
        }

        private void Combat()
        {
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            DPSCycle();
            DPSBurst();
            DPSCycle();
            Heal();
            DPSCycle();
            Buffs();
        }

        private void Patrolling()
        {
            if (!ObjectManager.Me.IsMounted)
            {
                if (_mySettings.UseFlaskOrBattleElixir && _mySettings.FlaskOrBattleElixir != string.Empty)
                    if (!SpellManager.HaveBuffLua(ItemsManager.GetItemSpellByItemName(_mySettings.FlaskOrBattleElixir)) &&
                        !ItemsManager.IsItemOnCooldown(FlaskOrBattleElixir) &&
                        ItemsManager.IsUsableItemById(FlaskOrBattleElixir))
                        ItemsManager.UseItem(_mySettings.FlaskOrBattleElixir);
                if (_mySettings.UseGuardianElixir && _mySettings.GuardianElixir != string.Empty)
                    if (!SpellManager.HaveBuffLua(ItemsManager.GetItemSpellByItemName(_mySettings.GuardianElixir)) &&
                        !ItemsManager.IsItemOnCooldown(GuardianElixir) && ItemsManager.IsUsableItemById(GuardianElixir))
                        ItemsManager.UseItem(_mySettings.GuardianElixir);
                Blessing();
                Heal();
            }
            Seal();
        }

        private void Buffs()
        {
            if (!ObjectManager.Me.IsMounted)
            {
                if (_mySettings.UseFlaskOrBattleElixir && _mySettings.FlaskOrBattleElixir != string.Empty)
                    if (!SpellManager.HaveBuffLua(ItemsManager.GetItemSpellByItemName(_mySettings.FlaskOrBattleElixir)) &&
                        !ItemsManager.IsItemOnCooldown(FlaskOrBattleElixir) &&
                        ItemsManager.IsUsableItemById(FlaskOrBattleElixir))
                        ItemsManager.UseItem(_mySettings.FlaskOrBattleElixir);
                if (_mySettings.UseGuardianElixir && _mySettings.GuardianElixir != string.Empty)
                    if (!SpellManager.HaveBuffLua(ItemsManager.GetItemSpellByItemName(_mySettings.GuardianElixir)) &&
                        !ItemsManager.IsItemOnCooldown(GuardianElixir) && ItemsManager.IsUsableItemById(GuardianElixir))
                        ItemsManager.UseItem(_mySettings.GuardianElixir);
                Blessing();

                if (_mySettings.UseAlchFlask && !ObjectManager.Me.HaveBuff(79638) && !ObjectManager.Me.HaveBuff(79640) && !ObjectManager.Me.HaveBuff(79639)
                    && !ItemsManager.IsItemOnCooldown(75525) && ItemsManager.GetItemCountByIdLUA(75525) > 0)
                    ItemsManager.UseItem(75525);
            }
            Seal();
        }

        private void Seal()
        {
            if (_mySettings.UseSealOfTruth && SealOfTruth.KnownSpell &&
                (ObjectManager.GetNumberAttackPlayer() <= 7 || !_mySettings.UseSealOfTheRighteousness || !SealOfTheRighteousness.KnownSpell))
            {
                if (!SealOfTruth.HaveBuff && SealOfTruth.IsSpellUsable)
                {
                    SealOfTruth.Launch();
                }
                return;
            }
            if (_mySettings.UseSealOfTheRighteousness && SealOfTheRighteousness.KnownSpell)
            {
                if (!SealOfTheRighteousness.HaveBuff && SealOfTheRighteousness.IsSpellUsable)
                {
                    SealOfTheRighteousness.Launch();
                }
                return;
            }
            if (_mySettings.UseSealOfJustice && SealOfJustice.KnownSpell)
            {
                if (!SealOfJustice.HaveBuff && SealOfJustice.IsSpellUsable)
                {
                    SealOfJustice.Launch();
                }
                return;
            }
            if (_mySettings.UseSealOfInsight && SealOfInsight.KnownSpell)
            {
                if (!SealOfInsight.HaveBuff && SealOfInsight.IsSpellUsable)
                {
                    SealOfInsight.Launch();
                }
                return;
            }
            if (_mySettings.UseSealOfCommand && SealOfCommand.KnownSpell)
            {
                if (!SealOfCommand.HaveBuff && SealOfCommand.IsSpellUsable)
                {
                    SealOfCommand.Launch();
                }
            }
        }

        private void Blessing()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (_mySettings.UseBlessingOfKings && BlessingOfKings.KnownSpell)
            {
                if (!BlessingOfKings.HaveBuff && BlessingOfKings.IsSpellUsable)
                {
                    BlessingOfKings.Launch();
                }
                return;
            }
            if (_mySettings.UseBlessingOfMight && BlessingOfMight.KnownSpell)
            {
                if (!BlessingOfMight.HaveBuff && BlessingOfMight.IsSpellUsable)
                {
                    BlessingOfMight.Launch();
                }
            }
        }

        private void Heal()
        {
            if (ObjectManager.Me.HealthPercent < 95 && !ObjectManager.Me.InCombat)
            {
                if (_mySettings.UseFlashOfLight && FlashOfLight.KnownSpell && FlashOfLight.IsSpellUsable)
                {
                    FlashOfLight.Launch(true, true, true);
                    Thread.Sleep(200);
                    return;
                }
            }
            if (_mySettings.UseDivineShield && DivineShield.KnownSpell && DivineShield.IsSpellUsable && ObjectManager.Me.HealthPercent > 0 && ObjectManager.Me.HealthPercent <= 5)
            {
                DivineShield.Launch();
                return;
            }
            if (_mySettings.UseLayOnHands && LayOnHands.KnownSpell && LayOnHands.IsSpellUsable && !ObjectManager.Me.HaveBuff(25771) && ObjectManager.Me.HealthPercent > 0 &&
                ObjectManager.Me.HealthPercent <= 20)
            {
                LayOnHands.Launch();
                return;
            }
            if (ObjectManager.Me.ManaPercentage < 10)
            {
                if (_mySettings.UseArcaneTorrentForResource && ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable)
                {
                    ArcaneTorrent.Launch();
                    return;
                }
            }
            if (ObjectManager.Me.HealthPercent > 0 && ObjectManager.Me.HealthPercent < 50)
            {
                if (_mySettings.UseWordOfGlory && WordOfGlory.KnownSpell && WordOfGlory.IsSpellUsable)
                    WordOfGlory.Launch();
                if (_mySettings.UseDevotionAura && DevotionAura.KnownSpell && DevotionAura.IsSpellUsable)
                    DevotionAura.Launch();
                if (_mySettings.UseFlashOfLight && FlashOfLight.KnownSpell && FlashOfLight.IsSpellUsable)
                {
                    FlashOfLight.Launch();
                    return;
                }
            }
            if (ObjectManager.Me.HealthPercent >= 0 && ObjectManager.Me.HealthPercent < 30)
            {
                if (_mySettings.UseWordOfGlory && WordOfGlory.KnownSpell && WordOfGlory.IsSpellUsable)
                    WordOfGlory.Launch();
                if (_mySettings.UseDivineProtection && DivineProtection.KnownSpell && DivineProtection.IsSpellUsable)
                {
                    DivineProtection.Launch();
                }
                else if (_mySettings.UseHandOfProtection && HandOfProtection.KnownSpell && HandOfProtection.IsSpellUsable && !ObjectManager.Me.HaveBuff(25771))
                {
                    HandOfProtection.Launch();
                }
                if (_mySettings.UseFlashOfLight && FlashOfLight.KnownSpell && FlashOfLight.IsSpellUsable)
                {
                    FlashOfLight.Launch();
                }
            }
        }

        private void DPSBurst()
        {
            if (!_mySettings.UseGuardianOfAncientKings || !GuardianOfAncientKings.KnownSpell || GuardianOfAncientKings.HaveBuff || !GuardianOfAncientKings.IsSpellUsable)
            {
                if ((!GuardianOfAncientKings.KnownSpell || BurstTime.IsReady) && AvengingWrath.KnownSpell && AvengingWrath.IsSpellUsable &&
                    (!HolyAvenger.KnownSpell || HolyAvenger.IsSpellUsable))
                {
                    if (_mySettings.UseAvengingWrath)
                        AvengingWrath.Launch();
                    if (_mySettings.UseInquisition && Inquisition.KnownSpell && Inquisition.IsSpellUsable && (!Inquisition.HaveBuff || InquisitionToUseInPriotiy.IsReady) &&
                        (ObjectManager.Me.HaveBuff(90174) || ObjectManager.Me.HolyPower >= 3))
                    {
                        Inquisition.Launch();
                        InquisitionToUseInPriotiy = new Timer(1000*(10*3 - 6));
                    }
                    if (_mySettings.UseHolyAvenger && HolyAvenger.KnownSpell && HolyAvenger.IsSpellUsable)
                        HolyAvenger.Launch();
                }
                else if (_mySettings.UseHolyAvenger && HolyAvenger.KnownSpell && HolyAvenger.IsSpellUsable && (!GuardianOfAncientKings.KnownSpell || BurstTime.IsReady))
                {
                    HolyAvenger.Launch();
                    if (_mySettings.UseInquisition && Inquisition.KnownSpell && Inquisition.IsSpellUsable && (!Inquisition.HaveBuff || InquisitionToUseInPriotiy.IsReady) &&
                        (ObjectManager.Me.HaveBuff(90174) || ObjectManager.Me.HolyPower >= 3))
                    {
                        Inquisition.Launch();
                        InquisitionToUseInPriotiy = new Timer(1000*(10*3 - 6));
                    }
                    if (_mySettings.UseAvengingWrath && AvengingWrath.KnownSpell && AvengingWrath.IsSpellUsable)
                        AvengingWrath.Launch();
                }
            }
            else if (_mySettings.UseGuardianOfAncientKings && GuardianOfAncientKings.KnownSpell && GuardianOfAncientKings.IsSpellUsable && AvengingWrath.IsSpellUsable &&
                     (!HolyAvenger.KnownSpell || HolyAvenger.IsSpellUsable))
            {
                GuardianOfAncientKings.Launch();
                BurstTime = new Timer(1000*6.5);
            }
            if (_mySettings.UseTrinketOne && !ItemsManager.IsItemOnCooldown(_firstTrinket.Entry) && ItemsManager.IsUsableItemById(_firstTrinket.Entry))
            {
                ItemsManager.UseItem(_firstTrinket.Name);
                Logging.WriteFight("Use First Trinket Slot");
            }
            if (_mySettings.UseTrinketTwo && !ItemsManager.IsItemOnCooldown(_secondTrinket.Entry) && ItemsManager.IsUsableItemById(_secondTrinket.Entry))
            {
                ItemsManager.UseItem(_secondTrinket.Name);
                Logging.WriteFight("Use Second Trinket Slot");
            }
        }

        private void DPSCycle()
        {
            if (_mySettings.UseHammerOfJustice && HammerOfJustice.KnownSpell && HammerOfJustice.IsSpellUsable && HammerOfJustice.IsHostileDistanceGood &&
                ObjectManager.Target.IsStunnable)
            {
                HammerOfJustice.Launch();
                return;
            }
            if (_mySettings.UseInquisition && Inquisition.KnownSpell && Inquisition.IsSpellUsable && (!Inquisition.HaveBuff || InquisitionToUseInPriotiy.IsReady) &&
                (ObjectManager.Me.HaveBuff(90174) || ObjectManager.Me.HolyPower >= 3))
            {
                Inquisition.Launch();
                InquisitionToUseInPriotiy = new Timer(1000*(10*3 - 6));
                return;
            }
            if ((ObjectManager.GetNumberAttackPlayer() <= 2 ||
                 (!_mySettings.UseDivineStorm && _mySettings.UseTemplarsVerdict)) && TemplarsVerdict.KnownSpell &&
                (!Inquisition.KnownSpell || Inquisition.HaveBuff) && TemplarsVerdict.IsSpellUsable &&
                TemplarsVerdict.IsHostileDistanceGood &&
                (ObjectManager.Me.HaveBuff(90174) || ObjectManager.Me.HolyPower == 5 ||
                 (ObjectManager.Me.HolyPower >= 3 && (!BoundlessConviction.KnownSpell || HolyAvenger.HaveBuff))))
            {
                TemplarsVerdict.Launch();
                return;
            }
            if ((ObjectManager.GetNumberAttackPlayer() > 2 ||
                 (_mySettings.UseDivineStorm && !_mySettings.UseTemplarsVerdict)) && DivineStorm.KnownSpell &&
                _mySettings.UseDivineStorm && (!Inquisition.KnownSpell || Inquisition.HaveBuff) &&
                DivineStorm.IsSpellUsable && DivineStorm.IsHostileDistanceGood &&
                (ObjectManager.Me.HaveBuff(90174) || ObjectManager.Me.HolyPower == 5 ||
                 (ObjectManager.Me.HolyPower >= 3 && (!BoundlessConviction.KnownSpell || HolyAvenger.HaveBuff))))
            {
                DivineStorm.Launch();
                return;
            }
            if (_mySettings.UseHammerOfWrath && HammerOfWrath.KnownSpell && HammerOfWrath.IsSpellUsable && HammerOfWrath.IsHostileDistanceGood)
            {
                HammerOfWrath.Launch();
                return;
            }
            if (_mySettings.UseExorcism && Exorcism.KnownSpell && Exorcism.IsSpellUsable && Exorcism.IsHostileDistanceGood)
            {
                Exorcism.Launch();
                return;
            }
            if (_mySettings.UseCrusaderStrike && CrusaderStrike.KnownSpell && CrusaderStrike.IsSpellUsable && CrusaderStrike.IsHostileDistanceGood &&
                (!_mySettings.UseHammerOfTheRighteous || !HammerOfTheRighteous.KnownSpell ||
                 (_mySettings.UseHammerOfTheRighteous && HammerOfTheRighteous.KnownSpell &&
                  (ObjectManager.GetNumberAttackPlayer() <= 3 && (ObjectManager.Target.HaveBuff(115798) || !_mySettings.RefreshWeakenedBlows)))))
            {
                CrusaderStrike.Launch();
                return;
            }
            if (_mySettings.UseHammerOfTheRighteous && HammerOfTheRighteous.KnownSpell && HammerOfTheRighteous.IsSpellUsable && HammerOfTheRighteous.IsHostileDistanceGood &&
                (!_mySettings.UseCrusaderStrike || !CrusaderStrike.KnownSpell ||
                 (_mySettings.UseCrusaderStrike && CrusaderStrike.KnownSpell &&
                  (ObjectManager.GetNumberAttackPlayer() >= 4 || (!ObjectManager.Target.HaveBuff(115798) && _mySettings.RefreshWeakenedBlows)))))
            {
                HammerOfTheRighteous.Launch();
                return;
            }
            if (_mySettings.UseJudgment && Judgment.KnownSpell && Judgment.IsSpellUsable && Judgment.IsHostileDistanceGood)
            {
                Judgment.Launch();
                return;
            }
            if ((ObjectManager.GetNumberAttackPlayer() <= 2 ||
                 (!_mySettings.UseDivineStorm && _mySettings.UseTemplarsVerdict)) &&
                TemplarsVerdict.KnownSpell &&
                (!Inquisition.KnownSpell || Inquisition.HaveBuff) &&
                TemplarsVerdict.IsSpellUsable && TemplarsVerdict.IsHostileDistanceGood &&
                (ObjectManager.Me.HaveBuff(90174) || ObjectManager.Me.HolyPower >= 3))
            {
                TemplarsVerdict.Launch();
                return;
            }
            if ((ObjectManager.GetNumberAttackPlayer() > 2 ||
                 (_mySettings.UseDivineStorm && !_mySettings.UseTemplarsVerdict)) &&
                DivineStorm.KnownSpell &&
                (!Inquisition.KnownSpell || Inquisition.HaveBuff) &&
                DivineStorm.IsSpellUsable && DivineStorm.IsHostileDistanceGood &&
                (ObjectManager.Me.HaveBuff(90174) || ObjectManager.Me.HolyPower >= 3))
            {
                DivineStorm.Launch();
                return;
            }
            if (_mySettings.UseSacredShield && SacredShield.KnownSpell && SacredShield.IsSpellUsable && SacredShield.IsHostileDistanceGood
                && (!_mySettings.UseInquisition || !Inquisition.KnownSpell || Inquisition.HaveBuff)
                && (!_mySettings.UseTemplarsVerdict || !TemplarsVerdict.KnownSpell || !TemplarsVerdict.IsSpellUsable)
                && (!_mySettings.UseJudgment || !Judgment.KnownSpell || !Judgment.IsSpellUsable)
                && (!_mySettings.UseCrusaderStrike || !CrusaderStrike.KnownSpell || !CrusaderStrike.IsSpellUsable)
                && (!_mySettings.UseHammerOfWrath || !HammerOfWrath.KnownSpell || !HammerOfWrath.IsSpellUsable)
                && (!_mySettings.UseExorcism || !Exorcism.KnownSpell || !Exorcism.IsSpellUsable))
            {
                // Since we have a GCD available and spell to cast, we can use the Sacred Shield. (Loss of DPS if not placed here.)
                SacredShield.Launch();
            }
        }

        private void AvoidMelee()
        {
            if (ObjectManager.Target.GetDistance < _mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
            {
                Logging.WriteFight("Too Close. Moving Back");
                var maxTimeTimer = new Timer(1000*2);
                MovementsAction.MoveBackward(true);
                while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                    Thread.Sleep(300);
                MovementsAction.MoveBackward(false);
                if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
                {
                    MovementsAction.MoveForward(true);
                    Thread.Sleep(1000);
                    MovementsAction.MoveForward(false);
                    MovementManager.Face(ObjectManager.Target.Position);
                }
            }
        }

        #region Nested type: PaladinRetributionSettings

        [Serializable]
        public class PaladinRetributionSettings : Settings
        {
            public string CombatPotion = "Potion of Mogu Power";
            public bool DoAvoidMelee = false;
            public int DoAvoidMeleeDistance = 0;
            public string FlaskOrBattleElixir = "Flask of Winter's Bite";
            public string GuardianElixir = "";
            public bool RefreshWeakenedBlows = true;
            public string TeasureFindingPotion = "Potion of Luck";
            public bool UseAlchFlask = true;
            public bool UseArcaneTorrentForDecast = true;
            public int UseArcaneTorrentForDecastAtPercentage = 100;
            public bool UseArcaneTorrentForResource = true;
            public int UseArcaneTorrentForResourceAtPercentage = 80;
            public bool UseAvengingWrath = true;
            public bool UseBerserking = true;
            public bool UseBlessingOfKings = true;
            public bool UseBlessingOfMight = true;
            public bool UseCombatPotion = false;
            public bool UseCrusaderStrike = true;
            public bool UseDevotionAura = true;
            public bool UseDivineProtection = true;
            public bool UseDivineShield = true;
            public bool UseDivineStorm = true;
            public bool UseExorcism = true;
            public bool UseFlashOfLight = true;
            public bool UseFlaskOrBattleElixir = false;
            public bool UseGiftoftheNaaru = true;
            public int UseGiftoftheNaaruAtPercentage = 80;
            public bool UseGuardianElixir = false;
            public bool UseGuardianOfAncientKings = true;
            public bool UseHammerOfJustice = true;
            public bool UseHammerOfTheRighteous = true;
            public bool UseHammerOfWrath = true;
            public bool UseHandOfProtection = false;
            public bool UseHolyAvenger = true;
            public bool UseInquisition = true;
            public bool UseJudgment = true;
            public bool UseLayOnHands = true;
            public bool UseLifeblood = true;
            public bool UseReckoning = true;
            public bool UseSacredShield = true;
            public bool UseSealOfCommand = true;
            public bool UseSealOfInsight = false;
            public bool UseSealOfJustice = false;
            public bool UseSealOfTheRighteousness = true;
            public bool UseSealOfTruth = true;
            public bool UseStoneform = true;
            public int UseStoneformAtPercentage = 80;
            public bool UseTeasureFindingPotion = false;
            public bool UseTemplarsVerdict = true;
            public bool UseTrinketOne = true;
            public bool UseTrinketTwo = true;
            public bool UseWarStomp = true;
            public int UseWarStompAtPercentage = 80;
            public bool UseWellFedBuff = false;
            public bool UseWordOfGlory = true;

            public string WellFedBuff = "Black Pepper Ribs and Shrimp";

            public PaladinRetributionSettings()
            {
                ConfigWinForm(new Point(500, 400), "Paladin Retribution Settings");
                /* Professions & Racials */
                AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
                AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
                AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
                AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
                AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
                /* Paladin Seals & Buffs */
                AddControlInWinForm("Use Seal of the Righteousness", "UseSealOfTheRighteousness", "Paladin Seals & Buffs");
                AddControlInWinForm("Use Seal of Truth", "UseSealOfTruth", "Paladin Seals & Buffs");
                AddControlInWinForm("Use Seal of Justice", "UseSealOfJustice", "Paladin Seals & Buffs");
                AddControlInWinForm("Use Seal of Insight", "UseSealOfInsight", "Paladin Seals & Buffs");
                AddControlInWinForm("Use Seal of Command", "UseSealOfCommand", "Paladin Seals & Buffs");
                AddControlInWinForm("Use Blessing of Might", "UseBlessingOfMight", "Paladin Seals & Buffs");
                AddControlInWinForm("Use Blessing of Kings", "UseBlessingOfKings", "Paladin Seals & Buffs");
                /* Offensive Spell */
                AddControlInWinForm("Use Templar's Verdict", "UseTemplarsVerdict", "Offensive Spell");
                AddControlInWinForm("Use Divine Storm", "UseDivineStorm", "Offensive Spell");
                AddControlInWinForm("Use Exorcism", "UseExorcism", "Offensive Spell");
                AddControlInWinForm("Use Hammer of Wrath", "UseHammerOfWrath", "Offensive Spell");
                AddControlInWinForm("Use Crusader Strike", "UseCrusaderStrike", "Offensive Spell");
                AddControlInWinForm("Use Hammer of the Righteous", "UseHammerOfTheRighteous", "Offensive Spell");
                AddControlInWinForm("Use Judgment", "UseJudgment", "Offensive Spell");
                AddControlInWinForm("Use Hammer of Justice", "UseHammerOfJustice", "Offensive Spell");
                /* Offensive Cooldown */
                AddControlInWinForm("Use Inquisition", "UseInquisition", "Offensive Cooldown");
                AddControlInWinForm("Use Guardian of Ancient Kings", "UseGuardianOfAncientKings", "Offensive Cooldown");
                AddControlInWinForm("Use Holy Avenger", "UseHolyAvenger", "Offensive Cooldown");
                AddControlInWinForm("Use Avenging Wrath", "UseAvengingWrath", "Offensive Cooldown");
                /* Defensive Cooldown */
                AddControlInWinForm("Use Reckoning", "UseReckoning", "Defensive Cooldown");
                AddControlInWinForm("Refresh Weakened Blows", "RefreshWeakenedBlows", "Defensive Cooldown");
                AddControlInWinForm("Use Divine Protection", "UseDivineProtection", "Defensive Cooldown");
                AddControlInWinForm("Use Devotion Aura", "UseDevotionAura", "Defensive Cooldown");
                AddControlInWinForm("Use Sacred Shield", "UseSacredShield", "Defensive Cooldown");
                AddControlInWinForm("Use Divine Shield", "UseDivineShield", "Defensive Cooldown");
                AddControlInWinForm("Use Hand of Protection", "UseHandOfProtection", "Defensive Cooldown");
                /* Healing Spell */
                AddControlInWinForm("Use Flash of Light", "UseFlashOfLight", "Healing Spell");
                AddControlInWinForm("Use Lay on Hands", "UseLayOnHands", "Healing Spell");
                AddControlInWinForm("Use Word of Glory", "UseWordOfGlory", "Healing Spell");
                /* Flask & Potion Management */
                AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
                AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
                AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
                AddControlInWinForm("Use Flask or Battle Elixir", "UseFlaskOrBattleElixir", "Flask & Potion Management");
                AddControlInWinForm("Flask or Battle Elixir Name", "FlaskOrBattleElixir", "Flask & Potion Management");
                AddControlInWinForm("Use Guardian Elixir", "UseGuardianElixir", "Flask & Potion Management");
                AddControlInWinForm("Guardian Elixir Name", "GuardianElixir", "Flask & Potion Management");
                AddControlInWinForm("Use Combat Potion", "UseCombatPotion", "Flask & Potion Management");
                AddControlInWinForm("Combat Potion Name", "CombatPotion", "Flask & Potion Management");
                AddControlInWinForm("Use Teasure Finding Potion", "UseTeasureFindingPotion", "Flask & Potion Management");
                AddControlInWinForm("Teasure Finding Potion Name", "TeasureFindingPotion", "Flask & Potion Management");
                AddControlInWinForm("Use Well Fed Buff", "UseWellFedBuff", "Flask & Potion Management");
                AddControlInWinForm("Well Fed Buff Name", "WellFedBuff", "Flask & Potion Management");
                AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
                AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
            }

            public static PaladinRetributionSettings CurrentSetting { get; set; }

            public static PaladinRetributionSettings GetSettings()
            {
                string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Paladin_Retribution.xml";
                if (File.Exists(currentSettingsFile))
                {
                    return
                        CurrentSetting = Load<PaladinRetributionSettings>(currentSettingsFile);
                }
                return new PaladinRetributionSettings();
            }
        }

        #endregion
    }

    #endregion

    #region Shaman

    public class ShamanEnhancement
    {
        private readonly ShamanEnhancementSettings _mySettings = ShamanEnhancementSettings.GetSettings();

        #region General Timers & Variables

        private readonly WoWItem _firstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
        private readonly WoWItem _secondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);
        private Timer _engineeringTimer = new Timer(0);
        public int LC = 0;
        private Timer _onCd = new Timer(0);

        #endregion

        #region Professions & Racials

        public readonly Spell Alchemy = new Spell("Alchemy");
        public readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
        public readonly Spell Berserking = new Spell("Berserking");
        public readonly Spell BloodFury = new Spell("Blood Fury");
        public readonly Spell Engineering = new Spell("Engineering");
        public readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
        public readonly Spell Lifeblood = new Spell("Lifeblood");
        public readonly Spell Stoneform = new Spell("Stoneform");
        public readonly Spell WarStomp = new Spell("War Stomp");

        #endregion

        #region Shaman Buffs

        public readonly Spell FlametongueWeapon = new Spell("Flametongue Weapon");
        public readonly Spell FrostbrandWeapon = new Spell("Frostbrand Weapon");
        public readonly Spell GhostWolf = new Spell("Ghost Wolf");
        public readonly Spell LightningShield = new Spell("Lightning Shield");
        public readonly Spell RockbiterWeapon = new Spell("Rockbiter Weapon");
        public readonly Spell SpiritwalkersGrace = new Spell("Spiritwalker's Grace");
        public readonly Spell WaterShield = new Spell("Water Shield");
        public readonly Spell WaterWalking = new Spell("Water Walking");
        public readonly Spell WindfuryWeapon = new Spell("Windfury Weapon");
        private Timer _waterWalkingTimer = new Timer(0);

        #endregion

        #region Offensive Spell

        public readonly Spell ChainLightning = new Spell("Chain Lightning");
        public readonly Spell EarthShock = new Spell("Earth Shock");
        public readonly Spell FireNova = new Spell("Fire Nova");
        public readonly Spell FlameShock = new Spell("Flame Shock");
        public readonly Spell FrostShock = new Spell("Frost Shock");
        public readonly Spell LavaLash = new Spell("Lava Lash");
        public readonly Spell LightningBolt = new Spell("Lightning Bolt");
        public readonly Spell MagmaTotem = new Spell("Magma Totem");
        public readonly Spell PrimalStrike = new Spell("Primal Strike");
        public readonly Spell SearingTotem = new Spell("Searing Totem");
        public readonly Spell Stormstrike = new Spell("Stormstrike");
        private Timer _flameShockTimer = new Timer(0);

        #endregion

        #region Offensive Cooldown

        public readonly Spell AncestralSwiftness = new Spell("Ancestral Swiftness");
        public readonly Spell Ascendance = new Spell("Ascendance");
        public readonly Spell Bloodlust = new Spell("Bloodlust");
        public readonly Spell CalloftheElements = new Spell("Call of the Elements");
        public readonly Spell EarthElementalTotem = new Spell("Earth Elemental Totem");
        public readonly Spell ElementalBlast = new Spell("Elemental Blast");
        public readonly Spell ElementalMastery = new Spell("Elemental Mastery");
        public readonly Spell FeralSpirit = new Spell("Feral Spirit");
        public readonly Spell FireElementalTotem = new Spell("Fire Elemental Totem");
        public readonly Spell Heroism = new Spell("Heroism");
        public readonly Spell StormlashTotem = new Spell("Stormlash Totem");
        public readonly Spell TotemicProjection = new Spell("Totemic Projection");
        public readonly Spell UnleashElements = new Spell("Unleash Elements");
        public readonly Spell UnleashedFury = new Spell("Unleashed Fury");

        #endregion

        #region Defensive Cooldown

        public readonly Spell AstralShift = new Spell("Astral Shift");
        public readonly Spell CapacitorTotem = new Spell("Capacitor Totem");
        public readonly Spell EarthbindTotem = new Spell("Earthbind Totem");
        public readonly Spell GroundingTotem = new Spell("Grounding Totem");
        public readonly Spell ShamanisticRage = new Spell("Shamanistic Rage");
        public readonly Spell StoneBulwarkTotem = new Spell("Stone Bulwark Totem");
        public readonly Spell WindShear = new Spell("Wind Shear");

        #endregion

        #region Healing Spell

        public readonly Spell AncestralGuidance = new Spell("Ancestral Guidance");
        public readonly Spell ChainHeal = new Spell("Chain Heal");
        public readonly Spell HealingRain = new Spell("Healing Rain");
        public readonly Spell HealingStreamTotem = new Spell("Healing Stream Totem");
        public readonly Spell HealingSurge = new Spell("Healing Surge");
        public readonly Spell HealingTideTotem = new Spell("Healing Tide Totem");
        public readonly Spell TotemicRecall = new Spell("Totemic Recall");

        #endregion

        public ShamanEnhancement()
        {
            Main.InternalRange = 5.0f;
            UInt64 lastTarget = 0;

            while (Main.InternalLoop)
            {
                try
                {
                    if (!ObjectManager.Me.IsDeadMe)
                    {
                        if (!ObjectManager.Me.IsMounted)
                        {
                            if (Fight.InFight && ObjectManager.Me.Target > 0)
                            {
                                if (ObjectManager.Me.Target != lastTarget
                                    && (FlameShock.IsHostileDistanceGood || EarthShock.IsHostileDistanceGood))
                                {
                                    Pull();
                                    lastTarget = ObjectManager.Me.Target;
                                }

                                if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                    && _mySettings.UseLowCombat)
                                {
                                    LC = 1;
                                    if (ObjectManager.Target.GetDistance < 41)
                                        LowCombat();
                                }
                                else
                                {
                                    LC = 0;
                                    if (ObjectManager.Target.GetDistance < 41)
                                        Combat();
                                }
                                break;
                            }
                            if (!ObjectManager.Me.IsCast)
                                Patrolling();
                        }
                    }
                    else
                        Thread.Sleep(500);
                }
                catch
                {
                }
                Thread.Sleep(150);
            }
        }

        private void Pull()
        {
            if (TotemicProjection.KnownSpell && TotemicProjection.IsSpellUsable && _mySettings.UseTotemicProjection)
                TotemicProjection.Launch();

            if (FlameShock.KnownSpell && FlameShock.IsSpellUsable && FlameShock.IsHostileDistanceGood
                && _mySettings.UseFlameShock && LC != 1)
            {
                FlameShock.Launch();
                return;
            }
            else
            {
                if (EarthShock.KnownSpell && EarthShock.IsSpellUsable && EarthShock.IsHostileDistanceGood
                    && _mySettings.UseEarthShock)
                {
                    EarthShock.Launch();
                    return;
                }
            }
        }

        private void LowCombat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            DefenseCycle();
            Heal();

            if (EarthShock.KnownSpell && EarthShock.IsSpellUsable && EarthShock.IsHostileDistanceGood
                && _mySettings.UseEarthShock)
            {
                EarthShock.Launch();
                return;
            }
            // Blizzard API Calls for Stormstrike using Primal Strike Function
            if (PrimalStrike.KnownSpell && PrimalStrike.IsSpellUsable && PrimalStrike.IsHostileDistanceGood
                && _mySettings.UseStormstrike)
            {
                PrimalStrike.Launch();
                return;
            }
            if (ChainLightning.KnownSpell && ChainLightning.IsSpellUsable && ChainLightning.IsHostileDistanceGood
                && _mySettings.UseChainLightning)
            {
                ChainLightning.Launch();
                return;
            }
            if (SearingTotem.KnownSpell && SearingTotem.IsSpellUsable && _mySettings.UseSearingTotem
                && FireTotemReady() && !SearingTotem.CreatedBySpellInRange(25) && ObjectManager.Target.GetDistance < 31)
            {
                SearingTotem.Launch();
                return;
            }
            if (MagmaTotem.KnownSpell && MagmaTotem.IsSpellUsable && ObjectManager.Target.GetDistance < 8
                && _mySettings.UseMagmaTotem && FireTotemReady())
            {
                MagmaTotem.Launch();
            }
        }

        private void Combat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            if (_onCd.IsReady)
                DefenseCycle();
            DPSCycle();
            Heal();
            Decast();
            DPSCycle();
            DPSBurst();
            DPSCycle();
        }

        private void Buff()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (WaterWalking.IsSpellUsable && WaterWalking.KnownSpell &&
                (!WaterWalking.HaveBuff || _waterWalkingTimer.IsReady)
                && !ObjectManager.Me.InCombat && _mySettings.UseWaterWalking)
            {
                WaterWalking.Launch();
                _waterWalkingTimer = new Timer(1000*60*9);
                return;
            }
            if ((ObjectManager.Me.ManaPercentage < 5 && WaterShield.KnownSpell && WaterShield.IsSpellUsable
                 && _mySettings.UseWaterShield && !WaterShield.HaveBuff) || !_mySettings.UseLightningShield)
            {
                WaterShield.Launch();
                return;
            }
            if (LightningShield.KnownSpell && LightningShield.IsSpellUsable && !LightningShield.HaveBuff
                && _mySettings.UseLightningShield && ObjectManager.Me.ManaPercentage > 15)
            {
                LightningShield.Launch();
                return;
            }
            if (ObjectManager.Me.InCombat && SpiritwalkersGrace.IsSpellUsable
                && SpiritwalkersGrace.KnownSpell && _mySettings.UseSpiritwalkersGrace && ObjectManager.Me.GetMove)
            {
                SpiritwalkersGrace.Launch();
                return;
            }
            if (WindfuryWeapon.KnownSpell && WindfuryWeapon.IsSpellUsable && !ObjectManager.Me.HaveBuff(33757)
                && _mySettings.UseWindfuryWeapon)
            {
                WindfuryWeapon.Launch();
                return;
            }
            if (FrostbrandWeapon.KnownSpell && FrostbrandWeapon.IsSpellUsable && !ObjectManager.Me.HaveBuff(8034)
                && _mySettings.UseFrostbrandWeapon && !_mySettings.UseWindfuryWeapon)
            {
                FrostbrandWeapon.Launch();
                return;
            }
            if (RockbiterWeapon.KnownSpell && RockbiterWeapon.IsSpellUsable && !ObjectManager.Me.HaveBuff(36494)
                && _mySettings.UseRockbiterWeapon && !_mySettings.UseWindfuryWeapon
                && !_mySettings.UseFrostbrandWeapon)
            {
                RockbiterWeapon.Launch();
                return;
            }
            if (FlametongueWeapon.KnownSpell && FlametongueWeapon.IsSpellUsable && !ObjectManager.Me.HaveBuff(10400)
                && _mySettings.UseFlametongueWeapon && (ObjectManager.Me.HaveBuff(33757)
                                                       || ObjectManager.Me.HaveBuff(8034) ||
                                                       ObjectManager.Me.HaveBuff(36494)))
            {
                FlametongueWeapon.Launch();
                return;
            }
            if (!ObjectManager.Me.InCombat && GhostWolf.IsSpellUsable && GhostWolf.KnownSpell
                && _mySettings.UseGhostWolf && ObjectManager.Me.GetMove && !GhostWolf.HaveBuff
                && ObjectManager.Target.GetDistance > 10)
            {
                GhostWolf.Launch();
                return;
            }
            if (_mySettings.UseAlchFlask && !ObjectManager.Me.HaveBuff(79638) && !ObjectManager.Me.HaveBuff(79640) && !ObjectManager.Me.HaveBuff(79639)
                && !ItemsManager.IsItemOnCooldown(75525) && ItemsManager.GetItemCountByIdLUA(75525) > 0)
            {
                ItemsManager.UseItem(75525);
            }
        }

        private void AvoidMelee()
        {
            if (ObjectManager.Target.GetDistance < _mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
            {
                Logging.WriteFight("Too Close. Moving Back");
                var maxTimeTimer = new Timer(1000*2);
                MovementsAction.MoveBackward(true);
                while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                    Thread.Sleep(300);
                MovementsAction.MoveBackward(false);
                if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
                {
                    MovementsAction.MoveForward(true);
                    Thread.Sleep(1000);
                    MovementsAction.MoveForward(false);
                    MovementManager.Face(ObjectManager.Target.Position);
                }
            }
        }

        private void DefenseCycle()
        {
            if (ObjectManager.Me.HealthPercent < 50 && CapacitorTotem.KnownSpell && CapacitorTotem.IsSpellUsable
                && AirTotemReady() && _mySettings.UseCapacitorTotem)
            {
                CapacitorTotem.Launch();
                _onCd = new Timer(1000*5);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 50 && StoneBulwarkTotem.KnownSpell &&
                StoneBulwarkTotem.IsSpellUsable
                && EarthTotemReady() && _mySettings.UseStoneBulwarkTotem)
            {
                StoneBulwarkTotem.Launch();
                _onCd = new Timer(1000*10);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable &&
                WarStomp.KnownSpell
                && _mySettings.UseWarStomp)
            {
                WarStomp.Launch();
                _onCd = new Timer(1000*2);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable &&
                Stoneform.KnownSpell
                && _mySettings.UseStoneform)
            {
                Stoneform.Launch();
                _onCd = new Timer(1000*8);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 90 && ShamanisticRage.IsSpellUsable
                && ShamanisticRage.KnownSpell && _mySettings.UseShamanisticRage)
            {
                ShamanisticRage.Launch();
                _onCd = new Timer(1000*15);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 70 && AstralShift.KnownSpell && AstralShift.IsSpellUsable
                && _mySettings.UseAstralShift)
            {
                AstralShift.Launch();
                _onCd = new Timer(1000*6);
            }
        }

        private void Heal()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (ObjectManager.Me.ManaPercentage < 50 && TotemicRecall.KnownSpell && TotemicRecall.IsSpellUsable
                && _mySettings.UseTotemicRecall && !ObjectManager.Me.InCombat
                && TotemicRecallReady())
            {
                TotemicRecall.Launch();
                return;
            }

            if (ObjectManager.Me.HealthPercent < 95 && HealingSurge.KnownSpell && HealingSurge.IsSpellUsable
                && !ObjectManager.Me.InCombat && _mySettings.UseHealingSurge)
            {
                HealingSurge.Launch();
                while (ObjectManager.Me.IsCast)
                {
                    Thread.Sleep(200);
                }
                return;
            }
            if (HealingSurge.KnownSpell && HealingSurge.IsSpellUsable && ObjectManager.Me.HealthPercent < 50
                && _mySettings.UseHealingSurge)
            {
                HealingSurge.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseGiftoftheNaaruAtPercentage &&
                GiftoftheNaaru.KnownSpell && GiftoftheNaaru.IsSpellUsable
                && _mySettings.UseGiftoftheNaaru)
            {
                GiftoftheNaaru.Launch();
                return;
            }
            if (HealingTideTotem.KnownSpell && HealingTideTotem.IsSpellUsable &&
                ObjectManager.Me.HealthPercent < 70
                && WaterTotemReady() && _mySettings.UseHealingTideTotem)
            {
                HealingTideTotem.Launch();
                return;
            }
            if (AncestralGuidance.KnownSpell && AncestralGuidance.IsSpellUsable &&
                ObjectManager.Me.HealthPercent < 70
                && _mySettings.UseAncestralGuidance)
            {
                AncestralGuidance.Launch();
                return;
            }
            if (ChainHeal.KnownSpell && ChainHeal.IsSpellUsable && ObjectManager.Me.HealthPercent < 80
                && _mySettings.UseChainHeal)
            {
                ChainHeal.Launch();
                return;
            }
            if (HealingStreamTotem.KnownSpell && HealingStreamTotem.IsSpellUsable &&
                ObjectManager.Me.HealthPercent < 90
                && WaterTotemReady() && _mySettings.UseHealingStreamTotem)
            {
                HealingStreamTotem.Launch();
            }
        }

        private void Decast()
        {
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && _mySettings.UseWindShear
                && WindShear.KnownSpell && WindShear.IsSpellUsable && WindShear.IsHostileDistanceGood)
            {
                WindShear.Launch();
                return;
            }
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8
                && ObjectManager.Me.HealthPercent <= _mySettings.UseArcaneTorrentForDecastAtPercentage
                && _mySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast &&
                ObjectManager.Target.IsTargetingMe)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && _mySettings.UseGroundingTotem
                && GroundingTotem.KnownSpell && GroundingTotem.IsSpellUsable && AirTotemReady())
            {
                GroundingTotem.Launch();
                return;
            }
            if (ObjectManager.Target.GetMove && !FrostShock.TargetHaveBuff && _mySettings.UseFrostShock
                && FrostShock.KnownSpell && FrostShock.IsSpellUsable && FrostShock.IsHostileDistanceGood)
            {
                FrostShock.Launch();
                return;
            }
            if (ObjectManager.Target.GetMove && _mySettings.UseEarthbindTotem && EarthTotemReady()
                && EarthbindTotem.KnownSpell && EarthbindTotem.IsSpellUsable && EarthbindTotem.IsHostileDistanceGood)
            {
                EarthbindTotem.Launch();
            }
        }

        private void DPSBurst()
        {
            if (_mySettings.UseTrinketOne && !ItemsManager.IsItemOnCooldown(_firstTrinket.Entry) && ItemsManager.IsUsableItemById(_firstTrinket.Entry))
            {
                ItemsManager.UseItem(_firstTrinket.Name);
                Logging.WriteFight("Use First Trinket Slot");
            }

            if (_mySettings.UseTrinketTwo && !ItemsManager.IsItemOnCooldown(_secondTrinket.Entry) && ItemsManager.IsUsableItemById(_secondTrinket.Entry))
            {
                ItemsManager.UseItem(_secondTrinket.Name);
                Logging.WriteFight("Use Second Trinket Slot");
                return;
            }
            if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                && _mySettings.UseBerserking)
            {
                Berserking.Launch();
                return;
            }
            if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 30
                && _mySettings.UseBloodFury)
            {
                BloodFury.Launch();
                return;
            }
            if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                && _mySettings.UseLifeblood)
            {
                Lifeblood.Launch();
                return;
            }
            if (_engineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                && _mySettings.UseEngGlove)
            {
                Logging.WriteFight("Use Engineering Gloves.");
                Lua.RunMacroText("/use 10");
                _engineeringTimer = new Timer(1000*60);
                return;
            }
            if (UnleashElements.KnownSpell && UnleashElements.IsSpellUsable && UnleashedFury.KnownSpell
                && _mySettings.UseUnleashElements && UnleashElements.IsHostileDistanceGood)
            {
                UnleashElements.Launch();
                return;
            }
            if (ElementalBlast.KnownSpell && ElementalBlast.IsSpellUsable
                && _mySettings.UseElementalBlast && ElementalBlast.IsHostileDistanceGood)
            {
                ElementalBlast.Launch();
                return;
            }
            if (Ascendance.KnownSpell && Ascendance.IsSpellUsable
                && _mySettings.UseAscendance && ObjectManager.Target.GetDistance < 30)
            {
                Ascendance.Launch();
                return;
            }
            if (FireElementalTotem.KnownSpell && FireElementalTotem.IsSpellUsable
                && _mySettings.UseFireElementalTotem && ObjectManager.Target.GetDistance < 30)
            {
                FireElementalTotem.Launch();
                return;
            }
            if (StormlashTotem.KnownSpell && AirTotemReady()
                && _mySettings.UseStormlashTotem && ObjectManager.Target.GetDistance < 30)
            {
                if (!StormlashTotem.IsSpellUsable && _mySettings.UseCalloftheElements
                    && CalloftheElements.KnownSpell && CalloftheElements.IsSpellUsable)
                {
                    CalloftheElements.Launch();
                    Thread.Sleep(200);
                }

                if (StormlashTotem.IsSpellUsable)
                    StormlashTotem.Launch();
                return;
            }
            if (FeralSpirit.KnownSpell && FeralSpirit.IsSpellUsable
                && _mySettings.UseFeralSpirit && ObjectManager.Target.GetDistance < 30)
            {
                FeralSpirit.Launch();
                return;
            }
            if (Bloodlust.KnownSpell && Bloodlust.IsSpellUsable && _mySettings.UseBloodlustHeroism
                && ObjectManager.Target.GetDistance < 30 && !ObjectManager.Me.HaveBuff(57724))
            {
                Bloodlust.Launch();
                return;
            }
            if (Heroism.KnownSpell && Heroism.IsSpellUsable && _mySettings.UseBloodlustHeroism
                && ObjectManager.Target.GetDistance < 30 && !ObjectManager.Me.HaveBuff(57723))
            {
                Heroism.Launch();
                return;
            }
            if (ElementalMastery.KnownSpell && ElementalMastery.IsSpellUsable
                && !ObjectManager.Me.HaveBuff(2825) && _mySettings.UseElementalMastery
                && !ObjectManager.Me.HaveBuff(32182))
            {
                ElementalMastery.Launch();
            }
        }

        private void DPSCycle()
        {
            if (EarthElementalTotem.KnownSpell && EarthElementalTotem.IsSpellUsable
                && ObjectManager.GetNumberAttackPlayer() > 3 && _mySettings.UseEarthElementalTotem)
            {
                EarthElementalTotem.Launch();
                return;
            }
            if (ObjectManager.GetNumberAttackPlayer() > 5 && MagmaTotem.KnownSpell
                && MagmaTotem.IsSpellUsable && _mySettings.UseMagmaTotem
                && !FireElementalTotem.CreatedBySpell)
            {
                MagmaTotem.Launch();
                return;
            }
            if (SearingTotem.KnownSpell && SearingTotem.IsSpellUsable && _mySettings.UseSearingTotem
                && FireTotemReady() && !SearingTotem.CreatedBySpellInRange(25) && ObjectManager.Target.GetDistance < 31)
            {
                SearingTotem.Launch();
                return;
            }
            if (ObjectManager.GetNumberAttackPlayer() > 2 && ChainLightning.KnownSpell
                && ChainLightning.IsSpellUsable && ChainLightning.IsHostileDistanceGood
                && _mySettings.UseChainLightning && ObjectManager.Me.BuffStack(53817) == 5)
            {
                ChainLightning.Launch();
                return;
            }
            if (LightningBolt.IsHostileDistanceGood && LightningBolt.KnownSpell && LightningBolt.IsSpellUsable
                && _mySettings.UseLightningBolt && ObjectManager.Me.BuffStack(53817) == 5)
            {
                LightningBolt.Launch();
                return;
            }
            if (FlameShock.IsSpellUsable && FlameShock.IsHostileDistanceGood && FlameShock.KnownSpell
                && _mySettings.UseFlameShock && (!FlameShock.TargetHaveBuff || _flameShockTimer.IsReady))
            {
                if (UnleashElements.KnownSpell && UnleashElements.IsSpellUsable && UnleashElements.IsHostileDistanceGood
                    && _mySettings.UseUnleashElements)
                {
                    UnleashElements.Launch();
                    Thread.Sleep(200);
                }
                FlameShock.Launch();
                _flameShockTimer = new Timer(1000*27);
                return;
            }
            if (FireNova.KnownSpell && FireNova.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 2
                && _mySettings.UseFireNova)
            {
                FireNova.Launch();
                return;
            }
            // Blizzard API Calls for Stormstrike using Primal Strike Function
            if (PrimalStrike.KnownSpell && PrimalStrike.IsSpellUsable && PrimalStrike.IsHostileDistanceGood
                && _mySettings.UseStormstrike)
            {
                PrimalStrike.Launch();
                return;
            }
            if (LavaLash.KnownSpell && LavaLash.IsSpellUsable && LavaLash.IsHostileDistanceGood
                && _mySettings.UseLavaLash)
            {
                LavaLash.Launch();
                return;
            }
            if (UnleashElements.KnownSpell && UnleashElements.IsSpellUsable && UnleashElements.IsHostileDistanceGood
                && _mySettings.UseUnleashElements)
            {
                UnleashElements.Launch();
                return;
            }
            if (EarthShock.IsSpellUsable && EarthShock.KnownSpell && EarthShock.IsHostileDistanceGood
                && FlameShock.TargetHaveBuff && _mySettings.UseEarthShock)
            {
                EarthShock.Launch();
                return;
            }
            if (ObjectManager.GetNumberAttackPlayer() > 2 && ChainLightning.KnownSpell
                && ChainLightning.IsSpellUsable && ChainLightning.IsHostileDistanceGood
                && _mySettings.UseChainLightning && ObjectManager.Me.BuffStack(53817) > 0)
            {
                if (AncestralSwiftness.KnownSpell && AncestralSwiftness.IsSpellUsable
                    && _mySettings.UseAncestralSwiftness)
                {
                    AncestralSwiftness.Launch();
                    Thread.Sleep(200);
                }
                ChainLightning.Launch();
                return;
            }
            if (LightningBolt.IsHostileDistanceGood && LightningBolt.KnownSpell && LightningBolt.IsSpellUsable
                && _mySettings.UseLightningBolt && ObjectManager.Me.BuffStack(53817) > 0)
            {
                if (AncestralSwiftness.KnownSpell && AncestralSwiftness.IsSpellUsable
                    && _mySettings.UseAncestralSwiftness)
                {
                    AncestralSwiftness.Launch();
                    Thread.Sleep(200);
                }
                LightningBolt.Launch();
                return;
            }
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell
                && _mySettings.UseArcaneTorrentForResource)
            {
                ArcaneTorrent.Launch();
            }
        }

        private bool FireTotemReady()
        {
            if (FireElementalTotem.CreatedBySpell || MagmaTotem.CreatedBySpell)
                return false;
            return true;
        }

        private bool EarthTotemReady()
        {
            if (EarthbindTotem.CreatedBySpell || EarthElementalTotem.CreatedBySpell
                || StoneBulwarkTotem.CreatedBySpell)
                return false;
            return true;
        }

        private bool WaterTotemReady()
        {
            if (HealingStreamTotem.CreatedBySpell || HealingTideTotem.CreatedBySpell)
                return false;
            return true;
        }

        private bool AirTotemReady()
        {
            if (CapacitorTotem.CreatedBySpell || GroundingTotem.CreatedBySpell
                || StormlashTotem.CreatedBySpell)
                return false;
            return true;
        }

        private bool TotemicRecallReady()
        {
            if (FireElementalTotem.CreatedBySpell)
                return false;
            if (EarthElementalTotem.CreatedBySpell)
                return false;
            if (SearingTotem.CreatedBySpell)
                return true;
            if (FireTotemReady() && EarthTotemReady() && WaterTotemReady() && AirTotemReady())
                return false;
            return true;
        }

        private void Patrolling()
        {
            if (!ObjectManager.Me.IsMounted)
            {
                Buff();
                Heal();
            }
        }

        #region Nested type: ShamanEnhancementSettings

        [Serializable]
        public class ShamanEnhancementSettings : Settings
        {
            public bool DoAvoidMelee = false;
            public int DoAvoidMeleeDistance = 0;
            public bool UseAlchFlask = true;
            public bool UseAncestralGuidance = true;
            public bool UseAncestralSwiftness = true;
            public bool UseArcaneTorrentForDecast = true;
            public int UseArcaneTorrentForDecastAtPercentage = 100;
            public bool UseArcaneTorrentForResource = true;
            public int UseArcaneTorrentForResourceAtPercentage = 80;
            public bool UseAscendance = true;
            public bool UseAstralShift = true;
            public bool UseBerserking = true;
            public bool UseBloodFury = true;
            public bool UseBloodlustHeroism = true;
            public bool UseCalloftheElements = true;
            public bool UseCapacitorTotem = true;
            public bool UseChainHeal = false;
            public bool UseChainLightning = true;
            public bool UseEarthElementalTotem = true;
            public bool UseEarthShock = true;
            public bool UseEarthbindTotem = false;
            public bool UseElementalBlast = true;
            public bool UseElementalMastery = true;
            public bool UseEngGlove = true;
            public bool UseFeralSpirit = true;
            public bool UseFireElementalTotem = true;
            public bool UseFireNova = true;
            public bool UseFlameShock = true;
            public bool UseFlametongueWeapon = true;
            public bool UseFrostShock = false;
            public bool UseFrostbrandWeapon = false;
            public bool UseGhostWolf = true;
            public bool UseGiftoftheNaaru = true;
            public int UseGiftoftheNaaruAtPercentage = 80;
            public bool UseGroundingTotem = true;
            public bool UseHealingRain = true;
            public bool UseHealingStreamTotem = true;
            public bool UseHealingSurge = true;
            public bool UseHealingTideTotem = true;
            public bool UseLavaLash = true;
            public bool UseLifeblood = true;
            public bool UseLightningBolt = true;
            public bool UseLightningShield = true;
            public bool UseLowCombat = true;
            public bool UseMagmaTotem = true;
            public bool UseRockbiterWeapon = false;
            public bool UseSearingTotem = true;
            public bool UseShamanisticRage = true;
            public bool UseSpiritwalkersGrace = true;
            public bool UseStoneBulwarkTotem = true;
            public bool UseStoneform = true;
            public int UseStoneformAtPercentage = 80;
            public bool UseStormlashTotem = true;
            public bool UseStormstrike = true;
            public bool UseTotemicProjection = true;
            public bool UseTotemicRecall = true;
            public bool UseTrinketOne = true;
            public bool UseTrinketTwo = true;
            public bool UseUnleashElements = true;
            public bool UseWarStomp = true;
            public int UseWarStompAtPercentage = 80;
            public bool UseWaterShield = true;
            public bool UseWaterWalking = true;
            public bool UseWindShear = true;
            public bool UseWindfuryWeapon = true;

            public ShamanEnhancementSettings()
            {
                ConfigWinForm(new Point(500, 400), "Shaman Enhancement Settings");
                /* Professions & Racials */
                AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
                AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
                AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
                AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
                AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
                AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
                /* Shaman Buffs */
                AddControlInWinForm("Use Flametongue Weapon", "UseFlametongueWeapon", "Shaman Buffs");
                AddControlInWinForm("Use Frostbrand Weapon", "UseFrostbrandWeapon", "Shaman Buffs");
                AddControlInWinForm("Use Ghost Wolf", "UseGhostWolf", "Shaman Buffs");
                AddControlInWinForm("Use Lightning Shield", "UseLightningShield", "Shaman Buffs");
                AddControlInWinForm("Use Rockbiter Weapon", "UseRockbiterWeapon", "Shaman Buffs");
                AddControlInWinForm("Use Spiritwalker's Grace", "UseSpiritwalkersGrace", "Shaman Buffs");
                AddControlInWinForm("Use Water Shield", "UseWaterShield", "Shaman Buffs");
                AddControlInWinForm("Use Water Walking", "UseWaterWalking", "Shaman Buffs");
                AddControlInWinForm("Use Windfury Weapon", "UseWindfuryWeapon", "Shaman Buffs");
                /* Offensive Spell */
                AddControlInWinForm("Use Chain Lightning", "UseChainLightning", "Offensive Spell");
                AddControlInWinForm("Use Earth Shock", "UseEarthShock", "Offensive Spell");
                AddControlInWinForm("Use Fire Nova", "UseFireNova", "Offensive Spell");
                AddControlInWinForm("Use Flame Shock", "UseFlameShock", "Offensive Spell");
                AddControlInWinForm("Use Frost Shock", "UseFrostShock", "Offensive Spell");
                AddControlInWinForm("Use Lava Lash", "UseLavaLash", "Offensive Spell");
                AddControlInWinForm("Use Lightning Bolt", "UseLightningBolt", "Offensive Spell");
                AddControlInWinForm("Use Magma Totem", "UseMagmaTotem", "Offensive Spell");
                AddControlInWinForm("Use Searing Totem", "UseSearingTotem", "Offensive Spell");
                AddControlInWinForm("Use Stormstrike", "UseStormstrike", "Offensive Spell");
                /* Offensive Cooldown */
                AddControlInWinForm("Use Ancestral Swiftness", "UseAncestralSwiftness", "Offensive Cooldown");
                AddControlInWinForm("Use Ascendance", "UseAscendance", "Offensive Cooldown");
                AddControlInWinForm("Use Bloodlust / Heroism", "UseBloodlustHeroism", "Offensive Cooldown");
                AddControlInWinForm("Use Call of the Elements", "UseCalloftheElements", "Offensive Cooldown");
                AddControlInWinForm("Use Earth Elemental Totem", "UseEarthElementalTotem", "Offensive Cooldown");
                AddControlInWinForm("Use Elemental Blast", "UseElementalBlast", "Offensive Cooldown");
                AddControlInWinForm("Use Elemental Mastery", "UseElementalMastery", "Offensive Cooldown");
                AddControlInWinForm("Use Feral Spirit", "UseFeralSpirit", "Offensive Cooldown");
                AddControlInWinForm("Use Fire Elemental Totem", "UseFireElementalTotem", "Offensive Cooldown");
                AddControlInWinForm("Use Stormlash Totem", "UseStormlashTotem", "Offensive Cooldown");
                AddControlInWinForm("Use Totemic Projection", "UseTotemicProjection", "Offensive Cooldown");
                AddControlInWinForm("Use Unleash Elements", "UseUnleashElements", "Offensive Cooldown");
                /* Defensive Cooldown */
                AddControlInWinForm("Use Astral Shift", "UseAstralShift", "Defensive Cooldown");
                AddControlInWinForm("Use Capacitor Totem", "UseCapacitorTotem", "Defensive Cooldown");
                AddControlInWinForm("Use Earthbind Totem", "UseEarthbindTotem", "Defensive Cooldown");
                AddControlInWinForm("Use Grounding Totem", "UseGroundingTotem", "Defensive Cooldown");
                AddControlInWinForm("Use Shamanistic Rage", "UseShamanisticRage", "Defensive Cooldown");
                AddControlInWinForm("Use StoneBulwark Totem", "UseStoneBulwarkTotem", "Defensive Cooldown");
                AddControlInWinForm("Use Wind Shear", "UseWindShear", "Defensive Cooldown");
                /* Healing Spell */
                AddControlInWinForm("Use Ancestral Guidance", "UseAncestralGuidance", "Healing Spell");
                AddControlInWinForm("Use Chain Heal", "UseChainHeal", "Healing Spell");
                AddControlInWinForm("Use Healing Rain", "UseHealingRain", "Healing Spell");
                AddControlInWinForm("Use Healing Surge", "UseHealingSurge", "Healing Spell");
                AddControlInWinForm("Use Healing Stream Totem", "UseHealingStreamTotem", "Healing Spell");
                AddControlInWinForm("Use Healing Tide Totem", "UsHealingTideTotem", "Healing Spell");
                AddControlInWinForm("Use Totemic Recall", "UseTotemicRecall", "Healing Spell");
                /* Game Settings */
                AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
                AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
                AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
                AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
                AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
                AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
                AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
            }

            public static ShamanEnhancementSettings currentSetting { get; set; }

            public static ShamanEnhancementSettings GetSettings()
            {
                string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Shaman_Enhancement.xml";
                if (File.Exists(currentSettingsFile))
                {
                    return
                        currentSetting = Load<ShamanEnhancementSettings>(currentSettingsFile);
                }
                return new ShamanEnhancementSettings();
            }
        }

        #endregion
    }

    public class ShamanRestoration
    {
        private readonly ShamanRestorationSettings _mySettings = ShamanRestorationSettings.GetSettings();

        #region General Timers & Variables

        private readonly WoWItem _firstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
        private readonly WoWItem _secondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);
        private Timer _engineeringTimer = new Timer(0);
        public int LC = 0;
        private Timer _onCd = new Timer(0);

        #endregion

        #region Professions & Racials

        public readonly Spell Alchemy = new Spell("Alchemy");
        public readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
        public readonly Spell Berserking = new Spell("Berserking");
        public readonly Spell BloodFury = new Spell("Blood Fury");
        public readonly Spell Engineering = new Spell("Engineering");
        public readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
        public readonly Spell Lifeblood = new Spell("Lifeblood");
        public readonly Spell Stoneform = new Spell("Stoneform");
        public readonly Spell WarStomp = new Spell("War Stomp");

        #endregion

        #region Shaman Buffs

        public readonly Spell EarthShield = new Spell("Earth Shield");
        public readonly Spell EarthlivingWeapon = new Spell("Earthliving Weapon");
        public readonly Spell FlametongueWeapon = new Spell("Flametongue Weapon");
        public readonly Spell FrostbrandWeapon = new Spell("Frostbrand Weapon");
        public readonly Spell GhostWolf = new Spell("Ghost Wolf");
        public readonly Spell LightningShield = new Spell("Lightning Shield");
        public readonly Spell RockbiterWeapon = new Spell("Rockbiter Weapon");
        public readonly Spell SpiritwalkersGrace = new Spell("Spiritwalker's Grace");
        public readonly Spell WaterShield = new Spell("Water Shield");
        public readonly Spell WaterWalking = new Spell("Water Walking");
        private Timer _waterWalkingTimer = new Timer(0);

        #endregion

        #region Offensive Spell

        public readonly Spell ChainLightning = new Spell("Chain Lightning");
        public readonly Spell EarthShock = new Spell("Earth Shock");
        public readonly Spell FlameShock = new Spell("Flame Shock");
        public readonly Spell FrostShock = new Spell("Frost Shock");
        public readonly Spell LavaBurst = new Spell("Lava Burst");
        public readonly Spell LightningBolt = new Spell("Lightning Bolt");
        public readonly Spell MagmaTotem = new Spell("Magma Totem");
        public readonly Spell PrimalStrike = new Spell("Primal Strike");
        public readonly Spell SearingTotem = new Spell("Searing Totem");
        private Timer _flameShockTimer = new Timer(0);

        #endregion

        #region Offensive Cooldown

        public readonly Spell AncestralSwiftness = new Spell("Ancestral Swiftness");
        public readonly Spell Ascendance = new Spell("Ascendance");
        public readonly Spell Bloodlust = new Spell("Bloodlust");
        public readonly Spell CalloftheElements = new Spell("Call of the Elements");
        public readonly Spell EarthElementalTotem = new Spell("Earth Elemental Totem");
        public readonly Spell ElementalBlast = new Spell("Elemental Blast");
        public readonly Spell ElementalMastery = new Spell("Elemental Mastery");
        public readonly Spell FireElementalTotem = new Spell("Fire Elemental Totem");
        public readonly Spell Heroism = new Spell("Heroism");
        public readonly Spell StormlashTotem = new Spell("Stormlash Totem");
        public readonly Spell TotemicProjection = new Spell("Totemic Projection");
        public readonly Spell UnleashElements = new Spell("Unleash Elements");
        public readonly Spell UnleashedFury = new Spell("Unleashed Fury");

        #endregion

        #region Defensive Cooldown

        public readonly Spell AstralShift = new Spell("Astral Shift");
        public readonly Spell CapacitorTotem = new Spell("Capacitor Totem");
        public readonly Spell EarthbindTotem = new Spell("Earthbind Totem");
        public readonly Spell GroundingTotem = new Spell("Grounding Totem");
        public readonly Spell StoneBulwarkTotem = new Spell("Stone Bulwark Totem");
        public readonly Spell WindShear = new Spell("Wind Shear");

        #endregion

        #region Healing Spell

        public readonly Spell AncestralGuidance = new Spell("Ancestral Guidance");
        public readonly Spell ChainHeal = new Spell("Chain Heal");
        public readonly Spell GreaterHealingWave = new Spell("Greater Healing Wave");
        public readonly Spell HealingRain = new Spell("Healing Rain");
        public readonly Spell HealingStreamTotem = new Spell("Healing Stream Totem");
        public readonly Spell HealingSurge = new Spell("Healing Surge");
        public readonly Spell HealingTideTotem = new Spell("Healing Tide Totem");
        public readonly Spell HealingWave = new Spell("HealingWave");
        public readonly Spell ManaTideTotem = new Spell("Mana Tide Totem");
        public readonly Spell Riptide = new Spell("Riptide");
        public readonly Spell SpiritLinkTotem = new Spell("Spirit Link Totem");
        public readonly Spell TotemicRecall = new Spell("Totemic Recall");

        #endregion

        public ShamanRestoration()
        {
            Main.InternalRange = 30.0f;
            UInt64 lastTarget = 0;

            while (Main.InternalLoop)
            {
                try
                {
                    if (!ObjectManager.Me.IsDeadMe)
                    {
                        if (!ObjectManager.Me.IsMounted)
                        {
                            if (Fight.InFight && ObjectManager.Me.Target > 0)
                            {
                                if (ObjectManager.Me.Target != lastTarget
                                    && (FlameShock.IsHostileDistanceGood || EarthShock.IsHostileDistanceGood))
                                {
                                    Pull();
                                    lastTarget = ObjectManager.Me.Target;
                                }

                                if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                    && _mySettings.UseLowCombat)
                                {
                                    LC = 1;
                                    if (ObjectManager.Target.GetDistance < 41)
                                        LowCombat();
                                }
                                else
                                {
                                    LC = 0;
                                    if (ObjectManager.Target.GetDistance < 41)
                                        Combat();
                                }
                                break;
                            }
                            if (!ObjectManager.Me.IsCast)
                                Patrolling();
                        }
                    }
                    else
                        Thread.Sleep(500);
                }
                catch
                {
                }
                Thread.Sleep(150);
            }
        }

        private void Pull()
        {
            if (TotemicProjection.KnownSpell && TotemicProjection.IsSpellUsable && _mySettings.UseTotemicProjection)
                TotemicProjection.Launch();

            if (FlameShock.KnownSpell && FlameShock.IsSpellUsable && FlameShock.IsHostileDistanceGood
                && _mySettings.UseFlameShock && LC != 1)
            {
                FlameShock.Launch();
                return;
            }
            else
            {
                if (EarthShock.KnownSpell && EarthShock.IsSpellUsable && EarthShock.IsHostileDistanceGood
                    && _mySettings.UseEarthShock)
                {
                    EarthShock.Launch();
                    return;
                }
            }
        }

        private void LowCombat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            DefenseCycle();
            Heal();

            if (EarthShock.KnownSpell && EarthShock.IsSpellUsable && EarthShock.IsHostileDistanceGood
                && _mySettings.UseEarthShock)
            {
                EarthShock.Launch();
                return;
            }
            if (LavaBurst.KnownSpell && LavaBurst.IsSpellUsable && LavaBurst.IsHostileDistanceGood
                && _mySettings.UseLavaBurst)
            {
                LavaBurst.Launch();
                return;
            }
            if (ChainLightning.KnownSpell && ChainLightning.IsSpellUsable && ChainLightning.IsHostileDistanceGood
                && _mySettings.UseChainLightning)
            {
                ChainLightning.Launch();
                return;
            }
            if (SearingTotem.KnownSpell && SearingTotem.IsSpellUsable && _mySettings.UseSearingTotem
                && FireTotemReady() && !SearingTotem.CreatedBySpellInRange(25) && ObjectManager.Target.GetDistance < 31)
            {
                SearingTotem.Launch();
                return;
            }
            if (MagmaTotem.KnownSpell && MagmaTotem.IsSpellUsable && ObjectManager.Target.GetDistance < 8
                && _mySettings.UseMagmaTotem && FireTotemReady())
            {
                MagmaTotem.Launch();
            }
        }

        private void Combat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            if (_onCd.IsReady)
                DefenseCycle();
            DPSCycle();
            Heal();
            Decast();
            DPSCycle();
            DPSBurst();
            DPSCycle();
        }

        private void Buff()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (WaterWalking.IsSpellUsable && WaterWalking.KnownSpell &&
                (!WaterWalking.HaveBuff || _waterWalkingTimer.IsReady)
                && !ObjectManager.Me.InCombat && _mySettings.UseWaterWalking)
            {
                WaterWalking.Launch();
                _waterWalkingTimer = new Timer(1000*60*9);
                return;
            }
            if ((ObjectManager.Me.ManaPercentage < 5 && WaterShield.KnownSpell && WaterShield.IsSpellUsable
                 && _mySettings.UseWaterShield && !WaterShield.HaveBuff)
                || (!_mySettings.UseLightningShield && !_mySettings.UseEarthShield))
            {
                WaterShield.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 50 && EarthShield.KnownSpell && EarthShield.IsSpellUsable
                && _mySettings.UseEarthShield && !EarthShield.HaveBuff && ObjectManager.Me.ManaPercentage > 15
                || !_mySettings.UseLightningShield)
            {
                EarthShield.Launch();
                return;
            }
            if (LightningShield.KnownSpell && LightningShield.IsSpellUsable && !LightningShield.HaveBuff
                && _mySettings.UseLightningShield && ObjectManager.Me.ManaPercentage > 15
                && ObjectManager.Me.HealthPercent > 70)
            {
                LightningShield.Launch();
                return;
            }
            if (ObjectManager.Me.InCombat && SpiritwalkersGrace.IsSpellUsable
                && SpiritwalkersGrace.KnownSpell && _mySettings.UseSpiritwalkersGrace && ObjectManager.Me.GetMove)
            {
                SpiritwalkersGrace.Launch();
                return;
            }
            if (FlametongueWeapon.KnownSpell && FlametongueWeapon.IsSpellUsable && !ObjectManager.Me.HaveBuff(10400)
                && _mySettings.UseFlametongueWeapon)
            {
                FlametongueWeapon.Launch();
                return;
            }
            if (EarthlivingWeapon.KnownSpell && EarthlivingWeapon.IsSpellUsable &&
                !ObjectManager.Me.HaveBuff(52007)
                && _mySettings.UseEarthlivingWeapon && !_mySettings.UseFlametongueWeapon)
            {
                EarthlivingWeapon.Launch();
                return;
            }
            if (FrostbrandWeapon.KnownSpell && FrostbrandWeapon.IsSpellUsable &&
                !ObjectManager.Me.HaveBuff(8034)
                && _mySettings.UseFrostbrandWeapon && !_mySettings.UseFlametongueWeapon &&
                !_mySettings.UseEarthlivingWeapon)
            {
                FrostbrandWeapon.Launch();
                return;
            }
            if (RockbiterWeapon.KnownSpell && RockbiterWeapon.IsSpellUsable &&
                !ObjectManager.Me.HaveBuff(36494)
                && _mySettings.UseRockbiterWeapon && !_mySettings.UseFlametongueWeapon
                && !_mySettings.UseFrostbrandWeapon && !_mySettings.UseEarthlivingWeapon)
            {
                RockbiterWeapon.Launch();
                return;
            }

            if (!ObjectManager.Me.InCombat && GhostWolf.IsSpellUsable && GhostWolf.KnownSpell
                && _mySettings.UseGhostWolf && ObjectManager.Me.GetMove && !GhostWolf.HaveBuff
                && ObjectManager.Target.GetDistance > 50)
            {
                GhostWolf.Launch();
                return;
            }

            if (_mySettings.UseAlchFlask && !ObjectManager.Me.HaveBuff(79638) && !ObjectManager.Me.HaveBuff(79640) && !ObjectManager.Me.HaveBuff(79639)
                && !ItemsManager.IsItemOnCooldown(75525) && ItemsManager.GetItemCountByIdLUA(75525) > 0)
            {
                ItemsManager.UseItem(75525);
            }
        }

        private void AvoidMelee()
        {
            if (ObjectManager.Target.GetDistance < _mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
            {
                Logging.WriteFight("Too Close. Moving Back");
                var maxTimeTimer = new Timer(1000*2);
                MovementsAction.MoveBackward(true);
                while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                    Thread.Sleep(300);
                MovementsAction.MoveBackward(false);
                if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
                {
                    MovementsAction.MoveForward(true);
                    Thread.Sleep(1000);
                    MovementsAction.MoveForward(false);
                    MovementManager.Face(ObjectManager.Target.Position);
                }
            }
        }

        private void DefenseCycle()
        {
            if (ObjectManager.Me.HealthPercent < 50 && CapacitorTotem.KnownSpell && CapacitorTotem.IsSpellUsable
                && AirTotemReady() && _mySettings.UseCapacitorTotem)
            {
                CapacitorTotem.Launch();
                _onCd = new Timer(1000*5);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 50 && StoneBulwarkTotem.KnownSpell &&
                StoneBulwarkTotem.IsSpellUsable
                && EarthTotemReady() && _mySettings.UseStoneBulwarkTotem)
            {
                StoneBulwarkTotem.Launch();
                _onCd = new Timer(1000*10);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 70 && SpiritLinkTotem.KnownSpell &&
                SpiritLinkTotem.IsSpellUsable
                && AirTotemReady() && _mySettings.UseSpiritLinkTotem)
            {
                SpiritLinkTotem.Launch();
                _onCd = new Timer(1000*6);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable &&
                WarStomp.KnownSpell
                && _mySettings.UseWarStomp)
            {
                WarStomp.Launch();
                _onCd = new Timer(1000*2);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable &&
                Stoneform.KnownSpell
                && _mySettings.UseStoneform)
            {
                Stoneform.Launch();
                _onCd = new Timer(1000*8);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 70 && AstralShift.KnownSpell && AstralShift.IsSpellUsable
                && _mySettings.UseAstralShift)
            {
                AstralShift.Launch();
                _onCd = new Timer(1000*6);
            }
        }

        private void Heal()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell &&
                ObjectManager.Me.ManaPercentage <= _mySettings.UseArcaneTorrentForResourceAtPercentage
                && _mySettings.UseArcaneTorrentForResource)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (ObjectManager.Me.ManaPercentage < 50 && TotemicRecall.KnownSpell && TotemicRecall.IsSpellUsable
                && _mySettings.UseTotemicRecall && !ObjectManager.Me.InCombat
                && TotemicRecallReady())
            {
                TotemicRecall.Launch();
                return;
            }
            if (ObjectManager.Me.ManaPercentage < 80 && ManaTideTotem.KnownSpell && ManaTideTotem.IsSpellUsable
                && _mySettings.UseManaTideTotem && WaterTotemReady())
            {
                ManaTideTotem.Launch();
                return;
            }

            if (ObjectManager.Me.HealthPercent < 95 && HealingSurge.KnownSpell && HealingSurge.IsSpellUsable
                && !ObjectManager.Me.InCombat && _mySettings.UseHealingSurge)
            {
                HealingSurge.Launch();
                while (ObjectManager.Me.IsCast)
                {
                    Thread.Sleep(200);
                }
                return;
            }
            if (HealingSurge.KnownSpell && HealingSurge.IsSpellUsable && ObjectManager.Me.HealthPercent < 50
                && _mySettings.UseHealingSurge)
            {
                HealingSurge.Launch();
                return;
            }
            if (GreaterHealingWave.KnownSpell && GreaterHealingWave.IsSpellUsable
                && ObjectManager.Me.HealthPercent < 60 && _mySettings.UseGreaterHealingWave)
            {
                GreaterHealingWave.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseGiftoftheNaaruAtPercentage &&
                GiftoftheNaaru.KnownSpell && GiftoftheNaaru.IsSpellUsable
                && _mySettings.UseGiftoftheNaaru)
            {
                GiftoftheNaaru.Launch();
                return;
            }
            if (HealingTideTotem.KnownSpell && HealingTideTotem.IsSpellUsable &&
                ObjectManager.Me.HealthPercent < 70
                && WaterTotemReady() && _mySettings.UseHealingTideTotem)
            {
                HealingTideTotem.Launch();
                return;
            }
            if (AncestralGuidance.KnownSpell && AncestralGuidance.IsSpellUsable &&
                ObjectManager.Me.HealthPercent < 70
                && _mySettings.UseAncestralGuidance)
            {
                AncestralGuidance.Launch();
                return;
            }
            if (ChainHeal.KnownSpell && ChainHeal.IsSpellUsable && ObjectManager.Me.HealthPercent < 80
                && _mySettings.UseChainHeal)
            {
                ChainHeal.Launch();
                return;
            }
            if (HealingStreamTotem.KnownSpell && HealingStreamTotem.IsSpellUsable &&
                ObjectManager.Me.HealthPercent < 90
                && WaterTotemReady() && _mySettings.UseHealingStreamTotem)
            {
                HealingStreamTotem.Launch();
                return;
            }
            if (Riptide.KnownSpell && Riptide.IsSpellUsable && ObjectManager.Me.HealthPercent < 90
                && _mySettings.UseRiptide && !Riptide.HaveBuff)
            {
                Riptide.Launch();
                return;
            }
            if (HealingWave.KnownSpell && HealingWave.IsSpellUsable && ObjectManager.Me.HealthPercent < 80
                && _mySettings.UseHealingWave)
            {
                HealingWave.Launch();
            }
        }

        private void Decast()
        {
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && _mySettings.UseWindShear
                && WindShear.KnownSpell && WindShear.IsSpellUsable && WindShear.IsHostileDistanceGood)
            {
                WindShear.Launch();
                return;
            }
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8
                && ObjectManager.Me.HealthPercent <= _mySettings.UseArcaneTorrentForDecastAtPercentage
                && _mySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast &&
                ObjectManager.Target.IsTargetingMe)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && _mySettings.UseGroundingTotem
                && GroundingTotem.KnownSpell && GroundingTotem.IsSpellUsable && AirTotemReady())
            {
                GroundingTotem.Launch();
                return;
            }

            if (ObjectManager.Target.GetMove && !FrostShock.TargetHaveBuff && _mySettings.UseFrostShock
                && FrostShock.KnownSpell && FrostShock.IsSpellUsable && FrostShock.IsHostileDistanceGood)
            {
                FrostShock.Launch();
                return;
            }
            if (ObjectManager.Target.GetMove && _mySettings.UseEarthbindTotem && EarthTotemReady()
                && EarthbindTotem.KnownSpell && EarthbindTotem.IsSpellUsable && EarthbindTotem.IsHostileDistanceGood)
            {
                EarthbindTotem.Launch();
            }
        }

        private void DPSBurst()
        {
            if (_mySettings.UseTrinketOne && !ItemsManager.IsItemOnCooldown(_firstTrinket.Entry) && ItemsManager.IsUsableItemById(_firstTrinket.Entry))
            {
                ItemsManager.UseItem(_firstTrinket.Name);
                Logging.WriteFight("Use First Trinket Slot");
            }

            if (_mySettings.UseTrinketTwo && !ItemsManager.IsItemOnCooldown(_secondTrinket.Entry) && ItemsManager.IsUsableItemById(_secondTrinket.Entry))
            {
                ItemsManager.UseItem(_secondTrinket.Name);
                Logging.WriteFight("Use Second Trinket Slot");
                return;
            }
            if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseBerserking)
            {
                Berserking.Launch();
                return;
            }
            if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseBloodFury)
            {
                BloodFury.Launch();
                return;
            }
            if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseLifeblood)
            {
                Lifeblood.Launch();
                return;
            }
            if (_engineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseEngGlove)
            {
                Logging.WriteFight("Use Engineering Gloves.");
                Lua.RunMacroText("/use 10");
                _engineeringTimer = new Timer(1000*60);
                return;
            }
            if (UnleashElements.KnownSpell && UnleashElements.IsSpellUsable && UnleashedFury.KnownSpell
                && _mySettings.UseUnleashElements && UnleashElements.IsHostileDistanceGood)
            {
                UnleashElements.Launch();
                return;
            }
            if (ElementalBlast.KnownSpell && ElementalBlast.IsSpellUsable
                && _mySettings.UseElementalBlast && ElementalBlast.IsHostileDistanceGood)
            {
                ElementalBlast.Launch();
                return;
            }
            if (Ascendance.KnownSpell && Ascendance.IsSpellUsable && ObjectManager.Me.HealthPercent < 80
                && _mySettings.UseAscendance && ObjectManager.Target.GetDistance < 41)
            {
                Ascendance.Launch();
                return;
            }
            if (FireElementalTotem.KnownSpell && FireElementalTotem.IsSpellUsable
                && _mySettings.UseFireElementalTotem && ObjectManager.Target.GetDistance < 41)
            {
                FireElementalTotem.Launch();
                return;
            }
            if (StormlashTotem.KnownSpell && AirTotemReady()
                && _mySettings.UseStormlashTotem && ObjectManager.Target.GetDistance < 41)
            {
                if (!StormlashTotem.IsSpellUsable && _mySettings.UseCalloftheElements
                    && CalloftheElements.KnownSpell && CalloftheElements.IsSpellUsable)
                {
                    CalloftheElements.Launch();
                    Thread.Sleep(200);
                }

                if (StormlashTotem.IsSpellUsable)
                    StormlashTotem.Launch();
                return;
            }
            if (Bloodlust.KnownSpell && Bloodlust.IsSpellUsable && _mySettings.UseBloodlustHeroism
                && ObjectManager.Target.GetDistance < 41 && !ObjectManager.Me.HaveBuff(57724))
            {
                Bloodlust.Launch();
                return;
            }
            if (Heroism.KnownSpell && Heroism.IsSpellUsable && _mySettings.UseBloodlustHeroism
                && ObjectManager.Target.GetDistance < 41 && !ObjectManager.Me.HaveBuff(57723))
            {
                Heroism.Launch();
                return;
            }
            if (ElementalMastery.KnownSpell && ElementalMastery.IsSpellUsable
                && !ObjectManager.Me.HaveBuff(2825) && _mySettings.UseElementalMastery
                && !ObjectManager.Me.HaveBuff(32182))
            {
                ElementalMastery.Launch();
            }
        }

        private void DPSCycle()
        {
            if (PrimalStrike.KnownSpell && PrimalStrike.IsSpellUsable && PrimalStrike.IsHostileDistanceGood
                && _mySettings.UsePrimalStrike && ObjectManager.Me.Level < 11)
            {
                PrimalStrike.Launch();
                return;
            }

            if (EarthElementalTotem.KnownSpell && EarthElementalTotem.IsSpellUsable
                && ObjectManager.GetNumberAttackPlayer() > 3 && _mySettings.UseEarthElementalTotem)
            {
                EarthElementalTotem.Launch();
                return;
            }
            if (FlameShock.IsSpellUsable && FlameShock.IsHostileDistanceGood && FlameShock.KnownSpell
                && _mySettings.UseFlameShock && (!FlameShock.TargetHaveBuff || _flameShockTimer.IsReady))
            {
                FlameShock.Launch();
                _flameShockTimer = new Timer(1000*27);
                return;
            }
            if (LavaBurst.KnownSpell && LavaBurst.IsSpellUsable && LavaBurst.IsHostileDistanceGood
                && _mySettings.UseLavaBurst && FlameShock.TargetHaveBuff)
            {
                LavaBurst.Launch();
                return;
            }
            if (EarthShock.IsSpellUsable && EarthShock.KnownSpell && EarthShock.IsHostileDistanceGood
                && _mySettings.UseEarthShock && FlameShock.TargetHaveBuff)
            {
                EarthShock.Launch();
                return;
            }
            if (ObjectManager.GetNumberAttackPlayer() > 1 && MagmaTotem.KnownSpell
                && MagmaTotem.IsSpellUsable && _mySettings.UseMagmaTotem
                && !FireElementalTotem.CreatedBySpell)
            {
                MagmaTotem.Launch();
                return;
            }
            if (SearingTotem.KnownSpell && SearingTotem.IsSpellUsable && _mySettings.UseSearingTotem
                && FireTotemReady() && !SearingTotem.CreatedBySpellInRange(25) && ObjectManager.Target.GetDistance < 31)
            {
                SearingTotem.Launch();
                return;
            }
            if (ObjectManager.GetNumberAttackPlayer() > 1 && ChainLightning.KnownSpell
                && ChainLightning.IsSpellUsable && ChainLightning.IsHostileDistanceGood
                && _mySettings.UseChainLightning && !ObjectManager.Me.HaveBuff(77762))
            {
                if (AncestralSwiftness.KnownSpell && AncestralSwiftness.IsSpellUsable
                    && _mySettings.UseAncestralSwiftness)
                {
                    AncestralSwiftness.Launch();
                    Thread.Sleep(200);
                }
                ChainLightning.Launch();
                return;
            }
            if (LightningBolt.IsHostileDistanceGood && LightningBolt.KnownSpell && LightningBolt.IsSpellUsable
                && _mySettings.UseLightningBolt && !ObjectManager.Me.HaveBuff(77762))
            {
                if (AncestralSwiftness.KnownSpell && AncestralSwiftness.IsSpellUsable
                    && _mySettings.UseAncestralSwiftness)
                {
                    AncestralSwiftness.Launch();
                    Thread.Sleep(200);
                }
                LightningBolt.Launch();
            }
        }

        private bool FireTotemReady()
        {
            return !FireElementalTotem.CreatedBySpell && !MagmaTotem.CreatedBySpell;
        }

        private bool EarthTotemReady()
        {
            return !EarthbindTotem.CreatedBySpell && !EarthElementalTotem.CreatedBySpell && !StoneBulwarkTotem.CreatedBySpell;
        }

        private bool WaterTotemReady()
        {
            return !HealingStreamTotem.CreatedBySpell && !HealingTideTotem.CreatedBySpell && !ManaTideTotem.CreatedBySpell;
        }

        private bool AirTotemReady()
        {
            return !CapacitorTotem.CreatedBySpell && !GroundingTotem.CreatedBySpell && !StormlashTotem.CreatedBySpell && !SpiritLinkTotem.CreatedBySpell;
        }

        private bool TotemicRecallReady()
        {
            if (FireElementalTotem.CreatedBySpell)
                return false;
            if (EarthElementalTotem.CreatedBySpell)
                return false;
            if (SearingTotem.CreatedBySpell)
                return true;
            if (FireTotemReady() && EarthTotemReady() && WaterTotemReady() && AirTotemReady())
                return false;
            return true;
        }

        private void Patrolling()
        {
            if (ObjectManager.Me.IsMounted) return;
            Buff();
            Heal();
        }

        #region Nested type: ShamanRestorationSettings

        [Serializable]
        public class ShamanRestorationSettings : Settings
        {
            public bool DoAvoidMelee = false;
            public int DoAvoidMeleeDistance = 0;
            public bool UseAlchFlask = true;
            public bool UseAncestralGuidance = true;
            public bool UseAncestralSwiftness = true;
            public bool UseArcaneTorrentForDecast = true;
            public int UseArcaneTorrentForDecastAtPercentage = 100;
            public bool UseArcaneTorrentForResource = true;
            public int UseArcaneTorrentForResourceAtPercentage = 80;
            public bool UseAscendance = true;
            public bool UseAstralShift = true;
            public bool UseBerserking = true;
            public bool UseBloodFury = true;
            public bool UseBloodlustHeroism = true;
            public bool UseCalloftheElements = true;
            public bool UseCapacitorTotem = true;
            public bool UseChainHeal = false;
            public bool UseChainLightning = true;
            public bool UseEarthElementalTotem = true;
            public bool UseEarthShield = true;
            public bool UseEarthShock = true;
            public bool UseEarthbindTotem = false;
            public bool UseEarthlivingWeapon = true;
            public bool UseElementalBlast = true;
            public bool UseElementalMastery = true;
            public bool UseEngGlove = true;
            public bool UseFireElementalTotem = true;
            public bool UseFlameShock = true;
            public bool UseFlametongueWeapon = true;
            public bool UseFrostShock = false;
            public bool UseFrostbrandWeapon = false;
            public bool UseGhostWolf = true;
            public bool UseGiftoftheNaaru = true;
            public int UseGiftoftheNaaruAtPercentage = 80;
            public bool UseGreaterHealingWave = true;
            public bool UseGroundingTotem = true;
            public bool UseHealingRain = true;
            public bool UseHealingStreamTotem = true;
            public bool UseHealingSurge = true;
            public bool UseHealingTideTotem = true;
            public bool UseHealingWave = false;
            public bool UseLavaBurst = true;
            public bool UseLifeblood = true;
            public bool UseLightningBolt = true;
            public bool UseLightningShield = true;
            public bool UseLowCombat = true;
            public bool UseMagmaTotem = true;
            public bool UseManaTideTotem = true;
            public bool UsePrimalStrike = true;
            public bool UseRiptide = true;
            public bool UseRockbiterWeapon = false;
            public bool UseSearingTotem = true;
            public bool UseSpiritLinkTotem = true;
            public bool UseSpiritwalkersGrace = true;
            public bool UseStoneBulwarkTotem = true;
            public bool UseStoneform = true;
            public int UseStoneformAtPercentage = 80;
            public bool UseStormlashTotem = true;
            public bool UseTotemicProjection = true;
            public bool UseTotemicRecall = true;
            public bool UseTrinketOne = true;
            public bool UseTrinketTwo = true;
            public bool UseUnleashElements = true;
            public bool UseWarStomp = true;
            public int UseWarStompAtPercentage = 80;
            public bool UseWaterShield = true;
            public bool UseWaterWalking = true;
            public bool UseWindShear = true;

            public ShamanRestorationSettings()
            {
                ConfigWinForm(new Point(500, 400), "Shaman Restoration Settings");
                /* Professions & Racials */
                AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
                AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
                AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
                AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
                AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
                AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
                /* Shaman Buffs */
                AddControlInWinForm("Use Earth Shield", "UseEarthShield", "Shaman Buffs");
                AddControlInWinForm("Use Earthliving Weapon", "UseEarthlivingWeapon", "Shaman Buffs");
                AddControlInWinForm("Use Flametongue Weapon", "UseFlametongueWeapon", "Shaman Buffs");
                AddControlInWinForm("Use Frostbrand Weapon", "UseFrostbrandWeapon", "Shaman Buffs");
                AddControlInWinForm("Use Ghost Wolf", "UseGhostWolf", "Shaman Buffs");
                AddControlInWinForm("Use Lightning Shield", "UseLightningShield", "Shaman Buffs");
                AddControlInWinForm("Use Rockbiter Weapon", "UseRockbiterWeapon", "Shaman Buffs");
                AddControlInWinForm("Use Spiritwalker's Grace", "UseSpiritwalkersGrace", "Shaman Buffs");
                AddControlInWinForm("Use Water Shield", "UseWaterShield", "Shaman Buffs");
                AddControlInWinForm("Use Water Walking", "UseWaterWalking", "Shaman Buffs");
                /* Offensive Spell */
                AddControlInWinForm("Use Chain Lightning", "UseChainLightning", "Offensive Spell");
                AddControlInWinForm("Use Earth Shock", "UseEarthShock", "Offensive Spell");
                AddControlInWinForm("Use Flame Shock", "UseFlameShock", "Offensive Spell");
                AddControlInWinForm("Use Frost Shock", "UseFrostShock", "Offensive Spell");
                AddControlInWinForm("Use Lava Burst", "UseLavaBurst", "Offensive Spell");
                AddControlInWinForm("Use Lightning Bolt", "UseLightningBolt", "Offensive Spell");
                AddControlInWinForm("Use Magma Totem", "UseMagmaTotem", "Offensive Spell");
                AddControlInWinForm("Use Searing Totem", "UseSearingTotem", "Offensive Spell");
                /* Offensive Cooldown */
                AddControlInWinForm("Use Ancestral Swiftness", "UseAncestralSwiftness", "Offensive Cooldown");
                AddControlInWinForm("Use Ascendance", "UseAscendance", "Offensive Cooldown");
                AddControlInWinForm("Use Bloodlust / Heroism", "UseBloodlustHeroism", "Offensive Cooldown");
                AddControlInWinForm("Use Call of the Elements", "UseCalloftheElements", "Offensive Cooldown");
                AddControlInWinForm("Use Earth Elemental Totem", "UseEarthElementalTotem", "Offensive Cooldown");
                AddControlInWinForm("Use Elemental Blast", "UseElementalBlast", "Offensive Cooldown");
                AddControlInWinForm("Use Elemental Mastery", "UseElementalMastery", "Offensive Cooldown");
                AddControlInWinForm("Use Fire Elemental Totem", "UseFireElementalTotem", "Offensive Cooldown");
                AddControlInWinForm("Use Stormlash Totem", "UseStormlashTotem", "Offensive Cooldown");
                AddControlInWinForm("Use Totemic Projection", "UseTotemicProjection", "Offensive Cooldown");
                AddControlInWinForm("Use Unleash Elements", "UseUnleashElements", "Offensive Cooldown");
                /* Defensive Cooldown */
                AddControlInWinForm("Use Astral Shift", "UseAstralShift", "Defensive Cooldown");
                AddControlInWinForm("Use Capacitor Totem", "UseCapacitorTotem", "Defensive Cooldown");
                AddControlInWinForm("Use Earthbind Totem", "UseEarthbindTotem", "Defensive Cooldown");
                AddControlInWinForm("Use Grounding Totem", "UseGroundingTotem", "Defensive Cooldown");
                AddControlInWinForm("Use StoneBulwark Totem", "UseStoneBulwarkTotem", "Defensive Cooldown");
                AddControlInWinForm("Use Wind Shear", "UseWindShear", "Defensive Cooldown");
                /* Healing Spell */
                AddControlInWinForm("Use Ancestral Guidance", "UseAncestralGuidance", "Healing Spell");
                AddControlInWinForm("Use Chain Heal", "UseChainHeal", "Healing Spell");
                AddControlInWinForm("Use Greater Healing Wave", "UseGreaterHealingWave", "Healing Spell");
                AddControlInWinForm("Use Healing Rain", "UseHealingRain", "Healing Spell");
                AddControlInWinForm("Use Healing Surge", "UseHealingSurge", "Healing Spell");
                AddControlInWinForm("Use Healing Stream Totem", "UseHealingStreamTotem", "Healing Spell");
                AddControlInWinForm("Use Healing Tide Totem", "UsHealingTideTotem", "Healing Spell");
                AddControlInWinForm("Use Healing Wave", "UseHealingWave", "Healing Spell");
                AddControlInWinForm("Use Mana Tide Totem", "UseManaTideTotem", "Healing Spell");
                AddControlInWinForm("Use Riptide", "UseRiptide", "Healing Spell");
                AddControlInWinForm("Use Spirit Link Totem", "UseSpiritLinkTotem", "Healing Spell");
                AddControlInWinForm("Use Totemic Recall", "UseTotemicRecall", "Healing Spell");
                /* Game Settings */
                AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
                AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
                AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
                AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
                AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
                AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
                AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
            }

            public static ShamanRestorationSettings CurrentSetting { get; set; }

            public static ShamanRestorationSettings GetSettings()
            {
                string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Shaman_Restoration.xml";
                if (File.Exists(currentSettingsFile))
                {
                    return
                        CurrentSetting = Load<ShamanRestorationSettings>(currentSettingsFile);
                }
                return new ShamanRestorationSettings();
            }
        }

        #endregion
    }

    public class ShamanElemental
    {
        private readonly ShamanElementalSettings _mySettings = ShamanElementalSettings.GetSettings();

        #region General Timers & Variables

        private readonly WoWItem _firstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
        private readonly WoWItem _secondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);
        private Timer _engineeringTimer = new Timer(0);
        public int LC = 0;
        private Timer _onCd = new Timer(0);

        #endregion

        #region Professions & Racials

        public readonly Spell Alchemy = new Spell("Alchemy");
        public readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
        public readonly Spell Berserking = new Spell("Berserking");
        public readonly Spell BloodFury = new Spell("Blood Fury");
        public readonly Spell Engineering = new Spell("Engineering");
        public readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
        public readonly Spell Lifeblood = new Spell("Lifeblood");
        public readonly Spell Stoneform = new Spell("Stoneform");
        public readonly Spell WarStomp = new Spell("War Stomp");

        #endregion

        #region Shaman Buffs

        public readonly Spell FlametongueWeapon = new Spell("Flametongue Weapon");
        public readonly Spell FrostbrandWeapon = new Spell("Frostbrand Weapon");
        public readonly Spell GhostWolf = new Spell("Ghost Wolf");
        public readonly Spell LightningShield = new Spell("Lightning Shield");
        public readonly Spell RockbiterWeapon = new Spell("Rockbiter Weapon");
        public readonly Spell SpiritwalkersGrace = new Spell("Spiritwalker's Grace");
        public readonly Spell WaterShield = new Spell("Water Shield");
        public readonly Spell WaterWalking = new Spell("Water Walking");
        private Timer _waterWalkingTimer = new Timer(0);

        #endregion

        #region Offensive Spell

        public readonly Spell ChainLightning = new Spell("Chain Lightning");
        public readonly Spell EarthShock = new Spell("Earth Shock");
        public readonly Spell Earthquake = new Spell("Earthquake");
        public readonly Spell FlameShock = new Spell("Flame Shock");
        public readonly Spell FrostShock = new Spell("Frost Shock");
        public readonly Spell LavaBurst = new Spell("Lava Burst");
        public readonly Spell LightningBolt = new Spell("Lightning Bolt");
        public readonly Spell MagmaTotem = new Spell("Magma Totem");
        public readonly Spell SearingTotem = new Spell("Searing Totem");
        public readonly Spell Thunderstorm = new Spell("Thunderstorm");
        private Timer _flameShockTimer = new Timer(0);

        #endregion

        #region Offensive Cooldown

        public readonly Spell AncestralSwiftness = new Spell("Ancestral Swiftness");
        public readonly Spell Ascendance = new Spell("Ascendance");
        public readonly Spell Bloodlust = new Spell("Bloodlust");
        public readonly Spell CalloftheElements = new Spell("Call of the Elements");
        public readonly Spell EarthElementalTotem = new Spell("Earth Elemental Totem");
        public readonly Spell ElementalBlast = new Spell("Elemental Blast");
        public readonly Spell ElementalMastery = new Spell("Elemental Mastery");
        public readonly Spell FireElementalTotem = new Spell("Fire Elemental Totem");
        public readonly Spell Heroism = new Spell("Heroism");
        public readonly Spell StormlashTotem = new Spell("Stormlash Totem");
        public readonly Spell TotemicProjection = new Spell("Totemic Projection");
        public readonly Spell UnleashElements = new Spell("Unleash Elements");
        public readonly Spell UnleashedFury = new Spell("Unleashed Fury");

        #endregion

        #region Defensive Cooldown

        public readonly Spell AstralShift = new Spell("Astral Shift");
        public readonly Spell CapacitorTotem = new Spell("Capacitor Totem");
        public readonly Spell EarthbindTotem = new Spell("Earthbind Totem");
        public readonly Spell GroundingTotem = new Spell("Grounding Totem");
        public readonly Spell StoneBulwarkTotem = new Spell("Stone Bulwark Totem");
        public readonly Spell WindShear = new Spell("Wind Shear");

        #endregion

        #region Healing Spell

        public readonly Spell AncestralGuidance = new Spell("Ancestral Guidance");
        public readonly Spell ChainHeal = new Spell("Chain Heal");
        public readonly Spell HealingRain = new Spell("Healing Rain");
        public readonly Spell HealingStreamTotem = new Spell("Healing Stream Totem");
        public readonly Spell HealingSurge = new Spell("Healing Surge");
        public readonly Spell HealingTideTotem = new Spell("Healing Tide Totem");
        public readonly Spell TotemicRecall = new Spell("Totemic Recall");

        #endregion

        public ShamanElemental()
        {
            Main.InternalRange = 30.0f;
            UInt64 lastTarget = 0;

            while (Main.InternalLoop)
            {
                try
                {
                    if (!ObjectManager.Me.IsDeadMe)
                    {
                        if (!ObjectManager.Me.IsMounted)
                        {
                            if (Fight.InFight && ObjectManager.Me.Target > 0)
                            {
                                if (ObjectManager.Me.Target != lastTarget && FlameShock.IsHostileDistanceGood)
                                {
                                    Pull();
                                    lastTarget = ObjectManager.Me.Target;
                                }

                                if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                    && _mySettings.UseLowCombat)
                                {
                                    LC = 1;
                                    if (ObjectManager.Target.GetDistance < 41)
                                        LowCombat();
                                }
                                else
                                {
                                    LC = 0;
                                    if (ObjectManager.Target.GetDistance < 41)
                                        Combat();
                                }
                                break;
                            }
                            if (!ObjectManager.Me.IsCast)
                                Patrolling();
                        }
                    }
                    else
                        Thread.Sleep(500);
                }
                catch
                {
                }
                Thread.Sleep(150);
            }
        }

        private void Pull()
        {
            if (TotemicProjection.KnownSpell && TotemicProjection.IsSpellUsable && _mySettings.UseTotemicProjection)
                TotemicProjection.Launch();

            if (FlameShock.KnownSpell && FlameShock.IsSpellUsable && FlameShock.IsHostileDistanceGood
                && _mySettings.UseFlameShock && LC != 1)
            {
                FlameShock.Launch();
                return;
            }
            if (EarthShock.KnownSpell && EarthShock.IsSpellUsable && EarthShock.IsHostileDistanceGood
                && _mySettings.UseEarthShock)
            {
                EarthShock.Launch();
                }
        }

        private void LowCombat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            DefenseCycle();
            Heal();

            if (EarthShock.KnownSpell && EarthShock.IsSpellUsable && EarthShock.IsHostileDistanceGood
                && _mySettings.UseEarthShock)
            {
                EarthShock.Launch();
                return;
            }
            if (LavaBurst.KnownSpell && LavaBurst.IsSpellUsable && LavaBurst.IsHostileDistanceGood
                && _mySettings.UseLavaBurst)
            {
                LavaBurst.Launch();
                return;
            }
            if (ChainLightning.KnownSpell && ChainLightning.IsSpellUsable && ChainLightning.IsHostileDistanceGood
                && _mySettings.UseChainLightning)
            {
                ChainLightning.Launch();
                return;
            }
            if (SearingTotem.KnownSpell && SearingTotem.IsSpellUsable && _mySettings.UseSearingTotem
                && FireTotemReady() && !SearingTotem.CreatedBySpellInRange(25) && ObjectManager.Target.GetDistance < 31)
            {
                SearingTotem.Launch();
                return;
            }
            if (MagmaTotem.KnownSpell && MagmaTotem.IsSpellUsable && ObjectManager.Target.GetDistance < 8
                && _mySettings.UseMagmaTotem && FireTotemReady())
            {
                MagmaTotem.Launch();
            }
        }

        private void Combat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            if (_onCd.IsReady)
                DefenseCycle();
            DPSCycle();
            Heal();
            Decast();
            DPSCycle();
            DPSBurst();
            DPSCycle();
        }

        private void Buff()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (WaterWalking.IsSpellUsable && WaterWalking.KnownSpell &&
                (!WaterWalking.HaveBuff || _waterWalkingTimer.IsReady)
                && !ObjectManager.Me.InCombat && _mySettings.UseWaterWalking)
            {
                WaterWalking.Launch();
                _waterWalkingTimer = new Timer(1000*60*9);
                return;
            }
            if ((ObjectManager.Me.ManaPercentage < 5 && WaterShield.KnownSpell && WaterShield.IsSpellUsable
                 && _mySettings.UseWaterShield && !WaterShield.HaveBuff) || !_mySettings.UseLightningShield)
            {
                WaterShield.Launch();
                return;
            }
            if (LightningShield.KnownSpell && LightningShield.IsSpellUsable && !LightningShield.HaveBuff
                && _mySettings.UseLightningShield && ObjectManager.Me.ManaPercentage > 15)
            {
                LightningShield.Launch();
                return;
            }
            if (ObjectManager.Me.InCombat && SpiritwalkersGrace.IsSpellUsable
                && SpiritwalkersGrace.KnownSpell && _mySettings.UseSpiritwalkersGrace && ObjectManager.Me.GetMove)
            {
                SpiritwalkersGrace.Launch();
                return;
            }
            if (FlametongueWeapon.KnownSpell && FlametongueWeapon.IsSpellUsable && !ObjectManager.Me.HaveBuff(10400)
                && _mySettings.UseFlametongueWeapon)
            {
                FlametongueWeapon.Launch();
                return;
            }
            if (FrostbrandWeapon.KnownSpell && FrostbrandWeapon.IsSpellUsable && !ObjectManager.Me.HaveBuff(8034)
                && _mySettings.UseFrostbrandWeapon && !_mySettings.UseFlametongueWeapon)
            {
                FrostbrandWeapon.Launch();
                return;
            }
            if (RockbiterWeapon.KnownSpell && RockbiterWeapon.IsSpellUsable && !ObjectManager.Me.HaveBuff(36494)
                && _mySettings.UseRockbiterWeapon && !_mySettings.UseFlametongueWeapon
                && !_mySettings.UseFrostbrandWeapon)
            {
                RockbiterWeapon.Launch();
                return;
            }
            if (!ObjectManager.Me.InCombat && GhostWolf.IsSpellUsable && GhostWolf.KnownSpell
                && _mySettings.UseGhostWolf && ObjectManager.Me.GetMove && !GhostWolf.HaveBuff
                && ObjectManager.Target.GetDistance > 50)
            {
                GhostWolf.Launch();
                return;
            }
            if (_mySettings.UseAlchFlask && !ObjectManager.Me.HaveBuff(79638) && !ObjectManager.Me.HaveBuff(79640) && !ObjectManager.Me.HaveBuff(79639)
                && !ItemsManager.IsItemOnCooldown(75525) && ItemsManager.GetItemCountByIdLUA(75525) > 0)
            {
                ItemsManager.UseItem(75525);
            }
        }

        private void AvoidMelee()
        {
            if (ObjectManager.Target.GetDistance < _mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
            {
                Logging.WriteFight("Too Close. Moving Back");
                var maxTimeTimer = new Timer(1000*2);
                MovementsAction.MoveBackward(true);
                while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                    Thread.Sleep(300);
                MovementsAction.MoveBackward(false);
                if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
                {
                    MovementsAction.MoveForward(true);
                    Thread.Sleep(1000);
                    MovementsAction.MoveForward(false);
                    MovementManager.Face(ObjectManager.Target.Position);
                }
            }
        }

        private void DefenseCycle()
        {
            if (ObjectManager.Me.HealthPercent < 50 && CapacitorTotem.KnownSpell && CapacitorTotem.IsSpellUsable
                && AirTotemReady() && _mySettings.UseCapacitorTotem)
            {
                CapacitorTotem.Launch();
                _onCd = new Timer(1000*5);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 50 && StoneBulwarkTotem.KnownSpell &&
                StoneBulwarkTotem.IsSpellUsable
                && EarthTotemReady() && _mySettings.UseStoneBulwarkTotem)
            {
                StoneBulwarkTotem.Launch();
                _onCd = new Timer(1000*10);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable &&
                WarStomp.KnownSpell
                && _mySettings.UseWarStomp)
            {
                WarStomp.Launch();
                _onCd = new Timer(1000*2);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable &&
                Stoneform.KnownSpell
                && _mySettings.UseStoneform)
            {
                Stoneform.Launch();
                _onCd = new Timer(1000*8);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 70 && AstralShift.KnownSpell && AstralShift.IsSpellUsable
                && _mySettings.UseAstralShift)
            {
                AstralShift.Launch();
                _onCd = new Timer(1000*6);
            }
        }

        private void Heal()
        {
            if (ObjectManager.Me.IsMounted)
                return;
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell &&
                ObjectManager.Me.ManaPercentage <= _mySettings.UseArcaneTorrentForResourceAtPercentage
                && _mySettings.UseArcaneTorrentForResource)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (ObjectManager.Me.ManaPercentage < 50 && TotemicRecall.KnownSpell && TotemicRecall.IsSpellUsable
                && _mySettings.UseTotemicRecall && !ObjectManager.Me.InCombat
                && TotemicRecallReady())
            {
                TotemicRecall.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 95 && HealingSurge.KnownSpell && HealingSurge.IsSpellUsable
                && !ObjectManager.Me.InCombat && _mySettings.UseHealingSurge)
            {
                HealingSurge.Launch();
                while (ObjectManager.Me.IsCast)
                {
                    Thread.Sleep(200);
                }
                return;
            }
            if (HealingSurge.KnownSpell && HealingSurge.IsSpellUsable && ObjectManager.Me.HealthPercent < 50
                && _mySettings.UseHealingSurge)
            {
                HealingSurge.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseGiftoftheNaaruAtPercentage &&
                GiftoftheNaaru.KnownSpell && GiftoftheNaaru.IsSpellUsable
                && _mySettings.UseGiftoftheNaaru)
            {
                GiftoftheNaaru.Launch();
                return;
            }
            if (HealingTideTotem.KnownSpell && HealingTideTotem.IsSpellUsable &&
                ObjectManager.Me.HealthPercent < 70
                && WaterTotemReady() && _mySettings.UseHealingTideTotem)
            {
                HealingTideTotem.Launch();
                return;
            }
            if (AncestralGuidance.KnownSpell && AncestralGuidance.IsSpellUsable &&
                ObjectManager.Me.HealthPercent < 70
                && _mySettings.UseAncestralGuidance)
            {
                AncestralGuidance.Launch();
                return;
            }
            if (ChainHeal.KnownSpell && ChainHeal.IsSpellUsable && ObjectManager.Me.HealthPercent < 80
                && _mySettings.UseChainHeal)
            {
                ChainHeal.Launch();
                return;
            }
            if (HealingStreamTotem.KnownSpell && HealingStreamTotem.IsSpellUsable &&
                ObjectManager.Me.HealthPercent < 90
                && WaterTotemReady() && _mySettings.UseHealingStreamTotem)
            {
                HealingStreamTotem.Launch();
            }
        }

        private void Decast()
        {
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && _mySettings.UseWindShear
                && WindShear.KnownSpell && WindShear.IsSpellUsable && WindShear.IsHostileDistanceGood)
            {
                WindShear.Launch();
                return;
            }
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8
                && ObjectManager.Me.HealthPercent <= _mySettings.UseArcaneTorrentForDecastAtPercentage
                && _mySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast &&
                ObjectManager.Target.IsTargetingMe)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && _mySettings.UseGroundingTotem
                && GroundingTotem.KnownSpell && GroundingTotem.IsSpellUsable && AirTotemReady())
            {
                GroundingTotem.Launch();
                return;
            }
            if (ObjectManager.Target.GetMove && !FrostShock.TargetHaveBuff && _mySettings.UseFrostShock
                && FrostShock.KnownSpell && FrostShock.IsSpellUsable && FrostShock.IsHostileDistanceGood)
            {
                FrostShock.Launch();
                return;
            }
            if (ObjectManager.Target.GetMove && _mySettings.UseEarthbindTotem && EarthTotemReady()
                && EarthbindTotem.KnownSpell && EarthbindTotem.IsSpellUsable && EarthbindTotem.IsHostileDistanceGood)
            {
                EarthbindTotem.Launch();
            }
        }

        private void DPSBurst()
        {
            if (_mySettings.UseTrinketOne && !ItemsManager.IsItemOnCooldown(_firstTrinket.Entry) && ItemsManager.IsUsableItemById(_firstTrinket.Entry))
            {
                ItemsManager.UseItem(_firstTrinket.Name);
                Logging.WriteFight("Use First Trinket Slot");
            }

            if (_mySettings.UseTrinketTwo && !ItemsManager.IsItemOnCooldown(_secondTrinket.Entry) && ItemsManager.IsUsableItemById(_secondTrinket.Entry))
            {
                ItemsManager.UseItem(_secondTrinket.Name);
                Logging.WriteFight("Use Second Trinket Slot");
                return;
            }
            if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseBerserking)
            {
                Berserking.Launch();
                return;
            }
            if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseBloodFury)
            {
                BloodFury.Launch();
                return;
            }
            if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseLifeblood)
            {
                Lifeblood.Launch();
                return;
            }
            if (_engineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseEngGlove)
            {
                Logging.WriteFight("Use Engineering Gloves.");
                Lua.RunMacroText("/use 10");
                _engineeringTimer = new Timer(1000*60);
                return;
            }
            if (UnleashElements.KnownSpell && UnleashElements.IsSpellUsable && UnleashedFury.KnownSpell
                && _mySettings.UseUnleashElements && UnleashElements.IsHostileDistanceGood)
            {
                UnleashElements.Launch();
                return;
            }
            if (ElementalBlast.KnownSpell && ElementalBlast.IsSpellUsable
                && _mySettings.UseElementalBlast && ElementalBlast.IsHostileDistanceGood)
            {
                ElementalBlast.Launch();
                return;
            }
            if (Ascendance.KnownSpell && Ascendance.IsSpellUsable
                && _mySettings.UseAscendance && ObjectManager.Target.GetDistance < 41)
            {
                Ascendance.Launch();
                return;
            }
            if (FireElementalTotem.KnownSpell && FireElementalTotem.IsSpellUsable
                && _mySettings.UseFireElementalTotem && ObjectManager.Target.GetDistance < 41)
            {
                FireElementalTotem.Launch();
                return;
            }
            if (StormlashTotem.KnownSpell && AirTotemReady()
                && _mySettings.UseStormlashTotem && ObjectManager.Target.GetDistance < 41)
            {
                if (!StormlashTotem.IsSpellUsable && _mySettings.UseCalloftheElements
                    && CalloftheElements.KnownSpell && CalloftheElements.IsSpellUsable)
                {
                    CalloftheElements.Launch();
                    Thread.Sleep(200);
                }

                if (StormlashTotem.IsSpellUsable)
                    StormlashTotem.Launch();
                return;
            }
            if (Bloodlust.KnownSpell && Bloodlust.IsSpellUsable && _mySettings.UseBloodlustHeroism
                && ObjectManager.Target.GetDistance < 41 && !ObjectManager.Me.HaveBuff(57724))
            {
                Bloodlust.Launch();
                return;
            }

            if (Heroism.KnownSpell && Heroism.IsSpellUsable && _mySettings.UseBloodlustHeroism
                && ObjectManager.Target.GetDistance < 41 && !ObjectManager.Me.HaveBuff(57723))
            {
                Heroism.Launch();
                return;
            }
            if (ElementalMastery.KnownSpell && ElementalMastery.IsSpellUsable
                && !ObjectManager.Me.HaveBuff(2825) && _mySettings.UseElementalMastery
                && !ObjectManager.Me.HaveBuff(32182))
            {
                ElementalMastery.Launch();
            }
        }

        private void DPSCycle()
        {
            if (ObjectManager.Me.ManaPercentage < 80 && Thunderstorm.KnownSpell && Thunderstorm.IsSpellUsable
                && _mySettings.UseThunderstorm)
            {
                Thunderstorm.Launch();
                return;
            }
            if (EarthElementalTotem.KnownSpell && EarthElementalTotem.IsSpellUsable
                && ObjectManager.GetNumberAttackPlayer() > 3 && _mySettings.UseEarthElementalTotem)
            {
                EarthElementalTotem.Launch();
                return;
            }
            if (Thunderstorm.KnownSpell && Thunderstorm.IsSpellUsable && ObjectManager.Target.GetDistance < 10
                && ObjectManager.GetNumberAttackPlayer() > 5 && _mySettings.UseThunderstorm)
            {
                Thunderstorm.Launch();
                return;
            }
            if (Earthquake.KnownSpell && Earthquake.IsSpellUsable && Earthquake.IsHostileDistanceGood
                && ObjectManager.GetNumberAttackPlayer() > 5 && _mySettings.UseEarthquake)
            {
                SpellManager.CastSpellByIDAndPosition(61882, ObjectManager.Target.Position);
                return;
            }
            if (FlameShock.IsSpellUsable && FlameShock.IsHostileDistanceGood && FlameShock.KnownSpell
                && _mySettings.UseFlameShock && (!FlameShock.TargetHaveBuff || _flameShockTimer.IsReady))
            {
                FlameShock.Launch();
                _flameShockTimer = new Timer(1000*27);
                return;
            }
            if (LavaBurst.KnownSpell && LavaBurst.IsSpellUsable && LavaBurst.IsHostileDistanceGood
                && _mySettings.UseLavaBurst && FlameShock.TargetHaveBuff)
            {
                LavaBurst.Launch();
                return;
            }
            if (_mySettings.UseEarthShock && EarthShock.KnownSpell && EarthShock.IsHostileDistanceGood && EarthShock.IsSpellUsable
                && (LightningShield.BuffStack > 4 || !_mySettings.UseLightningShield || !LightningShield.KnownSpell))
            {
                EarthShock.Launch();
                return;
            }
            if (ObjectManager.GetNumberAttackPlayer() > 1 && MagmaTotem.KnownSpell
                && MagmaTotem.IsSpellUsable && _mySettings.UseMagmaTotem
                && !FireElementalTotem.CreatedBySpell)
            {
                MagmaTotem.Launch();
                return;
            }
            if (SearingTotem.KnownSpell && SearingTotem.IsSpellUsable && _mySettings.UseSearingTotem
                && FireTotemReady() && !SearingTotem.CreatedBySpellInRange(25) &&
                ObjectManager.Target.GetDistance < 31)
            {
                SearingTotem.Launch();
                return;
            }
            if (ObjectManager.GetNumberAttackPlayer() > 1 && _mySettings.UseChainLightning && ChainLightning.KnownSpell
                && ChainLightning.IsHostileDistanceGood && ChainLightning.IsSpellUsable
                && (LightningShield.BuffStack < 6 || !_mySettings.UseLightningShield || !LightningShield.KnownSpell))
            {
                if (AncestralSwiftness.KnownSpell && AncestralSwiftness.IsSpellUsable
                    && _mySettings.UseAncestralSwiftness)
                {
                    AncestralSwiftness.Launch();
                    Thread.Sleep(200);
                }
                ChainLightning.Launch();
                return;
            }
            if (_mySettings.UseLightningBolt && LightningBolt.KnownSpell && LightningBolt.IsHostileDistanceGood && LightningBolt.IsSpellUsable
                && (LightningShield.BuffStack < 6 || !_mySettings.UseLightningShield || !LightningShield.KnownSpell))
            {
                if (AncestralSwiftness.KnownSpell && AncestralSwiftness.IsSpellUsable
                    && _mySettings.UseAncestralSwiftness)
                {
                    AncestralSwiftness.Launch();
                    Thread.Sleep(200);
                }
                LightningBolt.Launch();
            }
        }

        private bool FireTotemReady()
        {
            return !FireElementalTotem.CreatedBySpell && !MagmaTotem.CreatedBySpell;
        }

        private bool EarthTotemReady()
        {
            return !EarthbindTotem.CreatedBySpell && !EarthElementalTotem.CreatedBySpell && !StoneBulwarkTotem.CreatedBySpell;
        }

        private bool WaterTotemReady()
        {
            return !HealingStreamTotem.CreatedBySpell && !HealingTideTotem.CreatedBySpell;
        }

        private bool AirTotemReady()
        {
            return !CapacitorTotem.CreatedBySpell && !GroundingTotem.CreatedBySpell && !StormlashTotem.CreatedBySpell;
        }

        private bool TotemicRecallReady()
        {
            if (FireElementalTotem.CreatedBySpell)
                return false;
            if (EarthElementalTotem.CreatedBySpell)
                return false;
            if (SearingTotem.CreatedBySpell)
                return true;
            if (FireTotemReady() && EarthTotemReady() && WaterTotemReady() && AirTotemReady())
                return false;
            return true;
        }

        private void Patrolling()
        {
            if (ObjectManager.Me.IsMounted) return;
            Buff();
            Heal();
        }

        #region Nested type: ShamanElementalSettings

        [Serializable]
        public class ShamanElementalSettings : Settings
        {
            public bool DoAvoidMelee = false;
            public int DoAvoidMeleeDistance = 0;
            public bool UseAlchFlask = true;
            public bool UseAncestralGuidance = true;
            public bool UseAncestralSwiftness = true;
            public bool UseArcaneTorrentForDecast = true;
            public int UseArcaneTorrentForDecastAtPercentage = 100;
            public bool UseArcaneTorrentForResource = true;
            public int UseArcaneTorrentForResourceAtPercentage = 80;
            public bool UseAscendance = true;
            public bool UseAstralShift = true;
            public bool UseBerserking = true;
            public bool UseBloodFury = true;
            public bool UseBloodlustHeroism = true;
            public bool UseCalloftheElements = true;
            public bool UseCapacitorTotem = true;
            public bool UseChainHeal = false;
            public bool UseChainLightning = true;
            public bool UseEarthElementalTotem = true;
            public bool UseEarthShock = true;
            public bool UseEarthbindTotem = false;
            public bool UseEarthquake = true;
            public bool UseElementalBlast = true;
            public bool UseElementalMastery = true;
            public bool UseEngGlove = true;
            public bool UseFireElementalTotem = true;
            public bool UseFlameShock = true;
            public bool UseFlametongueWeapon = true;
            public bool UseFrostShock = false;
            public bool UseFrostbrandWeapon = false;
            public bool UseGhostWolf = true;
            public bool UseGiftoftheNaaru = true;
            public int UseGiftoftheNaaruAtPercentage = 80;
            public bool UseGroundingTotem = true;
            public bool UseHealingRain = true;
            public bool UseHealingStreamTotem = true;
            public bool UseHealingSurge = true;
            public bool UseHealingTideTotem = true;
            public bool UseLavaBurst = true;
            public bool UseLifeblood = true;
            public bool UseLightningBolt = true;
            public bool UseLightningShield = true;
            public bool UseLowCombat = true;
            public bool UseMagmaTotem = true;
            public bool UseRockbiterWeapon = false;
            public bool UseSearingTotem = true;
            public bool UseSpiritwalkersGrace = true;
            public bool UseStoneBulwarkTotem = true;
            public bool UseStoneform = true;
            public int UseStoneformAtPercentage = 80;
            public bool UseStormlashTotem = true;
            public bool UseThunderstorm = true;
            public bool UseTotemicProjection = true;
            public bool UseTotemicRecall = true;
            public bool UseTrinketOne = true;
            public bool UseTrinketTwo = true;
            public bool UseUnleashElements = true;
            public bool UseWarStomp = true;
            public int UseWarStompAtPercentage = 80;
            public bool UseWaterShield = true;
            public bool UseWaterWalking = true;
            public bool UseWindShear = true;

            public ShamanElementalSettings()
            {
                ConfigWinForm(new Point(500, 400), "Shaman Elemental Settings");
                /* Professions & Racials */
                AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
                AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
                AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
                AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
                AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
                AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
                /* Shaman Buffs */
                AddControlInWinForm("Use Flametongue Weapon", "UseFlametongueWeapon", "Shaman Buffs");
                AddControlInWinForm("Use Frostbrand Weapon", "UseFrostbrandWeapon", "Shaman Buffs");
                AddControlInWinForm("Use Ghost Wolf", "UseGhostWolf", "Shaman Buffs");
                AddControlInWinForm("Use Lightning Shield", "UseLightningShield", "Shaman Buffs");
                AddControlInWinForm("Use Rockbiter Weapon", "UseRockbiterWeapon", "Shaman Buffs");
                AddControlInWinForm("Use Spiritwalker's Grace", "UseSpiritwalkersGrace", "Shaman Buffs");
                AddControlInWinForm("Use Water Shield", "UseWaterShield", "Shaman Buffs");
                AddControlInWinForm("Use Water Walking", "UseWaterWalking", "Shaman Buffs");
                /* Offensive Spell */
                AddControlInWinForm("Use Chain Lightning", "UseChainLightning", "Offensive Spell");
                AddControlInWinForm("Use Earthquake", "UseEarthquake", "Offensive Spell");
                AddControlInWinForm("Use Earth Shock", "UseEarthShock", "Offensive Spell");
                AddControlInWinForm("Use Flame Shock", "UseFlameShock", "Offensive Spell");
                AddControlInWinForm("Use Frost Shock", "UseFrostShock", "Offensive Spell");
                AddControlInWinForm("Use Lava Burst", "UseLavaBurst", "Offensive Spell");
                AddControlInWinForm("Use Lightning Bolt", "UseLightningBolt", "Offensive Spell");
                AddControlInWinForm("Use Magma Totem", "UseMagmaTotem", "Offensive Spell");
                AddControlInWinForm("Use Searing Totem", "UseSearingTotem", "Offensive Spell");
                AddControlInWinForm("Use Thunderstorm", "UseThunderstorm", "Offensive Spell");
                /* Offensive Cooldown */
                AddControlInWinForm("Use Ancestral Swiftness", "UseAncestralSwiftness", "Offensive Cooldown");
                AddControlInWinForm("Use Ascendance", "UseAscendance", "Offensive Cooldown");
                AddControlInWinForm("Use Bloodlust / Heroism", "UseBloodlustHeroism", "Offensive Cooldown");
                AddControlInWinForm("Use Call of the Elements", "UseCalloftheElements", "Offensive Cooldown");
                AddControlInWinForm("Use Earth Elemental Totem", "UseEarthElementalTotem", "Offensive Cooldown");
                AddControlInWinForm("Use Elemental Blast", "UseElementalBlast", "Offensive Cooldown");
                AddControlInWinForm("Use Elemental Mastery", "UseElementalMastery", "Offensive Cooldown");
                AddControlInWinForm("Use Fire Elemental Totem", "UseFireElementalTotem", "Offensive Cooldown");
                AddControlInWinForm("Use Stormlash Totem", "UseStormlashTotem", "Offensive Cooldown");
                AddControlInWinForm("Use Totemic Projection", "UseTotemicProjection", "Offensive Cooldown");
                AddControlInWinForm("Use Unleash Elements", "UseUnleashElements", "Offensive Cooldown");
                /* Defensive Cooldown */
                AddControlInWinForm("Use Astral Shift", "UseAstralShift", "Defensive Cooldown");
                AddControlInWinForm("Use Capacitor Totem", "UseCapacitorTotem", "Defensive Cooldown");
                AddControlInWinForm("Use Earthbind Totem", "UseEarthbindTotem", "Defensive Cooldown");
                AddControlInWinForm("Use Grounding Totem", "UseGroundingTotem", "Defensive Cooldown");
                AddControlInWinForm("Use StoneBulwark Totem", "UseStoneBulwarkTotem", "Defensive Cooldown");
                AddControlInWinForm("Use Wind Shear", "UseWindShear", "Defensive Cooldown");
                /* Healing Spell */
                AddControlInWinForm("Use Ancestral Guidance", "UseAncestralGuidance", "Healing Spell");
                AddControlInWinForm("Use Chain Heal", "UseChainHeal", "Healing Spell");
                AddControlInWinForm("Use Healing Rain", "UseHealingRain", "Healing Spell");
                AddControlInWinForm("Use Healing Surge", "UseHealingSurge", "Healing Spell");
                AddControlInWinForm("Use Healing Stream Totem", "UseHealingStreamTotem", "Healing Spell");
                AddControlInWinForm("Use Healing Tide Totem", "UsHealingTideTotem", "Healing Spell");
                AddControlInWinForm("Use Totemic Recall", "UseTotemicRecall", "Healing Spell");
                /* Game Settings */
                AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
                AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
                AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
                AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
                AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
                AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
                AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
            }

            public static ShamanElementalSettings CurrentSetting { get; set; }

            public static ShamanElementalSettings GetSettings()
            {
                string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Shaman_Elemental.xml";
                if (File.Exists(currentSettingsFile))
                {
                    return
                        CurrentSetting = Load<ShamanElementalSettings>(currentSettingsFile);
                }
                return new ShamanElementalSettings();
            }
        }

        #endregion
    }

    #endregion

    #region Priest

    public class PriestShadow
    {
        private readonly PriestShadowSettings _mySettings = PriestShadowSettings.GetSettings();

        #region General Timers & Variables

        private readonly WoWItem _firstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
        private readonly WoWItem _secondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);
        private Timer _engineeringTimer = new Timer(0);
        public int LC = 0;
        private Timer _onCd = new Timer(0);

        #endregion

        #region Professions and Racials

        public readonly Spell Alchemy = new Spell("Alchemy");
        public readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
        public readonly Spell Berserking = new Spell("Berserking");
        public readonly Spell BloodFury = new Spell("Blood Fury");
        public readonly Spell Engineering = new Spell("Engineering");
        public readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
        public readonly Spell Lifeblood = new Spell("Lifeblood");
        public readonly Spell Stoneform = new Spell("Stoneform");
        public readonly Spell WarStomp = new Spell("War Stomp");

        #endregion

        #region Priest Buffs

        public readonly Spell InnerFire = new Spell("Inner Fire");
        public readonly Spell InnerWill = new Spell("Inner Will");
        public readonly Spell Levitate = new Spell("Levitate");
        public readonly Spell PowerWordFortitude = new Spell("Power Word: Fortitude");
        public readonly Spell Shadowform = new Spell("Shadowform");
        private Timer LevitateTimer = new Timer(0);

        #endregion

        #region Offensive Spell

        public readonly Spell Cascade = new Spell("Cascade");
        public readonly Spell DevouringPlague = new Spell("Devouring Plague");
        public readonly Spell DivineStar = new Spell("Divine Star");
        public readonly Spell Halo = new Spell("Halo");
        public readonly Spell MindBlast = new Spell("Mind Blast");
        public readonly Spell MindFlay = new Spell("Mind Flay");
        public readonly Spell MindSear = new Spell("Mind Sear");
        public readonly Spell MindSpike = new Spell("Mind Spike");
        public readonly Spell ShadowWordDeath = new Spell("Shadow Word: Death");
        public readonly Spell ShadowWordInsanity = new Spell("Shadow Word: Insanity");
        public readonly Spell ShadowWordPain = new Spell("Shadow Word: Pain");
        public readonly Spell Smite = new Spell("Smite");
        public readonly Spell VampiricTouch = new Spell("Vampiric Touch");
        private Timer DevouringPlagueTimer = new Timer(0);
        private Timer ShadowWordPainTimer = new Timer(0);
        private Timer VampiricTouchTimer = new Timer(0);

        #endregion

        #region Offensive Cooldown

        public readonly Spell PowerInfusion = new Spell("Power Infusion");
        public readonly Spell Shadowfiend = new Spell("Shadowfiend");

        #endregion

        #region Defensive Cooldown

        public readonly Spell Dispersion = new Spell("Dispersion");
        public readonly Spell PowerWordShield = new Spell("Power Word: Shield");
        public readonly Spell PsychicHorror = new Spell("Psychic Horror");
        public readonly Spell PsychicScream = new Spell("Psychic Scream");
        public readonly Spell Psyfiend = new Spell("Psyfiend");
        public readonly Spell Silence = new Spell("Silence");
        public readonly Spell SpectralGuise = new Spell("Spectral Guise");
        public readonly Spell VoidTendrils = new Spell("Void Tendrils");

        #endregion

        #region Healing Spell

        public readonly Spell DesperatePrayer = new Spell("Desperate Prayer");
        public readonly Spell FlashHeal = new Spell("Flash Heal");
        public readonly Spell HymnofHope = new Spell("Hymn of Hope");
        public readonly Spell PrayerofMending = new Spell("Prayer of Mending");
        public readonly Spell Renew = new Spell("Renew");
        public readonly Spell VampiricEmbrace = new Spell("Vampiric Embrace");
        private Timer RenewTimer = new Timer(0);

        #endregion

        public PriestShadow()
        {
            Main.InternalRange = 30.0f;
            UInt64 lastTarget = 0;

            while (Main.InternalLoop)
            {
                try
                {
                    if (!ObjectManager.Me.IsDead)
                    {
                        if (!ObjectManager.Me.IsMounted)
                        {
                            BuffLevitate();
                            if (Fight.InFight && ObjectManager.Me.Target > 0)
                            {
                                if (ObjectManager.Me.Target != lastTarget &&
                                    (MindSpike.IsHostileDistanceGood || ShadowWordPain.IsHostileDistanceGood))
                                {
                                    Pull();
                                    lastTarget = ObjectManager.Me.Target;
                                }

                                if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                    && _mySettings.UseLowCombat)
                                {
                                    LC = 1;
                                    if (ObjectManager.Target.GetDistance < 41)
                                        LowCombat();
                                }
                                else
                                {
                                    LC = 0;
                                    if (ObjectManager.Target.GetDistance < 41)
                                        Combat();
                                }
                                break;
                            }
                            if (!ObjectManager.Me.IsCast)
                                Patrolling();
                        }
                    }
                    else
                        Thread.Sleep(500);
                }
                catch
                {
                }
                Thread.Sleep(150);
            }
        }

        private void BuffLevitate()
        {
            if (!ObjectManager.Me.InCombat && Levitate.KnownSpell && Levitate.IsSpellUsable && _mySettings.UseLevitate
                && (!Levitate.HaveBuff || LevitateTimer.IsReady))
            {
                Levitate.Launch();
                LevitateTimer = new Timer(1000*60*9);
            }
        }

        private void Pull()
        {
            if (DevouringPlague.IsSpellUsable && DevouringPlague.KnownSpell && DevouringPlague.IsHostileDistanceGood
                && ObjectManager.Me.ShadowOrbs == 3 && _mySettings.UseDevouringPlague)
            {
                DevouringPlague.Launch();
                return;
            }
            else
            {
                if (ShadowWordPain.IsSpellUsable && ShadowWordPain.KnownSpell && ShadowWordPain.IsHostileDistanceGood
                    && _mySettings.UseShadowWordPain)
                {
                    ShadowWordPain.Launch();
                    ShadowWordPainTimer = new Timer(1000*14);
                    return;
                }
            }
        }

        private void LowCombat()
        {
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            Heal();
            DefenseCycle();
            Buff();

            if (DevouringPlague.IsSpellUsable && DevouringPlague.KnownSpell && DevouringPlague.IsHostileDistanceGood
                && ObjectManager.Me.ShadowOrbs == 3 && _mySettings.UseDevouringPlague)
            {
                DevouringPlague.Launch();
                return;
            }
            if (MindSpike.KnownSpell && MindSpike.IsSpellUsable && MindSpike.IsHostileDistanceGood
                && _mySettings.UseMindSpike)
            {
                MindSpike.Launch();
                if (ObjectManager.Target.HealthPercent < 50 && ObjectManager.Target.HealthPercent > 0)
                {
                    MindSpike.Launch();
                    return;
                }
                return;
            }
            if (MindSear.KnownSpell && MindSear.IsSpellUsable && MindSear.IsHostileDistanceGood
                && _mySettings.UseMindSear)
            {
                MindSear.Launch();
            }
        }

        private void Combat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            if (_onCd.IsReady)
                DefenseCycle();
            DPSCycle();
            Heal();
            Decast();
            DPSCycle();
            DPSBurst();
            DPSCycle();
        }

        private void Buff()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (PowerWordFortitude.KnownSpell && PowerWordFortitude.IsSpellUsable &&
                !PowerWordFortitude.HaveBuff && _mySettings.UsePowerWordFortitude)
            {
                PowerWordFortitude.Launch();
                return;
            }
            if (InnerFire.KnownSpell && InnerFire.IsSpellUsable && !InnerFire.HaveBuff
                && _mySettings.UseInnerFire)
            {
                InnerFire.Launch();
                return;
            }
            if (InnerWill.KnownSpell && InnerWill.IsSpellUsable && !InnerWill.HaveBuff
                && !_mySettings.UseInnerFire && _mySettings.UseInnerWill)
            {
                InnerWill.Launch();
                return;
            }
            if (_mySettings.UseAlchFlask && !ObjectManager.Me.HaveBuff(79638) && !ObjectManager.Me.HaveBuff(79640) && !ObjectManager.Me.HaveBuff(79639)
                && !ItemsManager.IsItemOnCooldown(75525) && ItemsManager.GetItemCountByIdLUA(75525) > 0)
            {
                ItemsManager.UseItem(75525);
                return;
            }
            if (!Shadowform.HaveBuff && Shadowform.KnownSpell && Shadowform.IsSpellUsable
                && _mySettings.UseShadowform)
            {
                Shadowform.Launch();
            }
        }

        private void AvoidMelee()
        {
            if (ObjectManager.Target.GetDistance < _mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
            {
                Logging.WriteFight("Too Close. Moving Back");
                var maxTimeTimer = new Timer(1000*2);
                MovementsAction.MoveBackward(true);
                while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                    Thread.Sleep(300);
                MovementsAction.MoveBackward(false);
                if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
                {
                    MovementsAction.MoveForward(true);
                    Thread.Sleep(1000);
                    MovementsAction.MoveForward(false);
                    MovementManager.Face(ObjectManager.Target.Position);
                }
            }
        }

        private void DefenseCycle()
        {
            if (ObjectManager.Me.HealthPercent <= _mySettings.UsePsychicScreamAtPercentage && PsychicScream.IsSpellUsable &&
                PsychicScream.KnownSpell
                && _mySettings.UsePsychicScream)
            {
                PsychicScream.Launch();
                _onCd = new Timer(1000*8);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseDispersionHealthAtPercentage && Dispersion.KnownSpell &&
                Dispersion.IsSpellUsable
                && _mySettings.UseDispersionHealth)
            {
                if (Renew.KnownSpell && Renew.IsSpellUsable && _mySettings.UseRenew)
                {
                    Renew.Launch();
                    Thread.Sleep(1500);
                }
                Dispersion.Launch();
                _onCd = new Timer(1000*6);
                return;
            }
            if (ObjectManager.GetNumberAttackPlayer() >= 2 &&
                ObjectManager.Me.HealthPercent <= _mySettings.UseVoidTendrilsAtPercentage &&
                VoidTendrils.IsSpellUsable && VoidTendrils.KnownSpell && _mySettings.UseVoidTendrils)
            {
                VoidTendrils.Launch();
                _onCd = new Timer(1000*10);
                return;
            }
            if (ObjectManager.GetNumberAttackPlayer() >= 2 &&
                ObjectManager.Me.HealthPercent <= _mySettings.UsePsyfiendAtPercentage &&
                Psyfiend.IsSpellUsable && Psyfiend.KnownSpell && _mySettings.UsePsyfiend)
            {
                Psyfiend.Launch();
                _onCd = new Timer(1000*10);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseSpectralGuiseAtPercentage &&
                SpectralGuise.IsSpellUsable && SpectralGuise.KnownSpell
                && _mySettings.UseSpectralGuise)
            {
                if (Renew.KnownSpell && Renew.IsSpellUsable && _mySettings.UseRenew)
                {
                    Renew.Launch();
                    Thread.Sleep(1500);
                }
                SpectralGuise.Launch();
                _onCd = new Timer(1000*3);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseStoneformAtPercentage &&
                Stoneform.IsSpellUsable && Stoneform.KnownSpell
                && _mySettings.UseStoneform)
            {
                Stoneform.Launch();
                _onCd = new Timer(1000*8);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseWarStompAtPercentage &&
                WarStomp.IsSpellUsable && WarStomp.KnownSpell
                && _mySettings.UseWarStomp)
            {
                WarStomp.Launch();
                _onCd = new Timer(1000*2);
            }
        }

        private void Heal()
        {
            if (_mySettings.UseArcaneTorrentForResource && ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable
                && ObjectManager.Me.ManaPercentage <= _mySettings.UseArcaneTorrentForResourceAtPercentage)
            {
                ArcaneTorrent.Launch();
                return;
            }

            if (ObjectManager.Me.HealthPercent <= _mySettings.UseFlashHealNonCombatAtPercentage &&
                !ObjectManager.Me.InCombat
                && FlashHeal.KnownSpell && FlashHeal.IsSpellUsable && _mySettings.UseFlashHealNonCombat)
            {
                FlashHeal.Launch(false);
                return;
            }
            if (ObjectManager.Me.ManaPercentage <= _mySettings.UseHymnofHopeAtPercentage &&
                HymnofHope.KnownSpell
                && HymnofHope.IsSpellUsable && !ObjectManager.Me.InCombat && _mySettings.UseHymnofHope)
            {
                HymnofHope.Launch(false);
                return;
            }
            if (ObjectManager.Me.ManaPercentage <= _mySettings.UseDispersionManaAtPercentage &&
                !ObjectManager.Me.InCombat
                && Dispersion.KnownSpell && Dispersion.IsSpellUsable && _mySettings.UseDispersionMana)
            {
                Dispersion.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseDesperatePrayerAtPercentage &&
                DesperatePrayer.KnownSpell && DesperatePrayer.IsSpellUsable
                && _mySettings.UseDesperatePrayer)
            {
                DesperatePrayer.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseFlashHealInCombatAtPercentage &&
                FlashHeal.KnownSpell && FlashHeal.IsSpellUsable
                && _mySettings.UseFlashHealInCombat)
            {
                FlashHeal.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseGiftoftheNaaruAtPercentage &&
                GiftoftheNaaru.IsSpellUsable && GiftoftheNaaru.KnownSpell
                && _mySettings.UseGiftoftheNaaru)
            {
                GiftoftheNaaru.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseVampiricEmbraceAtPercentage &&
                VampiricEmbrace.IsSpellUsable && VampiricEmbrace.KnownSpell
                && _mySettings.UseVampiricEmbrace)
            {
                VampiricEmbrace.Launch();
                return;
            }
            if (PowerWordShield.KnownSpell && PowerWordShield.IsSpellUsable
                && !PowerWordShield.HaveBuff && _mySettings.UsePowerWordShield
                && !ObjectManager.Me.HaveBuff(6788) &&
                ObjectManager.Me.HealthPercent <= _mySettings.UsePowerWordShieldAtPercentage
                && (ObjectManager.Me.InCombat || ObjectManager.Me.GetMove))
            {
                PowerWordShield.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UsePrayerofMendingAtPercentage &&
                PrayerofMending.KnownSpell && PrayerofMending.IsSpellUsable
                && _mySettings.UsePrayerofMending)
            {
                PrayerofMending.Launch();
                return;
            }
            if (Renew.KnownSpell && Renew.IsSpellUsable && !Renew.HaveBuff &&
                ObjectManager.Me.HealthPercent <= _mySettings.UseRenewAtPercentage &&
                _mySettings.UseRenew)
            {
                Renew.Launch();
            }
        }

        private void Decast()
        {
            if (_mySettings.UseArcaneTorrentForDecast && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8 && ArcaneTorrent.IsSpellUsable
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && ObjectManager.Me.HealthPercent <= _mySettings.UseArcaneTorrentForDecastAtPercentage)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && _mySettings.UseSilence
                && Silence.KnownSpell && Silence.IsSpellUsable && Silence.IsHostileDistanceGood
                && ObjectManager.Target.HealthPercent <= _mySettings.UseSilenceAtPercentage)
            {
                Silence.Launch();
                return;
            }
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && _mySettings.UsePsychicHorror
                && PsychicHorror.KnownSpell && PsychicHorror.IsSpellUsable && PsychicHorror.IsHostileDistanceGood
                && ObjectManager.Target.HealthPercent <= _mySettings.UsePsychicHorrorAtPercentage)
            {
                PsychicHorror.Launch();
            }
        }

        private void DPSBurst()
        {
            if (_mySettings.UseTrinketOne && !ItemsManager.IsItemOnCooldown(_firstTrinket.Entry) && ItemsManager.IsUsableItemById(_firstTrinket.Entry))
            {
                ItemsManager.UseItem(_firstTrinket.Name);
                Logging.WriteFight("Use First Trinket Slot");
            }

            if (_mySettings.UseTrinketTwo && !ItemsManager.IsItemOnCooldown(_secondTrinket.Entry) && ItemsManager.IsUsableItemById(_secondTrinket.Entry))
            {
                ItemsManager.UseItem(_secondTrinket.Name);
                Logging.WriteFight("Use Second Trinket Slot");
                return;
            }
            if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseBerserking)
            {
                Berserking.Launch();
                return;
            }
            if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseBloodFury)
            {
                BloodFury.Launch();
                return;
            }
            if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseLifeblood)
            {
                Lifeblood.Launch();
                return;
            }
            if (_engineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseEngGlove)
            {
                Logging.WriteFight("Use Engineering Gloves.");
                Lua.RunMacroText("/use 10");
                _engineeringTimer = new Timer(1000*60);
                return;
            }
            if (PowerInfusion.IsSpellUsable && PowerInfusion.KnownSpell
                && _mySettings.UsePowerInfusion && ObjectManager.Target.GetDistance < 41)
            {
                PowerInfusion.Launch();
                return;
            }
            if (Shadowfiend.IsSpellUsable && Shadowfiend.KnownSpell && Shadowfiend.IsHostileDistanceGood
                && _mySettings.UseShadowfiend)
            {
                Shadowfiend.Launch();
            }
        }

        private void DPSCycle()
        {
            if (ObjectManager.Me.ManaPercentage <= _mySettings.UseArcaneTorrentForResourceAtPercentage && ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable
                && _mySettings.UseArcaneTorrentForResource)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (ObjectManager.GetNumberAttackPlayer() > 2 && Cascade.IsSpellUsable && Cascade.KnownSpell
                && Cascade.IsHostileDistanceGood && _mySettings.UseCascade)
            {
                Cascade.Launch();
                return;
            }
            if (ObjectManager.GetNumberAttackPlayer() > 2 && DivineStar.IsSpellUsable && DivineStar.KnownSpell
                && DivineStar.IsHostileDistanceGood && _mySettings.UseDivineStar)
            {
                DivineStar.Launch();
                return;
            }
            if (ObjectManager.GetNumberAttackPlayer() > 2 && Halo.IsSpellUsable && Halo.KnownSpell
                && Halo.IsHostileDistanceGood && _mySettings.UseHalo)
            {
                Halo.Launch();
                return;
            }
            if (ObjectManager.GetNumberAttackPlayer() > 4 && MindSear.IsSpellUsable && MindSear.KnownSpell
                && MindSear.IsHostileDistanceGood && !ObjectManager.Me.IsCast && _mySettings.UseMindSear)
            {
                MindSear.Launch();
                return;
            }
            if (ShadowWordDeath.IsSpellUsable && ShadowWordDeath.IsHostileDistanceGood && ShadowWordDeath.KnownSpell
                && ObjectManager.Target.HealthPercent < 20 && _mySettings.UseShadowWordDeath)
            {
                ShadowWordDeath.Launch();
                return;
            }
            if (ShadowWordPain.KnownSpell && ShadowWordPain.IsSpellUsable
                && ShadowWordPain.IsHostileDistanceGood && _mySettings.UseShadowWordPain
                && (!ShadowWordPain.TargetHaveBuff || ShadowWordPainTimer.IsReady))
            {
                ShadowWordPain.Launch();
                ShadowWordPainTimer = new Timer(1000*14);
                return;
            }
            if (ShadowWordInsanity.KnownSpell && ShadowWordInsanity.IsHostileDistanceGood
                && ShadowWordInsanity.IsSpellUsable && _mySettings.UseShadowWordInsanity)
            {
                ShadowWordInsanity.Launch();
                ShadowWordPainTimer = new Timer(0);
                return;
            }
            if (VampiricTouch.KnownSpell && VampiricTouch.IsSpellUsable
                && VampiricTouch.IsHostileDistanceGood && _mySettings.UseVampiricTouch
                && (!VampiricTouch.TargetHaveBuff || VampiricTouchTimer.IsReady))
            {
                VampiricTouch.Launch();
                VampiricTouchTimer = new Timer(1000*11);
                return;
            }
            if (MindSpike.IsSpellUsable && MindSpike.IsHostileDistanceGood && MindSpike.KnownSpell &&
                ObjectManager.Me.HaveBuff(87160) && _mySettings.UseMindSpike)
            {
                MindSpike.Launch();
                return;
            }
            if (DevouringPlague.KnownSpell && DevouringPlague.IsSpellUsable && DevouringPlague.IsHostileDistanceGood &&
                ObjectManager.Me.ShadowOrbs == 3 && _mySettings.UseDevouringPlague
                && (!DevouringPlague.TargetHaveBuff || DevouringPlagueTimer.IsReady))
            {
                DevouringPlague.Launch();
                DevouringPlagueTimer = new Timer(1000*3);
                return;
            }
            if (MindBlast.KnownSpell && MindBlast.IsSpellUsable && MindBlast.IsHostileDistanceGood
                && ObjectManager.Me.ShadowOrbs < 3 && _mySettings.UseMindBlast)
            {
                MindBlast.Launch();
                return;
            }
            if (_mySettings.UseMindFlay && MindFlay.KnownSpell && MindFlay.IsHostileDistanceGood && MindFlay.IsSpellUsable && !ObjectManager.Me.IsCast
                && (ShadowWordPain.TargetHaveBuff || !_mySettings.UseShadowWordPain || !ShadowWordPain.KnownSpell) &&
                (VampiricTouch.TargetHaveBuff || !_mySettings.UseVampiricTouch || !VampiricTouch.KnownSpell)
                && !ObjectManager.Me.HaveBuff(87160) && ObjectManager.GetNumberAttackPlayer() < 5
                && ObjectManager.Me.ShadowOrbs != 3)
            {
                MindFlay.Launch();
                return;
            }
            // Blizzard API Calls for Mind Flay using Smite Function
            if (_mySettings.UseMindFlay && Smite.KnownSpell && Smite.IsHostileDistanceGood && Smite.IsSpellUsable && !ObjectManager.Me.IsCast
                && (ShadowWordPain.TargetHaveBuff || !_mySettings.UseShadowWordPain || !ShadowWordPain.KnownSpell) &&
                (VampiricTouch.TargetHaveBuff || !_mySettings.UseVampiricTouch || !VampiricTouch.KnownSpell)
                && !ObjectManager.Me.HaveBuff(87160) && ObjectManager.GetNumberAttackPlayer() < 5
                && ObjectManager.Me.ShadowOrbs != 3)
            {
                Smite.Launch();
            }
        }

        private void Patrolling()
        {
            if (ObjectManager.Me.IsMounted) return;
            Buff();
            Heal();
        }

        #region Nested type: PriestShadowSettings

        [Serializable]
        public class PriestShadowSettings : Settings
        {
            public bool DoAvoidMelee = false;
            public int DoAvoidMeleeDistance = 0;
            public bool UseAlchFlask = true;
            public bool UseArcaneTorrentForDecast = true;
            public int UseArcaneTorrentForDecastAtPercentage = 100;
            public bool UseArcaneTorrentForResource = true;
            public int UseArcaneTorrentForResourceAtPercentage = 80;
            public bool UseBerserking = true;
            public bool UseBloodFury = true;
            public bool UseCascade = true;
            public bool UseDesperatePrayer = true;
            public int UseDesperatePrayerAtPercentage = 65;
            public bool UseDevouringPlague = true;
            public bool UseDispersionHealth = true;
            public int UseDispersionHealthAtPercentage = 20;
            public bool UseDispersionMana = true;
            public int UseDispersionManaAtPercentage = 60;
            public bool UseDivineStar = true;
            public bool UseEngGlove = true;
            public bool UseFlashHealInCombat = true;
            public int UseFlashHealInCombatAtPercentage = 60;
            public bool UseFlashHealNonCombat = true;
            public int UseFlashHealNonCombatAtPercentage = 95;
            public bool UseGiftoftheNaaru = true;
            public int UseGiftoftheNaaruAtPercentage = 80;
            public bool UseHalo = true;
            public bool UseHymnofHope = true;
            public int UseHymnofHopeAtPercentage = 40;
            public bool UseInnerFire = true;
            public bool UseInnerWill = false;
            public bool UseLevitate = false;
            public bool UseLifeblood = true;
            public bool UseLowCombat = true;
            public bool UseMindBlast = true;
            public bool UseMindFlay = true;
            public bool UseMindSear = true;
            public bool UseMindSpike = true;
            public bool UsePowerInfusion = true;
            public bool UsePowerWordFortitude = true;
            public bool UsePowerWordShield = true;
            public int UsePowerWordShieldAtPercentage = 100;
            public bool UsePrayerofMending = true;
            public int UsePrayerofMendingAtPercentage = 50;
            public bool UsePsychicHorror = true;
            public int UsePsychicHorrorAtPercentage = 100;
            public bool UsePsychicScream = true;
            public int UsePsychicScreamAtPercentage = 20;
            public bool UsePsyfiend = true;
            public int UsePsyfiendAtPercentage = 35;
            public bool UseRenew = true;
            public int UseRenewAtPercentage = 90;
            public bool UseShadowWordDeath = true;
            public bool UseShadowWordInsanity = true;
            public bool UseShadowWordPain = true;
            public bool UseShadowfiend = true;
            public bool UseShadowform = true;
            public bool UseSilence = true;
            public int UseSilenceAtPercentage = 100;
            public bool UseSpectralGuise = true;
            public int UseSpectralGuiseAtPercentage = 70;
            public bool UseStoneform = true;
            public int UseStoneformAtPercentage = 80;
            public bool UseTrinketOne = true;
            public bool UseTrinketTwo = true;
            public bool UseVampiricEmbrace = true;
            public int UseVampiricEmbraceAtPercentage = 80;
            public bool UseVampiricTouch = true;
            public bool UseVoidTendrils = true;
            public int UseVoidTendrilsAtPercentage = 35;
            public bool UseWarStomp = true;
            public int UseWarStompAtPercentage = 80;

            public PriestShadowSettings()
            {
                ConfigWinForm(new Point(500, 400), "Shadow Priest Settings");
                /* Professions and Racials */
                AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Berserking", "UseBerserking", "Professions and Racials");
                AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions and Racials");
                AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions and Racials", "AtPercentage");
                AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions and Racials");
                AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions and Racials", "AtPercentage");
                AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions and Racials", "AtPercentage");
                /* Priest Buffs */
                AddControlInWinForm("Use Inner Fire", "UseInnerFire", "Priest Buffs");
                AddControlInWinForm("Use Inner Will", "UseInnerWill", "Priest Buffs");
                AddControlInWinForm("Use Levitate", "UseLevitate", "Priest Buffs");
                AddControlInWinForm("Use Power Word: Fortitude", "UsePowerWordFortitude", "Priest Buffs");
                AddControlInWinForm("Use Shadowform", "UseShadowform", "Priest Buffs");
                /* Offensive Spell */
                AddControlInWinForm("Use Cascade", "UseCascade", "Offensive Spell");
                AddControlInWinForm("Use Devouring Plague", "UseDevoringPlague", "Offensive Spell");
                AddControlInWinForm("Use DivineStar", "UseDivineStar", "Offensive Spell");
                AddControlInWinForm("Use Halo", "UseHalo", "Offensive Spell");
                AddControlInWinForm("Use Mind Blast", "UseMindBlast", "Offensive Spell");
                AddControlInWinForm("Use Mind Flay", "UseMindFlay", "Offensive Spell");
                AddControlInWinForm("Use Mind Sear", "UseMindSear", "Offensive Spell");
                AddControlInWinForm("Use Mind Spike", "UseMindSpike", "Offensive Spell");
                AddControlInWinForm("Use Shadow Word: Death", "UseShadowWordDeath", "Offensive Spell");
                AddControlInWinForm("Use Shadow Word: Insanity", "UseShadowWordInsanity", "Offensive Spell");
                AddControlInWinForm("Use Shadow Word: Pain", "UseShadowWordPain", "Offensive Spell");
                AddControlInWinForm("Use Vampiric Touch", "UseVampiricTouch", "Offensive Spell");
                /* Offensive Cooldown */
                AddControlInWinForm("Use Power Infusion", "UsePowerInfusion", "Offensive Cooldown");
                AddControlInWinForm("Use Shadowfiend", "UseShadowfiend", "Offensive Cooldown");
                /* Defensive Cooldown */
                AddControlInWinForm("Use Dispersion when health low", "UseDispersionHealth", "Defensive Cooldown",
                                    "AtPercentage");
                AddControlInWinForm("Use Dispersion when mana low", "UseDispersionMana", "Defensive Cooldown",
                                    "AtPercentage");
                AddControlInWinForm("Use Power Word: Shield", "UsePowerWordShield", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Psychic Horror", "UsePsychicHorror", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Psychic Scream", "UsePsychicScream", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Psyfiend", "UsePsyfiend", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Silence", "UseSilence", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Spectral Guise", "UseSpectralGuise", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Void Tendrils", "UseVoidTendrils", "Defensive Cooldown", "AtPercentage");
                /* Healing Spell */
                AddControlInWinForm("Use Desperate Prayer", "UseDesperatePrayer", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Flash Heal for Regeneration after combat", "UseFlashHealNonCombat", "Healing Spell",
                                    "AtPercentage");
                AddControlInWinForm("Use Flash Heal during combat", "UseFlashHealInCombat", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Hymn of Hope", "UseHymnofHope", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Prayer of Mending", "UsePrayerofMending", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Renew", "UseRenew", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Vampiric Embrace", "UseVampiricEmbrace", "Healing Spell", "AtPercentage");
                /* Game Settings */
                AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
                AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
                AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
                AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
                AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
                AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
                AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
            }

            public static PriestShadowSettings CurrentSetting { get; set; }

            public static PriestShadowSettings GetSettings()
            {
                string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Priest_Shadow.xml";
                if (File.Exists(currentSettingsFile))
                {
                    return
                        CurrentSetting = Load<PriestShadowSettings>(currentSettingsFile);
                }
                return new PriestShadowSettings();
            }
        }

        #endregion
    }

    public class PriestDiscipline
    {
        private readonly PriestDisciplineSettings _mySettings = PriestDisciplineSettings.GetSettings();

        #region General Timers & Variables

        private readonly WoWItem _firstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
        private readonly WoWItem _secondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);
        private Timer _engineeringTimer = new Timer(0);
        private Timer _onCd = new Timer(0);

        #endregion

        #region Professions and Racials

        public readonly Spell Alchemy = new Spell("Alchemy");
        public readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
        public readonly Spell Berserking = new Spell("Berserking");
        public readonly Spell BloodFury = new Spell("Blood Fury");
        public readonly Spell Engineering = new Spell("Engineering");
        public readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
        public readonly Spell Lifeblood = new Spell("Lifeblood");
        public readonly Spell Stoneform = new Spell("Stoneform");
        public readonly Spell WarStomp = new Spell("War Stomp");

        #endregion

        #region Priest Buffs

        public readonly Spell InnerFire = new Spell("Inner Fire");
        public readonly Spell InnerWill = new Spell("Inner Will");
        public readonly Spell Levitate = new Spell("Levitate");
        public readonly Spell PowerWordFortitude = new Spell("Power Word: Fortitude");
        private Timer LevitateTimer = new Timer(0);

        #endregion

        #region Offensive Spell

        public readonly Spell Cascade = new Spell("Cascade");
        public readonly Spell DivineStar = new Spell("Divine Star");
        public readonly Spell Halo = new Spell("Halo");
        public readonly Spell MindSear = new Spell("Mind Sear");
        public readonly Spell PowerWordSolace = new Spell("Power Word: Solace");
        public readonly Spell ShadowWordDeath = new Spell("Shadow Word: Death");
        public readonly Spell ShadowWordPain = new Spell("Shadow Word: Pain");
        public readonly Spell Smite = new Spell("Smite");
        private Timer ShadowWordPainTimer = new Timer(0);

        #endregion

        #region Healing Cooldown

        public readonly Spell Archangel = new Spell("Archangel");
        public readonly Spell InnerFocus = new Spell("Inner Focus");
        public readonly Spell PowerInfusion = new Spell("Power Infusion");
        public readonly Spell Shadowfiend = new Spell("Shadowfiend");

        #endregion

        #region Defensive Cooldown

        public readonly Spell PainSuppression = new Spell("Pain Suppression");
        public readonly Spell PowerWordBarrier = new Spell("Power Word: Barrier");
        public readonly Spell PowerWordShield = new Spell("Power Word: Shield");
        public readonly Spell PsychicScream = new Spell("Psychic Scream");
        public readonly Spell Psyfiend = new Spell("Psyfiend");
        public readonly Spell SpectralGuise = new Spell("Spectral Guise");
        public readonly Spell VoidTendrils = new Spell("Void Tendrils");

        #endregion

        #region Healing Spell

        public readonly Spell DesperatePrayer = new Spell("Desperate Prayer");
        public readonly Spell FlashHeal = new Spell("Flash Heal");
        public readonly Spell GreaterHeal = new Spell("Greater Heal");
        public readonly Spell HealSpell = new Spell("Heal");
        public readonly Spell HolyFire = new Spell("Holy Fire");
        public readonly Spell HymnofHope = new Spell("Hymn of Hope");
        public readonly Spell Penance = new Spell("Penance");
        public readonly Spell PrayerofHealing = new Spell("Prayer of Healing");
        public readonly Spell PrayerofMending = new Spell("Prayer of Mending");
        public readonly Spell Renew = new Spell("Renew");
        public readonly Spell SpiritShell = new Spell("Spirit Shell");
        private Timer RenewTimer = new Timer(0);

        #endregion

        public PriestDiscipline()
        {
            Main.InternalRange = 30.0f;
            UInt64 lastTarget = 0;

            while (Main.InternalLoop)
            {
                try
                {
                    if (!ObjectManager.Me.IsDead)
                    {
                        if (!ObjectManager.Me.IsMounted)
                        {
                            BuffLevitate();
                            if (Fight.InFight && ObjectManager.Me.Target > 0)
                            {
                                if (ObjectManager.Me.Target != lastTarget &&
                                    (HolyFire.IsHostileDistanceGood || ShadowWordPain.IsHostileDistanceGood))
                                {
                                    Pull();
                                    lastTarget = ObjectManager.Me.Target;
                                }
                                else
                                {
                                    if (ObjectManager.Target.GetDistance < 41)
                                        Combat();
                                }
                                break;
                            }
                            if (!ObjectManager.Me.IsCast)
                                Patrolling();
                        }
                    }
                    else
                        Thread.Sleep(500);
                }
                catch
                {
                }
                Thread.Sleep(150);
            }
        }

        private void BuffLevitate()
        {
            if (!ObjectManager.Me.InCombat && Levitate.KnownSpell && Levitate.IsSpellUsable && _mySettings.UseLevitate
                && (!Levitate.HaveBuff || LevitateTimer.IsReady))
            {
                Levitate.Launch();
                LevitateTimer = new Timer(1000*60*9);
            }
        }

        private void Pull()
        {
            if (HolyFire.IsSpellUsable && HolyFire.KnownSpell && HolyFire.IsHostileDistanceGood
                && _mySettings.UseHolyFire)
            {
                HolyFire.Launch();
                return;
            }
            else
            {
                if (ShadowWordPain.IsSpellUsable && ShadowWordPain.KnownSpell && ShadowWordPain.IsHostileDistanceGood
                    && _mySettings.UseShadowWordPain)
                {
                    ShadowWordPain.Launch();
                    ShadowWordPainTimer = new Timer(1000*14);
                    return;
                }
            }
        }

        private void Combat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            if (_onCd.IsReady)
                DefenseCycle();
            DPSCycle();
            Heal();
            Decast();
            DPSCycle();
            HealingBurst();
            DPSCycle();
        }

        private void Buff()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (PowerWordFortitude.KnownSpell && PowerWordFortitude.IsSpellUsable &&
                !PowerWordFortitude.HaveBuff && _mySettings.UsePowerWordFortitude)
            {
                PowerWordFortitude.Launch();
                return;
            }
            if (InnerFire.KnownSpell && InnerFire.IsSpellUsable && !InnerFire.HaveBuff
                && _mySettings.UseInnerFire)
            {
                InnerFire.Launch();
                return;
            }
            if (InnerWill.KnownSpell && InnerWill.IsSpellUsable && !InnerWill.HaveBuff
                && !_mySettings.UseInnerFire && _mySettings.UseInnerWill)
            {
                InnerWill.Launch();
                return;
            }
            if (_mySettings.UseAlchFlask && !ObjectManager.Me.HaveBuff(79638) && !ObjectManager.Me.HaveBuff(79640) && !ObjectManager.Me.HaveBuff(79639)
                && !ItemsManager.IsItemOnCooldown(75525) && ItemsManager.GetItemCountByIdLUA(75525) > 0)
            {
                ItemsManager.UseItem(75525);
            }
        }

        private void AvoidMelee()
        {
            if (ObjectManager.Target.GetDistance < _mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
            {
                Logging.WriteFight("Too Close. Moving Back");
                var maxTimeTimer = new Timer(1000*2);
                MovementsAction.MoveBackward(true);
                while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                    Thread.Sleep(300);
                MovementsAction.MoveBackward(false);
                if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
                {
                    MovementsAction.MoveForward(true);
                    Thread.Sleep(1000);
                    MovementsAction.MoveForward(false);
                    MovementManager.Face(ObjectManager.Target.Position);
                }
            }
        }

        private void DefenseCycle()
        {
            if (ObjectManager.Me.HealthPercent <= _mySettings.UsePsychicScreamAtPercentage && PsychicScream.IsSpellUsable &&
                PsychicScream.KnownSpell
                && _mySettings.UsePsychicScream)
            {
                PsychicScream.Launch();
                _onCd = new Timer(1000*8);
                return;
            }
            if (ObjectManager.GetNumberAttackPlayer() >= 2 &&
                ObjectManager.Me.HealthPercent <= _mySettings.UseVoidTendrilsAtPercentage &&
                VoidTendrils.IsSpellUsable && VoidTendrils.KnownSpell && _mySettings.UseVoidTendrils)
            {
                VoidTendrils.Launch();
                _onCd = new Timer(1000*10);
                return;
            }
            if (ObjectManager.GetNumberAttackPlayer() >= 2 &&
                ObjectManager.Me.HealthPercent <= _mySettings.UsePsyfiendAtPercentage &&
                Psyfiend.IsSpellUsable && Psyfiend.KnownSpell && _mySettings.UsePsyfiend)
            {
                Psyfiend.Launch();
                _onCd = new Timer(1000*10);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseSpectralGuiseAtPercentage &&
                SpectralGuise.IsSpellUsable && SpectralGuise.KnownSpell
                && _mySettings.UseSpectralGuise)
            {
                if (Renew.KnownSpell && Renew.IsSpellUsable && _mySettings.UseRenew)
                {
                    Renew.Launch();
                    Thread.Sleep(1500);
                }
                SpectralGuise.Launch();
                _onCd = new Timer(1000*3);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UsePowerWordBarrierAtPercentage &&
                PowerWordBarrier.IsSpellUsable && PowerWordBarrier.KnownSpell
                && _mySettings.UsePowerWordBarrier)
            {
                SpellManager.CastSpellByIDAndPosition(62618, ObjectManager.Me.Position);
                _onCd = new Timer(1000*10);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UsePainSuppressionAtPercentage &&
                PainSuppression.IsSpellUsable && PainSuppression.KnownSpell
                && _mySettings.UsePainSuppression)
            {
                PainSuppression.Launch();
                _onCd = new Timer(1000*8);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseStoneformAtPercentage &&
                Stoneform.IsSpellUsable && Stoneform.KnownSpell
                && _mySettings.UseStoneform)
            {
                Stoneform.Launch();
                _onCd = new Timer(1000*8);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseWarStompAtPercentage &&
                WarStomp.IsSpellUsable && WarStomp.KnownSpell
                && _mySettings.UseWarStomp)
            {
                WarStomp.Launch();
                _onCd = new Timer(1000*2);
            }
        }

        private void Heal()
        {
            if (_mySettings.UseArcaneTorrentForResource && ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable
                && ObjectManager.Me.ManaPercentage <= _mySettings.UseArcaneTorrentForResourceAtPercentage)
            {
                ArcaneTorrent.Launch();
                return;
            }

            if (ObjectManager.Me.HealthPercent <= _mySettings.UseFlashHealNonCombatAtPercentage &&
                !ObjectManager.Me.InCombat
                && FlashHeal.KnownSpell && FlashHeal.IsSpellUsable && _mySettings.UseFlashHealNonCombat)
            {
                FlashHeal.Launch(false);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseInnerFocusAtPercentage && InnerFocus.KnownSpell &&
                InnerFocus.IsSpellUsable
                && _mySettings.UseInnerFocus && !InnerFocus.HaveBuff)
            {
                InnerFocus.Launch();
                return;
            }
            if (ObjectManager.Me.ManaPercentage <= _mySettings.UseHymnofHopeAtPercentage &&
                HymnofHope.KnownSpell
                && HymnofHope.IsSpellUsable && !ObjectManager.Me.InCombat &&
                _mySettings.UseHymnofHope)
            {
                HymnofHope.Launch(false);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseDesperatePrayerAtPercentage &&
                DesperatePrayer.KnownSpell && DesperatePrayer.IsSpellUsable
                && _mySettings.UseDesperatePrayer)
            {
                DesperatePrayer.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseFlashHealInCombatAtPercentage &&
                FlashHeal.KnownSpell && FlashHeal.IsSpellUsable
                && _mySettings.UseFlashHealInCombat)
            {
                FlashHeal.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseGreaterHealAtPercentage &&
                GreaterHeal.KnownSpell && GreaterHeal.IsSpellUsable
                && _mySettings.UseGreaterHeal)
            {
                GreaterHeal.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseGiftoftheNaaruAtPercentage &&
                GiftoftheNaaru.IsSpellUsable && GiftoftheNaaru.KnownSpell
                && _mySettings.UseGiftoftheNaaru)
            {
                GiftoftheNaaru.Launch();
                return;
            }
            if (PowerWordShield.KnownSpell && PowerWordShield.IsSpellUsable
                && !PowerWordShield.HaveBuff && _mySettings.UsePowerWordShield
                && !ObjectManager.Me.HaveBuff(6788) &&
                ObjectManager.Me.HealthPercent <= _mySettings.UsePowerWordShieldAtPercentage
                && (ObjectManager.Me.InCombat || ObjectManager.Me.GetMove))
            {
                PowerWordShield.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UsePrayerofHealingAtPercentage &&
                PrayerofHealing.KnownSpell && PrayerofHealing.IsSpellUsable
                && _mySettings.UsePrayerofHealing)
            {
                PrayerofHealing.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UsePrayerofMendingAtPercentage &&
                PrayerofMending.KnownSpell && PrayerofMending.IsSpellUsable
                && _mySettings.UsePrayerofMending)
            {
                PrayerofMending.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseHealAtPercentage &&
                HealSpell.KnownSpell && HealSpell.IsSpellUsable
                && (_mySettings.UseHeal || !GreaterHeal.KnownSpell))
            {
                HealSpell.Launch();
                return;
            }
            if (Renew.KnownSpell && Renew.IsSpellUsable && !Renew.HaveBuff &&
                ObjectManager.Me.HealthPercent <= _mySettings.UseRenewAtPercentage &&
                _mySettings.UseRenew)
            {
                Renew.Launch();
            }
        }

        private void Decast()
        {
            if (_mySettings.UseArcaneTorrentForDecast && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8 && ArcaneTorrent.IsSpellUsable
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && ObjectManager.Me.HealthPercent <= _mySettings.UseArcaneTorrentForDecastAtPercentage)
            {
                ArcaneTorrent.Launch();
            }
        }

        private void HealingBurst()
        {
            if (_mySettings.UseTrinketOne && !ItemsManager.IsItemOnCooldown(_firstTrinket.Entry) && ItemsManager.IsUsableItemById(_firstTrinket.Entry))
            {
                ItemsManager.UseItem(_firstTrinket.Name);
                Logging.WriteFight("Use First Trinket Slot");
            }

            if (_mySettings.UseTrinketTwo && !ItemsManager.IsItemOnCooldown(_secondTrinket.Entry) && ItemsManager.IsUsableItemById(_secondTrinket.Entry))
            {
                ItemsManager.UseItem(_secondTrinket.Name);
                Logging.WriteFight("Use Second Trinket Slot");
                return;
            }
            if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseBerserking)
            {
                Berserking.Launch();
                return;
            }
            if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseBloodFury)
            {
                BloodFury.Launch();
                return;
            }
            if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseLifeblood)
            {
                Lifeblood.Launch();
                return;
            }
            if (_engineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseEngGlove)
            {
                Logging.WriteFight("Use Engineering Gloves.");
                Lua.RunMacroText("/use 10");
                _engineeringTimer = new Timer(1000*60);
                return;
            }
            if (PowerInfusion.IsSpellUsable && PowerInfusion.KnownSpell
                && _mySettings.UsePowerInfusion && ObjectManager.Target.GetDistance < 41)
            {
                PowerInfusion.Launch();
                return;
            }
            if (Archangel.IsSpellUsable && Archangel.KnownSpell && ObjectManager.Me.BuffStack(81661) > 4
                && _mySettings.UseArchangel && ObjectManager.Target.GetDistance < 41)
            {
                Archangel.Launch();
                return;
            }
            if (SpiritShell.IsSpellUsable && SpiritShell.KnownSpell && ObjectManager.Me.HealthPercent > 80
                && _mySettings.UseSpiritShell && ObjectManager.Target.InCombat)
            {
                SpiritShell.Launch();
                return;
            }
            if (Shadowfiend.IsSpellUsable && Shadowfiend.KnownSpell && Shadowfiend.IsHostileDistanceGood
                && _mySettings.UseShadowfiend)
            {
                Shadowfiend.Launch();
            }
        }

        private void DPSCycle()
        {
            if (ObjectManager.Me.ManaPercentage <= _mySettings.UseArcaneTorrentForResourceAtPercentage && ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable
                && _mySettings.UseArcaneTorrentForResource)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (ObjectManager.GetNumberAttackPlayer() > 2 && Cascade.IsSpellUsable && Cascade.KnownSpell
                && Cascade.IsHostileDistanceGood && _mySettings.UseCascade)
            {
                Cascade.Launch();
                return;
            }
            if (ObjectManager.GetNumberAttackPlayer() > 2 && DivineStar.IsSpellUsable && DivineStar.KnownSpell
                && DivineStar.IsHostileDistanceGood && _mySettings.UseDivineStar)
            {
                DivineStar.Launch();
                return;
            }
            if (ObjectManager.GetNumberAttackPlayer() > 2 && Halo.IsSpellUsable && Halo.KnownSpell
                && Halo.IsHostileDistanceGood && _mySettings.UseHalo)
            {
                Halo.Launch();
                return;
            }
            if (ObjectManager.GetNumberAttackPlayer() > 4 && MindSear.IsSpellUsable && MindSear.KnownSpell
                && MindSear.IsHostileDistanceGood && !ObjectManager.Me.IsCast && _mySettings.UseMindSear)
            {
                MindSear.Launch();
                return;
            }
            if (ShadowWordDeath.IsSpellUsable && ShadowWordDeath.IsHostileDistanceGood && ShadowWordDeath.KnownSpell
                && ObjectManager.Target.HealthPercent < 20 && _mySettings.UseShadowWordDeath)
            {
                ShadowWordDeath.Launch();
                return;
            }
            if (ShadowWordPain.KnownSpell && ShadowWordPain.IsSpellUsable
                && ShadowWordPain.IsHostileDistanceGood && _mySettings.UseShadowWordPain
                && (!ShadowWordPain.TargetHaveBuff || ShadowWordPainTimer.IsReady))
            {
                ShadowWordPain.Launch();
                ShadowWordPainTimer = new Timer(1000*14);
                return;
            }
            if (PowerWordSolace.KnownSpell && PowerWordSolace.IsHostileDistanceGood
                && PowerWordSolace.IsSpellUsable && _mySettings.UsePowerWordSolace
                && ObjectManager.Me.ManaPercentage < 50)
            {
                PowerWordSolace.Launch();
                return;
            }
            if (Penance.IsSpellUsable && Penance.IsHostileDistanceGood && Penance.KnownSpell
                && _mySettings.UsePenance)
            {
                Penance.Launch();
                return;
            }
            if (HolyFire.IsSpellUsable && HolyFire.IsHostileDistanceGood && HolyFire.KnownSpell
                && _mySettings.UseHolyFire)
            {
                HolyFire.Launch();
                return;
            }
            if (Smite.IsSpellUsable && Smite.KnownSpell && Smite.IsHostileDistanceGood
                && _mySettings.UseSmite && ShadowWordPain.TargetHaveBuff
                && ObjectManager.GetNumberAttackPlayer() < 5)
            {
                Smite.Launch();
            }
        }

        private void Patrolling()
        {
            if (ObjectManager.Me.IsMounted) return;
            Buff();
            Heal();
        }

        #region Nested type: PriestDisciplineSettings

        [Serializable]
        public class PriestDisciplineSettings : Settings
        {
            public bool DoAvoidMelee = false;
            public int DoAvoidMeleeDistance = 0;
            public bool UseAlchFlask = true;
            public bool UseArcaneTorrentForDecast = true;
            public int UseArcaneTorrentForDecastAtPercentage = 100;
            public bool UseArcaneTorrentForResource = true;
            public int UseArcaneTorrentForResourceAtPercentage = 80;
            public bool UseArchangel = true;
            public bool UseBerserking = true;
            public bool UseBloodFury = true;
            public bool UseCascade = true;
            public bool UseDesperatePrayer = true;
            public int UseDesperatePrayerAtPercentage = 65;
            public bool UseDivineStar = true;
            public bool UseEngGlove = true;
            public bool UseFlashHealInCombat = true;
            public int UseFlashHealInCombatAtPercentage = 60;
            public bool UseFlashHealNonCombat = true;
            public int UseFlashHealNonCombatAtPercentage = 95;
            public bool UseGiftoftheNaaru = true;
            public int UseGiftoftheNaaruAtPercentage = 80;
            public bool UseGreaterHeal = true;
            public int UseGreaterHealAtPercentage = 70;
            public bool UseHalo = true;
            public bool UseHeal = true;
            public int UseHealAtPercentage = 70;
            public bool UseHolyFire = true;
            public bool UseHymnofHope = true;
            public int UseHymnofHopeAtPercentage = 40;
            public bool UseInnerFire = true;
            public bool UseInnerFocus = true;
            public int UseInnerFocusAtPercentage = 90;
            public bool UseInnerWill = false;
            public bool UseLevitate = false;
            public bool UseLifeblood = true;
            public bool UseMindSear = true;
            public bool UsePainSuppression = true;
            public int UsePainSuppressionAtPercentage = 70;
            public bool UsePenance = true;
            public bool UsePowerInfusion = true;
            public bool UsePowerWordBarrier = true;
            public int UsePowerWordBarrierAtPercentage = 60;
            public bool UsePowerWordFortitude = true;
            public bool UsePowerWordShield = true;
            public int UsePowerWordShieldAtPercentage = 100;
            public bool UsePowerWordSolace = true;
            public bool UsePrayerofHealing = false;
            public int UsePrayerofHealingAtPercentage = 50;
            public bool UsePrayerofMending = true;
            public int UsePrayerofMendingAtPercentage = 50;
            public bool UsePsychicScream = true;
            public int UsePsychicScreamAtPercentage = 20;
            public bool UsePsyfiend = true;
            public int UsePsyfiendAtPercentage = 35;
            public bool UseRenew = true;
            public int UseRenewAtPercentage = 90;
            public bool UseShadowWordDeath = true;
            public bool UseShadowWordPain = true;
            public bool UseShadowfiend = true;
            public bool UseSmite = true;
            public bool UseSpectralGuise = true;
            public int UseSpectralGuiseAtPercentage = 70;
            public bool UseSpiritShell = true;
            public bool UseStoneform = true;
            public int UseStoneformAtPercentage = 80;
            public bool UseTrinketOne = true;
            public bool UseTrinketTwo = true;
            public bool UseVoidTendrils = true;
            public int UseVoidTendrilsAtPercentage = 35;
            public bool UseWarStomp = true;
            public int UseWarStompAtPercentage = 80;

            public PriestDisciplineSettings()
            {
                ConfigWinForm(new Point(500, 400), "Discipline Priest Settings");
                /* Professions and Racials */
                AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Berserking", "UseBerserking", "Professions and Racials");
                AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions and Racials");
                AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions and Racials", "AtPercentage");
                AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions and Racials");
                AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions and Racials", "AtPercentage");
                AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions and Racials", "AtPercentage");
                /* Priest Buffs */
                AddControlInWinForm("Use Inner Fire", "UseInnerFire", "Priest Buffs");
                AddControlInWinForm("Use Inner Will", "UseInnerWill", "Priest Buffs");
                AddControlInWinForm("Use Levitate", "UseLevitate", "Priest Buffs");
                AddControlInWinForm("Use Power Word: Fortitude", "UsePowerWordFortitude", "Priest Buffs");
                /* Offensive Spell */
                AddControlInWinForm("Use Cascade", "UseCascade", "Offensive Spell");
                AddControlInWinForm("Use Divine Star", "Use Divine Star", "Offensive Spell");
                AddControlInWinForm("Use Halo", "UseHalo", "Offensive Spell");
                AddControlInWinForm("Use Holy Fire", "UseHolyFire", "Offensive Spell");
                AddControlInWinForm("Use Mind Sear", "UseMindSear", "Offensive Spell");
                AddControlInWinForm("Use Penance", "UsePenance", "Offensive Spell");
                AddControlInWinForm("Use Shadow Word: Death", "UseShadowWordDeath", "Offensive Spell");
                AddControlInWinForm("Use Shadow Word: Pain", "UseShadowWordPain", "Offensive Spell");
                AddControlInWinForm("Use Smite", "UseSmite", "Offensive Spell");
                /* Healing Cooldown */
                AddControlInWinForm("Use Archangel", "UseArchangel", "Healing Cooldown");
                AddControlInWinForm("Use Power Infusion", "UsePowerInfusion", "Healing Cooldown");
                AddControlInWinForm("Use Shadowfiend", "UseShadowfiend", "Healing Cooldown");
                AddControlInWinForm("Use Spirit Shell", "UseSpiritShell", "Healing Cooldown");
                /* Defensive Cooldown */
                AddControlInWinForm("Use Pain Suppression", "UsePainSuppression", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Power Word: Barrier", "UsePowerWordBarrier", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Power Word: Shield", "UsePowerWordShield", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Psychic Scream", "UsePsychicScream", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Psyfiend", "UsePsyfiend", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Spectral Guise", "UseSpectralGuise", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Void Tendrils", "UseVoidTendrils", "Defensive Cooldown", "AtPercentage");
                /* Healing Spell */
                AddControlInWinForm("Use Desperate Prayer", "UseDesperatePrayer", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Flash Heal for Regeneration after combat", "UseFlashHealNonCombat", "Healing Spell",
                                    "AtPercentage");
                AddControlInWinForm("Use Flash Heal during combat", "UseFlashHealInCombat", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Greater Heal", "UseGreaterHeal", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Heal", "UseHeal", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Hymn of Hope", "UseHymnofHope", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Inner Focus", "UseInnerFocus", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Prayer of Mending", "UsePrayerofMending", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Renew", "UseRenew", "Healing Spell", "AtPercentage");
                /* Game Settings */
                AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
                AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
                AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
                AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
                AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
                AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
            }

            public static PriestDisciplineSettings currentSetting { get; set; }

            public static PriestDisciplineSettings GetSettings()
            {
                string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Priest_Discipline.xml";
                if (File.Exists(currentSettingsFile))
                {
                    return
                        currentSetting = Load<PriestDisciplineSettings>(currentSettingsFile);
                }
                return new PriestDisciplineSettings();
            }
        }

        #endregion
    }

    public class PriestHoly
    {
        private readonly PriestHolySettings _mySettings = PriestHolySettings.GetSettings();

        #region General Timers & Variables

        private readonly WoWItem _firstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
        private readonly WoWItem _secondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);
        private Timer _engineeringTimer = new Timer(0);
        private Timer _onCd = new Timer(0);

        #endregion

        #region Professions and Racials

        public readonly Spell Alchemy = new Spell("Alchemy");
        public readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
        public readonly Spell Berserking = new Spell("Berserking");
        public readonly Spell BloodFury = new Spell("Blood Fury");
        public readonly Spell Engineering = new Spell("Engineering");
        public readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
        public readonly Spell Lifeblood = new Spell("Lifeblood");
        public readonly Spell Stoneform = new Spell("Stoneform");
        public readonly Spell WarStomp = new Spell("War Stomp");

        #endregion

        #region Priest Buffs

        public readonly Spell ChakraChastise = new Spell("Chakra: Chastise");
        public readonly Spell ChakraSanctuary = new Spell("Chakra: Sanctuary");
        public readonly Spell ChakraSerenity = new Spell("Chakra: Serenity");
        public readonly Spell InnerFire = new Spell("Inner Fire");
        public readonly Spell InnerWill = new Spell("Inner Will");
        public readonly Spell Levitate = new Spell("Levitate");
        public readonly Spell PowerWordFortitude = new Spell("Power Word: Fortitude");
        private Timer LevitateTimer = new Timer(0);

        #endregion

        #region Offensive Spell

        public readonly Spell Cascade = new Spell("Cascade");
        public readonly Spell DivineStar = new Spell("Divine Star");
        public readonly Spell Halo = new Spell("Halo");
        public readonly Spell HolyWordChastise = new Spell("Holy Word: Chastise");
        public readonly Spell MindSear = new Spell("Mind Sear");
        public readonly Spell PowerWordSolace = new Spell("Power Word: Solace");
        public readonly Spell ShadowWordDeath = new Spell("Shadow Word: Death");
        public readonly Spell ShadowWordPain = new Spell("Shadow Word: Pain");
        public readonly Spell Smite = new Spell("Smite");
        private Timer ShadowWordPainTimer = new Timer(0);

        #endregion

        #region Healing Cooldown

        public readonly Spell DivineHymn = new Spell("Divine Hymn");
        public readonly Spell LightWell = new Spell("Light Well");
        public readonly Spell PowerInfusion = new Spell("Power Infusion");
        public readonly Spell Shadowfiend = new Spell("Shadowfiend");

        #endregion

        #region Defensive Cooldown

        public readonly Spell GuardianSpirit = new Spell("Guardian Spirit");
        public readonly Spell PowerWordShield = new Spell("Power Word: Shield");
        public readonly Spell PsychicScream = new Spell("Psychic Scream");
        public readonly Spell Psyfiend = new Spell("Psyfiend");
        public readonly Spell SpectralGuise = new Spell("Spectral Guise");
        public readonly Spell VoidTendrils = new Spell("Void Tendrils");

        #endregion

        #region Healing Spell

        public readonly Spell CircleofHealing = new Spell("Circle of Healing");
        public readonly Spell DesperatePrayer = new Spell("Desperate Prayer");
        public readonly Spell FlashHeal = new Spell("Flash Heal");
        public readonly Spell GreaterHeal = new Spell("Greater Heal");
        public readonly Spell HealSpell = new Spell("Heal");
        public readonly Spell HolyFire = new Spell("Holy Fire");
        public readonly Spell HymnofHope = new Spell("Hymn of Hope");
        public readonly Spell PrayerofHealing = new Spell("Prayer of Healing");
        public readonly Spell PrayerofMending = new Spell("Prayer of Mending");
        public readonly Spell Renew = new Spell("Renew");
        private Timer RenewTimer = new Timer(0);

        #endregion

        public PriestHoly()
        {
            Main.InternalRange = 30.0f;
            UInt64 lastTarget = 0;

            while (Main.InternalLoop)
            {
                try
                {
                    if (!ObjectManager.Me.IsDead)
                    {
                        if (!ObjectManager.Me.IsMounted)
                        {
                            BuffLevitate();
                            if (Fight.InFight && ObjectManager.Me.Target > 0)
                            {
                                if (ObjectManager.Me.Target != lastTarget &&
                                    (HolyFire.IsHostileDistanceGood || ShadowWordPain.IsHostileDistanceGood))
                                {
                                    Pull();
                                    lastTarget = ObjectManager.Me.Target;
                                }
                                else
                                {
                                    if (ObjectManager.Target.GetDistance < 41)
                                        Combat();
                                }
                                break;
                            }
                            if (!ObjectManager.Me.IsCast)
                                Patrolling();
                        }
                    }
                    else
                        Thread.Sleep(500);
                }
                catch
                {
                }
                Thread.Sleep(150);
            }
        }

        private void BuffLevitate()
        {
            if (!ObjectManager.Me.InCombat && Levitate.KnownSpell && Levitate.IsSpellUsable && _mySettings.UseLevitate
                && (!Levitate.HaveBuff || LevitateTimer.IsReady))
            {
                Levitate.Launch();
                LevitateTimer = new Timer(1000*60*9);
            }
        }

        private void Pull()
        {
            if (HolyFire.IsSpellUsable && HolyFire.KnownSpell && HolyFire.IsHostileDistanceGood
                && _mySettings.UseHolyFire)
            {
                HolyFire.Launch();
                return;
            }
            else
            {
                if (ShadowWordPain.IsSpellUsable && ShadowWordPain.KnownSpell && ShadowWordPain.IsHostileDistanceGood
                    && _mySettings.UseShadowWordPain)
                {
                    ShadowWordPain.Launch();
                    ShadowWordPainTimer = new Timer(1000*14);
                    return;
                }
            }
        }

        private void Combat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            if (_onCd.IsReady)
                DefenseCycle();
            DPSCycle();
            Heal();
            Decast();
            DPSCycle();
            HealingBurst();
            DPSCycle();
        }

        private void Buff()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (PowerWordFortitude.KnownSpell && PowerWordFortitude.IsSpellUsable &&
                !PowerWordFortitude.HaveBuff && _mySettings.UsePowerWordFortitude)
            {
                PowerWordFortitude.Launch();
                return;
            }
            if (InnerFire.KnownSpell && InnerFire.IsSpellUsable && !InnerFire.HaveBuff
                && _mySettings.UseInnerFire)
            {
                InnerFire.Launch();
                return;
            }
            if (InnerWill.KnownSpell && InnerWill.IsSpellUsable && !InnerWill.HaveBuff
                && !_mySettings.UseInnerFire && _mySettings.UseInnerWill)
            {
                InnerWill.Launch();
                return;
            }
            if (ChakraChastise.KnownSpell && ChakraChastise.IsSpellUsable && !ChakraChastise.HaveBuff
                && _mySettings.UseChakraChastise)
            {
                ChakraChastise.Launch();
                return;
            }
            if (ChakraSanctuary.KnownSpell && ChakraSanctuary.IsSpellUsable && !ChakraSanctuary.HaveBuff
                && !_mySettings.UseChakraChastise && _mySettings.UseChakraSanctuary)
            {
                ChakraSanctuary.Launch();
                return;
            }
            if (ChakraSerenity.KnownSpell && ChakraSerenity.IsSpellUsable && !ChakraSerenity.HaveBuff
                && !_mySettings.UseChakraChastise && !_mySettings.UseChakraSanctuary && _mySettings.UseChakraSerenity)
            {
                ChakraSerenity.Launch();
                return;
            }
            if (_mySettings.UseAlchFlask && !ObjectManager.Me.HaveBuff(79638) && !ObjectManager.Me.HaveBuff(79640) && !ObjectManager.Me.HaveBuff(79639)
                && !ItemsManager.IsItemOnCooldown(75525) && ItemsManager.GetItemCountByIdLUA(75525) > 0)
            {
                ItemsManager.UseItem(75525);
            }
        }

        private void AvoidMelee()
        {
            if (ObjectManager.Target.GetDistance < _mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
            {
                Logging.WriteFight("Too Close. Moving Back");
                var maxTimeTimer = new Timer(1000*2);
                MovementsAction.MoveBackward(true);
                while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                    Thread.Sleep(300);
                MovementsAction.MoveBackward(false);
                if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
                {
                    MovementsAction.MoveForward(true);
                    Thread.Sleep(1000);
                    MovementsAction.MoveForward(false);
                    MovementManager.Face(ObjectManager.Target.Position);
                }
            }
        }

        private void DefenseCycle()
        {
            if (ObjectManager.Me.HealthPercent <= _mySettings.UsePsychicScreamAtPercentage && PsychicScream.IsSpellUsable &&
                PsychicScream.KnownSpell
                && _mySettings.UsePsychicScream)
            {
                PsychicScream.Launch();
                _onCd = new Timer(1000*8);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseGuardianSpiritAtPercentage && GuardianSpirit.KnownSpell &&
                GuardianSpirit.IsSpellUsable
                && _mySettings.UseGuardianSpirit)
            {
                GuardianSpirit.Launch();
                return;
            }
            if (ObjectManager.GetNumberAttackPlayer() >= 2 &&
                ObjectManager.Me.HealthPercent <= _mySettings.UseVoidTendrilsAtPercentage &&
                VoidTendrils.IsSpellUsable && VoidTendrils.KnownSpell && _mySettings.UseVoidTendrils)
            {
                VoidTendrils.Launch();
                _onCd = new Timer(1000*10);
                return;
            }
            if (ObjectManager.GetNumberAttackPlayer() >= 2 &&
                ObjectManager.Me.HealthPercent <= _mySettings.UsePsyfiendAtPercentage &&
                Psyfiend.IsSpellUsable && Psyfiend.KnownSpell && _mySettings.UsePsyfiend)
            {
                Psyfiend.Launch();
                _onCd = new Timer(1000*10);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseSpectralGuiseAtPercentage &&
                SpectralGuise.IsSpellUsable && SpectralGuise.KnownSpell
                && _mySettings.UseSpectralGuise)
            {
                if (Renew.KnownSpell && Renew.IsSpellUsable && _mySettings.UseRenew)
                {
                    Renew.Launch();
                    Thread.Sleep(1500);
                }
                SpectralGuise.Launch();
                _onCd = new Timer(1000*3);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseStoneformAtPercentage &&
                Stoneform.IsSpellUsable && Stoneform.KnownSpell
                && _mySettings.UseStoneform)
            {
                Stoneform.Launch();
                _onCd = new Timer(1000*8);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseWarStompAtPercentage &&
                WarStomp.IsSpellUsable && WarStomp.KnownSpell
                && _mySettings.UseWarStomp)
            {
                WarStomp.Launch();
                _onCd = new Timer(1000*2);
            }
        }

        private void Heal()
        {
            if (_mySettings.UseArcaneTorrentForResource && ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable
                && ObjectManager.Me.ManaPercentage <= _mySettings.UseArcaneTorrentForResourceAtPercentage)
            {
                ArcaneTorrent.Launch();
                return;
            }

            if (ObjectManager.Me.HealthPercent <= _mySettings.UseFlashHealNonCombatAtPercentage &&
                !ObjectManager.Me.InCombat
                && FlashHeal.KnownSpell && FlashHeal.IsSpellUsable && _mySettings.UseFlashHealNonCombat)
            {
                FlashHeal.Launch(false);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseDivineHymnAtPercentage && DivineHymn.KnownSpell &&
                DivineHymn.IsSpellUsable
                && _mySettings.UseDivineHymn)
            {
                DivineHymn.Launch();
                return;
            }
            if (ObjectManager.Me.ManaPercentage <= _mySettings.UseHymnofHopeAtPercentage &&
                HymnofHope.KnownSpell
                && HymnofHope.IsSpellUsable && !ObjectManager.Me.InCombat &&
                _mySettings.UseHymnofHope)
            {
                HymnofHope.Launch(false);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseDesperatePrayerAtPercentage &&
                DesperatePrayer.KnownSpell && DesperatePrayer.IsSpellUsable
                && _mySettings.UseDesperatePrayer)
            {
                DesperatePrayer.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseFlashHealInCombatAtPercentage &&
                FlashHeal.KnownSpell && FlashHeal.IsSpellUsable
                && _mySettings.UseFlashHealInCombat)
            {
                FlashHeal.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseGreaterHealAtPercentage &&
                GreaterHeal.KnownSpell && GreaterHeal.IsSpellUsable
                && _mySettings.UseGreaterHeal)
            {
                GreaterHeal.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseGiftoftheNaaruAtPercentage &&
                GiftoftheNaaru.IsSpellUsable && GiftoftheNaaru.KnownSpell
                && _mySettings.UseGiftoftheNaaru)
            {
                GiftoftheNaaru.Launch();
                return;
            }
            if (PowerWordShield.KnownSpell && PowerWordShield.IsSpellUsable
                && !PowerWordShield.HaveBuff && _mySettings.UsePowerWordShield
                && !ObjectManager.Me.HaveBuff(6788) &&
                ObjectManager.Me.HealthPercent <= _mySettings.UsePowerWordShieldAtPercentage
                && (ObjectManager.Me.InCombat || ObjectManager.Me.GetMove))
            {
                PowerWordShield.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UsePrayerofHealingAtPercentage &&
                PrayerofHealing.KnownSpell && PrayerofHealing.IsSpellUsable
                && _mySettings.UsePrayerofHealing)
            {
                PrayerofHealing.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseCircleofHealingAtPercentage &&
                CircleofHealing.KnownSpell && CircleofHealing.IsSpellUsable
                && _mySettings.UseCircleofHealing)
            {
                SpellManager.CastSpellByIDAndPosition(34861, ObjectManager.Me.Position);
                return;
            }
            if (ObjectManager.Me.HealthPercent <=
                _mySettings.UsePrayerofMendingAtPercentage &&
                PrayerofMending.KnownSpell && PrayerofMending.IsSpellUsable
                && _mySettings.UsePrayerofMending)
            {
                PrayerofMending.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseHealAtPercentage &&
                HealSpell.KnownSpell && HealSpell.IsSpellUsable
                && (_mySettings.UseHeal || !GreaterHeal.KnownSpell))
            {
                HealSpell.Launch();
                return;
            }
            if (LightWell.KnownSpell && LightWell.IsSpellUsable &&
                _mySettings.UseGlyphofLightspring
                &&
                ObjectManager.Me.HealthPercent <=
                _mySettings.UseLightWellAtPercentage && _mySettings.UseLightWell)
            {
                SpellManager.CastSpellByIDAndPosition(724,
                                                      ObjectManager.Target
                                                                   .Position);
                return;
            }
            if (Renew.KnownSpell && Renew.IsSpellUsable && !Renew.HaveBuff &&
                ObjectManager.Me.HealthPercent <=
                _mySettings.UseRenewAtPercentage && _mySettings.UseRenew)
            {
                Renew.Launch();
            }
        }

        private void Decast()
        {
            if (_mySettings.UseArcaneTorrentForDecast && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8 && ArcaneTorrent.IsSpellUsable
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe
                && ObjectManager.Me.HealthPercent <= _mySettings.UseArcaneTorrentForDecastAtPercentage)
            {
                ArcaneTorrent.Launch();
                return;
            }
        }

        private void HealingBurst()
        {
            if (_mySettings.UseTrinketOne && !ItemsManager.IsItemOnCooldown(_firstTrinket.Entry) && ItemsManager.IsUsableItemById(_firstTrinket.Entry))
            {
                ItemsManager.UseItem(_firstTrinket.Name);
                Logging.WriteFight("Use First Trinket Slot");
            }

            if (_mySettings.UseTrinketTwo && !ItemsManager.IsItemOnCooldown(_secondTrinket.Entry) && ItemsManager.IsUsableItemById(_secondTrinket.Entry))
            {
                ItemsManager.UseItem(_secondTrinket.Name);
                Logging.WriteFight("Use Second Trinket Slot");
                return;
            }
            if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseBerserking)
            {
                Berserking.Launch();
                return;
            }
            if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseBloodFury)
            {
                BloodFury.Launch();
                return;
            }
            if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseLifeblood)
            {
                Lifeblood.Launch();
                return;
            }
            if (_engineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseEngGlove)
            {
                Logging.WriteFight("Use Engineering Gloves.");
                Lua.RunMacroText("/use 10");
                _engineeringTimer = new Timer(1000*60);
                return;
            }
            if (PowerInfusion.IsSpellUsable && PowerInfusion.KnownSpell
                && _mySettings.UsePowerInfusion && ObjectManager.Target.GetDistance < 41)
            {
                PowerInfusion.Launch();
                return;
            }
            if (Shadowfiend.IsSpellUsable && Shadowfiend.KnownSpell && Shadowfiend.IsHostileDistanceGood
                && _mySettings.UseShadowfiend)
            {
                Shadowfiend.Launch();
            }
        }

        private void DPSCycle()
        {
            if (ObjectManager.Me.ManaPercentage <= _mySettings.UseArcaneTorrentForResourceAtPercentage && ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable
                && _mySettings.UseArcaneTorrentForResource)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (ObjectManager.GetNumberAttackPlayer() > 2 && Cascade.IsSpellUsable && Cascade.KnownSpell
                && Cascade.IsHostileDistanceGood && _mySettings.UseCascade)
            {
                Cascade.Launch();
                return;
            }
            if (ObjectManager.GetNumberAttackPlayer() > 2 && DivineStar.IsSpellUsable && DivineStar.KnownSpell
                && DivineStar.IsHostileDistanceGood && _mySettings.UseDivineStar)
            {
                DivineStar.Launch();
                return;
            }
            if (ObjectManager.GetNumberAttackPlayer() > 2 && Halo.IsSpellUsable && Halo.KnownSpell
                && Halo.IsHostileDistanceGood && _mySettings.UseHalo)
            {
                Halo.Launch();
                return;
            }
            if (ObjectManager.GetNumberAttackPlayer() > 4 && MindSear.IsSpellUsable && MindSear.KnownSpell
                && MindSear.IsHostileDistanceGood && !ObjectManager.Me.IsCast && _mySettings.UseMindSear)
            {
                MindSear.Launch();
                return;
            }
            if (ShadowWordDeath.IsSpellUsable && ShadowWordDeath.IsHostileDistanceGood && ShadowWordDeath.KnownSpell
                && ObjectManager.Target.HealthPercent < 20 && _mySettings.UseShadowWordDeath)
            {
                ShadowWordDeath.Launch();
                return;
            }
            if (ShadowWordPain.KnownSpell && ShadowWordPain.IsSpellUsable
                && ShadowWordPain.IsHostileDistanceGood && _mySettings.UseShadowWordPain
                && (!ShadowWordPain.TargetHaveBuff || ShadowWordPainTimer.IsReady))
            {
                ShadowWordPain.Launch();
                ShadowWordPainTimer = new Timer(1000*14);
                return;
            }
            if (PowerWordSolace.KnownSpell && PowerWordSolace.IsHostileDistanceGood
                && PowerWordSolace.IsSpellUsable && _mySettings.UsePowerWordSolace
                && ObjectManager.Me.ManaPercentage < 50)
            {
                PowerWordSolace.Launch();
                return;
            }
            if (HolyWordChastise.IsSpellUsable && HolyWordChastise.IsHostileDistanceGood && HolyWordChastise.KnownSpell
                && _mySettings.UseHolyWordChastise)
            {
                HolyWordChastise.Launch();
                return;
            }
            if (HolyFire.IsSpellUsable && HolyFire.IsHostileDistanceGood && HolyFire.KnownSpell
                && _mySettings.UseHolyFire)
            {
                HolyFire.Launch();
                return;
            }
            if (Smite.IsSpellUsable && Smite.KnownSpell && Smite.IsHostileDistanceGood
                && _mySettings.UseSmite && ShadowWordPain.TargetHaveBuff
                && ObjectManager.GetNumberAttackPlayer() < 5)
            {
                Smite.Launch();
            }
        }

        private void Patrolling()
        {
            if (ObjectManager.Me.IsMounted) return;
            Buff();
            Heal();
        }

        #region Nested type: PriestHolySettings

        [Serializable]
        public class PriestHolySettings : Settings
        {
            public bool DoAvoidMelee = false;
            public int DoAvoidMeleeDistance = 0;
            public bool UseAlchFlask = true;
            public bool UseArcaneTorrentForDecast = true;
            public int UseArcaneTorrentForDecastAtPercentage = 100;
            public bool UseArcaneTorrentForResource = true;
            public int UseArcaneTorrentForResourceAtPercentage = 80;
            public bool UseArchangel = true;
            public bool UseBerserking = true;
            public bool UseBloodFury = true;
            public bool UseCascade = true;
            public bool UseChakraChastise = true;
            public bool UseChakraSanctuary = false;
            public bool UseChakraSerenity = false;
            public bool UseCircleofHealing = false;
            public int UseCircleofHealingAtPercentage = 50;
            public bool UseDesperatePrayer = true;
            public int UseDesperatePrayerAtPercentage = 65;
            public bool UseDivineHymn = true;
            public int UseDivineHymnAtPercentage = 30;
            public bool UseDivineStar = true;
            public bool UseEngGlove = true;
            public bool UseFlashHealInCombat = true;
            public int UseFlashHealInCombatAtPercentage = 60;
            public bool UseFlashHealNonCombat = true;
            public int UseFlashHealNonCombatAtPercentage = 95;
            public bool UseGiftoftheNaaru = true;
            public int UseGiftoftheNaaruAtPercentage = 80;
            public bool UseGlyphofLightspring = false;
            public bool UseGreaterHeal = true;
            public int UseGreaterHealAtPercentage = 70;
            public bool UseGuardianSpirit = true;
            public int UseGuardianSpiritAtPercentage = 20;
            public bool UseHalo = true;
            public bool UseHeal = true;
            public int UseHealAtPercentage = 70;
            public bool UseHolyFire = true;
            public bool UseHolyWordChastise = true;
            public bool UseHymnofHope = true;
            public int UseHymnofHopeAtPercentage = 40;
            public bool UseInnerFire = true;
            public bool UseInnerWill = false;
            public bool UseLevitate = false;
            public bool UseLifeblood = true;
            public bool UseLightWell = true;
            public int UseLightWellAtPercentage = 95;
            public bool UseMindSear = true;
            public bool UsePowerInfusion = true;
            public bool UsePowerWordFortitude = true;
            public bool UsePowerWordShield = true;
            public int UsePowerWordShieldAtPercentage = 100;
            public bool UsePowerWordSolace = true;
            public bool UsePrayerofHealing = false;
            public int UsePrayerofHealingAtPercentage = 50;
            public bool UsePrayerofMending = true;
            public int UsePrayerofMendingAtPercentage = 50;
            public bool UsePsychicScream = true;
            public int UsePsychicScreamAtPercentage = 20;
            public bool UsePsyfiend = true;
            public int UsePsyfiendAtPercentage = 35;
            public bool UseRenew = true;
            public int UseRenewAtPercentage = 90;
            public bool UseShadowWordDeath = true;
            public bool UseShadowWordPain = true;
            public bool UseShadowfiend = true;
            public bool UseSmite = true;
            public bool UseSpectralGuise = true;
            public int UseSpectralGuiseAtPercentage = 70;
            public bool UseStoneform = true;
            public int UseStoneformAtPercentage = 80;
            public bool UseTrinketOne = true;
            public bool UseTrinketTwo = true;
            public bool UseVoidTendrils = true;
            public int UseVoidTendrilsAtPercentage = 35;
            public bool UseWarStomp = true;
            public int UseWarStompAtPercentage = 80;

            public PriestHolySettings()
            {
                ConfigWinForm(new Point(500, 400), "Holy Priest Settings");
                /* Professions and Racials */
                AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Berserking", "UseBerserking", "Professions and Racials");
                AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions and Racials");
                AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions and Racials", "AtPercentage");
                AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions and Racials");
                AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions and Racials", "AtPercentage");
                AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions and Racials", "AtPercentage");
                /* Priest Buffs */
                AddControlInWinForm("Use Chakra: Chastise", "UseChakraChastise", "Priest Buffs");
                AddControlInWinForm("Use Chakra: Sanctuary", "UseChakraSanctuary", "Priest Buffs");
                AddControlInWinForm("Use Chakra: Serenity", "UseChakraSerenity", "Priest Buffs");
                AddControlInWinForm("Use Inner Fire", "UseInnerFire", "Priest Buffs");
                AddControlInWinForm("Use Inner Will", "UseInnerWill", "Priest Buffs");
                AddControlInWinForm("Use Levitate", "UseLevitate", "Priest Buffs");
                AddControlInWinForm("Use Power Word: Fortitude", "UsePowerWordFortitude", "Priest Buffs");
                /* Offensive Spell */
                AddControlInWinForm("Use Cascade", "UseCascade", "Offensive Spell");
                AddControlInWinForm("Use Divine Star", "Use Divine Star", "Offensive Spell");
                AddControlInWinForm("Use Halo", "UseHalo", "Offensive Spell");
                AddControlInWinForm("Use Holy Fire", "UseHolyFire", "Offensive Spell");
                AddControlInWinForm("Use Holy Word: Chastise", "UseHolyWordChastise", "Offensive Spell");
                AddControlInWinForm("Use Mind Sear", "UseMindSear", "Offensive Spell");
                AddControlInWinForm("Use Shadow Word: Death", "UseShadowWordDeath", "Offensive Spell");
                AddControlInWinForm("Use Shadow Word: Pain", "UseShadowWordPain", "Offensive Spell");
                AddControlInWinForm("Use Smite", "UseSmite", "Offensive Spell");
                /* Healing Cooldown */
                AddControlInWinForm("Use Divine Hymn", "UseDivineHymn", "Healing Cooldown", "AtPercentage");
                AddControlInWinForm("Use Light Well", "UseLightWell", "Healing Cooldown", "AtPercentage");
                AddControlInWinForm("Use Power Infusion", "UsePowerInfusion", "Healing Cooldown");
                AddControlInWinForm("Use Shadowfiend", "UseShadowfiend", "Healing Cooldown");
                /* Defensive Cooldown */
                AddControlInWinForm("Use Guardian Spirit", "UseGuardianSpirit", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Power Word: Shield", "UsePowerWordShield", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Psychic Scream", "UsePsychicScream", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Psyfiend", "UsePsyfiend", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Spectral Guise", "UseSpectralGuise", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Void Tendrils", "UseVoidTendrils", "Defensive Cooldown", "AtPercentage");
                /* Healing Spell */
                AddControlInWinForm("Use Circle of Healing", "UseCircleofHealing", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Desperate Prayer", "UseDesperatePrayer", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Flash Heal for Regeneration after combat", "UseFlashHealNonCombat", "Healing Spell",
                                    "AtPercentage");
                AddControlInWinForm("Use Flash Heal during combat", "UseFlashHealInCombat", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Greater Heal", "UseGreaterHeal", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Heal", "UseHeal", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Hymn of Hope", "UseHymnofHope", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Prayer of Mending", "UsePrayerofMending", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Renew", "UseRenew", "Healing Spell");
                /* Game Settings */
                AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
                AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
                AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
                AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
                AddControlInWinForm("Use Glyph of Lightspring", "UseGlyphofLightspring", "Game Settings");
                AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
                AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
            }

            public static PriestHolySettings currentSetting { get; set; }

            public static PriestHolySettings GetSettings()
            {
                string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Priest_Holy.xml";
                if (File.Exists(currentSettingsFile))
                {
                    return
                        currentSetting = Load<PriestHolySettings>(currentSettingsFile);
                }
                return new PriestHolySettings();
            }
        }

        #endregion
    }

    #endregion

    #region Rogue

    public class RogueCombat
    {
        private readonly RogueCombatSettings _mySettings = RogueCombatSettings.GetSettings();

        #region General Timers & Variables

        private readonly WoWItem _firstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
        private readonly WoWItem _secondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);
        public int CP = 0;
        private Timer _engineeringTimer = new Timer(0);
        public int LC = 0;
        private Timer _onCd = new Timer(0);

        #endregion

        #region Professions & Racials

        public readonly Spell Alchemy = new Spell("Alchemy");
        public readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
        public readonly Spell Berserking = new Spell("Berserking");
        public readonly Spell BloodFury = new Spell("Blood Fury");
        public readonly Spell Engineering = new Spell("Engineering");
        public readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
        public readonly Spell Lifeblood = new Spell("Lifeblood");
        public readonly Spell Stoneform = new Spell("Stoneform");
        public readonly Spell WarStomp = new Spell("War Stomp");

        #endregion

        #region Rogue Buffs

        public readonly Spell BladeFlurry = new Spell("Blade Flurry");
        public readonly Spell BurstofSpeed = new Spell("Burst of Speed");
        public readonly Spell CripplingPoison = new Spell("Crippling Poison");
        public readonly Spell DeadlyPoison = new Spell("Deadly Poison");
        public readonly Spell LeechingPoison = new Spell("Leeching Poison");
        public readonly Spell MindnumbingPoison = new Spell("Mind-numbing Poison");
        public readonly Spell ParalyticPoison = new Spell("Paralytic Poison");
        public readonly Spell SliceandDice = new Spell("Slice and Dice");
        public readonly Spell Sprint = new Spell("Sprint");
        public readonly Spell Stealth = new Spell("Stealth");
        public readonly Spell WoundPoison = new Spell("Wound Poison");
        private Timer SliceandDiceTimer = new Timer(0);

        #endregion

        #region Offensive Spell

        public readonly Spell Ambush = new Spell("Ambush");
        public readonly Spell CrimsonTempest = new Spell("Crimson Tempest");
        public readonly Spell DeadlyThrow = new Spell("Deadly Throw");
        public readonly Spell Eviscerate = new Spell("Eviscerate");
        public readonly Spell ExposeArmor = new Spell("Expose Armor");
        public readonly Spell FanofKnives = new Spell("Fan of Knives");
        public readonly Spell Garrote = new Spell("Garrote");
        public readonly Spell RevealingStrike = new Spell("Revealing Strike");
        public readonly Spell Rupture = new Spell("Rupture");
        public readonly Spell Shiv = new Spell("Shiv");
        public readonly Spell ShurikenToss = new Spell("Shuriken Toss");
        public readonly Spell SinisterStrike = new Spell("Sinister Strike");
        public readonly Spell Throw = new Spell("Throw");
        private Timer RuptureTimer = new Timer(0);

        #endregion

        #region Offensive Cooldown

        public readonly Spell AdrenalineRush = new Spell("Adrenaline Rush");
        public readonly Spell KillingSpree = new Spell("Killing Spree");
        public readonly Spell Redirect = new Spell("Redirect");
        public readonly Spell ShadowBlades = new Spell("Shadow Blades");
        public readonly Spell ShadowStep = new Spell("Shadow Step");
        public readonly Spell Vendetta = new Spell("Vendetta");

        #endregion

        #region Defensive Cooldown

        public readonly Spell CheapShot = new Spell("Cheap Shot");
        public readonly Spell CloakofShadows = new Spell("Cloak of Shadows");
        public readonly Spell CombatReadiness = new Spell("Combat Readiness");
        public readonly Spell Dismantle = new Spell("Dismantle");
        public readonly Spell Evasion = new Spell("Evasion");
        public readonly Spell Kick = new Spell("Kick");
        public readonly Spell KidneyShot = new Spell("Kidney Shot");
        public readonly Spell Preparation = new Spell("Preparation");
        public readonly Spell SmokeBomb = new Spell("Smoke Bomb");
        public readonly Spell Vanish = new Spell("Vanish");
        private Timer DismantleTimer = new Timer(0);

        #endregion

        #region Healing Spell

        public readonly Spell Recuperate = new Spell("Recuperate");

        #endregion

        public RogueCombat()
        {
            Main.InternalRange = 5.0f;
            UInt64 lastTarget = 0;

            while (Main.InternalLoop)
            {
                try
                {
                    if (!ObjectManager.Me.IsDeadMe)
                    {
                        if (!ObjectManager.Me.IsMounted)
                        {
                            if (Fight.InFight && ObjectManager.Me.Target > 0)
                            {
                                if (ObjectManager.Me.Target != lastTarget
                                    && (Throw.IsHostileDistanceGood || CheapShot.IsHostileDistanceGood))
                                {
                                    Pull();
                                    lastTarget = ObjectManager.Me.Target;
                                }

                                if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                    && _mySettings.UseLowCombat)
                                {
                                    LC = 1;
                                    if (ObjectManager.Target.GetDistance < 30)
                                        LowCombat();
                                }
                                else
                                {
                                    LC = 0;
                                    if (ObjectManager.Target.GetDistance < 30)
                                        Combat();
                                }
                                break;
                            }
                            if (!ObjectManager.Me.IsCast)
                                Patrolling();
                        }
                    }
                    else
                        Thread.Sleep(500);
                }
                catch
                {
                }
                Thread.Sleep(250);
            }
        }

        private void Pull()
        {
            if (Redirect.IsSpellUsable && Redirect.IsHostileDistanceGood && Redirect.KnownSpell
                && _mySettings.UseRedirect && ObjectManager.Me.ComboPoint > 0)
            {
                Redirect.Launch();
                Thread.Sleep(200);
            }

            if (((Stealth.KnownSpell && Stealth.IsSpellUsable && !Stealth.HaveBuff && _mySettings.UseStealth)
                 || Stealth.HaveBuff) && LC != 1)
            {
                if (!Stealth.HaveBuff)
                {
                    Stealth.Launch();
                    Thread.Sleep(200);
                }

                if (ShadowStep.IsSpellUsable && ShadowStep.IsHostileDistanceGood && ShadowStep.KnownSpell
                    && _mySettings.UseShadowStep)
                {
                    ShadowStep.Launch();
                    Thread.Sleep(200);
                }

                if (Garrote.IsSpellUsable && Garrote.IsHostileDistanceGood && Garrote.KnownSpell
                    && _mySettings.UseGarrote)
                {
                    Garrote.Launch();
                    return;
                }
                if (CheapShot.IsSpellUsable && CheapShot.IsHostileDistanceGood && CheapShot.KnownSpell
                    && _mySettings.UseCheapShot)
                {
                    CheapShot.Launch();
                    return;
                }
                return;
            }
            if (ShurikenToss.IsSpellUsable && ShurikenToss.IsHostileDistanceGood && ShurikenToss.KnownSpell
                && _mySettings.UseShurikenToss && !_mySettings.UseStealth)
            {
                ShurikenToss.Launch();
                return;
            }
            if (Throw.IsSpellUsable && Throw.IsHostileDistanceGood && Throw.KnownSpell
                && _mySettings.UseThrow && !_mySettings.UseStealth)
            {
                MovementManager.StopMove();
                Throw.Launch();
                Thread.Sleep(1000);
            }
        }

        private void LowCombat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            DefenseCycle();
            Heal();

            if (Throw.IsSpellUsable && Throw.IsHostileDistanceGood && Throw.KnownSpell && !ObjectManager.Target.InCombat
                && _mySettings.UseThrow)
            {
                Throw.Launch();
                return;
            }

            if (Eviscerate.KnownSpell && Eviscerate.IsSpellUsable && Eviscerate.IsHostileDistanceGood
                && _mySettings.UseEviscerate && ObjectManager.Me.ComboPoint > 4)
            {
                Eviscerate.Launch();
                return;
            }
            if (RevealingStrike.KnownSpell && RevealingStrike.IsSpellUsable && RevealingStrike.IsHostileDistanceGood
                && _mySettings.UseRevealingStrike)
            {
                RevealingStrike.Launch();
                return;
            }
            if (SinisterStrike.KnownSpell && SinisterStrike.IsSpellUsable && SinisterStrike.IsHostileDistanceGood
                && _mySettings.UseSinisterStrike)
            {
                SinisterStrike.Launch();
                return;
            }
            if (SliceandDice.KnownSpell && SliceandDice.IsSpellUsable && SliceandDice.IsHostileDistanceGood
                && _mySettings.UseSliceandDice && !SliceandDice.HaveBuff)
            {
                CP = ObjectManager.Me.ComboPoint;
                SliceandDice.Launch();
                SliceandDiceTimer = new Timer(1000*(6 + (CP*6)));
                return;
            }
            if (FanofKnives.KnownSpell && FanofKnives.IsSpellUsable && FanofKnives.IsHostileDistanceGood
                && _mySettings.UseFanofKnives)
            {
                FanofKnives.Launch();
            }
        }

        private void Combat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            if (_onCd.IsReady)
                DefenseCycle();
            DPSCycle();
            Heal();
            Decast();
            DPSCycle();
            DPSBurst();
            DPSCycle();
        }

        private void Buff()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (_mySettings.UseDeadlyPoison && DeadlyPoison.KnownSpell && DeadlyPoison.IsSpellUsable
                && !DeadlyPoison.HaveBuff)
            {
                DeadlyPoison.Launch();
                return;
            }
            if (!WoundPoison.HaveBuff && WoundPoison.KnownSpell && WoundPoison.IsSpellUsable
                && _mySettings.UseWoundPoison && !DeadlyPoison.HaveBuff)
            {
                WoundPoison.Launch();
                return;
            }
            if (!LeechingPoison.HaveBuff && LeechingPoison.KnownSpell && LeechingPoison.IsSpellUsable
                && _mySettings.UseLeechingPoison)
            {
                LeechingPoison.Launch();
                return;
            }
            if (!ParalyticPoison.HaveBuff && ParalyticPoison.KnownSpell && ParalyticPoison.IsSpellUsable
                && _mySettings.UseParalyticPoison && !LeechingPoison.HaveBuff)
            {
                ParalyticPoison.Launch();
                return;
            }
            if (!CripplingPoison.HaveBuff && CripplingPoison.KnownSpell && CripplingPoison.IsSpellUsable
                && _mySettings.UseCripplingPoison && !LeechingPoison.HaveBuff && ParalyticPoison.HaveBuff)
            {
                CripplingPoison.Launch();
                return;
            }
            if (!MindnumbingPoison.HaveBuff && MindnumbingPoison.KnownSpell && MindnumbingPoison.IsSpellUsable
                && _mySettings.UseMindnumbingPoison && !CripplingPoison.HaveBuff && !ParalyticPoison.HaveBuff
                && !LeechingPoison.HaveBuff)
            {
                MindnumbingPoison.Launch();
                return;
            }
            if (!ObjectManager.Me.InCombat && BurstofSpeed.IsSpellUsable && BurstofSpeed.KnownSpell
                && _mySettings.UseBurstofSpeed && ObjectManager.Me.GetMove)
            {
                BurstofSpeed.Launch();
                return;
            }
            if (!ObjectManager.Me.InCombat && Sprint.IsSpellUsable && Sprint.KnownSpell
                && _mySettings.UseSprint && ObjectManager.Me.GetMove)
            {
                Sprint.Launch();
                return;
            }
            if (_mySettings.UseAlchFlask && !ObjectManager.Me.HaveBuff(79638) && !ObjectManager.Me.HaveBuff(79640) && !ObjectManager.Me.HaveBuff(79639) &&
                !ItemsManager.IsItemOnCooldown(75525) && ItemsManager.GetItemCountByIdLUA(75525) > 0)
            {
                ItemsManager.UseItem(75525);
            }
        }

        private void AvoidMelee()
        {
            if (ObjectManager.Target.GetDistance < _mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
            {
                Logging.WriteFight("Too Close. Moving Back");
                var maxTimeTimer = new Timer(1000*2);
                MovementsAction.MoveBackward(true);
                while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                    Thread.Sleep(300);
                MovementsAction.MoveBackward(false);
                if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
                {
                    MovementsAction.MoveForward(true);
                    Thread.Sleep(1000);
                    MovementsAction.MoveForward(false);
                    MovementManager.Face(ObjectManager.Target.Position);
                }
            }
        }

        private void DefenseCycle()
        {
            if (ObjectManager.Me.HealthPercent <= 80 && !KidneyShot.TargetHaveBuff && KidneyShot.KnownSpell
                && KidneyShot.IsSpellUsable && KidneyShot.IsHostileDistanceGood && ObjectManager.Me.ComboPoint <= 3
                && Recuperate.HaveBuff && _mySettings.UseKidneyShot)
            {
                CP = ObjectManager.Me.ComboPoint;
                KidneyShot.Launch();
                _onCd = new Timer(1000*CP);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= 80 && Evasion.KnownSpell && Evasion.IsSpellUsable
                && _mySettings.UseEvasion)
            {
                Evasion.Launch();
                _onCd = new Timer(1000*15);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= 90 && CombatReadiness.KnownSpell && CombatReadiness.IsSpellUsable
                && _mySettings.UseCombatReadiness)
            {
                CombatReadiness.Launch();
                _onCd = new Timer(1000*20);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= 95 && Dismantle.KnownSpell && Dismantle.IsSpellUsable
                && _mySettings.UseDismantle)
            {
                Dismantle.Launch();
                DismantleTimer = new Timer(1000*60);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable &&
                WarStomp.KnownSpell
                && _mySettings.UseWarStomp)
            {
                WarStomp.Launch();
                _onCd = new Timer(1000*2);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable &&
                Stoneform.KnownSpell
                && _mySettings.UseStoneform)
            {
                Stoneform.Launch();
                _onCd = new Timer(1000*8);
                return;
            }
            if (ObjectManager.GetNumberAttackPlayer() >= 3 && Vanish.KnownSpell && Vanish.IsSpellUsable
                && _mySettings.UseVanish)
            {
                Vanish.Launch();
                Thread.Sleep(5000);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= 70 && Preparation.KnownSpell && Preparation.IsSpellUsable
                && _mySettings.UsePreparation && !Evasion.IsSpellUsable)
            {
                Preparation.Launch();
            }
        }

        private void Heal()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (ObjectManager.Me.HealthPercent <= _mySettings.UseGiftoftheNaaruAtPercentage && GiftoftheNaaru.KnownSpell &&
                GiftoftheNaaru.IsSpellUsable
                && _mySettings.UseGiftoftheNaaru)
            {
                GiftoftheNaaru.Launch();
                return;
            }
            else
            {
                if (!Recuperate.HaveBuff && ObjectManager.Me.ComboPoint > 1 && _mySettings.UseRecuperate
                    && ObjectManager.Me.HealthPercent <= 90 && Recuperate.KnownSpell && Recuperate.IsSpellUsable)
                {
                    Recuperate.Launch();
                    return;
                }
            }
        }

        private void Decast()
        {
            if (ObjectManager.Target.IsCast && Kick.KnownSpell && Kick.IsSpellUsable
                && Kick.IsHostileDistanceGood && _mySettings.UseKick && ObjectManager.Target.IsTargetingMe)
            {
                Kick.Launch();
                return;
            }
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8
                && ObjectManager.Me.HealthPercent <= _mySettings.UseArcaneTorrentForDecastAtPercentage
                && _mySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast &&
                ObjectManager.Target.IsTargetingMe)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (ObjectManager.Target.IsCast && CloakofShadows.KnownSpell && CloakofShadows.IsSpellUsable
                && ObjectManager.Target.IsTargetingMe && _mySettings.UseCloakofShadows)
            {
                CloakofShadows.Launch();
                return;
            }
            if (ObjectManager.Target.IsCast && SmokeBomb.KnownSpell && SmokeBomb.IsSpellUsable
                && ObjectManager.Target.IsTargetingMe && _mySettings.UseSmokeBomb
                && !CloakofShadows.HaveBuff)
            {
                SmokeBomb.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent <= 70 && Preparation.KnownSpell && Preparation.IsSpellUsable
                && _mySettings.UsePreparation && !CloakofShadows.IsSpellUsable && ObjectManager.Target.IsCast
                && ObjectManager.Target.IsTargetingMe)
            {
                Preparation.Launch();
            }
        }

        private void DPSBurst()
        {
            if (_mySettings.UseTrinketOne && !ItemsManager.IsItemOnCooldown(_firstTrinket.Entry) && ItemsManager.IsUsableItemById(_firstTrinket.Entry))
            {
                ItemsManager.UseItem(_firstTrinket.Name);
                Logging.WriteFight("Use First Trinket Slot");
            }

            if (_mySettings.UseTrinketTwo && !ItemsManager.IsItemOnCooldown(_secondTrinket.Entry) && ItemsManager.IsUsableItemById(_secondTrinket.Entry))
            {
                ItemsManager.UseItem(_secondTrinket.Name);
                Logging.WriteFight("Use Second Trinket Slot");
                return;
            }
            if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                && _mySettings.UseBerserking)
            {
                Berserking.Launch();
                return;
            }
            if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 30
                && _mySettings.UseBloodFury)
            {
                BloodFury.Launch();
                return;
            }
            if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                && _mySettings.UseLifeblood)
            {
                Lifeblood.Launch();
                return;
            }
            if (_engineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                && _mySettings.UseEngGlove)
            {
                Logging.WriteFight("Use Engineering Gloves.");
                Lua.RunMacroText("/use 10");
                _engineeringTimer = new Timer(1000*60);
                return;
            }
            if (AdrenalineRush.KnownSpell && AdrenalineRush.IsSpellUsable
                && _mySettings.UseAdrenalineRush && ObjectManager.Target.GetDistance < 30)
            {
                AdrenalineRush.Launch();
                return;
            }
            if (KillingSpree.KnownSpell && KillingSpree.IsSpellUsable
                && _mySettings.UseKillingSpree && ObjectManager.Target.GetDistance < 10
                && ObjectManager.Me.EnergyPercentage < 35)
            {
                KillingSpree.Launch();
                return;
            }
            if (ShadowBlades.KnownSpell && ShadowBlades.IsSpellUsable
                && _mySettings.UseShadowBlades && ObjectManager.Target.GetDistance < 30)
            {
                ShadowBlades.Launch();
            }
        }

        private void DPSCycle()
        {
            if (Garrote.IsSpellUsable && Garrote.IsHostileDistanceGood && Garrote.KnownSpell
                && _mySettings.UseGarrote && ObjectManager.Me.HaveBuff(115192))
            {
                Garrote.Launch();
                return;
            }

            if (Throw.IsSpellUsable && Throw.IsHostileDistanceGood && Throw.KnownSpell && !ObjectManager.Target.InCombat
                && _mySettings.UseThrow)
            {
                Throw.Launch();
                return;
            }

            if (BladeFlurry.KnownSpell && BladeFlurry.IsSpellUsable && ObjectManager.Target.GetDistance < 10
                && _mySettings.UseBladeFlurry && !BladeFlurry.HaveBuff && ObjectManager.GetNumberAttackPlayer() > 1)
            {
                BladeFlurry.Launch();
                return;
            }
            else
            {
                if (BladeFlurry.KnownSpell && BladeFlurry.IsSpellUsable && SinisterStrike.IsHostileDistanceGood
                    && BladeFlurry.HaveBuff && ObjectManager.GetNumberAttackPlayer() < 2)
                {
                    BladeFlurry.Launch();
                    return;
                }
            }

            if (Eviscerate.KnownSpell && Eviscerate.IsSpellUsable && Eviscerate.IsHostileDistanceGood
                && _mySettings.UseEviscerate && ObjectManager.Me.ComboPoint > 4)
            {
                Eviscerate.Launch();
                return;
            }
            if (RevealingStrike.KnownSpell && RevealingStrike.IsSpellUsable && RevealingStrike.IsHostileDistanceGood
                && _mySettings.UseRevealingStrike && !RevealingStrike.TargetHaveBuff)
            {
                RevealingStrike.Launch();
                return;
            }
            if (SliceandDice.KnownSpell && SliceandDice.IsSpellUsable && SliceandDice.IsHostileDistanceGood
                && _mySettings.UseSliceandDice && !SliceandDice.HaveBuff)
            {
                CP = ObjectManager.Me.ComboPoint;
                SliceandDice.Launch();
                SliceandDiceTimer = new Timer(1000*(6 + (CP*6)));
                return;
            }
            if (Rupture.KnownSpell && Rupture.IsHostileDistanceGood && Rupture.IsSpellUsable
                && _mySettings.UseRupture && (!Rupture.TargetHaveBuff || RuptureTimer.IsReady))
            {
                CP = ObjectManager.Me.ComboPoint;
                Rupture.Launch();
                RuptureTimer = new Timer(1000*(4 + (CP*4)));
                return;
            }
            if (ExposeArmor.IsSpellUsable && ExposeArmor.IsHostileDistanceGood && ExposeArmor.KnownSpell
                && _mySettings.UseExposeArmor && !ObjectManager.Target.HaveBuff(113746))
            {
                ExposeArmor.Launch();
                return;
            }
            if (SinisterStrike.KnownSpell && SinisterStrike.IsSpellUsable && SinisterStrike.IsHostileDistanceGood
                && _mySettings.UseSinisterStrike)
            {
                SinisterStrike.Launch();
                return;
            }
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell
                && _mySettings.UseArcaneTorrentForResource)
            {
                ArcaneTorrent.Launch();
            }
        }

        private void Patrolling()
        {
            if (ObjectManager.Me.IsMounted) return;
            Buff();
            Heal();
        }

        #region Nested type: RogueCombatSettings

        [Serializable]
        public class RogueCombatSettings : Settings
        {
            public bool DoAvoidMelee = false;
            public int DoAvoidMeleeDistance = 0;
            public bool UseAdrenalineRush = true;
            public bool UseAlchFlask = true;
            public bool UseAmbush = true;
            public bool UseArcaneTorrentForDecast = true;
            public int UseArcaneTorrentForDecastAtPercentage = 100;
            public bool UseArcaneTorrentForResource = true;
            public bool UseBerserking = true;
            public bool UseBladeFlurry = true;
            public bool UseBloodFury = true;
            public bool UseBurstofSpeed = true;
            public bool UseCheapShot = true;
            public bool UseCloakofShadows = true;
            public bool UseCombatReadiness = true;
            public bool UseCrimsonTempest = true;
            public bool UseCripplingPoison = false;
            public bool UseDeadlyPoison = true;
            public bool UseDeadlyThrow = true;
            public bool UseDismantle = true;
            public bool UseEngGlove = true;
            public bool UseEvasion = true;
            public bool UseEviscerate = true;
            public bool UseExposeArmor = false;
            public bool UseFanofKnives = true;
            public bool UseGarrote = true;
            public bool UseGiftoftheNaaru = true;
            public int UseGiftoftheNaaruAtPercentage = 80;
            public bool UseKick = true;
            public bool UseKidneyShot = true;
            public bool UseKillingSpree = true;
            public bool UseLeechingPoison = true;
            public bool UseLifeblood = true;
            public bool UseLowCombat = true;
            public bool UseMindnumbingPoison = true;
            public bool UseParalyticPoison = false;
            public bool UsePreparation = true;
            public bool UseRecuperate = true;
            public bool UseRedirect = true;
            public bool UseRevealingStrike = true;
            public bool UseRupture = true;
            public bool UseShadowBlades = true;
            public bool UseShadowStep = true;
            public bool UseShiv = true;
            public bool UseShurikenToss = true;
            public bool UseSinisterStrike = true;
            public bool UseSliceandDice = true;
            public bool UseSmokeBomb = true;
            public bool UseSprint = true;
            public bool UseStealth = false;
            public bool UseStoneform = true;
            public int UseStoneformAtPercentage = 80;
            public bool UseThrow = true;
            public bool UseTrinketOne = true;
            public bool UseTrinketTwo = true;
            public bool UseVanish = true;
            public bool UseWarStomp = true;
            public int UseWarStompAtPercentage = 80;
            public bool UseWoundPoison = false;

            public RogueCombatSettings()
            {
                ConfigWinForm(new Point(500, 400), "Rogue Combat Settings");
                /* Professions & Racials */
                AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials");
                AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
                AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
                AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
                AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
                AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
                AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
                /* Rogue Buffs */
                AddControlInWinForm("Use Blade Flurry", "UseBladeFlurry", "Rogue Buffs");
                AddControlInWinForm("Use Burst of Speed", "UseBurstofSpeed", "Rogue Buffs");
                AddControlInWinForm("Use Crippling Poison", "UseCripplingPoison", "Rogue Buffs");
                AddControlInWinForm("Use Deadly Poison", "UseDeadlyPoison", "Rogue Buffs");
                AddControlInWinForm("Use Leeching Poison", "UseLeechingPoison", "Rogue Buffs");
                AddControlInWinForm("Use Mindnumbing Poison", "UseMindnumbingPoison", "Rogue Buffs");
                AddControlInWinForm("Use Paralytic Poison", "UseParalyticPoison", "Rogue Buffs");
                AddControlInWinForm("Use Slice and Dice", "UseSliceandDice", "Rogue Buffs");
                AddControlInWinForm("Use Sprint", "UseSprint", "Rogue Buffs");
                AddControlInWinForm("Use Stealth", "UseStealth", "Rogue Buffs");
                AddControlInWinForm("Use Wound Poison", "UseWoundPoison", "Rogue Buffs");
                /* Offensive Spell */
                AddControlInWinForm("Use Ambush", "UseAmbush", "Offensive Spell");
                AddControlInWinForm("Use Crimson Tempest", "UseCrimsonTempest", "Offensive Spell");
                AddControlInWinForm("Use Deadly Throw", "UseDeadlyThrow", "Offensive Spell");
                AddControlInWinForm("Use Eviscerate", "UseEviscerate", "Offensive Spell");
                AddControlInWinForm("Use Expose Armor", "UseExposeArmor", "Offensive Spell");
                AddControlInWinForm("Use Fan of Knives", "UseFanofKnives", "Offensive Spell");
                AddControlInWinForm("Use Garrote", "UseGarrote", "Offensive Spell");
                AddControlInWinForm("Use Revealing Strike", "UseRevealingStrike", "Offensive Spell");
                AddControlInWinForm("Use Rupture", "UseRupture", "Offensive Spell");
                AddControlInWinForm("Use Shiv", "UseShiv", "Offensive Spell");
                AddControlInWinForm("Use Shuriken Toss", "UseShurikenToss", "Offensive Spell");
                AddControlInWinForm("Use Sinister Strike", "UseSinisterStrike", "Offensive Spell");
                AddControlInWinForm("Use Throw", "UseThrow", "Offensive Spell");
                /* Offensive Cooldown */
                AddControlInWinForm("Use Adrenaline Rush", "UseAdrenalineRush", "Offensive Cooldown");
                AddControlInWinForm("Use Killing Spree", "UseKillingSpree", "Offensive Cooldown");
                AddControlInWinForm("Use Redirect", "UseRedirect", "Offensive Cooldown");
                AddControlInWinForm("Use Shadow Blades", "UseShadowBlades", "Offensive Cooldown");
                AddControlInWinForm("Use Shadow Step", "UseShadowStep", "Offensive Cooldown");
                AddControlInWinForm("Use Vendetta", "UseVendetta", "Offensive Cooldown");
                /* Defensive Cooldown */
                AddControlInWinForm("Use CheapShot", "UseCheapShot", "Defensive Cooldown");
                AddControlInWinForm("Use CloakofShadows", "UseCloakofShadows", "Defensive Cooldown");
                AddControlInWinForm("Use CombatReadiness", "UseCombatReadiness", "Defensive Cooldown");
                AddControlInWinForm("Use Dismantle", "UseDismantle", "Defensive Cooldown");
                AddControlInWinForm("Use Evasion", "UseEvasion", "Defensive Cooldown");
                AddControlInWinForm("Use Kick", "UseKick", "Defensive Cooldown");
                AddControlInWinForm("Use KidneyShot", "UseKidneyShot", "Defensive Cooldown");
                AddControlInWinForm("Use Preparation", "UsePreparation", "Defensive Cooldown");
                AddControlInWinForm("Use SmokeBomb", "UseSmokeBomb", "Defensive Cooldown");
                AddControlInWinForm("Use Vanish", "UseVanish", "Defensive Cooldown");
                /* Healing Spell */
                AddControlInWinForm("Use Recuperate", "UseRecuperate", "Healing Spell");
                /* Game Settings */
                AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
                AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
                AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
                AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
                AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
                AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
                AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
            }

            public static RogueCombatSettings CurrentSetting { get; set; }

            public static RogueCombatSettings GetSettings()
            {
                string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Rogue_Combat.xml";
                if (File.Exists(currentSettingsFile))
                {
                    return
                        CurrentSetting = Load<RogueCombatSettings>(currentSettingsFile);
                }
                return new RogueCombatSettings();
            }
        }

        #endregion
    }

    public class RogueSubtlety
    {
        private readonly RogueSubtletySettings _mySettings = RogueSubtletySettings.GetSettings();

        #region General Timers & Variables

        private readonly WoWItem _firstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
        private readonly WoWItem _secondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);
        public int CP = 0;
        private Timer _engineeringTimer = new Timer(0);
        public int LC = 0;
        private Timer _onCd = new Timer(0);

        #endregion

        #region Professions & Racials

        public readonly Spell Alchemy = new Spell("Alchemy");
        public readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
        public readonly Spell Berserking = new Spell("Berserking");
        public readonly Spell BloodFury = new Spell("Blood Fury");
        public readonly Spell Engineering = new Spell("Engineering");
        public readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
        public readonly Spell Lifeblood = new Spell("Lifeblood");
        public readonly Spell Stoneform = new Spell("Stoneform");
        public readonly Spell WarStomp = new Spell("War Stomp");

        #endregion

        #region Rogue Buffs

        public readonly Spell BurstofSpeed = new Spell("Burst of Speed");
        public readonly Spell CripplingPoison = new Spell("Crippling Poison");
        public readonly Spell DeadlyPoison = new Spell("Deadly Poison");
        public readonly Spell LeechingPoison = new Spell("Leeching Poison");
        public readonly Spell MindnumbingPoison = new Spell("Mind-numbing Poison");
        public readonly Spell ParalyticPoison = new Spell("Paralytic Poison");
        public readonly Spell SliceandDice = new Spell("Slice and Dice");
        public readonly Spell Sprint = new Spell("Sprint");
        public readonly Spell Stealth = new Spell("Stealth");
        public readonly Spell WoundPoison = new Spell("Wound Poison");
        private Timer SliceandDiceTimer = new Timer(0);

        #endregion

        #region Offensive Spell

        public readonly Spell Ambush = new Spell("Ambush");
        public readonly Spell CrimsonTempest = new Spell("Crimson Tempest");
        public readonly Spell DeadlyThrow = new Spell("Deadly Throw");
        public readonly Spell Eviscerate = new Spell("Eviscerate");
        public readonly Spell ExposeArmor = new Spell("Expose Armor");
        public readonly Spell FanofKnives = new Spell("Fan of Knives");
        public readonly Spell Garrote = new Spell("Garrote");
        public readonly Spell Hemorrhage = new Spell("Hemorrhage");
        public readonly Spell Rupture = new Spell("Rupture");
        public readonly Spell Shiv = new Spell("Shiv");
        public readonly Spell ShurikenToss = new Spell("Shuriken Toss");
        public readonly Spell SinisterStrike = new Spell("Sinister Strike");
        public readonly Spell Throw = new Spell("Throw");
        private Timer RuptureTimer = new Timer(0);

        #endregion

        #region Offensive Cooldown

        public readonly Spell Premeditation = new Spell("Premeditation");
        public readonly Spell Redirect = new Spell("Redirect");
        public readonly Spell ShadowBlades = new Spell("Shadow Blades");
        public readonly Spell ShadowDance = new Spell("Shadow Dance");
        public readonly Spell ShadowStep = new Spell("Shadow Step");

        #endregion

        #region Defensive Cooldown

        public readonly Spell CheapShot = new Spell("Cheap Shot");
        public readonly Spell CloakofShadows = new Spell("Cloak of Shadows");
        public readonly Spell CombatReadiness = new Spell("Combat Readiness");
        public readonly Spell Dismantle = new Spell("Dismantle");
        public readonly Spell Evasion = new Spell("Evasion");
        public readonly Spell Kick = new Spell("Kick");
        public readonly Spell KidneyShot = new Spell("Kidney Shot");
        public readonly Spell Preparation = new Spell("Preparation");
        public readonly Spell SmokeBomb = new Spell("Smoke Bomb");
        public readonly Spell Vanish = new Spell("Vanish");
        private Timer DismantleTimer = new Timer(0);

        #endregion

        #region Healing Spell

        public readonly Spell Recuperate = new Spell("Recuperate");

        #endregion

        public RogueSubtlety()
        {
            Main.InternalRange = 5.0f;
            UInt64 lastTarget = 0;

            while (Main.InternalLoop)
            {
                try
                {
                    if (!ObjectManager.Me.IsDeadMe)
                    {
                        if (!ObjectManager.Me.IsMounted)
                        {
                            if (Fight.InFight && ObjectManager.Me.Target > 0)
                            {
                                if (ObjectManager.Me.Target != lastTarget
                                    && (Throw.IsHostileDistanceGood || CheapShot.IsHostileDistanceGood))
                                {
                                    Pull();
                                    lastTarget = ObjectManager.Me.Target;
                                }

                                if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                    && _mySettings.UseLowCombat)
                                {
                                    LC = 1;
                                    if (ObjectManager.Target.GetDistance < 30)
                                        LowCombat();
                                }
                                else
                                {
                                    LC = 0;
                                    if (ObjectManager.Target.GetDistance < 30)
                                        Combat();
                                }
                                break;
                            }
                            if (!ObjectManager.Me.IsCast)
                                Patrolling();
                        }
                    }
                    else
                        Thread.Sleep(500);
                }
                catch
                {
                }
                Thread.Sleep(250);
            }
        }

        private void Pull()
        {
            if (Redirect.IsSpellUsable && Redirect.IsHostileDistanceGood && Redirect.KnownSpell
                && _mySettings.UseRedirect && ObjectManager.Me.ComboPoint > 0)
            {
                Redirect.Launch();
                Thread.Sleep(200);
            }

            if (((Stealth.KnownSpell && Stealth.IsSpellUsable && !Stealth.HaveBuff && _mySettings.UseStealth)
                 || Stealth.HaveBuff) && LC != 1)
            {
                if (!Stealth.HaveBuff)
                {
                    Stealth.Launch();
                    Thread.Sleep(200);
                }

                if (Premeditation.IsSpellUsable && Premeditation.IsHostileDistanceGood && Premeditation.KnownSpell
                    && _mySettings.UsePremeditation && ObjectManager.Me.ComboPoint == 0)
                {
                    Premeditation.Launch();
                    Thread.Sleep(200);
                }

                if (ShadowStep.IsSpellUsable && ShadowStep.IsHostileDistanceGood && ShadowStep.KnownSpell
                    && _mySettings.UseShadowStep)
                {
                    ShadowStep.Launch();
                    Thread.Sleep(200);
                }

                if (Garrote.IsSpellUsable && Garrote.IsHostileDistanceGood && Garrote.KnownSpell
                    && _mySettings.UseGarrote)
                {
                    Garrote.Launch();
                    return;
                }
                if (CheapShot.IsSpellUsable && CheapShot.IsHostileDistanceGood && CheapShot.KnownSpell
                    && _mySettings.UseCheapShot)
                {
                    CheapShot.Launch();
                    return;
                }
                return;
            }
            if (ShurikenToss.IsSpellUsable && ShurikenToss.IsHostileDistanceGood && ShurikenToss.KnownSpell
                && _mySettings.UseShurikenToss && !_mySettings.UseStealth)
            {
                ShurikenToss.Launch();
                return;
            }
            if (Throw.IsSpellUsable && Throw.IsHostileDistanceGood && Throw.KnownSpell
                && _mySettings.UseThrow && !_mySettings.UseStealth)
            {
                MovementManager.StopMove();
                Throw.Launch();
                Thread.Sleep(1000);
            }
        }

        private void LowCombat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            DefenseCycle();
            Heal();

            if (Throw.IsSpellUsable && Throw.IsHostileDistanceGood && Throw.KnownSpell && !ObjectManager.Target.InCombat
                && _mySettings.UseThrow)
            {
                Throw.Launch();
                return;
            }

            if (Eviscerate.KnownSpell && Eviscerate.IsSpellUsable && Eviscerate.IsHostileDistanceGood
                && _mySettings.UseEviscerate && ObjectManager.Me.ComboPoint > 4)
            {
                Eviscerate.Launch();
                return;
            }
            if (SliceandDice.KnownSpell && SliceandDice.IsSpellUsable && SliceandDice.IsHostileDistanceGood
                && _mySettings.UseSliceandDice && !SliceandDice.HaveBuff)
            {
                CP = ObjectManager.Me.ComboPoint;
                SliceandDice.Launch();
                SliceandDiceTimer = new Timer(1000*(6 + (CP*6)));
                return;
            }
            // Blizzard API Calls for Hemorrhage using Sinister Strike Function
            if (SinisterStrike.KnownSpell && SinisterStrike.IsSpellUsable && SinisterStrike.IsHostileDistanceGood
                && _mySettings.UseHemorrhage)
            {
                SinisterStrike.Launch();
                return;
            }
            if (FanofKnives.KnownSpell && FanofKnives.IsSpellUsable && FanofKnives.IsHostileDistanceGood
                && _mySettings.UseFanofKnives)
            {
                FanofKnives.Launch();
            }
        }

        private void Combat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            if (_onCd.IsReady)
                DefenseCycle();
            DPSCycle();
            Heal();
            Decast();
            DPSCycle();
            DPSBurst();
            DPSCycle();
        }

        private void Buff()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (_mySettings.UseDeadlyPoison && DeadlyPoison.KnownSpell && DeadlyPoison.IsSpellUsable
                && !DeadlyPoison.HaveBuff)
            {
                DeadlyPoison.Launch();
                return;
            }
            else
            {
                if (!WoundPoison.HaveBuff && WoundPoison.KnownSpell && WoundPoison.IsSpellUsable
                    && _mySettings.UseWoundPoison && !DeadlyPoison.HaveBuff)
                {
                    WoundPoison.Launch();
                    return;
                }
            }

            if (!LeechingPoison.HaveBuff && LeechingPoison.KnownSpell && LeechingPoison.IsSpellUsable
                && _mySettings.UseLeechingPoison)
            {
                LeechingPoison.Launch();
                return;
            }
            if (!ParalyticPoison.HaveBuff && ParalyticPoison.KnownSpell && ParalyticPoison.IsSpellUsable
                && _mySettings.UseParalyticPoison && !LeechingPoison.HaveBuff)
            {
                ParalyticPoison.Launch();
                return;
            }
            if (!CripplingPoison.HaveBuff && CripplingPoison.KnownSpell && CripplingPoison.IsSpellUsable
                && _mySettings.UseCripplingPoison && !LeechingPoison.HaveBuff && ParalyticPoison.HaveBuff)
            {
                CripplingPoison.Launch();
                return;
            }
            if (!MindnumbingPoison.HaveBuff && MindnumbingPoison.KnownSpell && MindnumbingPoison.IsSpellUsable
                && _mySettings.UseMindnumbingPoison && !CripplingPoison.HaveBuff && !ParalyticPoison.HaveBuff
                && !LeechingPoison.HaveBuff)
            {
                MindnumbingPoison.Launch();
                return;
            }
            if (!ObjectManager.Me.InCombat && BurstofSpeed.IsSpellUsable && BurstofSpeed.KnownSpell
                && _mySettings.UseBurstofSpeed && ObjectManager.Me.GetMove)
            {
                BurstofSpeed.Launch();
                return;
            }
            if (!ObjectManager.Me.InCombat && Sprint.IsSpellUsable && Sprint.KnownSpell
                && _mySettings.UseSprint && ObjectManager.Me.GetMove)
            {
                Sprint.Launch();
                return;
            }
            if (_mySettings.UseAlchFlask && !ObjectManager.Me.HaveBuff(79638) && !ObjectManager.Me.HaveBuff(79640) && !ObjectManager.Me.HaveBuff(79639) &&
                !ItemsManager.IsItemOnCooldown(75525) && ItemsManager.GetItemCountByIdLUA(75525) > 0)
            {
                ItemsManager.UseItem(75525);
            }
        }

        private void AvoidMelee()
        {
            if (ObjectManager.Target.GetDistance < _mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
            {
                Logging.WriteFight("Too Close. Moving Back");
                var maxTimeTimer = new Timer(1000*2);
                MovementsAction.MoveBackward(true);
                while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                    Thread.Sleep(300);
                MovementsAction.MoveBackward(false);
                if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
                {
                    MovementsAction.MoveForward(true);
                    Thread.Sleep(1000);
                    MovementsAction.MoveForward(false);
                    MovementManager.Face(ObjectManager.Target.Position);
                }
            }
        }

        private void DefenseCycle()
        {
            if (ObjectManager.Me.HealthPercent <= 80 && !KidneyShot.TargetHaveBuff && KidneyShot.KnownSpell
                && KidneyShot.IsSpellUsable && KidneyShot.IsHostileDistanceGood && ObjectManager.Me.ComboPoint <= 3
                && Recuperate.HaveBuff && _mySettings.UseKidneyShot)
            {
                CP = ObjectManager.Me.ComboPoint;
                KidneyShot.Launch();
                _onCd = new Timer(1000*CP);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= 80 && Evasion.KnownSpell && Evasion.IsSpellUsable
                && _mySettings.UseEvasion)
            {
                Evasion.Launch();
                _onCd = new Timer(1000*15);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= 90 && CombatReadiness.KnownSpell && CombatReadiness.IsSpellUsable
                && _mySettings.UseCombatReadiness)
            {
                CombatReadiness.Launch();
                _onCd = new Timer(1000*20);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= 95 && Dismantle.KnownSpell && Dismantle.IsSpellUsable
                && _mySettings.UseDismantle)
            {
                Dismantle.Launch();
                DismantleTimer = new Timer(1000*60);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable &&
                WarStomp.KnownSpell
                && _mySettings.UseWarStomp)
            {
                WarStomp.Launch();
                _onCd = new Timer(1000*2);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable &&
                Stoneform.KnownSpell
                && _mySettings.UseStoneform)
            {
                Stoneform.Launch();
                _onCd = new Timer(1000*8);
                return;
            }
            if (ObjectManager.GetNumberAttackPlayer() >= 3 && Vanish.KnownSpell && Vanish.IsSpellUsable
                && _mySettings.UseVanish)
            {
                Vanish.Launch();
                Thread.Sleep(5000);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= 70 && Preparation.KnownSpell && Preparation.IsSpellUsable
                && _mySettings.UsePreparation && !Evasion.IsSpellUsable)
            {
                Preparation.Launch();
            }
        }

        private void Heal()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (ObjectManager.Me.HealthPercent <= _mySettings.UseGiftoftheNaaruAtPercentage && GiftoftheNaaru.KnownSpell &&
                GiftoftheNaaru.IsSpellUsable
                && _mySettings.UseGiftoftheNaaru)
            {
                GiftoftheNaaru.Launch();
                return;
            }
            if (!Recuperate.HaveBuff && ObjectManager.Me.ComboPoint > 1 && _mySettings.UseRecuperate
                && ObjectManager.Me.HealthPercent <= 90 && Recuperate.KnownSpell && Recuperate.IsSpellUsable)
            {
                Recuperate.Launch();
            }
        }

        private void Decast()
        {
            if (ObjectManager.Target.IsCast && Kick.KnownSpell && Kick.IsSpellUsable
                && Kick.IsHostileDistanceGood && _mySettings.UseKick && ObjectManager.Target.IsTargetingMe)
            {
                Kick.Launch();
                return;
            }
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8
                && ObjectManager.Me.HealthPercent <= _mySettings.UseArcaneTorrentForDecastAtPercentage
                && _mySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast &&
                ObjectManager.Target.IsTargetingMe)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (ObjectManager.Target.IsCast && CloakofShadows.KnownSpell && CloakofShadows.IsSpellUsable
                && ObjectManager.Target.IsTargetingMe && _mySettings.UseCloakofShadows)
            {
                CloakofShadows.Launch();
                return;
            }
            if (ObjectManager.Target.IsCast && SmokeBomb.KnownSpell && SmokeBomb.IsSpellUsable
                && ObjectManager.Target.IsTargetingMe && _mySettings.UseSmokeBomb
                && !CloakofShadows.HaveBuff)
            {
                SmokeBomb.Launch();
                return;
            }

            if (ObjectManager.Me.HealthPercent <= 70 && Preparation.KnownSpell && Preparation.IsSpellUsable
                && _mySettings.UsePreparation && !CloakofShadows.IsSpellUsable && ObjectManager.Target.IsCast
                && ObjectManager.Target.IsTargetingMe)
            {
                Preparation.Launch();
            }
        }

        private void DPSBurst()
        {
            if (_mySettings.UseTrinketOne && !ItemsManager.IsItemOnCooldown(_firstTrinket.Entry) && ItemsManager.IsUsableItemById(_firstTrinket.Entry))
            {
                ItemsManager.UseItem(_firstTrinket.Name);
                Logging.WriteFight("Use First Trinket Slot");
            }

            if (_mySettings.UseTrinketTwo && !ItemsManager.IsItemOnCooldown(_secondTrinket.Entry) && ItemsManager.IsUsableItemById(_secondTrinket.Entry))
            {
                ItemsManager.UseItem(_secondTrinket.Name);
                Logging.WriteFight("Use Second Trinket Slot");
                return;
            }
            if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                && _mySettings.UseBerserking)
            {
                Berserking.Launch();
                return;
            }
            if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 30
                && _mySettings.UseBloodFury)
            {
                BloodFury.Launch();
                return;
            }
            if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                && _mySettings.UseLifeblood)
            {
                Lifeblood.Launch();
                return;
            }
            if (_engineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                && _mySettings.UseEngGlove)
            {
                Logging.WriteFight("Use Engineering Gloves.");
                Lua.RunMacroText("/use 10");
                _engineeringTimer = new Timer(1000*60);
                return;
            }
            if (ShadowDance.KnownSpell && ShadowDance.IsSpellUsable
                && _mySettings.UseShadowDance && ObjectManager.Target.GetDistance < 10)
            {
                ShadowDance.Launch();
                return;
            }
            if (ShadowBlades.KnownSpell && ShadowBlades.IsSpellUsable
                && _mySettings.UseShadowBlades && ObjectManager.Target.GetDistance < 30)
            {
                ShadowBlades.Launch();
            }
        }

        private void DPSCycle()
        {
            if (ObjectManager.Me.HaveBuff(115192) || ObjectManager.Me.HaveBuff(51713))
            {
                if (Garrote.IsSpellUsable && Garrote.IsHostileDistanceGood && Garrote.KnownSpell
                    && _mySettings.UseGarrote && !ObjectManager.Target.HaveBuff(703))
                {
                    Garrote.Launch();
                    return;
                }
            }

            if (Throw.IsSpellUsable && Throw.IsHostileDistanceGood && Throw.KnownSpell && !ObjectManager.Target.InCombat
                && _mySettings.UseThrow)
            {
                Throw.Launch();
                return;
            }

            if (Eviscerate.KnownSpell && Eviscerate.IsSpellUsable && Eviscerate.IsHostileDistanceGood
                && _mySettings.UseEviscerate && ObjectManager.Me.ComboPoint > 4)
            {
                Eviscerate.Launch();
                return;
            }
            if (SliceandDice.KnownSpell && SliceandDice.IsSpellUsable && SliceandDice.IsHostileDistanceGood
                && _mySettings.UseSliceandDice && !SliceandDice.HaveBuff)
            {
                CP = ObjectManager.Me.ComboPoint;
                SliceandDice.Launch();
                SliceandDiceTimer = new Timer(1000*(6 + (CP*6)));
                return;
            }
            if (Rupture.KnownSpell && Rupture.IsHostileDistanceGood && Rupture.IsSpellUsable
                && _mySettings.UseRupture && (!Rupture.TargetHaveBuff || RuptureTimer.IsReady))
            {
                CP = ObjectManager.Me.ComboPoint;
                Rupture.Launch();
                RuptureTimer = new Timer(1000*(4 + (CP*4)));
                return;
            }
            if (ExposeArmor.IsSpellUsable && ExposeArmor.IsHostileDistanceGood && ExposeArmor.KnownSpell
                && _mySettings.UseExposeArmor && !ObjectManager.Target.HaveBuff(113746))
            {
                ExposeArmor.Launch();
                return;
            }
            if (SinisterStrike.KnownSpell && SinisterStrike.IsSpellUsable && SinisterStrike.IsHostileDistanceGood
                && _mySettings.UseHemorrhage)
            {
                SinisterStrike.Launch();
                return;
            }
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell
                && _mySettings.UseArcaneTorrentForResource)
            {
                ArcaneTorrent.Launch();
            }
        }

        private void Patrolling()
        {
            if (!ObjectManager.Me.IsMounted)
            {
                Buff();
                Heal();
            }
        }

        #region Nested type: RogueSubtletySettings

        [Serializable]
        public class RogueSubtletySettings : Settings
        {
            public bool DoAvoidMelee = false;
            public int DoAvoidMeleeDistance = 0;
            public bool UseAlchFlask = true;
            public bool UseAmbush = true;
            public bool UseArcaneTorrentForDecast = true;
            public int UseArcaneTorrentForDecastAtPercentage = 100;
            public bool UseArcaneTorrentForResource = true;
            public bool UseBerserking = true;
            public bool UseBloodFury = true;
            public bool UseBurstofSpeed = true;
            public bool UseCheapShot = true;
            public bool UseCloakofShadows = true;
            public bool UseCombatReadiness = true;
            public bool UseCrimsonTempest = true;
            public bool UseCripplingPoison = false;
            public bool UseDeadlyPoison = true;
            public bool UseDeadlyThrow = true;
            public bool UseDismantle = true;
            public bool UseEngGlove = true;
            public bool UseEvasion = true;
            public bool UseEviscerate = true;
            public bool UseExposeArmor = false;
            public bool UseFanofKnives = true;
            public bool UseGarrote = true;
            public bool UseGiftoftheNaaru = true;
            public int UseGiftoftheNaaruAtPercentage = 80;
            public bool UseHemorrhage = true;
            public bool UseKick = true;
            public bool UseKidneyShot = true;
            public bool UseLeechingPoison = true;
            public bool UseLifeblood = true;
            public bool UseLowCombat = true;
            public bool UseMindnumbingPoison = true;
            public bool UseParalyticPoison = false;
            public bool UsePremeditation = true;
            public bool UsePreparation = true;
            public bool UseRecuperate = true;
            public bool UseRedirect = true;
            public bool UseRupture = true;
            public bool UseShadowBlades = true;
            public bool UseShadowDance = true;
            public bool UseShadowStep = true;
            public bool UseShiv = true;
            public bool UseShurikenToss = true;
            public bool UseSliceandDice = true;
            public bool UseSmokeBomb = true;
            public bool UseSprint = true;
            public bool UseStealth = false;
            public bool UseStoneform = true;
            public int UseStoneformAtPercentage = 80;
            public bool UseThrow = true;
            public bool UseTrinketOne = true;
            public bool UseTrinketTwo = true;
            public bool UseVanish = true;
            public bool UseWarStomp = true;
            public int UseWarStompAtPercentage = 80;
            public bool UseWoundPoison = false;

            public RogueSubtletySettings()
            {
                ConfigWinForm(new Point(500, 400), "Rogue Subtlety Settings");
                /* Professions & Racials */
                AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials");
                AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
                AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
                AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
                AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
                AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
                AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
                /* Rogue Buffs */
                AddControlInWinForm("Use Burst of Speed", "UseBurstofSpeed", "Rogue Buffs");
                AddControlInWinForm("Use Crippling Poison", "UseCripplingPoison", "Rogue Buffs");
                AddControlInWinForm("Use Deadly Poison", "UseDeadlyPoison", "Rogue Buffs");
                AddControlInWinForm("Use Leeching Poison", "UseLeechingPoison", "Rogue Buffs");
                AddControlInWinForm("Use Mindnumbing Poison", "UseMindnumbingPoison", "Rogue Buffs");
                AddControlInWinForm("Use Paralytic Poison", "UseParalyticPoison", "Rogue Buffs");
                AddControlInWinForm("Use Slice and Dice", "UseSliceandDice", "Rogue Buffs");
                AddControlInWinForm("Use Sprint", "UseSprint", "Rogue Buffs");
                AddControlInWinForm("Use Stealth", "UseStealth", "Rogue Buffs");
                AddControlInWinForm("Use Wound Poison", "UseWoundPoison", "Rogue Buffs");
                /* Offensive Spell */
                AddControlInWinForm("Use Ambush", "UseAmbush", "Offensive Spell");
                AddControlInWinForm("Use Crimson Tempest", "UseCrimsonTempest", "Offensive Spell");
                AddControlInWinForm("Use Deadly Throw", "UseDeadlyThrow", "Offensive Spell");
                AddControlInWinForm("Use Expose Armor", "UseExposeArmor", "Offensive Spell");
                AddControlInWinForm("Use Fan of Knives", "UseFanofKnives", "Offensive Spell");
                AddControlInWinForm("Use Eviscerate", "UseEviscerate", "Offensive Spell");
                AddControlInWinForm("Use Garrote", "UseGarrote", "Offensive Spell");
                AddControlInWinForm("Use Hemorrhage", "UseHemorrhage", "Offensive Spell");
                AddControlInWinForm("Use Rupture", "UseRupture", "Offensive Spell");
                AddControlInWinForm("Use Shiv", "UseShiv", "Offensive Spell");
                AddControlInWinForm("Use Shuriken Toss", "UseShurikenToss", "Offensive Spell");
                AddControlInWinForm("Use Throw", "UseThrow", "Offensive Spell");
                /* Offensive Cooldown */
                AddControlInWinForm("Use Premeditation", "UsePremeditation", "Offensive Cooldown");
                AddControlInWinForm("Use Redirect", "UseRedirect", "Offensive Cooldown");
                AddControlInWinForm("Use Shadow Blades", "UseShadowBlades", "Offensive Cooldown");
                AddControlInWinForm("Use Shadow Dance", "UseShadowDance", "Offensive Cooldown");
                AddControlInWinForm("Use Shadow Step", "UseShadowStep", "Offensive Cooldown");
                /* Defensive Cooldown */
                AddControlInWinForm("Use CheapShot", "UseCheapShot", "Defensive Cooldown");
                AddControlInWinForm("Use CloakofShadows", "UseCloakofShadows", "Defensive Cooldown");
                AddControlInWinForm("Use CombatReadiness", "UseCombatReadiness", "Defensive Cooldown");
                AddControlInWinForm("Use Dismantle", "UseDismantle", "Defensive Cooldown");
                AddControlInWinForm("Use Evasion", "UseEvasion", "Defensive Cooldown");
                AddControlInWinForm("Use Kick", "UseKick", "Defensive Cooldown");
                AddControlInWinForm("Use KidneyShot", "UseKidneyShot", "Defensive Cooldown");
                AddControlInWinForm("Use Preparation", "UsePreparation", "Defensive Cooldown");
                AddControlInWinForm("Use SmokeBomb", "UseSmokeBomb", "Defensive Cooldown");
                AddControlInWinForm("Use Vanish", "UseVanish", "Defensive Cooldown");
                /* Healing Spell */
                AddControlInWinForm("Use Recuperate", "UseRecuperate", "Healing Spell");
                /* Game Settings */
                AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
                AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
                AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
                AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
                AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
                AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
                AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
            }

            public static RogueSubtletySettings CurrentSetting { get; set; }

            public static RogueSubtletySettings GetSettings()
            {
                string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Rogue_Subtlety.xml";
                if (File.Exists(currentSettingsFile))
                {
                    return
                        CurrentSetting = Load<RogueSubtletySettings>(currentSettingsFile);
                }
                return new RogueSubtletySettings();
            }
        }

        #endregion
    }

    public class RogueAssassination
    {
        private readonly RogueAssassinationSettings _mySettings = RogueAssassinationSettings.GetSettings();

        #region General Timers & Variables

        private readonly WoWItem _firstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
        private readonly WoWItem _secondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);
        public int CP = 0;
        private Timer _engineeringTimer = new Timer(0);
        public int LC = 0;
        private Timer _onCd = new Timer(0);

        #endregion

        #region Professions & Racials

        public readonly Spell Alchemy = new Spell("Alchemy");
        public readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
        public readonly Spell Berserking = new Spell("Berserking");
        public readonly Spell BloodFury = new Spell("Blood Fury");
        public readonly Spell Engineering = new Spell("Engineering");
        public readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
        public readonly Spell Lifeblood = new Spell("Lifeblood");
        public readonly Spell Stoneform = new Spell("Stoneform");
        public readonly Spell WarStomp = new Spell("War Stomp");

        #endregion

        #region Rogue Buffs

        public readonly Spell BurstofSpeed = new Spell("Burst of Speed");
        public readonly Spell CripplingPoison = new Spell("Crippling Poison");
        public readonly Spell DeadlyPoison = new Spell("Deadly Poison");
        public readonly Spell LeechingPoison = new Spell("Leeching Poison");
        public readonly Spell MindnumbingPoison = new Spell("Mind-numbing Poison");
        public readonly Spell ParalyticPoison = new Spell("Paralytic Poison");
        public readonly Spell SliceandDice = new Spell("Slice and Dice");
        public readonly Spell Sprint = new Spell("Sprint");
        public readonly Spell Stealth = new Spell("Stealth");
        public readonly Spell WoundPoison = new Spell("Wound Poison");
        private Timer SliceandDiceTimer = new Timer(0);

        #endregion

        #region Offensive Spell

        public readonly Spell Ambush = new Spell("Ambush");
        public readonly Spell CrimsonTempest = new Spell("Crimson Tempest");
        public readonly Spell DeadlyThrow = new Spell("Deadly Throw");
        public readonly Spell Dispatch = new Spell("Dispatch");
        public readonly Spell Envenom = new Spell("Envenom");
        public readonly Spell Eviscerate = new Spell("Eviscerate");
        public readonly Spell ExposeArmor = new Spell("Expose Armor");
        public readonly Spell FanofKnives = new Spell("Fan of Knives");
        public readonly Spell Garrote = new Spell("Garrote");
        public readonly Spell Mutilate = new Spell("Mutilate");
        public readonly Spell Rupture = new Spell("Rupture");
        public readonly Spell Shiv = new Spell("Shiv");
        public readonly Spell ShurikenToss = new Spell("Shuriken Toss");
        public readonly Spell SinisterStrike = new Spell("Sinister Strike");
        public readonly Spell Throw = new Spell("Throw");
        private Timer RuptureTimer = new Timer(0);

        #endregion

        #region Offensive Cooldown

        public readonly Spell Redirect = new Spell("Redirect");
        public readonly Spell ShadowBlades = new Spell("Shadow Blades");
        public readonly Spell ShadowStep = new Spell("Shadow Step");
        public readonly Spell Vendetta = new Spell("Vendetta");

        #endregion

        #region Defensive Cooldown

        public readonly Spell CheapShot = new Spell("Cheap Shot");
        public readonly Spell CloakofShadows = new Spell("Cloak of Shadows");
        public readonly Spell CombatReadiness = new Spell("Combat Readiness");
        public readonly Spell Dismantle = new Spell("Dismantle");
        public readonly Spell Evasion = new Spell("Evasion");
        public readonly Spell Kick = new Spell("Kick");
        public readonly Spell KidneyShot = new Spell("Kidney Shot");
        public readonly Spell Preparation = new Spell("Preparation");
        public readonly Spell SmokeBomb = new Spell("Smoke Bomb");
        public readonly Spell Vanish = new Spell("Vanish");
        private Timer DismantleTimer = new Timer(0);

        #endregion

        #region Healing Spell

        public readonly Spell Recuperate = new Spell("Recuperate");

        #endregion

        public RogueAssassination()
        {
            Main.InternalRange = 5.0f;
            UInt64 lastTarget = 0;

            while (Main.InternalLoop)
            {
                try
                {
                    if (!ObjectManager.Me.IsDeadMe)
                    {
                        if (!ObjectManager.Me.IsMounted)
                        {
                            if (Fight.InFight && ObjectManager.Me.Target > 0)
                            {
                                if (ObjectManager.Me.Target != lastTarget
                                    && (Throw.IsHostileDistanceGood || CheapShot.IsHostileDistanceGood))
                                {
                                    Pull();
                                    lastTarget = ObjectManager.Me.Target;
                                }

                                if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                    && _mySettings.UseLowCombat)
                                {
                                    LC = 1;
                                    if (ObjectManager.Target.GetDistance < 30)
                                        LowCombat();
                                }
                                else
                                {
                                    LC = 0;
                                    if (ObjectManager.Target.GetDistance < 30)
                                        Combat();
                                }
                                break;
                            }
                            if (!ObjectManager.Me.IsCast)
                                Patrolling();
                        }
                    }
                    Thread.Sleep(500);
                }
                catch
                {
                }
                Thread.Sleep(250);
            }
        }

        private void Pull()
        {
            if (Redirect.IsSpellUsable && Redirect.IsHostileDistanceGood && Redirect.KnownSpell
                && _mySettings.UseRedirect && ObjectManager.Me.ComboPoint > 0)
            {
                Redirect.Launch();
                Thread.Sleep(200);
            }

            if (((Stealth.KnownSpell && Stealth.IsSpellUsable && !Stealth.HaveBuff && _mySettings.UseStealth)
                 || Stealth.HaveBuff) && LC != 1)
            {
                if (!Stealth.HaveBuff)
                {
                    Stealth.Launch();
                    Thread.Sleep(200);
                }

                if (ShadowStep.IsSpellUsable && ShadowStep.IsHostileDistanceGood && ShadowStep.KnownSpell
                    && _mySettings.UseShadowStep)
                {
                    ShadowStep.Launch();
                    Thread.Sleep(200);
                }

                if (Garrote.IsSpellUsable && Garrote.IsHostileDistanceGood && Garrote.KnownSpell
                    && _mySettings.UseGarrote)
                {
                    Garrote.Launch();
                    return;
                }
                if (CheapShot.IsSpellUsable && CheapShot.IsHostileDistanceGood && CheapShot.KnownSpell
                    && _mySettings.UseCheapShot)
                {
                    CheapShot.Launch();
                    return;
                }
                return;
            }
            if (ShurikenToss.IsSpellUsable && ShurikenToss.IsHostileDistanceGood && ShurikenToss.KnownSpell
                && _mySettings.UseShurikenToss && !_mySettings.UseStealth)
            {
                ShurikenToss.Launch();
                return;
            }
            if (Throw.IsSpellUsable && Throw.IsHostileDistanceGood && Throw.KnownSpell
                && _mySettings.UseThrow && !_mySettings.UseStealth)
            {
                MovementManager.StopMove();
                Throw.Launch();
                Thread.Sleep(1000);
            }
        }

        private void LowCombat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            DefenseCycle();
            Heal();

            if (Throw.IsSpellUsable && Throw.IsHostileDistanceGood && Throw.KnownSpell && !ObjectManager.Target.InCombat
                && _mySettings.UseThrow)
            {
                Throw.Launch();
                return;
            }
            // Blizzard API Calls for Envenom using Eviscerate Function
            if (Eviscerate.KnownSpell && Eviscerate.IsSpellUsable && Eviscerate.IsHostileDistanceGood
                && _mySettings.UseEnvenom && (ObjectManager.Me.ComboPoint > 4
                                             || (SliceandDice.HaveBuff && SliceandDiceTimer.IsReady)))
            {
                Eviscerate.Launch();
                if (SliceandDice.HaveBuff)
                    SliceandDiceTimer = new Timer(1000*(6 + (5*6)));
                return;
            }
            // Blizzard API Calls for Dispatch using Sinister Strike Function
            if (SinisterStrike.KnownSpell && SinisterStrike.IsSpellUsable && SinisterStrike.IsHostileDistanceGood
                && _mySettings.UseDispatch)
            {
                SinisterStrike.Launch();
                return;
            }
            if (SliceandDice.KnownSpell && SliceandDice.IsSpellUsable && SliceandDice.IsHostileDistanceGood
                && _mySettings.UseSliceandDice && !SliceandDice.HaveBuff)
            {
                CP = ObjectManager.Me.ComboPoint;
                SliceandDice.Launch();
                SliceandDiceTimer = new Timer(1000*(6 + (CP*6)));
                return;
            }
            if (Mutilate.KnownSpell && Mutilate.IsSpellUsable && ObjectManager.Target.HealthPercent > 35
                && _mySettings.UseMutilate && Mutilate.IsHostileDistanceGood)
            {
                Mutilate.Launch();
                return;
            }
            if (FanofKnives.KnownSpell && FanofKnives.IsSpellUsable && FanofKnives.IsHostileDistanceGood
                && _mySettings.UseFanofKnives)
            {
                FanofKnives.Launch();
            }
        }

        private void Combat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            if (_onCd.IsReady)
                DefenseCycle();
            DPSCycle();
            Heal();
            Decast();
            DPSCycle();
            DPSBurst();
            DPSCycle();
        }

        private void Buff()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (_mySettings.UseDeadlyPoison && DeadlyPoison.KnownSpell && DeadlyPoison.IsSpellUsable
                && !DeadlyPoison.HaveBuff)
            {
                DeadlyPoison.Launch();
                return;
            }
            else
            {
                if (!WoundPoison.HaveBuff && WoundPoison.KnownSpell && WoundPoison.IsSpellUsable
                    && _mySettings.UseWoundPoison && !DeadlyPoison.HaveBuff)
                {
                    WoundPoison.Launch();
                    return;
                }
            }

            if (!LeechingPoison.HaveBuff && LeechingPoison.KnownSpell && LeechingPoison.IsSpellUsable
                && _mySettings.UseLeechingPoison)
            {
                LeechingPoison.Launch();
                return;
            }
            if (!ParalyticPoison.HaveBuff && ParalyticPoison.KnownSpell && ParalyticPoison.IsSpellUsable
                && _mySettings.UseParalyticPoison && !LeechingPoison.HaveBuff)
            {
                ParalyticPoison.Launch();
                return;
            }
            if (!CripplingPoison.HaveBuff && CripplingPoison.KnownSpell && CripplingPoison.IsSpellUsable
                && _mySettings.UseCripplingPoison && !LeechingPoison.HaveBuff && ParalyticPoison.HaveBuff)
            {
                CripplingPoison.Launch();
                return;
            }
            if (!MindnumbingPoison.HaveBuff && MindnumbingPoison.KnownSpell && MindnumbingPoison.IsSpellUsable
                && _mySettings.UseMindnumbingPoison && !CripplingPoison.HaveBuff && !ParalyticPoison.HaveBuff
                && !LeechingPoison.HaveBuff)
            {
                MindnumbingPoison.Launch();
                return;
            }
            if (!ObjectManager.Me.InCombat && BurstofSpeed.IsSpellUsable && BurstofSpeed.KnownSpell
                && _mySettings.UseBurstofSpeed && ObjectManager.Me.GetMove)
            {
                BurstofSpeed.Launch();
                return;
            }
            if (!ObjectManager.Me.InCombat && Sprint.IsSpellUsable && Sprint.KnownSpell
                && _mySettings.UseSprint && ObjectManager.Me.GetMove)
            {
                Sprint.Launch();
                return;
            }
            if (_mySettings.UseAlchFlask && !ObjectManager.Me.HaveBuff(79638) && !ObjectManager.Me.HaveBuff(79640) && !ObjectManager.Me.HaveBuff(79639) &&
                !ItemsManager.IsItemOnCooldown(75525) && ItemsManager.GetItemCountByIdLUA(75525) > 0)
            {
                ItemsManager.UseItem(75525);
            }
        }

        private void AvoidMelee()
        {
            if (ObjectManager.Target.GetDistance < _mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
            {
                Logging.WriteFight("Too Close. Moving Back");
                var maxTimeTimer = new Timer(1000*2);
                MovementsAction.MoveBackward(true);
                while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                    Thread.Sleep(300);
                MovementsAction.MoveBackward(false);
                if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
                {
                    MovementsAction.MoveForward(true);
                    Thread.Sleep(1000);
                    MovementsAction.MoveForward(false);
                    MovementManager.Face(ObjectManager.Target.Position);
                }
            }
        }

        private void DefenseCycle()
        {
            if (ObjectManager.Me.HealthPercent <= 80 && !KidneyShot.TargetHaveBuff && KidneyShot.KnownSpell
                && KidneyShot.IsSpellUsable && KidneyShot.IsHostileDistanceGood && ObjectManager.Me.ComboPoint <= 3
                && Recuperate.HaveBuff && _mySettings.UseKidneyShot)
            {
                CP = ObjectManager.Me.ComboPoint;
                KidneyShot.Launch();
                _onCd = new Timer(1000*CP);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= 80 && Evasion.KnownSpell && Evasion.IsSpellUsable
                && _mySettings.UseEvasion)
            {
                Evasion.Launch();
                _onCd = new Timer(1000*15);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= 90 && CombatReadiness.KnownSpell && CombatReadiness.IsSpellUsable
                && _mySettings.UseCombatReadiness)
            {
                CombatReadiness.Launch();
                _onCd = new Timer(1000*20);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= 95 && Dismantle.KnownSpell && Dismantle.IsSpellUsable
                && _mySettings.UseDismantle)
            {
                Dismantle.Launch();
                DismantleTimer = new Timer(1000*60);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable &&
                WarStomp.KnownSpell
                && _mySettings.UseWarStomp)
            {
                WarStomp.Launch();
                _onCd = new Timer(1000*2);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable &&
                Stoneform.KnownSpell
                && _mySettings.UseStoneform)
            {
                Stoneform.Launch();
                _onCd = new Timer(1000*8);
                return;
            }
            if (ObjectManager.GetNumberAttackPlayer() >= 3 && Vanish.KnownSpell && Vanish.IsSpellUsable
                && _mySettings.UseVanish)
            {
                Vanish.Launch();
                Thread.Sleep(5000);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= 70 && Preparation.KnownSpell && Preparation.IsSpellUsable
                && _mySettings.UsePreparation && !Evasion.IsSpellUsable)
            {
                Preparation.Launch();
            }
        }

        private void Heal()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (ObjectManager.Me.HealthPercent <= _mySettings.UseGiftoftheNaaruAtPercentage && GiftoftheNaaru.KnownSpell &&
                GiftoftheNaaru.IsSpellUsable
                && _mySettings.UseGiftoftheNaaru)
            {
                GiftoftheNaaru.Launch();
                return;
            }
            else
            {
                if (!Recuperate.HaveBuff && ObjectManager.Me.ComboPoint > 1 && _mySettings.UseRecuperate
                    && ObjectManager.Me.HealthPercent <= 90 && Recuperate.KnownSpell && Recuperate.IsSpellUsable)
                {
                    Recuperate.Launch();
                    return;
                }
            }
        }

        private void Decast()
        {
            if (ObjectManager.Target.IsCast && Kick.KnownSpell && Kick.IsSpellUsable
                && Kick.IsHostileDistanceGood && _mySettings.UseKick && ObjectManager.Target.IsTargetingMe)
            {
                Kick.Launch();
                return;
            }
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8
                && ObjectManager.Me.HealthPercent <= _mySettings.UseArcaneTorrentForDecastAtPercentage
                && _mySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast &&
                ObjectManager.Target.IsTargetingMe)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (ObjectManager.Target.IsCast && CloakofShadows.KnownSpell && CloakofShadows.IsSpellUsable
                && ObjectManager.Target.IsTargetingMe && _mySettings.UseCloakofShadows)
            {
                CloakofShadows.Launch();
                return;
            }
            if (ObjectManager.Target.IsCast && SmokeBomb.KnownSpell && SmokeBomb.IsSpellUsable
                && ObjectManager.Target.IsTargetingMe && _mySettings.UseSmokeBomb
                && !CloakofShadows.HaveBuff)
            {
                SmokeBomb.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent <= 70 && Preparation.KnownSpell && Preparation.IsSpellUsable
                && _mySettings.UsePreparation && !CloakofShadows.IsSpellUsable && ObjectManager.Target.IsCast
                && ObjectManager.Target.IsTargetingMe)
            {
                Preparation.Launch();
            }
        }

        private void DPSBurst()
        {
            if (_mySettings.UseTrinketOne && !ItemsManager.IsItemOnCooldown(_firstTrinket.Entry) && ItemsManager.IsUsableItemById(_firstTrinket.Entry))
            {
                ItemsManager.UseItem(_firstTrinket.Name);
                Logging.WriteFight("Use First Trinket Slot");
            }

            if (_mySettings.UseTrinketTwo && !ItemsManager.IsItemOnCooldown(_secondTrinket.Entry) && ItemsManager.IsUsableItemById(_secondTrinket.Entry))
            {
                ItemsManager.UseItem(_secondTrinket.Name);
                Logging.WriteFight("Use Second Trinket Slot");
                return;
            }
            if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                && _mySettings.UseBerserking)
            {
                Berserking.Launch();
                return;
            }
            if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 30
                && _mySettings.UseBloodFury)
            {
                BloodFury.Launch();
                return;
            }
            if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                && _mySettings.UseLifeblood)
            {
                Lifeblood.Launch();
                return;
            }
            if (_engineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                && _mySettings.UseEngGlove)
            {
                Logging.WriteFight("Use Engineering Gloves.");
                Lua.RunMacroText("/use 10");
                _engineeringTimer = new Timer(1000*60);
                return;
            }
            if (Vendetta.KnownSpell && Vendetta.IsSpellUsable
                && _mySettings.UseVendetta && Vendetta.IsHostileDistanceGood)
            {
                Vendetta.Launch();
                return;
            }
            if (ShadowBlades.KnownSpell && ShadowBlades.IsSpellUsable
                && _mySettings.UseShadowBlades && ObjectManager.Target.GetDistance < 30)
            {
                ShadowBlades.Launch();
            }
        }

        private void DPSCycle()
        {
            if (Mutilate.KnownSpell && Mutilate.IsSpellUsable && _mySettings.UseMutilate
                && Mutilate.IsHostileDistanceGood && _mySettings.UseShadowFocus && !ObjectManager.Target.InCombat
                && (Stealth.HaveBuff || ObjectManager.Me.HaveBuff(115192)))
            {
                Mutilate.Launch();
                return;
            }

            if (Garrote.IsSpellUsable && Garrote.IsHostileDistanceGood && Garrote.KnownSpell
                && _mySettings.UseGarrote && ObjectManager.Me.HaveBuff(115192))
            {
                Garrote.Launch();
                return;
            }

            if (Throw.IsSpellUsable && Throw.IsHostileDistanceGood && Throw.KnownSpell && !ObjectManager.Target.InCombat
                && _mySettings.UseThrow)
            {
                Throw.Launch();
                return;
            }

            if (Eviscerate.KnownSpell && Eviscerate.IsSpellUsable && Eviscerate.IsHostileDistanceGood
                && _mySettings.UseEnvenom && (ObjectManager.Me.ComboPoint > 4
                                             || (SliceandDice.HaveBuff && SliceandDiceTimer.IsReady)))
            {
                Eviscerate.Launch();
                if (SliceandDice.HaveBuff)
                    SliceandDiceTimer = new Timer(1000*(6 + (5*6)));
                return;
            }
            if (SinisterStrike.KnownSpell && SinisterStrike.IsSpellUsable && SinisterStrike.IsHostileDistanceGood
                && _mySettings.UseDispatch)
            {
                SinisterStrike.Launch();
                return;
            }
            if (SliceandDice.KnownSpell && SliceandDice.IsSpellUsable && SliceandDice.IsHostileDistanceGood
                && _mySettings.UseSliceandDice && !SliceandDice.HaveBuff)
            {
                CP = ObjectManager.Me.ComboPoint;
                SliceandDice.Launch();
                SliceandDiceTimer = new Timer(1000*(6 + (CP*6)));
                return;
            }
            if (Rupture.KnownSpell && Rupture.IsHostileDistanceGood && Rupture.IsSpellUsable
                && _mySettings.UseRupture && (!Rupture.TargetHaveBuff || RuptureTimer.IsReady))
            {
                CP = ObjectManager.Me.ComboPoint;
                Rupture.Launch();
                RuptureTimer = new Timer(1000*(4 + (CP*4)));
                return;
            }
            if (ExposeArmor.IsSpellUsable && ExposeArmor.IsHostileDistanceGood && ExposeArmor.KnownSpell
                && _mySettings.UseExposeArmor && !ObjectManager.Target.HaveBuff(113746))
            {
                ExposeArmor.Launch();
                return;
            }
            if (Mutilate.KnownSpell && Mutilate.IsSpellUsable && ObjectManager.Target.HealthPercent > 35
                && _mySettings.UseMutilate && Mutilate.IsHostileDistanceGood)
            {
                Mutilate.Launch();
                return;
            }
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell
                && _mySettings.UseArcaneTorrentForResource)
            {
                ArcaneTorrent.Launch();
            }
        }

        private void Patrolling()
        {
            if (!ObjectManager.Me.IsMounted)
            {
                Buff();
                Heal();
            }
        }

        #region Nested type: RogueAssassinationSettings

        [Serializable]
        public class RogueAssassinationSettings : Settings
        {
            public bool DoAvoidMelee = false;
            public int DoAvoidMeleeDistance = 0;
            public bool UseAlchFlask = true;
            public bool UseAmbush = true;
            public bool UseArcaneTorrentForDecast = true;
            public int UseArcaneTorrentForDecastAtPercentage = 100;
            public bool UseArcaneTorrentForResource = true;
            public bool UseBerserking = true;
            public bool UseBloodFury = true;
            public bool UseBurstofSpeed = true;
            public bool UseCheapShot = true;
            public bool UseCloakofShadows = true;
            public bool UseCombatReadiness = true;
            public bool UseCrimsonTempest = true;
            public bool UseCripplingPoison = false;
            public bool UseDeadlyPoison = true;
            public bool UseDeadlyThrow = true;
            public bool UseDismantle = true;
            public bool UseDispatch = true;
            public bool UseEngGlove = true;
            public bool UseEnvenom = true;
            public bool UseEvasion = true;
            public bool UseExposeArmor = false;
            public bool UseFanofKnives = true;
            public bool UseGarrote = true;
            public bool UseGiftoftheNaaru = true;
            public int UseGiftoftheNaaruAtPercentage = 80;
            public bool UseKick = true;
            public bool UseKidneyShot = true;
            public bool UseLeechingPoison = true;
            public bool UseLifeblood = true;
            public bool UseLowCombat = true;
            public bool UseMindnumbingPoison = true;
            public bool UseMutilate = true;
            public bool UseParalyticPoison = false;
            public bool UsePreparation = true;
            public bool UseRecuperate = true;
            public bool UseRedirect = true;
            public bool UseRupture = true;
            public bool UseShadowBlades = true;
            public bool UseShadowFocus = false;
            public bool UseShadowStep = true;
            public bool UseShiv = true;
            public bool UseShurikenToss = true;
            public bool UseSliceandDice = true;
            public bool UseSmokeBomb = true;
            public bool UseSprint = true;
            public bool UseStealth = false;
            public bool UseStoneform = true;
            public int UseStoneformAtPercentage = 80;
            public bool UseThrow = true;
            public bool UseTrinketOne = true;
            public bool UseTrinketTwo = true;
            public bool UseVanish = true;
            public bool UseVendetta = true;
            public bool UseWarStomp = true;
            public int UseWarStompAtPercentage = 80;
            public bool UseWoundPoison = false;

            public RogueAssassinationSettings()
            {
                ConfigWinForm(new Point(500, 400), "Rogue Assassination Settings");
                /* Professions & Racials */
                AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials");
                AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
                AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
                AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
                AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
                AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
                AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
                /* Rogue Buffs */
                AddControlInWinForm("Use Burst of Speed", "UseBurstofSpeed", "Rogue Buffs");
                AddControlInWinForm("Use Crippling Poison", "UseCripplingPoison", "Rogue Buffs");
                AddControlInWinForm("Use Deadly Poison", "UseDeadlyPoison", "Rogue Buffs");
                AddControlInWinForm("Use Leeching Poison", "UseLeechingPoison", "Rogue Buffs");
                AddControlInWinForm("Use Mindnumbing Poison", "UseMindnumbingPoison", "Rogue Buffs");
                AddControlInWinForm("Use Paralytic Poison", "UseParalyticPoison", "Rogue Buffs");
                AddControlInWinForm("Use Slice and Dice", "UseSliceandDice", "Rogue Buffs");
                AddControlInWinForm("Use Sprint", "UseSprint", "Rogue Buffs");
                AddControlInWinForm("Use Stealth", "UseStealth", "Rogue Buffs");
                AddControlInWinForm("Use Wound Poison", "UseWoundPoison", "Rogue Buffs");
                /* Offensive Spell */
                AddControlInWinForm("Use Ambush", "UseAmbush", "Offensive Spell");
                AddControlInWinForm("Use Crimson Tempest", "UseCrimsonTempest", "Offensive Spell");
                AddControlInWinForm("Use Deadly Throw", "UseDeadlyThrow", "Offensive Spell");
                AddControlInWinForm("Use Dispatch", "UseDispatch", "Offensive Spell");
                AddControlInWinForm("Use Envenom", "UseEnvenom", "Offensive Spell");
                AddControlInWinForm("Use Expose Armor", "UseExposeArmor", "Offensive Spell");
                AddControlInWinForm("Use Fan of Knives", "UseFanofKnives", "Offensive Spell");
                AddControlInWinForm("Use Garrote", "UseGarrote", "Offensive Spell");
                AddControlInWinForm("Use Mutilate", "UseMutilate", "Offensive Spell");
                AddControlInWinForm("Use Rupture", "UseRupture", "Offensive Spell");
                AddControlInWinForm("Use Shiv", "UseShiv", "Offensive Spell");
                AddControlInWinForm("Use Shuriken Toss", "UseShurikenToss", "Offensive Spell");
                AddControlInWinForm("Use Throw", "UseThrow", "Offensive Spell");
                /* Offensive Cooldown */
                AddControlInWinForm("Use Redirect", "UseRedirect", "Offensive Cooldown");
                AddControlInWinForm("Use Shadow Blades", "UseShadowBlades", "Offensive Cooldown");
                AddControlInWinForm("Use Shadow Step", "UseShadowStep", "Offensive Cooldown");
                AddControlInWinForm("Use Vendetta", "UseVendetta", "Offensive Cooldown");
                /* Defensive Cooldown */
                AddControlInWinForm("Use CheapShot", "UseCheapShot", "Defensive Cooldown");
                AddControlInWinForm("Use CloakofShadows", "UseCloakofShadows", "Defensive Cooldown");
                AddControlInWinForm("Use CombatReadiness", "UseCombatReadiness", "Defensive Cooldown");
                AddControlInWinForm("Use Dismantle", "UseDismantle", "Defensive Cooldown");
                AddControlInWinForm("Use Evasion", "UseEvasion", "Defensive Cooldown");
                AddControlInWinForm("Use Kick", "UseKick", "Defensive Cooldown");
                AddControlInWinForm("Use KidneyShot", "UseKidneyShot", "Defensive Cooldown");
                AddControlInWinForm("Use Preparation", "UsePreparation", "Defensive Cooldown");
                AddControlInWinForm("Use SmokeBomb", "UseSmokeBomb", "Defensive Cooldown");
                AddControlInWinForm("Use Vanish", "UseVanish", "Defensive Cooldown");
                /* Healing Spell */
                AddControlInWinForm("Use Recuperate", "UseRecuperate", "Healing Spell");
                /* Game Settings */
                AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
                AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
                AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
                AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
                AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
                AddControlInWinForm("Use Shadow Focus Talent?", "UseShadowFocus", "Game Settings");
                AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
                AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
            }

            public static RogueAssassinationSettings currentSetting { get; set; }

            public static RogueAssassinationSettings GetSettings()
            {
                string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Rogue_Assassination.xml";
                if (File.Exists(currentSettingsFile))
                {
                    return
                        currentSetting = Load<RogueAssassinationSettings>(currentSettingsFile);
                }
                return new RogueAssassinationSettings();
            }
        }

        #endregion
    }

    #endregion

    #region Warrior

    public class WarriorArms
    {
        private readonly WarriorArmsSettings _mySettings = WarriorArmsSettings.GetSettings();

        #region General Timers & Variables

        private readonly WoWItem _firstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
        private readonly WoWItem _secondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);
        private Timer _engineeringTimer = new Timer(0);
        public int LC = 0;
        private Timer _onCd = new Timer(0);

        #endregion

        #region Professions & Racials

        public readonly Spell Alchemy = new Spell("Alchemy");
        public readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
        public readonly Spell Berserking = new Spell("Berserking");
        public readonly Spell BloodFury = new Spell("Blood Fury");
        public readonly Spell Engineering = new Spell("Engineering");
        public readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
        public readonly Spell Lifeblood = new Spell("Lifeblood");
        public readonly Spell Stoneform = new Spell("Stoneform");
        public readonly Spell WarStomp = new Spell("War Stomp");

        #endregion

        #region Warrior Buffs

        public readonly Spell BattleShout = new Spell("Battle Shout");
        public readonly Spell BattleStance = new Spell("Battle Stance");
        public readonly Spell BerserkerStance = new Spell("Berserker Stance");
        public readonly Spell CommandingShout = new Spell("Commanding Shout");
        public readonly Spell DefensiveStance = new Spell("Defensive Stance");

        #endregion

        #region Offensive Spell

        public readonly Spell Avatar = new Spell("Avatar");
        public readonly Spell Bladestorm = new Spell("Bladestorm");
        public readonly Spell Bloodbath = new Spell("Bloodbath");
        public readonly Spell Charge = new Spell("Charge");
        public readonly Spell Cleave = new Spell("Cleave");
        public readonly Spell ColossusSmash = new Spell("Colossus Smash");
        public readonly Spell DragonRoar = new Spell("Dragon Roar");
        public readonly Spell Execute = new Spell("Execute");
        public readonly Spell HeroicLeap = new Spell("Heroic Leap");
        public readonly Spell HeroicStrike = new Spell("Heroic Strike");
        public readonly Spell HeroicThrow = new Spell("Heroic Throw");
        public readonly Spell ImpendingVictory = new Spell("Impending Victory");
        public readonly Spell MortalStrike = new Spell("Mortal Strike");
        public readonly Spell Overpower = new Spell("Overpower");
        public readonly Spell Shockwave = new Spell("Shockwave");
        public readonly Spell Slam = new Spell("Slam");
        public readonly Spell StormBolt = new Spell("Storm Bolt");
        public readonly Spell Taunt = new Spell("Taunt");
        public readonly Spell ThunderClap = new Spell("Thunder Clap");
        public readonly Spell Whirlwind = new Spell("Whirlwind");

        #endregion

        #region Offensive Cooldown

        public readonly Spell BerserkerRage = new Spell("Berserker Rage");
        public readonly Spell DeadlyCalm = new Spell("Deadly Calm");
        public readonly Spell Recklessness = new Spell("Recklessness");
        public readonly Spell ShatteringThrow = new Spell("Shattering Throw");
        public readonly Spell SkullBanner = new Spell("Skull Banner");
        public readonly Spell SweepingStrikes = new Spell("Sweeping Strikes");

        #endregion

        #region Defensive Cooldown

        public readonly Spell DemoralizingBanner = new Spell("Demoralizing Banner");
        public readonly Spell DiebytheSword = new Spell("Die by the Sword");
        public readonly Spell Disarm = new Spell("Disarm");
        public readonly Spell DisruptingShout = new Spell("Disrupting Shout");
        public readonly Spell Hamstring = new Spell("Hamstring");
        public readonly Spell IntimidatingShout = new Spell("Intimidating Shout");
        public readonly Spell MassSpellReflection = new Spell("Mass Spell Reflection");
        public readonly Spell PiercingHowl = new Spell("Piercing Howl");
        public readonly Spell Pummel = new Spell("Pummel");
        public readonly Spell StaggeringShout = new Spell("Staggering Shout");
        private Timer _disarmTimer = new Timer(0);

        #endregion

        #region Healing Spell

        public readonly Spell EnragedRegeneration = new Spell("Enraged Regeneration");
        public readonly Spell RallyingCry = new Spell("Rallying Cry");
        public readonly Spell VictoryRush = new Spell("Victory Rush");

        #endregion

        public WarriorArms()
        {
            Main.InternalRange = 5.0f;
            UInt64 lastTarget = 0;

            while (Main.InternalLoop)
            {
                try
                {
                    if (!ObjectManager.Me.IsDeadMe)
                    {
                        if (!ObjectManager.Me.IsMounted)
                        {
                            if (Fight.InFight && ObjectManager.Me.Target > 0)
                            {
                                if (ObjectManager.Me.Target != lastTarget
                                    && Taunt.IsHostileDistanceGood)
                                {
                                    Pull();
                                    lastTarget = ObjectManager.Me.Target;
                                }

                                if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                    && _mySettings.UseLowCombat)
                                {
                                    LC = 1;
                                    if (ObjectManager.Target.GetDistance < 30)
                                        LowCombat();
                                }
                                else
                                {
                                    LC = 0;
                                    if (ObjectManager.Target.GetDistance < 30)
                                        Combat();
                                }
                                break;
                            }
                            if (!ObjectManager.Me.IsCast)
                                Patrolling();
                        }
                    }
                    Thread.Sleep(500);
                }
                catch
                {
                }
                Thread.Sleep(150);
            }
        }

        private void Pull()
        {
            if (HeroicLeap.IsHostileDistanceGood && HeroicLeap.KnownSpell && HeroicLeap.IsSpellUsable
                && _mySettings.UseHeroicLeap)
            {
                SpellManager.CastSpellByIDAndPosition(6544, ObjectManager.Target.Position);
                Thread.Sleep(200);
            }

            if (Taunt.IsHostileDistanceGood && Taunt.KnownSpell && Taunt.IsSpellUsable
                && _mySettings.UseTaunt && ObjectManager.Target.GetDistance > 20)
            {
                Taunt.Launch();
                return;
            }
        }

        private void LowCombat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            DefenseCycle();
            Heal();

            if (HeroicThrow.KnownSpell && HeroicThrow.IsSpellUsable && HeroicThrow.IsHostileDistanceGood
                && _mySettings.UseHeroicThrow && !ObjectManager.Target.InCombat)
            {
                HeroicThrow.Launch();
                return;
            }

            if (Charge.KnownSpell && Charge.IsSpellUsable && Charge.IsHostileDistanceGood
                && _mySettings.UseCharge && ObjectManager.Target.GetDistance > Main.InternalRange)
            {
                Charge.Launch();
                return;
            }

            if (MortalStrike.KnownSpell && MortalStrike.IsSpellUsable && MortalStrike.IsHostileDistanceGood
                && _mySettings.UseMortalStrike)
            {
                MortalStrike.Launch();
                return;
            }
            if (ColossusSmash.KnownSpell && ColossusSmash.IsHostileDistanceGood && ColossusSmash.IsSpellUsable
                && _mySettings.UseColossusSmash)
            {
                ColossusSmash.Launch();
                return;
            }
            if (HeroicStrike.KnownSpell && HeroicStrike.IsSpellUsable && HeroicStrike.IsHostileDistanceGood
                && _mySettings.UseHeroicStrike && ObjectManager.GetNumberAttackPlayer() < 3
                && (ObjectManager.Me.RagePercentage > 90 || ObjectManager.Me.HaveBuff(125831)))
            {
                if (DeadlyCalm.KnownSpell && DeadlyCalm.IsSpellUsable && _mySettings.UseDeadlyCalm)
                {
                    DeadlyCalm.Launch();
                    Thread.Sleep(200);
                }

                HeroicStrike.Launch();
                return;
            }
            if (Shockwave.KnownSpell && Shockwave.IsSpellUsable && ObjectManager.Target.GetDistance < 10
                && _mySettings.UseShockwave)
            {
                Shockwave.Launch();
                return;
            }
            if (DragonRoar.KnownSpell && DragonRoar.IsSpellUsable && ObjectManager.Target.GetDistance < 8
                && _mySettings.UseDragonRoar)
            {
                DragonRoar.Launch();
                return;
            }
            if (Bladestorm.KnownSpell && Bladestorm.IsSpellUsable && ObjectManager.Target.GetDistance < 8
                && _mySettings.UseBladestorm)
            {
                Bladestorm.Launch();
                return;
            }

            if (ThunderClap.KnownSpell && ThunderClap.IsSpellUsable && ThunderClap.IsHostileDistanceGood
                && _mySettings.UseThunderClap)
            {
                ThunderClap.Launch();
            }
        }

        private void Combat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            if (_onCd.IsReady)
                DefenseCycle();
            DPSCycle();
            Heal();
            Decast();
            DPSCycle();
            DPSBurst();
            DPSCycle();
        }

        private void Buff()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (ObjectManager.Me.HealthPercent < 30 && _mySettings.UseDefensiveStance
                && DefensiveStance.KnownSpell && DefensiveStance.IsSpellUsable && !DefensiveStance.HaveBuff)
            {
                DefensiveStance.Launch();
                return;
            }
            if (!BattleStance.HaveBuff && BattleStance.KnownSpell && BattleStance.IsSpellUsable
                && _mySettings.UseBattleStance && ObjectManager.Me.HealthPercent > 50)
            {
                BattleStance.Launch();
                return;
            }
            if (!BerserkerStance.HaveBuff && BerserkerStance.KnownSpell && BerserkerStance.IsSpellUsable
                && _mySettings.UseBerserkerStance && !_mySettings.UseBattleStance && ObjectManager.Me.HealthPercent > 50)
            {
                BerserkerStance.Launch();
                return;
            }
            if (BattleShout.KnownSpell && BattleShout.IsSpellUsable && !BattleShout.HaveBuff
                && _mySettings.UseBattleShout)
            {
                BattleShout.Launch();
                return;
            }
            if (CommandingShout.KnownSpell && CommandingShout.IsSpellUsable && !CommandingShout.HaveBuff
                && _mySettings.UseCommandingShout && !_mySettings.UseBattleShout)
            {
                CommandingShout.Launch();
                return;
            }
            if (_mySettings.UseAlchFlask && !ObjectManager.Me.HaveBuff(79638) && !ObjectManager.Me.HaveBuff(79640) && !ObjectManager.Me.HaveBuff(79639)
                && !ItemsManager.IsItemOnCooldown(75525) && ItemsManager.GetItemCountByIdLUA(75525) > 0)
            {
                ItemsManager.UseItem(75525);
            }
        }

        private void AvoidMelee()
        {
            if (ObjectManager.Target.GetDistance < _mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
            {
                Logging.WriteFight("Too Close. Moving Back");
                var maxTimeTimer = new Timer(1000*2);
                MovementsAction.MoveBackward(true);
                while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                    Thread.Sleep(300);
                MovementsAction.MoveBackward(false);
                if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
                {
                    MovementsAction.MoveForward(true);
                    Thread.Sleep(1000);
                    MovementsAction.MoveForward(false);
                    MovementManager.Face(ObjectManager.Target.Position);
                }
            }
        }

        private void DefenseCycle()
        {
            if (ObjectManager.Me.HealthPercent < 95 && _mySettings.UseDisarm && Disarm.IsHostileDistanceGood
                && Disarm.KnownSpell && Disarm.IsSpellUsable && _disarmTimer.IsReady)
            {
                Disarm.Launch();
                _disarmTimer = new Timer(1000*60);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 20 && _mySettings.UseIntimidatingShout
                && IntimidatingShout.KnownSpell && IntimidatingShout.IsSpellUsable &&
                ObjectManager.Target.GetDistance < 8)
            {
                IntimidatingShout.Launch();
                _onCd = new Timer(1000*8);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 80 && _mySettings.UseDiebytheSword
                && DiebytheSword.KnownSpell && DiebytheSword.IsSpellUsable)
            {
                DiebytheSword.Launch();
                _onCd = new Timer(1000*8);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 80 && _mySettings.UseDemoralizingBanner
                && DemoralizingBanner.KnownSpell && DemoralizingBanner.IsSpellUsable &&
                ObjectManager.Target.GetDistance < 30)
            {
                SpellManager.CastSpellByIDAndPosition(114203, ObjectManager.Target.Position);
                _onCd = new Timer(1000*15);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable &&
                WarStomp.KnownSpell
                && _mySettings.UseWarStomp)
            {
                WarStomp.Launch();
                _onCd = new Timer(1000*2);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable &&
                Stoneform.KnownSpell
                && _mySettings.UseStoneform)
            {
                Stoneform.Launch();
                _onCd = new Timer(1000*8);
            }
        }

        private void Heal()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (VictoryRush.KnownSpell && VictoryRush.IsSpellUsable && VictoryRush.IsHostileDistanceGood
                && _mySettings.UseVictoryRush && ObjectManager.Me.HealthPercent < 90)
            {
                VictoryRush.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 30 && RallyingCry.IsSpellUsable && RallyingCry.KnownSpell
                && _mySettings.UseRallyingCry && ObjectManager.Me.InCombat)
            {
                RallyingCry.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseGiftoftheNaaruAtPercentage &&
                GiftoftheNaaru.IsSpellUsable && GiftoftheNaaru.KnownSpell
                && _mySettings.UseGiftoftheNaaru)
            {
                GiftoftheNaaru.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 80 && EnragedRegeneration.IsSpellUsable &&
                EnragedRegeneration.KnownSpell
                && _mySettings.UseEnragedRegeneration)
            {
                EnragedRegeneration.Launch();
            }
        }

        private void Decast()
        {
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8
                && ObjectManager.Me.HealthPercent <= _mySettings.UseArcaneTorrentForDecastAtPercentage
                && _mySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (!Hamstring.TargetHaveBuff && _mySettings.UseHamstring && Hamstring.KnownSpell
                && Hamstring.IsSpellUsable && Hamstring.IsHostileDistanceGood)
            {
                Hamstring.Launch();
                return;
            }
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && Pummel.IsHostileDistanceGood
                && Pummel.KnownSpell && Pummel.IsSpellUsable && _mySettings.UsePummel)
            {
                Pummel.Launch();
                return;
            }
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe &&
                ObjectManager.Target.GetDistance < 10
                && DisruptingShout.KnownSpell && DisruptingShout.IsSpellUsable && _mySettings.UseDisruptingShout)
            {
                DisruptingShout.Launch();
                return;
            }
            if (ObjectManager.Target.GetMove && !PiercingHowl.TargetHaveBuff && _mySettings.UsePiercingHowl
                && PiercingHowl.KnownSpell && PiercingHowl.IsSpellUsable && ObjectManager.Target.GetDistance < 15)
            {
                PiercingHowl.Launch();
                return;
            }
            if (Hamstring.TargetHaveBuff && _mySettings.UseStaggeringShout && StaggeringShout.KnownSpell
                && StaggeringShout.IsSpellUsable && ObjectManager.Target.GetDistance < 20)
            {
                StaggeringShout.Launch();
                return;
            }
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe &&
                _mySettings.UseMassSpellReflection
                && MassSpellReflection.KnownSpell && MassSpellReflection.IsSpellUsable)
            {
                MassSpellReflection.Launch();
            }
        }

        private void DPSBurst()
        {
            if (_mySettings.UseTrinketOne && !ItemsManager.IsItemOnCooldown(_firstTrinket.Entry) && ItemsManager.IsUsableItemById(_firstTrinket.Entry))
            {
                ItemsManager.UseItem(_firstTrinket.Name);
                Logging.WriteFight("Use First Trinket Slot");
            }

            if (_mySettings.UseTrinketTwo && !ItemsManager.IsItemOnCooldown(_secondTrinket.Entry) && ItemsManager.IsUsableItemById(_secondTrinket.Entry))
            {
                ItemsManager.UseItem(_secondTrinket.Name);
                Logging.WriteFight("Use Second Trinket Slot");
                return;
            }
            if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                && _mySettings.UseBerserking)
            {
                Berserking.Launch();
                return;
            }
            if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 30
                && _mySettings.UseBloodFury)
            {
                BloodFury.Launch();
                return;
            }
            if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                && _mySettings.UseLifeblood)
            {
                Lifeblood.Launch();
                return;
            }
            if (_engineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                && _mySettings.UseEngGlove)
            {
                Logging.WriteFight("Use Engineering Gloves.");
                Lua.RunMacroText("/use 10");
                _engineeringTimer = new Timer(1000*60);
                return;
            }
            if (BerserkerRage.KnownSpell && BerserkerRage.IsSpellUsable && ObjectManager.Me.RagePercentage < 50
                && _mySettings.UseBerserkerRage && ObjectManager.Target.GetDistance < 30)
            {
                BerserkerRage.Launch();
                return;
            }
            if (BattleShout.KnownSpell && BattleShout.IsSpellUsable && ObjectManager.Me.RagePercentage < 80
                && _mySettings.UseBattleShout && ObjectManager.Target.GetDistance < 30)
            {
                BattleShout.Launch();
                return;
            }
            if (CommandingShout.KnownSpell && CommandingShout.IsSpellUsable && ObjectManager.Me.RagePercentage < 80
                && _mySettings.UseCommandingShout && !_mySettings.UseBattleShout && ObjectManager.Target.GetDistance < 30)
            {
                CommandingShout.Launch();
                return;
            }
            if (Recklessness.KnownSpell && Recklessness.IsSpellUsable && _mySettings.UseRecklessness
                && ObjectManager.Target.GetDistance < 30)
            {
                Recklessness.Launch();
                return;
            }
            if (ShatteringThrow.KnownSpell && ShatteringThrow.IsSpellUsable && ShatteringThrow.IsHostileDistanceGood
                && _mySettings.UseShatteringThrow)
            {
                ShatteringThrow.Launch();
                return;
            }
            if (SkullBanner.KnownSpell && SkullBanner.IsSpellUsable
                && _mySettings.UseSkullBanner && ObjectManager.Target.GetDistance < 30)
            {
                SkullBanner.Launch();
                return;
            }
            if (Avatar.KnownSpell && Avatar.IsSpellUsable
                && _mySettings.UseAvatar && ObjectManager.Target.GetDistance < 30)
            {
                Avatar.Launch();
                return;
            }
            if (Bloodbath.KnownSpell && Bloodbath.IsSpellUsable
                && _mySettings.UseBloodbath && ObjectManager.Target.GetDistance < 30)
            {
                Bloodbath.Launch();
                return;
            }
            if (DeadlyCalm.KnownSpell && DeadlyCalm.IsSpellUsable && ObjectManager.Me.RagePercentage > 90
                && _mySettings.UseDeadlyCalm && HeroicStrike.IsHostileDistanceGood)
            {
                DeadlyCalm.Launch();
                return;
            }
            if (StormBolt.KnownSpell && StormBolt.IsSpellUsable
                && _mySettings.UseStormBolt && StormBolt.IsHostileDistanceGood)
            {
                StormBolt.Launch();
                return;
            }

            if (HeroicStrike.KnownSpell && HeroicStrike.IsSpellUsable && HeroicStrike.IsHostileDistanceGood
                && _mySettings.UseHeroicStrike && ObjectManager.Me.Level < 10)
            {
                HeroicStrike.Launch();
            }
        }

        private void DPSCycle()
        {
            if (HeroicThrow.KnownSpell && HeroicThrow.IsSpellUsable && HeroicThrow.IsHostileDistanceGood
                && _mySettings.UseHeroicThrow && !ObjectManager.Target.InCombat)
            {
                HeroicThrow.Launch();
                return;
            }
            if (Charge.KnownSpell && Charge.IsSpellUsable && Charge.IsHostileDistanceGood
                && _mySettings.UseCharge && ObjectManager.Target.GetDistance > Main.InternalRange)
            {
                Charge.Launch();
                return;
            }
            if (VictoryRush.KnownSpell && VictoryRush.IsSpellUsable && VictoryRush.IsHostileDistanceGood
                && _mySettings.UseVictoryRush && ObjectManager.Me.HealthPercent < 90)
            {
                VictoryRush.Launch();
                return;
            }
            if (SweepingStrikes.KnownSpell && SweepingStrikes.IsSpellUsable &&
                ObjectManager.GetNumberAttackPlayer() > 1
                && _mySettings.UseSweepingStrikes)
            {
                SweepingStrikes.Launch();
                return;
            }
            if (ThunderClap.KnownSpell && ThunderClap.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 2
                && _mySettings.UseThunderClap)
            {
                ThunderClap.Launch();
                return;
            }
            if (Whirlwind.KnownSpell && Whirlwind.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 3
                && _mySettings.UseWhirlwind)
            {
                Whirlwind.Launch();
                return;
            }
            if (Cleave.KnownSpell && Cleave.IsSpellUsable && Cleave.IsHostileDistanceGood
                && ObjectManager.GetNumberAttackPlayer() == 3 && _mySettings.UseCleave)
            {
                if (DeadlyCalm.KnownSpell && DeadlyCalm.IsSpellUsable && _mySettings.UseDeadlyCalm)
                {
                    DeadlyCalm.Launch();
                    Thread.Sleep(200);
                }

                Cleave.Launch();
                return;
            }
            if (HeroicStrike.KnownSpell && HeroicStrike.IsSpellUsable && HeroicStrike.IsHostileDistanceGood
                && _mySettings.UseHeroicStrike && ObjectManager.GetNumberAttackPlayer() < 3
                && (ObjectManager.Me.HaveBuff(125831) || ObjectManager.Me.HaveBuff(85730)))
            {
                if (DeadlyCalm.KnownSpell && DeadlyCalm.IsSpellUsable && _mySettings.UseDeadlyCalm)
                {
                    DeadlyCalm.Launch();
                    Thread.Sleep(200);
                }

                HeroicStrike.Launch();
                return;
            }
            if (Shockwave.KnownSpell && Shockwave.IsSpellUsable && ObjectManager.Target.GetDistance < 10
                && _mySettings.UseShockwave)
            {
                Shockwave.Launch();
                return;
            }
            if (DragonRoar.KnownSpell && DragonRoar.IsSpellUsable && ObjectManager.Target.GetDistance < 8
                && _mySettings.UseDragonRoar)
            {
                DragonRoar.Launch();
                return;
            }
            if (Bladestorm.KnownSpell && Bladestorm.IsSpellUsable && ObjectManager.Target.GetDistance < 8
                && _mySettings.UseBladestorm)
            {
                Bladestorm.Launch();
                return;
            }
            if (MortalStrike.KnownSpell && MortalStrike.IsSpellUsable && MortalStrike.IsHostileDistanceGood
                && _mySettings.UseMortalStrike && ObjectManager.Me.RagePercentage < 100)
            {
                MortalStrike.Launch();
                return;
            }
            if (ColossusSmash.KnownSpell && ColossusSmash.IsSpellUsable && ColossusSmash.IsHostileDistanceGood
                && _mySettings.UseColossusSmash)
            {
                ColossusSmash.Launch();
                return;
            }
            if (Execute.KnownSpell && Execute.IsSpellUsable && Execute.IsHostileDistanceGood
                && _mySettings.UseExecute && ObjectManager.GetNumberAttackPlayer() < 4)
            {
                Execute.Launch();
                return;
            }
            if (Overpower.KnownSpell && Overpower.IsSpellUsable && Overpower.IsHostileDistanceGood
                && _mySettings.UseOverpower && ObjectManager.Me.RagePercentage < 100)
            {
                Overpower.Launch();
                return;
            }
            if (Slam.KnownSpell && Slam.IsSpellUsable && Slam.IsHostileDistanceGood && _mySettings.UseSlam
                && ObjectManager.GetNumberAttackPlayer() < 4 && ObjectManager.Target.HealthPercent > 20)
            {
                Slam.Launch();
                return;
            }
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell
                && _mySettings.UseArcaneTorrentForResource)
            {
                ArcaneTorrent.Launch();
            }
        }

        private void Patrolling()
        {
            if (ObjectManager.Me.IsMounted) return;
            Buff();
            Heal();
        }

        #region Nested type: WarriorArmsSettings

        [Serializable]
        public class WarriorArmsSettings : Settings
        {
            public bool DoAvoidMelee = false;
            public int DoAvoidMeleeDistance = 0;
            public bool UseAlchFlask = true;
            public bool UseArcaneTorrentForDecast = true;
            public int UseArcaneTorrentForDecastAtPercentage = 100;
            public bool UseArcaneTorrentForResource = true;
            public bool UseAvatar = true;
            public bool UseBattleShout = true;
            public bool UseBattleStance = true;
            public bool UseBerserkerRage = true;
            public bool UseBerserkerStance = false;
            public bool UseBerserking = true;
            public bool UseBladestorm = true;
            public bool UseBloodFury = true;
            public bool UseBloodbath = true;
            public bool UseCharge = true;
            public bool UseCleave = true;
            public bool UseColossusSmash = true;
            public bool UseCommandingShout = false;
            public bool UseDeadlyCalm = true;
            public bool UseDefensiveStance = true;
            public bool UseDemoralizingBanner = true;
            public bool UseDiebytheSword = true;
            public bool UseDisarm = true;
            public bool UseDisruptingShout = true;
            public bool UseDragonRoar = true;
            public bool UseEngGlove = true;
            public bool UseEnragedRegeneration = true;
            public bool UseExecute = true;
            public bool UseGiftoftheNaaru = true;
            public int UseGiftoftheNaaruAtPercentage = 80;
            public bool UseHamstring = false;
            public bool UseHeroicLeap = true;
            public bool UseHeroicStrike = true;
            public bool UseHeroicThrow = true;
            public bool UseIntimidatingShout = true;
            public bool UseLifeblood = true;
            public bool UseLowCombat = true;
            public bool UseMassSpellReflection = true;
            public bool UseMortalStrike = true;
            public bool UseOverpower = true;
            public bool UsePiercingHowl = false;
            public bool UsePummel = true;
            public bool UseRallyingCry = true;
            public bool UseRecklessness = true;
            public bool UseShatteringThrow = true;
            public bool UseShockwave = true;
            public bool UseSkullBanner = true;
            public bool UseSlam = true;
            public bool UseStaggeringShout = true;
            public bool UseStoneform = true;
            public int UseStoneformAtPercentage = 80;
            public bool UseStormBolt = true;
            public bool UseSweepingStrikes = true;
            public bool UseTaunt = true;
            public bool UseThunderClap = true;
            public bool UseTrinketOne = true;
            public bool UseTrinketTwo = true;
            public bool UseVictoryRush = true;
            public bool UseWarStomp = true;
            public int UseWarStompAtPercentage = 80;
            public bool UseWhirlwind = true;

            public WarriorArmsSettings()
            {
                ConfigWinForm(new Point(500, 400), "Warrior Arms Settings");
                /* Professions & Racials */
                AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials");
                AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
                AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
                AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
                AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
                AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
                AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
                /* Warrior Buffs */
                AddControlInWinForm("Use Battle Shout", "UseBattleShout", "Warrior Buffs");
                AddControlInWinForm("Use Battle Stance", "UseBattleStance", "Warrior Buffs");
                AddControlInWinForm("Use Berserker Stance", "UseBerserkerStance", "Warrior Buffs");
                AddControlInWinForm("Use Commanding Shout", "UseCommandingShout", "Warrior Buffs");
                AddControlInWinForm("Use Defensive Stance", "UseDefensiveStance", "Warrior Buffs");
                /* Offensive Spell */
                AddControlInWinForm("Use Avatar", "UseAvatar", "Offensive Spell");
                AddControlInWinForm("Use Bladestorm", "UseBladestorm", "Offensive Spell");
                AddControlInWinForm("Use Bloodbath", "UseBloodbath", "Offensive Spell");
                AddControlInWinForm("Use Charge", "UseCharge", "Offensive Spell");
                AddControlInWinForm("Use Cleave", "UseCleave", "Offensive Spell");
                AddControlInWinForm("Use Colossus Smash", "UseColossusSmash", "Offensive Spell");
                AddControlInWinForm("Use Dragon Roar", "UseDragonRoar", "Offensive Spell");
                AddControlInWinForm("Use Exectue", "UseExecute", "Offensive Spell");
                AddControlInWinForm("Use Heroic Leap", "UseHeroicLeap", "Offensive Spell");
                AddControlInWinForm("Use Heroic Strike", "UseHeroicStrike", "Offensive Spell");
                AddControlInWinForm("Use Heroic Throw", "UseHeroicThrow", "Offensive Spell");
                AddControlInWinForm("Use Mortal Strike", "UseMortalStrike", "Offensive Spell");
                AddControlInWinForm("Use Overpower", "UseOverpower", "Offensive Spell");
                AddControlInWinForm("Use Shockwave", "UseShockwave", "Offensive Spell");
                AddControlInWinForm("Use Slam", "UseSlam", "Offensive Spell");
                AddControlInWinForm("Use Storm Bolt", "UseStormBolt", "Offensive Spell");
                AddControlInWinForm("Use Taunt", "UseTaunt", "Offensive Spell");
                AddControlInWinForm("Use Thunder Clap", "UseThunderClap", "Offensive Spell");
                AddControlInWinForm("Use Whirlwind", "UseWhirlwind", "Offensive Spell");
                /* Offensive Cooldown */
                AddControlInWinForm("Use Berserker Rage", "UseBerserkerRage", "Offensive Cooldown");
                AddControlInWinForm("Use Deadly Calm", "UseDeadlyCalm", "Offensive Cooldown");
                AddControlInWinForm("Use Recklessness", "UseRecklessness", "Offensive Cooldown");
                AddControlInWinForm("Use Shattering Throw", "UseShatteringThrow", "Offensive Cooldown");
                AddControlInWinForm("Use Sweeping Strikes", "UseSweepingStrikes", "Offensive Cooldown");
                AddControlInWinForm("Use Skull Banner", "UseSkullBanner", "Offensive Cooldown");
                /* Defensive Cooldown */
                AddControlInWinForm("Use Demoralizing Banner", "UseDemoralizingBanner", "Defensive Cooldown");
                AddControlInWinForm("Use Die by the Sword", "UseDiebytheSword", "Defensive Cooldown");
                AddControlInWinForm("Use Disarm", "UseDisarm", "Defensive Cooldown");
                AddControlInWinForm("Use Disrupting Shout", "UseDisruptingShout", "Defensive Cooldown");
                AddControlInWinForm("Use Hamstring", "UseHamstring", "Defensive Cooldown");
                AddControlInWinForm("Use Intimidating Shout", "UseIntimidatingShout", "Defensive Cooldown");
                AddControlInWinForm("Use Mass Spell Reflection", "UseMassSpellReflection", "Defensive Cooldown");
                AddControlInWinForm("Use Piercing Howl", "UsePiercingHowl", "Defensive Cooldown");
                AddControlInWinForm("Use Pummel", "UsePummel", "Defensive Cooldown");
                AddControlInWinForm("Use Staggering Shout", "UseStaggeringShout", "Defensive Cooldown");
                /* Healing Spell */
                AddControlInWinForm("Use Enraged Regeneration", "UseEnragedRegeneration", "Healing Spell");
                AddControlInWinForm("Use Rallying Cry", "UseRallyingCry", "Healing Spell");
                AddControlInWinForm("Use Victory Rush", "UseVictoryRush", "Healing Spell");
                /* Game Settings */
                AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
                AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
                AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
                AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
                AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
                AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
                AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
            }

            public static WarriorArmsSettings CurrentSetting { get; set; }

            public static WarriorArmsSettings GetSettings()
            {
                string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Warrior_Arms.xml";
                if (File.Exists(currentSettingsFile))
                {
                    return
                        CurrentSetting = Load<WarriorArmsSettings>(currentSettingsFile);
                }
                return new WarriorArmsSettings();
            }
        }

        #endregion
    }

    public class WarriorProtection
    {
        private readonly WarriorProtectionSettings _mySettings = WarriorProtectionSettings.GetSettings();

        #region General Timers & Variables

        private readonly WoWItem _firstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
        private readonly WoWItem _secondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);
        private Timer _engineeringTimer = new Timer(0);
        public int LC = 0;
        private Timer __onCd = new Timer(0);

        #endregion

        #region Professions & Racials

        public readonly Spell Alchemy = new Spell("Alchemy");
        public readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
        public readonly Spell Berserking = new Spell("Berserking");
        public readonly Spell BloodFury = new Spell("Blood Fury");
        public readonly Spell Engineering = new Spell("Engineering");
        public readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
        public readonly Spell Lifeblood = new Spell("Lifeblood");
        public readonly Spell Stoneform = new Spell("Stoneform");
        public readonly Spell WarStomp = new Spell("War Stomp");

        #endregion

        #region Warrior Buffs

        public readonly Spell BattleShout = new Spell("Battle Shout");
        public readonly Spell BattleStance = new Spell("Battle Stance");
        public readonly Spell BerserkerStance = new Spell("Berserker Stance");
        public readonly Spell CommandingShout = new Spell("Commanding Shout");
        public readonly Spell DefensiveStance = new Spell("Defensive Stance");

        #endregion

        #region Offensive Spell

        public readonly Spell Avatar = new Spell("Avatar");
        public readonly Spell Bladestorm = new Spell("Bladestorm");
        public readonly Spell Bloodbath = new Spell("Bloodbath");
        public readonly Spell Charge = new Spell("Charge");
        public readonly Spell Cleave = new Spell("Cleave");
        public readonly Spell Devastate = new Spell("Devastate");
        public readonly Spell DragonRoar = new Spell("Dragon Roar");
        public readonly Spell Execute = new Spell("Execute");
        public readonly Spell HeroicLeap = new Spell("Heroic Leap");
        public readonly Spell HeroicStrike = new Spell("Heroic Strike");
        public readonly Spell HeroicThrow = new Spell("Heroic Throw");
        public readonly Spell Revenge = new Spell("Revenge");
        public readonly Spell ShieldSlam = new Spell("Shield Slam");
        public readonly Spell Shockwave = new Spell("Shockwave");
        public readonly Spell StormBolt = new Spell("Storm Bolt");
        public readonly Spell SunderArmor = new Spell("Sunder Armor");
        public readonly Spell Taunt = new Spell("Taunt");
        public readonly Spell ThunderClap = new Spell("Thunder Clap");

        #endregion

        #region Offensive Cooldown

        public readonly Spell BerserkerRage = new Spell("Berserker Rage");
        public readonly Spell DeadlyCalm = new Spell("Deadly Calm");
        public readonly Spell Recklessness = new Spell("Recklessness");
        public readonly Spell ShatteringThrow = new Spell("Shattering Throw");
        public readonly Spell SkullBanner = new Spell("Skull Banner");
        public readonly Spell SweepingStrikes = new Spell("Sweeping Strikes");

        #endregion

        #region Defensive Cooldown

        public readonly Spell DemoralizingBanner = new Spell("Demoralizing Banner");
        public readonly Spell DemoralizingShout = new Spell("Demoralizing Shout");
        public readonly Spell Disarm = new Spell("Disarm");
        public readonly Spell DisruptingShout = new Spell("Disrupting Shout");
        public readonly Spell Hamstring = new Spell("Hamstring");
        public readonly Spell IntimidatingShout = new Spell("Intimidating Shout");
        public readonly Spell MassSpellReflection = new Spell("Mass Spell Reflection");
        public readonly Spell PiercingHowl = new Spell("Piercing Howl");
        public readonly Spell Pummel = new Spell("Pummel");
        public readonly Spell ShieldBarrier = new Spell("Shield Barrier");
        public readonly Spell ShieldBlock = new Spell("Shield Block");
        public readonly Spell ShieldWall = new Spell("Shield Wall");
        public readonly Spell SpellReflection = new Spell("Spell Reflection");
        public readonly Spell StaggeringShout = new Spell("Staggering Shout");
        private Timer DisarmTimer = new Timer(0);
        private Timer ShieldBarrierTimer = new Timer(0);

        #endregion

        #region Healing Spell

        public readonly Spell EnragedRegeneration = new Spell("Enraged Regeneration");
        public readonly Spell LastStand = new Spell("Last Stand");
        public readonly Spell RallyingCry = new Spell("Rallying Cry");
        public readonly Spell VictoryRush = new Spell("Victory Rush");

        #endregion

        public WarriorProtection()
        {
            Main.InternalRange = 5.0f;
            UInt64 lastTarget = 0;

            while (Main.InternalLoop)
            {
                try
                {
                    if (!ObjectManager.Me.IsDeadMe)
                    {
                        if (!ObjectManager.Me.IsMounted)
                        {
                            if (Fight.InFight && ObjectManager.Me.Target > 0)
                            {
                                if (ObjectManager.Me.Target != lastTarget
                                    && Taunt.IsHostileDistanceGood)
                                {
                                    Pull();
                                    lastTarget = ObjectManager.Me.Target;
                                }

                                if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                    && _mySettings.UseLowCombat)
                                {
                                    LC = 1;
                                    if (ObjectManager.Target.GetDistance < 30)
                                        LowCombat();
                                }
                                else
                                {
                                    LC = 0;
                                    if (ObjectManager.Target.GetDistance < 30)
                                        Combat();
                                }
                                break;
                            }
                            if (!ObjectManager.Me.IsCast)
                                Patrolling();
                        }
                    }
                    Thread.Sleep(500);
                }
                catch
                {
                }
                Thread.Sleep(250);
            }
        }

        private void Pull()
        {
            if (HeroicLeap.IsHostileDistanceGood && HeroicLeap.KnownSpell && HeroicLeap.IsSpellUsable
                && _mySettings.UseHeroicLeap)
            {
                SpellManager.CastSpellByIDAndPosition(6544, ObjectManager.Target.Position);
                Thread.Sleep(200);
            }

            if (Taunt.IsHostileDistanceGood && Taunt.KnownSpell && Taunt.IsSpellUsable
                && _mySettings.UseTaunt && ObjectManager.Target.GetDistance > 20)
            {
                Taunt.Launch();
                return;
            }
        }

        private void LowCombat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            DefenseCycle();
            Heal();

            if (HeroicThrow.KnownSpell && HeroicThrow.IsSpellUsable && HeroicThrow.IsHostileDistanceGood
                && _mySettings.UseHeroicThrow && !ObjectManager.Target.InCombat)
            {
                HeroicThrow.Launch();
                return;
            }

            if (Charge.KnownSpell && Charge.IsSpellUsable && Charge.IsHostileDistanceGood
                && _mySettings.UseCharge && ObjectManager.Target.GetDistance > Main.InternalRange)
            {
                Charge.Launch();
                return;
            }

            if (ShieldSlam.KnownSpell && ShieldSlam.IsSpellUsable && ShieldSlam.IsHostileDistanceGood
                && ObjectManager.Me.RagePercentage < 95 && _mySettings.UseShieldSlam)
            {
                ShieldSlam.Launch();
                return;
            }
            if (HeroicStrike.KnownSpell && HeroicStrike.IsSpellUsable && HeroicStrike.IsHostileDistanceGood && _mySettings.UseHeroicStrike &&
                (ObjectManager.Me.RagePercentage > 80 || ObjectManager.Me.HaveBuff(122510)))
            {
                if (ObjectManager.Me.HealthPercent > 80)
                {
                    if (DeadlyCalm.KnownSpell && DeadlyCalm.IsSpellUsable && _mySettings.UseDeadlyCalm)
                    {
                        DeadlyCalm.Launch();
                        Thread.Sleep(200);
                    }
                    HeroicStrike.Launch();
                    return;
                }
                return;
            }
            if (Revenge.KnownSpell && Revenge.IsHostileDistanceGood && Revenge.IsSpellUsable
                && ObjectManager.Me.RagePercentage < 95 && _mySettings.UseRevenge)
            {
                Revenge.Launch();
                return;
            }
            if (Shockwave.KnownSpell && Shockwave.IsSpellUsable && Shockwave.IsHostileDistanceGood
                && _mySettings.UseShockwave)
            {
                Shockwave.Launch();
                return;
            }
            if (DragonRoar.KnownSpell && DragonRoar.IsSpellUsable && DragonRoar.IsHostileDistanceGood
                && _mySettings.UseDragonRoar)
            {
                DragonRoar.Launch();
                return;
            }
            if (Bladestorm.KnownSpell && Bladestorm.IsSpellUsable && Bladestorm.IsHostileDistanceGood
                && _mySettings.UseBladestorm)
            {
                Bladestorm.Launch();
                return;
            }
            // Blizzard API Calls for Devastate using Sunder Armor Function
            if (SunderArmor.KnownSpell && SunderArmor.IsSpellUsable && SunderArmor.IsHostileDistanceGood
                && _mySettings.UseDevastate)
            {
                SunderArmor.Launch();
                return;
            }
            if (ThunderClap.KnownSpell && ThunderClap.IsSpellUsable && ThunderClap.IsHostileDistanceGood
                && _mySettings.UseThunderClap)
            {
                ThunderClap.Launch();
            }
        }

        private void Combat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            if (__onCd.IsReady)
                DefenseCycle();
            DPSCycle();
            Heal();
            Decast();
            DPSCycle();
            DPSBurst();
            DPSCycle();
        }

        private void Buff()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (_mySettings.UseDefensiveStance && DefensiveStance.KnownSpell && DefensiveStance.IsSpellUsable
                && !DefensiveStance.HaveBuff && LC != 1)
            {
                DefensiveStance.Launch();
                return;
            }
            if (!BattleStance.HaveBuff && BattleStance.KnownSpell && BattleStance.IsSpellUsable
                && _mySettings.UseBattleStance && LC == 1)
            {
                BattleStance.Launch();
                return;
            }
            if (!BerserkerStance.HaveBuff && BerserkerStance.KnownSpell && BerserkerStance.IsSpellUsable
                && _mySettings.UseBerserkerStance && !_mySettings.UseBattleStance && !_mySettings.UseDefensiveStance)
            {
                BerserkerStance.Launch();
                return;
            }
            if (BattleShout.KnownSpell && BattleShout.IsSpellUsable && !BattleShout.HaveBuff
                && _mySettings.UseBattleShout)
            {
                BattleShout.Launch();
                return;
            }
            if (CommandingShout.KnownSpell && CommandingShout.IsSpellUsable && !CommandingShout.HaveBuff
                && _mySettings.UseCommandingShout && !_mySettings.UseBattleShout)
            {
                CommandingShout.Launch();
                return;
            }
            if (_mySettings.UseAlchFlask && !ObjectManager.Me.HaveBuff(79638) && !ObjectManager.Me.HaveBuff(79640) && !ObjectManager.Me.HaveBuff(79639)
                && !ItemsManager.IsItemOnCooldown(75525) && ItemsManager.GetItemCountByIdLUA(75525) > 0)
            {
                ItemsManager.UseItem(75525);
            }
        }

        private void AvoidMelee()
        {
            if (ObjectManager.Target.GetDistance < _mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
            {
                Logging.WriteFight("Too Close. Moving Back");
                var maxTimeTimer = new Timer(1000*2);
                MovementsAction.MoveBackward(true);
                while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                    Thread.Sleep(300);
                MovementsAction.MoveBackward(false);
                if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
                {
                    MovementsAction.MoveForward(true);
                    Thread.Sleep(1000);
                    MovementsAction.MoveForward(false);
                    MovementManager.Face(ObjectManager.Target.Position);
                }
            }
        }

        private void DefenseCycle()
        {
            if (ObjectManager.Me.HealthPercent < 95 && _mySettings.UseDisarm && Disarm.IsHostileDistanceGood
                && Disarm.KnownSpell && Disarm.IsSpellUsable && DisarmTimer.IsReady)
            {
                Disarm.Launch();
                DisarmTimer = new Timer(1000*60);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 20 && _mySettings.UseIntimidatingShout
                && IntimidatingShout.KnownSpell && IntimidatingShout.IsSpellUsable &&
                ObjectManager.Target.GetDistance < 8)
            {
                IntimidatingShout.Launch();
                __onCd = new Timer(1000*8);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 60 && ShieldWall.KnownSpell && ShieldWall.IsSpellUsable
                && _mySettings.UseShieldWall)
            {
                ShieldWall.Launch();
                __onCd = new Timer(1000*12);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 80 && _mySettings.UseDemoralizingBanner
                && DemoralizingBanner.KnownSpell && DemoralizingBanner.IsSpellUsable &&
                ObjectManager.Target.GetDistance < 30)
            {
                SpellManager.CastSpellByIDAndPosition(114203, ObjectManager.Target.Position);
                __onCd = new Timer(1000*15);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 90 && _mySettings.UseDemoralizingShout
                && DemoralizingShout.KnownSpell && DemoralizingShout.IsSpellUsable &&
                ObjectManager.Target.GetDistance < 30)
            {
                DemoralizingShout.Launch();
                __onCd = new Timer(1000*10);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable &&
                WarStomp.KnownSpell
                && _mySettings.UseWarStomp)
            {
                WarStomp.Launch();
                __onCd = new Timer(1000*2);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable &&
                Stoneform.KnownSpell
                && _mySettings.UseStoneform)
            {
                Stoneform.Launch();
                __onCd = new Timer(1000*8);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 80 && ShieldBlock.KnownSpell && ShieldBlock.IsSpellUsable
                && _mySettings.UseShieldBlock)
            {
                ShieldBlock.Launch();
                __onCd = new Timer(1000*6);
            }
        }

        private void Heal()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (VictoryRush.KnownSpell && VictoryRush.IsSpellUsable && VictoryRush.IsHostileDistanceGood
                && _mySettings.UseVictoryRush && ObjectManager.Me.HealthPercent < 90)
            {
                VictoryRush.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 30 && LastStand.IsSpellUsable && LastStand.KnownSpell
                && _mySettings.UseLastStand && ObjectManager.Me.InCombat)
            {
                LastStand.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 30 && RallyingCry.IsSpellUsable && RallyingCry.KnownSpell
                && _mySettings.UseRallyingCry && ObjectManager.Me.InCombat && !LastStand.HaveBuff)
            {
                RallyingCry.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseGiftoftheNaaruAtPercentage &&
                GiftoftheNaaru.IsSpellUsable && GiftoftheNaaru.KnownSpell
                && _mySettings.UseGiftoftheNaaru)
            {
                GiftoftheNaaru.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 80 && EnragedRegeneration.IsSpellUsable &&
                EnragedRegeneration.KnownSpell
                && _mySettings.UseEnragedRegeneration)
            {
                EnragedRegeneration.Launch();
            }
        }

        private void Decast()
        {
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8
                && ObjectManager.Me.HealthPercent <= _mySettings.UseArcaneTorrentForDecastAtPercentage
                && _mySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (!Hamstring.TargetHaveBuff && _mySettings.UseHamstring && Hamstring.KnownSpell
                && Hamstring.IsSpellUsable && Hamstring.IsHostileDistanceGood)
            {
                Hamstring.Launch();
                return;
            }
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && Pummel.IsHostileDistanceGood && Pummel.KnownSpell && Pummel.IsSpellUsable && _mySettings.UsePummel)
            {
                Pummel.Launch();
                return;
            }
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && ObjectManager.Target.GetDistance < 10 && DisruptingShout.KnownSpell &&
                DisruptingShout.IsSpellUsable && _mySettings.UseDisruptingShout)
            {
                DisruptingShout.Launch();
                return;
            }
            if (ObjectManager.Target.GetMove && !PiercingHowl.TargetHaveBuff && _mySettings.UsePiercingHowl && PiercingHowl.KnownSpell && PiercingHowl.IsSpellUsable &&
                ObjectManager.Target.GetDistance < 15)
            {
                PiercingHowl.Launch();
                return;
            }
            if (Hamstring.TargetHaveBuff && _mySettings.UseStaggeringShout && StaggeringShout.KnownSpell && StaggeringShout.IsSpellUsable && ObjectManager.Target.GetDistance < 20)
            {
                StaggeringShout.Launch();
                return;
            }
            if (ObjectManager.Target.IsCast && SpellReflection.KnownSpell && SpellReflection.IsSpellUsable && _mySettings.UseSpellReflection)
            {
                SpellReflection.Launch();
                return;
            }
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && _mySettings.UseMassSpellReflection && MassSpellReflection.KnownSpell &&
                MassSpellReflection.IsSpellUsable)
            {
                MassSpellReflection.Launch();
                return;
            }
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && ObjectManager.Me.HealthPercent < 80 && ShieldBarrier.KnownSpell && ShieldBarrier.IsSpellUsable &&
                _mySettings.UseShieldBarrier && ShieldBarrierTimer.IsReady)
            {
                ShieldBarrier.Launch();
                ShieldBarrierTimer = new Timer(1000*6);
            }
        }

        private void DPSBurst()
        {
            if (_mySettings.UseTrinketOne && !ItemsManager.IsItemOnCooldown(_firstTrinket.Entry) && ItemsManager.IsUsableItemById(_firstTrinket.Entry))
            {
                ItemsManager.UseItem(_firstTrinket.Name);
                Logging.WriteFight("Use First Trinket Slot");
            }

            if (_mySettings.UseTrinketTwo && !ItemsManager.IsItemOnCooldown(_secondTrinket.Entry) && ItemsManager.IsUsableItemById(_secondTrinket.Entry))
            {
                ItemsManager.UseItem(_secondTrinket.Name);
                Logging.WriteFight("Use Second Trinket Slot");
                return;
            }
            if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30
                && _mySettings.UseBerserking)
            {
                Berserking.Launch();
                return;
            }
            if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 30
                && _mySettings.UseBloodFury)
            {
                BloodFury.Launch();
                return;
            }
            if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30
                && _mySettings.UseLifeblood)
            {
                Lifeblood.Launch();
                return;
            }
            if (_engineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30
                && _mySettings.UseEngGlove)
            {
                Logging.WriteFight("Use Engineering Gloves.");
                Lua.RunMacroText("/use 10");
                _engineeringTimer = new Timer(1000*60);
                return;
            }
            if (BerserkerRage.KnownSpell && BerserkerRage.IsSpellUsable && ObjectManager.Me.RagePercentage < 50
                && _mySettings.UseBerserkerRage && ObjectManager.Target.GetDistance < 30)
            {
                BerserkerRage.Launch();
                return;
            }
            if (BattleShout.KnownSpell && BattleShout.IsSpellUsable && ObjectManager.Me.RagePercentage < 80 && _mySettings.UseBattleShout && ObjectManager.Target.GetDistance < 30)
            {
                BattleShout.Launch();
                return;
            }
            if (CommandingShout.KnownSpell && CommandingShout.IsSpellUsable && ObjectManager.Me.RagePercentage < 80 && _mySettings.UseCommandingShout && !_mySettings.UseBattleShout &&
                ObjectManager.Target.GetDistance < 30)
            {
                CommandingShout.Launch();
                return;
            }
            if (Recklessness.KnownSpell && Recklessness.IsSpellUsable && _mySettings.UseRecklessness && ObjectManager.Target.GetDistance < 30)
            {
                Recklessness.Launch();
                return;
            }
            if (ShatteringThrow.KnownSpell && ShatteringThrow.IsSpellUsable && ShatteringThrow.IsHostileDistanceGood && _mySettings.UseShatteringThrow)
            {
                ShatteringThrow.Launch();
                return;
            }
            if (SkullBanner.KnownSpell && SkullBanner.IsSpellUsable && _mySettings.UseSkullBanner && ObjectManager.Target.GetDistance < 30)
            {
                SkullBanner.Launch();
                return;
            }
            if (Avatar.KnownSpell && Avatar.IsSpellUsable && _mySettings.UseAvatar && ObjectManager.Target.GetDistance < 30)
            {
                Avatar.Launch();
                return;
            }
            if (Bloodbath.KnownSpell && Bloodbath.IsSpellUsable && _mySettings.UseBloodbath && ObjectManager.Target.GetDistance < 30)
            {
                Bloodbath.Launch();
                return;
            }
            if (StormBolt.KnownSpell && StormBolt.IsSpellUsable && _mySettings.UseStormBolt && StormBolt.IsHostileDistanceGood)
            {
                StormBolt.Launch();
            }
        }

        private void DPSCycle()
        {
            if (HeroicThrow.KnownSpell && HeroicThrow.IsSpellUsable && HeroicThrow.IsHostileDistanceGood
                && _mySettings.UseHeroicThrow && !ObjectManager.Target.InCombat)
            {
                HeroicThrow.Launch();
                return;
            }

            if (Charge.KnownSpell && Charge.IsSpellUsable && Charge.IsHostileDistanceGood
                && _mySettings.UseCharge && ObjectManager.Target.GetDistance > Main.InternalRange)
            {
                Charge.Launch();
                return;
            }

            if (VictoryRush.KnownSpell && VictoryRush.IsSpellUsable && VictoryRush.IsHostileDistanceGood
                && _mySettings.UseVictoryRush && ObjectManager.Me.HealthPercent < 90)
            {
                VictoryRush.Launch();
                return;
            }

            if (ObjectManager.GetNumberAttackPlayer() > 2 && ThunderClap.KnownSpell && ThunderClap.IsSpellUsable
                && ThunderClap.IsHostileDistanceGood && _mySettings.UseThunderClap)
            {
                ThunderClap.Launch();
                return;
            }

            if (Cleave.KnownSpell && Cleave.IsSpellUsable && Cleave.IsHostileDistanceGood &&
                ObjectManager.GetNumberAttackPlayer() > 2
                && _mySettings.UseCleave && (ObjectManager.Me.RagePercentage > 80 || ObjectManager.Me.HaveBuff(122510)))
            {
                if (ObjectManager.Me.HealthPercent > 80)
                {
                    if (DeadlyCalm.KnownSpell && DeadlyCalm.IsSpellUsable && _mySettings.UseDeadlyCalm)
                    {
                        DeadlyCalm.Launch();
                        Thread.Sleep(200);
                    }
                    Cleave.Launch();
                    return;
                }
            }

            else
            {
                if (HeroicStrike.KnownSpell && HeroicStrike.IsSpellUsable && HeroicStrike.IsHostileDistanceGood
                    && _mySettings.UseHeroicStrike &&
                    (ObjectManager.Me.RagePercentage > 80 || ObjectManager.Me.HaveBuff(122510)))
                {
                    if (ObjectManager.Me.HealthPercent > 80)
                    {
                        if (DeadlyCalm.KnownSpell && DeadlyCalm.IsSpellUsable && _mySettings.UseDeadlyCalm)
                        {
                            DeadlyCalm.Launch();
                            Thread.Sleep(200);
                        }
                        HeroicStrike.Launch();
                        return;
                    }
                }
            }

            if (ShieldSlam.KnownSpell && ShieldSlam.IsSpellUsable && ShieldSlam.IsHostileDistanceGood
                && _mySettings.UseShieldSlam && ObjectManager.Me.RagePercentage < 95)
            {
                ShieldSlam.Launch();
                return;
            }
            if (Revenge.KnownSpell && Revenge.IsHostileDistanceGood && Revenge.IsSpellUsable
                && _mySettings.UseRevenge && ObjectManager.Me.RagePercentage < 95)
            {
                Revenge.Launch();
                return;
            }
            if (Shockwave.KnownSpell && Shockwave.IsSpellUsable && Shockwave.IsHostileDistanceGood
                && _mySettings.UseShockwave)
            {
                Shockwave.Launch();
                return;
            }
            if (DragonRoar.KnownSpell && DragonRoar.IsSpellUsable && DragonRoar.IsHostileDistanceGood
                && _mySettings.UseDragonRoar)
            {
                Shockwave.Launch();
                return;
            }
            if (Bladestorm.KnownSpell && Bladestorm.IsSpellUsable && Bladestorm.IsHostileDistanceGood
                && _mySettings.UseBladestorm)
            {
                Bladestorm.Launch();
                return;
            }
            if (ThunderClap.KnownSpell && ThunderClap.IsSpellUsable && ThunderClap.IsHostileDistanceGood
                && _mySettings.UseThunderClap && !ObjectManager.Target.HaveBuff(115798))
            {
                ThunderClap.Launch();
                return;
            }
            if (BattleShout.KnownSpell && BattleShout.IsSpellUsable && _mySettings.UseBattleShout)
            {
                BattleShout.Launch();
                return;
            }
            if (CommandingShout.KnownSpell && CommandingShout.IsSpellUsable && _mySettings.UseCommandingShout
                && !_mySettings.UseBattleShout)
            {
                CommandingShout.Launch();
                return;
            }
            if (SunderArmor.KnownSpell && SunderArmor.IsSpellUsable && SunderArmor.IsHostileDistanceGood
                && _mySettings.UseDevastate)
            {
                SunderArmor.Launch();
                return;
            }
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell
                && _mySettings.UseArcaneTorrentForResource)
            {
                ArcaneTorrent.Launch();
            }
        }

        private void Patrolling()
        {
            if (ObjectManager.Me.IsMounted) return;
            Buff();
            Heal();
        }

        #region Nested type: WarriorProtectionSettings

        [Serializable]
        public class WarriorProtectionSettings : Settings
        {
            public bool DoAvoidMelee = false;
            public int DoAvoidMeleeDistance = 0;
            public bool UseAlchFlask = true;
            public bool UseArcaneTorrentForDecast = true;
            public int UseArcaneTorrentForDecastAtPercentage = 100;
            public bool UseArcaneTorrentForResource = true;
            public bool UseAvatar = true;
            public bool UseBattleShout = true;
            public bool UseBattleStance = true;
            public bool UseBerserkerRage = true;
            public bool UseBerserkerStance = false;
            public bool UseBerserking = true;
            public bool UseBladestorm = true;
            public bool UseBloodFury = true;
            public bool UseBloodbath = true;
            public bool UseCharge = true;
            public bool UseCleave = true;
            public bool UseCommandingShout = false;
            public bool UseDeadlyCalm = true;
            public bool UseDefensiveStance = true;
            public bool UseDemoralizingBanner = true;
            public bool UseDemoralizingShout = true;
            public bool UseDevastate = true;
            public bool UseDisarm = true;
            public bool UseDisruptingShout = true;
            public bool UseDragonRoar = true;
            public bool UseEngGlove = true;
            public bool UseEnragedRegeneration = true;
            public bool UseExecute = true;
            public bool UseGiftoftheNaaru = true;
            public int UseGiftoftheNaaruAtPercentage = 80;
            public bool UseHamstring = false;
            public bool UseHeroicLeap = true;
            public bool UseHeroicStrike = true;
            public bool UseHeroicThrow = true;
            public bool UseIntimidatingShout = true;
            public bool UseLastStand = true;
            public bool UseLifeblood = true;
            public bool UseLowCombat = true;
            public bool UseMassSpellReflection = true;
            public bool UsePiercingHowl = false;
            public bool UsePummel = true;
            public bool UseRallyingCry = true;
            public bool UseRecklessness = true;
            public bool UseRevenge = true;
            public bool UseShatteringThrow = true;
            public bool UseShieldBarrier = true;
            public bool UseShieldBlock = true;
            public bool UseShieldSlam = true;
            public bool UseShieldWall = true;
            public bool UseShockwave = true;
            public bool UseSkullBanner = true;
            public bool UseSpellReflection = true;
            public bool UseStaggeringShout = true;
            public bool UseStoneform = true;
            public int UseStoneformAtPercentage = 80;
            public bool UseStormBolt = true;
            public bool UseSweepingStrikes = true;
            public bool UseTaunt = true;
            public bool UseThunderClap = true;
            public bool UseTrinketOne = true;
            public bool UseTrinketTwo = true;
            public bool UseVictoryRush = true;
            public bool UseWarStomp = true;
            public int UseWarStompAtPercentage = 80;

            public WarriorProtectionSettings()
            {
                ConfigWinForm(new Point(500, 400), "Warrior Protection Settings");
                /* Professions & Racials */
                AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials");
                AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
                AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
                AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
                AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
                AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
                AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
                /* Warrior Buffs */
                AddControlInWinForm("Use Battle Shout", "UseBattleShout", "Warrior Buffs");
                AddControlInWinForm("Use Battle Stance", "UseBattleStance", "Warrior Buffs");
                AddControlInWinForm("Use Berserker Stance", "UseBerserkerStance", "Warrior Buffs");
                AddControlInWinForm("Use Commanding Shout", "UseCommandingShout", "Warrior Buffs");
                AddControlInWinForm("Use Defensive Stance", "UseDefensiveStance", "Warrior Buffs");
                /* Offensive Spell */
                AddControlInWinForm("Use Avatar", "UseAvatar", "Offensive Spell");
                AddControlInWinForm("Use Bladestorm", "UseBladestorm", "Offensive Spell");
                AddControlInWinForm("Use Bloodbath", "UseBloodbath", "Offensive Spell");
                AddControlInWinForm("Use Charge", "UseCharge", "Offensive Spell");
                AddControlInWinForm("Use Cleave", "UseCleave", "Offensive Spell");
                AddControlInWinForm("Use Devastate", "UseDevastate", "Offensive Spell");
                AddControlInWinForm("Use Dragon Roar", "UseDragonRoar", "Offensive Spell");
                AddControlInWinForm("Use Exectue", "UseExecute", "Offensive Spell");
                AddControlInWinForm("Use Heroic Leap", "UseHeroicLeap", "Offensive Spell");
                AddControlInWinForm("Use Heroic Strike", "UseHeroicStrike", "Offensive Spell");
                AddControlInWinForm("Use Heroic Throw", "UseHeroicThrow", "Offensive Spell");
                AddControlInWinForm("Use Revenge", "UseRevenge", "Offensive Spell");
                AddControlInWinForm("Use Shield Slam", "UseShieldSlam", "Offensive Spell");
                AddControlInWinForm("Use Shockwave", "UseShockwave", "Offensive Spell");
                AddControlInWinForm("Use Storm Bolt", "UseStormBolt", "Offensive Spell");
                AddControlInWinForm("Use Taunt", "UseTaunt", "Offensive Spell");
                AddControlInWinForm("Use Thunder Clap", "UseThunderClap", "Offensive Spell");
                /* Offensive Cooldown */
                AddControlInWinForm("Use Berserker Rage", "UseBerserkerRage", "Offensive Cooldown");
                AddControlInWinForm("Use Deadly Calm", "UseDeadlyCalm", "Offensive Cooldown");
                AddControlInWinForm("Use Recklessness", "UseRecklessness", "Offensive Cooldown");
                AddControlInWinForm("Use Shattering Throw", "UseShatteringThrow", "Offensive Cooldown");
                AddControlInWinForm("Use Sweeping Strikes", "UseSweepingStrikes", "Offensive Cooldown");
                AddControlInWinForm("Use Skull Banner", "UseSkullBanner", "Offensive Cooldown");
                /* Defensive Cooldown */
                AddControlInWinForm("Use Demoralizing Banner", "UseDemoralizingBanner", "Defensive Cooldown");
                AddControlInWinForm("Use Demoralizing Shout", "UseDemoralizingShout", "Defensive Cooldown");
                AddControlInWinForm("Use Disarm", "UseDisarm", "Defensive Cooldown");
                AddControlInWinForm("Use Disrupting Shout", "UseDisruptingShout", "Defensive Cooldown");
                AddControlInWinForm("Use Hamstring", "UseHamstring", "Defensive Cooldown");
                AddControlInWinForm("Use Intimidating Shout", "UseIntimidatingShout", "Defensive Cooldown");
                AddControlInWinForm("Use Mass Spell Reflection", "UseMassSpellReflection", "Defensive Cooldown");
                AddControlInWinForm("Use Piercing Howl", "UsePiercingHowl", "Defensive Cooldown");
                AddControlInWinForm("Use Pummel", "UsePummel", "Defensive Cooldown");
                AddControlInWinForm("Use Shield Barrier", "UseShieldBarrier", "Defensive Cooldown");
                AddControlInWinForm("Use Shield Block", "UseShieldBlock", "Defensive Cooldown");
                AddControlInWinForm("Use Shield Wall", "UseShieldWall", "Defensive Cooldown");
                AddControlInWinForm("Use Spell Reflection", "UseSpellReflection", "Defensive Cooldown");
                AddControlInWinForm("Use Staggering Shout", "UseStaggeringShout", "Defensive Cooldown");
                /* Healing Spell */
                AddControlInWinForm("Use Enraged Regeneration", "UseEnragedRegeneration", "Healing Spell");
                AddControlInWinForm("Use Last Stand", "UseLastStand", "Healing Spell");
                AddControlInWinForm("Use Rallying Cry", "UseRallyingCry", "Healing Spell");
                AddControlInWinForm("Use Victory Rush", "UseVictoryRush", "Healing Spell");
                /* Game Settings */
                AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
                AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
                AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
                AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
                AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
                AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
                AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
            }

            public static WarriorProtectionSettings currentSetting { get; set; }

            public static WarriorProtectionSettings GetSettings()
            {
                string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Warrior_Protection.xml";
                if (File.Exists(currentSettingsFile))
                {
                    return
                        currentSetting = Load<WarriorProtectionSettings>(currentSettingsFile);
                }
                return new WarriorProtectionSettings();
            }
        }

        #endregion
    }

    public class WarriorFury
    {
        private readonly WarriorFurySettings _mySettings = WarriorFurySettings.GetSettings();

        #region General Timers & Variables

        private readonly WoWItem _firstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
        private readonly WoWItem _secondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);
        private Timer _engineeringTimer = new Timer(0);
        public int LC = 0;
        private Timer _onCd = new Timer(0);

        #endregion

        #region Professions & Racials

        public readonly Spell Alchemy = new Spell("Alchemy");
        public readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
        public readonly Spell Berserking = new Spell("Berserking");
        public readonly Spell BloodFury = new Spell("Blood Fury");
        public readonly Spell Engineering = new Spell("Engineering");
        public readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
        public readonly Spell Lifeblood = new Spell("Lifeblood");
        public readonly Spell Stoneform = new Spell("Stoneform");
        public readonly Spell WarStomp = new Spell("War Stomp");

        #endregion

        #region Warrior Buffs

        public readonly Spell BattleShout = new Spell("Battle Shout");
        public readonly Spell BattleStance = new Spell("Battle Stance");
        public readonly Spell BerserkerStance = new Spell("Berserker Stance");
        public readonly Spell CommandingShout = new Spell("Commanding Shout");
        public readonly Spell DefensiveStance = new Spell("Defensive Stance");

        #endregion

        #region Offensive Spell

        public readonly Spell Avatar = new Spell("Avatar");
        public readonly Spell Bladestorm = new Spell("Bladestorm");
        public readonly Spell Bloodbath = new Spell("Bloodbath");
        public readonly Spell Bloodthirst = new Spell("Bloodthirst");
        public readonly Spell Charge = new Spell("Charge");
        public readonly Spell Cleave = new Spell("Cleave");
        public readonly Spell ColossusSmash = new Spell("Colossus Smash");
        public readonly Spell DragonRoar = new Spell("Dragon Roar");
        public readonly Spell Execute = new Spell("Execute");
        public readonly Spell HeroicLeap = new Spell("Heroic Leap");
        public readonly Spell HeroicStrike = new Spell("Heroic Strike");
        public readonly Spell HeroicThrow = new Spell("Heroic Throw");
        public readonly Spell ImpendingVictory = new Spell("Impending Victory");
        public readonly Spell RagingBlow = new Spell("Raging Blow");
        public readonly Spell Shockwave = new Spell("Shockwave");
        public readonly Spell StormBolt = new Spell("Storm Bolt");
        public readonly Spell Taunt = new Spell("Taunt");
        public readonly Spell ThunderClap = new Spell("Thunder Clap");
        public readonly Spell Whirlwind = new Spell("Whirlwind");
        public readonly Spell WildStrike = new Spell("Wild Strike");

        #endregion

        #region Offensive Cooldown

        public readonly Spell BerserkerRage = new Spell("Berserker Rage");
        public readonly Spell DeadlyCalm = new Spell("Deadly Calm");
        public readonly Spell Recklessness = new Spell("Recklessness");
        public readonly Spell ShatteringThrow = new Spell("Shattering Throw");
        public readonly Spell SkullBanner = new Spell("Skull Banner");
        public readonly Spell SweepingStrikes = new Spell("Sweeping Strikes");

        #endregion

        #region Defensive Cooldown

        public readonly Spell DemoralizingBanner = new Spell("Demoralizing Banner");
        public readonly Spell DiebytheSword = new Spell("Die by the Sword");
        public readonly Spell Disarm = new Spell("Disarm");
        public readonly Spell DisruptingShout = new Spell("Disrupting Shout");
        public readonly Spell Hamstring = new Spell("Hamstring");
        public readonly Spell IntimidatingShout = new Spell("Intimidating Shout");
        public readonly Spell MassSpellReflection = new Spell("Mass Spell Reflection");
        public readonly Spell PiercingHowl = new Spell("Piercing Howl");
        public readonly Spell Pummel = new Spell("Pummel");
        public readonly Spell StaggeringShout = new Spell("Staggering Shout");
        private Timer _disarmTimer = new Timer(0);

        #endregion

        #region Healing Spell

        public readonly Spell EnragedRegeneration = new Spell("Enraged Regeneration");
        public readonly Spell RallyingCry = new Spell("Rallying Cry");
        public readonly Spell VictoryRush = new Spell("Victory Rush");

        #endregion

        public WarriorFury()
        {
            Main.InternalRange = 5.0f;
            UInt64 lastTarget = 0;

            while (Main.InternalLoop)
            {
                try
                {
                    if (!ObjectManager.Me.IsDeadMe)
                    {
                        if (!ObjectManager.Me.IsMounted)
                        {
                            if (Fight.InFight && ObjectManager.Me.Target > 0)
                            {
                                if (ObjectManager.Me.Target != lastTarget
                                    && Taunt.IsHostileDistanceGood)
                                {
                                    Pull();
                                    lastTarget = ObjectManager.Me.Target;
                                }

                                if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                    && _mySettings.UseLowCombat)
                                {
                                    LC = 1;
                                    if (ObjectManager.Target.GetDistance < 30)
                                        LowCombat();
                                }
                                else
                                {
                                    LC = 0;
                                    if (ObjectManager.Target.GetDistance < 30)
                                        Combat();
                                }
                                break;
                            }
                            if (!ObjectManager.Me.IsCast)
                                Patrolling();
                        }
                    }
                    else
                        Thread.Sleep(500);
                }
                catch
                {
                }
                Thread.Sleep(250);
            }
        }

        private void Pull()
        {
            if (HeroicLeap.IsHostileDistanceGood && HeroicLeap.KnownSpell && HeroicLeap.IsSpellUsable
                && _mySettings.UseHeroicLeap)
            {
                SpellManager.CastSpellByIDAndPosition(6544, ObjectManager.Target.Position);
                Thread.Sleep(200);
            }

            if (Taunt.IsHostileDistanceGood && Taunt.KnownSpell && Taunt.IsSpellUsable
                && _mySettings.UseTaunt && ObjectManager.Target.GetDistance > 20)
            {
                Taunt.Launch();
                return;
            }
        }

        private void LowCombat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            DefenseCycle();
            Heal();

            if (HeroicThrow.KnownSpell && HeroicThrow.IsSpellUsable && HeroicThrow.IsHostileDistanceGood
                && _mySettings.UseHeroicThrow && !ObjectManager.Target.InCombat)
            {
                HeroicThrow.Launch();
                return;
            }

            if (Charge.KnownSpell && Charge.IsSpellUsable && Charge.IsHostileDistanceGood
                && _mySettings.UseCharge && ObjectManager.Target.GetDistance > Main.InternalRange)
            {
                Charge.Launch();
                return;
            }

            if (Bloodthirst.KnownSpell && Bloodthirst.IsSpellUsable && Bloodthirst.IsHostileDistanceGood
                && _mySettings.UseBloodthirst)
            {
                Bloodthirst.Launch();
                return;
            }
            if (ColossusSmash.KnownSpell && ColossusSmash.IsHostileDistanceGood && ColossusSmash.IsSpellUsable
                && _mySettings.UseColossusSmash)
            {
                ColossusSmash.Launch();
                return;
            }
            if (HeroicStrike.KnownSpell && HeroicStrike.IsSpellUsable && HeroicStrike.IsHostileDistanceGood
                && _mySettings.UseHeroicStrike && ObjectManager.GetNumberAttackPlayer() < 3
                && ObjectManager.Me.RagePercentage > 80)
            {
                if (DeadlyCalm.KnownSpell && DeadlyCalm.IsSpellUsable && _mySettings.UseDeadlyCalm)
                {
                    DeadlyCalm.Launch();
                    Thread.Sleep(200);
                }

                HeroicStrike.Launch();
                return;
            }
            if (Shockwave.KnownSpell && Shockwave.IsSpellUsable && ObjectManager.Target.GetDistance < 10
                && _mySettings.UseShockwave)
            {
                Shockwave.Launch();
                return;
            }
            if (DragonRoar.KnownSpell && DragonRoar.IsSpellUsable && ObjectManager.Target.GetDistance < 8
                && _mySettings.UseDragonRoar)
            {
                DragonRoar.Launch();
                return;
            }
            if (Bladestorm.KnownSpell && Bladestorm.IsSpellUsable && ObjectManager.Target.GetDistance < 8
                && _mySettings.UseBladestorm)
            {
                Bladestorm.Launch();
                return;
            }
            if (ThunderClap.KnownSpell && ThunderClap.IsSpellUsable && ThunderClap.IsHostileDistanceGood
                && _mySettings.UseThunderClap)
            {
                ThunderClap.Launch();
            }
        }

        private void Combat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            if (_onCd.IsReady)
                DefenseCycle();
            DPSCycle();
            Heal();
            Decast();
            DPSCycle();
            DPSBurst();
            DPSCycle();
        }

        private void Buff()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (ObjectManager.Me.HealthPercent < 30 && _mySettings.UseDefensiveStance && DefensiveStance.KnownSpell && DefensiveStance.IsSpellUsable && !DefensiveStance.HaveBuff)
            {
                DefensiveStance.Launch();
                return;
            }
            if (!BattleStance.HaveBuff && BattleStance.KnownSpell && BattleStance.IsSpellUsable && _mySettings.UseBattleStance && ObjectManager.Me.HealthPercent > 50)
            {
                BattleStance.Launch();
                return;
            }
            if (!BerserkerStance.HaveBuff && BerserkerStance.KnownSpell && BerserkerStance.IsSpellUsable && _mySettings.UseBerserkerStance && !_mySettings.UseBattleStance &&
                ObjectManager.Me.HealthPercent > 50)
            {
                BerserkerStance.Launch();
                return;
            }
            if (BattleShout.KnownSpell && BattleShout.IsSpellUsable && !BattleShout.HaveBuff && _mySettings.UseBattleShout)
            {
                BattleShout.Launch();
                return;
            }
            if (CommandingShout.KnownSpell && CommandingShout.IsSpellUsable && !CommandingShout.HaveBuff && _mySettings.UseCommandingShout && !_mySettings.UseBattleShout)
            {
                CommandingShout.Launch();
                return;
            }
            if (_mySettings.UseAlchFlask && !ObjectManager.Me.HaveBuff(79638) && !ObjectManager.Me.HaveBuff(79640) && !ObjectManager.Me.HaveBuff(79639) &&
                !ItemsManager.IsItemOnCooldown(75525) && ItemsManager.GetItemCountByIdLUA(75525) > 0)
            {
                ItemsManager.UseItem(75525);
            }
        }

        private void AvoidMelee()
        {
            if (ObjectManager.Target.GetDistance < _mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
            {
                Logging.WriteFight("Too Close. Moving Back");
                var maxTimeTimer = new Timer(1000*2);
                MovementsAction.MoveBackward(true);
                while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                    Thread.Sleep(300);
                MovementsAction.MoveBackward(false);
                if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
                {
                    MovementsAction.MoveForward(true);
                    Thread.Sleep(1000);
                    MovementsAction.MoveForward(false);
                    MovementManager.Face(ObjectManager.Target.Position);
                }
            }
        }

        private void DefenseCycle()
        {
            if (ObjectManager.Me.HealthPercent < 95 && _mySettings.UseDisarm && Disarm.IsHostileDistanceGood
                && Disarm.KnownSpell && Disarm.IsSpellUsable && _disarmTimer.IsReady)
            {
                Disarm.Launch();
                _disarmTimer = new Timer(1000*60);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 20 && _mySettings.UseIntimidatingShout
                && IntimidatingShout.KnownSpell && IntimidatingShout.IsSpellUsable &&
                ObjectManager.Target.GetDistance < 8)
            {
                IntimidatingShout.Launch();
                _onCd = new Timer(1000*8);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 80 && _mySettings.UseDiebytheSword
                && DiebytheSword.KnownSpell && DiebytheSword.IsSpellUsable)
            {
                DiebytheSword.Launch();
                _onCd = new Timer(1000*8);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 80 && _mySettings.UseDemoralizingBanner
                && DemoralizingBanner.KnownSpell && DemoralizingBanner.IsSpellUsable &&
                ObjectManager.Target.GetDistance < 30)
            {
                SpellManager.CastSpellByIDAndPosition(114203, ObjectManager.Target.Position);
                _onCd = new Timer(1000*15);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable &&
                WarStomp.KnownSpell
                && _mySettings.UseWarStomp)
            {
                WarStomp.Launch();
                _onCd = new Timer(1000*2);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable &&
                Stoneform.KnownSpell
                && _mySettings.UseStoneform)
            {
                Stoneform.Launch();
                _onCd = new Timer(1000*8);
            }
        }

        private void Heal()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (VictoryRush.KnownSpell && VictoryRush.IsSpellUsable && VictoryRush.IsHostileDistanceGood
                && _mySettings.UseVictoryRush && ObjectManager.Me.HealthPercent < 90)
            {
                VictoryRush.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 30 && RallyingCry.IsSpellUsable && RallyingCry.KnownSpell
                && _mySettings.UseRallyingCry && ObjectManager.Me.InCombat)
            {
                RallyingCry.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseGiftoftheNaaruAtPercentage &&
                GiftoftheNaaru.IsSpellUsable && GiftoftheNaaru.KnownSpell
                && _mySettings.UseGiftoftheNaaru)
            {
                GiftoftheNaaru.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 80 && EnragedRegeneration.IsSpellUsable &&
                EnragedRegeneration.KnownSpell
                && _mySettings.UseEnragedRegeneration)
            {
                EnragedRegeneration.Launch();
            }
        }

        private void Decast()
        {
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8
                && ObjectManager.Me.HealthPercent <= _mySettings.UseArcaneTorrentForDecastAtPercentage
                && _mySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (!Hamstring.TargetHaveBuff && _mySettings.UseHamstring && Hamstring.KnownSpell
                && Hamstring.IsSpellUsable && Hamstring.IsHostileDistanceGood)
            {
                Hamstring.Launch();
                return;
            }
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && Pummel.IsHostileDistanceGood
                && Pummel.KnownSpell && Pummel.IsSpellUsable && _mySettings.UsePummel)
            {
                Pummel.Launch();
                return;
            }
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe &&
                ObjectManager.Target.GetDistance < 10
                && DisruptingShout.KnownSpell && DisruptingShout.IsSpellUsable && _mySettings.UseDisruptingShout)
            {
                DisruptingShout.Launch();
                return;
            }
            if (ObjectManager.Target.GetMove && !PiercingHowl.TargetHaveBuff && _mySettings.UsePiercingHowl
                && PiercingHowl.KnownSpell && PiercingHowl.IsSpellUsable && ObjectManager.Target.GetDistance < 15)
            {
                PiercingHowl.Launch();
                return;
            }
            if (Hamstring.TargetHaveBuff && _mySettings.UseStaggeringShout && StaggeringShout.KnownSpell
                && StaggeringShout.IsSpellUsable && ObjectManager.Target.GetDistance < 20)
            {
                StaggeringShout.Launch();
                return;
            }
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe &&
                _mySettings.UseMassSpellReflection
                && MassSpellReflection.KnownSpell && MassSpellReflection.IsSpellUsable)
            {
                MassSpellReflection.Launch();
            }
        }

        private void DPSBurst()
        {
            if (_mySettings.UseTrinketOne && !ItemsManager.IsItemOnCooldown(_firstTrinket.Entry) && ItemsManager.IsUsableItemById(_firstTrinket.Entry))
            {
                ItemsManager.UseItem(_firstTrinket.Name);
                Logging.WriteFight("Use First Trinket Slot");
            }

            if (_mySettings.UseTrinketTwo && !ItemsManager.IsItemOnCooldown(_secondTrinket.Entry) && ItemsManager.IsUsableItemById(_secondTrinket.Entry))
            {
                ItemsManager.UseItem(_secondTrinket.Name);
                Logging.WriteFight("Use Second Trinket Slot");
                return;
            }
            if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30 && _mySettings.UseBerserking)
            {
                Berserking.Launch();
                return;
            }
            if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 30 && _mySettings.UseBloodFury)
            {
                BloodFury.Launch();
                return;
            }
            if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30 && _mySettings.UseLifeblood)
            {
                Lifeblood.Launch();
                return;
            }
            if (_engineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 30 && _mySettings.UseEngGlove)
            {
                Logging.WriteFight("Use Engineering Gloves.");
                Lua.RunMacroText("/use 10");
                _engineeringTimer = new Timer(1000*60);
                return;
            }
            if (BerserkerRage.KnownSpell && BerserkerRage.IsSpellUsable && ObjectManager.Me.RagePercentage < 50 && _mySettings.UseBerserkerRage && ObjectManager.Target.GetDistance < 30)
            {
                BerserkerRage.Launch();
                return;
            }
            if (BattleShout.KnownSpell && BattleShout.IsSpellUsable && ObjectManager.Me.RagePercentage < 80 && _mySettings.UseBattleShout && ObjectManager.Target.GetDistance < 30)
            {
                BattleShout.Launch();
                return;
            }
            if (CommandingShout.KnownSpell && CommandingShout.IsSpellUsable && ObjectManager.Me.RagePercentage < 80 && _mySettings.UseCommandingShout && !_mySettings.UseBattleShout &&
                ObjectManager.Target.GetDistance < 30)
            {
                CommandingShout.Launch();
                return;
            }
            if (Recklessness.KnownSpell && Recklessness.IsSpellUsable && _mySettings.UseRecklessness && ObjectManager.Target.GetDistance < 30)
            {
                Recklessness.Launch();
                return;
            }
            if (ShatteringThrow.KnownSpell && ShatteringThrow.IsSpellUsable && ShatteringThrow.IsHostileDistanceGood && _mySettings.UseShatteringThrow)
            {
                ShatteringThrow.Launch();
                return;
            }
            if (SkullBanner.KnownSpell && SkullBanner.IsSpellUsable && _mySettings.UseSkullBanner && ObjectManager.Target.GetDistance < 30)
            {
                SkullBanner.Launch();
                return;
            }
            if (Avatar.KnownSpell && Avatar.IsSpellUsable && _mySettings.UseAvatar && ObjectManager.Target.GetDistance < 30)
            {
                Avatar.Launch();
                return;
            }
            if (Bloodbath.KnownSpell && Bloodbath.IsSpellUsable && _mySettings.UseBloodbath && ObjectManager.Target.GetDistance < 30)
            {
                Bloodbath.Launch();
                return;
            }
            if (StormBolt.KnownSpell && StormBolt.IsSpellUsable && _mySettings.UseStormBolt && StormBolt.IsHostileDistanceGood)
            {
                StormBolt.Launch();
            }
        }

        private void DPSCycle()
        {
            if (HeroicThrow.KnownSpell && HeroicThrow.IsSpellUsable && HeroicThrow.IsHostileDistanceGood && _mySettings.UseHeroicThrow && !ObjectManager.Target.InCombat)
            {
                HeroicThrow.Launch();
                return;
            }

            if (Charge.KnownSpell && Charge.IsSpellUsable && Charge.IsHostileDistanceGood && _mySettings.UseCharge && ObjectManager.Target.GetDistance > Main.InternalRange)
            {
                Charge.Launch();
                return;
            }

            if (VictoryRush.KnownSpell && VictoryRush.IsSpellUsable && VictoryRush.IsHostileDistanceGood && _mySettings.UseVictoryRush && ObjectManager.Me.HealthPercent < 90)
            {
                VictoryRush.Launch();
                return;
            }
            if (Whirlwind.KnownSpell && Whirlwind.IsSpellUsable && ObjectManager.GetNumberAttackPlayer() > 3 && _mySettings.UseWhirlwind)
            {
                Whirlwind.Launch();
                return;
            }
            if (Cleave.KnownSpell && Cleave.IsSpellUsable && Cleave.IsHostileDistanceGood && _mySettings.UseCleave && ObjectManager.GetNumberAttackPlayer() > 1 &&
                ObjectManager.GetNumberAttackPlayer() < 4)
            {
                if (DeadlyCalm.KnownSpell && DeadlyCalm.IsSpellUsable && _mySettings.UseDeadlyCalm)
                {
                    DeadlyCalm.Launch();
                    Thread.Sleep(200);
                }

                Cleave.Launch();
                return;
            }
            if (HeroicStrike.KnownSpell && HeroicStrike.IsSpellUsable && HeroicStrike.IsHostileDistanceGood && _mySettings.UseHeroicStrike && ObjectManager.GetNumberAttackPlayer() < 3 &&
                ObjectManager.Me.RagePercentage > 80)
            {
                if (DeadlyCalm.KnownSpell && DeadlyCalm.IsSpellUsable && _mySettings.UseDeadlyCalm)
                {
                    DeadlyCalm.Launch();
                    Thread.Sleep(200);
                }

                HeroicStrike.Launch();
                return;
            }
            if (Shockwave.KnownSpell && Shockwave.IsSpellUsable && ObjectManager.Target.GetDistance < 10
                && _mySettings.UseShockwave)
            {
                Shockwave.Launch();
                return;
            }
            if (DragonRoar.KnownSpell && DragonRoar.IsSpellUsable && ObjectManager.Target.GetDistance < 8
                && _mySettings.UseDragonRoar)
            {
                DragonRoar.Launch();
                return;
            }
            if (Bladestorm.KnownSpell && Bladestorm.IsSpellUsable && ObjectManager.Target.GetDistance < 8
                && _mySettings.UseBladestorm)
            {
                Bladestorm.Launch();
                return;
            }
            if (Bloodthirst.KnownSpell && Bloodthirst.IsSpellUsable && Bloodthirst.IsHostileDistanceGood
                && _mySettings.UseBloodthirst)
            {
                Bloodthirst.Launch();
                return;
            }
            if (ColossusSmash.KnownSpell && ColossusSmash.IsSpellUsable && ColossusSmash.IsHostileDistanceGood
                && _mySettings.UseColossusSmash)
            {
                ColossusSmash.Launch();
                return;
            }
            if (Execute.KnownSpell && Execute.IsSpellUsable && Execute.IsHostileDistanceGood
                && _mySettings.UseExecute && ObjectManager.GetNumberAttackPlayer() < 4)
            {
                Execute.Launch();
                return;
            }
            if (RagingBlow.KnownSpell && RagingBlow.IsSpellUsable && RagingBlow.IsHostileDistanceGood
                && _mySettings.UseRagingBlow)
            {
                RagingBlow.Launch();
                return;
            }
            if (WildStrike.KnownSpell && WildStrike.IsSpellUsable && WildStrike.IsHostileDistanceGood
                && _mySettings.UseWildStrike && ObjectManager.Me.HaveBuff(46915))
            {
                WildStrike.Launch();
                return;
            }
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell
                && _mySettings.UseArcaneTorrentForResource)
            {
                ArcaneTorrent.Launch();
            }
        }

        private void Patrolling()
        {
            if (!ObjectManager.Me.IsMounted)
            {
                Buff();
                Heal();
            }
        }

        #region Nested type: WarriorFurySettings

        [Serializable]
        public class WarriorFurySettings : Settings
        {
            public bool DoAvoidMelee = false;
            public int DoAvoidMeleeDistance = 0;
            public bool UseAlchFlask = true;
            public bool UseArcaneTorrentForDecast = true;
            public int UseArcaneTorrentForDecastAtPercentage = 100;
            public bool UseArcaneTorrentForResource = true;
            public bool UseAvatar = true;
            public bool UseBattleShout = true;
            public bool UseBattleStance = true;
            public bool UseBerserkerRage = true;
            public bool UseBerserkerStance = false;
            public bool UseBerserking = true;
            public bool UseBladestorm = true;
            public bool UseBloodFury = true;
            public bool UseBloodbath = true;
            public bool UseBloodthirst = true;
            public bool UseCharge = true;
            public bool UseCleave = true;
            public bool UseColossusSmash = true;
            public bool UseCommandingShout = false;
            public bool UseDeadlyCalm = true;
            public bool UseDefensiveStance = true;
            public bool UseDemoralizingBanner = true;
            public bool UseDiebytheSword = true;
            public bool UseDisarm = true;
            public bool UseDisruptingShout = true;
            public bool UseDragonRoar = true;
            public bool UseEngGlove = true;
            public bool UseEnragedRegeneration = true;
            public bool UseExecute = true;
            public bool UseGiftoftheNaaru = true;
            public int UseGiftoftheNaaruAtPercentage = 80;
            public bool UseHamstring = false;
            public bool UseHeroicLeap = true;
            public bool UseHeroicStrike = true;
            public bool UseHeroicThrow = true;
            public bool UseIntimidatingShout = true;
            public bool UseLifeblood = true;
            public bool UseLowCombat = true;
            public bool UseMassSpellReflection = true;
            public bool UsePiercingHowl = false;
            public bool UsePummel = true;
            public bool UseRagingBlow = true;
            public bool UseRallyingCry = true;
            public bool UseRecklessness = true;
            public bool UseShatteringThrow = true;
            public bool UseShockwave = true;
            public bool UseSkullBanner = true;
            public bool UseStaggeringShout = true;
            public bool UseStoneform = true;
            public int UseStoneformAtPercentage = 80;
            public bool UseStormBolt = true;
            public bool UseSweepingStrikes = true;
            public bool UseTaunt = true;
            public bool UseThunderClap = true;
            public bool UseTrinketOne = true;
            public bool UseTrinketTwo = true;
            public bool UseVictoryRush = true;
            public bool UseWarStomp = true;
            public int UseWarStompAtPercentage = 80;
            public bool UseWhirlwind = true;
            public bool UseWildStrike = true;

            public WarriorFurySettings()
            {
                ConfigWinForm(new Point(500, 400), "Warrior Fury Settings");
                /* Professions & Racials */
                AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials");
                AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
                AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
                AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
                AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
                AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
                AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
                /* Warrior Buffs */
                AddControlInWinForm("Use Battle Shout", "UseBattleShout", "Warrior Buffs");
                AddControlInWinForm("Use Battle Stance", "UseBattleStance", "Warrior Buffs");
                AddControlInWinForm("Use Berserker Stance", "UseBerserkerStance", "Warrior Buffs");
                AddControlInWinForm("Use Commanding Shout", "UseCommandingShout", "Warrior Buffs");
                AddControlInWinForm("Use Defensive Stance", "UseDefensiveStance", "Warrior Buffs");
                /* Offensive Spell */
                AddControlInWinForm("Use Avatar", "UseAvatar", "Offensive Spell");
                AddControlInWinForm("Use Bladestorm", "UseBladestorm", "Offensive Spell");
                AddControlInWinForm("Use Bloodbath", "UseBloodbath", "Offensive Spell");
                AddControlInWinForm("Use Bloodthirst", "UseBloodthirst", "Offensive Spell");
                AddControlInWinForm("Use Charge", "UseCharge", "Offensive Spell");
                AddControlInWinForm("Use Cleave", "UseCleave", "Offensive Spell");
                AddControlInWinForm("Use Colossus Smash", "UseColossusSmash", "Offensive Spell");
                AddControlInWinForm("Use Dragon Roar", "UseDragonRoar", "Offensive Spell");
                AddControlInWinForm("Use Exectue", "UseExecute", "Offensive Spell");
                AddControlInWinForm("Use Heroic Leap", "UseHeroicLeap", "Offensive Spell");
                AddControlInWinForm("Use Heroic Strike", "UseHeroicStrike", "Offensive Spell");
                AddControlInWinForm("Use Heroic Throw", "UseHeroicThrow", "Offensive Spell");
                AddControlInWinForm("Use Raging Blow", "UseRagingBlow", "Offensive Spell");
                AddControlInWinForm("Use Shockwave", "UseShockwave", "Offensive Spell");
                AddControlInWinForm("Use Storm Bolt", "UseStormBolt", "Offensive Spell");
                AddControlInWinForm("Use Taunt", "UseTaunt", "Offensive Spell");
                AddControlInWinForm("Use Thunder Clap", "UseThunderClap", "Offensive Spell");
                AddControlInWinForm("Use Whirlwind", "UseWhirlwind", "Offensive Spell");
                AddControlInWinForm("Use Wild Strike", "UseWildStrike", "Offensive Spell");
                /* Offensive Cooldown */
                AddControlInWinForm("Use Berserker Rage", "UseBerserkerRage", "Offensive Cooldown");
                AddControlInWinForm("Use Deadly Calm", "UseDeadlyCalm", "Offensive Cooldown");
                AddControlInWinForm("Use Recklessness", "UseRecklessness", "Offensive Cooldown");
                AddControlInWinForm("Use Shattering Throw", "UseShatteringThrow", "Offensive Cooldown");
                AddControlInWinForm("Use Sweeping Strikes", "UseSweepingStrikes", "Offensive Cooldown");
                AddControlInWinForm("Use Skull Banner", "UseSkullBanner", "Offensive Cooldown");
                /* Defensive Cooldown */
                AddControlInWinForm("Use Demoralizing Banner", "UseDemoralizingBanner", "Defensive Cooldown");
                AddControlInWinForm("Use Die by the Sword", "UseDiebytheSword", "Defensive Cooldown");
                AddControlInWinForm("Use Disarm", "UseDisarm", "Defensive Cooldown");
                AddControlInWinForm("Use Disrupting Shout", "UseDisruptingShout", "Defensive Cooldown");
                AddControlInWinForm("Use Hamstring", "UseHamstring", "Defensive Cooldown");
                AddControlInWinForm("Use Intimidating Shout", "UseIntimidatingShout", "Defensive Cooldown");
                AddControlInWinForm("Use Mass Spell Reflection", "UseMassSpellReflection", "Defensive Cooldown");
                AddControlInWinForm("Use Piercing Howl", "UsePiercingHowl", "Defensive Cooldown");
                AddControlInWinForm("Use Pummel", "UsePummel", "Defensive Cooldown");
                AddControlInWinForm("Use Staggering Shout", "UseStaggeringShout", "Defensive Cooldown");
                /* Healing Spell */
                AddControlInWinForm("Use Enraged Regeneration", "UseEnragedRegeneration", "Healing Spell");
                AddControlInWinForm("Use Rallying Cry", "UseRallyingCry", "Healing Spell");
                AddControlInWinForm("Use Victory Rush", "UseVictoryRush", "Healing Spell");
                /* Game Settings */
                AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
                AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
                AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
                AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
                AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
                AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
                AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
            }

            public static WarriorFurySettings currentSetting { get; set; }

            public static WarriorFurySettings GetSettings()
            {
                string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Warrior_Fury.xml";
                if (File.Exists(currentSettingsFile))
                {
                    return
                        currentSetting = Load<WarriorFurySettings>(currentSettingsFile);
                }
                return new WarriorFurySettings();
            }
        }

        #endregion
    }

    #endregion

    #region Hunter

    public class HunterMarksmanship
    {
        private readonly HunterMarksmanshipSettings _mySettings = HunterMarksmanshipSettings.GetSettings();

        #region General Timers & Variables

        private readonly WoWItem _firstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
        private readonly WoWItem _secondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);
        private Timer _engineeringTimer = new Timer(0);
        public int LC = 0;
        private Timer _onCd = new Timer(0);

        #endregion

        #region Professions & Racials

        public readonly Spell Alchemy = new Spell("Alchemy");
        public readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
        public readonly Spell Berserking = new Spell("Berserking");
        public readonly Spell BloodFury = new Spell("Blood Fury");
        public readonly Spell Engineering = new Spell("Engineering");
        public readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
        public readonly Spell Lifeblood = new Spell("Lifeblood");
        public readonly Spell Stoneform = new Spell("Stoneform");
        public readonly Spell WarStomp = new Spell("War Stomp");

        #endregion

        #region Hunter Buffs

        public readonly Spell AspectoftheHawk = new Spell("Aspect of the Hawk");
        public readonly Spell Camouflage = new Spell("Camouflage");
        public readonly Spell FeignDeath = new Spell("Feign Death");
        public readonly Spell HuntersMark = new Spell("Hunter's Mark");
        public readonly Spell Misdirection = new Spell("Misdirection");
        public readonly Spell SteadyFocus = new Spell("Steady Focus");

        #endregion

        #region Offensive Spell

        public readonly Spell AimedShot = new Spell("Aimed Shot");
        public readonly Spell ArcaneShot = new Spell("Arcane Shot");
        public readonly Spell CallPet1 = new Spell("Call Pet 1");
        public readonly Spell CallPet2 = new Spell("Call Pet 2");
        public readonly Spell CallPet3 = new Spell("Call Pet 3");
        public readonly Spell CallPet4 = new Spell("Call Pet 4");
        public readonly Spell CallPet5 = new Spell("Call Pet 5");
        public readonly Spell ChimeraShot = new Spell("Chimera Shot");
        public readonly Spell ExplosiveTrap = new Spell("Explosive Trap");
        public readonly Spell KillShot = new Spell("Kill Shot");
        public readonly Spell MultiShot = new Spell("Multi-Shot");
        public readonly Spell SerpentSting = new Spell("Serpent Sting");
        public readonly Spell SteadyShot = new Spell("Steady Shot");
        private Timer SerpentStingTimer = new Timer(0);

        #endregion

        #region Offensive Cooldown

        public readonly Spell AMurderofCrows = new Spell("A Murder of Crows");
        public readonly Spell Barrage = new Spell("Barrage");
        public readonly Spell BlinkStrike = new Spell("Blink Strike");
        public readonly Spell DireBeast = new Spell("Dire Beast");
        public readonly Spell Fervor = new Spell("Fervor");
        public readonly Spell GlaiveToss = new Spell("Glaive Toss");
        public readonly Spell LynxRush = new Spell("Lynx Rush");
        public readonly Spell Powershot = new Spell("Powershot");
        public readonly Spell RapidFire = new Spell("Rapid Fire");
        public readonly Spell Readiness = new Spell("Readiness");
        public readonly Spell Stampede = new Spell("Stampede");
        private Timer DireBeastTimer = new Timer(0);

        #endregion

        #region Defensive Cooldown

        public readonly Spell BindingShot = new Spell("Binding Shot");
        public readonly Spell ConcussiveShot = new Spell("Concussive Shot");
        public readonly Spell Deterrance = new Spell("Deterrance");
        public readonly Spell Disengage = new Spell("Disengage");
        public readonly Spell FreezingTrap = new Spell("Freezing Trap");
        public readonly Spell IceTrap = new Spell("Ice Trap");
        public readonly Spell ScatterShot = new Spell("Scatter Shot");
        public readonly Spell SilencingShot = new Spell("Silencing Shot");
        public readonly Spell WyvernSting = new Spell("Wyvern Sting");

        #endregion

        #region Healing Spell

        public readonly Spell Exhilaration = new Spell("Exhilaration");
        public readonly Spell FeedPet = new Spell("Feed Pet");
        public readonly Spell MendPet = new Spell("Mend Pet");
        public readonly Spell RevivePet = new Spell("Revive Pet");
        private Timer MendPetTimer = new Timer(0);

        #endregion

        public HunterMarksmanship()
        {
            Main.InternalRange = 30.0f;
            UInt64 lastTarget = 0;

            while (Main.InternalLoop)
            {
                try
                {
                    if (!ObjectManager.Me.IsDeadMe)
                    {
                        if (!ObjectManager.Me.IsMounted)
                        {
                            if (Fight.InFight && ObjectManager.Me.Target > 0)
                            {
                                if (ObjectManager.Me.Target != lastTarget
                                    && SerpentSting.IsHostileDistanceGood)
                                {
                                    Pull();
                                    lastTarget = ObjectManager.Me.Target;
                                }

                                if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                    && _mySettings.UseLowCombat)
                                {
                                    LC = 1;
                                    if (ObjectManager.Target.GetDistance < 41)
                                        LowCombat();
                                }
                                else
                                {
                                    LC = 0;
                                    if (ObjectManager.Target.GetDistance < 41)
                                        Combat();
                                }
                                break;
                            }
                            if (!ObjectManager.Me.IsCast)
                                Patrolling();
                        }
                    }
                    else
                        Thread.Sleep(500);
                }
                catch
                {
                }
                Thread.Sleep(250);
            }
        }

        private void Pull()
        {
            if (HuntersMark.KnownSpell && HuntersMark.IsSpellUsable && _mySettings.UseHuntersMark
                && HuntersMark.IsHostileDistanceGood && !HuntersMark.TargetHaveBuff && LC != 1)
                HuntersMark.Launch();

            if (ObjectManager.Pet.IsAlive)
            {
                Lua.RunMacroText("/petattack");
                Logging.WriteFight("Launch Pet Attack");
            }

            if (ObjectManager.Pet.IsAlive && _mySettings.UseMisdirection && Misdirection.KnownSpell
                && Misdirection.IsSpellUsable)
            {
                Lua.RunMacroText("/target pet");
                Thread.Sleep(200);
                Misdirection.Launch();
                Thread.Sleep(200);
            }

            if (SerpentSting.KnownSpell && SerpentSting.IsSpellUsable && SerpentSting.IsHostileDistanceGood
                && _mySettings.UseSerpentSting)
            {
                SerpentSting.Launch();
                return;
            }
        }

        private void LowCombat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            DefenseCycle();
            Heal();

            if (GlaiveToss.KnownSpell && GlaiveToss.IsSpellUsable && GlaiveToss.IsHostileDistanceGood
                && _mySettings.UseGlaiveToss)
            {
                GlaiveToss.Launch();
                return;
            }
            if (ArcaneShot.IsSpellUsable && ArcaneShot.IsHostileDistanceGood && ArcaneShot.KnownSpell
                && _mySettings.UseArcaneShot)
            {
                ArcaneShot.Launch();
                return;
            }
            if (SteadyShot.KnownSpell && SteadyShot.IsSpellUsable && SteadyShot.IsHostileDistanceGood
                && _mySettings.UseSteadyShot)
            {
                SteadyShot.Launch();
                return;
            }
            if (ExplosiveTrap.KnownSpell && ExplosiveTrap.IsSpellUsable && ExplosiveTrap.IsHostileDistanceGood
                && _mySettings.UseExplosiveTrap)
            {
                ExplosiveTrap.Launch();
            }
        }

        private void Combat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            if (_onCd.IsReady)
                DefenseCycle();
            DPSCycle();
            Heal();
            Decast();
            DPSCycle();
            DPSBurst();
            DPSCycle();
        }

        private void Buff()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            Pet();

            if (_mySettings.UseAspectoftheHawk && AspectoftheHawk.KnownSpell && AspectoftheHawk.IsSpellUsable
                && !AspectoftheHawk.HaveBuff && !ObjectManager.Me.HaveBuff(109260))
            {
                AspectoftheHawk.Launch();
                return;
            }

            if (_mySettings.UseCamouflage && Camouflage.KnownSpell && Camouflage.IsSpellUsable && !Camouflage.HaveBuff
                && !ObjectManager.Me.InCombat)
            {
                Camouflage.Launch();
                return;
            }

            if (_mySettings.UseAlchFlask && !ObjectManager.Me.HaveBuff(79638) && !ObjectManager.Me.HaveBuff(79640) && !ObjectManager.Me.HaveBuff(79639)
                && !ItemsManager.IsItemOnCooldown(75525) && ItemsManager.GetItemCountByIdLUA(75525) > 0)
                ItemsManager.UseItem(75525);
        }

        private void Pet()
        {
            if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                && CallPet1.KnownSpell && CallPet1.IsSpellUsable && _mySettings.UsePet1 && ObjectManager.Me.InCombat)
            {
                CallPet1.Launch();
                Thread.Sleep(1000);
            }
            else if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                     && CallPet2.KnownSpell && CallPet2.IsSpellUsable && _mySettings.UsePet2 && ObjectManager.Me.InCombat)
            {
                CallPet2.Launch();
                Thread.Sleep(1000);
            }
            else if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                     && CallPet3.KnownSpell && CallPet3.IsSpellUsable && _mySettings.UsePet3 && ObjectManager.Me.InCombat)
            {
                CallPet3.Launch();
                Thread.Sleep(1000);
            }
            else if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                     && CallPet4.KnownSpell && CallPet4.IsSpellUsable && _mySettings.UsePet4 && ObjectManager.Me.InCombat)
            {
                CallPet4.Launch();
                Thread.Sleep(1000);
            }
            else
            {
                if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                    && CallPet5.KnownSpell && CallPet5.IsSpellUsable && _mySettings.UsePet5 && ObjectManager.Me.InCombat)
                {
                    CallPet5.Launch();
                    Thread.Sleep(1000);
                }
            }
            if (!ObjectManager.Me.IsCast && (!ObjectManager.Pet.IsAlive || ObjectManager.Pet.Guid == 0)
                && RevivePet.KnownSpell && RevivePet.IsSpellUsable && _mySettings.UseRevivePet
                && _mySettings.UseCombatRevive && ObjectManager.Target.HealthPercent > 10 && ObjectManager.Me.InCombat)
            {
                RevivePet.Launch();
                Thread.Sleep(1000);
                return;
            }
            if (!ObjectManager.Me.IsCast && !ObjectManager.Pet.IsAlive
                && RevivePet.KnownSpell && RevivePet.IsSpellUsable && _mySettings.UseRevivePet
                && !ObjectManager.Me.InCombat)
            {
                RevivePet.Launch();
                Thread.Sleep(1000);
            }
        }

        private void AvoidMelee()
        {
            if (ObjectManager.Target.GetDistance < _mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
            {
                Logging.WriteFight("Too Close. Moving Back");
                var maxTimeTimer = new Timer(1000*2);
                MovementsAction.MoveBackward(true);
                while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                    Thread.Sleep(300);
                MovementsAction.MoveBackward(false);
                if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
                {
                    MovementsAction.MoveForward(true);
                    Thread.Sleep(1000);
                    MovementsAction.MoveForward(false);
                    MovementManager.Face(ObjectManager.Target.Position);
                }
            }
        }

        private void DefenseCycle()
        {
            if (ObjectManager.Me.HealthPercent < 20 && _mySettings.UseFeignDeath
                && FeignDeath.KnownSpell && FeignDeath.IsSpellUsable)
            {
                FeignDeath.Launch();
                Thread.Sleep(5000);
                if (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                    return;
                Thread.Sleep(5000);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 50 && _mySettings.UseDeterrance
                && Deterrance.KnownSpell && Deterrance.IsSpellUsable)
            {
                Deterrance.Launch();
                Thread.Sleep(200);
                return;
            }
            if (_mySettings.UseFreezingTrap && ObjectManager.GetNumberAttackPlayer() > 1 && FreezingTrap.KnownSpell
                && FreezingTrap.IsSpellUsable && ObjectManager.Target.GetDistance > 10)
            {
                FreezingTrap.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 80 && _mySettings.UseIceTrap
                && IceTrap.KnownSpell && IceTrap.IsSpellUsable && ObjectManager.Target.GetDistance < 10
                && Disengage.KnownSpell && Disengage.IsSpellUsable && _mySettings.UseDisengage)
            {
                IceTrap.Launch();
                Thread.Sleep(1000);
                MovementsAction.Jump();
                Disengage.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 80 && _mySettings.UseConcussiveShot
                && ConcussiveShot.KnownSpell && ConcussiveShot.IsSpellUsable && ConcussiveShot.IsHostileDistanceGood
                && Disengage.KnownSpell && Disengage.IsSpellUsable && _mySettings.UseDisengage)
            {
                ConcussiveShot.Launch();
                Thread.Sleep(1000);
                MovementsAction.Jump();
                Disengage.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 80 && _mySettings.UseBindingShot
                && BindingShot.KnownSpell && BindingShot.IsSpellUsable && BindingShot.IsHostileDistanceGood
                && Disengage.KnownSpell && Disengage.IsSpellUsable && _mySettings.UseDisengage)
            {
                BindingShot.Launch();
                Thread.Sleep(1000);
                MovementsAction.Jump();
                Disengage.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable &&
                WarStomp.KnownSpell
                && _mySettings.UseWarStomp)
            {
                WarStomp.Launch();
                _onCd = new Timer(1000*2);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable &&
                Stoneform.KnownSpell
                && _mySettings.UseStoneform)
            {
                Stoneform.Launch();
                _onCd = new Timer(1000*8);
            }
        }

        private void Heal()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (ObjectManager.Me.HealthPercent <= _mySettings.UseGiftoftheNaaruAtPercentage && GiftoftheNaaru.KnownSpell &&
                GiftoftheNaaru.IsSpellUsable
                && _mySettings.UseGiftoftheNaaru)
            {
                GiftoftheNaaru.Launch();
                return;
            }
            if (Exhilaration.KnownSpell && Exhilaration.IsSpellUsable
                && _mySettings.UseExhilaration && ObjectManager.Me.HealthPercent < 70)
            {
                Exhilaration.Launch();
                return;
            }
            if (ObjectManager.Pet.Health > 0 && ObjectManager.Pet.HealthPercent < 50
                && FeedPet.KnownSpell && FeedPet.IsSpellUsable && _mySettings.UseFeedPet
                && !ObjectManager.Me.InCombat)
            {
                FeedPet.Launch();
                return;
            }
            if (ObjectManager.Pet.Health > 0 && ObjectManager.Pet.HealthPercent < 80
                && MendPet.KnownSpell && MendPet.IsSpellUsable && _mySettings.UseMendPet
                && MendPetTimer.IsReady)
            {
                MendPet.Launch();
                MendPetTimer = new Timer(1000*10);
            }
        }

        private void Decast()
        {
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8
                && ObjectManager.Me.HealthPercent <= _mySettings.UseArcaneTorrentForDecastAtPercentage
                && _mySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && SilencingShot.IsHostileDistanceGood
                && SilencingShot.KnownSpell && SilencingShot.IsSpellUsable && _mySettings.UseSilencingShot)
            {
                SilencingShot.Launch();
                return;
            }
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && ScatterShot.IsHostileDistanceGood
                && ScatterShot.KnownSpell && ScatterShot.IsSpellUsable && _mySettings.UseScatterShot)
            {
                ScatterShot.Launch();
                return;
            }
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && _mySettings.UseWyvernSting
                && WyvernSting.KnownSpell && WyvernSting.IsSpellUsable && WyvernSting.IsHostileDistanceGood)
            {
                WyvernSting.Launch();
            }
        }

        private void DPSBurst()
        {
            if (_mySettings.UseTrinketOne && !ItemsManager.IsItemOnCooldown(_firstTrinket.Entry) && ItemsManager.IsUsableItemById(_firstTrinket.Entry))
            {
                ItemsManager.UseItem(_firstTrinket.Name);
                Logging.WriteFight("Use First Trinket Slot");
            }

            if (_mySettings.UseTrinketTwo && !ItemsManager.IsItemOnCooldown(_secondTrinket.Entry) && ItemsManager.IsUsableItemById(_secondTrinket.Entry))
            {
                ItemsManager.UseItem(_secondTrinket.Name);
                Logging.WriteFight("Use Second Trinket Slot");
                return;
            }
            if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseBerserking)
            {
                Berserking.Launch();
                return;
            }
            if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseBloodFury)
            {
                BloodFury.Launch();
                return;
            }
            if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseLifeblood)
            {
                Lifeblood.Launch();
                return;
            }
            if (_engineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseEngGlove)
            {
                Logging.WriteFight("Use Engineering Gloves.");
                Lua.RunMacroText("/use 10");
                _engineeringTimer = new Timer(1000*60);
                return;
            }
            if (AimedShot.KnownSpell && AimedShot.IsSpellUsable && AimedShot.IsHostileDistanceGood
                && _mySettings.UseAimedShot && ObjectManager.Me.HaveBuff(82926))
            {
                AimedShot.Launch();
                return;
            }
            if (_mySettings.UseSteadyShot && SteadyShot.KnownSpell && SteadyShot.IsHostileDistanceGood && SteadyShot.IsSpellUsable
                && SteadyFocus.KnownSpell && !ObjectManager.Me.HaveBuff(53220))
            {
                SteadyShot.Launch();
                return;
            }
            if (AMurderofCrows.KnownSpell && AMurderofCrows.IsSpellUsable && AMurderofCrows.IsHostileDistanceGood
                && _mySettings.UseAMurderofCrows && !AMurderofCrows.TargetHaveBuff)
            {
                AMurderofCrows.Launch();
                return;
            }
            if (Barrage.KnownSpell && Barrage.IsSpellUsable && _mySettings.UseBarrage && Barrage.IsHostileDistanceGood)
            {
                Barrage.Launch();
                return;
            }
            if (BlinkStrike.KnownSpell && BlinkStrike.IsSpellUsable && ObjectManager.Pet.IsAlive
                && _mySettings.UseBlinkStrike && ObjectManager.Target.GetDistance < 41)
            {
                BlinkStrike.Launch();
                return;
            }
            if (DireBeast.KnownSpell && DireBeast.IsSpellUsable && _mySettings.UseDireBeast
                && DireBeast.IsHostileDistanceGood && DireBeastTimer.IsReady)
            {
                DireBeast.Launch();
                DireBeastTimer = new Timer(1000*15);
                return;
            }
            if (Fervor.KnownSpell && Fervor.IsSpellUsable && ObjectManager.Me.Focus < 50
                && _mySettings.UseFervor)
            {
                Fervor.Launch();
                return;
            }
            if (GlaiveToss.KnownSpell && GlaiveToss.IsSpellUsable && _mySettings.UseGlaiveToss &&
                GlaiveToss.IsHostileDistanceGood)
            {
                GlaiveToss.Launch();
                return;
            }
            if (LynxRush.KnownSpell && LynxRush.IsSpellUsable && _mySettings.UseLynxRush &&
                ObjectManager.Target.GetDistance < 41)
            {
                LynxRush.Launch();
                return;
            }
            if (Powershot.KnownSpell && Powershot.IsSpellUsable && _mySettings.UsePowershot &&
                Powershot.IsHostileDistanceGood)
            {
                Powershot.Launch();
                return;
            }
            if (Stampede.KnownSpell && Stampede.IsSpellUsable && _mySettings.UseStampede &&
                Stampede.IsHostileDistanceGood)
            {
                Stampede.Launch();
                return;
            }
            if (RapidFire.KnownSpell && RapidFire.IsSpellUsable && _mySettings.UseRapidFire
                && ObjectManager.Target.GetDistance < 41)
            {
                RapidFire.Launch();
                return;
            }
            if (Readiness.KnownSpell && Readiness.IsSpellUsable && _mySettings.UseReadiness)
            {
                Readiness.Launch();
            }
        }

        private void DPSCycle()
        {
            if (SerpentSting.IsSpellUsable && SerpentSting.IsHostileDistanceGood && SerpentSting.KnownSpell
                && _mySettings.UseSerpentSting && !SerpentSting.TargetHaveBuff)
            {
                SerpentSting.Launch();
                SerpentStingTimer = new Timer(1000*12);
                return;
            }
            if (ChimeraShot.KnownSpell && ChimeraShot.IsSpellUsable && ChimeraShot.IsHostileDistanceGood
                && _mySettings.UseChimeraShot)
            {
                ChimeraShot.Launch();
                SerpentStingTimer = new Timer(1000*12);
                return;
            }
            if (KillShot.KnownSpell && KillShot.IsSpellUsable && KillShot.IsHostileDistanceGood
                && _mySettings.UseKillShot)
            {
                KillShot.Launch();
                return;
            }
            if (AimedShot.KnownSpell && AimedShot.IsSpellUsable && AimedShot.IsHostileDistanceGood
                && _mySettings.UseAimedShot && ObjectManager.Me.HaveBuff(82926))
            {
                AimedShot.Launch();
                return;
            }
            if (_mySettings.UseSteadyShot && SteadyShot.KnownSpell && SteadyShot.IsHostileDistanceGood && SteadyShot.IsSpellUsable
                && SteadyFocus.KnownSpell && !ObjectManager.Me.HaveBuff(53220))
            {
                SteadyShot.Launch();
                return;
            }
            if (ObjectManager.GetNumberAttackPlayer() > 3 && _mySettings.UseMultiShot && MultiShot.KnownSpell && MultiShot.IsHostileDistanceGood
                && MultiShot.IsSpellUsable)
            {
                MultiShot.Launch();
                return;
            }
            if (ObjectManager.GetNumberAttackPlayer() > 3 && _mySettings.UseMultiShot && _mySettings.UseSteadyShot && SteadyShot.KnownSpell && SteadyShot.IsHostileDistanceGood &&
                SteadyShot.IsSpellUsable && ObjectManager.Me.FocusPercentage < 40)
            {
                SteadyShot.Launch();
                return;
            }
            if (ArcaneShot.KnownSpell && ArcaneShot.IsSpellUsable && ArcaneShot.IsHostileDistanceGood && _mySettings.UseArcaneShot && ObjectManager.Me.FocusPercentage > 64)
            {
                ArcaneShot.Launch();
                return;
            }
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell && _mySettings.UseArcaneTorrentForResource)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (SteadyShot.KnownSpell && SteadyShot.IsSpellUsable && SteadyShot.IsHostileDistanceGood
                && _mySettings.UseSteadyShot && ObjectManager.Me.FocusPercentage < 80)
            {
                SteadyShot.Launch();
            }
        }

        private void Patrolling()
        {
            if (ObjectManager.Me.IsMounted) return;
            Buff();
            Heal();
        }

        #region Nested type: HunterMarksmanshipSettings

        [Serializable]
        public class HunterMarksmanshipSettings : Settings
        {
            public bool DoAvoidMelee = false;
            public int DoAvoidMeleeDistance = 0;
            public bool UseAMurderofCrows = true;
            public bool UseAimedShot = true;
            public bool UseAlchFlask = true;
            public bool UseArcaneShot = true;
            public bool UseArcaneTorrentForDecast = true;
            public int UseArcaneTorrentForDecastAtPercentage = 100;
            public bool UseArcaneTorrentForResource = true;
            public bool UseAspectoftheHawk = true;
            public bool UseBarrage = true;
            public bool UseBerserking = true;
            public bool UseBindingShot = true;
            public bool UseBlinkStrike = true;
            public bool UseBloodFury = true;
            public bool UseCamouflage = false;
            public bool UseChimeraShot = true;
            public bool UseCombatRevive = true;
            public bool UseConcussiveShot = true;
            public bool UseDeterrance = true;
            public bool UseDireBeast = true;
            public bool UseDisengage = true;
            public bool UseEngGlove = true;
            public bool UseExhilaration = true;
            public bool UseExplosiveTrap = true;
            public bool UseFeedPet = true;
            public bool UseFeignDeath = true;
            public bool UseFervor = true;
            public bool UseFreezingTrap = true;
            public bool UseGiftoftheNaaru = true;
            public int UseGiftoftheNaaruAtPercentage = 80;
            public bool UseGlaiveToss = true;
            public bool UseHuntersMark = true;
            public bool UseIceTrap = true;
            public bool UseKillShot = true;
            public bool UseLifeblood = true;
            public bool UseLowCombat = true;
            public bool UseLynxRush = true;
            public bool UseMendPet = true;
            public bool UseMisdirection = true;
            public bool UseMultiShot = true;
            public bool UsePet1 = true;
            public bool UsePet2 = false;
            public bool UsePet3 = false;
            public bool UsePet4 = false;
            public bool UsePet5 = false;
            public bool UsePowershot = true;
            public bool UseRapidFire = true;
            public bool UseReadiness = true;
            public bool UseRevivePet = true;
            public bool UseScatterShot = true;
            public bool UseSerpentSting = true;
            public bool UseSilencingShot = true;
            public bool UseStampede = true;
            public bool UseSteadyShot = true;
            public bool UseStoneform = true;
            public int UseStoneformAtPercentage = 80;
            public bool UseTrinketOne = true;
            public bool UseTrinketTwo = true;
            public bool UseWarStomp = true;
            public int UseWarStompAtPercentage = 80;
            public bool UseWyvernSting = true;

            public HunterMarksmanshipSettings()
            {
                ConfigWinForm(new Point(500, 400), "Hunter Marksmanship Settings");
                /* Professions & Racials */
                AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials");
                AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
                AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
                AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
                AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
                AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
                AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
                /* Hunter Buffs */
                AddControlInWinForm("Use Aspect of the Hawk", "UseAspectoftheHawk", "Hunter Buffs");
                AddControlInWinForm("Use Camouflage", "UseCamouflage", "Hunter Buffs");
                AddControlInWinForm("Use Feign Death", "UseFeignDeath", "Hunter Buffs");
                AddControlInWinForm("Use Hunter's Mark", "UseHuntersMark", "Hunter Buffs");
                AddControlInWinForm("Use Misdirection", "UseMisdirection", "Hunter Buffs");
                /* Offensive Spell */
                AddControlInWinForm("Use Aimed Shot", "UseAimedShot", "Offensive Spell");
                AddControlInWinForm("Use Arcane Shot", "UseArcaneShot", "Offensive Spell");
                AddControlInWinForm("Use Pet in Slot 1", "UsePet1", "Offensive Spell");
                AddControlInWinForm("Use Pet in Slot 2", "UsePet2", "Offensive Spell");
                AddControlInWinForm("Use Pet in Slot 3", "UsePet3", "Offensive Spell");
                AddControlInWinForm("Use Pet in Slot 4", "UsePet4", "Offensive Spell");
                AddControlInWinForm("Use Pet in Slot 5", "UsePet5", "Offensive Spell");
                AddControlInWinForm("Use Chimera Shot", "UseChimeraShot", "Offensive Spell");
                AddControlInWinForm("Use Explosive Trap", "UseExplosiveTrap", "Offensive Spell");
                AddControlInWinForm("Use KillShot", "UseKillShot", "Offensive Spell");
                AddControlInWinForm("Use Multi-Shot", "UseMultiShot", "Offensive Spell");
                AddControlInWinForm("Use Serpent Sting", "UseSerpentSting", "Offensive Spell");
                AddControlInWinForm("Use Steady Shot", "UseSteadyShot", "Offensive Spell");
                /* Offensive Cooldown */
                AddControlInWinForm("Use A Murder of Crows", "UseAMurderofCrows", "Offensive Cooldown");
                AddControlInWinForm("Use Barrage", "UseBarrage", "Offensive Cooldown");
                AddControlInWinForm("Use Blink Strike", "UseBlinkStrike", "Offensive Cooldown");
                AddControlInWinForm("Use Dire Beast", "UseDireBeast", "Offensive Cooldown");
                AddControlInWinForm("Use Fervor", "UseFervor", "Offensive Cooldown");
                AddControlInWinForm("Use Glaive Toss", "UseGlaiveToss", "Offensive Cooldown");
                AddControlInWinForm("Use Lynx Rush", "UseLynxRush", "Offensive Cooldown");
                AddControlInWinForm("Use Powershot", "UsePowershot", "Offensive Cooldown");
                AddControlInWinForm("Use Rapid Fire", "UseRapidFire", "Offensive Cooldown");
                AddControlInWinForm("Use Readiness", "UseReadiness", "Offensive Cooldown");
                AddControlInWinForm("Use Stampede", "UseStampede", "Offensive Cooldown");
                /* Defensive Cooldown */
                AddControlInWinForm("Use Binding Shot", "UseBindingShot", "Defensive Cooldown");
                AddControlInWinForm("Use Concussive Shot", "UseConcussiveShot", "Defensive Cooldown");
                AddControlInWinForm("Use Deterrance", "UseDeterrance", "Defensive Cooldown");
                AddControlInWinForm("Use Disengage", "UseDisengage", "Defensive Cooldown");
                AddControlInWinForm("Use Freezing Trap", "UseFreezingTrap", "Defensive Cooldown");
                AddControlInWinForm("Use Ice Trap", "UseIceTrap", "Defensive Cooldown");
                AddControlInWinForm("Use Scatter Shot", "UseScatterShot", "Defensive Cooldown");
                AddControlInWinForm("Use Silencing Shot", "UseSilencingShot", "Defensive Cooldown");
                AddControlInWinForm("Use Wyvern Sting", "UseWyvernSting", "Defensive Cooldown");
                /* Healing Spell */
                AddControlInWinForm("Use Exhilaration", "UseExhilaration", "Healing Spell");
                AddControlInWinForm("Use Feed Pet", "UseFeedPet", "Healing Spell");
                AddControlInWinForm("Use Mend Pet", "UseMendPet", "Healing Spell");
                AddControlInWinForm("Use Revive Pet", "UseRevivePet", "Healing Spell");
                /* Game Settings */
                AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
                AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
                AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
                AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
                AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
                AddControlInWinForm("Use Revive Pet in Combat", "UseCombatRevive", "Game Settings");
                AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
                AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
            }

            public static HunterMarksmanshipSettings currentSetting { get; set; }

            public static HunterMarksmanshipSettings GetSettings()
            {
                string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Hunter_Marksmanship.xml";
                if (File.Exists(currentSettingsFile))
                {
                    return
                        currentSetting = Load<HunterMarksmanshipSettings>(currentSettingsFile);
                }
                return new HunterMarksmanshipSettings();
            }
        }

        #endregion
    }

    public class HunterBeastMastery
    {
        private readonly HunterBeastMasterySettings _mySettings = HunterBeastMasterySettings.GetSettings();

        #region General Timers & Variables

        private readonly WoWItem _firstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
        private readonly WoWItem _secondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);
        private Timer AncientHysteriaTimer = new Timer(0);
        private Timer BurrowAttackTimer = new Timer(0);
        private Timer _engineeringTimer = new Timer(0);
        private Timer FroststormBreathTimer = new Timer(0);
        public int LC = 0;
        private Timer _onCd = new Timer(0);
        private Timer SpiritMendTimer = new Timer(0);

        #endregion

        #region Professions & Racials

        public readonly Spell Alchemy = new Spell("Alchemy");
        public readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
        public readonly Spell Berserking = new Spell("Berserking");
        public readonly Spell BloodFury = new Spell("Blood Fury");
        public readonly Spell Engineering = new Spell("Engineering");
        public readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
        public readonly Spell Lifeblood = new Spell("Lifeblood");
        public readonly Spell Stoneform = new Spell("Stoneform");
        public readonly Spell WarStomp = new Spell("War Stomp");

        #endregion

        #region Hunter Buffs

        public readonly Spell AspectoftheHawk = new Spell("Aspect of the Hawk");
        public readonly Spell Camouflage = new Spell("Camouflage");
        public readonly Spell FeignDeath = new Spell("Feign Death");
        public readonly Spell HuntersMark = new Spell("Hunter's Mark");
        public readonly Spell Misdirection = new Spell("Misdirection");

        #endregion

        #region Offensive Spell

        public readonly Spell ArcaneShot = new Spell("Arcane Shot");
        public readonly Spell CallPet1 = new Spell("Call Pet 1");
        public readonly Spell CallPet2 = new Spell("Call Pet 2");
        public readonly Spell CallPet3 = new Spell("Call Pet 3");
        public readonly Spell CallPet4 = new Spell("Call Pet 4");
        public readonly Spell CallPet5 = new Spell("Call Pet 5");
        public readonly Spell CobraShot = new Spell("Cobra Shot");
        public readonly Spell ExplosiveTrap = new Spell("Explosive Trap");
        public readonly Spell KillCommand = new Spell("Kill Command");
        public readonly Spell KillShot = new Spell("Kill Shot");
        public readonly Spell MultiShot = new Spell("Multi-Shot");
        public readonly Spell SerpentSting = new Spell("Serpent Sting");
        public readonly Spell SteadyShot = new Spell("Steady Shot");
        private Timer SerpentStingTimer = new Timer(0);

        #endregion

        #region Offensive Cooldown

        public readonly Spell AMurderofCrows = new Spell("A Murder of Crows");
        public readonly Spell Barrage = new Spell("Barrage");
        public readonly Spell BestialWrath = new Spell("Bestial Wrath");
        public readonly Spell BlinkStrike = new Spell("Blink Strike");
        public readonly Spell DireBeast = new Spell("Dire Beast");
        public readonly Spell Fervor = new Spell("Fervor");
        public readonly Spell FocusFire = new Spell("Focus Fire");
        public readonly Spell GlaiveToss = new Spell("Glaive Toss");
        public readonly Spell LynxRush = new Spell("Lynx Rush");
        public readonly Spell Powershot = new Spell("Powershot");
        public readonly Spell RapidFire = new Spell("Rapid Fire");
        public readonly Spell Readiness = new Spell("Readiness");
        public readonly Spell Stampede = new Spell("Stampede");
        private Timer DireBeastTimer = new Timer(0);

        #endregion

        #region Defensive Cooldown

        public readonly Spell BindingShot = new Spell("Binding Shot");
        public readonly Spell ConcussiveShot = new Spell("Concussive Shot");
        public readonly Spell Deterrance = new Spell("Deterrance");
        public readonly Spell Disengage = new Spell("Disengage");
        public readonly Spell FreezingTrap = new Spell("Freezing Trap");
        public readonly Spell IceTrap = new Spell("Ice Trap");
        public readonly Spell Intimidation = new Spell("Intimidation");
        public readonly Spell ScatterShot = new Spell("Scatter Shot");
        public readonly Spell SilencingShot = new Spell("Silencing Shot");
        public readonly Spell WyvernSting = new Spell("Wyvern Sting");

        #endregion

        #region Healing Spell

        public readonly Spell Exhilaration = new Spell("Exhilaration");
        public readonly Spell FeedPet = new Spell("Feed Pet");
        public readonly Spell MendPet = new Spell("Mend Pet");
        public readonly Spell RevivePet = new Spell("Revive Pet");
        private Timer MendPetTimer = new Timer(0);

        #endregion

        public HunterBeastMastery()
        {
            Main.InternalRange = 30.0f;
            UInt64 lastTarget = 0;

            while (Main.InternalLoop)
            {
                try
                {
                    if (!ObjectManager.Me.IsDeadMe)
                    {
                        if (!ObjectManager.Me.IsMounted)
                        {
                            if (Fight.InFight && ObjectManager.Me.Target > 0)
                            {
                                if (ObjectManager.Me.Target != lastTarget
                                    && SerpentSting.IsHostileDistanceGood)
                                {
                                    Pull();
                                    lastTarget = ObjectManager.Me.Target;
                                }

                                if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                    && _mySettings.UseLowCombat)
                                {
                                    LC = 1;
                                    if (ObjectManager.Target.GetDistance < 41)
                                        LowCombat();
                                }
                                else
                                {
                                    LC = 0;
                                    if (ObjectManager.Target.GetDistance < 41)
                                        Combat();
                                }
                                break;
                            }
                            if (!ObjectManager.Me.IsCast)
                                Patrolling();
                        }
                    }
                    else
                        Thread.Sleep(500);
                }
                catch
                {
                }
                Thread.Sleep(250);
            }
        }

        private void Pull()
        {
            if (HuntersMark.KnownSpell && HuntersMark.IsSpellUsable && _mySettings.UseHuntersMark
                && HuntersMark.IsHostileDistanceGood && !HuntersMark.TargetHaveBuff && LC != 1)
                HuntersMark.Launch();

            if (ObjectManager.Pet.IsAlive)
            {
                Lua.RunMacroText("/petattack");
                Logging.WriteFight("Launch Pet Attack");
            }

            if (ObjectManager.Pet.IsAlive && _mySettings.UseMisdirection && Misdirection.KnownSpell
                && Misdirection.IsSpellUsable)
            {
                Lua.RunMacroText("/target pet");
                Thread.Sleep(200);
                Misdirection.Launch();
                Thread.Sleep(200);
            }

            if (SerpentSting.KnownSpell && SerpentSting.IsSpellUsable && SerpentSting.IsHostileDistanceGood
                && _mySettings.UseSerpentSting)
            {
                SerpentSting.Launch();
                return;
            }
        }

        private void LowCombat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            DefenseCycle();
            Heal();

            if (GlaiveToss.KnownSpell && GlaiveToss.IsSpellUsable && GlaiveToss.IsHostileDistanceGood
                && _mySettings.UseGlaiveToss)
            {
                GlaiveToss.Launch();
                return;
            }
            if (ArcaneShot.IsSpellUsable && ArcaneShot.IsHostileDistanceGood && ArcaneShot.KnownSpell
                && _mySettings.UseArcaneShot)
            {
                ArcaneShot.Launch();
                return;
            }
            if (CobraShot.KnownSpell && CobraShot.IsSpellUsable && CobraShot.IsHostileDistanceGood
                && _mySettings.UseCobraShot)
            {
                CobraShot.Launch();
                return;
            }
            if (SteadyShot.KnownSpell && SteadyShot.IsSpellUsable && SteadyShot.IsHostileDistanceGood
                && ObjectManager.Me.FocusPercentage < 60 && (!CobraShot.KnownSpell || !_mySettings.UseCobraShot))
            {
                SteadyShot.Launch();
                return;
            }
            if (ExplosiveTrap.KnownSpell && ExplosiveTrap.IsSpellUsable && ExplosiveTrap.IsHostileDistanceGood
                && _mySettings.UseExplosiveTrap)
            {
                ExplosiveTrap.Launch();
            }
        }

        private void Combat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            if (_onCd.IsReady)
                DefenseCycle();
            DPSCycle();
            Heal();
            Decast();
            DPSCycle();
            DPSBurst();
            DPSCycle();
        }

        private void Buff()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            Pet();

            if (_mySettings.UseAspectoftheHawk && AspectoftheHawk.KnownSpell && AspectoftheHawk.IsSpellUsable
                && !AspectoftheHawk.HaveBuff && !ObjectManager.Me.HaveBuff(109260))
            {
                AspectoftheHawk.Launch();
                return;
            }

            if (_mySettings.UseCamouflage && Camouflage.KnownSpell && Camouflage.IsSpellUsable && !Camouflage.HaveBuff
                && !ObjectManager.Me.InCombat)
            {
                Camouflage.Launch();
                return;
            }

            if (_mySettings.UseAlchFlask && !ObjectManager.Me.HaveBuff(79638) && !ObjectManager.Me.HaveBuff(79640) && !ObjectManager.Me.HaveBuff(79639)
                && !ItemsManager.IsItemOnCooldown(75525) && ItemsManager.GetItemCountByIdLUA(75525) > 0)
                ItemsManager.UseItem(75525);
        }

        private void Pet()
        {
            if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                && CallPet1.KnownSpell && CallPet1.IsSpellUsable && _mySettings.UsePet1 && ObjectManager.Me.InCombat)
            {
                CallPet1.Launch();
                Thread.Sleep(1000);
            }
            else if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                     && CallPet2.KnownSpell && CallPet2.IsSpellUsable && _mySettings.UsePet2 && ObjectManager.Me.InCombat)
            {
                CallPet2.Launch();
                Thread.Sleep(1000);
            }
            else if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                     && CallPet3.KnownSpell && CallPet3.IsSpellUsable && _mySettings.UsePet3 && ObjectManager.Me.InCombat)
            {
                CallPet3.Launch();
                Thread.Sleep(1000);
            }
            else if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                     && CallPet4.KnownSpell && CallPet4.IsSpellUsable && _mySettings.UsePet4 && ObjectManager.Me.InCombat)
            {
                CallPet4.Launch();
                Thread.Sleep(1000);
            }
            else
            {
                if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                    && CallPet5.KnownSpell && CallPet5.IsSpellUsable && _mySettings.UsePet5 && ObjectManager.Me.InCombat)
                {
                    CallPet5.Launch();
                    Thread.Sleep(1000);
                }
            }

            if (!ObjectManager.Me.IsCast && (!ObjectManager.Pet.IsAlive || ObjectManager.Pet.Guid == 0)
                && RevivePet.KnownSpell && RevivePet.IsSpellUsable && _mySettings.UseRevivePet
                && _mySettings.UseCombatRevive && ObjectManager.Target.HealthPercent > 10 && ObjectManager.Me.InCombat)
            {
                RevivePet.Launch();
                Thread.Sleep(1000);
                return;
            }
            if (!ObjectManager.Me.IsCast && !ObjectManager.Pet.IsAlive
                && RevivePet.KnownSpell && RevivePet.IsSpellUsable && _mySettings.UseRevivePet
                && !ObjectManager.Me.InCombat)
            {
                RevivePet.Launch();
                Thread.Sleep(1000);
            }
        }

        private void AvoidMelee()
        {
            if (ObjectManager.Target.GetDistance < _mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
            {
                Logging.WriteFight("Too Close. Moving Back");
                var maxTimeTimer = new Timer(1000*2);
                MovementsAction.MoveBackward(true);
                while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                    Thread.Sleep(300);
                MovementsAction.MoveBackward(false);
                if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
                {
                    MovementsAction.MoveForward(true);
                    Thread.Sleep(1000);
                    MovementsAction.MoveForward(false);
                    MovementManager.Face(ObjectManager.Target.Position);
                }
            }
        }

        private void DefenseCycle()
        {
            if (ObjectManager.Me.HealthPercent < 20 && _mySettings.UseFeignDeath
                && FeignDeath.KnownSpell && FeignDeath.IsSpellUsable)
            {
                FeignDeath.Launch();
                Thread.Sleep(5000);
                if (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                    return;
                Thread.Sleep(5000);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 50 && _mySettings.UseDeterrance
                && Deterrance.KnownSpell && Deterrance.IsSpellUsable)
            {
                Deterrance.Launch();
                Thread.Sleep(200);
                return;
            }
            if (_mySettings.UseFreezingTrap && ObjectManager.GetNumberAttackPlayer() > 1 && FreezingTrap.KnownSpell
                && FreezingTrap.IsSpellUsable && ObjectManager.Target.GetDistance > 10)
            {
                FreezingTrap.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 80 && _mySettings.UseIceTrap
                && IceTrap.KnownSpell && IceTrap.IsSpellUsable && ObjectManager.Target.GetDistance < 10
                && Disengage.KnownSpell && Disengage.IsSpellUsable && _mySettings.UseDisengage)
            {
                IceTrap.Launch();
                Thread.Sleep(1000);
                MovementsAction.Jump();
                Disengage.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 80 && _mySettings.UseConcussiveShot
                && ConcussiveShot.KnownSpell && ConcussiveShot.IsSpellUsable && ConcussiveShot.IsHostileDistanceGood
                && Disengage.KnownSpell && Disengage.IsSpellUsable && _mySettings.UseDisengage)
            {
                ConcussiveShot.Launch();
                Thread.Sleep(1000);
                MovementsAction.Jump();
                Disengage.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 80 && _mySettings.UseBindingShot
                && BindingShot.KnownSpell && BindingShot.IsSpellUsable && BindingShot.IsHostileDistanceGood
                && Disengage.KnownSpell && Disengage.IsSpellUsable && _mySettings.UseDisengage)
            {
                BindingShot.Launch();
                Thread.Sleep(1000);
                MovementsAction.Jump();
                Disengage.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable &&
                WarStomp.KnownSpell
                && _mySettings.UseWarStomp)
            {
                WarStomp.Launch();
                _onCd = new Timer(1000*2);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable &&
                Stoneform.KnownSpell
                && _mySettings.UseStoneform)
            {
                Stoneform.Launch();
                _onCd = new Timer(1000*8);
                return;
            }
            if (Intimidation.IsSpellUsable && Intimidation.KnownSpell && _mySettings.UseIntimidation
                && (ObjectManager.Me.HealthPercent < 80 || ObjectManager.Pet.Health < 80))
            {
                Intimidation.Launch();
                _onCd = new Timer(1000*3);
            }
        }

        private void Heal()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (ObjectManager.Me.HealthPercent < 85 && ObjectManager.Pet.IsAlive && _mySettings.UseSpiritBeastPet && SpiritMendTimer.IsReady)
            {
                Logging.WriteFight("Cast Spirit Mend.");
                Lua.RunMacroText("/target Player");
                Thread.Sleep(200);
                Lua.RunMacroText("/cast Spirit Mend");
                SpiritMendTimer = new Timer(1000*40);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseGiftoftheNaaruAtPercentage && GiftoftheNaaru.KnownSpell && GiftoftheNaaru.IsSpellUsable
                && _mySettings.UseGiftoftheNaaru)
            {
                GiftoftheNaaru.Launch();
                return;
            }
            if (Exhilaration.KnownSpell && Exhilaration.IsSpellUsable
                && _mySettings.UseExhilaration && ObjectManager.Me.HealthPercent < 70)
            {
                Exhilaration.Launch();
                return;
            }
            if (ObjectManager.Pet.Health > 0 && ObjectManager.Pet.HealthPercent < 50
                && FeedPet.KnownSpell && FeedPet.IsSpellUsable && _mySettings.UseFeedPet
                && !ObjectManager.Me.InCombat)
            {
                FeedPet.Launch();
                return;
            }
            if (ObjectManager.Pet.Health > 0 && ObjectManager.Pet.HealthPercent < 80
                && MendPet.KnownSpell && MendPet.IsSpellUsable && _mySettings.UseMendPet
                && MendPetTimer.IsReady)
            {
                MendPet.Launch();
                MendPetTimer = new Timer(1000*10);
            }
        }

        private void Decast()
        {
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8
                && ObjectManager.Me.HealthPercent <= _mySettings.UseArcaneTorrentForDecastAtPercentage
                && _mySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && SilencingShot.IsHostileDistanceGood
                && SilencingShot.KnownSpell && SilencingShot.IsSpellUsable && _mySettings.UseSilencingShot)
            {
                SilencingShot.Launch();
                return;
            }
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && ScatterShot.IsHostileDistanceGood
                && ScatterShot.KnownSpell && ScatterShot.IsSpellUsable && _mySettings.UseScatterShot)
            {
                ScatterShot.Launch();
                return;
            }
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && _mySettings.UseWyvernSting
                && WyvernSting.KnownSpell && WyvernSting.IsSpellUsable && WyvernSting.IsHostileDistanceGood)
            {
                WyvernSting.Launch();
            }
        }

        private void DPSBurst()
        {
            if (_mySettings.UseTrinketOne && !ItemsManager.IsItemOnCooldown(_firstTrinket.Entry) && ItemsManager.IsUsableItemById(_firstTrinket.Entry))
            {
                ItemsManager.UseItem(_firstTrinket.Name);
                Logging.WriteFight("Use First Trinket Slot");
            }

            if (_mySettings.UseTrinketTwo && !ItemsManager.IsItemOnCooldown(_secondTrinket.Entry) && ItemsManager.IsUsableItemById(_secondTrinket.Entry))
            {
                ItemsManager.UseItem(_secondTrinket.Name);
                Logging.WriteFight("Use Second Trinket Slot");
                return;
            }
            if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 41 && _mySettings.UseBerserking)
            {
                Berserking.Launch();
                return;
            }
            if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 41 && _mySettings.UseBloodFury)
            {
                BloodFury.Launch();
                return;
            }
            if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 41 && _mySettings.UseLifeblood)
            {
                Lifeblood.Launch();
                return;
            }
            if (_engineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 41 && _mySettings.UseEngGlove)
            {
                Logging.WriteFight("Use Engineering Gloves.");
                Lua.RunMacroText("/use 10");
                _engineeringTimer = new Timer(1000*60);
                return;
            }
            if (AMurderofCrows.KnownSpell && AMurderofCrows.IsSpellUsable && AMurderofCrows.IsHostileDistanceGood
                && _mySettings.UseAMurderofCrows && !AMurderofCrows.TargetHaveBuff)
            {
                AMurderofCrows.Launch();
                return;
            }
            if (Barrage.KnownSpell && Barrage.IsSpellUsable && _mySettings.UseBarrage && Barrage.IsHostileDistanceGood)
            {
                Barrage.Launch();
                return;
            }
            if (BlinkStrike.KnownSpell && BlinkStrike.IsSpellUsable && ObjectManager.Pet.IsAlive
                && _mySettings.UseBlinkStrike && ObjectManager.Target.GetDistance < 41)
            {
                BlinkStrike.Launch();
                return;
            }
            if (DireBeast.KnownSpell && DireBeast.IsSpellUsable && _mySettings.UseDireBeast
                && DireBeast.IsHostileDistanceGood && DireBeastTimer.IsReady)
            {
                DireBeast.Launch();
                DireBeastTimer = new Timer(1000*15);
                return;
            }
            if (Fervor.KnownSpell && Fervor.IsSpellUsable && ObjectManager.Me.Focus < 50
                && _mySettings.UseFervor)
            {
                Fervor.Launch();
                return;
            }
            if (GlaiveToss.KnownSpell && GlaiveToss.IsSpellUsable && _mySettings.UseGlaiveToss &&
                GlaiveToss.IsHostileDistanceGood)
            {
                GlaiveToss.Launch();
                return;
            }
            if (LynxRush.KnownSpell && LynxRush.IsSpellUsable && _mySettings.UseLynxRush &&
                ObjectManager.Target.GetDistance < 41)
            {
                LynxRush.Launch();
                return;
            }
            if (Powershot.KnownSpell && Powershot.IsSpellUsable && _mySettings.UsePowershot &&
                Powershot.IsHostileDistanceGood)
            {
                Powershot.Launch();
                return;
            }
            if (Stampede.KnownSpell && Stampede.IsSpellUsable && _mySettings.UseStampede &&
                Stampede.IsHostileDistanceGood)
            {
                Stampede.Launch();
                return;
            }
            if (BestialWrath.KnownSpell && BestialWrath.IsSpellUsable && _mySettings.UseBestialWrath
                && ObjectManager.Target.GetDistance < 41)
            {
                BestialWrath.Launch();
                return;
            }
            if (RapidFire.KnownSpell && RapidFire.IsSpellUsable && _mySettings.UseRapidFire
                && ObjectManager.Target.GetDistance < 41 && !BestialWrath.HaveBuff)
            {
                RapidFire.Launch();
                return;
            }
            if (_mySettings.UseCoreHoundPet && ObjectManager.Target.GetDistance < 41
                && AncientHysteriaTimer.IsReady && ObjectManager.Me.HaveBuff(95809)
                && ObjectManager.Pet.IsAlive && !RapidFire.HaveBuff && !BestialWrath.HaveBuff)
            {
                Lua.RunMacroText("/cast Ancient Hysteria");
                Logging.WriteFight("Launch Core Hound Pet Ancient Hysteria");
                AncientHysteriaTimer = new Timer(1000*60*6);
                return;
            }
            if (ObjectManager.Pet.BuffStack(19623) == 5 && FocusFire.IsSpellUsable &&
                FocusFire.KnownSpell
                && _mySettings.UseFocusFire)
            {
                FocusFire.Launch();
                return;
            }
            if (Readiness.KnownSpell && Readiness.IsSpellUsable && _mySettings.UseReadiness
                && !RapidFire.IsSpellUsable && !BestialWrath.IsSpellUsable)
            {
                Readiness.Launch();
            }
        }

        private void DPSCycle()
        {
            if (SerpentSting.IsSpellUsable && SerpentSting.IsHostileDistanceGood && SerpentSting.KnownSpell
                && _mySettings.UseSerpentSting && !SerpentSting.TargetHaveBuff)
            {
                SerpentSting.Launch();
                SerpentStingTimer = new Timer(1000*12);
                return;
            }
            if (CobraShot.KnownSpell && CobraShot.IsSpellUsable && CobraShot.IsHostileDistanceGood
                && _mySettings.UseCobraShot && SerpentStingTimer.IsReady)
            {
                CobraShot.Launch();
                SerpentStingTimer = new Timer(1000*12);
                return;
            }
            if (KillShot.KnownSpell && KillShot.IsSpellUsable && KillShot.IsHostileDistanceGood
                && _mySettings.UseKillShot)
            {
                KillShot.Launch();
                return;
            }
            if (ObjectManager.GetNumberAttackPlayer() > 2 && _mySettings.UseMultiShot)
            {
                if (MultiShot.KnownSpell && MultiShot.IsSpellUsable && MultiShot.IsHostileDistanceGood)
                {
                    MultiShot.Launch();
                    return;
                }
                if (_mySettings.UseChimeraPet && ObjectManager.Target.GetDistance < 10
                    && ObjectManager.Pet.Guid == 780 && ObjectManager.Pet.Focus > 29
                    && FroststormBreathTimer.IsReady && ObjectManager.Pet.IsAlive)
                {
                    Lua.RunMacroText("/cast Froststorm Breath");
                    Logging.WriteFight("Launch Chimera Pet AoE");
                    FroststormBreathTimer = new Timer(1000*8);
                    return;
                }
                if (_mySettings.UseWormPet && ObjectManager.Target.GetDistance < 10
                    && ObjectManager.Pet.Guid == 784 && ObjectManager.Pet.Focus > 29
                    && BurrowAttackTimer.IsReady && ObjectManager.Pet.IsAlive)
                {
                    Lua.RunMacroText("/cast Burrow Attack");
                    Logging.WriteFight("Launch Worm Pet AoE");
                    BurrowAttackTimer = new Timer(1000*20);
                }
                return;
            }
            if (KillCommand.KnownSpell && KillCommand.IsSpellUsable && KillCommand.IsHostileDistanceGood
                && _mySettings.UseKillCommand && ObjectManager.Target.GetDistance < 41)
            {
                KillCommand.Launch();
                return;
            }
            if (ArcaneShot.KnownSpell && ArcaneShot.IsSpellUsable && ArcaneShot.IsHostileDistanceGood
                && _mySettings.UseArcaneShot && ObjectManager.Me.FocusPercentage > 59)
            {
                ArcaneShot.Launch();
                return;
            }
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell
                && _mySettings.UseArcaneTorrentForResource)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (CobraShot.KnownSpell && CobraShot.IsSpellUsable && CobraShot.IsHostileDistanceGood
                && _mySettings.UseCobraShot && ObjectManager.Me.FocusPercentage < 60)
            {
                CobraShot.Launch();
                return;
            }
            if (SteadyShot.KnownSpell && SteadyShot.IsSpellUsable && SteadyShot.IsHostileDistanceGood
                && ObjectManager.Me.FocusPercentage < 60 && (!CobraShot.KnownSpell || !_mySettings.UseCobraShot))
            {
                SteadyShot.Launch();
            }
        }

        private void Patrolling()
        {
            if (!ObjectManager.Me.IsMounted)
            {
                Buff();
                Heal();
            }
        }

        #region Nested type: HunterBeastMasterySettings

        [Serializable]
        public class HunterBeastMasterySettings : Settings
        {
            public bool DoAvoidMelee = false;
            public int DoAvoidMeleeDistance = 0;
            public bool UseAMurderofCrows = true;
            public bool UseAlchFlask = true;
            public bool UseArcaneShot = true;
            public bool UseArcaneTorrentForDecast = true;
            public int UseArcaneTorrentForDecastAtPercentage = 100;
            public bool UseArcaneTorrentForResource = true;
            public bool UseAspectoftheHawk = true;
            public bool UseBarrage = true;
            public bool UseBerserking = true;
            public bool UseBestialWrath = true;
            public bool UseBindingShot = true;
            public bool UseBlinkStrike = true;
            public bool UseBloodFury = true;
            public bool UseCamouflage = false;
            public bool UseChimeraPet = false;
            public bool UseCobraShot = true;
            public bool UseCombatRevive = true;
            public bool UseConcussiveShot = true;
            public bool UseCoreHoundPet = false;
            public bool UseDeterrance = true;
            public bool UseDireBeast = true;
            public bool UseDisengage = true;
            public bool UseEngGlove = true;
            public bool UseExhilaration = true;
            public bool UseExplosiveTrap = true;
            public bool UseFeedPet = true;
            public bool UseFeignDeath = true;
            public bool UseFervor = true;
            public bool UseFocusFire = false;
            public bool UseFreezingTrap = true;
            public bool UseGiftoftheNaaru = true;
            public int UseGiftoftheNaaruAtPercentage = 80;
            public bool UseGlaiveToss = true;
            public bool UseHuntersMark = true;
            public bool UseIceTrap = true;
            public bool UseIntimidation = true;
            public bool UseKillCommand = true;
            public bool UseKillShot = true;
            public bool UseLifeblood = true;
            public bool UseLowCombat = true;
            public bool UseLynxRush = true;
            public bool UseMendPet = true;
            public bool UseMisdirection = true;
            public bool UseMultiShot = true;
            public bool UsePet1 = true;
            public bool UsePet2 = false;
            public bool UsePet3 = false;
            public bool UsePet4 = false;
            public bool UsePet5 = false;
            public bool UsePowershot = true;
            public bool UseRapidFire = true;
            public bool UseReadiness = true;
            public bool UseRevivePet = true;
            public bool UseScatterShot = true;
            public bool UseSerpentSting = true;
            public bool UseSilencingShot = true;
            public bool UseSpiritBeastPet = false;
            public bool UseStampede = true;
            public bool UseStoneform = true;
            public int UseStoneformAtPercentage = 80;
            public bool UseTrinketOne = true;
            public bool UseTrinketTwo = true;
            public bool UseWarStomp = true;
            public int UseWarStompAtPercentage = 80;
            public bool UseWormPet = false;
            public bool UseWyvernSting = true;

            public HunterBeastMasterySettings()
            {
                ConfigWinForm(new Point(500, 400), "Hunter BeastMastery Settings");
                /* Professions & Racials */
                AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials");
                AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
                AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
                AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
                AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
                AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
                AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
                /* Hunter Buffs */
                AddControlInWinForm("Use Aspect of the Hawk", "UseAspectoftheHawk", "Hunter Buffs");
                AddControlInWinForm("Use Camouflage", "UseCamouflage", "Hunter Buffs");
                AddControlInWinForm("Use Feign Death", "UseFeignDeath", "Hunter Buffs");
                AddControlInWinForm("Use Hunter's Mark", "UseHuntersMark", "Hunter Buffs");
                AddControlInWinForm("Use Misdirection", "UseMisdirection", "Hunter Buffs");
                /* Offensive Spell */
                AddControlInWinForm("Use Arcane Shot", "UseArcaneShot", "Offensive Spell");
                AddControlInWinForm("Use Pet in Slot 1", "UsePet1", "Offensive Spell");
                AddControlInWinForm("Use Pet in Slot 2", "UsePet2", "Offensive Spell");
                AddControlInWinForm("Use Pet in Slot 3", "UsePet3", "Offensive Spell");
                AddControlInWinForm("Use Pet in Slot 4", "UsePet4", "Offensive Spell");
                AddControlInWinForm("Use Pet in Slot 5", "UsePet5", "Offensive Spell");
                AddControlInWinForm("Use Cobra Shot", "UseCobraShot", "Offensive Spell");
                AddControlInWinForm("Use Explosive Trap", "UseExplosiveTrap", "Offensive Spell");
                AddControlInWinForm("Use Kill Command", "UseKillCommand", "Offensive Spell");
                AddControlInWinForm("Use KillShot", "UseKillShot", "Offensive Spell");
                AddControlInWinForm("Use Multi-Shot", "UseMultiShot", "Offensive Spell");
                AddControlInWinForm("Use Serpent Sting", "UseSerpentSting", "Offensive Spell");
                /* Offensive Cooldown */
                AddControlInWinForm("Use A Murder of Crows", "UseAMurderofCrows", "Offensive Cooldown");
                AddControlInWinForm("Use Barrage", "UseBarrage", "Offensive Cooldown");
                AddControlInWinForm("Use Bestial Wrath", "UseBestialWrath", "Offensive Cooldown");
                AddControlInWinForm("Use Blink Strike", "UseBlinkStrike", "Offensive Cooldown");
                AddControlInWinForm("Use Dire Beast", "UseDireBeast", "Offensive Cooldown");
                AddControlInWinForm("Use Fervor", "UseFervor", "Offensive Cooldown");
                AddControlInWinForm("Use Focus Fire", "UseFocusFire", "Offensive Cooldown");
                AddControlInWinForm("Use Glaive Toss", "UseGlaiveToss", "Offensive Cooldown");
                AddControlInWinForm("Use Lynx Rush", "UseLynxRush", "Offensive Cooldown");
                AddControlInWinForm("Use Powershot", "UsePowershot", "Offensive Cooldown");
                AddControlInWinForm("Use Rapid Fire", "UseRapidFire", "Offensive Cooldown");
                AddControlInWinForm("Use Readiness", "UseReadiness", "Offensive Cooldown");
                AddControlInWinForm("Use Stampede", "UseStampede", "Offensive Cooldown");
                /* Defensive Cooldown */
                AddControlInWinForm("Use Binding Shot", "UseBindingShot", "Defensive Cooldown");
                AddControlInWinForm("Use Concussive Shot", "UseConcussiveShot", "Defensive Cooldown");
                AddControlInWinForm("Use Deterrance", "UseDeterrance", "Defensive Cooldown");
                AddControlInWinForm("Use Disengage", "UseDisengage", "Defensive Cooldown");
                AddControlInWinForm("Use Freezing Trap", "UseFreezingTrap", "Defensive Cooldown");
                AddControlInWinForm("Use Ice Trap", "UseIceTrap", "Defensive Cooldown");
                AddControlInWinForm("Use Intimidation", "UseIntimidation", "Defensive Cooldown");
                AddControlInWinForm("Use Scatter Shot", "UseScatterShot", "Defensive Cooldown");
                AddControlInWinForm("Use Silencing Shot", "UseSilencingShot", "Defensive Cooldown");
                AddControlInWinForm("Use Wyvern Sting", "UseWyvernSting", "Defensive Cooldown");
                /* Healing Spell */
                AddControlInWinForm("Use Exhilaration", "UseExhilaration", "Healing Spell");
                AddControlInWinForm("Use Feed Pet", "UseFeedPet", "Healing Spell");
                AddControlInWinForm("Use Mend Pet", "UseMendPet", "Healing Spell");
                AddControlInWinForm("Use Revive Pet", "UseRevivePet", "Healing Spell");
                /* Game Settings */
                AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
                AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
                AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
                AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
                AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
                AddControlInWinForm("Use Core Hound Pet", "UseCoreHoundPet", "Game Settings");
                AddControlInWinForm("Use Worm Pet", "UseWormPet", "Game Settings");
                AddControlInWinForm("Use Chimera Pet", "UseChimeraPet", "Game Settings");
                AddControlInWinForm("Use Spirit Beast Pet", "UseSpiritBeastPet", "Game Settings");
                AddControlInWinForm("Use Revive Pet in Combat", "UseCombatRevive", "Game Settings");
                AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
                AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
            }

            public static HunterBeastMasterySettings CurrentSetting { get; set; }

            public static HunterBeastMasterySettings GetSettings()
            {
                string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Hunter_BeastMastery.xml";
                if (File.Exists(currentSettingsFile))
                {
                    return
                        CurrentSetting = Load<HunterBeastMasterySettings>(currentSettingsFile);
                }
                return new HunterBeastMasterySettings();
            }
        }

        #endregion
    }

    public class HunterSurvival
    {
        private readonly HunterSurvivalSettings _mySettings = HunterSurvivalSettings.GetSettings();

        #region General Timers & Variables

        private readonly WoWItem _firstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
        private readonly WoWItem _secondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);
        private Timer _engineeringTimer = new Timer(0);
        public int LC = 0;
        private Timer _onCd = new Timer(0);

        #endregion

        #region Professions & Racials

        public readonly Spell Alchemy = new Spell("Alchemy");
        public readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
        public readonly Spell Berserking = new Spell("Berserking");
        public readonly Spell BloodFury = new Spell("Blood Fury");
        public readonly Spell Engineering = new Spell("Engineering");
        public readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
        public readonly Spell Lifeblood = new Spell("Lifeblood");
        public readonly Spell Stoneform = new Spell("Stoneform");
        public readonly Spell WarStomp = new Spell("War Stomp");

        #endregion

        #region Hunter Buffs

        public readonly Spell AspectoftheHawk = new Spell("Aspect of the Hawk");
        public readonly Spell Camouflage = new Spell("Camouflage");
        public readonly Spell FeignDeath = new Spell("Feign Death");
        public readonly Spell HuntersMark = new Spell("Hunter's Mark");
        public readonly Spell Misdirection = new Spell("Misdirection");

        #endregion

        #region Offensive Spell

        public readonly Spell ArcaneShot = new Spell("Arcane Shot");
        public readonly Spell BlackArrow = new Spell("Black Arrow");
        public readonly Spell CallPet1 = new Spell("Call Pet 1");
        public readonly Spell CallPet2 = new Spell("Call Pet 2");
        public readonly Spell CallPet3 = new Spell("Call Pet 3");
        public readonly Spell CallPet4 = new Spell("Call Pet 4");
        public readonly Spell CallPet5 = new Spell("Call Pet 5");
        public readonly Spell CobraShot = new Spell("Cobra Shot");
        public readonly Spell ExplosiveShot = new Spell("Explosive Shot");
        public readonly Spell ExplosiveTrap = new Spell("Explosive Trap");
        public readonly Spell KillShot = new Spell("Kill Shot");
        public readonly Spell MultiShot = new Spell("Multi-Shot");
        public readonly Spell SerpentSting = new Spell("Serpent Sting");
        public readonly Spell SteadyShot = new Spell("Steady Shot");
        private Timer _serpentStingTimer = new Timer(0);

        #endregion

        #region Offensive Cooldown

        public readonly Spell AMurderofCrows = new Spell("A Murder of Crows");
        public readonly Spell Barrage = new Spell("Barrage");
        public readonly Spell BlinkStrike = new Spell("Blink Strike");
        public readonly Spell DireBeast = new Spell("Dire Beast");
        public readonly Spell Fervor = new Spell("Fervor");
        public readonly Spell GlaiveToss = new Spell("Glaive Toss");
        public readonly Spell LynxRush = new Spell("Lynx Rush");
        public readonly Spell Powershot = new Spell("Powershot");
        public readonly Spell RapidFire = new Spell("Rapid Fire");
        public readonly Spell Readiness = new Spell("Readiness");
        public readonly Spell Stampede = new Spell("Stampede");
        private Timer _direBeastTimer = new Timer(0);

        #endregion

        #region Defensive Cooldown

        public readonly Spell BindingShot = new Spell("Binding Shot");
        public readonly Spell ConcussiveShot = new Spell("Concussive Shot");
        public readonly Spell Deterrance = new Spell("Deterrance");
        public readonly Spell Disengage = new Spell("Disengage");
        public readonly Spell FreezingTrap = new Spell("Freezing Trap");
        public readonly Spell IceTrap = new Spell("Ice Trap");
        public readonly Spell ScatterShot = new Spell("Scatter Shot");
        public readonly Spell SilencingShot = new Spell("Silencing Shot");
        public readonly Spell WyvernSting = new Spell("Wyvern Sting");

        #endregion

        #region Healing Spell

        public readonly Spell Exhilaration = new Spell("Exhilaration");
        public readonly Spell FeedPet = new Spell("Feed Pet");
        public readonly Spell MendPet = new Spell("Mend Pet");
        public readonly Spell RevivePet = new Spell("Revive Pet");
        private Timer _mendPetTimer = new Timer(0);

        #endregion

        public HunterSurvival()
        {
            Main.InternalRange = 30.0f;
            UInt64 lastTarget = 0;

            while (Main.InternalLoop)
            {
                try
                {
                    if (!ObjectManager.Me.IsDeadMe)
                    {
                        if (!ObjectManager.Me.IsMounted)
                        {
                            if (Fight.InFight && ObjectManager.Me.Target > 0)
                            {
                                if (ObjectManager.Me.Target != lastTarget
                                    && SerpentSting.IsHostileDistanceGood)
                                {
                                    Pull();
                                    lastTarget = ObjectManager.Me.Target;
                                }

                                if (ObjectManager.Target.Level < 70 && ObjectManager.Me.Level > 84
                                    && _mySettings.UseLowCombat)
                                {
                                    LC = 1;
                                    if (ObjectManager.Target.GetDistance < 41)
                                        LowCombat();
                                }
                                else
                                {
                                    LC = 0;
                                    if (ObjectManager.Target.GetDistance < 41)
                                        Combat();
                                }
                            }
                            else
                            {
                                if (!ObjectManager.Me.IsCast)
                                    Patrolling();
                            }
                        }
                    }
                    Thread.Sleep(500);
                }
                catch
                {
                }
                Thread.Sleep(250);
            }
        }

        private void Pull()
        {
            if (HuntersMark.KnownSpell && HuntersMark.IsSpellUsable && _mySettings.UseHuntersMark
                && HuntersMark.IsHostileDistanceGood && !HuntersMark.TargetHaveBuff && LC != 1)
                HuntersMark.Launch();

            if (ObjectManager.Pet.IsAlive)
            {
                Lua.RunMacroText("/petattack");
                Logging.WriteFight("Launch Pet Attack");
            }

            if (ObjectManager.Pet.IsAlive && _mySettings.UseMisdirection && Misdirection.KnownSpell
                && Misdirection.IsSpellUsable)
            {
                Lua.RunMacroText("/target pet");
                Thread.Sleep(200);
                Misdirection.Launch();
                Thread.Sleep(200);
            }

            if (SerpentSting.KnownSpell && SerpentSting.IsSpellUsable && SerpentSting.IsHostileDistanceGood
                && _mySettings.UseSerpentSting)
            {
                SerpentSting.Launch();
                }
        }

        private void LowCombat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            DefenseCycle();
            Heal();

            if (GlaiveToss.KnownSpell && GlaiveToss.IsSpellUsable && GlaiveToss.IsHostileDistanceGood
                && _mySettings.UseGlaiveToss)
            {
                GlaiveToss.Launch();
                return;
            }
            if (ArcaneShot.IsSpellUsable && ArcaneShot.IsHostileDistanceGood && ArcaneShot.KnownSpell
                && _mySettings.UseArcaneShot)
            {
                ArcaneShot.Launch();
                return;
            }
            if (CobraShot.KnownSpell && CobraShot.IsSpellUsable && CobraShot.IsHostileDistanceGood
                && _mySettings.UseCobraShot)
            {
                CobraShot.Launch();
                return;
            }
            if (SteadyShot.KnownSpell && SteadyShot.IsSpellUsable && SteadyShot.IsHostileDistanceGood
                && ObjectManager.Me.FocusPercentage < 60 && (!CobraShot.KnownSpell || !_mySettings.UseCobraShot))
            {
                SteadyShot.Launch();
                return;
            }
            if (ExplosiveTrap.KnownSpell && ExplosiveTrap.IsSpellUsable && ExplosiveTrap.IsHostileDistanceGood
                && _mySettings.UseExplosiveTrap)
            {
                ExplosiveTrap.Launch();
            }
        }

        private void Combat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            if (_onCd.IsReady)
                DefenseCycle();
            DPSCycle();
            Heal();
            Decast();
            DPSCycle();
            DPSBurst();
            DPSCycle();
        }

        private void Buff()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            Pet();

            if (_mySettings.UseAspectoftheHawk && AspectoftheHawk.KnownSpell && AspectoftheHawk.IsSpellUsable
                && !AspectoftheHawk.HaveBuff && !ObjectManager.Me.HaveBuff(109260))
            {
                AspectoftheHawk.Launch();
                return;
            }

            if (_mySettings.UseCamouflage && Camouflage.KnownSpell && Camouflage.IsSpellUsable && !Camouflage.HaveBuff
                && !ObjectManager.Me.InCombat)
            {
                Camouflage.Launch();
                return;
            }

            if (_mySettings.UseAlchFlask && !ObjectManager.Me.HaveBuff(79638) && !ObjectManager.Me.HaveBuff(79640) && !ObjectManager.Me.HaveBuff(79639)
                && !ItemsManager.IsItemOnCooldown(75525) && ItemsManager.GetItemCountByIdLUA(75525) > 0)
                ItemsManager.UseItem(75525);
        }

        private void Pet()
        {
            if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                && CallPet1.KnownSpell && CallPet1.IsSpellUsable && _mySettings.UsePet1 && ObjectManager.Me.InCombat)
            {
                CallPet1.Launch();
                Thread.Sleep(1000);
            }
            else if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                     && CallPet2.KnownSpell && CallPet2.IsSpellUsable && _mySettings.UsePet2 && ObjectManager.Me.InCombat)
            {
                CallPet2.Launch();
                Thread.Sleep(1000);
            }
            else if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                     && CallPet3.KnownSpell && CallPet3.IsSpellUsable && _mySettings.UsePet3 && ObjectManager.Me.InCombat)
            {
                CallPet3.Launch();
                Thread.Sleep(1000);
            }
            else if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                     && CallPet4.KnownSpell && CallPet4.IsSpellUsable && _mySettings.UsePet4 && ObjectManager.Me.InCombat)
            {
                CallPet4.Launch();
                Thread.Sleep(1000);
            }
            else
            {
                if (!ObjectManager.Me.IsCast && (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                    && CallPet5.KnownSpell && CallPet5.IsSpellUsable && _mySettings.UsePet5 && ObjectManager.Me.InCombat)
                {
                    CallPet5.Launch();
                    Thread.Sleep(1000);
                }
            }

            if (!ObjectManager.Me.IsCast && (!ObjectManager.Pet.IsAlive || ObjectManager.Pet.Guid == 0)
                && RevivePet.KnownSpell && RevivePet.IsSpellUsable && _mySettings.UseRevivePet
                && _mySettings.UseCombatRevive && ObjectManager.Target.HealthPercent > 10 && ObjectManager.Me.InCombat)
            {
                RevivePet.Launch();
                Thread.Sleep(1000);
                return;
            }
            if (!ObjectManager.Me.IsCast && !ObjectManager.Pet.IsAlive
                && RevivePet.KnownSpell && RevivePet.IsSpellUsable && _mySettings.UseRevivePet
                && !ObjectManager.Me.InCombat)
            {
                RevivePet.Launch();
                Thread.Sleep(1000);
            }
        }

        private void AvoidMelee()
        {
            if (ObjectManager.Target.GetDistance < _mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
            {
                Logging.WriteFight("Too Close. Moving Back");
                var maxTimeTimer = new Timer(1000*2);
                MovementsAction.MoveBackward(true);
                while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                    Thread.Sleep(300);
                MovementsAction.MoveBackward(false);
                if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
                {
                    MovementsAction.MoveForward(true);
                    Thread.Sleep(1000);
                    MovementsAction.MoveForward(false);
                    MovementManager.Face(ObjectManager.Target.Position);
                }
            }
        }

        private void DefenseCycle()
        {
            if (ObjectManager.Me.HealthPercent < 20 && _mySettings.UseFeignDeath
                && FeignDeath.KnownSpell && FeignDeath.IsSpellUsable)
            {
                FeignDeath.Launch();
                Thread.Sleep(5000);
                if (ObjectManager.Pet.Health == 0 || ObjectManager.Pet.Guid == 0)
                    return;
                Thread.Sleep(5000);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 50 && _mySettings.UseDeterrance
                && Deterrance.KnownSpell && Deterrance.IsSpellUsable)
            {
                Deterrance.Launch();
                Thread.Sleep(200);
                return;
            }
            if (_mySettings.UseFreezingTrap && ObjectManager.GetNumberAttackPlayer() > 1 && FreezingTrap.KnownSpell
                && FreezingTrap.IsSpellUsable && ObjectManager.Target.GetDistance > 10)
            {
                FreezingTrap.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 80 && _mySettings.UseIceTrap
                && IceTrap.KnownSpell && IceTrap.IsSpellUsable && ObjectManager.Target.GetDistance < 10
                && Disengage.KnownSpell && Disengage.IsSpellUsable && _mySettings.UseDisengage)
            {
                IceTrap.Launch();
                Thread.Sleep(1000);
                MovementsAction.Jump();
                Disengage.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 80 && _mySettings.UseConcussiveShot
                && ConcussiveShot.KnownSpell && ConcussiveShot.IsSpellUsable && ConcussiveShot.IsHostileDistanceGood
                && Disengage.KnownSpell && Disengage.IsSpellUsable && _mySettings.UseDisengage)
            {
                ConcussiveShot.Launch();
                Thread.Sleep(1000);
                MovementsAction.Jump();
                Disengage.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 80 && _mySettings.UseBindingShot
                && BindingShot.KnownSpell && BindingShot.IsSpellUsable && BindingShot.IsHostileDistanceGood
                && Disengage.KnownSpell && Disengage.IsSpellUsable && _mySettings.UseDisengage)
            {
                BindingShot.Launch();
                Thread.Sleep(1000);
                MovementsAction.Jump();
                Disengage.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseWarStompAtPercentage && WarStomp.IsSpellUsable &&
                WarStomp.KnownSpell
                && _mySettings.UseWarStomp)
            {
                WarStomp.Launch();
                _onCd = new Timer(1000*2);
                return;
            }
            if (ObjectManager.Me.HealthPercent <= _mySettings.UseStoneformAtPercentage && Stoneform.IsSpellUsable &&
                Stoneform.KnownSpell
                && _mySettings.UseStoneform)
            {
                Stoneform.Launch();
                _onCd = new Timer(1000*8);
            }
        }

        private void Heal()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (ObjectManager.Me.HealthPercent <= _mySettings.UseGiftoftheNaaruAtPercentage && GiftoftheNaaru.KnownSpell &&
                GiftoftheNaaru.IsSpellUsable
                && _mySettings.UseGiftoftheNaaru)
            {
                GiftoftheNaaru.Launch();
                return;
            }
            if (Exhilaration.KnownSpell && Exhilaration.IsSpellUsable
                && _mySettings.UseExhilaration && ObjectManager.Me.HealthPercent < 70)
            {
                Exhilaration.Launch();
                return;
            }
            if (ObjectManager.Pet.Health > 0 && ObjectManager.Pet.HealthPercent < 50
                && FeedPet.KnownSpell && FeedPet.IsSpellUsable && _mySettings.UseFeedPet
                && !ObjectManager.Me.InCombat)
            {
                FeedPet.Launch();
                return;
            }
            if (ObjectManager.Pet.Health > 0 && ObjectManager.Pet.HealthPercent < 80
                && MendPet.KnownSpell && MendPet.IsSpellUsable && _mySettings.UseMendPet
                && _mendPetTimer.IsReady)
            {
                MendPet.Launch();
                _mendPetTimer = new Timer(1000*10);
            }
        }

        private void Decast()
        {
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell && ObjectManager.Target.GetDistance < 8
                && ObjectManager.Me.HealthPercent <= _mySettings.UseArcaneTorrentForDecastAtPercentage
                && _mySettings.UseArcaneTorrentForDecast && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && SilencingShot.IsHostileDistanceGood
                && SilencingShot.KnownSpell && SilencingShot.IsSpellUsable && _mySettings.UseSilencingShot)
            {
                SilencingShot.Launch();
                return;
            }
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && ScatterShot.IsHostileDistanceGood
                && ScatterShot.KnownSpell && ScatterShot.IsSpellUsable && _mySettings.UseScatterShot)
            {
                ScatterShot.Launch();
                return;
            }
            if (ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && _mySettings.UseWyvernSting
                && WyvernSting.KnownSpell && WyvernSting.IsSpellUsable && WyvernSting.IsHostileDistanceGood)
            {
                WyvernSting.Launch();
            }
        }

        private void DPSBurst()
        {
            if (_mySettings.UseTrinketOne && !ItemsManager.IsItemOnCooldown(_firstTrinket.Entry) && ItemsManager.IsUsableItemById(_firstTrinket.Entry))
            {
                ItemsManager.UseItem(_firstTrinket.Name);
                Logging.WriteFight("Use First Trinket Slot");
            }

            if (_mySettings.UseTrinketTwo && !ItemsManager.IsItemOnCooldown(_secondTrinket.Entry) && ItemsManager.IsUsableItemById(_secondTrinket.Entry))
            {
                ItemsManager.UseItem(_secondTrinket.Name);
                Logging.WriteFight("Use Second Trinket Slot");
                return;
            }
            if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseBerserking)
            {
                Berserking.Launch();
                return;
            }
            if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseBloodFury)
            {
                BloodFury.Launch();
                return;
            }
            if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseLifeblood)
            {
                Lifeblood.Launch();
                return;
            }
            if (_engineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseEngGlove)
            {
                Logging.WriteFight("Use Engineering Gloves.");
                Lua.RunMacroText("/use 10");
                _engineeringTimer = new Timer(1000*60);
                return;
            }
            if (AMurderofCrows.KnownSpell && AMurderofCrows.IsSpellUsable && AMurderofCrows.IsHostileDistanceGood
                && _mySettings.UseAMurderofCrows && !AMurderofCrows.TargetHaveBuff)
            {
                AMurderofCrows.Launch();
                return;
            }
            if (Barrage.KnownSpell && Barrage.IsSpellUsable && _mySettings.UseBarrage && Barrage.IsHostileDistanceGood)
            {
                Barrage.Launch();
                return;
            }
            if (BlinkStrike.KnownSpell && BlinkStrike.IsSpellUsable && ObjectManager.Pet.IsAlive
                && _mySettings.UseBlinkStrike && ObjectManager.Target.GetDistance < 41)
            {
                BlinkStrike.Launch();
                return;
            }
            if (DireBeast.KnownSpell && DireBeast.IsSpellUsable && _mySettings.UseDireBeast
                && DireBeast.IsHostileDistanceGood && _direBeastTimer.IsReady)
            {
                DireBeast.Launch();
                _direBeastTimer = new Timer(1000*15);
                return;
            }
            if (Fervor.KnownSpell && Fervor.IsSpellUsable && ObjectManager.Me.Focus < 50
                && _mySettings.UseFervor)
            {
                Fervor.Launch();
                return;
            }
            if (GlaiveToss.KnownSpell && GlaiveToss.IsSpellUsable && _mySettings.UseGlaiveToss &&
                GlaiveToss.IsHostileDistanceGood)
            {
                GlaiveToss.Launch();
                return;
            }
            if (LynxRush.KnownSpell && LynxRush.IsSpellUsable && _mySettings.UseLynxRush &&
                ObjectManager.Target.GetDistance < 41)
            {
                LynxRush.Launch();
                return;
            }
            if (Powershot.KnownSpell && Powershot.IsSpellUsable && _mySettings.UsePowershot &&
                Powershot.IsHostileDistanceGood)
            {
                Powershot.Launch();
                return;
            }
            if (Stampede.KnownSpell && Stampede.IsSpellUsable && _mySettings.UseStampede &&
                Stampede.IsHostileDistanceGood)
            {
                Stampede.Launch();
                return;
            }
            if (RapidFire.KnownSpell && RapidFire.IsSpellUsable && _mySettings.UseRapidFire
                && ObjectManager.Target.GetDistance < 41)
            {
                RapidFire.Launch();
                return;
            }
            if (Readiness.KnownSpell && Readiness.IsSpellUsable && _mySettings.UseReadiness)
            {
                Readiness.Launch();
            }
        }

        private void DPSCycle()
        {
            if (SerpentSting.IsSpellUsable && SerpentSting.IsHostileDistanceGood && SerpentSting.KnownSpell
                && _mySettings.UseSerpentSting && !SerpentSting.TargetHaveBuff)
            {
                SerpentSting.Launch();
                _serpentStingTimer = new Timer(1000*12);
                return;
            }
            if (CobraShot.KnownSpell && CobraShot.IsSpellUsable && CobraShot.IsHostileDistanceGood
                && _mySettings.UseCobraShot && _serpentStingTimer.IsReady)
            {
                CobraShot.Launch();
                _serpentStingTimer = new Timer(1000*12);
                return;
            }
            if (KillShot.KnownSpell && KillShot.IsSpellUsable && KillShot.IsHostileDistanceGood
                && _mySettings.UseKillShot)
            {
                KillShot.Launch();
                return;
            }
            if (ObjectManager.GetNumberAttackPlayer() > 4 && _mySettings.UseMultiShot && _mySettings.UseExplosiveTrap
                && _mySettings.UseExplosiveShot)
            {
                if (MultiShot.KnownSpell && MultiShot.IsSpellUsable && MultiShot.IsHostileDistanceGood)
                {
                    MultiShot.Launch();
                    return;
                }
                if (ExplosiveTrap.KnownSpell && ExplosiveTrap.IsSpellUsable && ObjectManager.Target.GetDistance < 10)
                {
                    ExplosiveTrap.Launch();
                    return;
                }
                if (ExplosiveShot.KnownSpell && ExplosiveShot.IsSpellUsable && ExplosiveShot.IsHostileDistanceGood)
                {
                    ExplosiveShot.Launch();
                    return;
                }
                return;
            }
            if (ExplosiveTrap.KnownSpell && ExplosiveTrap.IsSpellUsable && ObjectManager.Target.GetDistance < 10
                && _mySettings.UseExplosiveTrap && ObjectManager.GetNumberAttackPlayer() < 4 &&
                ObjectManager.GetNumberAttackPlayer() > 1)
            {
                ExplosiveTrap.Launch();
                return;
            }
            if (BlackArrow.KnownSpell && BlackArrow.IsSpellUsable && BlackArrow.IsHostileDistanceGood
                && _mySettings.UseBlackArrow)
            {
                BlackArrow.Launch();
                return;
            }
            if (ExplosiveShot.KnownSpell && ExplosiveShot.IsSpellUsable && ExplosiveShot.IsHostileDistanceGood
                && _mySettings.UseExplosiveShot)
            {
                ExplosiveShot.Launch();
                return;
            }
            if (MultiShot.KnownSpell && MultiShot.IsSpellUsable && MultiShot.IsHostileDistanceGood
                && _mySettings.UseMultiShot && ObjectManager.Me.FocusPercentage > 79
                && ObjectManager.GetNumberAttackPlayer() < 4 && ObjectManager.GetNumberAttackPlayer() > 1)
            {
                MultiShot.Launch();
                return;
            }
            if (ArcaneShot.KnownSpell && ArcaneShot.IsSpellUsable && ArcaneShot.IsHostileDistanceGood
                && _mySettings.UseArcaneShot && ObjectManager.Me.FocusPercentage > 79)
            {
                ArcaneShot.Launch();
                return;
            }
            if (ArcaneTorrent.IsSpellUsable && ArcaneTorrent.KnownSpell
                && _mySettings.UseArcaneTorrentForResource)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (CobraShot.KnownSpell && CobraShot.IsSpellUsable && CobraShot.IsHostileDistanceGood
                && _mySettings.UseCobraShot && ObjectManager.Me.FocusPercentage < 80)
            {
                CobraShot.Launch();
                return;
            }
            if (SteadyShot.KnownSpell && SteadyShot.IsSpellUsable && SteadyShot.IsHostileDistanceGood
                && ObjectManager.Me.FocusPercentage < 60 && (!CobraShot.KnownSpell || !_mySettings.UseCobraShot))
            {
                SteadyShot.Launch();
            }
        }

        private void Patrolling()
        {
            if (ObjectManager.Me.IsMounted) return;
            Buff();
            Heal();
        }

        #region Nested type: HunterSurvivalSettings

        [Serializable]
        public class HunterSurvivalSettings : Settings
        {
            public bool DoAvoidMelee = false;
            public int DoAvoidMeleeDistance = 0;
            public bool UseAMurderofCrows = true;
            public bool UseAlchFlask = true;
            public bool UseArcaneShot = true;
            public bool UseArcaneTorrentForDecast = true;
            public int UseArcaneTorrentForDecastAtPercentage = 100;
            public bool UseArcaneTorrentForResource = true;
            public bool UseAspectoftheHawk = true;
            public bool UseBarrage = true;
            public bool UseBerserking = true;
            public bool UseBindingShot = true;
            public bool UseBlackArrow = true;
            public bool UseBlinkStrike = true;
            public bool UseBloodFury = true;
            public bool UseCamouflage = false;
            public bool UseCobraShot = true;
            public bool UseCombatRevive = true;
            public bool UseConcussiveShot = true;
            public bool UseDeterrance = true;
            public bool UseDireBeast = true;
            public bool UseDisengage = true;
            public bool UseEngGlove = true;
            public bool UseExhilaration = true;
            public bool UseExplosiveShot = true;
            public bool UseExplosiveTrap = true;
            public bool UseFeedPet = true;
            public bool UseFeignDeath = true;
            public bool UseFervor = true;
            public bool UseFreezingTrap = true;
            public bool UseGiftoftheNaaru = true;
            public int UseGiftoftheNaaruAtPercentage = 80;
            public bool UseGlaiveToss = true;
            public bool UseHuntersMark = true;
            public bool UseIceTrap = true;
            public bool UseKillShot = true;
            public bool UseLifeblood = true;
            public bool UseLowCombat = true;
            public bool UseLynxRush = true;
            public bool UseMendPet = true;
            public bool UseMisdirection = true;
            public bool UseMultiShot = true;
            public bool UsePet1 = true;
            public bool UsePet2 = false;
            public bool UsePet3 = false;
            public bool UsePet4 = false;
            public bool UsePet5 = false;
            public bool UsePowershot = true;
            public bool UseRapidFire = true;
            public bool UseReadiness = true;
            public bool UseRevivePet = true;
            public bool UseScatterShot = true;
            public bool UseSerpentSting = true;
            public bool UseSilencingShot = true;
            public bool UseStampede = true;
            public bool UseStoneform = true;
            public int UseStoneformAtPercentage = 80;
            public bool UseTrinketOne = true;
            public bool UseTrinketTwo = true;
            public bool UseWarStomp = true;
            public int UseWarStompAtPercentage = 80;
            public bool UseWyvernSting = true;

            public HunterSurvivalSettings()
            {
                ConfigWinForm(new Point(500, 400), "Hunter Survival Settings");
                /* Professions & Racials */
                AddControlInWinForm("Use Arcane Torrent for Interrupt", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Arcane Torrent for Resource", "UseArcaneTorrentForResource", "Professions & Racials");
                AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
                AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
                AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
                AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
                AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
                AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
                /* Hunter Buffs */
                AddControlInWinForm("Use Aspect of the Hawk", "UseAspectoftheHawk", "Hunter Buffs");
                AddControlInWinForm("Use Camouflage", "UseCamouflage", "Hunter Buffs");
                AddControlInWinForm("Use Feign Death", "UseFeignDeath", "Hunter Buffs");
                AddControlInWinForm("Use Hunter's Mark", "UseHuntersMark", "Hunter Buffs");
                AddControlInWinForm("Use Misdirection", "UseMisdirection", "Hunter Buffs");
                /* Offensive Spell */
                AddControlInWinForm("Use Arcane Shot", "UseArcaneShot", "Offensive Spell");
                AddControlInWinForm("Use Black Arrow", "UseBlackArrow", "Offensive Spell");
                AddControlInWinForm("Use Pet in Slot 1", "UsePet1", "Offensive Spell");
                AddControlInWinForm("Use Pet in Slot 2", "UsePet2", "Offensive Spell");
                AddControlInWinForm("Use Pet in Slot 3", "UsePet3", "Offensive Spell");
                AddControlInWinForm("Use Pet in Slot 4", "UsePet4", "Offensive Spell");
                AddControlInWinForm("Use Pet in Slot 5", "UsePet5", "Offensive Spell");
                AddControlInWinForm("Use Cobra Shot", "UseCobraShot", "Offensive Spell");
                AddControlInWinForm("Use Explosive Shot", "UseExplosiveShot", "Offensive Spell");
                AddControlInWinForm("Use Explosive Trap", "UseExplosiveTrap", "Offensive Spell");
                AddControlInWinForm("Use KillShot", "UseKillShot", "Offensive Spell");
                AddControlInWinForm("Use Multi-Shot", "UseMultiShot", "Offensive Spell");
                AddControlInWinForm("Use Serpent Sting", "UseSerpentSting", "Offensive Spell");
                /* Offensive Cooldown */
                AddControlInWinForm("Use A Murder of Crows", "UseAMurderofCrows", "Offensive Cooldown");
                AddControlInWinForm("Use Barrage", "UseBarrage", "Offensive Cooldown");
                AddControlInWinForm("Use Blink Strike", "UseBlinkStrike", "Offensive Cooldown");
                AddControlInWinForm("Use Dire Beast", "UseDireBeast", "Offensive Cooldown");
                AddControlInWinForm("Use Fervor", "UseFervor", "Offensive Cooldown");
                AddControlInWinForm("Use Glaive Toss", "UseGlaiveToss", "Offensive Cooldown");
                AddControlInWinForm("Use Lynx Rush", "UseLynxRush", "Offensive Cooldown");
                AddControlInWinForm("Use Powershot", "UsePowershot", "Offensive Cooldown");
                AddControlInWinForm("Use Rapid Fire", "UseRapidFire", "Offensive Cooldown");
                AddControlInWinForm("Use Readiness", "UseReadiness", "Offensive Cooldown");
                AddControlInWinForm("Use Stampede", "UseStampede", "Offensive Cooldown");
                /* Defensive Cooldown */
                AddControlInWinForm("Use Binding Shot", "UseBindingShot", "Defensive Cooldown");
                AddControlInWinForm("Use Concussive Shot", "UseConcussiveShot", "Defensive Cooldown");
                AddControlInWinForm("Use Deterrance", "UseDeterrance", "Defensive Cooldown");
                AddControlInWinForm("Use Disengage", "UseDisengage", "Defensive Cooldown");
                AddControlInWinForm("Use Freezing Trap", "UseFreezingTrap", "Defensive Cooldown");
                AddControlInWinForm("Use Ice Trap", "UseIceTrap", "Defensive Cooldown");
                AddControlInWinForm("Use Scatter Shot", "UseScatterShot", "Defensive Cooldown");
                AddControlInWinForm("Use Silencing Shot", "UseSilencingShot", "Defensive Cooldown");
                AddControlInWinForm("Use Wyvern Sting", "UseWyvernSting", "Defensive Cooldown");
                /* Healing Spell */
                AddControlInWinForm("Use Exhilaration", "UseExhilaration", "Healing Spell");
                AddControlInWinForm("Use Feed Pet", "UseFeedPet", "Healing Spell");
                AddControlInWinForm("Use Mend Pet", "UseMendPet", "Healing Spell");
                AddControlInWinForm("Use Revive Pet", "UseRevivePet", "Healing Spell");
                /* Game Settings */
                AddControlInWinForm("Use Low Combat Settings", "UseLowCombat", "Game Settings");
                AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
                AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
                AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
                AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
                AddControlInWinForm("Use Revive Pet in Combat", "UseCombatRevive", "Game Settings");
                AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
                AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
            }

            public static HunterSurvivalSettings CurrentSetting { get; set; }

            public static HunterSurvivalSettings GetSettings()
            {
                string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Hunter_Survival.xml";
                if (File.Exists(currentSettingsFile))
                {
                    return
                        CurrentSetting = Load<HunterSurvivalSettings>(currentSettingsFile);
                }
                return new HunterSurvivalSettings();
            }
        }

        #endregion
    }

    #endregion

    #region Monk

    public class MonkBrewmaster
    {
        private readonly MonkBrewmasterSettings _mySettings = MonkBrewmasterSettings.GetSettings();

        #region General Timers & Variables

        private readonly WoWItem _firstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
        private readonly WoWItem _secondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);
        public int ElusiveBrewStack = 0;
        private Timer _engineeringTimer = new Timer(0);
        private Timer _grappleWeaponTimer = new Timer(0);
        private Timer _healingSphereTimer = new Timer(0);
        private Timer _onCd = new Timer(0);
/*
        private Timer _staggerTimer = new Timer(0);
*/

        #endregion

        #region Professions & Racials

        public readonly Spell Alchemy = new Spell("Alchemy");
        public readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
        public readonly Spell Berserking = new Spell("Berserking");
        public readonly Spell BloodFury = new Spell("Blood Fury");
        public readonly Spell Engineering = new Spell("Engineering");
        public readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
        public readonly Spell Lifeblood = new Spell("Lifeblood");
        public readonly Spell Stoneform = new Spell("Stoneform");
        public readonly Spell WarStomp = new Spell("War Stomp");

        #endregion

        #region Monk Buffs

        public readonly Spell Disable = new Spell("Disable");
        public readonly Spell LegacyoftheEmperor = new Spell("Legacy of the Emperor");
        public readonly Spell StanceoftheFierceTiger = new Spell("Stance of the Fierce Tiger");
        public readonly Spell StanceoftheSturdyOx = new Spell("Stance of the Sturdy Ox");
        public readonly Spell TigersLust = new Spell("Tiger's Lust");

        #endregion

        #region Offensive Spell

        public readonly Spell BlackoutKick = new Spell("Blackout Kick");
        public readonly Spell BreathofFire = new Spell("Breathe of Fire");
        public readonly Spell Clash = new Spell("Clash");
        public readonly Spell CracklingJadeLightning = new Spell("Crackling Jade Lightning");
        public readonly Spell DizzyingHaze = new Spell("Dizzying Haze");
        public readonly Spell Jab = new Spell("Jab");
        public readonly Spell KegSmash = new Spell("Keg Smash");
        public readonly Spell Provoke = new Spell("Provoke");
        public readonly Spell Roll = new Spell("Roll");
        public readonly Spell SpinningCraneKick = new Spell("Spinning Crane Kick");
        public readonly Spell TigerPalm = new Spell("Tiger Palm");
        public readonly Spell TouchofDeath = new Spell("Touch of Death");

        #endregion

        #region Offensive Cooldown

        public readonly Spell ChiBrew = new Spell("Chi Brew");
        public readonly Spell InvokeXuentheWhiteTiger = new Spell("Invoke Xuen, the White Tiger");
        public readonly Spell RushingJadeWind = new Spell("Rushing Jade Wind");

        #endregion

        #region Defensive Cooldown

        public readonly Spell ChargingOxWave = new Spell("Charging Ox Wave");
        public readonly Spell DampenHarm = new Spell("Dampen Harm");
        public readonly Spell DiffuseMagic = new Spell("Diffuse Magic");
        public readonly Spell ElusiveBrew = new Spell("Elusive Brew");
        public readonly Spell FortifyingBrew = new Spell("Fortifying Brew");
        public readonly Spell GrappleWeapon = new Spell("Grapple Weapon");
        public readonly Spell Guard = new Spell("Guard");
        public readonly Spell LegSweep = new Spell("Leg Sweep");
        public readonly Spell PurifyingBrew = new Spell("Purifying Brew");
        public readonly Spell SpearHandStrike = new Spell("Spear Hand Strike");
        public readonly Spell SummonBlackOxStatue = new Spell("Summon Black Ox Statue");
        public readonly Spell ZenMeditation = new Spell("Zen Meditation");
        private Timer _furifyingBrewTimer = new Timer(0);

        #endregion

        #region Healing Spell

        public readonly Spell ChiBurst = new Spell("Chi Burst");
        public readonly Spell ChiWave = new Spell("Chi Wave");
        public readonly Spell ExpelHarm = new Spell("Expel Harm");
        public readonly Spell HealingSphere = new Spell("Healing Sphere");
        public readonly Spell ZenSphere = new Spell("Zen Sphere");

        #endregion

        public MonkBrewmaster()
        {
            Main.InternalRange = 5.0f;
            UInt64 lastTarget = 0;

            while (Main.InternalLoop)
            {
                try
                {
                    if (!ObjectManager.Me.IsDead)
                    {
                        if (!ObjectManager.Me.IsMounted)
                        {
                            if (Fight.InFight && ObjectManager.Me.Target > 0)
                            {
                                if (ObjectManager.Me.Target != lastTarget &&
                                    Provoke.IsHostileDistanceGood)
                                {
                                    Pull();
                                    lastTarget = ObjectManager.Me.Target;
                                }

                                if (ObjectManager.Target.GetDistance < 30)
                                    Combat();
                                break;
                            }
                            if (!ObjectManager.Me.IsCast)
                                Patrolling();
                        }
                    }
                    else
                        Thread.Sleep(500);
                }
                catch
                {
                }
                Thread.Sleep(150);
            }
        }

        private void Pull()
        {
            if (_mySettings.UseClash && Clash.KnownSpell && Clash.IsHostileDistanceGood && Clash.IsSpellUsable)
                Clash.Launch();

            if (_mySettings.UseProvoke && Provoke.KnownSpell && !ObjectManager.Target.InCombat && Provoke.IsHostileDistanceGood && Provoke.IsSpellUsable)
            {
                Provoke.Launch();
                }
        }

        private void Combat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            DPSCycle();
            if (_onCd.IsReady && (ObjectManager.Me.HealthPercent <= _mySettings.UseGrappleWeaponAtPercentage || ObjectManager.Me.HealthPercent <= _mySettings.UseElusiveBrewAtPercentage
                                 || ObjectManager.Me.HealthPercent <= _mySettings.UseFortifyingBrewAtPercentage ||
                                 ObjectManager.Me.HealthPercent <= _mySettings.UseChargingOxWaveAtPercentage
                                 || ObjectManager.Me.HealthPercent <= _mySettings.UseDampenHarmAtPercentage || ObjectManager.Me.HealthPercent <= _mySettings.UseLegSweepAtPercentage
                                 || ObjectManager.Me.HealthPercent <= _mySettings.UseGuardAtPercentage || ObjectManager.Me.HealthPercent <= _mySettings.UseStoneformAtPercentage
                                 || ObjectManager.Me.HealthPercent <= _mySettings.UseWarStompAtPercentage || ObjectManager.Me.HealthPercent <= _mySettings.UsePurifyingBrewAtPercentage))
                DefenseCycle();
            Heal();
            Decast();
            DPSBurst();
            DPSCycle();
        }

        private void Buff()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (_mySettings.UseLegacyoftheEmperor && LegacyoftheEmperor.KnownSpell && !LegacyoftheEmperor.HaveBuff && LegacyoftheEmperor.IsSpellUsable)
                LegacyoftheEmperor.Launch();

            if (_mySettings.UseStanceoftheSturdyOx && StanceoftheSturdyOx.KnownSpell && !StanceoftheSturdyOx.HaveBuff && StanceoftheSturdyOx.IsSpellUsable)
                StanceoftheSturdyOx.Launch();

            if (_mySettings.UseTigersLust && TigersLust.KnownSpell && !ObjectManager.Me.InCombat && ObjectManager.Me.GetMove && TigersLust.IsSpellUsable)
                TigersLust.Launch();

            if (_mySettings.UseRoll && !ObjectManager.Me.InCombat && Roll.KnownSpell && ObjectManager.Me.GetMove
                && !TigersLust.HaveBuff && Roll.IsSpellUsable && ObjectManager.Target.GetDistance > 14)
                Roll.Launch();

            if (_mySettings.UseSummonBlackOxStatue && SummonBlackOxStatue.KnownSpell && !ObjectManager.Me.HaveBuff(126119) && SummonBlackOxStatue.IsSpellUsable
                && ObjectManager.Target.GetDistance < 30 && ObjectManager.Target.InCombat)
                SpellManager.CastSpellByIDAndPosition(115315, ObjectManager.Target.Position);

            if (_mySettings.UseAlchFlask && !ObjectManager.Me.HaveBuff(79638) && !ObjectManager.Me.HaveBuff(79640) && !ObjectManager.Me.HaveBuff(79639)
                && !ItemsManager.IsItemOnCooldown(75525) && ItemsManager.GetItemCountByIdLUA(75525) > 0)
                ItemsManager.UseItem(75525);
        }

        private void AvoidMelee()
        {
            if (ObjectManager.Target.GetDistance < _mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
            {
                Logging.WriteFight("Too Close. Moving Back");
                var maxTimeTimer = new Timer(1000*2);
                MovementsAction.MoveBackward(true);
                while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                    Thread.Sleep(300);
                MovementsAction.MoveBackward(false);
                if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
                {
                    MovementsAction.MoveForward(true);
                    Thread.Sleep(1000);
                    MovementsAction.MoveForward(false);
                    MovementManager.Face(ObjectManager.Target.Position);
                }
            }
        }

        private void DefenseCycle()
        {
            if (_mySettings.UseGrappleWeapon && GrappleWeapon.KnownSpell && GrappleWeapon.IsHostileDistanceGood &&
                ObjectManager.Me.HealthPercent <= _mySettings.UseGrappleWeaponAtPercentage
                && _grappleWeaponTimer.IsReady && GrappleWeapon.IsSpellUsable)
            {
                GrappleWeapon.Launch();
                _grappleWeaponTimer = new Timer(1000*60);
                return;
            }
            if (_mySettings.UseElusiveBrew && ElusiveBrew.KnownSpell && ObjectManager.Me.InCombat && ObjectManager.Me.HealthPercent <= _mySettings.UseElusiveBrewAtPercentage
                && ElusiveBrew.IsSpellUsable && ObjectManager.Me.BuffStack(128939) > 5)
            {
                ElusiveBrewStack = ObjectManager.Me.BuffStack(128939);
                ElusiveBrew.Launch();
                _onCd = new Timer(1000*ElusiveBrewStack);
                return;
            }
            if (_mySettings.UseFortifyingBrew && FortifyingBrew.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseFortifyingBrewAtPercentage &&
                FortifyingBrew.IsSpellUsable)
            {
                FortifyingBrew.Launch();
                _onCd = new Timer(1000*20);
                return;
            }
            if (_mySettings.UseChargingOxWave && ChargingOxWave.KnownSpell && ChargingOxWave.IsHostileDistanceGood &&
                ObjectManager.Me.HealthPercent <= _mySettings.UseChargingOxWaveAtPercentage
                && ChargingOxWave.IsSpellUsable)
            {
                ChargingOxWave.Launch();
                _onCd = new Timer(1000*3);
                return;
            }
            if (_mySettings.UseDampenHarm && DampenHarm.KnownSpell && DampenHarm.IsSpellUsable && ObjectManager.Me.HealthPercent <= _mySettings.UseDampenHarmAtPercentage)
            {
                DampenHarm.Launch();
                _onCd = new Timer(1000*5);
                return;
            }
            if (_mySettings.UseLegSweep && LegSweep.KnownSpell && ObjectManager.Target.GetDistance < 6 &&
                ObjectManager.Me.HealthPercent <= _mySettings.UseLegSweepAtPercentage
                && LegSweep.IsSpellUsable)
            {
                LegSweep.Launch();
                _onCd = new Timer(1000*5);
                return;
            }
            if (_mySettings.UseGuard && Guard.KnownSpell && ObjectManager.Me.HaveBuff(118636) && Guard.IsSpellUsable &&
                ObjectManager.Me.HealthPercent <= _mySettings.UseGuardAtPercentage)
            {
                Guard.Launch();
                _onCd = new Timer(1000*5);
                return;
            }
            if (_mySettings.UsePurifyingBrew && PurifyingBrew.KnownSpell && ObjectManager.Me.HaveBuff(124255) && _furifyingBrewTimer.IsReady &&
                PurifyingBrew.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UsePurifyingBrewAtPercentage)
            {
                PurifyingBrew.Launch();
                _furifyingBrewTimer = new Timer(1000*10);
                return;
            }
            if (_mySettings.UseStoneform && Stoneform.KnownSpell && Stoneform.IsSpellUsable &&
                ObjectManager.Me.HealthPercent <= _mySettings.UseStoneformAtPercentage)
            {
                Stoneform.Launch();
                _onCd = new Timer(1000*8);
                return;
            }
            if (_mySettings.UseWarStomp && WarStomp.KnownSpell && ObjectManager.Target.GetDistance < 8 && WarStomp.IsSpellUsable &&
                ObjectManager.Me.HealthPercent <= _mySettings.UseWarStompAtPercentage)
            {
                WarStomp.Launch();
                _onCd = new Timer(1000*2);
            }
        }

        private void Heal()
        {
            if (_mySettings.UseGiftoftheNaaru && GiftoftheNaaru.KnownSpell && GiftoftheNaaru.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseGiftoftheNaaruAtPercentage)
            {
                GiftoftheNaaru.Launch();
                return;
            }
            if (_mySettings.UseHealingSphere && HealingSphere.KnownSpell && HealingSphere.IsSpellUsable && _healingSphereTimer.IsReady &&
                ObjectManager.Me.HealthPercent <= _mySettings.UseHealingSphereAtPercentage)
            {
                SpellManager.CastSpellByIDAndPosition(115460, ObjectManager.Me.Position);
                _healingSphereTimer = new Timer(1000*8);
                return;
            }
            if (_mySettings.UseChiWave && ChiWave.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseChiWaveAtPercentage && ChiWave.IsSpellUsable)
            {
                ChiWave.Launch();
                return;
            }
            if (_mySettings.UseChiBurst && ChiBurst.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseChiBurstAtPercentage && ChiBurst.IsSpellUsable)
            {
                ChiBurst.Launch();
                return;
            }
            if (_mySettings.UseExpelHarm && ExpelHarm.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseExpelHarmAtPercentage && ExpelHarm.IsSpellUsable)
            {
                ExpelHarm.Launch();
                return;
            }
            if (_mySettings.UseZenSphere && ZenSphere.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseZenSphereAtPercentage
                && !ZenSphere.HaveBuff && ZenSphere.IsSpellUsable)
            {
                ZenSphere.Launch();
            }
        }

        private void Decast()
        {
            if (_mySettings.UseArcaneTorrentForDecast && ArcaneTorrent.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseArcaneTorrentForDecastAtPercentage
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && ObjectManager.Target.GetDistance < 8 && ArcaneTorrent.IsSpellUsable)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (_mySettings.UseDiffuseMagic && DiffuseMagic.KnownSpell && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && DiffuseMagic.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseDiffuseMagicAtPercentage)
            {
                DiffuseMagic.Launch();
                return;
            }
            if (_mySettings.UseSpearHandStrike && SpearHandStrike.KnownSpell && ObjectManager.Target.IsCast && SpearHandStrike.IsHostileDistanceGood && SpearHandStrike.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseSpearHandStrikeAtPercentage)
            {
                SpearHandStrike.Launch();
                return;
            }
            if (_mySettings.UseDisable && Disable.KnownSpell && ObjectManager.Target.GetMove && !Disable.TargetHaveBuff && Disable.IsHostileDistanceGood && Disable.IsSpellUsable)
            {
                Disable.Launch();
            }
        }

        private void DPSBurst()
        {
            if (_mySettings.UseTrinketOne && !ItemsManager.IsItemOnCooldown(_firstTrinket.Entry) && ItemsManager.IsUsableItemById(_firstTrinket.Entry))
            {
                ItemsManager.UseItem(_firstTrinket.Name);
                Logging.WriteFight("Use First Trinket Slot");
            }
            if (_mySettings.UseTrinketTwo && !ItemsManager.IsItemOnCooldown(_secondTrinket.Entry) && ItemsManager.IsUsableItemById(_secondTrinket.Entry))
            {
                ItemsManager.UseItem(_secondTrinket.Name);
                Logging.WriteFight("Use Second Trinket Slot");
                return;
            }
            if (_mySettings.UseBerserking && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30 && Berserking.IsSpellUsable)
            {
                Berserking.Launch();
                return;
            }
            if (_mySettings.UseBloodFury && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 30 && BloodFury.IsSpellUsable)
            {
                BloodFury.Launch();
                return;
            }

            if (_mySettings.UseLifeblood && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30 && Lifeblood.IsSpellUsable)
            {
                Lifeblood.Launch();
                return;
            }
            if (_mySettings.UseEngGlove && Engineering.KnownSpell && _engineeringTimer.IsReady && ObjectManager.Target.GetDistance < 30)
            {
                Logging.WriteFight("Use Engineering Gloves.");
                Lua.RunMacroText("/use 10");
                _engineeringTimer = new Timer(1000*60);
                return;
            }

            if (_mySettings.UseChiBrew && ChiBrew.KnownSpell && ObjectManager.Me.Chi == 0 && ChiBrew.IsSpellUsable)
            {
                ChiBrew.Launch();
            }

            if (_mySettings.UseTouchofDeath && TouchofDeath.KnownSpell && TouchofDeath.IsHostileDistanceGood && TouchofDeath.IsSpellUsable)
            {
                TouchofDeath.Launch();
            }

            if (_mySettings.UseInvokeXuentheWhiteTiger && InvokeXuentheWhiteTiger.KnownSpell && InvokeXuentheWhiteTiger.IsHostileDistanceGood && InvokeXuentheWhiteTiger.IsSpellUsable)
            {
                InvokeXuentheWhiteTiger.Launch();
            }
            if (_mySettings.UseRushingJadeWind && RushingJadeWind.KnownSpell && RushingJadeWind.IsHostileDistanceGood && RushingJadeWind.IsSpellUsable
                && ObjectManager.GetNumberAttackPlayer() > 3)
            {
                RushingJadeWind.Launch();
            }
        }

        private void DPSCycle()
        {
            if (ObjectManager.GetNumberAttackPlayer() > 2)
            {
                if (_mySettings.UseSpinningCraneKick && SpinningCraneKick.KnownSpell && ObjectManager.GetNumberAttackPlayer() > 5 && !ObjectManager.Me.IsCast
                    && ObjectManager.Target.GetDistance < 8 && SpinningCraneKick.IsSpellUsable)
                {
                    SpinningCraneKick.Launch();
                    return;
                }
                if (_mySettings.UseDizzyingHaze && DizzyingHaze.KnownSpell && !DizzyingHaze.TargetHaveBuff && DizzyingHaze.IsHostileDistanceGood && DizzyingHaze.IsSpellUsable)
                {
                    SpellManager.CastSpellByIDAndPosition(115180, ObjectManager.Target.Position);
                    return;
                }
                if (_mySettings.UseBreathofFire && BreathofFire.KnownSpell && !BreathofFire.TargetHaveBuff && ObjectManager.Target.GetDistance < 8 && BreathofFire.IsSpellUsable)
                {
                    BreathofFire.Launch();
                    return;
                }
                if (_mySettings.UseRushingJadeWind && RushingJadeWind.KnownSpell && ObjectManager.Target.GetDistance < 30 && RushingJadeWind.IsSpellUsable)
                {
                    RushingJadeWind.Launch();
                    return;
                }
                return;
            }
            if (_mySettings.UseRushingJadeWind && RushingJadeWind.KnownSpell && ObjectManager.Target.GetDistance < 30 && !ObjectManager.Target.HaveBuff(115307) &&
                RushingJadeWind.IsSpellUsable)
            {
                RushingJadeWind.Launch();
                return;
            }
            if (_mySettings.UseBlackoutKick && BlackoutKick.KnownSpell && BlackoutKick.IsHostileDistanceGood && BlackoutKick.IsSpellUsable &&
                (!ObjectManager.Me.HaveBuff(121125) || !_mySettings.UseTouchofDeath) && (!ObjectManager.Me.HaveBuff(115307) || !StanceoftheSturdyOx.KnownSpell))
            {
                BlackoutKick.Launch();
                return;
            }
            if (_mySettings.UseTigerPalm && TigerPalm.KnownSpell && TigerPalm.IsHostileDistanceGood && TigerPalm.IsSpellUsable &&
                (!ObjectManager.Me.HaveBuff(121125) || !_mySettings.UseTouchofDeath)
                &&
                (!ObjectManager.Me.HaveBuff(125359) || (!ObjectManager.Me.HaveBuff(118636) && Guard.IsSpellUsable && ObjectManager.Me.HealthPercent <= _mySettings.UseGuardAtPercentage)))
            {
                TigerPalm.Launch();
                return;
            }
            if (_mySettings.UseKegSmash && KegSmash.KnownSpell && KegSmash.IsHostileDistanceGood && ObjectManager.Me.Chi < 3 && KegSmash.IsSpellUsable)
            {
                KegSmash.Launch();
                return;
            }
            if (_mySettings.UseArcaneTorrentForResource && ArcaneTorrent.KnownSpell && ObjectManager.Me.EnergyPercentage < 40 && ArcaneTorrent.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseExpelHarmAtPercentage)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (_mySettings.UseExpelHarm && ExpelHarm.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseExpelHarmAtPercentage && ObjectManager.Me.Chi < 4
                && ExpelHarm.IsHostileDistanceGood && ExpelHarm.IsSpellUsable)
            {
                ExpelHarm.Launch();
                return;
            }
            if (_mySettings.UseJab && Jab.KnownSpell && ObjectManager.Me.Chi < 4 && Jab.IsHostileDistanceGood && Jab.IsSpellUsable)
            {
                Jab.Launch();
                return;
            }
            if (_mySettings.UseTigerPalm && TigerPalm.KnownSpell && TigerPalm.IsHostileDistanceGood && TigerPalm.IsSpellUsable && !ObjectManager.Me.HaveBuff(121125)
                && (ObjectManager.Me.HaveBuff(115307) || !StanceoftheSturdyOx.KnownSpell))
            {
                TigerPalm.Launch();
            }
        }

        private void Patrolling()
        {
            if (ObjectManager.Me.IsMounted) return;
            Buff();
            Heal();
        }

        #region Nested type: MonkBrewmasterSettings

        [Serializable]
        public class MonkBrewmasterSettings : Settings
        {
            public bool DoAvoidMelee = false;
            public int DoAvoidMeleeDistance = 0;
            public bool UseAlchFlask = true;
            public bool UseArcaneTorrentForDecast = true;
            public int UseArcaneTorrentForDecastAtPercentage = 100;
            public bool UseArcaneTorrentForResource = true;
            public bool UseBerserking = true;
            public bool UseBlackoutKick = true;
            public bool UseBloodFury = true;
            public bool UseBreathofFire = true;
            public bool UseChargingOxWave = true;
            public int UseChargingOxWaveAtPercentage = 90;
            public bool UseChiBrew = true;
            public bool UseChiBurst = true;
            public int UseChiBurstAtPercentage = 90;
            public bool UseChiWave = true;
            public int UseChiWaveAtPercentage = 85;
            public bool UseClash = true;
            public bool UseCracklingJadeLightning = true;
            public bool UseDampenHarm = true;
            public int UseDampenHarmAtPercentage = 90;
            public bool UseDiffuseMagic = true;
            public int UseDiffuseMagicAtPercentage = 90;
            public bool UseDisable = false;
            public bool UseDizzyingHaze = true;
            public bool UseElusiveBrew = true;
            public int UseElusiveBrewAtPercentage = 70;
            public bool UseEngGlove = true;
            public bool UseExpelHarm = true;
            public int UseExpelHarmAtPercentage = 90;
            public bool UseFortifyingBrew = true;
            public int UseFortifyingBrewAtPercentage = 80;
            public bool UseGiftoftheNaaru = true;
            public int UseGiftoftheNaaruAtPercentage = 80;
            public bool UseGrappleWeapon = true;
            public int UseGrappleWeaponAtPercentage = 95;
            public bool UseGuard = true;
            public int UseGuardAtPercentage = 95;
            public bool UseHealingSphere = true;
            public int UseHealingSphereAtPercentage = 70;
            public bool UseInvokeXuentheWhiteTiger = true;
            public bool UseJab = true;
            public bool UseKegSmash = true;
            public bool UseLegSweep = true;
            public int UseLegSweepAtPercentage = 90;
            public bool UseLegacyoftheEmperor = true;
            public bool UseLifeblood = true;
            public bool UseProvoke = true;
            public bool UsePurifyingBrew = true;
            public int UsePurifyingBrewAtPercentage = 90;
            public bool UseRoll = true;
            public bool UseRushingJadeWind = true;
            public bool UseSpearHandStrike = true;
            public int UseSpearHandStrikeAtPercentage = 100;
            public bool UseSpinningCraneKick = true;
            public bool UseStanceoftheFierceTiger = true;
            public bool UseStanceoftheSturdyOx = true;
            public bool UseStoneform = true;
            public int UseStoneformAtPercentage = 80;
            public bool UseSummonBlackOxStatue = true;
            public bool UseTigerPalm = true;
            public bool UseTigersLust = true;
            public bool UseTouchofDeath = true;
            public bool UseTrinketOne = true;
            public bool UseTrinketTwo = true;
            public bool UseWarStomp = true;
            public int UseWarStompAtPercentage = 80;
            public bool UseZenMeditation = true;
            public bool UseZenSphere = true;
            public int UseZenSphereAtPercentage = 90;

            public MonkBrewmasterSettings()
            {
                ConfigWinForm(new Point(500, 400), "Brewmaster Monk Settings");
                /* Professions & Racials */
                AddControlInWinForm("Use Arcane Torrent For Decast", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Arcane Torrent For Resource", "UseArcaneTorrentForResource", "Professions & Racials");
                AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
                AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
                AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
                AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials", "AtPercentage");
                /* Monk Buffs */
                AddControlInWinForm("Use Disable", "UseDisable", "Monk Buffs");
                AddControlInWinForm("Use Legacy of the Emperor", "UseLegacyoftheEmperor", "Monk Buffs");
                AddControlInWinForm("Use Stance of the Fierce Tiger", "UseStanceoftheFierceTiger", "Monk Buffs");
                AddControlInWinForm("Use Tiger's Lust", "UseTigersLust", "Monk Buffs");
                /* Offensive Spell */
                AddControlInWinForm("Use Chi Wave", "UseChiWave", "Offensive Spell", "AtPercentage");
                AddControlInWinForm("Use Blackout Kick", "UseBlackoutKick", "Offensive Spell");
                AddControlInWinForm("Use Breath of Fire", "UseBreathofFire", "Offensive Spell");
                AddControlInWinForm("Use Clash", "UseClash", "Offensive Spell");
                AddControlInWinForm("Use Crackling Jade Lightning", "UseCracklingJadeLightning", "Offensive Spell");
                AddControlInWinForm("Use Dizzying Haze", "UseDizzyingHaze", "Offensive Spell");
                AddControlInWinForm("Use Jab", "UseJab", "Offensive Spell");
                AddControlInWinForm("Use Keg Smash", "UseKegSmash", "Offensive Spell");
                AddControlInWinForm("Use Provoke", "UseProvoke", "Offensive Spell");
                AddControlInWinForm("Use Roll", "UseRoll", "Offensive Spell");
                AddControlInWinForm("Use Spinning Crane Kick", "UseSpinningCraneKick", "Offensive Spell");
                AddControlInWinForm("Use Tiger Palm", "UseTigerPalm", "Offensive Spell");
                AddControlInWinForm("Use Touch of Death", "UseTouchofDeath", "Offensive Spell");
                /* Offensive Cooldown */
                AddControlInWinForm("Use Chi Brew", "UseChiBrew", "Offensive Cooldown");
                AddControlInWinForm("Use Invoke Xuen, the White Tiger", "UseInvokeXuentheWhiteTiger", "Offensive Cooldown");
                AddControlInWinForm("Use Rushing Jade Wind", "UseRushingJadeWind", "Offensive Cooldown");
                /* Defensive Cooldown */
                AddControlInWinForm("Use Charging Ox Wave", "UseChargingOxWave", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Dampen Harm ", "UseDampenHarm ", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Diffuse Magic", "UseDiffuseMagic", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Elusive Brew", "UseElusiveBrew", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Fortifying Brew", "UseFortifyingBrew", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Grapple Weapon", "UseGrappleWeapon", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Guard", "UseGuard", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Leg Sweep", "UseLegSweep", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Purifying Brew", "UsePurifyingBrew", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Spear Hand Strike", "UseSpearHandStrike", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Summon Black Ox Statue", "UseSummonBlackOxStatue", "Defensive Cooldown");
                AddControlInWinForm("Use Zen Meditation", "UseZenMeditation", "Defensive Cooldown");
                /* Healing Spell */
                AddControlInWinForm("Use Chi Burst", "UseChiBurst", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Expel Harm", "UseExpelHarm", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Healing Sphere", "UseHealingSphere", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Zen Sphere", "UseZenSphere", "Healing Spell", "AtPercentage");
                /* Game Settings */
                AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
                AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
                AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
                AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
                AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
                AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
            }

            public static MonkBrewmasterSettings CurrentSetting { get; set; }

            public static MonkBrewmasterSettings GetSettings()
            {
                string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Monk_Brewmaster.xml";
                if (File.Exists(currentSettingsFile))
                {
                    return
                        CurrentSetting = Load<MonkBrewmasterSettings>(currentSettingsFile);
                }
                return new MonkBrewmasterSettings();
            }
        }

        #endregion
    }

    public class MonkWindwalker
    {
        private readonly MonkWindwalkerSettings _mySettings = MonkWindwalkerSettings.GetSettings();

        #region General Timers & Variables

        private readonly WoWItem _firstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
        private readonly WoWItem _secondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);
        private Timer _engineeringTimer = new Timer(0);
        private Timer _grappleWeaponTimer = new Timer(0);
        private Timer _healingSphereTimer = new Timer(0);
        private Timer _onCd = new Timer(0);
        private Timer _risingSunKickTimer = new Timer(0);
        private Timer _tigerPowerTimer = new Timer(0);

        #endregion

        #region Professions & Racials

        public readonly Spell Alchemy = new Spell("Alchemy");
        public readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
        public readonly Spell Berserking = new Spell("Berserking");
        public readonly Spell BloodFury = new Spell("Blood Fury");
        public readonly Spell Engineering = new Spell("Engineering");
        public readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
        public readonly Spell Lifeblood = new Spell("Lifeblood");
        public readonly Spell Stoneform = new Spell("Stoneform");
        public readonly Spell WarStomp = new Spell("War Stomp");

        #endregion

        #region Monk Buffs

        public readonly Spell Disable = new Spell("Disable");
        public readonly Spell LegacyoftheEmperor = new Spell("Legacy of the Emperor");
        public readonly Spell LegacyoftheWhiteTiger = new Spell("Legacy of the White Tiger");
        public readonly Spell StanceoftheFierceTiger = new Spell("Stance of the Fierce Tiger");
        public readonly Spell TigereyeBrew = new Spell("Tigereye Brew");
        public readonly Spell TigersLust = new Spell("Tiger's Lust");

        #endregion

        #region Offensive Spell

        public readonly Spell BlackoutKick = new Spell("Blackout Kick");
        public readonly Spell CracklingJadeLightning = new Spell("Crackling Jade Lightning");
        public readonly Spell FistsofFury = new Spell("Fists of Fury");
        public readonly Spell Jab = new Spell("Jab");
        public readonly Spell Provoke = new Spell("Provoke");
        public readonly Spell RisingSunKick = new Spell("Rising Sun Kick");
        public readonly Spell Roll = new Spell("Roll");
        public readonly Spell SpinningCraneKick = new Spell("Spinning Crane Kick");
        public readonly Spell TigerPalm = new Spell("Tiger Palm");
        public readonly Spell TouchofDeath = new Spell("Touch of Death");

        #endregion

        #region Offensive Cooldown

        public readonly Spell ChiBrew = new Spell("Chi Brew");
        public readonly Spell EnergizingBrew = new Spell("Energizing Brew");
        public readonly Spell InvokeXuentheWhiteTiger = new Spell("Invoke Xuen, the White Tiger");
        public readonly Spell RushingJadeWind = new Spell("Rushing Jade Wind");

        #endregion

        #region Defensive Cooldown

        public readonly Spell ChargingOxWave = new Spell("Charging Ox Wave");
        public readonly Spell DampenHarm = new Spell("Dampen Harm");
        public readonly Spell DiffuseMagic = new Spell("Diffuse Magic");
        public readonly Spell FortifyingBrew = new Spell("Fortifying Brew");
        public readonly Spell GrappleWeapon = new Spell("Grapple Weapon");
        public readonly Spell LegSweep = new Spell("Leg Sweep");
        public readonly Spell SpearHandStrike = new Spell("Spear Hand Strike");
        public readonly Spell TouchofKarma = new Spell("Touch of Karma");
        public readonly Spell ZenMeditation = new Spell("Zen Meditation");

        #endregion

        #region Healing Spell

        public readonly Spell ChiBurst = new Spell("Chi Burst");
        public readonly Spell ChiWave = new Spell("Chi Wave");
        public readonly Spell ExpelHarm = new Spell("Expel Harm");
        public readonly Spell HealingSphere = new Spell("Healing Sphere");
        public readonly Spell ZenSphere = new Spell("Zen Sphere");

        #endregion

        public MonkWindwalker()
        {
            Main.InternalRange = 5.0f;
            UInt64 lastTarget = 0;

            while (Main.InternalLoop)
            {
                try
                {
                    if (!ObjectManager.Me.IsDead)
                    {
                        if (!ObjectManager.Me.IsMounted)
                        {
                            if (Fight.InFight && ObjectManager.Me.Target > 0)
                            {
                                if (ObjectManager.Me.Target != lastTarget &&
                                    Provoke.IsHostileDistanceGood)
                                {
                                    Pull();
                                    lastTarget = ObjectManager.Me.Target;
                                }

                                if (ObjectManager.Target.GetDistance < 30)
                                    Combat();
                                break;
                            }
                            if (!ObjectManager.Me.IsCast)
                                Patrolling();
                        }
                    }
                    else
                        Thread.Sleep(500);
                }
                catch
                {
                }
                Thread.Sleep(150);
            }
        }

        private void Pull()
        {
            if (_mySettings.UseProvoke && Provoke.KnownSpell && !ObjectManager.Target.InCombat && Provoke.IsHostileDistanceGood && Provoke.IsSpellUsable)
            {
                Provoke.Launch();
            }
        }

        private void Combat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            DPSCycle();
            if (_onCd.IsReady && (ObjectManager.Me.HealthPercent <= _mySettings.UseGrappleWeaponAtPercentage || ObjectManager.Me.HealthPercent <= _mySettings.UseFortifyingBrewAtPercentage
                                 || ObjectManager.Me.HealthPercent <= _mySettings.UseChargingOxWaveAtPercentage ||
                                 ObjectManager.Me.HealthPercent <= _mySettings.UseTouchofKarmaAtPercentage
                                 || ObjectManager.Me.HealthPercent <= _mySettings.UseDampenHarmAtPercentage || ObjectManager.Me.HealthPercent <= _mySettings.UseLegSweepAtPercentage
                                 || ObjectManager.Me.HealthPercent <= _mySettings.UseStoneformAtPercentage || ObjectManager.Me.HealthPercent <= _mySettings.UseWarStompAtPercentage))
                DefenseCycle();
            Heal();
            Decast();
            DPSBurst();
            DPSCycle();
        }

        private void Buff()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (_mySettings.UseLegacyoftheEmperor && LegacyoftheEmperor.KnownSpell && !LegacyoftheEmperor.HaveBuff && LegacyoftheEmperor.IsSpellUsable)
                LegacyoftheEmperor.Launch();

            if (_mySettings.UseLegacyoftheWhiteTiger && LegacyoftheWhiteTiger.KnownSpell && !LegacyoftheWhiteTiger.HaveBuff && LegacyoftheWhiteTiger.IsSpellUsable)
                LegacyoftheWhiteTiger.Launch();

            if (_mySettings.UseStanceoftheFierceTiger && StanceoftheFierceTiger.KnownSpell && !StanceoftheFierceTiger.HaveBuff && StanceoftheFierceTiger.IsSpellUsable)
                StanceoftheFierceTiger.Launch();

            if (_mySettings.UseTigersLust && TigersLust.KnownSpell && !ObjectManager.Me.InCombat && ObjectManager.Me.GetMove && TigersLust.IsSpellUsable)
                TigersLust.Launch();

            if (_mySettings.UseRoll && !ObjectManager.Me.InCombat && Roll.KnownSpell && ObjectManager.Me.GetMove
                && !TigersLust.HaveBuff && Roll.IsSpellUsable && ObjectManager.Target.GetDistance > 14)
                Roll.Launch();

            if (_mySettings.UseAlchFlask && !ObjectManager.Me.HaveBuff(79638) && !ObjectManager.Me.HaveBuff(79640) && !ObjectManager.Me.HaveBuff(79639)
                && !ItemsManager.IsItemOnCooldown(75525) && ItemsManager.GetItemCountByIdLUA(75525) > 0)
                ItemsManager.UseItem(75525);
        }

        private void AvoidMelee()
        {
            if (ObjectManager.Target.GetDistance < _mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
            {
                Logging.WriteFight("Too Close. Moving Back");
                var maxTimeTimer = new Timer(1000*2);
                MovementsAction.MoveBackward(true);
                while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                    Thread.Sleep(300);
                MovementsAction.MoveBackward(false);
                if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
                {
                    MovementsAction.MoveForward(true);
                    Thread.Sleep(1000);
                    MovementsAction.MoveForward(false);
                    MovementManager.Face(ObjectManager.Target.Position);
                }
            }
        }

        private void DefenseCycle()
        {
            if (_mySettings.UseGrappleWeapon && GrappleWeapon.KnownSpell && GrappleWeapon.IsHostileDistanceGood &&
                ObjectManager.Me.HealthPercent <= _mySettings.UseGrappleWeaponAtPercentage
                && _grappleWeaponTimer.IsReady && GrappleWeapon.IsSpellUsable)
            {
                GrappleWeapon.Launch();
                _grappleWeaponTimer = new Timer(1000*60);
                return;
            }
            if (_mySettings.UseFortifyingBrew && FortifyingBrew.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseFortifyingBrewAtPercentage &&
                FortifyingBrew.IsSpellUsable)
            {
                FortifyingBrew.Launch();
                _onCd = new Timer(1000*20);
                return;
            }
            if (_mySettings.UseChargingOxWave && ChargingOxWave.KnownSpell && ChargingOxWave.IsHostileDistanceGood &&
                ObjectManager.Me.HealthPercent <= _mySettings.UseChargingOxWaveAtPercentage
                && ChargingOxWave.IsSpellUsable)
            {
                ChargingOxWave.Launch();
                _onCd = new Timer(1000*3);
                return;
            }
            if (_mySettings.UseDampenHarm && DampenHarm.KnownSpell && DampenHarm.IsSpellUsable && ObjectManager.Me.HealthPercent <= _mySettings.UseDampenHarmAtPercentage)
            {
                DampenHarm.Launch();
                _onCd = new Timer(1000*5);
                return;
            }
            if (_mySettings.UseLegSweep && LegSweep.KnownSpell && ObjectManager.Target.GetDistance < 6 &&
                ObjectManager.Me.HealthPercent <= _mySettings.UseLegSweepAtPercentage
                && LegSweep.IsSpellUsable)
            {
                LegSweep.Launch();
                _onCd = new Timer(1000*5);
                return;
            }
            if (_mySettings.UseTouchofKarma && TouchofKarma.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseTouchofKarmaAtPercentage
                && TouchofKarma.IsHostileDistanceGood && TouchofKarma.IsSpellUsable)
            {
                TouchofKarma.Launch();
                _onCd = new Timer(1000*6);
                return;
            }
            if (_mySettings.UseStoneform && Stoneform.KnownSpell && Stoneform.IsSpellUsable && ObjectManager.Me.HealthPercent <= _mySettings.UseStoneformAtPercentage)
            {
                Stoneform.Launch();
                _onCd = new Timer(1000*8);
                return;
            }
            if (_mySettings.UseWarStomp && WarStomp.KnownSpell && ObjectManager.Target.GetDistance < 8 && WarStomp.IsSpellUsable &&
                ObjectManager.Me.HealthPercent <= _mySettings.UseWarStompAtPercentage)
            {
                WarStomp.Launch();
                _onCd = new Timer(1000*2);
            }
        }

        private void Heal()
        {
            if (_mySettings.UseGiftoftheNaaru && GiftoftheNaaru.KnownSpell && GiftoftheNaaru.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseGiftoftheNaaruAtPercentage)
            {
                GiftoftheNaaru.Launch();
                return;
            }
            if (_mySettings.UseHealingSphere && HealingSphere.KnownSpell && HealingSphere.IsSpellUsable && _healingSphereTimer.IsReady &&
                ObjectManager.Me.HealthPercent <= _mySettings.UseHealingSphereAtPercentage)
            {
                SpellManager.CastSpellByIDAndPosition(115460, ObjectManager.Me.Position);
                _healingSphereTimer = new Timer(1000*8);
                return;
            }
            if (_mySettings.UseChiWave && ChiWave.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseChiWaveAtPercentage && ChiWave.IsSpellUsable)
            {
                ChiWave.Launch();
                return;
            }
            if (_mySettings.UseChiBurst && ChiBurst.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseChiBurstAtPercentage && ChiBurst.IsSpellUsable)
            {
                ChiBurst.Launch();
                return;
            }
            if (_mySettings.UseExpelHarm && ExpelHarm.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseExpelHarmAtPercentage && ExpelHarm.IsSpellUsable)
            {
                ExpelHarm.Launch();
                return;
            }
            if (_mySettings.UseZenSphere && ZenSphere.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseZenSphereAtPercentage
                && !ZenSphere.HaveBuff && ZenSphere.IsSpellUsable)
            {
                ZenSphere.Launch();
            }
        }

        private void Decast()
        {
            if (_mySettings.UseArcaneTorrentForDecast && ArcaneTorrent.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseArcaneTorrentForDecastAtPercentage
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && ObjectManager.Target.GetDistance < 8 && ArcaneTorrent.IsSpellUsable)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (_mySettings.UseDiffuseMagic && DiffuseMagic.KnownSpell && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && DiffuseMagic.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseDiffuseMagicAtPercentage)
            {
                DiffuseMagic.Launch();
                return;
            }
            if (_mySettings.UseSpearHandStrike && SpearHandStrike.KnownSpell && ObjectManager.Target.IsCast && SpearHandStrike.IsHostileDistanceGood && SpearHandStrike.IsSpellUsable
                && ObjectManager.Me.HealthPercent <= _mySettings.UseSpearHandStrikeAtPercentage)
            {
                SpearHandStrike.Launch();
                return;
            }
            if (_mySettings.UseDisable && Disable.KnownSpell && ObjectManager.Target.GetMove && !Disable.TargetHaveBuff && Disable.IsHostileDistanceGood && Disable.IsSpellUsable)
            {
                Disable.Launch();
            }
        }

        private void DPSBurst()
        {
            if (_mySettings.UseTrinketOne && !ItemsManager.IsItemOnCooldown(_firstTrinket.Entry) && ItemsManager.IsUsableItemById(_firstTrinket.Entry))
            {
                ItemsManager.UseItem(_firstTrinket.Name);
                Logging.WriteFight("Use First Trinket Slot");
            }
            if (_mySettings.UseTrinketTwo && !ItemsManager.IsItemOnCooldown(_secondTrinket.Entry) && ItemsManager.IsUsableItemById(_secondTrinket.Entry))
            {
                ItemsManager.UseItem(_secondTrinket.Name);
                Logging.WriteFight("Use Second Trinket Slot");
                return;
            }
            if (_mySettings.UseBerserking && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 30 && Berserking.IsSpellUsable)
            {
                Berserking.Launch();
                return;
            }
            if (_mySettings.UseBloodFury && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 30 && BloodFury.IsSpellUsable)
            {
                BloodFury.Launch();
                return;
            }
            if (_mySettings.UseLifeblood && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 30 && Lifeblood.IsSpellUsable)
            {
                Lifeblood.Launch();
                return;
            }
            if (_mySettings.UseEngGlove && Engineering.KnownSpell && _engineeringTimer.IsReady && ObjectManager.Target.GetDistance < 30)
            {
                Logging.WriteFight("Use Engineering Gloves.");
                Lua.RunMacroText("/use 10");
                _engineeringTimer = new Timer(1000*60);
                return;
            }
            if (_mySettings.UseChiBrew && ChiBrew.KnownSpell && ObjectManager.Me.Chi == 0 && ChiBrew.IsSpellUsable)
            {
                ChiBrew.Launch();
            }
            if (_mySettings.UseTouchofDeath && TouchofDeath.KnownSpell && TouchofDeath.IsHostileDistanceGood && TouchofDeath.IsSpellUsable)
            {
                TouchofDeath.Launch();
            }
            if (_mySettings.UseInvokeXuentheWhiteTiger && InvokeXuentheWhiteTiger.KnownSpell && InvokeXuentheWhiteTiger.IsHostileDistanceGood && InvokeXuentheWhiteTiger.IsSpellUsable)
            {
                InvokeXuentheWhiteTiger.Launch();
            }
            if (_mySettings.UseEnergizingBrew && EnergizingBrew.KnownSpell && ObjectManager.Me.Energy < 41 && ObjectManager.Target.GetDistance < 30 && EnergizingBrew.IsSpellUsable)
            {
                EnergizingBrew.Launch();
            }
            if (_mySettings.UseTigereyeBrew && TigereyeBrew.KnownSpell && ObjectManager.Me.BuffStack(125195) > 9 && ObjectManager.Target.GetDistance < 30 && TigereyeBrew.IsSpellUsable)
            {
                TigereyeBrew.Launch();
            }
            if (_mySettings.UseChiWave && ChiWave.KnownSpell && ChiWave.IsHostileDistanceGood && ChiWave.IsSpellUsable)
            {
                ChiWave.Launch();
            }
            if (_mySettings.UseRushingJadeWind && RushingJadeWind.KnownSpell && RushingJadeWind.IsHostileDistanceGood && RushingJadeWind.IsSpellUsable
                && ObjectManager.GetNumberAttackPlayer() > 3)
            {
                RushingJadeWind.Launch();
            }
        }

        private void DPSCycle()
        {
            if (ObjectManager.GetNumberAttackPlayer() > 3)
            {
                if (_mySettings.UseTigerPalm && TigerPalm.KnownSpell && !ObjectManager.Me.HaveBuff(125359) && TigerPalm.IsHostileDistanceGood && TigerPalm.IsSpellUsable)
                {
                    TigerPalm.Launch();
                    return;
                }
                if (_mySettings.UseRisingSunKick && RisingSunKick.KnownSpell && !RisingSunKick.TargetHaveBuff && RisingSunKick.IsHostileDistanceGood && RisingSunKick.IsSpellUsable)
                {
                    RisingSunKick.Launch();
                    return;
                }
                if (_mySettings.UseSpinningCraneKick && SpinningCraneKick.KnownSpell && SpinningCraneKick.IsHostileDistanceGood && !ObjectManager.Me.IsCast &&
                    SpinningCraneKick.IsSpellUsable)
                {
                    SpinningCraneKick.Launch();
                    return;
                }
            }

            if (_mySettings.UseRisingSunKick && RisingSunKick.KnownSpell && RisingSunKick.IsHostileDistanceGood && RisingSunKick.IsSpellUsable
                && (!ObjectManager.Me.HaveBuff(121125) || !_mySettings.UseTouchofDeath))
            {
                RisingSunKick.Launch();
                _risingSunKickTimer = new Timer(1000*4);
                return;
            }
            if (_mySettings.UseTigerPalm && TigerPalm.KnownSpell && TigerPalm.IsHostileDistanceGood && TigerPalm.IsSpellUsable &&
                (!ObjectManager.Me.HaveBuff(121125) || !_mySettings.UseTouchofDeath)
                && (_tigerPowerTimer.IsReady || !ObjectManager.Me.HaveBuff(125359) || ObjectManager.Me.HaveBuff(118864)))
            {
                TigerPalm.Launch();
                _tigerPowerTimer = new Timer(1000*15);
                return;
            }
            if (_mySettings.UseFistsofFury && FistsofFury.KnownSpell && FistsofFury.IsHostileDistanceGood && FistsofFury.IsSpellUsable &&
                (!ObjectManager.Me.HaveBuff(121125) || !_mySettings.UseTouchofDeath)
                && !_tigerPowerTimer.IsReady && !_risingSunKickTimer.IsReady && ObjectManager.Me.EnergyPercentage < 81)
            {
                FistsofFury.Launch();
                return;
            }
            if (_mySettings.UseBlackoutKick && BlackoutKick.KnownSpell && BlackoutKick.IsHostileDistanceGood && BlackoutKick.IsSpellUsable
                && (!ObjectManager.Me.HaveBuff(121125) || !_mySettings.UseTouchofDeath))
            {
                BlackoutKick.Launch();
                return;
            }
            if (_mySettings.UseExpelHarm && ExpelHarm.KnownSpell && ObjectManager.Me.HealthPercent <= _mySettings.UseExpelHarmAtPercentage && ExpelHarm.IsHostileDistanceGood &&
                ExpelHarm.IsSpellUsable
                && ObjectManager.Me.Chi < 3)
            {
                ExpelHarm.Launch();
                return;
            }
            if (_mySettings.UseJab && Jab.KnownSpell && !ObjectManager.Me.HaveBuff(116768) && Jab.IsHostileDistanceGood && Jab.IsSpellUsable
                && ObjectManager.Me.Chi < 3 && !ObjectManager.Me.HaveBuff(118864))
            {
                Jab.Launch();
                return;
            }
            if (_mySettings.UseArcaneTorrentForResource && ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable && ObjectManager.Me.EnergyPercentage < 90)
            {
                ArcaneTorrent.Launch();
            }
        }

        private void Patrolling()
        {
            if (ObjectManager.Me.IsMounted) return;
            Buff();
            Heal();
        }

        #region Nested type: MonkWindwalkerSettings

        [Serializable]
        public class MonkWindwalkerSettings : Settings
        {
            public bool DoAvoidMelee = false;
            public int DoAvoidMeleeDistance = 0;
            public bool UseAlchFlask = true;
            public bool UseArcaneTorrentForDecast = true;
            public int UseArcaneTorrentForDecastAtPercentage = 100;
            public bool UseArcaneTorrentForResource = true;
            public bool UseBerserking = true;
            public bool UseBlackoutKick = true;
            public bool UseBloodFury = true;
            public bool UseChargingOxWave = true;
            public int UseChargingOxWaveAtPercentage = 90;
            public bool UseChiBrew = true;
            public bool UseChiBurst = true;
            public int UseChiBurstAtPercentage = 90;
            public bool UseChiWave = true;
            public int UseChiWaveAtPercentage = 85;
            public bool UseDampenHarm = true;
            public int UseDampenHarmAtPercentage = 90;
            public bool UseDiffuseMagic = true;
            public int UseDiffuseMagicAtPercentage = 90;
            public bool UseDisable = false;
            public bool UseEnergizingBrew = true;
            public bool UseEngGlove = true;
            public bool UseExpelHarm = true;
            public int UseExpelHarmAtPercentage = 90;
            public bool UseFistsofFury = true;
            public bool UseFortifyingBrew = true;
            public int UseFortifyingBrewAtPercentage = 80;
            public bool UseGiftoftheNaaru = true;
            public int UseGiftoftheNaaruAtPercentage = 80;
            public bool UseGrappleWeapon = true;
            public int UseGrappleWeaponAtPercentage = 95;
            public bool UseHealingSphere = true;
            public int UseHealingSphereAtPercentage = 70;
            public bool UseInvokeXuentheWhiteTiger = true;
            public bool UseJab = true;
            public bool UseLegSweep = true;
            public int UseLegSweepAtPercentage = 90;
            public bool UseLegacyoftheEmperor = true;
            public bool UseLegacyoftheWhiteTiger = true;
            public bool UseLifeblood = true;
            public bool UseProvoke = true;
            public bool UseRisingSunKick = true;
            public bool UseRoll = true;
            public bool UseRushingJadeWind = true;
            public bool UseSpearHandStrike = true;
            public int UseSpearHandStrikeAtPercentage = 100;
            public bool UseSpinningCraneKick = true;
            public bool UseStanceoftheFierceTiger = true;
            public bool UseStoneform = true;
            public int UseStoneformAtPercentage = 80;
            public bool UseTigerPalm = true;
            public bool UseTigereyeBrew = true;
            public bool UseTigersLust = true;
            public bool UseTouchofDeath = true;
            public bool UseTouchofKarma = true;
            public int UseTouchofKarmaAtPercentage = 95;
            public bool UseTrinketOne = true;
            public bool UseTrinketTwo = true;
            public bool UseWarStomp = true;
            public int UseWarStompAtPercentage = 80;
            public bool UseZenMeditation = true;
            public bool UseZenSphere = true;
            public int UseZenSphereAtPercentage = 90;

            public MonkWindwalkerSettings()
            {
                ConfigWinForm(new Point(500, 400), "Windwalker Monk Settings");
                /* Professions & Racials */
                AddControlInWinForm("Use Arcane Torrent For Decast", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Arcane Torrent For Resource", "UseArcaneTorrentForResource", "Professions & Racials");
                AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
                AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
                AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
                AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials", "AtPercentage");
                /* Monk Buffs */
                AddControlInWinForm("Use Disable", "UseDisable", "Monk Buffs");
                AddControlInWinForm("Use Legacy of the Emperor", "UseLegacyoftheEmperor", "Monk Buffs");
                AddControlInWinForm("Use Legacy of the White Tiger", "UseLegacyoftheWhiteTiger", "Monk Buffs");
                AddControlInWinForm("Use Stance of the Fierce Tiger", "UseStanceoftheFierceTiger", "Monk Buffs");
                AddControlInWinForm("Use Tigereye Brew", "UseTigereBrew", "Monk Buffs");
                AddControlInWinForm("Use Tiger's Lust", "UseTigersLust", "Monk Buffs");
                /* Offensive Spell */
                AddControlInWinForm("Use Blackout Kick", "UseBlackoutKick", "Offensive Spell");
                AddControlInWinForm("Use Fists of Fury", "UseFistsofFury", "Offensive Spell");
                AddControlInWinForm("Use Jab", "UseJab", "Offensive Spell");
                AddControlInWinForm("Use Path of Blossoms", "UsePathofBlossoms", "Offensive Spell");
                AddControlInWinForm("Use Provoke", "UseProvoke", "Offensive Spell");
                AddControlInWinForm("Use Rising Sun Kick", "UseRisingSunKick", "Offensive Spell");
                AddControlInWinForm("Use Roll", "UseRoll", "Offensive Spell");
                AddControlInWinForm("Use Spinning Crane Kick", "UseSpinningCraneKick", "Offensive Spell");
                AddControlInWinForm("Use Tiger Palm", "UseTigerPalm", "Offensive Spell");
                AddControlInWinForm("Use Touch of Death", "UseTouchofDeath", "Offensive Spell");
                /* Offensive Cooldown */
                AddControlInWinForm("Use Chi Brew", "UseChiBrew", "Offensive Cooldown");
                AddControlInWinForm("Use Energizing Brew", "UseEnergizingBrew", "Offensive Cooldown");
                AddControlInWinForm("Use Invoke Xuen, the White Tiger", "UseInvokeXuentheWhiteTiger", "Offensive Cooldown");
                AddControlInWinForm("Use Rushing Jade Wind", "UseRushingJadeWind", "Offensive Cooldown");
                /* Defensive Cooldown */
                AddControlInWinForm("Use Charging Ox Wave", "UseChargingOxWave", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Dampen Harm ", "UseDampenHarm ", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Diffuse Magic", "UseDiffuseMagic", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Fortifying Brew", "UseFortifyingBrew", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Grapple Weapon", "UseGrappleWeapon", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Leg Sweep", "UseLegSweep", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Spear Hand Strike", "UseSpearHandStrike", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Touch of Karma", "UseTouchofKarma", "Defensive Cooldown", "AtPercentage");
                AddControlInWinForm("Use Zen Meditation", "UseZenMeditation", "Defensive Cooldown");
                /* Healing Spell */
                AddControlInWinForm("Use Chi Burst", "UseChiBurst", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Chi Wave", "UseChiWave", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Expel Harm", "UseExpelHarm", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Healing Sphere", "UseHealingSphere", "Healing Spell", "AtPercentage");
                AddControlInWinForm("Use Zen Sphere", "UseZenSphere", "Healing Spell", "AtPercentage");
                /* Game Settings */
                AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
                AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
                AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
                AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
                AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
                AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
            }

            public static MonkWindwalkerSettings CurrentSetting { get; set; }

            public static MonkWindwalkerSettings GetSettings()
            {
                string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Monk_Windwalker.xml";
                if (File.Exists(currentSettingsFile))
                {
                    return
                        CurrentSetting = Load<MonkWindwalkerSettings>(currentSettingsFile);
                }
                return new MonkWindwalkerSettings();
            }
        }

        #endregion
    }

    public class MonkMistweaver
    {
        private readonly MonkMistweaverSettings _mySettings = MonkMistweaverSettings.GetSettings();

        #region General Timers & Variables

        private readonly WoWItem _firstTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET);
        private readonly WoWItem _secondTrinket = EquippedItems.GetEquippedItem(WoWInventorySlot.INVTYPE_TRINKET, 2);
        private Timer _engineeringTimer = new Timer(0);
        private Timer _grappleWeaponTimer = new Timer(0);
        private Timer _healingSphereTimer = new Timer(0);
        private Timer _onCd = new Timer(0);
        private Timer _serpentsZealTimer = new Timer(0);

        #endregion

        #region Professions & Racials

        public readonly Spell Alchemy = new Spell("Alchemy");
        public readonly Spell ArcaneTorrent = new Spell("Arcane Torrent");
        public readonly Spell Berserking = new Spell("Berserking");
        public readonly Spell BloodFury = new Spell("Blood Fury");
        public readonly Spell Engineering = new Spell("Engineering");
        public readonly Spell GiftoftheNaaru = new Spell("Gift of the Naaru");
        public readonly Spell Lifeblood = new Spell("Lifeblood");
        public readonly Spell Stoneform = new Spell("Stoneform");
        public readonly Spell WarStomp = new Spell("War Stomp");

        #endregion

        #region Monk Buffs

        public readonly Spell Disable = new Spell("Disable");
        public readonly Spell LegacyoftheEmperor = new Spell("Legacy of the Emperor");
        public readonly Spell StanceoftheFierceTiger = new Spell("Stance of the Fierce Tiger");
        public readonly Spell StanceoftheWiseSerpent = new Spell("Stance of the Wise Serpent");
        public readonly Spell SummonJadeSerpentStatue = new Spell("Summon Jade Serpent Statue");
        public readonly Spell TigersLust = new Spell("Tiger's Lust");

        #endregion

        #region Offensive Spell

        public readonly Spell BlackoutKick = new Spell("Blackout Kick");
        public readonly Spell CracklingJadeLightning = new Spell("Crackling Jade Lightning");
        public readonly Spell Jab = new Spell("Jab");
        public readonly Spell PathofBlossoms = new Spell("Path of Blossoms");
        public readonly Spell Provoke = new Spell("Provoke");
        public readonly Spell Roll = new Spell("Roll");
        public readonly Spell SpinningCraneKick = new Spell("Spinning Crane Kick");
        public readonly Spell TigerPalm = new Spell("Tiger Palm");
        public readonly Spell TouchofDeath = new Spell("Touch of Death");

        #endregion

        #region Healing Cooldown

        public readonly Spell ChiBrew = new Spell("Chi Brew");
        public readonly Spell InvokeXuentheWhiteTiger = new Spell("Invoke Xuen, the White Tiger");
        public readonly Spell RushingJadeWind = new Spell("Rushing Jade Wind");
        public readonly Spell ThunderFocusTea = new Spell("Thunder Focus Tea");

        #endregion

        #region Defensive Cooldown

        public readonly Spell ChargingOxWave = new Spell("Charging Ox Wave");
        public readonly Spell DampenHarm = new Spell("Dampen Harm");
        public readonly Spell DiffuseMagic = new Spell("Diffuse Magic");
        public readonly Spell FortifyingBrew = new Spell("Fortifying Brew");
        public readonly Spell GrappleWeapon = new Spell("Grapple Weapon");
        public readonly Spell LegSweep = new Spell("Leg Sweep");
        public readonly Spell LifeCocoon = new Spell("Life Cocoon");
        public readonly Spell SpearHandStrike = new Spell("Spear Hand Strike");
        public readonly Spell ZenMeditation = new Spell("Zen Meditation");

        #endregion

        #region Healing Spell

        public readonly Spell ChiBurst = new Spell("Chi Burst");
        public readonly Spell ChiWave = new Spell("Chi Wave");
        public readonly Spell EnvelopingMist = new Spell("Enveloping Mist");
        public readonly Spell ExpelHarm = new Spell("Expel Harm");
        public readonly Spell HealingSphere = new Spell("Healing Sphere");
        public readonly Spell ManaTea = new Spell("Mana Tea");
        public readonly Spell RenewingMist = new Spell("Renewing Mist");
        public readonly Spell Revival = new Spell("Revival");
        public readonly Spell SoothingMist = new Spell("Soothing Mist");
        public readonly Spell SurgingMist = new Spell("Surging Mist");
        public readonly Spell Uplift = new Spell("Uplift");
        public readonly Spell ZenSphere = new Spell("Zen Sphere");

        #endregion

        public MonkMistweaver()
        {
            Main.InternalRange = 30.0f;
            UInt64 lastTarget = 0;

            while (Main.InternalLoop)
            {
                try
                {
                    if (!ObjectManager.Me.IsDead)
                    {
                        if (!ObjectManager.Me.IsMounted)
                        {
                            if (Fight.InFight && ObjectManager.Me.Target > 0)
                            {
                                if (ObjectManager.Me.Target != lastTarget &&
                                    Provoke.IsHostileDistanceGood)
                                {
                                    Pull();
                                    lastTarget = ObjectManager.Me.Target;
                                }

                                if (ObjectManager.Target.GetDistance < 41)
                                    Combat();
                                break;
                            }
                            if (!ObjectManager.Me.IsCast)
                                Patrolling();
                        }
                    }
                    else
                        Thread.Sleep(500);
                }
catch
                {
                }
                Thread.Sleep(150);
            }
        }

        private void Pull()
        {
            if (!ObjectManager.Target.InCombat && Provoke.IsSpellUsable && Provoke.IsHostileDistanceGood
                && _mySettings.UseProvoke && Provoke.KnownSpell)
            {
                Provoke.Launch();
            }
        }

        private void Combat()
        {
            Buff();
            if (_mySettings.DoAvoidMelee)
                AvoidMelee();
            if (_onCd.IsReady)
                DefenseCycle();
            DPSCycle();
            Heal();
            Decast();
            DPSCycle();
            HealingBurst();
            DPSCycle();
        }

        private void Buff()
        {
            if (ObjectManager.Me.IsMounted)
                return;

            if (LegacyoftheEmperor.KnownSpell && LegacyoftheEmperor.IsSpellUsable &&
                !LegacyoftheEmperor.HaveBuff && _mySettings.UseLegacyoftheEmperor)
            {
                LegacyoftheEmperor.Launch();
                return;
            }
            if (StanceoftheWiseSerpent.KnownSpell && StanceoftheWiseSerpent.IsSpellUsable && !StanceoftheWiseSerpent.HaveBuff
                && _mySettings.UseStanceoftheWiseSerpent)
            {
                StanceoftheWiseSerpent.Launch();
                return;
            }
            if (!ObjectManager.Me.InCombat && TigersLust.IsSpellUsable && TigersLust.KnownSpell
                && _mySettings.UseTigersLust && ObjectManager.Me.GetMove)
            {
                TigersLust.Launch();
                return;
            }
            if (!ObjectManager.Me.InCombat && Roll.IsSpellUsable && Roll.KnownSpell
                && _mySettings.UseRoll && ObjectManager.Me.GetMove && !TigersLust.HaveBuff
                && ObjectManager.Target.GetDistance > 14)
            {
                Roll.Launch();
                return;
            }
            if (ObjectManager.Me.InCombat && SummonJadeSerpentStatue.IsSpellUsable && SummonJadeSerpentStatue.KnownSpell
                && _mySettings.UseSummonJadeSerpentStatue && !SummonJadeSerpentStatue.HaveBuff && ObjectManager.Target.GetDistance < 41)
            {
                SummonJadeSerpentStatue.Launch();
                return;
            }
            if (_mySettings.UseAlchFlask && !ObjectManager.Me.HaveBuff(79638) && !ObjectManager.Me.HaveBuff(79640) && !ObjectManager.Me.HaveBuff(79639)
                && !ItemsManager.IsItemOnCooldown(75525) && ItemsManager.GetItemCountByIdLUA(75525) > 0)
            {
                ItemsManager.UseItem(75525);
            }
        }

        private void AvoidMelee()
        {
            if (ObjectManager.Target.GetDistance < _mySettings.DoAvoidMeleeDistance && ObjectManager.Target.InCombat)
            {
                Logging.WriteFight("Too Close. Moving Back");
                var maxTimeTimer = new Timer(1000*2);
                MovementsAction.MoveBackward(true);
                while (ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat && !maxTimeTimer.IsReady)
                    Thread.Sleep(300);
                MovementsAction.MoveBackward(false);
                if (maxTimeTimer.IsReady && ObjectManager.Target.GetDistance < 2 && ObjectManager.Target.InCombat)
                {
                    MovementsAction.MoveForward(true);
                    Thread.Sleep(1000);
                    MovementsAction.MoveForward(false);
                    MovementManager.Face(ObjectManager.Target.Position);
                }
            }
        }

        private void DefenseCycle()
        {
            if (ObjectManager.Me.HealthPercent < 95 && _mySettings.UseGrappleWeapon && GrappleWeapon.IsHostileDistanceGood
                && GrappleWeapon.KnownSpell && GrappleWeapon.IsSpellUsable && _grappleWeaponTimer.IsReady)
            {
                GrappleWeapon.Launch();
                _grappleWeaponTimer = new Timer(1000*60);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 80 && FortifyingBrew.IsSpellUsable && FortifyingBrew.KnownSpell
                && _mySettings.UseFortifyingBrew)
            {
                FortifyingBrew.Launch();
                _onCd = new Timer(1000*20);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 80 && LifeCocoon.IsSpellUsable && LifeCocoon.KnownSpell
                && _mySettings.UseLifeCocoon)
            {
                LifeCocoon.Launch();
                _onCd = new Timer(1000*12);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 90 && ChargingOxWave.IsSpellUsable && ChargingOxWave.KnownSpell
                && _mySettings.UseChargingOxWave && ChargingOxWave.IsHostileDistanceGood)
            {
                ChargingOxWave.Launch();
                _onCd = new Timer(1000*3);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 90 && DampenHarm.IsSpellUsable && DampenHarm.KnownSpell
                && _mySettings.UseDampenHarm)
            {
                DampenHarm.Launch();
                _onCd = new Timer(1000*5);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 90 && LegSweep.IsSpellUsable && LegSweep.KnownSpell
                && _mySettings.UseLegSweep && ObjectManager.Target.GetDistance < 6)
            {
                LegSweep.Launch();
                _onCd = new Timer(1000*5);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 80 && ZenMeditation.IsSpellUsable && ZenMeditation.KnownSpell
                && _mySettings.UseZenMeditation)
            {
                ZenMeditation.Launch();
                _onCd = new Timer(1000*8);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 80 && Stoneform.IsSpellUsable && Stoneform.KnownSpell
                && _mySettings.UseStoneform)
            {
                Stoneform.Launch();
                _onCd = new Timer(1000*8);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 80 && WarStomp.IsSpellUsable && WarStomp.KnownSpell
                && _mySettings.UseWarStomp)
            {
                WarStomp.Launch();
                _onCd = new Timer(1000*2);
            }
        }

        private void Heal()
        {
            if (_mySettings.UseArcaneTorrentForResource && ArcaneTorrent.KnownSpell && ArcaneTorrent.IsSpellUsable
                && ObjectManager.Me.ManaPercentage <= _mySettings.UseArcaneTorrentForResourceAtPercentage)
            {
                ArcaneTorrent.Launch();
                return;
            }

            if (ObjectManager.Me.ManaPercentage < 50 && ManaTea.KnownSpell && ManaTea.IsSpellUsable
                && _mySettings.UseManaTea && ObjectManager.Me.BuffStack(115867) > 4
                && !ObjectManager.Me.InCombat)
            {
                ManaTea.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 95 && SurgingMist.KnownSpell && SurgingMist.IsSpellUsable
                && _mySettings.UseSurgingMist && ObjectManager.Me.BuffStack(118674) > 4
                && !ObjectManager.Me.InCombat)
            {
                SurgingMist.Launch();
                return;
            }
            if (HealingSphere.KnownSpell && HealingSphere.IsSpellUsable && ObjectManager.Me.Energy > 39 &&
                ObjectManager.Me.HealthPercent < 60 && _mySettings.UseHealingSphere && _healingSphereTimer.IsReady)
            {
                SpellManager.CastSpellByIDAndPosition(115460, ObjectManager.Me.Position);
                _healingSphereTimer = new Timer(1000*5);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 70 && SurgingMist.KnownSpell && SurgingMist.IsSpellUsable
                && _mySettings.UseSurgingMist)
            {
                SurgingMist.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 85 && Uplift.KnownSpell && Uplift.IsSpellUsable
                && _mySettings.UseUplift && RenewingMist.HaveBuff)
            {
                Uplift.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 85 && ChiWave.KnownSpell && ChiWave.IsSpellUsable
                && _mySettings.UseChiWave)
            {
                ChiWave.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 90 && ChiBurst.KnownSpell && ChiBurst.IsSpellUsable
                && _mySettings.UseChiBurst)
            {
                ChiBurst.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 90 && ExpelHarm.KnownSpell && ExpelHarm.IsSpellUsable
                && _mySettings.UseExpelHarm && ExpelHarm.IsHostileDistanceGood)
            {
                ExpelHarm.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 90 && EnvelopingMist.KnownSpell && EnvelopingMist.IsSpellUsable
                && _mySettings.UseEnvelopingMist && !EnvelopingMist.HaveBuff)
            {
                EnvelopingMist.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 95 && SurgingMist.KnownSpell && SurgingMist.IsSpellUsable
                && _mySettings.UseSurgingMist && ObjectManager.Me.BuffStack(118674) > 4)
            {
                SurgingMist.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 95 && SoothingMist.KnownSpell && SoothingMist.IsSpellUsable
                && _mySettings.UseSoothingMist && !SoothingMist.HaveBuff && !ObjectManager.Me.IsCast)
            {
                SoothingMist.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 95 && RenewingMist.KnownSpell && RenewingMist.IsSpellUsable
                && _mySettings.UseRenewingMist && !RenewingMist.HaveBuff)
            {
                RenewingMist.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 95 && ZenSphere.KnownSpell && ZenSphere.IsSpellUsable
                && _mySettings.UseZenSphere)
            {
                ZenSphere.Launch();
            }
        }

        private void Decast()
        {
            if (ArcaneTorrent.KnownSpell && _mySettings.UseArcaneTorrentForDecast && ArcaneTorrent.IsSpellUsable &&
                ObjectManager.Me.HealthPercent <= _mySettings.UseArcaneTorrentForDecastAtPercentage
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe && ObjectManager.Target.GetDistance < 8)
            {
                ArcaneTorrent.Launch();
                return;
            }
            if (DiffuseMagic.KnownSpell && _mySettings.UseDiffuseMagic && DiffuseMagic.IsSpellUsable
                && ObjectManager.Target.IsCast && ObjectManager.Target.IsTargetingMe)
            {
                DiffuseMagic.Launch();
                return;
            }
            if (SpearHandStrike.KnownSpell && _mySettings.UseSpearHandStrike && ObjectManager.Target.IsCast
                && SpearHandStrike.IsSpellUsable && SpearHandStrike.IsHostileDistanceGood)
            {
                SpearHandStrike.Launch();
                return;
            }
            if (ObjectManager.Target.GetMove && !Disable.TargetHaveBuff && _mySettings.UseDisable
                && Disable.KnownSpell && Disable.IsSpellUsable && Disable.IsHostileDistanceGood)
            {
                Disable.Launch();
            }
        }

        private void HealingBurst()
        {
            if (_mySettings.UseTrinketOne && !ItemsManager.IsItemOnCooldown(_firstTrinket.Entry) && ItemsManager.IsUsableItemById(_firstTrinket.Entry))
            {
                ItemsManager.UseItem(_firstTrinket.Name);
                Logging.WriteFight("Use First Trinket Slot");
            }

            if (_mySettings.UseTrinketTwo && !ItemsManager.IsItemOnCooldown(_secondTrinket.Entry) && ItemsManager.IsUsableItemById(_secondTrinket.Entry))
            {
                ItemsManager.UseItem(_secondTrinket.Name);
                Logging.WriteFight("Use Second Trinket Slot");
                return;
            }
            if (Berserking.IsSpellUsable && Berserking.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseBerserking)
            {
                Berserking.Launch();
                return;
            }
            if (BloodFury.IsSpellUsable && BloodFury.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseBloodFury)
            {
                BloodFury.Launch();
                return;
            }
            if (Lifeblood.IsSpellUsable && Lifeblood.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseLifeblood)
            {
                Lifeblood.Launch();
                return;
            }
            if (_engineeringTimer.IsReady && Engineering.KnownSpell && ObjectManager.Target.GetDistance < 41
                && _mySettings.UseEngGlove)
            {
                Logging.WriteFight("Use Engineering Gloves.");
                Lua.RunMacroText("/use 10");
                _engineeringTimer = new Timer(1000*60);
                return;
            }
            if (ChiBrew.IsSpellUsable && ChiBrew.KnownSpell
                && _mySettings.UseChiBrew && ObjectManager.Me.Chi == 0)
            {
                ChiBrew.Launch();
                return;
            }
            if (TouchofDeath.IsSpellUsable && TouchofDeath.KnownSpell && TouchofDeath.IsHostileDistanceGood
                && _mySettings.UseTouchofDeath)
            {
                TouchofDeath.Launch();
                return;
            }
            if (InvokeXuentheWhiteTiger.IsSpellUsable && InvokeXuentheWhiteTiger.KnownSpell
                && _mySettings.UseInvokeXuentheWhiteTiger && InvokeXuentheWhiteTiger.IsHostileDistanceGood)
            {
                InvokeXuentheWhiteTiger.Launch();
                return;
            }
            if (ThunderFocusTea.IsSpellUsable && ThunderFocusTea.KnownSpell
                && _mySettings.UseThunderFocusTea && ObjectManager.Me.HealthPercent < 90)
            {
                ThunderFocusTea.Launch();
                return;
            }
            if (ObjectManager.Me.HealthPercent < 80 && Revival.KnownSpell && Revival.IsSpellUsable
                && _mySettings.UseRevival)
            {
                Revival.Launch();
                return;
            }
            if (RushingJadeWind.IsSpellUsable && RushingJadeWind.KnownSpell && RushingJadeWind.IsHostileDistanceGood
                && _mySettings.UseRushingJadeWind && ObjectManager.GetNumberAttackPlayer() > 3)
            {
                RushingJadeWind.Launch();
            }
        }

        private void DPSCycle()
        {
            if (ObjectManager.GetNumberAttackPlayer() > 2 && SpinningCraneKick.IsSpellUsable && SpinningCraneKick.KnownSpell
                && SpinningCraneKick.IsHostileDistanceGood && !ObjectManager.Me.IsCast && _mySettings.UseSpinningCraneKick)
            {
                SpinningCraneKick.Launch();
                return;
            }
            if (CracklingJadeLightning.KnownSpell && CracklingJadeLightning.IsSpellUsable
                && _mySettings.UseCracklingJadeLightning && ObjectManager.Me.Chi < 4 && CracklingJadeLightning.IsHostileDistanceGood
                && !ExpelHarm.IsHostileDistanceGood)
            {
                CracklingJadeLightning.Launch();
                return;
            }
            if (BlackoutKick.KnownSpell && BlackoutKick.IsSpellUsable && BlackoutKick.IsHostileDistanceGood
                && _mySettings.UseBlackoutKick && (!ObjectManager.Me.HaveBuff(127722) || _serpentsZealTimer.IsReady))
            {
                BlackoutKick.Launch();
                _serpentsZealTimer = new Timer(1000*25);
                return;
            }
            if (ObjectManager.Me.HealthPercent < 91 && ExpelHarm.KnownSpell && ExpelHarm.IsSpellUsable
                && _mySettings.UseExpelHarm && ObjectManager.Me.Chi < 4 && ExpelHarm.IsHostileDistanceGood)
            {
                ExpelHarm.Launch();
                return;
            }
            if (Jab.KnownSpell && Jab.IsSpellUsable && _mySettings.UseJab && ObjectManager.Me.Chi < 4
                && Jab.IsHostileDistanceGood)
            {
                Jab.Launch();
                return;
            }
            if (TigerPalm.KnownSpell && TigerPalm.IsSpellUsable && TigerPalm.IsHostileDistanceGood
                && _mySettings.UseTigerPalm && ObjectManager.Me.HealthPercent > 90
                && ObjectManager.Me.BuffStack(125359) < 3)
            {
                TigerPalm.Launch();
            }
        }

        private void Patrolling()
        {
            if (ObjectManager.Me.IsMounted) return;
            Buff();
            Heal();
        }

        #region Nested type: MonkMistweaverSettings

        [Serializable]
        public class MonkMistweaverSettings : Settings
        {
            public bool DoAvoidMelee = false;
            public int DoAvoidMeleeDistance = 0;
            public bool UseAlchFlask = true;
            public bool UseArcaneTorrentForDecast = true;
            public int UseArcaneTorrentForDecastAtPercentage = 100;
            public bool UseArcaneTorrentForResource = true;
            public int UseArcaneTorrentForResourceAtPercentage = 80;
            public bool UseBerserking = true;
            public bool UseBlackoutKick = true;
            public bool UseBloodFury = true;
            public bool UseChargingOxWave = true;
            public bool UseChiBrew = true;
            public bool UseChiBurst = true;
            public bool UseChiWave = true;
            public bool UseCracklingJadeLightning = true;
            public bool UseDampenHarm = true;
            public bool UseDiffuseMagic = true;
            public bool UseDisable = false;
            public bool UseEngGlove = true;
            public bool UseEnvelopingMist = true;
            public bool UseExpelHarm = true;
            public bool UseFortifyingBrew = true;
            public bool UseGiftoftheNaaru = true;
            public bool UseGrappleWeapon = true;
            public bool UseHealingSphere = true;
            public bool UseInvokeXuentheWhiteTiger = true;
            public bool UseJab = true;
            public bool UseLegSweep = true;
            public bool UseLegacyoftheEmperor = true;
            public bool UseLifeCocoon = true;
            public bool UseLifeblood = true;
            public bool UseManaTea = true;
            public bool UsePathofBlossoms = true;
            public bool UseProvoke = true;
            public bool UseRenewingMist = true;
            public bool UseRevival = true;
            public bool UseRoll = true;
            public bool UseRushingJadeWind = true;
            public bool UseSoothingMist = false;
            public bool UseSpearHandStrike = true;
            public bool UseSpinningCraneKick = true;
            public bool UseStanceoftheFierceTiger = true;
            public bool UseStanceoftheWiseSerpent = true;
            public bool UseStoneform = true;
            public bool UseSummonJadeSerpentStatue = true;
            public bool UseSurgingMist = true;
            public bool UseThunderFocusTea = true;
            public bool UseTigerPalm = true;
            public bool UseTigersLust = true;
            public bool UseTouchofDeath = true;
            public bool UseTrinketOne = true;
            public bool UseTrinketTwo = true;
            public bool UseUplift = true;
            public bool UseWarStomp = true;
            public bool UseZenMeditation = true;
            public bool UseZenSphere = true;

            public MonkMistweaverSettings()
            {
                ConfigWinForm(new Point(500, 400), "Mistweaver Monk Settings");
                /* Professions & Racials */
                AddControlInWinForm("Use Arcane Torrent For Decast", "UseArcaneTorrentForDecast", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Arcane Torrent For Resource", "UseArcaneTorrentForResource", "Professions & Racials", "AtPercentage");
                AddControlInWinForm("Use Berserking", "UseBerserking", "Professions & Racials");
                AddControlInWinForm("Use Blood Fury", "UseBloodFury", "Professions & Racials");
                AddControlInWinForm("Use Gift of the Naaru", "UseGiftoftheNaaru", "Professions & Racials");
                AddControlInWinForm("Use Lifeblood", "UseLifeblood", "Professions & Racials");
                AddControlInWinForm("Use Stoneform", "UseStoneform", "Professions & Racials");
                AddControlInWinForm("Use War Stomp", "UseWarStomp", "Professions & Racials");
                /* Monk Buffs */
                AddControlInWinForm("Use Disable", "UseDisable", "Monk Buffs");
                AddControlInWinForm("Use Legacy of the Emperor", "UseLegacyoftheEmperor", "Monk Buffs");
                AddControlInWinForm("Use Stance of the Fierce Tiger", "UseStanceoftheFierceTiger", "Monk Buffs");
                AddControlInWinForm("Use Summon Jade Serpent Statue", "UseSummonJadeSerpentStatue", "Monk Buffs");
                AddControlInWinForm("Use Tiger's Lust", "UseTigersLust", "Monk Buffs");
                /* Offensive Spell */
                AddControlInWinForm("Use Chi Wave", "UseChiWave", "Offensive Spell");
                AddControlInWinForm("Use Blackout Kick", "UseBlackoutKick", "Offensive Spell");
                AddControlInWinForm("Use Crackling Jade Lightning", "UseCracklingJadeLightning", "Offensive Spell");
                AddControlInWinForm("Use Jab", "UseJab", "Offensive Spell");
                AddControlInWinForm("Use Path of Blossoms", "UsePathofBlossoms", "Offensive Spell");
                AddControlInWinForm("Use Provoke", "UseProvoke", "Offensive Spell");
                AddControlInWinForm("Use Roll", "UseRoll", "Offensive Spell");
                AddControlInWinForm("Use Spinning Crane Kick", "UseSpinningCraneKick", "Offensive Spell");
                AddControlInWinForm("Use Tiger Palm", "UseTigerPalm", "Offensive Spell");
                AddControlInWinForm("Use Touch of Death", "UseTouchofDeath", "Offensive Spell");
                /* Healing Cooldown */
                AddControlInWinForm("Use Chi Brew", "UseChiBrew", "Healing Cooldown");
                AddControlInWinForm("Use Invoke Xuen, the White Tiger", "UseInvokeXuentheWhiteTiger", "Healing Cooldown");
                AddControlInWinForm("Use Revival", "UseRevival", "Healing Cooldown");
                AddControlInWinForm("Use Rushing Jade Wind", "UseRushingJadeWind", "Healing Cooldown");
                AddControlInWinForm("Use Thunder Focus Tea", "UseThunderFocusTea", "Healing Cooldown");
                /* Defensive Cooldown */
                AddControlInWinForm("Use Charging Ox Wave", "UseChargingOxWave", "Defensive Cooldown");
                AddControlInWinForm("Use Dampen Harm ", "UseDampenHarm ", "Defensive Cooldown");
                AddControlInWinForm("Use Diffuse Magic", "UseDiffuseMagic", "Defensive Cooldown");
                AddControlInWinForm("Use Fortifying Brew", "UseFortifyingBrew", "Defensive Cooldown");
                AddControlInWinForm("Use Grapple Weapon", "UseGrappleWeapon", "Defensive Cooldown");
                AddControlInWinForm("Use Leg Sweep", "UseLegSweep", "Defensive Cooldown");
                AddControlInWinForm("Use Life Cocoon", "UseLifeCocoon", "Defensive Cooldown");
                AddControlInWinForm("Use Spear Hand Strike", "UseSpearHandStrike", "Defensive Cooldown");
                AddControlInWinForm("Use Zen Meditation", "UseZenMeditation", "Defensive Cooldown");
                /* Healing Spell */
                AddControlInWinForm("Use Chi Burst", "UseChiBurst", "Healing Spell");
                AddControlInWinForm("Use Enveloping Mist", "UseEnvelopingMist", "Healing Spell");
                AddControlInWinForm("Use Expel Harm", "UseExpelHarm", "Healing Spell");
                AddControlInWinForm("Use Healing Sphere", "UseHealingSphere", "Healing Spell");
                AddControlInWinForm("Use Mana Tea", "UseManaTea", "Healing Spell");
                AddControlInWinForm("Use Renewing Mist", "UseRenewingMist", "Healing Spell");
                AddControlInWinForm("Use Soothing Mist", "UseSoothingMist", "Healing Spell");
                AddControlInWinForm("Use Surging Mist", "UseSurgingMist", "Healing Spell");
                AddControlInWinForm("Use Uplift", "UseUplift", "Healing Spell");
                AddControlInWinForm("Use Zen Sphere", "UseZenSphere", "Healing Spell");
                /* Game Settings */
                AddControlInWinForm("Use Trinket One", "UseTrinketOne", "Game Settings");
                AddControlInWinForm("Use Trinket Two", "UseTrinketTwo", "Game Settings");
                AddControlInWinForm("Use Engineering Gloves", "UseEngGlove", "Game Settings");
                AddControlInWinForm("Use Alchemist Flask", "UseAlchFlask", "Game Settings");
                AddControlInWinForm("Do avoid melee (Off Advised!!)", "DoAvoidMelee", "Game Settings");
                AddControlInWinForm("Avoid melee distance (1 to 4)", "DoAvoidMeleeDistance", "Game Settings");
            }

            public static MonkMistweaverSettings CurrentSetting { get; set; }

            public static MonkMistweaverSettings GetSettings()
            {
                string currentSettingsFile = Application.StartupPath + "\\CombatClasses\\Settings\\Monk_Mistweaver.xml";
                if (File.Exists(currentSettingsFile))
                {
                    return
                        CurrentSetting = Load<MonkMistweaverSettings>(currentSettingsFile);
                }
                return new MonkMistweaverSettings();
            }
        }

        #endregion
    }

    #endregion
}
// ReSharper restore ObjectCreationAsStatement
// ReSharper restore EmptyGeneralCatchClause