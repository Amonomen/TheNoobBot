diff --git a/The Noob Bot/Archaeologist/DigSites List Management.cs b/The Noob Bot/Archaeologist/DigSites List Management.cs
index 32d5828..406b11e 100644
--- a/The Noob Bot/Archaeologist/DigSites List Management.cs	
+++ b/The Noob Bot/Archaeologist/DigSites List Management.cs	
@@ -18,7 +18,7 @@ namespace Archaeologist
 
                 solvingEveryXMin.Value = Bot.ArchaeologistSetting.CurrentSetting.solvingEveryXMin;
                 maxTryByDigsite.Value = Bot.ArchaeologistSetting.CurrentSetting.maxTryByDigsite;
-                if (nManager.nManagerSetting.CurrentSetting.AlwaysOnTop)
+                if (nManager.nManagerSetting.CurrentSetting.ActivateAlwaysOnTopFeature)
                     this.TopMost = true;
             }
             catch (Exception e)
diff --git a/The Noob Bot/Battlegrounder/Profile/ProfileCreator.cs b/The Noob Bot/Battlegrounder/Profile/ProfileCreator.cs
index 9bfbb6a..30e55c2 100644
--- a/The Noob Bot/Battlegrounder/Profile/ProfileCreator.cs	
+++ b/The Noob Bot/Battlegrounder/Profile/ProfileCreator.cs	
@@ -17,7 +17,7 @@ namespace Battlegrounder.Profile
             {
                 InitializeComponent();
                 Translate();
-                if (nManager.nManagerSetting.CurrentSetting.AlwaysOnTop)
+                if (nManager.nManagerSetting.CurrentSetting.ActivateAlwaysOnTopFeature)
                     this.TopMost = true;
             }
             catch (Exception e)
diff --git a/The Noob Bot/Battlegrounder/SettingsBattlegrounderForm.cs b/The Noob Bot/Battlegrounder/SettingsBattlegrounderForm.cs
index da90e78..6725b5d 100644
--- a/The Noob Bot/Battlegrounder/SettingsBattlegrounderForm.cs	
+++ b/The Noob Bot/Battlegrounder/SettingsBattlegrounderForm.cs	
@@ -11,7 +11,7 @@ namespace Battlegrounder
         {
             InitializeComponent();
             translate();
-            if (nManagerSetting.CurrentSetting.AlwaysOnTop)
+            if (nManagerSetting.CurrentSetting.ActivateAlwaysOnTopFeature)
                 this.TopMost = true;
             Load();
         }
diff --git a/The Noob Bot/Fisherbot/Bot/FisherbotState.cs b/The Noob Bot/Fisherbot/Bot/FisherbotState.cs
index b76860c..b1b4a69 100644
--- a/The Noob Bot/Fisherbot/Bot/FisherbotState.cs	
+++ b/The Noob Bot/Fisherbot/Bot/FisherbotState.cs	
@@ -44,7 +44,7 @@ namespace Fisherbot.Bot
                     !ObjectManager.Me.IsValid ||
                     (ObjectManager.Me.InCombat &&
                      !(ObjectManager.Me.IsMounted &&
-                       (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))) ||
+                       (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))) ||
                     !Products.IsStarted)
                     return false;
 
@@ -58,7 +58,7 @@ namespace Fisherbot.Bot
 
                     if (_node.IsValid && _node.GetBaseAddress > 0)
                         if (!nManagerSetting.IsBlackListedZone(_node.Position) &&
-                            _node.GetDistance2D < nManagerSetting.CurrentSetting.searchRadius &&
+                            _node.GetDistance2D < nManagerSetting.CurrentSetting.GatheringSearchRadius &&
                             !nManagerSetting.IsBlackListed(_node.Guid) && _node.IsValid)
                             return true;
                 }
@@ -126,7 +126,7 @@ namespace Fisherbot.Bot
                        !ObjectManager.Me.IsDeadMe &&
                        !(ObjectManager.Me.InCombat &&
                          !(ObjectManager.Me.IsMounted &&
-                           (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))) &&
+                           (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))) &&
                        !timer.IsReady && MovementManager.InMovement)
                 {
                     if (ObjectManager.Me.Position.DistanceTo2D(whereToGo) <= 0.2f)
diff --git a/The Noob Bot/Fisherbot/SettingsFisherbotForm.cs b/The Noob Bot/Fisherbot/SettingsFisherbotForm.cs
index 84dbf14..58bb4dd 100644
--- a/The Noob Bot/Fisherbot/SettingsFisherbotForm.cs	
+++ b/The Noob Bot/Fisherbot/SettingsFisherbotForm.cs	
@@ -12,7 +12,7 @@ namespace Fisherbot
             InitializeComponent();
             translate();
             fishSchoolProfil.DropDownStyle = ComboBoxStyle.DropDownList;
-            if (nManagerSetting.CurrentSetting.AlwaysOnTop)
+            if (nManagerSetting.CurrentSetting.ActivateAlwaysOnTopFeature)
                 this.TopMost = true;
             Load();
         }
diff --git a/The Noob Bot/Gatherer/Bot/LoadProfile.cs b/The Noob Bot/Gatherer/Bot/LoadProfile.cs
index 93249fe..6c28e21 100644
--- a/The Noob Bot/Gatherer/Bot/LoadProfile.cs	
+++ b/The Noob Bot/Gatherer/Bot/LoadProfile.cs	
@@ -17,7 +17,7 @@ namespace Gatherer.Bot
                 TopMost = true;
                 listProfileCb.DropDownStyle = ComboBoxStyle.DropDownList;
                 listProfileCb.Text = GathererSetting.CurrentSetting.profileName;
-                if (nManager.nManagerSetting.CurrentSetting.AlwaysOnTop)
+                if (nManager.nManagerSetting.CurrentSetting.ActivateAlwaysOnTopFeature)
                     this.TopMost = true;
             }
             catch (Exception e)
diff --git a/The Noob Bot/Gatherer/Bot/ProfileCreator.cs b/The Noob Bot/Gatherer/Bot/ProfileCreator.cs
index a8dae67..8f01b06 100644
--- a/The Noob Bot/Gatherer/Bot/ProfileCreator.cs	
+++ b/The Noob Bot/Gatherer/Bot/ProfileCreator.cs	
@@ -25,7 +25,7 @@ namespace Gatherer.Bot
                     npcTypeC.Items.Add(t.ToString());
                 }
                 npcTypeC.Text = Npc.NpcType.None.ToString();
-                if (nManager.nManagerSetting.CurrentSetting.AlwaysOnTop)
+                if (nManager.nManagerSetting.CurrentSetting.ActivateAlwaysOnTopFeature)
                     this.TopMost = true;
             }
             catch (Exception e)
diff --git a/The Noob Bot/Grinder/Bot/LoadProfile.cs b/The Noob Bot/Grinder/Bot/LoadProfile.cs
index b61d4ac..0804730 100644
--- a/The Noob Bot/Grinder/Bot/LoadProfile.cs	
+++ b/The Noob Bot/Grinder/Bot/LoadProfile.cs	
@@ -18,7 +18,7 @@ namespace Grinder.Bot
                 TopMost = true;
                 listProfileCb.DropDownStyle = ComboBoxStyle.DropDownList;
                 listProfileCb.Text = GrinderSetting.CurrentSetting.profileName;
-                if (nManager.nManagerSetting.CurrentSetting.AlwaysOnTop)
+                if (nManager.nManagerSetting.CurrentSetting.ActivateAlwaysOnTopFeature)
                     this.TopMost = true;
             }
             catch (Exception e)
diff --git a/The Noob Bot/Grinder/Profile/ProfileCreator.cs b/The Noob Bot/Grinder/Profile/ProfileCreator.cs
index 90fd3ce..4e13a3d 100644
--- a/The Noob Bot/Grinder/Profile/ProfileCreator.cs	
+++ b/The Noob Bot/Grinder/Profile/ProfileCreator.cs	
@@ -28,7 +28,7 @@ namespace Grinder.Profile
                 npcTypeC.Text = Npc.NpcType.None.ToString();
 
                 refreshListZones();
-                if (nManagerSetting.CurrentSetting.AlwaysOnTop)
+                if (nManagerSetting.CurrentSetting.ActivateAlwaysOnTopFeature)
                     this.TopMost = true;
             }
             catch (Exception e)
diff --git a/The Noob Bot/Milling/Milling.cs b/The Noob Bot/Milling/Milling.cs
index 3af8599..1ea0098 100644
--- a/The Noob Bot/Milling/Milling.cs	
+++ b/The Noob Bot/Milling/Milling.cs	
@@ -14,7 +14,7 @@ namespace Milling
 
         static void ThreadPulse()
         {
-            if (nManager.nManagerSetting.CurrentSetting.millingList.Count <= 0)
+            if (nManager.nManagerSetting.CurrentSetting.HerbsToBeMilled.Count <= 0)
             {
                 MessageBox.Show(nManager.Translate.Get(nManager.Translate.Id.Please_add_items_to_mil_in__General_Settings_____Looting_____Milling_List));
                 nManager.Products.Products.ProductStop();
diff --git a/The Noob Bot/Profiles Converters/formMain.cs b/The Noob Bot/Profiles Converters/formMain.cs
index 36836d6..131926c 100644
--- a/The Noob Bot/Profiles Converters/formMain.cs	
+++ b/The Noob Bot/Profiles Converters/formMain.cs	
@@ -10,7 +10,7 @@ namespace Profiles_Converters
         {
             InitializeComponent();
             Translate();
-            if (nManager.nManagerSetting.CurrentSetting.AlwaysOnTop)
+            if (nManager.nManagerSetting.CurrentSetting.ActivateAlwaysOnTopFeature)
                 this.TopMost = true;
         }
         void Translate()
diff --git a/The Noob Bot/Prospecting/Prospecting.cs b/The Noob Bot/Prospecting/Prospecting.cs
index f5ae315..c22a9c3 100644
--- a/The Noob Bot/Prospecting/Prospecting.cs	
+++ b/The Noob Bot/Prospecting/Prospecting.cs	
@@ -14,7 +14,7 @@ namespace Prospecting
 
         static void ThreadPulse()
         {
-            if (nManager.nManagerSetting.CurrentSetting.prospectingList.Count <= 0)
+            if (nManager.nManagerSetting.CurrentSetting.MineralsToProspect.Count <= 0)
             {
                 MessageBox.Show(nManager.Translate.Get(nManager.Translate.Id.Please_add_items_to_prospect_in__General_Settings_____Looting_____Prospecting_List));
                 nManager.Products.Products.ProductStop();
diff --git a/The Noob Bot/Quester/Bot/LoadProfile.cs b/The Noob Bot/Quester/Bot/LoadProfile.cs
index 47aef95..f4ecd74 100644
--- a/The Noob Bot/Quester/Bot/LoadProfile.cs	
+++ b/The Noob Bot/Quester/Bot/LoadProfile.cs	
@@ -18,7 +18,7 @@ namespace Quester.Bot
                 TopMost = true;
                 listProfileCb.DropDownStyle = ComboBoxStyle.DropDownList;
                 listProfileCb.Text = QuesterSetting.CurrentSetting.profileName;
-                if (nManager.nManagerSetting.CurrentSetting.AlwaysOnTop)
+                if (nManager.nManagerSetting.CurrentSetting.ActivateAlwaysOnTopFeature)
                     this.TopMost = true;
             }
             catch (Exception e)
diff --git a/The Noob Bot/Quester/Bot/QuesterState.cs b/The Noob Bot/Quester/Bot/QuesterState.cs
index 6810cb8..fa835e1 100644
--- a/The Noob Bot/Quester/Bot/QuesterState.cs	
+++ b/The Noob Bot/Quester/Bot/QuesterState.cs	
@@ -37,7 +37,7 @@ namespace Quester.Bot
                    Usefuls.IsLoadingOrConnecting ||
                    ObjectManager.Me.IsDeadMe ||
                    !ObjectManager.Me.IsValid ||
-                   (ObjectManager.Me.InCombat && !(ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))) ||
+                   (ObjectManager.Me.InCombat && !(ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))) ||
                    !Products.IsStarted)
                     return false;
 
diff --git a/The Noob Bot/Quester/Tasks/QuestingTask.cs b/The Noob Bot/Quester/Tasks/QuestingTask.cs
index 06d9210..3692e35 100644
--- a/The Noob Bot/Quester/Tasks/QuestingTask.cs	
+++ b/The Noob Bot/Quester/Tasks/QuestingTask.cs	
@@ -274,13 +274,13 @@ namespace Quester.Tasks
                             ObjectManager.GetWoWUnitByFaction(questObjective.Factions));
 
                 if (!IsInAvoidMobsList(wowUnit) && !nManagerSetting.IsBlackListedZone(wowUnit.Position) &&
-                    wowUnit.GetDistance <= nManager.nManagerSetting.CurrentSetting.searchRadius &&
+                    wowUnit.GetDistance <= nManager.nManagerSetting.CurrentSetting.GatheringSearchRadius &&
                     CurrentQuestObjective.PathHotspots[
                         nManager.Helpful.Math.NearestPointOfListPoints(CurrentQuestObjective.PathHotspots,
                                                                        wowUnit.Position)].DistanceTo(wowUnit.Position) <=
-                    nManagerSetting.CurrentSetting.searchRadius && !nManagerSetting.IsBlackListed(wowUnit.Guid) &&
+                    nManagerSetting.CurrentSetting.GatheringSearchRadius && !nManagerSetting.IsBlackListed(wowUnit.Guid) &&
                     wowUnit.IsAlive && wowUnit.IsValid &&
-                    (nManagerSetting.CurrentSetting.canAttackUnitsAlreadyInFight || !wowUnit.InCombat))
+                    (nManagerSetting.CurrentSetting.CanPullUnitsAlreadyInFight || !wowUnit.InCombat))
                 {
                     Logging.Write("Attacking Lvl " + wowUnit.Name);
                     Fight.StartFight(wowUnit.Guid);
@@ -329,10 +329,10 @@ namespace Quester.Tasks
                     ObjectManager.GetNearestWoWGameObject(ObjectManager.GetWoWGameObjectById(questObjective.Entry));
 
                 if (!nManagerSetting.IsBlackListedZone(node.Position) &&
-                    node.GetDistance < nManagerSetting.CurrentSetting.searchRadius &&
+                    node.GetDistance < nManagerSetting.CurrentSetting.GatheringSearchRadius &&
                     CurrentQuestObjective.PathHotspots[
                         nManager.Helpful.Math.NearestPointOfListPoints(CurrentQuestObjective.PathHotspots, node.Position)
-                        ].DistanceTo(node.Position) <= nManagerSetting.CurrentSetting.searchRadius &&
+                        ].DistanceTo(node.Position) <= nManagerSetting.CurrentSetting.GatheringSearchRadius &&
                     !nManagerSetting.IsBlackListed(node.Guid) && node.IsValid)
                 {
                     uint tNumber = Statistics.Farms;
@@ -439,7 +439,7 @@ namespace Quester.Tasks
                 if (!MovementManager.InMovement)
                 {
                     if (questObjective.PositionInteractWith.DistanceTo(ObjectManager.Me.Position) >
-                        nManagerSetting.CurrentSetting.searchRadius &&
+                        nManagerSetting.CurrentSetting.GatheringSearchRadius &&
                         questObjective.PositionInteractWith.X != 0)
                     {
                         MountTask.Mount();
@@ -488,7 +488,7 @@ namespace Quester.Tasks
                 if (!MovementManager.InMovement)
                 {
                     if (questObjective.PositionInteractWith.DistanceTo(ObjectManager.Me.Position) >
-                        nManagerSetting.CurrentSetting.searchRadius &&
+                        nManagerSetting.CurrentSetting.GatheringSearchRadius &&
                         questObjective.PositionInteractWith.X != 0)
                     {
                         MountTask.Mount();
@@ -643,7 +643,7 @@ namespace Quester.Tasks
                 if (!MovementManager.InMovement)
                 {
                     if (questObjective.PositionVehicle.DistanceTo(ObjectManager.Me.Position) >
-                        nManagerSetting.CurrentSetting.searchRadius &&
+                        nManagerSetting.CurrentSetting.GatheringSearchRadius &&
                         questObjective.PositionVehicle.X != 0)
                     {
                         MountTask.Mount();
@@ -864,7 +864,7 @@ namespace Quester.Tasks
             MountTask.Mount(); // not good yet
 
             // Find path
-            if (npc.Position.DistanceTo(ObjectManager.Me.Position) < nManagerSetting.CurrentSetting.searchRadius)
+            if (npc.Position.DistanceTo(ObjectManager.Me.Position) < nManagerSetting.CurrentSetting.GatheringSearchRadius)
             {
                 WoWUnit tNpc = ObjectManager.GetNearestWoWUnit(ObjectManager.GetWoWUnitByEntry(npc.Entry), npc.Position);
                 WoWGameObject tGameObj = ObjectManager.GetNearestWoWGameObject(ObjectManager.GetWoWGameObjectByEntry(npc.Entry), npc.Position);
diff --git a/The Noob Bot/The Noob Bot/Login.cs b/The Noob Bot/The Noob Bot/Login.cs
index c9dabf1..de4f002 100644
--- a/The Noob Bot/The Noob Bot/Login.cs	
+++ b/The Noob Bot/The Noob Bot/Login.cs	
@@ -17,7 +17,7 @@ namespace The_Noob_Bot
             InitializeComponent();
             InitializeProgram();
             Translate();
-            if (nManager.nManagerSetting.CurrentSetting.AlwaysOnTop)
+            if (nManager.nManagerSetting.CurrentSetting.ActivateAlwaysOnTopFeature)
                 this.TopMost = true;
         }
 
diff --git a/The Noob Bot/The Noob Bot/Main.cs b/The Noob Bot/The Noob Bot/Main.cs
index 1083f11..3a061d3 100644
--- a/The Noob Bot/The Noob Bot/Main.cs	
+++ b/The Noob Bot/The Noob Bot/Main.cs	
@@ -29,7 +29,7 @@ namespace The_Noob_Bot
                 Translate();
                 InitializeInterface();
                 InitializeUI();
-                if (nManager.nManagerSetting.CurrentSetting.AlwaysOnTop)
+                if (nManager.nManagerSetting.CurrentSetting.ActivateAlwaysOnTopFeature)
                     this.TopMost = true;
                 _minimizedWindow = new MainMinimized();
                 _minimizedWindow.VisibleChanged += MinimizedVisivleChange;
@@ -104,8 +104,8 @@ namespace The_Noob_Bot
                     nManager.nManagerSetting.CurrentSetting.AquaticMountName = SpellManager.GetAquaticMountName();
                 }
                 var items = new List<string>();
-                if (nManager.nManagerSetting.CurrentSetting.doNotSellList.Count == 0 ||
-                    nManager.nManagerSetting.CurrentSetting.doNotMailList.Count == 0)
+                if (nManager.nManagerSetting.CurrentSetting.DontSellTheseItems.Count == 0 ||
+                    nManager.nManagerSetting.CurrentSetting.DontMailTheseItems.Count == 0)
                 {
                     foreach (var item in Bag.GetBagItem())
                     {
@@ -113,13 +113,13 @@ namespace The_Noob_Bot
                     }
                     Logging.Write(items.Count + " items found");
                 }
-                if (nManager.nManagerSetting.CurrentSetting.doNotSellList.Count == 0)
+                if (nManager.nManagerSetting.CurrentSetting.DontSellTheseItems.Count == 0)
                 {
-                    nManager.nManagerSetting.CurrentSetting.doNotSellList.AddRange(items);
+                    nManager.nManagerSetting.CurrentSetting.DontSellTheseItems.AddRange(items);
                 }
-                if (nManager.nManagerSetting.CurrentSetting.doNotMailList.Count == 0)
+                if (nManager.nManagerSetting.CurrentSetting.DontMailTheseItems.Count == 0)
                 {
-                    nManager.nManagerSetting.CurrentSetting.doNotMailList.AddRange(items);
+                    nManager.nManagerSetting.CurrentSetting.DontMailTheseItems.AddRange(items);
                 }
                 //SpellManager.SpellBook(); // Initialize SpeelBook
             }
diff --git a/The Noob Bot/The Noob Bot/MainMinimized.cs b/The Noob Bot/The Noob Bot/MainMinimized.cs
index 3ac616b..c214146 100644
--- a/The Noob Bot/The Noob Bot/MainMinimized.cs	
+++ b/The Noob Bot/The Noob Bot/MainMinimized.cs	
@@ -10,7 +10,7 @@ namespace The_Noob_Bot
         {
             InitializeComponent();
             Translate();
-            if (nManager.nManagerSetting.CurrentSetting.AlwaysOnTop)
+            if (nManager.nManagerSetting.CurrentSetting.ActivateAlwaysOnTopFeature)
                 this.TopMost = true;
         }
 
diff --git a/The Noob Bot/Tracker/FormTracker.cs b/The Noob Bot/Tracker/FormTracker.cs
index 04fd3e2..10d79f0 100644
--- a/The Noob Bot/Tracker/FormTracker.cs	
+++ b/The Noob Bot/Tracker/FormTracker.cs	
@@ -14,7 +14,7 @@ namespace Tracker
             Translate();
             ConfigForm();
             UpdateTrackInGame();
-            if (nManager.nManagerSetting.CurrentSetting.AlwaysOnTop)
+            if (nManager.nManagerSetting.CurrentSetting.ActivateAlwaysOnTopFeature)
                 this.TopMost = true;
         }
         void Translate()
diff --git a/The Noob Bot/nManager/Helpful/Forms/DeveloperTools.cs b/The Noob Bot/nManager/Helpful/Forms/DeveloperTools.cs
index 1e2ac56..a0c2273 100644
--- a/The Noob Bot/nManager/Helpful/Forms/DeveloperTools.cs	
+++ b/The Noob Bot/nManager/Helpful/Forms/DeveloperTools.cs	
@@ -19,7 +19,7 @@ namespace nManager.Helpful.Forms
             {
                 InitializeComponent();
                 TranslateForm();
-                if (nManagerSetting.CurrentSetting.AlwaysOnTop)
+                if (nManagerSetting.CurrentSetting.ActivateAlwaysOnTopFeature)
                     this.TopMost = true;
             }
             catch (Exception ex)
diff --git a/The Noob Bot/nManager/Helpful/Forms/Error Popup.cs b/The Noob Bot/nManager/Helpful/Forms/Error Popup.cs
index 373a675..e457677 100644
--- a/The Noob Bot/nManager/Helpful/Forms/Error Popup.cs	
+++ b/The Noob Bot/nManager/Helpful/Forms/Error Popup.cs	
@@ -9,7 +9,7 @@ namespace nManager.Helpful.Forms
         {
             InitializeComponent();
             ErrorDescription.Text = ErrorMessage;
-            if (nManagerSetting.CurrentSetting.AlwaysOnTop)
+            if (nManagerSetting.CurrentSetting.ActivateAlwaysOnTopFeature)
                 this.TopMost = true;
         }
 
diff --git a/The Noob Bot/nManager/Helpful/Forms/GeneralSettings.cs b/The Noob Bot/nManager/Helpful/Forms/GeneralSettings.cs
index 2870aac..ce674ab 100644
--- a/The Noob Bot/nManager/Helpful/Forms/GeneralSettings.cs	
+++ b/The Noob Bot/nManager/Helpful/Forms/GeneralSettings.cs	
@@ -12,7 +12,7 @@ namespace nManager.Helpful.Forms
             {
                 InitializeComponent();
                 TranslateForm();
-                if (nManagerSetting.CurrentSetting.AlwaysOnTop)
+                if (nManagerSetting.CurrentSetting.ActivateAlwaysOnTopFeature)
                     this.TopMost = true;
 
                 LoadSetting(nManagerSetting.CurrentSetting);
@@ -250,45 +250,45 @@ namespace nManager.Helpful.Forms
             try
             {
                 nManagerSetting.CurrentSetting.customClass = customClass.Text;
-                nManagerSetting.CurrentSetting.assignTalents = assignTalents.Value;
-                nManagerSetting.CurrentSetting.trainNewSkills = trainNewSkills.Value;
-                nManagerSetting.CurrentSetting.trainNewSpells = trainNewSpells.Value;
-                nManagerSetting.CurrentSetting.canAttackUnitsAlreadyInFight = canAttackUnitsAlreadyInFight.Value;
-                nManagerSetting.CurrentSetting.dontStartFighting = dontStartFighting.Value;
-                nManagerSetting.CurrentSetting.useSpiritHealer = useSpiritHealer.Value;
-                nManagerSetting.CurrentSetting.useGroundMount = useGroundMount.Value;
+                nManagerSetting.CurrentSetting.AutoAssignTalents = assignTalents.Value;
+                nManagerSetting.CurrentSetting.TrainNewSkills = trainNewSkills.Value;
+                nManagerSetting.CurrentSetting.LearnNewSpells = trainNewSpells.Value;
+                nManagerSetting.CurrentSetting.CanPullUnitsAlreadyInFight = canAttackUnitsAlreadyInFight.Value;
+                nManagerSetting.CurrentSetting.DontPullMonsters = dontStartFighting.Value;
+                nManagerSetting.CurrentSetting.UseSpiritHealer = useSpiritHealer.Value;
+                nManagerSetting.CurrentSetting.UseGroundMount = useGroundMount.Value;
                 nManagerSetting.CurrentSetting.GroundMountName = GroundMountName.Text;
-                nManagerSetting.CurrentSetting.mountDistance = mountDistance.Value;
-                nManagerSetting.CurrentSetting.ignoreFightGoundMount = ignoreFightGoundMount.Value;
+                nManagerSetting.CurrentSetting.MinimumDistanceToUseMount = mountDistance.Value;
+                nManagerSetting.CurrentSetting.IgnoreFightIfMounted = ignoreFightGoundMount.Value;
                 nManagerSetting.CurrentSetting.FlyingMountName = FlyingMountName.Text;
                 nManagerSetting.CurrentSetting.AquaticMountName = AquaticMountName.Text;
-                nManagerSetting.CurrentSetting.foodName = foodName.Text;
-                nManagerSetting.CurrentSetting.foodPercent = foodPercent.Value;
-                nManagerSetting.CurrentSetting.drinkName = drinkName.Text;
-                nManagerSetting.CurrentSetting.drinkPercent = drinkPercent.Value;
-                nManagerSetting.CurrentSetting.restingMana = restingMana.Value;
-                nManagerSetting.CurrentSetting.lootMobs = lootMobs.Value;
-                nManagerSetting.CurrentSetting.lootChests = lootChests.Value;
-                nManagerSetting.CurrentSetting.skinMobs = skinMobs.Value;
-                nManagerSetting.CurrentSetting.skinNinja = skinNinja.Value;
-                nManagerSetting.CurrentSetting.harvestMinerals = harvestMinerals.Value;
-                nManagerSetting.CurrentSetting.harvestHerbs = harvestHerbs.Value;
-                nManagerSetting.CurrentSetting.harvestAvoidPlayersRadius = harvestAvoidPlayersRadius.Value;
-                nManagerSetting.CurrentSetting.maxUnitsNear = maxUnitsNear.Value;
-                nManagerSetting.CurrentSetting.searchRadius = searchRadius.Value;
-                nManagerSetting.CurrentSetting.harvestDuringLongMove = harvestDuringLongMove.Value;
-                nManagerSetting.CurrentSetting.smelting = smelting.Value;
-                nManagerSetting.CurrentSetting.prospecting = prospecting.Value;
-                nManagerSetting.CurrentSetting.prospectingTime = prospectingTime.Value;
-                nManagerSetting.CurrentSetting.prospectingInTown = prospectingInTown.Value;
-                nManagerSetting.CurrentSetting.prospectingList.Clear();
-                nManagerSetting.CurrentSetting.prospectingList.AddRange(Others.TextToArrayByLine(prospectingList.Text));
-                nManagerSetting.CurrentSetting.milling = milling.Value;
-                nManagerSetting.CurrentSetting.millingTime = millingTime.Value;
-                nManagerSetting.CurrentSetting.millingInTown = millingInTown.Value;
-                nManagerSetting.CurrentSetting.millingList.Clear();
-                nManagerSetting.CurrentSetting.millingList.AddRange(Others.TextToArrayByLine(millingList.Text));
-                nManagerSetting.CurrentSetting.blackListHarvest.Clear();
+                nManagerSetting.CurrentSetting.FoodName = foodName.Text;
+                nManagerSetting.CurrentSetting.EatFoodWhenHealthIsUnderXPercent = foodPercent.Value;
+                nManagerSetting.CurrentSetting.BeverageName = drinkName.Text;
+                nManagerSetting.CurrentSetting.DrinkBeverageWhenManaIsUnderXPercent = drinkPercent.Value;
+                nManagerSetting.CurrentSetting.DoRegenManaIfLow = restingMana.Value;
+                nManagerSetting.CurrentSetting.ActivateMonsterLooting = lootMobs.Value;
+                nManagerSetting.CurrentSetting.ActivateChestLooting = lootChests.Value;
+                nManagerSetting.CurrentSetting.ActivateBeastSkinning = skinMobs.Value;
+                nManagerSetting.CurrentSetting.BeastNinjaSkinning = skinNinja.Value;
+                nManagerSetting.CurrentSetting.ActivateVeinsHarvesting = harvestMinerals.Value;
+                nManagerSetting.CurrentSetting.ActivateHerbsHarvesting = harvestHerbs.Value;
+                nManagerSetting.CurrentSetting.DontHarvestIfPlayerNearRadius = harvestAvoidPlayersRadius.Value;
+                nManagerSetting.CurrentSetting.DontHarvestIfMoreThanOneUnitInAggroRange = maxUnitsNear.Value;
+                nManagerSetting.CurrentSetting.GatheringSearchRadius = searchRadius.Value;
+                nManagerSetting.CurrentSetting.HarvestDuringLongDistanceMovements = harvestDuringLongMove.Value;
+                nManagerSetting.CurrentSetting.ActivateAutoSmelting = smelting.Value;
+                nManagerSetting.CurrentSetting.ActivateAutoProspecting = prospecting.Value;
+                nManagerSetting.CurrentSetting.TimeBetweenEachProspectingAttempt = prospectingTime.Value;
+                nManagerSetting.CurrentSetting.OnlyUseProspectingInTown = prospectingInTown.Value;
+                nManagerSetting.CurrentSetting.MineralsToProspect.Clear();
+                nManagerSetting.CurrentSetting.MineralsToProspect.AddRange(Others.TextToArrayByLine(prospectingList.Text));
+                nManagerSetting.CurrentSetting.ActivateAutoMilling = milling.Value;
+                nManagerSetting.CurrentSetting.TimeBetweenEachMillingAttempt = millingTime.Value;
+                nManagerSetting.CurrentSetting.OnlyUseMillingInTown = millingInTown.Value;
+                nManagerSetting.CurrentSetting.HerbsToBeMilled.Clear();
+                nManagerSetting.CurrentSetting.HerbsToBeMilled.AddRange(Others.TextToArrayByLine(millingList.Text));
+                nManagerSetting.CurrentSetting.DontHarvestTheFollowingObjects.Clear();
                 try
                 {
                     foreach (string i in blackListHarvest.Items)
@@ -297,57 +297,57 @@ namespace nManager.Helpful.Forms
                         {
                             string[] result = i.Replace(" ", "").Split(Convert.ToChar("-"));
                             if (result.Length > 0)
-                                nManagerSetting.CurrentSetting.blackListHarvest.Add(Convert.ToInt32(result[0]));
+                                nManagerSetting.CurrentSetting.DontHarvestTheFollowingObjects.Add(Convert.ToInt32(result[0]));
                         }
                         catch { }
                     }
                 }
                 catch { }
-                nManagerSetting.CurrentSetting.autoMakeElemental = autoMakeElemental.Value;
-                nManagerSetting.CurrentSetting.relogger = relogger.Value;
-                nManagerSetting.CurrentSetting.accountEmail = accountEmail.Text;
-                nManagerSetting.CurrentSetting.accountPassword = accountPassword.Text;
-                nManagerSetting.CurrentSetting.bNetName = bNetName.Text;
-                nManagerSetting.CurrentSetting.foodAmount = foodAmount.Value;
-                nManagerSetting.CurrentSetting.drinkAmount = drinkAmount.Value;
-                nManagerSetting.CurrentSetting.repair = repair.Value;
-                nManagerSetting.CurrentSetting.selling = selling.Value;
-                nManagerSetting.CurrentSetting.sellGray = sellGray.Checked;
-                nManagerSetting.CurrentSetting.sellWhite = sellWhite.Checked;
-                nManagerSetting.CurrentSetting.sellGreen = sellGreen.Checked;
-                nManagerSetting.CurrentSetting.sellBlue = sellBlue.Checked;
-                nManagerSetting.CurrentSetting.sellPurple = sellPurple.Checked;
-                nManagerSetting.CurrentSetting.doNotSellList.Clear();
-                nManagerSetting.CurrentSetting.doNotSellList.AddRange(Others.TextToArrayByLine(doNotSellList.Text));
-                nManagerSetting.CurrentSetting.forceSellList.Clear();
-                nManagerSetting.CurrentSetting.forceSellList.AddRange(Others.TextToArrayByLine(forceSellList.Text));
-                nManagerSetting.CurrentSetting.useMail = useMail.Value;
-                nManagerSetting.CurrentSetting.mailRecipient = mailRecipient.Text;
-                nManagerSetting.CurrentSetting.mailSubject = mailSubject.Text;
-                nManagerSetting.CurrentSetting.mailGray = mailGray.Checked;
-                nManagerSetting.CurrentSetting.mailWhite = mailWhite.Checked;
-                nManagerSetting.CurrentSetting.mailGreen = mailGreen.Checked;
-                nManagerSetting.CurrentSetting.mailBlue = mailBlue.Checked;
-                nManagerSetting.CurrentSetting.mailPurple = mailPurple.Checked;
-                nManagerSetting.CurrentSetting.forceMailList.Clear();
-                nManagerSetting.CurrentSetting.forceMailList.AddRange(Others.TextToArrayByLine(forceMailList.Text));
-                nManagerSetting.CurrentSetting.doNotMailList.Clear();
-                nManagerSetting.CurrentSetting.doNotMailList.AddRange(Others.TextToArrayByLine(doNotMailList.Text));
-                nManagerSetting.CurrentSetting.closeIfFullBag = closeIfFullBag.Value;
-                nManagerSetting.CurrentSetting.closeIfReached4000HonorPoints = closeIfReached4000HonorPoints.Value;
-                nManagerSetting.CurrentSetting.closeIfPlayerTeleported = closeIfPlayerTeleported.Value;
-                nManagerSetting.CurrentSetting.closeAfterXLevel = closeAfterXLevel.Value;
-                nManagerSetting.CurrentSetting.closeIfWhisperBiggerOrEgalAt = closeIfWhisperBiggerOrEgalAt.Value;
-                nManagerSetting.CurrentSetting.closeAfterXBlockages = closeAfterXBlockages.Value;
-                nManagerSetting.CurrentSetting.closeAfterXMin = closeAfterXMin.Value;
-                nManagerSetting.CurrentSetting.securityPauseBotIfNerbyPlayer = securityPauseBotIfNerbyPlayer.Value;
-                nManagerSetting.CurrentSetting.securityRecordWhisperInLogFile = securityRecordWhisperInLogFile.Value;
-                nManagerSetting.CurrentSetting.securitySongIfNewWhisper = securitySongIfNewWhisper.Value;
-                nManagerSetting.CurrentSetting.usePathsFinder = usePathsFinder.Value;
-                nManagerSetting.CurrentSetting.MaxFPSSwitch = MaxFPSSwitch.Value;
-                nManagerSetting.CurrentSetting.npcMailboxSearchRadius = npcMailboxSearchRadius.Value;
+                nManagerSetting.CurrentSetting.MakeStackOfElementalsItems = autoMakeElemental.Value;
+                nManagerSetting.CurrentSetting.ActivateReloggerFeature = relogger.Value;
+                nManagerSetting.CurrentSetting.EmailOfTheBattleNetAccount = accountEmail.Text;
+                nManagerSetting.CurrentSetting.PasswordOfTheBattleNetAccount = accountPassword.Text;
+                nManagerSetting.CurrentSetting.BattleNetSubAccount = bNetName.Text;
+                nManagerSetting.CurrentSetting.NumberOfFoodsWeGot = foodAmount.Value;
+                nManagerSetting.CurrentSetting.NumberOfBeverageWeGot = drinkAmount.Value;
+                nManagerSetting.CurrentSetting.ActivateAutoRepairFeature = repair.Value;
+                nManagerSetting.CurrentSetting.ActivateAutoSellingFeature = selling.Value;
+                nManagerSetting.CurrentSetting.SellGray = sellGray.Checked;
+                nManagerSetting.CurrentSetting.SellWhite = sellWhite.Checked;
+                nManagerSetting.CurrentSetting.SellGreen = sellGreen.Checked;
+                nManagerSetting.CurrentSetting.SellBlue = sellBlue.Checked;
+                nManagerSetting.CurrentSetting.SellPurple = sellPurple.Checked;
+                nManagerSetting.CurrentSetting.DontSellTheseItems.Clear();
+                nManagerSetting.CurrentSetting.DontSellTheseItems.AddRange(Others.TextToArrayByLine(doNotSellList.Text));
+                nManagerSetting.CurrentSetting.ForceToSellTheseItems.Clear();
+                nManagerSetting.CurrentSetting.ForceToSellTheseItems.AddRange(Others.TextToArrayByLine(forceSellList.Text));
+                nManagerSetting.CurrentSetting.ActivateAutoMaillingFeature = useMail.Value;
+                nManagerSetting.CurrentSetting.MaillingFeatureRecipient = mailRecipient.Text;
+                nManagerSetting.CurrentSetting.MaillingFeatureSubject = mailSubject.Text;
+                nManagerSetting.CurrentSetting.MailGray = mailGray.Checked;
+                nManagerSetting.CurrentSetting.MailWhite = mailWhite.Checked;
+                nManagerSetting.CurrentSetting.MailGreen = mailGreen.Checked;
+                nManagerSetting.CurrentSetting.MailBlue = mailBlue.Checked;
+                nManagerSetting.CurrentSetting.MailPurple = mailPurple.Checked;
+                nManagerSetting.CurrentSetting.ForceToMailTheseItems.Clear();
+                nManagerSetting.CurrentSetting.ForceToMailTheseItems.AddRange(Others.TextToArrayByLine(forceMailList.Text));
+                nManagerSetting.CurrentSetting.DontMailTheseItems.Clear();
+                nManagerSetting.CurrentSetting.DontMailTheseItems.AddRange(Others.TextToArrayByLine(doNotMailList.Text));
+                nManagerSetting.CurrentSetting.StopTNBIfBagAreFull = closeIfFullBag.Value;
+                nManagerSetting.CurrentSetting.StopTNBIfHonorPointsLimitReached = closeIfReached4000HonorPoints.Value;
+                nManagerSetting.CurrentSetting.StopTNBIfPlayerHaveBeenTeleported = closeIfPlayerTeleported.Value;
+                nManagerSetting.CurrentSetting.StopTNBAfterXLevelup = closeAfterXLevel.Value;
+                nManagerSetting.CurrentSetting.StopTNBIfReceivedAtMostXWhispers = closeIfWhisperBiggerOrEgalAt.Value;
+                nManagerSetting.CurrentSetting.StopTNBAfterXStucks = closeAfterXBlockages.Value;
+                nManagerSetting.CurrentSetting.StopTNBAfterXMinutes = closeAfterXMin.Value;
+                nManagerSetting.CurrentSetting.PauseTNBIfNearByPlayer = securityPauseBotIfNerbyPlayer.Value;
+                nManagerSetting.CurrentSetting.RecordWhispsInLogFiles = securityRecordWhisperInLogFile.Value;
+                nManagerSetting.CurrentSetting.PlayASongIfNewWhispReceived = securitySongIfNewWhisper.Value;
+                nManagerSetting.CurrentSetting.ActivatePathFindingFeature = usePathsFinder.Value;
+                nManagerSetting.CurrentSetting.AllowTNBToSetYourMapFps = MaxFPSSwitch.Value;
+                nManagerSetting.CurrentSetting.MaxDistanceToGoToMailboxesOrNPCs = npcMailboxSearchRadius.Value;
                 nManagerSetting.CurrentSetting.AutoConfirmOnBoPItems = AutoConfirmOnBoPItems.Value;
-                nManagerSetting.CurrentSetting.AlwaysOnTop = AlwaysOnTop.Value;
+                nManagerSetting.CurrentSetting.ActivateAlwaysOnTopFeature = AlwaysOnTop.Value;
                 nManagerSetting.CurrentSetting.Save();
             }
             catch (Exception e)
@@ -362,93 +362,93 @@ namespace nManager.Helpful.Forms
             try
             {
                 customClass.Text = managerSetting.customClass;
-                assignTalents.Value = managerSetting.assignTalents;
-                trainNewSkills.Value = managerSetting.trainNewSkills;
-                trainNewSpells.Value = managerSetting.trainNewSpells;
-                canAttackUnitsAlreadyInFight.Value = managerSetting.canAttackUnitsAlreadyInFight;
-                dontStartFighting.Value = managerSetting.dontStartFighting;
-                useSpiritHealer.Value = managerSetting.useSpiritHealer;
-                useGroundMount.Value = managerSetting.useGroundMount;
+                assignTalents.Value = managerSetting.AutoAssignTalents;
+                trainNewSkills.Value = managerSetting.TrainNewSkills;
+                trainNewSpells.Value = managerSetting.LearnNewSpells;
+                canAttackUnitsAlreadyInFight.Value = managerSetting.CanPullUnitsAlreadyInFight;
+                dontStartFighting.Value = managerSetting.DontPullMonsters;
+                useSpiritHealer.Value = managerSetting.UseSpiritHealer;
+                useGroundMount.Value = managerSetting.UseGroundMount;
                 GroundMountName.Text = managerSetting.GroundMountName;
-                mountDistance.Value = (int)managerSetting.mountDistance;
-                ignoreFightGoundMount.Value = managerSetting.ignoreFightGoundMount;
+                mountDistance.Value = (int)managerSetting.MinimumDistanceToUseMount;
+                ignoreFightGoundMount.Value = managerSetting.IgnoreFightIfMounted;
                 FlyingMountName.Text = managerSetting.FlyingMountName;
                 AquaticMountName.Text = managerSetting.AquaticMountName;
-                foodName.Text = managerSetting.foodName;
-                foodPercent.Value = managerSetting.foodPercent;
-                drinkName.Text = managerSetting.drinkName;
-                drinkPercent.Value = managerSetting.drinkPercent;
-                restingMana.Value = managerSetting.restingMana;
-                lootMobs.Value = managerSetting.lootMobs;
-                lootChests.Value = managerSetting.lootChests;
-                skinMobs.Value = managerSetting.skinMobs;
-                skinNinja.Value = managerSetting.skinNinja;
-                harvestMinerals.Value = managerSetting.harvestMinerals;
-                harvestHerbs.Value = managerSetting.harvestHerbs;
-                harvestAvoidPlayersRadius.Value = (int)managerSetting.harvestAvoidPlayersRadius;
-                maxUnitsNear.Value = managerSetting.maxUnitsNear;
-                searchRadius.Value = (int)managerSetting.searchRadius;
-                harvestDuringLongMove.Value = managerSetting.harvestDuringLongMove;
-                smelting.Value = managerSetting.smelting;
-                prospecting.Value = managerSetting.prospecting;
-                prospectingInTown.Value = managerSetting.prospectingInTown;
-                prospectingTime.Value = managerSetting.prospectingTime;
-                prospectingList.Text = Others.ArrayToTextByLine(managerSetting.prospectingList.ToArray());
-                milling.Value = managerSetting.milling;
-                millingInTown.Value = managerSetting.millingInTown;
-                millingTime.Value = managerSetting.millingTime;
-                millingList.Text = Others.ArrayToTextByLine(managerSetting.millingList.ToArray());
+                foodName.Text = managerSetting.FoodName;
+                foodPercent.Value = managerSetting.EatFoodWhenHealthIsUnderXPercent;
+                drinkName.Text = managerSetting.BeverageName;
+                drinkPercent.Value = managerSetting.DrinkBeverageWhenManaIsUnderXPercent;
+                restingMana.Value = managerSetting.DoRegenManaIfLow;
+                lootMobs.Value = managerSetting.ActivateMonsterLooting;
+                lootChests.Value = managerSetting.ActivateChestLooting;
+                skinMobs.Value = managerSetting.ActivateBeastSkinning;
+                skinNinja.Value = managerSetting.BeastNinjaSkinning;
+                harvestMinerals.Value = managerSetting.ActivateVeinsHarvesting;
+                harvestHerbs.Value = managerSetting.ActivateHerbsHarvesting;
+                harvestAvoidPlayersRadius.Value = (int)managerSetting.DontHarvestIfPlayerNearRadius;
+                maxUnitsNear.Value = managerSetting.DontHarvestIfMoreThanOneUnitInAggroRange;
+                searchRadius.Value = (int)managerSetting.GatheringSearchRadius;
+                harvestDuringLongMove.Value = managerSetting.HarvestDuringLongDistanceMovements;
+                smelting.Value = managerSetting.ActivateAutoSmelting;
+                prospecting.Value = managerSetting.ActivateAutoProspecting;
+                prospectingInTown.Value = managerSetting.OnlyUseProspectingInTown;
+                prospectingTime.Value = managerSetting.TimeBetweenEachProspectingAttempt;
+                prospectingList.Text = Others.ArrayToTextByLine(managerSetting.MineralsToProspect.ToArray());
+                milling.Value = managerSetting.ActivateAutoMilling;
+                millingInTown.Value = managerSetting.OnlyUseMillingInTown;
+                millingTime.Value = managerSetting.TimeBetweenEachMillingAttempt;
+                millingList.Text = Others.ArrayToTextByLine(managerSetting.HerbsToBeMilled.ToArray());
                 blackListHarvest.Items.Clear();
                 try
                 {
-                    foreach (var id in managerSetting.blackListHarvest)
+                    foreach (var id in managerSetting.DontHarvestTheFollowingObjects)
                     {
                         if (id >= 0)
                             blackListHarvest.Items.Add(id);
                     }
                 }
                 catch{}
-                autoMakeElemental.Value = managerSetting.autoMakeElemental;
-                relogger.Value = managerSetting.relogger;
-                accountEmail.Text = managerSetting.accountEmail;
-                accountPassword.Text = managerSetting.accountPassword;
-                bNetName.Text = managerSetting.bNetName;
-                foodAmount.Value = managerSetting.foodAmount;
-                drinkAmount.Value = managerSetting.drinkAmount;
-                repair.Value = managerSetting.repair;
-                selling.Value = managerSetting.selling;
-                sellGray.Checked = managerSetting.sellGray;
-                sellWhite.Checked = managerSetting.sellWhite;
-                sellGreen.Checked = managerSetting.sellGreen;
-                sellBlue.Checked = managerSetting.sellBlue;
-                sellPurple.Checked = managerSetting.sellPurple;
-                doNotSellList.Text = Others.ArrayToTextByLine(managerSetting.doNotSellList.ToArray());
-                forceSellList.Text = Others.ArrayToTextByLine(managerSetting.forceSellList.ToArray());
-                useMail.Value = managerSetting.useMail;
-                mailRecipient.Text = managerSetting.mailRecipient;
-                mailSubject.Text = managerSetting.mailSubject;
-                mailGray.Checked = managerSetting.mailGray;
-                mailWhite.Checked = managerSetting.mailWhite;
-                mailGreen.Checked = managerSetting.mailGreen;
-                mailBlue.Checked = managerSetting.mailBlue;
-                mailPurple.Checked = managerSetting.mailPurple;
-                forceMailList.Text = Others.ArrayToTextByLine(managerSetting.forceMailList.ToArray());
-                doNotMailList.Text = Others.ArrayToTextByLine(managerSetting.doNotMailList.ToArray());
-                closeIfFullBag.Value = managerSetting.closeIfFullBag;
-                closeIfReached4000HonorPoints.Value = managerSetting.closeIfReached4000HonorPoints;
-                closeIfPlayerTeleported.Value = managerSetting.closeIfPlayerTeleported;
-                closeAfterXLevel.Value = managerSetting.closeAfterXLevel;
-                closeIfWhisperBiggerOrEgalAt.Value = managerSetting.closeIfWhisperBiggerOrEgalAt;
-                closeAfterXBlockages.Value = managerSetting.closeAfterXBlockages;
-                closeAfterXMin.Value = managerSetting.closeAfterXMin;
-                securityPauseBotIfNerbyPlayer.Value = managerSetting.securityPauseBotIfNerbyPlayer;
-                securityRecordWhisperInLogFile.Value = managerSetting.securityRecordWhisperInLogFile;
-                securitySongIfNewWhisper.Value = managerSetting.securitySongIfNewWhisper;
-                usePathsFinder.Value = managerSetting.usePathsFinder;
-                MaxFPSSwitch.Value = managerSetting.MaxFPSSwitch;
-                npcMailboxSearchRadius.Value = (int)managerSetting.npcMailboxSearchRadius;
+                autoMakeElemental.Value = managerSetting.MakeStackOfElementalsItems;
+                relogger.Value = managerSetting.ActivateReloggerFeature;
+                accountEmail.Text = managerSetting.EmailOfTheBattleNetAccount;
+                accountPassword.Text = managerSetting.PasswordOfTheBattleNetAccount;
+                bNetName.Text = managerSetting.BattleNetSubAccount;
+                foodAmount.Value = managerSetting.NumberOfFoodsWeGot;
+                drinkAmount.Value = managerSetting.NumberOfBeverageWeGot;
+                repair.Value = managerSetting.ActivateAutoRepairFeature;
+                selling.Value = managerSetting.ActivateAutoSellingFeature;
+                sellGray.Checked = managerSetting.SellGray;
+                sellWhite.Checked = managerSetting.SellWhite;
+                sellGreen.Checked = managerSetting.SellGreen;
+                sellBlue.Checked = managerSetting.SellBlue;
+                sellPurple.Checked = managerSetting.SellPurple;
+                doNotSellList.Text = Others.ArrayToTextByLine(managerSetting.DontSellTheseItems.ToArray());
+                forceSellList.Text = Others.ArrayToTextByLine(managerSetting.ForceToSellTheseItems.ToArray());
+                useMail.Value = managerSetting.ActivateAutoMaillingFeature;
+                mailRecipient.Text = managerSetting.MaillingFeatureRecipient;
+                mailSubject.Text = managerSetting.MaillingFeatureSubject;
+                mailGray.Checked = managerSetting.MailGray;
+                mailWhite.Checked = managerSetting.MailWhite;
+                mailGreen.Checked = managerSetting.MailGreen;
+                mailBlue.Checked = managerSetting.MailBlue;
+                mailPurple.Checked = managerSetting.MailPurple;
+                forceMailList.Text = Others.ArrayToTextByLine(managerSetting.ForceToMailTheseItems.ToArray());
+                doNotMailList.Text = Others.ArrayToTextByLine(managerSetting.DontMailTheseItems.ToArray());
+                closeIfFullBag.Value = managerSetting.StopTNBIfBagAreFull;
+                closeIfReached4000HonorPoints.Value = managerSetting.StopTNBIfHonorPointsLimitReached;
+                closeIfPlayerTeleported.Value = managerSetting.StopTNBIfPlayerHaveBeenTeleported;
+                closeAfterXLevel.Value = managerSetting.StopTNBAfterXLevelup;
+                closeIfWhisperBiggerOrEgalAt.Value = managerSetting.StopTNBIfReceivedAtMostXWhispers;
+                closeAfterXBlockages.Value = managerSetting.StopTNBAfterXStucks;
+                closeAfterXMin.Value = managerSetting.StopTNBAfterXMinutes;
+                securityPauseBotIfNerbyPlayer.Value = managerSetting.PauseTNBIfNearByPlayer;
+                securityRecordWhisperInLogFile.Value = managerSetting.RecordWhispsInLogFiles;
+                securitySongIfNewWhisper.Value = managerSetting.PlayASongIfNewWhispReceived;
+                usePathsFinder.Value = managerSetting.ActivatePathFindingFeature;
+                MaxFPSSwitch.Value = managerSetting.AllowTNBToSetYourMapFps;
+                npcMailboxSearchRadius.Value = (int)managerSetting.MaxDistanceToGoToMailboxesOrNPCs;
                 AutoConfirmOnBoPItems.Value = managerSetting.AutoConfirmOnBoPItems;
-                AlwaysOnTop.Value = managerSetting.AlwaysOnTop;
+                AlwaysOnTop.Value = managerSetting.ActivateAlwaysOnTopFeature;
             }
             catch (Exception ex)
             {
diff --git a/The Noob Bot/nManager/Helpful/Forms/Translate Tools.cs b/The Noob Bot/nManager/Helpful/Forms/Translate Tools.cs
index 684b6a8..0f4d8f8 100644
--- a/The Noob Bot/nManager/Helpful/Forms/Translate Tools.cs	
+++ b/The Noob Bot/nManager/Helpful/Forms/Translate Tools.cs	
@@ -14,7 +14,7 @@ namespace nManager.Helpful.Forms
             {
                 InitializeComponent();
                 Translate();
-                if (nManagerSetting.CurrentSetting.AlwaysOnTop)
+                if (nManagerSetting.CurrentSetting.ActivateAlwaysOnTopFeature)
                     this.TopMost = true;
                 foreach (var id in Enum.GetValues(typeof(Translate.Id)))
                 {
diff --git a/The Noob Bot/nManager/Wow/Bot/States/ArchaeologyStates.cs b/The Noob Bot/nManager/Wow/Bot/States/ArchaeologyStates.cs
index 0cd81d0..889ae08 100644
--- a/The Noob Bot/nManager/Wow/Bot/States/ArchaeologyStates.cs	
+++ b/The Noob Bot/nManager/Wow/Bot/States/ArchaeologyStates.cs	
@@ -42,7 +42,7 @@ namespace nManager.Wow.Bot.States
                     Usefuls.IsLoadingOrConnecting ||
                     ObjectManager.ObjectManager.Me.IsDeadMe ||
                     !ObjectManager.ObjectManager.Me.IsValid ||
-                    (ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))) ||
+                    (ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))) ||
                     !Products.Products.IsStarted)
                     return false;
 
@@ -127,7 +127,7 @@ namespace nManager.Wow.Bot.States
                 // Loop farm in zone // We must check Me.IsIndoor because no archeology is indoor
                 int nbStuck = 0; // Nb of stuck direct
                 int nbCastSurveyError = 0; // Nb max error cast survey (for try if in zone ou if zone is finish)
-                while (Products.Products.IsStarted && !Products.Products.InPause && nbCastSurveyError <= 3 && !ObjectManager.ObjectManager.Me.IsDeadMe && !(ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))))
+                while (Products.Products.IsStarted && !Products.Products.InPause && nbCastSurveyError <= 3 && !ObjectManager.ObjectManager.Me.IsDeadMe && !(ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))))
                 {
                     try
                     {
@@ -150,13 +150,13 @@ namespace nManager.Wow.Bot.States
                             Thread.Sleep(300);
                             while (MovementManager.InMovement && !timer.IsReady && t.GetDistance > 3)
                             {
-                                if ((ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))))
+                                if ((ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))))
                                 {
                                     return;
                                 }
                                 Thread.Sleep(100);
                             }
-                            if ((ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))))
+                            if ((ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))))
                             {
                                 return;
                             }
@@ -165,7 +165,7 @@ namespace nManager.Wow.Bot.States
                             Thread.Sleep(500);
                             Interact.InteractGameObject(t.GetBaseAddress);
                             Thread.Sleep(Usefuls.Latency);
-                            if ((ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))))
+                            if ((ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))))
                             {
                                 return;
                             }
@@ -203,7 +203,7 @@ namespace nManager.Wow.Bot.States
                             Thread.Sleep(200);
                             surveySpell.Launch(); // Cast Survey
                             _nbTryFarmInThisZone++;
-                            if ((ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))))
+                            if ((ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))))
                             {
                                 return;
                             }
@@ -279,7 +279,7 @@ namespace nManager.Wow.Bot.States
                                         else
                                             p.Z = p.Z + 2;
 
-                                        if ((ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))))
+                                        if ((ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))))
                                         {
                                             return;
                                         }
@@ -290,7 +290,7 @@ namespace nManager.Wow.Bot.States
                                         Thread.Sleep(300);
                                         while (LongMove.IsLongMove && !timer.IsReady && ObjectManager.ObjectManager.Me.Position.DistanceTo2D(p) > 10)
                                         {
-                                            if ((ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))))
+                                            if ((ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))))
                                             {
                                                 LongMove.StopLongMove();
                                                 return;
@@ -321,7 +321,7 @@ namespace nManager.Wow.Bot.States
                                         while (MovementManager.InMovement && !timer.IsReady &&
                                                ObjectManager.ObjectManager.Me.Position.DistanceTo2D(p) > 5)
                                         {
-                                            if ((ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))))
+                                            if ((ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))))
                                             {
                                                 return;
                                             }
@@ -330,13 +330,13 @@ namespace nManager.Wow.Bot.States
                                         Thread.Sleep(50);
                                         // incremente nbstuck if player is stuck
                                         if (ObjectManager.ObjectManager.Me.Position.DistanceTo(t.Position) < 5 ||
-                                            (MovementManager.InMovement && !(ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))) && timer.IsReady))
+                                            (MovementManager.InMovement && !(ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))) && timer.IsReady))
                                             nbStuck++;
                                         else
                                             nbStuck = 0;
 
 
-                                        if ((ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))))
+                                        if ((ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))))
                                         {
                                             return;
                                         }
diff --git a/The Noob Bot/nManager/Wow/Bot/States/Farming.cs b/The Noob Bot/nManager/Wow/Bot/States/Farming.cs
index 3b07324..bd8785b 100644
--- a/The Noob Bot/nManager/Wow/Bot/States/Farming.cs	
+++ b/The Noob Bot/nManager/Wow/Bot/States/Farming.cs	
@@ -43,11 +43,11 @@ namespace nManager.Wow.Bot.States
                     Usefuls.IsLoadingOrConnecting ||
                     ObjectManager.ObjectManager.Me.IsDeadMe ||
                     !ObjectManager.ObjectManager.Me.IsValid ||
-                    (ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))) ||
+                    (ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))) ||
                     !Products.Products.IsStarted)
                     return false;
 
-                if (LongMove.IsLongMove && !nManagerSetting.CurrentSetting.harvestDuringLongMove)
+                if (LongMove.IsLongMove && !nManagerSetting.CurrentSetting.HarvestDuringLongDistanceMovements)
                     return false;
 
                 _nodes = new List<WoWGameObject>();
@@ -55,7 +55,7 @@ namespace nManager.Wow.Bot.States
 
                 foreach (var node in tNodes)
                 {
-                    if (!nManagerSetting.IsBlackListedZone(node.Position) && node.GetDistance2D < nManagerSetting.CurrentSetting.searchRadius && !nManagerSetting.IsBlackListed(node.Guid) && node.IsValid)
+                    if (!nManagerSetting.IsBlackListedZone(node.Position) && node.GetDistance2D < nManagerSetting.CurrentSetting.GatheringSearchRadius && !nManagerSetting.IsBlackListed(node.Guid) && node.IsValid)
                        if (!PlayerNearest(node))
                            if (!UnitNearest(node))
                                _nodes.Add(node);
@@ -71,7 +71,7 @@ namespace nManager.Wow.Bot.States
         public static bool PlayerNearest(WoWGameObject node)
         {
             List<WoWPlayer> players = ObjectManager.ObjectManager.GetObjectWoWPlayer();
-            if (players.Any(p => p.Position.DistanceTo2D(node.Position) <= nManagerSetting.CurrentSetting.harvestAvoidPlayersRadius))
+            if (players.Any(p => p.Position.DistanceTo2D(node.Position) <= nManagerSetting.CurrentSetting.DontHarvestIfPlayerNearRadius))
             {
                 Logging.Write("Player near the node");
                 nManagerSetting.AddBlackList(node.Guid, 15*1000);
@@ -89,7 +89,7 @@ namespace nManager.Wow.Bot.States
                 if (woWUnit.Position.DistanceTo2D(node.Position) <= woWUnit.AggroDistance && UnitRelation.GetReaction(ObjectManager.ObjectManager.Me, woWUnit) == Reaction.Hostile)
                     i++;
             }
-            var r = i > nManagerSetting.CurrentSetting.maxUnitsNear;
+            var r = i > nManagerSetting.CurrentSetting.DontHarvestIfMoreThanOneUnitInAggroRange;
             if (r)
             {
                 nManagerSetting.AddBlackList(node.Guid, 15*1000);
diff --git a/The Noob Bot/nManager/Wow/Bot/States/FightHostileTarget.cs b/The Noob Bot/nManager/Wow/Bot/States/FightHostileTarget.cs
index 50b76fc..1b70405 100644
--- a/The Noob Bot/nManager/Wow/Bot/States/FightHostileTarget.cs	
+++ b/The Noob Bot/nManager/Wow/Bot/States/FightHostileTarget.cs	
@@ -37,7 +37,7 @@ namespace nManager.Wow.Bot.States
         {
             get
             {
-                if (nManagerSetting.CurrentSetting.dontStartFighting)
+                if (nManagerSetting.CurrentSetting.DontPullMonsters)
                     return false;
 
                 if (!Usefuls.InGame ||
diff --git a/The Noob Bot/nManager/Wow/Bot/States/Grinding.cs b/The Noob Bot/nManager/Wow/Bot/States/Grinding.cs
index 72e9345..48c7a6e 100644
--- a/The Noob Bot/nManager/Wow/Bot/States/Grinding.cs	
+++ b/The Noob Bot/nManager/Wow/Bot/States/Grinding.cs	
@@ -42,14 +42,14 @@ namespace nManager.Wow.Bot.States
         {
             get
             {
-                if (nManagerSetting.CurrentSetting.dontStartFighting)
+                if (nManagerSetting.CurrentSetting.DontPullMonsters)
                     return false;
 
                 if (!Usefuls.InGame ||
                     Usefuls.IsLoadingOrConnecting ||
                     ObjectManager.ObjectManager.Me.IsDeadMe ||
                     !ObjectManager.ObjectManager.Me.IsValid ||
-                    (ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))) ||
+                    (ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))) ||
                     !Products.Products.IsStarted)
                     return false;
 
@@ -66,8 +66,8 @@ namespace nManager.Wow.Bot.States
                 if (!_unit.IsValid)
                     return false;
 
-                if (!nManagerSetting.IsBlackListedZone(_unit.Position) && _unit.GetDistance2D < nManagerSetting.CurrentSetting.searchRadius && !nManagerSetting.IsBlackListed(_unit.Guid) && _unit.IsValid)
-                    if (_unit.Target == ObjectManager.ObjectManager.Me.Target || _unit.Target == ObjectManager.ObjectManager.Pet.Target || _unit.Target == 0 || nManagerSetting.CurrentSetting.canAttackUnitsAlreadyInFight)
+                if (!nManagerSetting.IsBlackListedZone(_unit.Position) && _unit.GetDistance2D < nManagerSetting.CurrentSetting.GatheringSearchRadius && !nManagerSetting.IsBlackListed(_unit.Guid) && _unit.IsValid)
+                    if (_unit.Target == ObjectManager.ObjectManager.Me.Target || _unit.Target == ObjectManager.ObjectManager.Pet.Target || _unit.Target == 0 || nManagerSetting.CurrentSetting.CanPullUnitsAlreadyInFight)
                         if (!UnitNearest(_unit))
                             if (_unit.Level <= MaxTargetLevel && _unit.Level >= MinTargetLevel)
                             return true;
@@ -86,7 +86,7 @@ namespace nManager.Wow.Bot.States
                 if (woWUnit.Position.DistanceTo2D(unit.Position) <= woWUnit.AggroDistance && UnitRelation.GetReaction(ObjectManager.ObjectManager.Me, unit) == Reaction.Hostile)
                     i++;
             }
-            var r = i > nManagerSetting.CurrentSetting.maxUnitsNear;
+            var r = i > nManagerSetting.CurrentSetting.DontHarvestIfMoreThanOneUnitInAggroRange;
             if (r)
             {
                 nManagerSetting.AddBlackList(unit.Guid, 15 * 1000);
diff --git a/The Noob Bot/nManager/Wow/Bot/States/IsAttacked.cs b/The Noob Bot/nManager/Wow/Bot/States/IsAttacked.cs
index cd1dce2..22cf2e5 100644
--- a/The Noob Bot/nManager/Wow/Bot/States/IsAttacked.cs	
+++ b/The Noob Bot/nManager/Wow/Bot/States/IsAttacked.cs	
@@ -31,7 +31,7 @@ namespace nManager.Wow.Bot.States
                     Usefuls.IsLoadingOrConnecting ||
                     ObjectManager.ObjectManager.Me.IsDeadMe ||
                     !ObjectManager.ObjectManager.Me.IsValid ||
-                    (ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying)) ||
+                    (ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying)) ||
                     !Products.Products.IsStarted)
                     return false;
 
diff --git a/The Noob Bot/nManager/Wow/Bot/States/Looting.cs b/The Noob Bot/nManager/Wow/Bot/States/Looting.cs
index e0e0677..e84fb87 100644
--- a/The Noob Bot/nManager/Wow/Bot/States/Looting.cs	
+++ b/The Noob Bot/nManager/Wow/Bot/States/Looting.cs	
@@ -29,14 +29,14 @@ namespace nManager.Wow.Bot.States
         {
             get
             {
-                if (!nManagerSetting.CurrentSetting.lootMobs)
+                if (!nManagerSetting.CurrentSetting.ActivateMonsterLooting)
                     return false;
 
                 if (!Usefuls.InGame ||
                     Usefuls.IsLoadingOrConnecting ||
                     ObjectManager.ObjectManager.Me.IsDeadMe ||
                     !ObjectManager.ObjectManager.Me.IsValid ||
-                    (ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))) ||
+                    (ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))) ||
                     Usefuls.IsFlying ||
                     !Products.Products.IsStarted)
                     return false;
@@ -44,12 +44,12 @@ namespace nManager.Wow.Bot.States
                 // Get Looting
                 _units = new List<WoWUnit>();
                 var tUnit = ObjectManager.ObjectManager.GetWoWUnitLootable();
-                if (nManagerSetting.CurrentSetting.skinMobs && nManagerSetting.CurrentSetting.skinNinja)
+                if (nManagerSetting.CurrentSetting.ActivateBeastSkinning && nManagerSetting.CurrentSetting.BeastNinjaSkinning)
                     tUnit.AddRange(ObjectManager.ObjectManager.GetWoWUnitSkinnable(new List<ulong>(nManagerSetting.GetListGuidBlackListed())));
 
                 foreach (var woWUnit in tUnit)
                 {
-                    if (woWUnit.GetDistance2D <= nManagerSetting.CurrentSetting.searchRadius &&
+                    if (woWUnit.GetDistance2D <= nManagerSetting.CurrentSetting.GatheringSearchRadius &&
                             !nManagerSetting.IsBlackListed(woWUnit.Guid) &&
                             woWUnit.IsValid &&
                             (!UnitNearest(woWUnit) || woWUnit.GetDistance2D < 15))
@@ -82,7 +82,7 @@ namespace nManager.Wow.Bot.States
                 if (woWUnit.Position.DistanceTo2D(unit.Position) <= woWUnit.AggroDistance && UnitRelation.GetReaction(ObjectManager.ObjectManager.Me, unit) == Reaction.Hostile)
                     i++;
             }
-            var r = i > nManagerSetting.CurrentSetting.maxUnitsNear;
+            var r = i > nManagerSetting.CurrentSetting.DontHarvestIfMoreThanOneUnitInAggroRange;
             if (r)
             {
                 nManagerSetting.AddBlackList(unit.Guid, 50 * 1000);
diff --git a/The Noob Bot/nManager/Wow/Bot/States/MillingState.cs b/The Noob Bot/nManager/Wow/Bot/States/MillingState.cs
index 8665585..197b441 100644
--- a/The Noob Bot/nManager/Wow/Bot/States/MillingState.cs	
+++ b/The Noob Bot/nManager/Wow/Bot/States/MillingState.cs	
@@ -25,30 +25,30 @@ namespace nManager.Wow.Bot.States
         {
             get
             {
-                if (!nManagerSetting.CurrentSetting.milling)
+                if (!nManagerSetting.CurrentSetting.ActivateAutoMilling)
                     return false;
 
-                if (nManagerSetting.CurrentSetting.millingInTown)
+                if (nManagerSetting.CurrentSetting.OnlyUseMillingInTown)
                     return false;
 
-                if (nManagerSetting.CurrentSetting.millingList.Count <= 0)
+                if (nManagerSetting.CurrentSetting.HerbsToBeMilled.Count <= 0)
                     return false;
 
-                if ((lastTimeRunning + (nManagerSetting.CurrentSetting.millingTime * 60 * 1000)) > Others.Times)
+                if ((lastTimeRunning + (nManagerSetting.CurrentSetting.TimeBetweenEachMillingAttempt * 60 * 1000)) > Others.Times)
                     return false;
 
                 if (!Usefuls.InGame ||
                     Usefuls.IsLoadingOrConnecting ||
                     ObjectManager.ObjectManager.Me.IsDeadMe ||
                     !ObjectManager.ObjectManager.Me.IsValid ||
-                    (ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))) ||
+                    (ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))) ||
                     ObjectManager.ObjectManager.Me.IsMounted ||
                     MovementManager.InMovement ||
                     !Products.Products.IsStarted)
                     return false;
 
 
-                if (Milling.NeedRun(nManagerSetting.CurrentSetting.millingList))
+                if (Milling.NeedRun(nManagerSetting.CurrentSetting.HerbsToBeMilled))
                     return true;
 
                 return false;
@@ -74,11 +74,11 @@ namespace nManager.Wow.Bot.States
             Logging.Write("Milling in progress");
             var timer = new Helpful.Timer(15*60*1000);
             // Milling
-            while (Milling.NeedRun(nManagerSetting.CurrentSetting.millingList) && Products.Products.IsStarted && Usefuls.InGame &&
+            while (Milling.NeedRun(nManagerSetting.CurrentSetting.HerbsToBeMilled) && Products.Products.IsStarted && Usefuls.InGame &&
                        !ObjectManager.ObjectManager.Me.InCombat && !ObjectManager.ObjectManager.Me.IsDeadMe && !timer.IsReady)
             {
                 Thread.Sleep(200);
-                Milling.Pulse(nManagerSetting.CurrentSetting.millingList);
+                Milling.Pulse(nManagerSetting.CurrentSetting.HerbsToBeMilled);
                 Thread.Sleep(750);
                 while (ObjectManager.ObjectManager.Me.IsCast && Products.Products.IsStarted && Usefuls.InGame &&
                        !ObjectManager.ObjectManager.Me.InCombat && !ObjectManager.ObjectManager.Me.IsDeadMe && !timer.IsReady)
diff --git a/The Noob Bot/nManager/Wow/Bot/States/MovementLoop.cs b/The Noob Bot/nManager/Wow/Bot/States/MovementLoop.cs
index 2a6ff6f..e2848d8 100644
--- a/The Noob Bot/nManager/Wow/Bot/States/MovementLoop.cs	
+++ b/The Noob Bot/nManager/Wow/Bot/States/MovementLoop.cs	
@@ -30,7 +30,7 @@ namespace nManager.Wow.Bot.States
                     Usefuls.IsLoadingOrConnecting ||
                     ObjectManager.ObjectManager.Me.IsDeadMe ||
                     !ObjectManager.ObjectManager.Me.IsValid ||
-                    (ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))) ||
+                    (ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))) ||
                     !Products.Products.IsStarted)
                     return false;
 
diff --git a/The Noob Bot/nManager/Wow/Bot/States/ProspectingState.cs b/The Noob Bot/nManager/Wow/Bot/States/ProspectingState.cs
index ebdbae4..1cde171 100644
--- a/The Noob Bot/nManager/Wow/Bot/States/ProspectingState.cs	
+++ b/The Noob Bot/nManager/Wow/Bot/States/ProspectingState.cs	
@@ -25,30 +25,30 @@ namespace nManager.Wow.Bot.States
         {
             get
             {
-                if (!nManagerSetting.CurrentSetting.prospecting)
+                if (!nManagerSetting.CurrentSetting.ActivateAutoProspecting)
                     return false;
 
-                if (nManagerSetting.CurrentSetting.prospectingInTown)
+                if (nManagerSetting.CurrentSetting.OnlyUseProspectingInTown)
                     return false;
 
-                if (nManagerSetting.CurrentSetting.prospectingList.Count <= 0)
+                if (nManagerSetting.CurrentSetting.MineralsToProspect.Count <= 0)
                     return false;
 
-                if ((lastTimeRunning + (nManagerSetting.CurrentSetting.prospectingTime * 60 * 1000)) > Others.Times)
+                if ((lastTimeRunning + (nManagerSetting.CurrentSetting.TimeBetweenEachProspectingAttempt * 60 * 1000)) > Others.Times)
                     return false;
 
                 if (!Usefuls.InGame ||
                     Usefuls.IsLoadingOrConnecting ||
                     ObjectManager.ObjectManager.Me.IsDeadMe ||
                     !ObjectManager.ObjectManager.Me.IsValid ||
-                    (ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))) ||
+                    (ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))) ||
                     ObjectManager.ObjectManager.Me.IsMounted ||
                     MovementManager.InMovement ||
                     !Products.Products.IsStarted)
                     return false;
 
 
-                if (Prospecting.NeedRun(nManagerSetting.CurrentSetting.prospectingList))
+                if (Prospecting.NeedRun(nManagerSetting.CurrentSetting.MineralsToProspect))
                     return true;
 
                 return false;
@@ -74,11 +74,11 @@ namespace nManager.Wow.Bot.States
             Logging.Write("Prospecting in progress");
             var timer = new Helpful.Timer(15*60*1000);
             // Prospecting
-            while (Prospecting.NeedRun(nManagerSetting.CurrentSetting.prospectingList) && Products.Products.IsStarted && Usefuls.InGame &&
+            while (Prospecting.NeedRun(nManagerSetting.CurrentSetting.MineralsToProspect) && Products.Products.IsStarted && Usefuls.InGame &&
                        !ObjectManager.ObjectManager.Me.InCombat && !ObjectManager.ObjectManager.Me.IsDeadMe && !timer.IsReady)
             {
                 Thread.Sleep(200);
-                Prospecting.Pulse(nManagerSetting.CurrentSetting.prospectingList);
+                Prospecting.Pulse(nManagerSetting.CurrentSetting.MineralsToProspect);
                 Thread.Sleep(750);
                 while (ObjectManager.ObjectManager.Me.IsCast && Products.Products.IsStarted && Usefuls.InGame &&
                        !ObjectManager.ObjectManager.Me.InCombat && !ObjectManager.ObjectManager.Me.IsDeadMe && !timer.IsReady)
diff --git a/The Noob Bot/nManager/Wow/Bot/States/Regeneration.cs b/The Noob Bot/nManager/Wow/Bot/States/Regeneration.cs
index 90c4d4a..b99748c 100644
--- a/The Noob Bot/nManager/Wow/Bot/States/Regeneration.cs	
+++ b/The Noob Bot/nManager/Wow/Bot/States/Regeneration.cs	
@@ -50,10 +50,10 @@ namespace nManager.Wow.Bot.States
 
                 // Need Regeneration
                 // Hp:
-                if (ObjectManager.ObjectManager.Me.HealthPercent <= nManagerSetting.CurrentSetting.foodPercent)
+                if (ObjectManager.ObjectManager.Me.HealthPercent <= nManagerSetting.CurrentSetting.EatFoodWhenHealthIsUnderXPercent)
                     return true;
                 // Mana:
-                if (ObjectManager.ObjectManager.Me.ManaPercentage <= nManagerSetting.CurrentSetting.drinkPercent && nManagerSetting.CurrentSetting.restingMana)
+                if (ObjectManager.ObjectManager.Me.ManaPercentage <= nManagerSetting.CurrentSetting.DrinkBeverageWhenManaIsUnderXPercent && nManagerSetting.CurrentSetting.DoRegenManaIfLow)
                     return true;
                 // Pet:
                 //if (ObjectManager.ObjectManager.Pet.HealthPercent <= Config.Bot.FormConfig.RegenPetMinHp && ObjectManager.ObjectManager.Pet.IsAlive && ObjectManager.ObjectManager.Pet.IsValid && Config.Bot.FormConfig.RegenPet)
@@ -69,9 +69,9 @@ namespace nManager.Wow.Bot.States
 
             try
             {
-                if ((ObjectManager.ObjectManager.Me.HealthPercent <= nManagerSetting.CurrentSetting.foodPercent) ||
+                if ((ObjectManager.ObjectManager.Me.HealthPercent <= nManagerSetting.CurrentSetting.EatFoodWhenHealthIsUnderXPercent) ||
                     // HP
-                    (ObjectManager.ObjectManager.Me.ManaPercentage <= nManagerSetting.CurrentSetting.drinkPercent && nManagerSetting.CurrentSetting.restingMana))
+                    (ObjectManager.ObjectManager.Me.ManaPercentage <= nManagerSetting.CurrentSetting.DrinkBeverageWhenManaIsUnderXPercent && nManagerSetting.CurrentSetting.DoRegenManaIfLow))
                     // MANA
                 {
                     Logging.Write("Regen started");
@@ -79,20 +79,20 @@ namespace nManager.Wow.Bot.States
                     Thread.Sleep(500);
 
                     // Use food:
-                    if (ObjectManager.ObjectManager.Me.HealthPercent <= nManagerSetting.CurrentSetting.foodPercent &&
-                        nManagerSetting.CurrentSetting.foodName != "")
+                    if (ObjectManager.ObjectManager.Me.HealthPercent <= nManagerSetting.CurrentSetting.EatFoodWhenHealthIsUnderXPercent &&
+                        nManagerSetting.CurrentSetting.FoodName != "")
                     {
                         ObjectManager.ObjectManager.Me.forceIsCast = true;
-                        ItemsManager.UseItem(nManagerSetting.CurrentSetting.foodName);
+                        ItemsManager.UseItem(nManagerSetting.CurrentSetting.FoodName);
                         Thread.Sleep(500);
                     }
 
                     // Use Water:
-                    if (ObjectManager.ObjectManager.Me.ManaPercentage <= nManagerSetting.CurrentSetting.drinkPercent &&
-                        nManagerSetting.CurrentSetting.drinkName != "" && nManagerSetting.CurrentSetting.restingMana)
+                    if (ObjectManager.ObjectManager.Me.ManaPercentage <= nManagerSetting.CurrentSetting.DrinkBeverageWhenManaIsUnderXPercent &&
+                        nManagerSetting.CurrentSetting.BeverageName != "" && nManagerSetting.CurrentSetting.DoRegenManaIfLow)
                     {
                         ObjectManager.ObjectManager.Me.forceIsCast = true;
-                        ItemsManager.UseItem(nManagerSetting.CurrentSetting.drinkName);
+                        ItemsManager.UseItem(nManagerSetting.CurrentSetting.BeverageName);
                         Thread.Sleep(500);
                     }
 
@@ -109,7 +109,7 @@ namespace nManager.Wow.Bot.States
                     }
 
                     while (ObjectManager.ObjectManager.Me.ManaPercentage <= 95 &&
-                           Products.Products.IsStarted && nManagerSetting.CurrentSetting.restingMana) // Wait Mana
+                           Products.Products.IsStarted && nManagerSetting.CurrentSetting.DoRegenManaIfLow) // Wait Mana
                     {
                         if (ObjectManager.ObjectManager.Me.IsDeadMe || ObjectManager.ObjectManager.Me.InCombat)
                         {
diff --git a/The Noob Bot/nManager/Wow/Bot/States/Reloger.cs b/The Noob Bot/nManager/Wow/Bot/States/Reloger.cs
index 2badb78..635e1fa 100644
--- a/The Noob Bot/nManager/Wow/Bot/States/Reloger.cs	
+++ b/The Noob Bot/nManager/Wow/Bot/States/Reloger.cs	
@@ -30,7 +30,7 @@ namespace nManager.Wow.Bot.States
                     return false;
 
                 // Need relogger
-                if (nManagerSetting.CurrentSetting.relogger && nManagerSetting.CurrentSetting.accountEmail != string.Empty && nManagerSetting.CurrentSetting.accountPassword != string.Empty)
+                if (nManagerSetting.CurrentSetting.ActivateReloggerFeature && nManagerSetting.CurrentSetting.EmailOfTheBattleNetAccount != string.Empty && nManagerSetting.CurrentSetting.PasswordOfTheBattleNetAccount != string.Empty)
                     if (!Usefuls.InGame)
                         return true;
 
@@ -64,12 +64,12 @@ namespace nManager.Wow.Bot.States
 
                 var s = new Login.SettingsLogin
                 { 
-                    Login = nManagerSetting.CurrentSetting.accountEmail,
-                    Password = nManagerSetting.CurrentSetting.accountPassword,
+                    Login = nManagerSetting.CurrentSetting.EmailOfTheBattleNetAccount,
+                    Password = nManagerSetting.CurrentSetting.PasswordOfTheBattleNetAccount,
                     Realm = Usefuls.RealmName,
                     Character = Memory.WowMemory.Memory.ReadUTF8String(Memory.WowProcess.WowModule +
                                                                             (uint)Addresses.Player.playerName),
-                    BNetName = nManagerSetting.CurrentSetting.bNetName,
+                    BNetName = nManagerSetting.CurrentSetting.BattleNetSubAccount,
                 };
 
                 Login.Pulse(s);
diff --git a/The Noob Bot/nManager/Wow/Bot/States/Resurrect.cs b/The Noob Bot/nManager/Wow/Bot/States/Resurrect.cs
index 02ac5e1..6ff5f07 100644
--- a/The Noob Bot/nManager/Wow/Bot/States/Resurrect.cs	
+++ b/The Noob Bot/nManager/Wow/Bot/States/Resurrect.cs	
@@ -68,7 +68,7 @@ namespace nManager.Wow.Bot.States
 
             #region GoToCorp
 
-            if (ObjectManager.ObjectManager.Me.PositionCorpse.X != 0 && ObjectManager.ObjectManager.Me.PositionCorpse.Y != 0 && !nManagerSetting.CurrentSetting.useSpiritHealer)
+            if (ObjectManager.ObjectManager.Me.PositionCorpse.X != 0 && ObjectManager.ObjectManager.Me.PositionCorpse.Y != 0 && !nManagerSetting.CurrentSetting.UseSpiritHealer)
             {
                 while (Usefuls.IsLoadingOrConnecting && Products.Products.IsStarted && Usefuls.InGame)
                 {
@@ -89,7 +89,7 @@ namespace nManager.Wow.Bot.States
                 {
                     tPointCorps = ObjectManager.ObjectManager.Me.PositionCorpse;
                     List<Point> points = PathFinder.FindPath(tPointCorps);
-                    if (points.Count > 1 || (points.Count <= 1 && !nManagerSetting.CurrentSetting.useSpiritHealer))
+                    if (points.Count > 1 || (points.Count <= 1 && !nManagerSetting.CurrentSetting.UseSpiritHealer))
                         MovementManager.Go(points);
                 }
                 while ((MovementManager.InMovement || LongMove.IsLongMove) &&
@@ -143,7 +143,7 @@ namespace nManager.Wow.Bot.States
 
             #region SpiritHealer
 
-            if (nManagerSetting.CurrentSetting.useSpiritHealer)
+            if (nManagerSetting.CurrentSetting.UseSpiritHealer)
             {
                 Thread.Sleep(4000);
                 var objectSpiritHealer =
diff --git a/The Noob Bot/nManager/Wow/Bot/States/SmeltingState.cs b/The Noob Bot/nManager/Wow/Bot/States/SmeltingState.cs
index 8225f85..21935da 100644
--- a/The Noob Bot/nManager/Wow/Bot/States/SmeltingState.cs	
+++ b/The Noob Bot/nManager/Wow/Bot/States/SmeltingState.cs	
@@ -29,14 +29,14 @@ namespace nManager.Wow.Bot.States
         {
             get
             {
-                if (!nManagerSetting.CurrentSetting.smelting)
+                if (!nManagerSetting.CurrentSetting.ActivateAutoSmelting)
                     return false;
 
                 if (!Usefuls.InGame ||
                     Usefuls.IsLoadingOrConnecting ||
                     ObjectManager.ObjectManager.Me.IsDeadMe ||
                     !ObjectManager.ObjectManager.Me.IsValid ||
-                    (ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))) ||
+                    (ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))) ||
                     !Products.Products.IsStarted)
                     return false;
 
@@ -86,7 +86,7 @@ namespace nManager.Wow.Bot.States
                     var timer = new Helpful.Timer(((int) Math.DistanceListPoint(pointssmelting)/3*1000) + 5000);
                     Thread.Sleep(700);
                     while (MovementManager.InMovement && Products.Products.IsStarted && Usefuls.InGame &&
-                           !(ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))) && !ObjectManager.ObjectManager.Me.IsDeadMe)
+                           !(ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))) && !ObjectManager.ObjectManager.Me.IsDeadMe)
                     {
                         if (timer.IsReady)
                             MovementManager.StopMove();
diff --git a/The Noob Bot/nManager/Wow/Bot/States/StopBotIf.cs b/The Noob Bot/nManager/Wow/Bot/States/StopBotIf.cs
index 8bb5df0..3a8fa78 100644
--- a/The Noob Bot/nManager/Wow/Bot/States/StopBotIf.cs	
+++ b/The Noob Bot/nManager/Wow/Bot/States/StopBotIf.cs	
@@ -61,7 +61,7 @@ namespace nManager.Wow.Bot.States
         public override void Run()
         {
             // If Bag Full
-            if (nManagerSetting.CurrentSetting.closeIfFullBag)
+            if (nManagerSetting.CurrentSetting.StopTNBIfBagAreFull)
             {
                if (Usefuls.GetContainerNumFreeSlots <= 0 && Usefuls.InGame && !Usefuls.IsLoadingOrConnecting)
                {
@@ -75,7 +75,7 @@ namespace nManager.Wow.Bot.States
             }
 
             // If 4000 honor
-            if (nManagerSetting.CurrentSetting.closeIfReached4000HonorPoints)
+            if (nManagerSetting.CurrentSetting.StopTNBIfHonorPointsLimitReached)
             {
                 if (Usefuls.GetHonorPoint >= 4000 && Usefuls.InGame && !Usefuls.IsLoadingOrConnecting)
                 {
@@ -89,7 +89,7 @@ namespace nManager.Wow.Bot.States
             }
 
             // If player teleported
-            if (nManagerSetting.CurrentSetting.closeIfPlayerTeleported)
+            if (nManagerSetting.CurrentSetting.StopTNBIfPlayerHaveBeenTeleported)
             {
                 if (_lastPos == null && Usefuls.InGame && !Usefuls.IsLoadingOrConnecting)
                     _lastPos = ObjectManager.ObjectManager.Me.Position;
@@ -106,14 +106,14 @@ namespace nManager.Wow.Bot.States
             // After X level
             if (_startedLevel == 0 && Usefuls.InGame && !Usefuls.IsLoadingOrConnecting)
                 _startedLevel = ObjectManager.ObjectManager.Me.Level;
-            if ((int)(ObjectManager.ObjectManager.Me.Level - _startedLevel) >= nManagerSetting.CurrentSetting.closeAfterXLevel && Usefuls.InGame && !Usefuls.IsLoadingOrConnecting)
+            if ((int)(ObjectManager.ObjectManager.Me.Level - _startedLevel) >= nManagerSetting.CurrentSetting.StopTNBAfterXLevelup && Usefuls.InGame && !Usefuls.IsLoadingOrConnecting)
             {
                 closeWow(Translate.Get(Translate.Id.Your_player_is_now_level) + " " + ObjectManager.ObjectManager.Me.Level + " (+" + (ObjectManager.ObjectManager.Me.Level - _startedLevel) + " " + Translate.Get(Translate.Id.level_upper) + ")");
                 return;
             }
 
             // After X blockages
-            if (Statistics.Stucks >= nManagerSetting.CurrentSetting.closeAfterXBlockages)
+            if (Statistics.Stucks >= nManagerSetting.CurrentSetting.StopTNBAfterXStucks)
             {
                 closeWow(Statistics.Stucks + " " + Translate.Get(Translate.Id.Blockages));
                 return;
@@ -122,14 +122,14 @@ namespace nManager.Wow.Bot.States
             // After X min
             if (_startedTime == 0)
                 _startedTime = Others.Times;
-            if (_startedTime + (nManagerSetting.CurrentSetting.closeAfterXMin * 60 * 1000) < Others.Times)
+            if (_startedTime + (nManagerSetting.CurrentSetting.StopTNBAfterXMinutes * 60 * 1000) < Others.Times)
             {
-                closeWow(Translate.Get(Translate.Id.tnb_started_since) + " " + nManagerSetting.CurrentSetting.closeAfterXMin + " " + Translate.Get(Translate.Id.min));
+                closeWow(Translate.Get(Translate.Id.tnb_started_since) + " " + nManagerSetting.CurrentSetting.StopTNBAfterXMinutes + " " + Translate.Get(Translate.Id.min));
                 return;
             }
 
             // Pause bot if player near
-            if (nManagerSetting.CurrentSetting.securityPauseBotIfNerbyPlayer && Usefuls.InGame && !Usefuls.IsLoadingOrConnecting)
+            if (nManagerSetting.CurrentSetting.PauseTNBIfNearByPlayer && Usefuls.InGame && !Usefuls.IsLoadingOrConnecting)
             {
                 if (!_inPause && !Products.Products.InPause)
                 {
@@ -160,11 +160,11 @@ namespace nManager.Wow.Bot.States
                 if (!String.IsNullOrWhiteSpace(msg))
                 {
                     _numberWhisper++;
-                    if (nManagerSetting.CurrentSetting.securityRecordWhisperInLogFile)
+                    if (nManagerSetting.CurrentSetting.RecordWhispsInLogFiles)
                         Logging.Write(msg, Logging.LogType.Normal, Color.BlueViolet);
-                    if (_numberWhisper >= nManagerSetting.CurrentSetting.closeIfWhisperBiggerOrEgalAt)
+                    if (_numberWhisper >= nManagerSetting.CurrentSetting.StopTNBIfReceivedAtMostXWhispers)
                         closeWow(Translate.Get(Translate.Id.Whisper_Egal_at) + " " + _numberWhisper);
-                    if (nManagerSetting.CurrentSetting.securitySongIfNewWhisper)
+                    if (nManagerSetting.CurrentSetting.PlayASongIfNewWhispReceived)
                     {
                         var t = new Thread(ThreadSoundNewWhisper) {Name = "Sound alarm", IsBackground = true};
                         t.Start();
diff --git a/The Noob Bot/nManager/Wow/Bot/States/Talents.cs b/The Noob Bot/nManager/Wow/Bot/States/Talents.cs
index 4703a77..dea01b2 100644
--- a/The Noob Bot/nManager/Wow/Bot/States/Talents.cs	
+++ b/The Noob Bot/nManager/Wow/Bot/States/Talents.cs	
@@ -46,7 +46,7 @@ namespace nManager.Wow.Bot.States
                     _lastLevel = ObjectManager.ObjectManager.Me.Level;
 
                 // Need Talents
-                if (nManagerSetting.CurrentSetting.assignTalents)
+                if (nManagerSetting.CurrentSetting.AutoAssignTalents)
                     if (ObjectManager.ObjectManager.Me.Level >= 10 && _lastLevel != ObjectManager.ObjectManager.Me.Level)
                         return true;
 
diff --git a/The Noob Bot/nManager/Wow/Bot/States/ToTown.cs b/The Noob Bot/nManager/Wow/Bot/States/ToTown.cs
index 0291617..4225d97 100644
--- a/The Noob Bot/nManager/Wow/Bot/States/ToTown.cs	
+++ b/The Noob Bot/nManager/Wow/Bot/States/ToTown.cs	
@@ -39,14 +39,14 @@ namespace nManager.Wow.Bot.States
         {
             get
             {
-                if (!nManagerSetting.CurrentSetting.repair && !nManagerSetting.CurrentSetting.useMail && !nManagerSetting.CurrentSetting.selling && (nManagerSetting.CurrentSetting.drinkAmount == 0 || nManagerSetting.CurrentSetting.drinkName == "") && (nManagerSetting.CurrentSetting.foodAmount == 0 || nManagerSetting.CurrentSetting.foodName == ""))
+                if (!nManagerSetting.CurrentSetting.ActivateAutoRepairFeature && !nManagerSetting.CurrentSetting.ActivateAutoMaillingFeature && !nManagerSetting.CurrentSetting.ActivateAutoSellingFeature && (nManagerSetting.CurrentSetting.NumberOfBeverageWeGot == 0 || nManagerSetting.CurrentSetting.BeverageName == "") && (nManagerSetting.CurrentSetting.NumberOfFoodsWeGot == 0 || nManagerSetting.CurrentSetting.FoodName == ""))
                     return false;
 
                 if (!Usefuls.InGame ||
                     Usefuls.IsLoadingOrConnecting ||
                     ObjectManager.ObjectManager.Me.IsDeadMe ||
                     !ObjectManager.ObjectManager.Me.IsValid ||
-                     (ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))) ||
+                     (ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))) ||
                     !Products.Products.IsStarted)
                         return false;
 
@@ -56,12 +56,12 @@ namespace nManager.Wow.Bot.States
 
                 if (Usefuls.GetContainerNumFreeSlots <= 2 &&
                     (NpcDB.GetNpcNearby(Npc.NpcType.Repair).Entry + NpcDB.GetNpcNearby(Npc.NpcType.Vendor).Entry) > 0
-                    && nManagerSetting.CurrentSetting.selling)
+                    && nManagerSetting.CurrentSetting.ActivateAutoSellingFeature)
                     return true;
 
                 if (Usefuls.GetContainerNumFreeSlots <= 2 &&
                      NpcDB.GetNpcNearby(Npc.NpcType.Mailbox).Entry > 0 &&
-                     nManagerSetting.CurrentSetting.useMail && nManagerSetting.CurrentSetting.mailRecipient != string.Empty)
+                     nManagerSetting.CurrentSetting.ActivateAutoMaillingFeature && nManagerSetting.CurrentSetting.MaillingFeatureRecipient != string.Empty)
                     return true;
 
                 return false;
@@ -75,8 +75,8 @@ namespace nManager.Wow.Bot.States
             Npc mailBox = null;
 
             // MailBox
-            if (nManagerSetting.CurrentSetting.useMail &&
-                    nManagerSetting.CurrentSetting.mailRecipient != string.Empty &&
+            if (nManagerSetting.CurrentSetting.ActivateAutoMaillingFeature &&
+                    nManagerSetting.CurrentSetting.MaillingFeatureRecipient != string.Empty &&
                     NpcDB.GetNpcNearby(Npc.NpcType.Mailbox).Entry > 0)
                 mailBox = NpcDB.GetNpcNearby(Npc.NpcType.Mailbox);
             // If need repair
@@ -114,7 +114,7 @@ namespace nManager.Wow.Bot.States
                     var timer = new Timer(((int)Math.DistanceListPoint(pointsVendor) / 3 * 1000) + 5000);
 
                     while (MovementManager.InMovement && Products.Products.IsStarted && Usefuls.InGame &&
-                           !(ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))) && !ObjectManager.ObjectManager.Me.IsDeadMe)
+                           !(ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))) && !ObjectManager.ObjectManager.Me.IsDeadMe)
                     {
                         if (timer.IsReady)
                             MovementManager.StopMove();
@@ -136,7 +136,7 @@ namespace nManager.Wow.Bot.States
                         MovementManager.Go(listPoint);
                         timer = new Timer(((int)Math.DistanceListPoint(listPoint) / 3 * 1000) + 5000);
                         while (MovementManager.InMovement && Products.Products.IsStarted && Usefuls.InGame &&
-                               !(ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))) &&
+                               !(ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))) &&
                                !ObjectManager.ObjectManager.Me.IsDeadMe)
                         {
                             if (timer.IsReady)
@@ -147,9 +147,9 @@ namespace nManager.Wow.Bot.States
                         }
 
                         // Prospection
-                        if (nManagerSetting.CurrentSetting.prospectingInTown && nManagerSetting.CurrentSetting.prospecting && nManagerSetting.CurrentSetting.prospectingList.Count > 0)
+                        if (nManagerSetting.CurrentSetting.OnlyUseProspectingInTown && nManagerSetting.CurrentSetting.ActivateAutoProspecting && nManagerSetting.CurrentSetting.MineralsToProspect.Count > 0)
                         {
-                            if (Prospecting.NeedRun(nManagerSetting.CurrentSetting.prospectingList))
+                            if (Prospecting.NeedRun(nManagerSetting.CurrentSetting.MineralsToProspect))
                             {
                                 var prospectingState = new ProspectingState();
                                 prospectingState.Run();
@@ -159,9 +159,9 @@ namespace nManager.Wow.Bot.States
 
 
                         // Milling
-                        if (nManagerSetting.CurrentSetting.millingInTown && nManagerSetting.CurrentSetting.milling && nManagerSetting.CurrentSetting.millingList.Count > 0)
+                        if (nManagerSetting.CurrentSetting.OnlyUseMillingInTown && nManagerSetting.CurrentSetting.ActivateAutoMilling && nManagerSetting.CurrentSetting.HerbsToBeMilled.Count > 0)
                         {
-                            if (Prospecting.NeedRun(nManagerSetting.CurrentSetting.millingList))
+                            if (Prospecting.NeedRun(nManagerSetting.CurrentSetting.HerbsToBeMilled))
                             {
                                 var millingState = new MillingState();
                                 millingState.Run();
@@ -170,7 +170,7 @@ namespace nManager.Wow.Bot.States
                         // End Milling
 
                         if (ObjectManager.ObjectManager.Me.Position.DistanceTo(vendorObj.Position) < 5 && Products.Products.IsStarted &&
-                            !(ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))))
+                            !(ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))))
                         {
                             Interact.InteractGameObject(vendorObj.GetBaseAddress);
                             Thread.Sleep(1500);
@@ -185,17 +185,17 @@ namespace nManager.Wow.Bot.States
 
                             // Sell:
                             var vQuality = new List<WoWItemQuality>();
-                            if (nManagerSetting.CurrentSetting.sellGray)
+                            if (nManagerSetting.CurrentSetting.SellGray)
                                 vQuality.Add(WoWItemQuality.Poor);
-                            if (nManagerSetting.CurrentSetting.sellWhite)
+                            if (nManagerSetting.CurrentSetting.SellWhite)
                                 vQuality.Add(WoWItemQuality.Common);
-                            if (nManagerSetting.CurrentSetting.sellGreen)
+                            if (nManagerSetting.CurrentSetting.SellGreen)
                                 vQuality.Add(WoWItemQuality.Uncommon);
-                            if (nManagerSetting.CurrentSetting.sellBlue)
+                            if (nManagerSetting.CurrentSetting.SellBlue)
                                 vQuality.Add(WoWItemQuality.Rare);
-                            if (nManagerSetting.CurrentSetting.sellPurple)
+                            if (nManagerSetting.CurrentSetting.SellPurple)
                                 vQuality.Add(WoWItemQuality.Epic);
-                            Vendor.SellItems(nManagerSetting.CurrentSetting.forceSellList, nManagerSetting.CurrentSetting.doNotSellList, vQuality);
+                            Vendor.SellItems(nManagerSetting.CurrentSetting.ForceToSellTheseItems, nManagerSetting.CurrentSetting.DontSellTheseItems, vQuality);
                             Logging.Write("Sell items");
                             Thread.Sleep(3000);
 
@@ -206,11 +206,11 @@ namespace nManager.Wow.Bot.States
                                 Logging.Write("Buy drink and food");
                                 for (int i = 0; i < 10 && NeededBuyFood(); i++)
                                 {
-                                    Vendor.BuyItem(nManagerSetting.CurrentSetting.foodName, 1);
+                                    Vendor.BuyItem(nManagerSetting.CurrentSetting.FoodName, 1);
                                 }
                                 for (int i = 0; i < 10 && NeededBuyDrink(); i++)
                                 {
-                                    Vendor.BuyItem(nManagerSetting.CurrentSetting.drinkName, 1);
+                                    Vendor.BuyItem(nManagerSetting.CurrentSetting.BeverageName, 1);
                                 }
                             }
 
@@ -251,7 +251,7 @@ namespace nManager.Wow.Bot.States
                 var timer = new Timer(((int)Math.DistanceListPoint(pointsMail) / 3 * 1000) + 5000);
                 Thread.Sleep(700);
                 while (MovementManager.InMovement && Products.Products.IsStarted && Usefuls.InGame &&
-                        !(ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))) && !ObjectManager.ObjectManager.Me.IsDeadMe)
+                        !(ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))) && !ObjectManager.ObjectManager.Me.IsDeadMe)
                 {
                     if (timer.IsReady)
                         MovementManager.StopMove();
@@ -261,9 +261,9 @@ namespace nManager.Wow.Bot.States
                 }
 
                 // Prospection
-                if (nManagerSetting.CurrentSetting.prospectingInTown && nManagerSetting.CurrentSetting.prospecting && nManagerSetting.CurrentSetting.prospectingList.Count > 0)
+                if (nManagerSetting.CurrentSetting.OnlyUseProspectingInTown && nManagerSetting.CurrentSetting.ActivateAutoProspecting && nManagerSetting.CurrentSetting.MineralsToProspect.Count > 0)
                 {
-                    if (Prospecting.NeedRun(nManagerSetting.CurrentSetting.prospectingList))
+                    if (Prospecting.NeedRun(nManagerSetting.CurrentSetting.MineralsToProspect))
                     {
                         var prospectingState = new ProspectingState();
                         prospectingState.Run();
@@ -284,7 +284,7 @@ namespace nManager.Wow.Bot.States
                     MovementManager.Go(listPoint);
                     timer = new Timer(((int)Math.DistanceListPoint(listPoint) / 3 * 1000) + 5000);
                     while (MovementManager.InMovement && Products.Products.IsStarted && Usefuls.InGame &&
-                            !(ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))) && !ObjectManager.ObjectManager.Me.IsDeadMe)
+                            !(ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))) && !ObjectManager.ObjectManager.Me.IsDeadMe)
                     {
                         if (timer.IsReady)
                             MovementManager.StopMove();
@@ -294,20 +294,20 @@ namespace nManager.Wow.Bot.States
                     }
 
                     if (ObjectManager.ObjectManager.Me.Position.DistanceTo(mailBoxObj.Position) < 5 && Products.Products.IsStarted &&
-                        !(ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))))
+                        !(ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))))
                     {
                         Interact.InteractGameObject(mailBoxObj.GetBaseAddress);
                         Thread.Sleep(500);
                         var mQuality = new List<WoWItemQuality>();
-                        if (nManagerSetting.CurrentSetting.mailGray)
+                        if (nManagerSetting.CurrentSetting.MailGray)
                             mQuality.Add(WoWItemQuality.Poor);
-                        if (nManagerSetting.CurrentSetting.mailWhite)
+                        if (nManagerSetting.CurrentSetting.MailWhite)
                             mQuality.Add(WoWItemQuality.Common);
-                        if (nManagerSetting.CurrentSetting.mailGreen)
+                        if (nManagerSetting.CurrentSetting.MailGreen)
                             mQuality.Add(WoWItemQuality.Uncommon);
-                        if (nManagerSetting.CurrentSetting.mailBlue)
+                        if (nManagerSetting.CurrentSetting.MailBlue)
                             mQuality.Add(WoWItemQuality.Rare);
-                        if (nManagerSetting.CurrentSetting.mailPurple)
+                        if (nManagerSetting.CurrentSetting.MailPurple)
                             mQuality.Add(WoWItemQuality.Epic);
 
                         var needRunAgain = true;
@@ -315,11 +315,11 @@ namespace nManager.Wow.Bot.States
                         {
                             Interact.InteractGameObject(mailBoxObj.GetBaseAddress);
                             Thread.Sleep(1000);
-                            Mail.SendMessage(nManagerSetting.CurrentSetting.mailRecipient, nManagerSetting.CurrentSetting.mailSubject, "",
-                                                nManagerSetting.CurrentSetting.forceMailList, nManagerSetting.CurrentSetting.doNotMailList, mQuality, out needRunAgain);
+                            Mail.SendMessage(nManagerSetting.CurrentSetting.MaillingFeatureRecipient, nManagerSetting.CurrentSetting.MaillingFeatureSubject, "",
+                                                nManagerSetting.CurrentSetting.ForceToMailTheseItems, nManagerSetting.CurrentSetting.DontMailTheseItems, mQuality, out needRunAgain);
                             Thread.Sleep(500);
                         }
-                        Logging.Write("Mail sending at " + nManagerSetting.CurrentSetting.mailRecipient);
+                        Logging.Write("Mail sending at " + nManagerSetting.CurrentSetting.MaillingFeatureRecipient);
                     }
                     else
                     {
@@ -337,9 +337,9 @@ namespace nManager.Wow.Bot.States
         bool NeededBuyFood()
         {
             // food
-            if (nManagerSetting.CurrentSetting.foodName != "" && nManagerSetting.CurrentSetting.foodAmount > 0)
+            if (nManagerSetting.CurrentSetting.FoodName != "" && nManagerSetting.CurrentSetting.NumberOfFoodsWeGot > 0)
             {
-                if (ItemsManager.GetItemCountByNameLUA(nManagerSetting.CurrentSetting.foodName) < nManagerSetting.CurrentSetting.foodAmount)
+                if (ItemsManager.GetItemCountByNameLUA(nManagerSetting.CurrentSetting.FoodName) < nManagerSetting.CurrentSetting.NumberOfFoodsWeGot)
                     return true;
             }
             return false;
@@ -348,9 +348,9 @@ namespace nManager.Wow.Bot.States
         bool NeededBuyDrink()
         {
             // Drink
-            if (nManagerSetting.CurrentSetting.drinkName != "" && nManagerSetting.CurrentSetting.drinkAmount > 0)
+            if (nManagerSetting.CurrentSetting.BeverageName != "" && nManagerSetting.CurrentSetting.NumberOfBeverageWeGot > 0)
             {
-                if (ItemsManager.GetItemCountByNameLUA(nManagerSetting.CurrentSetting.drinkName) < nManagerSetting.CurrentSetting.drinkAmount)
+                if (ItemsManager.GetItemCountByNameLUA(nManagerSetting.CurrentSetting.BeverageName) < nManagerSetting.CurrentSetting.NumberOfBeverageWeGot)
                     return true;
             }
             return false;
diff --git a/The Noob Bot/nManager/Wow/Bot/States/Trainers.cs b/The Noob Bot/nManager/Wow/Bot/States/Trainers.cs
index 9109833..e0ccb11 100644
--- a/The Noob Bot/nManager/Wow/Bot/States/Trainers.cs	
+++ b/The Noob Bot/nManager/Wow/Bot/States/Trainers.cs	
@@ -43,7 +43,7 @@ namespace nManager.Wow.Bot.States
                     Usefuls.IsLoadingOrConnecting ||
                     ObjectManager.ObjectManager.Me.IsDeadMe ||
                     !ObjectManager.ObjectManager.Me.IsValid ||
-                   (ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))) ||
+                   (ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))) ||
                     !Products.Products.IsStarted)
                     return false;
 
@@ -52,17 +52,17 @@ namespace nManager.Wow.Bot.States
                     _lastLevel = ObjectManager.ObjectManager.Me.Level;
 
                 // Herbalism:
-                if (NpcDB.GetNpcNearby(Npc.NpcType.HerbalismTrainer).Entry > 0 && nManagerSetting.CurrentSetting.harvestHerbs && nManagerSetting.CurrentSetting.trainNewSkills &&
+                if (NpcDB.GetNpcNearby(Npc.NpcType.HerbalismTrainer).Entry > 0 && nManagerSetting.CurrentSetting.ActivateHerbsHarvesting && nManagerSetting.CurrentSetting.TrainNewSkills &&
                     (Skill.GetMaxValue(SkillLine.Herbalism) - Skill.GetValue(SkillLine.Herbalism)) <= 10 &&
                     Skill.GetValue(SkillLine.Herbalism) > 0)
                     return true;
                 // Mining:
-                if (NpcDB.GetNpcNearby(Npc.NpcType.MiningTrainer).Entry > 0 && nManagerSetting.CurrentSetting.harvestMinerals && nManagerSetting.CurrentSetting.trainNewSkills &&
+                if (NpcDB.GetNpcNearby(Npc.NpcType.MiningTrainer).Entry > 0 && nManagerSetting.CurrentSetting.ActivateVeinsHarvesting && nManagerSetting.CurrentSetting.TrainNewSkills &&
                     (Skill.GetMaxValue(SkillLine.Mining) - Skill.GetValue(SkillLine.Mining)) <= 10 &&
                     Skill.GetValue(SkillLine.Mining) > 0)
                     return true;
                 // Spell
-                if (ObjectManager.ObjectManager.Me.Level >= 3 && _lastLevel != ObjectManager.ObjectManager.Me.Level && nManagerSetting.CurrentSetting.trainNewSpells)
+                if (ObjectManager.ObjectManager.Me.Level >= 3 && _lastLevel != ObjectManager.ObjectManager.Me.Level && nManagerSetting.CurrentSetting.LearnNewSpells)
                     if (NpcDB.GetNpcNearby(MyTrainerClass()).Entry > 0 &&
                             SpellManager.SpellAvailable() > 0)
                         return true;
@@ -75,17 +75,17 @@ namespace nManager.Wow.Bot.States
         {
             Npc trainer = null;
             // Herbalism:
-            if (NpcDB.GetNpcNearby(Npc.NpcType.HerbalismTrainer).Entry > 0 && nManagerSetting.CurrentSetting.harvestHerbs && nManagerSetting.CurrentSetting.trainNewSkills &&
+            if (NpcDB.GetNpcNearby(Npc.NpcType.HerbalismTrainer).Entry > 0 && nManagerSetting.CurrentSetting.ActivateHerbsHarvesting && nManagerSetting.CurrentSetting.TrainNewSkills &&
                     (Skill.GetMaxValue(SkillLine.Herbalism) - Skill.GetValue(SkillLine.Herbalism)) <= 10 &&
                     Skill.GetValue(SkillLine.Herbalism) > 0)
                 trainer = NpcDB.GetNpcNearby(Npc.NpcType.HerbalismTrainer);
             // Mining:))
-            if (NpcDB.GetNpcNearby(Npc.NpcType.MiningTrainer).Entry > 0 && nManagerSetting.CurrentSetting.harvestMinerals && nManagerSetting.CurrentSetting.trainNewSkills &&
+            if (NpcDB.GetNpcNearby(Npc.NpcType.MiningTrainer).Entry > 0 && nManagerSetting.CurrentSetting.ActivateVeinsHarvesting && nManagerSetting.CurrentSetting.TrainNewSkills &&
                     (Skill.GetMaxValue(SkillLine.Mining) - Skill.GetValue(SkillLine.Mining)) <= 10 &&
                     Skill.GetValue(SkillLine.Mining) > 0 && trainer == null)
                 NpcDB.GetNpcNearby(Npc.NpcType.MiningTrainer);
             // Spell
-            if (ObjectManager.ObjectManager.Me.Level >= 3 && _lastLevel != ObjectManager.ObjectManager.Me.Level && nManagerSetting.CurrentSetting.trainNewSpells)
+            if (ObjectManager.ObjectManager.Me.Level >= 3 && _lastLevel != ObjectManager.ObjectManager.Me.Level && nManagerSetting.CurrentSetting.LearnNewSpells)
                 if (NpcDB.GetNpcNearby(MyTrainerClass()).Entry > 0 && SpellManager.SpellAvailable() > 0 && trainer == null)
                     trainer = NpcDB.GetNpcNearby(MyTrainerClass());
 
@@ -121,7 +121,7 @@ namespace nManager.Wow.Bot.States
             MovementManager.Go(points);
             int timer = Others.Times + ((int)Math.DistanceListPoint(points) / 3 * 1000) + 5000;
             while (MovementManager.InMovement && Products.Products.IsStarted && Usefuls.InGame &&
-                   !(ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))) &&
+                   !(ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))) &&
                    !ObjectManager.ObjectManager.Me.IsDeadMe)
             {
                 if (Others.Times > timer)
@@ -131,7 +131,7 @@ namespace nManager.Wow.Bot.States
                 Thread.Sleep(100);
             }
 
-            if ((ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))))
+            if ((ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))))
                 return;
 
             // GoTo trainer:
@@ -146,7 +146,7 @@ namespace nManager.Wow.Bot.States
                     MovementManager.Go(points);
                     timer = Others.Times + ((int)Math.DistanceListPoint(points) / 3 * 1000) + 5000;
                     while (MovementManager.InMovement && Products.Products.IsStarted && Usefuls.InGame &&
-                           !(ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))) &&
+                           !(ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))) &&
                            !ObjectManager.ObjectManager.Me.IsDeadMe)
                     {
                         if (tTrainer.Position.DistanceTo(ObjectManager.ObjectManager.Me.Position) < 5)
diff --git a/The Noob Bot/nManager/Wow/Bot/Tasks/FarmingTask.cs b/The Noob Bot/nManager/Wow/Bot/Tasks/FarmingTask.cs
index 0f2a54c..7271af4 100644
--- a/The Noob Bot/nManager/Wow/Bot/Tasks/FarmingTask.cs	
+++ b/The Noob Bot/nManager/Wow/Bot/Tasks/FarmingTask.cs	
@@ -162,7 +162,7 @@ namespace nManager.Wow.Bot.Tasks
                                 {
                                     Thread.Sleep(50);
                                 }
-                                if ((ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))))
+                                if ((ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))))
                                 {
                                     if (ObjectManager.ObjectManager.Me.HaveBuff(SpellManager.MountDruidId()))
                                         Lua.RunMacroText("/cancelform");
@@ -172,7 +172,7 @@ namespace nManager.Wow.Bot.Tasks
                                 if (nManagerSetting.CurrentSetting.AutoConfirmOnBoPItems)
                                     LootingTask.ConfirmOnBoPItems();
                                 Statistics.Farms++;
-                                if ((ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))))
+                                if ((ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))))
                                 {
                                     if (ObjectManager.ObjectManager.Me.HaveBuff(SpellManager.MountDruidId()))
                                         Lua.RunMacroText("/cancelform");
@@ -180,7 +180,7 @@ namespace nManager.Wow.Bot.Tasks
                                 }
                                 nManagerSetting.AddBlackList(node.Guid, 1000 * 20);
                                 Logging.Write("Farm successful");
-                                if (nManagerSetting.CurrentSetting.autoMakeElemental && !ObjectManager.ObjectManager.Me.InCombat)
+                                if (nManagerSetting.CurrentSetting.MakeStackOfElementalsItems && !ObjectManager.ObjectManager.Me.InCombat)
                                     Elemental.AutoMakeElemental();
 
                                 return;
@@ -224,8 +224,8 @@ namespace nManager.Wow.Bot.Tasks
                         var points = new List<Point>();
                         if (ObjectManager.ObjectManager.Me.Position.DistanceTo(node.Position) > 4.5f)
                         {
-                            if (ObjectManager.ObjectManager.Me.Position.DistanceTo(node.Position) >= nManagerSetting.CurrentSetting.mountDistance ||
-                                !nManagerSetting.CurrentSetting.useGroundMount)
+                            if (ObjectManager.ObjectManager.Me.Position.DistanceTo(node.Position) >= nManagerSetting.CurrentSetting.MinimumDistanceToUseMount ||
+                                !nManagerSetting.CurrentSetting.UseGroundMount)
                             {
                                 if (MountTask.GetMountCapacity() == MountCapacity.Fly)
                                 {
@@ -247,8 +247,8 @@ namespace nManager.Wow.Bot.Tasks
                             // fallback to ground mount or feet
                             bool r;
                             points = PathFinder.FindPath(node.Position, out r);
-                            if (ObjectManager.ObjectManager.Me.Position.DistanceTo(node.Position) >= nManagerSetting.CurrentSetting.mountDistance &&
-                                nManagerSetting.CurrentSetting.useGroundMount)
+                            if (ObjectManager.ObjectManager.Me.Position.DistanceTo(node.Position) >= nManagerSetting.CurrentSetting.MinimumDistanceToUseMount &&
+                                nManagerSetting.CurrentSetting.UseGroundMount)
                             {
                                 if (MountTask.GetMountCapacity() == MountCapacity.Ground && !MountTask.onGroundMount())
                                     MountTask.Mount();
@@ -264,7 +264,7 @@ namespace nManager.Wow.Bot.Tasks
                         Logging.Write("Farm " + node.Name + " > " + node.Position);
                         var timer = new Timer(((int)Math.DistanceListPoint(points) / 3 * 1000) + 4000);
                         while ((int)node.GetBaseAddress > 0 && Products.Products.IsStarted && !ObjectManager.ObjectManager.Me.IsDeadMe &&
-                               !(ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))) && !timer.IsReady)
+                               !(ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))) && !timer.IsReady)
                         {
                             if (ObjectManager.ObjectManager.Me.Position.DistanceTo(node.Position) <= 4.5f)
                             {
@@ -314,7 +314,7 @@ namespace nManager.Wow.Bot.Tasks
                                 Statistics.Farms++;
                                 nManagerSetting.AddBlackList(node.Guid, 1000 * 20); //60 * 5); // 20 sec instead of 5 min
                                 Logging.Write("Farm successful");
-                                if (nManagerSetting.CurrentSetting.autoMakeElemental && !ObjectManager.ObjectManager.Me.InCombat)
+                                if (nManagerSetting.CurrentSetting.MakeStackOfElementalsItems && !ObjectManager.ObjectManager.Me.InCombat)
                                     Elemental.AutoMakeElemental();
                                 return;
                             }
diff --git a/The Noob Bot/nManager/Wow/Bot/Tasks/LootingTask.cs b/The Noob Bot/nManager/Wow/Bot/Tasks/LootingTask.cs
index 43ef8d9..9b1609e 100644
--- a/The Noob Bot/nManager/Wow/Bot/Tasks/LootingTask.cs	
+++ b/The Noob Bot/nManager/Wow/Bot/Tasks/LootingTask.cs	
@@ -35,7 +35,7 @@ namespace nManager.Wow.Bot.Tasks
                             {
                                 if (wowUnit.IsLootable)
                                     Logging.Write("Loot " + wowUnit.Name);
-                                else if (wowUnit.IsSkinnable && nManagerSetting.CurrentSetting.skinMobs)
+                                else if (wowUnit.IsSkinnable && nManagerSetting.CurrentSetting.ActivateBeastSkinning)
                                     Logging.Write("Skin " + wowUnit.Name);
                                 else
                                     continue;
@@ -55,7 +55,7 @@ namespace nManager.Wow.Bot.Tasks
                                 while (!ObjectManager.ObjectManager.Me.IsDeadMe && (int)wowUnit.GetBaseAddress > 0 &&
                                        Products.Products.IsStarted &&
                                        ObjectManager.ObjectManager.GetNumberAttackPlayer() == 0 &&
-                                       !(ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))) &&
+                                       !(ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))) &&
                                        !timer.IsReady)
                                 {
                                     if (ObjectManager.ObjectManager.Me.Position.DistanceTo(wowUnit.Position) <= 4.0f)
@@ -72,23 +72,23 @@ namespace nManager.Wow.Bot.Tasks
                                         if (wowUnit.IsLootable)
                                         {
                                             Interact.InteractGameObject(wowUnit.GetBaseAddress);
-                                            if ((ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))))
+                                            if ((ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))))
                                             {
                                                 return;
                                             }
                                             Thread.Sleep(1250);
-                                            if (nManagerSetting.CurrentSetting.skinMobs && ObjectManager.ObjectManager.GetNumberAttackPlayer() > 0)
+                                            if (nManagerSetting.CurrentSetting.ActivateBeastSkinning && ObjectManager.ObjectManager.GetNumberAttackPlayer() > 0)
                                                 return;
                                             Statistics.Loots++;
-                                            if (nManagerSetting.CurrentSetting.autoMakeElemental && !ObjectManager.ObjectManager.Me.InCombat)
+                                            if (nManagerSetting.CurrentSetting.MakeStackOfElementalsItems && !ObjectManager.ObjectManager.Me.InCombat)
                                                 Elemental.AutoMakeElemental();
-                                            if (!nManagerSetting.CurrentSetting.skinMobs)
+                                            if (!nManagerSetting.CurrentSetting.ActivateBeastSkinning)
                                             {
                                                 nManagerSetting.AddBlackList(wowUnit.Guid, 1000 * 60 * 5);
                                                 break;
                                             }
                                         }
-                                        if (nManagerSetting.CurrentSetting.skinMobs && ObjectManager.ObjectManager.GetNumberAttackPlayer() == 0)
+                                        if (nManagerSetting.CurrentSetting.ActivateBeastSkinning && ObjectManager.ObjectManager.GetNumberAttackPlayer() == 0)
                                         {
                                             Thread.Sleep(1500);
                                             if (wowUnit.IsSkinnable)
@@ -100,12 +100,12 @@ namespace nManager.Wow.Bot.Tasks
                                                 {
                                                     Thread.Sleep(50);
                                                 }
-                                                if ((ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.ignoreFightGoundMount || Usefuls.IsFlying))))
+                                                if ((ObjectManager.ObjectManager.Me.InCombat && !(ObjectManager.ObjectManager.Me.IsMounted && (nManagerSetting.CurrentSetting.IgnoreFightIfMounted || Usefuls.IsFlying))))
                                                 {
                                                     return;
                                                 }
                                                 Thread.Sleep(1000);
-                                                if (nManagerSetting.CurrentSetting.skinMobs &&
+                                                if (nManagerSetting.CurrentSetting.ActivateBeastSkinning &&
                                                     ObjectManager.ObjectManager.GetNumberAttackPlayer() > 0)
                                                     return;
                                                 Statistics.Farms++;
diff --git a/The Noob Bot/nManager/Wow/Bot/Tasks/MountTask.cs b/The Noob Bot/nManager/Wow/Bot/Tasks/MountTask.cs
index 083a359..e84e2ff 100644
--- a/The Noob Bot/nManager/Wow/Bot/Tasks/MountTask.cs	
+++ b/The Noob Bot/nManager/Wow/Bot/Tasks/MountTask.cs	
@@ -152,7 +152,7 @@ namespace nManager.Wow.Bot.Tasks
                 if (ObjectManager.ObjectManager.Me.IsMounted && !onGroundMount())
                     DismountMount(stopMove);
 
-                if (!ObjectManager.ObjectManager.Me.IsMounted && nManagerSetting.CurrentSetting.useGroundMount && Usefuls.IsOutdoors)
+                if (!ObjectManager.ObjectManager.Me.IsMounted && nManagerSetting.CurrentSetting.UseGroundMount && Usefuls.IsOutdoors)
                 {
                     if (stopMove)
                         MovementManager.StopMove();
diff --git a/The Noob Bot/nManager/Wow/Helpers/ConfigWowForThisBot.cs b/The Noob Bot/nManager/Wow/Helpers/ConfigWowForThisBot.cs
index 92f8b62..210e53f 100644
--- a/The Noob Bot/nManager/Wow/Helpers/ConfigWowForThisBot.cs	
+++ b/The Noob Bot/nManager/Wow/Helpers/ConfigWowForThisBot.cs	
@@ -46,7 +46,7 @@ namespace nManager.Wow.Helpers
                                                      (uint) Addresses.AutoLoot.AutoLoot_Activate_Pointer) +
                     (uint) Addresses.AutoLoot.AutoLoot_Activate_Offset, 1);
                 Lua.LuaDoString("SetCVar(\"ScriptErrors\", \"0\")");
-                if (nManagerSetting.CurrentSetting.MaxFPSSwitch)
+                if (nManagerSetting.CurrentSetting.AllowTNBToSetYourMapFps)
                 {
                     Lua.LuaDoString("ConsoleExec(\"maxfpsbk 60\")");
                     Lua.LuaDoString("ConsoleExec(\"MaxFPS 60\")");
diff --git a/The Noob Bot/nManager/Wow/Helpers/MovementManager.cs b/The Noob Bot/nManager/Wow/Helpers/MovementManager.cs
index c04a461..08b64b0 100644
--- a/The Noob Bot/nManager/Wow/Helpers/MovementManager.cs	
+++ b/The Noob Bot/nManager/Wow/Helpers/MovementManager.cs	
@@ -182,9 +182,9 @@ namespace nManager.Wow.Helpers
                             return;
                     }
 
-                    if (nManagerSetting.CurrentSetting.useGroundMount)
+                    if (nManagerSetting.CurrentSetting.UseGroundMount)
                     {
-                        if (Math.DistanceListPoint(_points) >= nManagerSetting.CurrentSetting.mountDistance || _loop)
+                        if (Math.DistanceListPoint(_points) >= nManagerSetting.CurrentSetting.MinimumDistanceToUseMount || _loop)
                             Bot.Tasks.MountTask.Mount(false);
                     }
                     _lastNbStuck = StuckCount;
diff --git a/The Noob Bot/nManager/Wow/Helpers/NpcDB.cs b/The Noob Bot/nManager/Wow/Helpers/NpcDB.cs
index 34dcb24..8b08c6c 100644
--- a/The Noob Bot/nManager/Wow/Helpers/NpcDB.cs	
+++ b/The Noob Bot/nManager/Wow/Helpers/NpcDB.cs	
@@ -128,7 +128,7 @@ namespace nManager.Wow.Helpers
                     if ((npc.Faction == faction || npc.Faction == Npc.FactionType.Neutral) && npc.Type == type && npc.ContinentId == continentId)
                     {
                         if (npcTemp.Position.DistanceTo(currentPosition) > npc.Position.DistanceTo(currentPosition) || npcTemp.Position.X == 0)
-                            if (npc.Position.DistanceTo(currentPosition) <= nManagerSetting.CurrentSetting.npcMailboxSearchRadius)
+                            if (npc.Position.DistanceTo(currentPosition) <= nManagerSetting.CurrentSetting.MaxDistanceToGoToMailboxesOrNPCs)
                                 npcTemp = npc;
                     }
                 }
diff --git a/The Noob Bot/nManager/Wow/Helpers/PathFinder.cs b/The Noob Bot/nManager/Wow/Helpers/PathFinder.cs
index 15f233d..a8dc080 100644
--- a/The Noob Bot/nManager/Wow/Helpers/PathFinder.cs	
+++ b/The Noob Bot/nManager/Wow/Helpers/PathFinder.cs	
@@ -18,7 +18,7 @@ namespace nManager.Wow.Helpers
         /// <value>
         ///   <c>true</c> if [use pather finder]; otherwise, <c>false</c>.
         /// </value>
-        public static bool UsePatherFind { get { return nManagerSetting.CurrentSetting.usePathsFinder; } }
+        public static bool UsePatherFind { get { return nManagerSetting.CurrentSetting.ActivatePathFindingFeature; } }
         private static Pather _pather;
 
         /// <summary>
diff --git a/The Noob Bot/nManager/Wow/ObjectManager/WoWGameObject.cs b/The Noob Bot/nManager/Wow/ObjectManager/WoWGameObject.cs
index 077dabb..75cae64 100644
--- a/The Noob Bot/nManager/Wow/ObjectManager/WoWGameObject.cs	
+++ b/The Noob Bot/nManager/Wow/ObjectManager/WoWGameObject.cs	
@@ -245,15 +245,15 @@ namespace nManager.Wow.ObjectManager
                                     break; // let's accept it, we check for quest later in code and act like if no lock was set
 
                                 // Prevent herbing when the setting is off
-                                if (skill == SkillLine.Herbalism && !nManagerSetting.CurrentSetting.harvestHerbs)
+                                if (skill == SkillLine.Herbalism && !nManagerSetting.CurrentSetting.ActivateHerbsHarvesting)
                                     return false;
                                 // Prevent mining when the setting is off
-                                if (skill == SkillLine.Mining && !nManagerSetting.CurrentSetting.harvestMinerals)
+                                if (skill == SkillLine.Mining && !nManagerSetting.CurrentSetting.ActivateVeinsHarvesting)
                                     return false;
 
                                 uint reqSkillValue = Row.Record.Skill[j];
 
-                                if (skill == SkillLine.Lockpicking && !nManagerSetting.CurrentSetting.lootChests)
+                                if (skill == SkillLine.Lockpicking && !nManagerSetting.CurrentSetting.ActivateChestLooting)
                                     return false;
 
                                 // special case for rogues and lockpicking since the skill does not exist anymore
@@ -292,7 +292,7 @@ namespace nManager.Wow.ObjectManager
                     }
                 }
                 // No lock = no gathering GameObject, then obey to lootChests setting or all lock passed
-                if (!nManagerSetting.CurrentSetting.lootChests)
+                if (!nManagerSetting.CurrentSetting.ActivateChestLooting)
                     return false;
 
                 // Finaly we check if a quest is required
diff --git a/The Noob Bot/nManager/nManagerSetting.cs b/The Noob Bot/nManager/nManagerSetting.cs
index 39af6da..4389140 100644
--- a/The Noob Bot/nManager/nManagerSetting.cs	
+++ b/The Noob Bot/nManager/nManagerSetting.cs	
@@ -180,83 +180,84 @@ namespace nManager
         }
 
         public string customClass = "TheNoobBot.dll";
-        public bool assignTalents;
-        public bool trainNewSkills = true;
-        public bool trainNewSpells = true;
-        public bool canAttackUnitsAlreadyInFight;
-        public bool dontStartFighting;
-        public bool useSpiritHealer;
-        public bool useGroundMount = true;
+        public bool AutoAssignTalents;
+        public bool TrainNewSkills = true;
+        public bool LearnNewSpells = true;
+        public bool CanPullUnitsAlreadyInFight;
+        public bool DontPullMonsters;
+        public bool UseSpiritHealer;
+        public bool UseGroundMount = true;
         public string GroundMountName = "";
-        public float mountDistance = 80;
-        public bool ignoreFightGoundMount = true;
+        public float MinimumDistanceToUseMount = 80;
+        public bool IgnoreFightIfMounted = true;
         public string FlyingMountName = "";
         public string AquaticMountName = "";
-        public string foodName = "";
-        public int foodPercent = 35;
-        public string drinkName = "";
-        public int drinkPercent = 35;
-        public bool restingMana;
-        public bool lootMobs = true;
-        public bool lootChests;
-        public bool skinMobs;
-        public bool skinNinja;
-        public bool harvestMinerals = true;
-        public bool harvestHerbs = true;
-        public float harvestAvoidPlayersRadius = 10;
-        public int maxUnitsNear = 3;
-        public float searchRadius = 100;
-        public bool harvestDuringLongMove;
-        public bool smelting;
-        public bool prospecting;
-        public bool prospectingInTown;
-        public int prospectingTime = 15;
-        public List<string> prospectingList = new List<string>();
-        public bool milling;
-        public bool millingInTown;
-        public int millingTime = 15;
-        public List<string> millingList = new List<string>();
-        public List<int> blackListHarvest = new List<int>();
-        public bool autoMakeElemental;
-        public bool relogger;
-        public string accountEmail = "";
-        public string accountPassword = "";
-        public string bNetName = "";
-        public int foodAmount;
-        public int drinkAmount;
-        public bool repair = true;
-        public bool selling;
-        public bool sellGray = true;
-        public bool sellWhite;
-        public bool sellGreen;
-        public bool sellBlue;
-        public bool sellPurple;
-        public List<string> doNotSellList = new List<string>();
-        public List<string> forceSellList = new List<string>();
-        public bool useMail;
-        public string mailRecipient = "";
-        public string mailSubject = "Hey";
-        public bool mailGray;
-        public bool mailWhite = true;
-        public bool mailGreen = true;
-        public bool mailBlue = true;
-        public bool mailPurple = true;
-        public List<string> doNotMailList = new List<string>();
-        public List<string> forceMailList = new List<string>();
-        public bool closeIfFullBag;
-        public bool closeIfReached4000HonorPoints;
-        public bool closeIfPlayerTeleported = true;
-        public int closeAfterXLevel = 90;
-        public int closeIfWhisperBiggerOrEgalAt = 10;
-        public int closeAfterXBlockages = 80;
-        public int closeAfterXMin = 1440;
-        public bool securityPauseBotIfNerbyPlayer;
-        public bool securityRecordWhisperInLogFile = true;
-        public bool securitySongIfNewWhisper;
-        public bool usePathsFinder = true;
-        public bool MaxFPSSwitch = true;
-        public float npcMailboxSearchRadius = 1000;
+        public string FoodName = "";
+        public int EatFoodWhenHealthIsUnderXPercent = 35;
+        public string BeverageName = "";
+        public int DrinkBeverageWhenManaIsUnderXPercent = 35;
+        public bool DoRegenManaIfLow;
+        public bool ActivateMonsterLooting = true;
+        public bool ActivateChestLooting;
+        public bool ActivateBeastSkinning;
+        public bool BeastNinjaSkinning;
+        // This settings is only used in Bot.States.Looting.cs, does it works as intented ? (Skin beasts killed by others player)
+        public bool ActivateVeinsHarvesting = true;
+        public bool ActivateHerbsHarvesting = true;
+        public float DontHarvestIfPlayerNearRadius = 10;
+        public int DontHarvestIfMoreThanOneUnitInAggroRange = 3;
+        public float GatheringSearchRadius = 100;
+        public bool HarvestDuringLongDistanceMovements;
+        public bool ActivateAutoSmelting;
+        public bool ActivateAutoProspecting;
+        public bool OnlyUseProspectingInTown;
+        public int TimeBetweenEachProspectingAttempt = 15;
+        public List<string> MineralsToProspect = new List<string>();
+        public bool ActivateAutoMilling;
+        public bool OnlyUseMillingInTown;
+        public int TimeBetweenEachMillingAttempt = 15;
+        public List<string> HerbsToBeMilled = new List<string>();
+        public List<int> DontHarvestTheFollowingObjects = new List<int>(); // TODO Use this settings to avoid looting specific entrys.
+        public bool MakeStackOfElementalsItems;
+        public bool ActivateReloggerFeature;
+        public string EmailOfTheBattleNetAccount = "";
+        public string PasswordOfTheBattleNetAccount = "";
+        public string BattleNetSubAccount = "";
+        public int NumberOfFoodsWeGot; // TODO Count the items instead (!?)
+        public int NumberOfBeverageWeGot; // TODO Count the items instead (!?)
+        public bool ActivateAutoRepairFeature = true;
+        public bool ActivateAutoSellingFeature;
+        public bool SellGray = true;
+        public bool SellWhite;
+        public bool SellGreen;
+        public bool SellBlue;
+        public bool SellPurple;
+        public List<string> DontSellTheseItems = new List<string>();
+        public List<string> ForceToSellTheseItems = new List<string>();
+        public bool ActivateAutoMaillingFeature;
+        public string MaillingFeatureRecipient = "";
+        public string MaillingFeatureSubject = "Hey";
+        public bool MailGray;
+        public bool MailWhite = true;
+        public bool MailGreen = true;
+        public bool MailBlue = true;
+        public bool MailPurple = true;
+        public List<string> DontMailTheseItems = new List<string>();
+        public List<string> ForceToMailTheseItems = new List<string>();
+        public bool StopTNBIfBagAreFull;
+        public bool StopTNBIfHonorPointsLimitReached;
+        public bool StopTNBIfPlayerHaveBeenTeleported = true;
+        public int StopTNBAfterXLevelup = 90;
+        public int StopTNBIfReceivedAtMostXWhispers = 10;
+        public int StopTNBAfterXStucks = 80;
+        public int StopTNBAfterXMinutes = 1440;
+        public bool PauseTNBIfNearByPlayer;
+        public bool RecordWhispsInLogFiles = true;
+        public bool PlayASongIfNewWhispReceived;
+        public bool ActivatePathFindingFeature = true;
+        public bool AllowTNBToSetYourMapFps = true;
+        public float MaxDistanceToGoToMailboxesOrNPCs = 1000;
         public bool AutoConfirmOnBoPItems = true;
-        public bool AlwaysOnTop;
+        public bool ActivateAlwaysOnTopFeature;
     }
 }
